

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Dec 22 12:11:12 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	idataBANK5,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   172                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   173                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   174  0000                     
   175                           	psect	idataBANK1
   176  01B1C6                     __pidataBANK1:
   177                           	opt stack 0
   178                           
   179                           ;initializer for _Case_Call
   180  01B1C6  01                 	db	1
   181                           
   182                           ;initializer for _Start_up_Error
   183  01B1C7  02                 	db	2
   184                           
   185                           	psect	idataBANK5
   186  01B1C8                     __pidataBANK5:
   187                           	opt stack 0
   188                           
   189                           ;initializer for _VFD_Counter
   190  01B1C8  0018               	dw	24
   191                           
   192                           	psect	mediumconst
   193  00FB8A                     __pmediumconst:
   194                           	opt stack 0
   195  00FB8A  00                 	db	0
   196  00FB8B                     _dpowers:
   197                           	opt stack 0
   198  00FB8B  0001               	dw	1
   199  00FB8D  0000               	dw	0
   200  00FB8F  000A               	dw	10
   201  00FB91  0000               	dw	0
   202  00FB93  0064               	dw	100
   203  00FB95  0000               	dw	0
   204  00FB97  03E8               	dw	1000
   205  00FB99  0000               	dw	0
   206  00FB9B  2710               	dw	10000
   207  00FB9D  0000               	dw	0
   208  00FB9F  86A0               	dw	34464
   209  00FBA1  0001               	dw	1
   210  00FBA3  4240               	dw	16960
   211  00FBA5  000F               	dw	15
   212  00FBA7  9680               	dw	38528
   213  00FBA9  0098               	dw	152
   214  00FBAB  E100               	dw	57600
   215  00FBAD  05F5               	dw	1525
   216  00FBAF  CA00               	dw	51712
   217  00FBB1  3B9A               	dw	15258
   218  00FBB3                     __end_of_dpowers:
   219                           	opt stack 0
   220  00FBB3                     __npowers_:
   221                           	opt stack 0
   222  00FBB3  00                 	db	0
   223  00FBB4  80                 	db	128
   224  00FBB5  3F                 	db	63
   225  00FBB6  CD                 	db	205
   226  00FBB7  CC                 	db	204
   227  00FBB8  3D                 	db	61
   228  00FBB9  D7                 	db	215
   229  00FBBA  23                 	db	35
   230  00FBBB  3C                 	db	60
   231  00FBBC  12                 	db	18
   232  00FBBD  83                 	db	131
   233  00FBBE  3A                 	db	58
   234  00FBBF  B7                 	db	183
   235  00FBC0  D1                 	db	209
   236  00FBC1  38                 	db	56
   237  00FBC2  C6                 	db	198
   238  00FBC3  27                 	db	39
   239  00FBC4  37                 	db	55
   240  00FBC5  38                 	db	56
   241  00FBC6  86                 	db	134
   242  00FBC7  35                 	db	53
   243  00FBC8  C0                 	db	192
   244  00FBC9  D6                 	db	214
   245  00FBCA  33                 	db	51
   246  00FBCB  CC                 	db	204
   247  00FBCC  2B                 	db	43
   248  00FBCD  32                 	db	50
   249  00FBCE  70                 	db	112
   250  00FBCF  89                 	db	137
   251  00FBD0  30                 	db	48
   252  00FBD1  E7                 	db	231
   253  00FBD2  DB                 	db	219
   254  00FBD3  2E                 	db	46
   255  00FBD4  E5                 	db	229
   256  00FBD5  3C                 	db	60
   257  00FBD6  1E                 	db	30
   258  00FBD7  42                 	db	66
   259  00FBD8  A2                 	db	162
   260  00FBD9  0D                 	db	13
   261  00FBDA                     __end_of__npowers_:
   262                           	opt stack 0
   263  00FBDA                     __powers_:
   264                           	opt stack 0
   265  00FBDA  00                 	db	0
   266  00FBDB  80                 	db	128
   267  00FBDC  3F                 	db	63
   268  00FBDD  00                 	db	0
   269  00FBDE  20                 	db	32
   270  00FBDF  41                 	db	65
   271  00FBE0  00                 	db	0
   272  00FBE1  C8                 	db	200
   273  00FBE2  42                 	db	66
   274  00FBE3  00                 	db	0
   275  00FBE4  7A                 	db	122
   276  00FBE5  44                 	db	68
   277  00FBE6  40                 	db	64
   278  00FBE7  1C                 	db	28
   279  00FBE8  46                 	db	70
   280  00FBE9  50                 	db	80
   281  00FBEA  C3                 	db	195
   282  00FBEB  47                 	db	71
   283  00FBEC  24                 	db	36
   284  00FBED  74                 	db	116
   285  00FBEE  49                 	db	73
   286  00FBEF  97                 	db	151
   287  00FBF0  18                 	db	24
   288  00FBF1  4B                 	db	75
   289  00FBF2  BC                 	db	188
   290  00FBF3  BE                 	db	190
   291  00FBF4  4C                 	db	76
   292  00FBF5  6B                 	db	107
   293  00FBF6  6E                 	db	110
   294  00FBF7  4E                 	db	78
   295  00FBF8  03                 	db	3
   296  00FBF9  15                 	db	21
   297  00FBFA  50                 	db	80
   298  00FBFB  79                 	db	121
   299  00FBFC  AD                 	db	173
   300  00FBFD  60                 	db	96
   301  00FBFE  F3                 	db	243
   302  00FBFF  49                 	db	73
   303  00FC00  71                 	db	113
   304  00FC01                     __end_of__powers_:
   305                           	opt stack 0
   306  00FC01                     sin@coeff_a:
   307                           	opt stack 0
   308  00FC01  F4                 	db	244
   309  00FC02  4A                 	db	74
   310  00FC03  48                 	db	72
   311  00FC04  95                 	db	149
   312  00FC05  95                 	db	149
   313  00FC06  C7                 	db	199
   314  00FC07  C1                 	db	193
   315  00FC08  DC                 	db	220
   316  00FC09  45                 	db	69
   317  00FC0A  DC                 	db	220
   318  00FC0B  6D                 	db	109
   319  00FC0C  C3                 	db	195
   320  00FC0D  B3                 	db	179
   321  00FC0E  33                 	db	51
   322  00FC0F  40                 	db	64
   323  00FC10                     __end_ofsin@coeff_a:
   324                           	opt stack 0
   325  00FC10                     sin@coeff_b:
   326                           	opt stack 0
   327  00FC10  34                 	db	52
   328  00FC11  01                 	db	1
   329  00FC12  48                 	db	72
   330  00FC13  9D                 	db	157
   331  00FC14  B0                 	db	176
   332  00FC15  45                 	db	69
   333  00FC16  00                 	db	0
   334  00FC17  DA                 	db	218
   335  00FC18  42                 	db	66
   336  00FC19  00                 	db	0
   337  00FC1A  80                 	db	128
   338  00FC1B  3F                 	db	63
   339  00FC1C                     __end_ofsin@coeff_b:
   340                           	opt stack 0
   341  0000                     _BAUDCON2bits	set	3872
   342  0000                     _CCP10CON	set	3904
   343  0000                     _CCP3CON	set	3913
   344  0000                     _CCP8CON	set	3910
   345  0000                     _CCPR10L	set	3905
   346  0000                     _CCPR3H	set	3915
   347  0000                     _CCPR3L	set	3914
   348  0000                     _CCPR8L	set	3911
   349  0000                     _RCREG2	set	3869
   350  0000                     _RCSTA2bits	set	3874
   351  0000                     _SPBRG2	set	3870
   352  0000                     _T7CON	set	3901
   353  0000                     _TXREG2	set	3868
   354  0000                     _TXSTA2bits	set	3873
   355  0000                     _CCPR10H	set	3906
   356  0000                     _CCPR8H	set	3912
   357  0000                     _ANSEL0	set	31016
   358  0000                     _ANSEL1	set	31017
   359  0000                     _ANSEL10	set	31010
   360  0000                     _ANSEL11	set	31011
   361  0000                     _ANSEL16	set	31000
   362  0000                     _ANSEL17	set	31001
   363  0000                     _ANSEL18	set	31002
   364  0000                     _ANSEL19	set	31003
   365  0000                     _ANSEL2	set	31018
   366  0000                     _ANSEL3	set	31019
   367  0000                     _ANSEL4	set	31020
   368  0000                     _ANSEL6	set	31022
   369  0000                     _ANSEL8	set	31008
   370  0000                     _ANSEL9	set	31009
   371  0000                     _ADCON0	set	4034
   372  0000                     _ADCON1	set	4033
   373  0000                     _ADCON2	set	4032
   374  0000                     _ADRESH	set	4036
   375  0000                     _ADRESL	set	4035
   376  0000                     _BAUDCONbits	set	3941
   377  0000                     _CCP1CON	set	4027
   378  0000                     _CCP4CON	set	3959
   379  0000                     _CCP5CON	set	3956
   380  0000                     _CCP6CON	set	3953
   381  0000                     _CCP7CON	set	3950
   382  0000                     _CCPR1H	set	4029
   383  0000                     _CCPR1L	set	4028
   384  0000                     _CCPR4H	set	3961
   385  0000                     _CCPR4L	set	3960
   386  0000                     _CCPR5H	set	3958
   387  0000                     _CCPR5L	set	3957
   388  0000                     _CCPR6L	set	3954
   389  0000                     _CCPR7L	set	3951
   390  0000                     _EEADR	set	3938
   391  0000                     _EECON1bits	set	3967
   392  0000                     _EECON2	set	3966
   393  0000                     _EEDATA	set	3937
   394  0000                     _INTCONbits	set	4082
   395  0000                     _OSCCON	set	4051
   396  0000                     _PIE1bits	set	3997
   397  0000                     _PIE3bits	set	4003
   398  0000                     _PIR1bits	set	3998
   399  0000                     _PIR3bits	set	4004
   400  0000                     _PORTD	set	3971
   401  0000                     _RCSTAbits	set	4011
   402  0000                     _SPBRG1	set	4015
   403  0000                     _SSP1ADD	set	4040
   404  0000                     _SSP1BUF	set	4041
   405  0000                     _SSP1CON1	set	4038
   406  0000                     _SSP1CON2bits	set	4037
   407  0000                     _SSP1STAT	set	4039
   408  0000                     _SSP1STATbits	set	4039
   409  0000                     _T0CON	set	4053
   410  0000                     _T1CONbits	set	4045
   411  0000                     _TRISAbits	set	3986
   412  0000                     _TRISCbits	set	3988
   413  0000                     _TRISEbits	set	3990
   414  0000                     _TRISFbits	set	3991
   415  0000                     _TRISGbits	set	3992
   416  0000                     _TXREG	set	4013
   417  0000                     _TXREG1	set	4013
   418  0000                     _TXSTAbits	set	4012
   419  0000                     _CCPR6H	set	3955
   420  0000                     _CCPR7H	set	3952
   421  0000                     _ADON	set	32272
   422  0000                     _CCP10IE	set	32183
   423  0000                     _CCP10IF	set	32191
   424  0000                     _CCP1IE	set	32025
   425  0000                     _CCP1IF	set	32033
   426  0000                     _CCP3IE	set	32176
   427  0000                     _CCP3IF	set	32184
   428  0000                     _CCP4IE	set	32177
   429  0000                     _CCP4IF	set	32185
   430  0000                     _CCP5IE	set	32178
   431  0000                     _CCP5IF	set	32186
   432  0000                     _CCP6IE	set	32179
   433  0000                     _CCP6IF	set	32187
   434  0000                     _CCP7IE	set	32180
   435  0000                     _CCP7IF	set	32188
   436  0000                     _CCP8IE	set	32181
   437  0000                     _CCP8IF	set	32189
   438  0000                     _GIE	set	32663
   439  0000                     _GODONE	set	32273
   440  0000                     _PEIE	set	32662
   441  0000                     _RA4	set	31748
   442  0000                     _RA5	set	31749
   443  0000                     _RB0	set	31752
   444  0000                     _RB1	set	31753
   445  0000                     _RB2	set	31754
   446  0000                     _RB4	set	31756
   447  0000                     _RB5	set	31757
   448  0000                     _RC0	set	31760
   449  0000                     _RC5	set	31765
   450  0000                     _RD0	set	31768
   451  0000                     _RD1	set	31769
   452  0000                     _RD2	set	31770
   453  0000                     _RE0	set	31776
   454  0000                     _RE1	set	31777
   455  0000                     _RE7	set	31783
   456  0000                     _RF1	set	31785
   457  0000                     _RF3	set	31787
   458  0000                     _RF7	set	31791
   459  0000                     _T1CKPS0	set	32364
   460  0000                     _T1CKPS1	set	32365
   461  0000                     _TMR0IE	set	32661
   462  0000                     _TMR0IF	set	32658
   463  0000                     _TMR1IE	set	31976
   464  0000                     _TMR1IF	set	31984
   465  0000                     _TMR1ON	set	32360
   466  0000                     _TMR7IE	set	32203
   467  0000                     _TMR7IF	set	32211
   468  0000                     _TRISA4	set	31892
   469  0000                     _TRISA5	set	31893
   470  0000                     _TRISB0	set	31896
   471  0000                     _TRISB1	set	31897
   472  0000                     _TRISB2	set	31898
   473  0000                     _TRISB4	set	31900
   474  0000                     _TRISB5	set	31901
   475  0000                     _TRISC0	set	31904
   476  0000                     _TRISC2	set	31906
   477  0000                     _TRISC3	set	31907
   478  0000                     _TRISC4	set	31908
   479  0000                     _TRISC5	set	31909
   480  0000                     _TRISD0	set	31912
   481  0000                     _TRISD1	set	31913
   482  0000                     _TRISD2	set	31914
   483  0000                     _TRISE0	set	31920
   484  0000                     _TRISE1	set	31921
   485  0000                     _TRISE3	set	31923
   486  0000                     _TRISE7	set	31927
   487  0000                     _TRISF1	set	31929
   488  0000                     _TRISF3	set	31931
   489  0000                     _TRISF4	set	31932
   490  0000                     _TX1IF	set	31988
   491  0000                     _TX2IF	set	32036
   492  0000                     _TXIF	set	31988
   493  00FC1C                     STR_204:
   494  00FC1C  56                 	db	86	;'V'
   495  00FC1D  46                 	db	70	;'F'
   496  00FC1E  44                 	db	68	;'D'
   497  00FC1F  20                 	db	32
   498  00FC20  52                 	db	82	;'R'
   499  00FC21  55                 	db	85	;'U'
   500  00FC22  4E                 	db	78	;'N'
   501  00FC23  20                 	db	32
   502  00FC24  54                 	db	84	;'T'
   503  00FC25  49                 	db	73	;'I'
   504  00FC26  4D                 	db	77	;'M'
   505  00FC27  45                 	db	69	;'E'
   506  00FC28  20                 	db	32
   507  00FC29  45                 	db	69	;'E'
   508  00FC2A  52                 	db	82	;'R'
   509  00FC2B  52                 	db	82	;'R'
   510  00FC2C  4F                 	db	79	;'O'
   511  00FC2D  52                 	db	82	;'R'
   512  00FC2E  20                 	db	32
   513  00FC2F  43                 	db	67	;'C'
   514  00FC30  4F                 	db	79	;'O'
   515  00FC31  55                 	db	85	;'U'
   516  00FC32  4E                 	db	78	;'N'
   517  00FC33  54                 	db	84	;'T'
   518  00FC34  45                 	db	69	;'E'
   519  00FC35  52                 	db	82	;'R'
   520  00FC36  00                 	db	0
   521  00FC37                     STR_226:
   522  00FC37  45                 	db	69	;'E'
   523  00FC38  45                 	db	69	;'E'
   524  00FC39  50                 	db	80	;'P'
   525  00FC3A  52                 	db	82	;'R'
   526  00FC3B  4F                 	db	79	;'O'
   527  00FC3C  4D                 	db	77	;'M'
   528  00FC3D  20                 	db	32
   529  00FC3E  4C                 	db	76	;'L'
   530  00FC3F  41                 	db	65	;'A'
   531  00FC40  53                 	db	83	;'S'
   532  00FC41  54                 	db	84	;'T'
   533  00FC42  20                 	db	32
   534  00FC43  54                 	db	84	;'T'
   535  00FC44  48                 	db	72	;'H'
   536  00FC45  52                 	db	82	;'R'
   537  00FC46  45                 	db	69	;'E'
   538  00FC47  45                 	db	69	;'E'
   539  00FC48  20                 	db	32
   540  00FC49  45                 	db	69	;'E'
   541  00FC4A  52                 	db	82	;'R'
   542  00FC4B  52                 	db	82	;'R'
   543  00FC4C  4F                 	db	79	;'O'
   544  00FC4D  52                 	db	82	;'R'
   545  00FC4E  00                 	db	0
   546  00FC4F                     STR_208:
   547  00FC4F  4D                 	db	77	;'M'
   548  00FC50  4F                 	db	79	;'O'
   549  00FC51  54                 	db	84	;'T'
   550  00FC52  4F                 	db	79	;'O'
   551  00FC53  52                 	db	82	;'R'
   552  00FC54  20                 	db	32
   553  00FC55  53                 	db	83	;'S'
   554  00FC56  4C                 	db	76	;'L'
   555  00FC57  49                 	db	73	;'I'
   556  00FC58  50                 	db	80	;'P'
   557  00FC59  20                 	db	32
   558  00FC5A  43                 	db	67	;'C'
   559  00FC5B  4F                 	db	79	;'O'
   560  00FC5C  55                 	db	85	;'U'
   561  00FC5D  4E                 	db	78	;'N'
   562  00FC5E  54                 	db	84	;'T'
   563  00FC5F  45                 	db	69	;'E'
   564  00FC60  52                 	db	82	;'R'
   565  00FC61  00                 	db	0
   566  00FC62                     STR_206:
   567  00FC62  52                 	db	82	;'R'
   568  00FC63  4F                 	db	79	;'O'
   569  00FC64  54                 	db	84	;'T'
   570  00FC65  4F                 	db	79	;'O'
   571  00FC66  52                 	db	82	;'R'
   572  00FC67  20                 	db	32
   573  00FC68  53                 	db	83	;'S'
   574  00FC69  4C                 	db	76	;'L'
   575  00FC6A  49                 	db	73	;'I'
   576  00FC6B  50                 	db	80	;'P'
   577  00FC6C  20                 	db	32
   578  00FC6D  43                 	db	67	;'C'
   579  00FC6E  4F                 	db	79	;'O'
   580  00FC6F  55                 	db	85	;'U'
   581  00FC70  4E                 	db	78	;'N'
   582  00FC71  54                 	db	84	;'T'
   583  00FC72  45                 	db	69	;'E'
   584  00FC73  52                 	db	82	;'R'
   585  00FC74  00                 	db	0
   586  00FC75                     STR_222:
   587  00FC75  45                 	db	69	;'E'
   588  00FC76  45                 	db	69	;'E'
   589  00FC77  50                 	db	80	;'P'
   590  00FC78  52                 	db	82	;'R'
   591  00FC79  4F                 	db	79	;'O'
   592  00FC7A  4D                 	db	77	;'M'
   593  00FC7B  20                 	db	32
   594  00FC7C  45                 	db	69	;'E'
   595  00FC7D  52                 	db	82	;'R'
   596  00FC7E  52                 	db	82	;'R'
   597  00FC7F  4F                 	db	79	;'O'
   598  00FC80  52                 	db	82	;'R'
   599  00FC81  20                 	db	32
   600  00FC82  54                 	db	84	;'T'
   601  00FC83  49                 	db	73	;'I'
   602  00FC84  4D                 	db	77	;'M'
   603  00FC85  45                 	db	69	;'E'
   604  00FC86  00                 	db	0
   605  00FC87                     STR_220:
   606  00FC87  50                 	db	80	;'P'
   607  00FC88  49                 	db	73	;'I'
   608  00FC89  54                 	db	84	;'T'
   609  00FC8A  43                 	db	67	;'C'
   610  00FC8B  48                 	db	72	;'H'
   611  00FC8C  20                 	db	32
   612  00FC8D  45                 	db	69	;'E'
   613  00FC8E  45                 	db	69	;'E'
   614  00FC8F  50                 	db	80	;'P'
   615  00FC90  52                 	db	82	;'R'
   616  00FC91  4F                 	db	79	;'O'
   617  00FC92  4D                 	db	77	;'M'
   618  00FC93  20                 	db	32
   619  00FC94  46                 	db	70	;'F'
   620  00FC95  4C                 	db	76	;'L'
   621  00FC96  41                 	db	65	;'A'
   622  00FC97  47                 	db	71	;'G'
   623  00FC98  00                 	db	0
   624  00FC99                     STR_224:
   625  00FC99  45                 	db	69	;'E'
   626  00FC9A  45                 	db	69	;'E'
   627  00FC9B  50                 	db	80	;'P'
   628  00FC9C  52                 	db	82	;'R'
   629  00FC9D  4F                 	db	79	;'O'
   630  00FC9E  4D                 	db	77	;'M'
   631  00FC9F  20                 	db	32
   632  00FCA0  45                 	db	69	;'E'
   633  00FCA1  52                 	db	82	;'R'
   634  00FCA2  52                 	db	82	;'R'
   635  00FCA3  4F                 	db	79	;'O'
   636  00FCA4  52                 	db	82	;'R'
   637  00FCA5  20                 	db	32
   638  00FCA6  46                 	db	70	;'F'
   639  00FCA7  4C                 	db	76	;'L'
   640  00FCA8  41                 	db	65	;'A'
   641  00FCA9  47                 	db	71	;'G'
   642  00FCAA  00                 	db	0
   643  00FCAB                     STR_228:
   644  00FCAB  56                 	db	86	;'V'
   645  00FCAC  46                 	db	70	;'F'
   646  00FCAD  44                 	db	68	;'D'
   647  00FCAE  20                 	db	32
   648  00FCAF  49                 	db	73	;'I'
   649  00FCB0  4F                 	db	79	;'O'
   650  00FCB1  20                 	db	32
   651  00FCB2  45                 	db	69	;'E'
   652  00FCB3  52                 	db	82	;'R'
   653  00FCB4  52                 	db	82	;'R'
   654  00FCB5  4F                 	db	79	;'O'
   655  00FCB6  52                 	db	82	;'R'
   656  00FCB7  20                 	db	32
   657  00FCB8  46                 	db	70	;'F'
   658  00FCB9  4C                 	db	76	;'L'
   659  00FCBA  41                 	db	65	;'A'
   660  00FCBB  47                 	db	71	;'G'
   661  00FCBC  00                 	db	0
   662  00FCBD                     STR_3:
   663  00FCBD  52                 	db	82	;'R'
   664  00FCBE  54                 	db	84	;'T'
   665  00FCBF  30                 	db	48	;'0'
   666  00FCC0  31                 	db	49	;'1'
   667  00FCC1  20                 	db	32
   668  00FCC2  52                 	db	82	;'R'
   669  00FCC3  76                 	db	118	;'v'
   670  00FCC4  33                 	db	51	;'3'
   671  00FCC5  20                 	db	32
   672  00FCC6  4B                 	db	75	;'K'
   673  00FCC7  41                 	db	65	;'A'
   674  00FCC8  56                 	db	86	;'V'
   675  00FCC9  41                 	db	65	;'A'
   676  00FCCA  4E                 	db	78	;'N'
   677  00FCCB  4F                 	db	79	;'O'
   678  00FCCC  4F                 	db	79	;'O'
   679  00FCCD  52                 	db	82	;'R'
   680  00FCCE  00                 	db	0
   681  00FCCF                     STR_41:
   682  00FCCF  56                 	db	86	;'V'
   683  00FCD0  46                 	db	70	;'F'
   684  00FCD1  44                 	db	68	;'D'
   685  00FCD2  5F                 	db	95	;'_'
   686  00FCD3  53                 	db	83	;'S'
   687  00FCD4  48                 	db	72	;'H'
   688  00FCD5  4F                 	db	79	;'O'
   689  00FCD6  52                 	db	82	;'R'
   690  00FCD7  54                 	db	84	;'T'
   691  00FCD8  5F                 	db	95	;'_'
   692  00FCD9  43                 	db	67	;'C'
   693  00FCDA  49                 	db	73	;'I'
   694  00FCDB  52                 	db	82	;'R'
   695  00FCDC  43                 	db	67	;'C'
   696  00FCDD  55                 	db	85	;'U'
   697  00FCDE  49                 	db	73	;'I'
   698  00FCDF  54                 	db	84	;'T'
   699  00FCE0  00                 	db	0
   700  00FCE1                     STR_230:
   701  00FCE1  57                 	db	87	;'W'
   702  00FCE2  49                 	db	73	;'I'
   703  00FCE3  4E                 	db	78	;'N'
   704  00FCE4  44                 	db	68	;'D'
   705  00FCE5  20                 	db	32
   706  00FCE6  31                 	db	49	;'1'
   707  00FCE7  20                 	db	32
   708  00FCE8  54                 	db	84	;'T'
   709  00FCE9  45                 	db	69	;'E'
   710  00FCEA  4D                 	db	77	;'M'
   711  00FCEB  50                 	db	80	;'P'
   712  00FCEC  20                 	db	32
   713  00FCED  46                 	db	70	;'F'
   714  00FCEE  4C                 	db	76	;'L'
   715  00FCEF  41                 	db	65	;'A'
   716  00FCF0  47                 	db	71	;'G'
   717  00FCF1  00                 	db	0
   718  00FCF2                     STR_232:
   719  00FCF2  57                 	db	87	;'W'
   720  00FCF3  49                 	db	73	;'I'
   721  00FCF4  4E                 	db	78	;'N'
   722  00FCF5  44                 	db	68	;'D'
   723  00FCF6  20                 	db	32
   724  00FCF7  32                 	db	50	;'2'
   725  00FCF8  20                 	db	32
   726  00FCF9  54                 	db	84	;'T'
   727  00FCFA  45                 	db	69	;'E'
   728  00FCFB  4D                 	db	77	;'M'
   729  00FCFC  50                 	db	80	;'P'
   730  00FCFD  20                 	db	32
   731  00FCFE  46                 	db	70	;'F'
   732  00FCFF  4C                 	db	76	;'L'
   733  00FD00  41                 	db	65	;'A'
   734  00FD01  47                 	db	71	;'G'
   735  00FD02  00                 	db	0
   736  00FD03                     STR_218:
   737  00FD03  47                 	db	71	;'G'
   738  00FD04  45                 	db	69	;'E'
   739  00FD05  4E                 	db	78	;'N'
   740  00FD06  20                 	db	32
   741  00FD07  45                 	db	69	;'E'
   742  00FD08  45                 	db	69	;'E'
   743  00FD09  50                 	db	80	;'P'
   744  00FD0A  52                 	db	82	;'R'
   745  00FD0B  4F                 	db	79	;'O'
   746  00FD0C  4D                 	db	77	;'M'
   747  00FD0D  20                 	db	32
   748  00FD0E  46                 	db	70	;'F'
   749  00FD0F  4C                 	db	76	;'L'
   750  00FD10  41                 	db	65	;'A'
   751  00FD11  47                 	db	71	;'G'
   752  00FD12  00                 	db	0
   753  00FD13                     STR_188:
   754  00FD13  45                 	db	69	;'E'
   755  00FD14  52                 	db	82	;'R'
   756  00FD15  52                 	db	82	;'R'
   757  00FD16  4F                 	db	79	;'O'
   758  00FD17  52                 	db	82	;'R'
   759  00FD18  20                 	db	32
   760  00FD19  49                 	db	73	;'I'
   761  00FD1A  4E                 	db	78	;'N'
   762  00FD1B  20                 	db	32
   763  00FD1C  53                 	db	83	;'S'
   764  00FD1D  54                 	db	84	;'T'
   765  00FD1E  52                 	db	82	;'R'
   766  00FD1F  49                 	db	73	;'I'
   767  00FD20  4E                 	db	78	;'N'
   768  00FD21  47                 	db	71	;'G'
   769  00FD22  00                 	db	0
   770  00FD23                     STR_150:
   771  00FD23  44                 	db	68	;'D'
   772  00FD24  43                 	db	67	;'C'
   773  00FD25  20                 	db	32
   774  00FD26  42                 	db	66	;'B'
   775  00FD27  55                 	db	85	;'U'
   776  00FD28  53                 	db	83	;'S'
   777  00FD29  20                 	db	32
   778  00FD2A  56                 	db	86	;'V'
   779  00FD2B  4F                 	db	79	;'O'
   780  00FD2C  4C                 	db	76	;'L'
   781  00FD2D  54                 	db	84	;'T'
   782  00FD2E  41                 	db	65	;'A'
   783  00FD2F  47                 	db	71	;'G'
   784  00FD30  45                 	db	69	;'E'
   785  00FD31  00                 	db	0
   786  00FD32                     STR_144:
   787  00FD32  4D                 	db	77	;'M'
   788  00FD33  4F                 	db	79	;'O'
   789  00FD34  54                 	db	84	;'T'
   790  00FD35  4F                 	db	79	;'O'
   791  00FD36  52                 	db	82	;'R'
   792  00FD37  20                 	db	32
   793  00FD38  53                 	db	83	;'S'
   794  00FD39  4C                 	db	76	;'L'
   795  00FD3A  49                 	db	73	;'I'
   796  00FD3B  50                 	db	80	;'P'
   797  00FD3C  20                 	db	32
   798  00FD3D  52                 	db	82	;'R'
   799  00FD3E  50                 	db	80	;'P'
   800  00FD3F  4D                 	db	77	;'M'
   801  00FD40  00                 	db	0
   802  00FD41                     STR_146:
   803  00FD41  52                 	db	82	;'R'
   804  00FD42  4F                 	db	79	;'O'
   805  00FD43  54                 	db	84	;'T'
   806  00FD44  4F                 	db	79	;'O'
   807  00FD45  52                 	db	82	;'R'
   808  00FD46  20                 	db	32
   809  00FD47  53                 	db	83	;'S'
   810  00FD48  4C                 	db	76	;'L'
   811  00FD49  49                 	db	73	;'I'
   812  00FD4A  50                 	db	80	;'P'
   813  00FD4B  20                 	db	32
   814  00FD4C  52                 	db	82	;'R'
   815  00FD4D  50                 	db	80	;'P'
   816  00FD4E  4D                 	db	77	;'M'
   817  00FD4F  00                 	db	0
   818  00FD50                     STR_176:
   819  00FD50  59                 	db	89	;'Y'
   820  00FD51  2D                 	db	45
   821  00FD52  50                 	db	80	;'P'
   822  00FD53  4F                 	db	79	;'O'
   823  00FD54  57                 	db	87	;'W'
   824  00FD55  45                 	db	69	;'E'
   825  00FD56  52                 	db	82	;'R'
   826  00FD57  20                 	db	32
   827  00FD58  46                 	db	70	;'F'
   828  00FD59  41                 	db	65	;'A'
   829  00FD5A  43                 	db	67	;'C'
   830  00FD5B  54                 	db	84	;'T'
   831  00FD5C  4F                 	db	79	;'O'
   832  00FD5D  52                 	db	82	;'R'
   833  00FD5E  00                 	db	0
   834  00FD5F                     STR_136:
   835  00FD5F  57                 	db	87	;'W'
   836  00FD60  49                 	db	73	;'I'
   837  00FD61  4E                 	db	78	;'N'
   838  00FD62  44                 	db	68	;'D'
   839  00FD63  20                 	db	32
   840  00FD64  32                 	db	50	;'2'
   841  00FD65  20                 	db	32
   842  00FD66  49                 	db	73	;'I'
   843  00FD67  4E                 	db	78	;'N'
   844  00FD68  53                 	db	83	;'S'
   845  00FD69  54                 	db	84	;'T'
   846  00FD6A  41                 	db	65	;'A'
   847  00FD6B  4E                 	db	78	;'N'
   848  00FD6C  54                 	db	84	;'T'
   849  00FD6D  00                 	db	0
   850  00FD6E                     STR_152:
   851  00FD6E  44                 	db	68	;'D'
   852  00FD6F  43                 	db	67	;'C'
   853  00FD70  20                 	db	32
   854  00FD71  42                 	db	66	;'B'
   855  00FD72  55                 	db	85	;'U'
   856  00FD73  53                 	db	83	;'S'
   857  00FD74  20                 	db	32
   858  00FD75  43                 	db	67	;'C'
   859  00FD76  55                 	db	85	;'U'
   860  00FD77  52                 	db	82	;'R'
   861  00FD78  52                 	db	82	;'R'
   862  00FD79  45                 	db	69	;'E'
   863  00FD7A  4E                 	db	78	;'N'
   864  00FD7B  54                 	db	84	;'T'
   865  00FD7C  00                 	db	0
   866  00FD7D                     STR_190:
   867  00FD7D  54                 	db	84	;'T'
   868  00FD7E  55                 	db	85	;'U'
   869  00FD7F  52                 	db	82	;'R'
   870  00FD80  42                 	db	66	;'B'
   871  00FD81  49                 	db	73	;'I'
   872  00FD82  4E                 	db	78	;'N'
   873  00FD83  45                 	db	69	;'E'
   874  00FD84  20                 	db	32
   875  00FD85  53                 	db	83	;'S'
   876  00FD86  54                 	db	84	;'T'
   877  00FD87  41                 	db	65	;'A'
   878  00FD88  54                 	db	84	;'T'
   879  00FD89  45                 	db	69	;'E'
   880  00FD8A  00                 	db	0
   881  00FD8B                     STR_142:
   882  00FD8B  47                 	db	71	;'G'
   883  00FD8C  45                 	db	69	;'E'
   884  00FD8D  4E                 	db	78	;'N'
   885  00FD8E  45                 	db	69	;'E'
   886  00FD8F  52                 	db	82	;'R'
   887  00FD90  41                 	db	65	;'A'
   888  00FD91  54                 	db	84	;'T'
   889  00FD92  4F                 	db	79	;'O'
   890  00FD93  52                 	db	82	;'R'
   891  00FD94  20                 	db	32
   892  00FD95  52                 	db	82	;'R'
   893  00FD96  50                 	db	80	;'P'
   894  00FD97  4D                 	db	77	;'M'
   895  00FD98  00                 	db	0
   896  00FD99                     STR_79:
   897  00FD99  56                 	db	86	;'V'
   898  00FD9A  46                 	db	70	;'F'
   899  00FD9B  44                 	db	68	;'D'
   900  00FD9C  5F                 	db	95	;'_'
   901  00FD9D  43                 	db	67	;'C'
   902  00FD9E  4F                 	db	79	;'O'
   903  00FD9F  4D                 	db	77	;'M'
   904  00FDA0  4D                 	db	77	;'M'
   905  00FDA1  55                 	db	85	;'U'
   906  00FDA2  5F                 	db	95	;'_'
   907  00FDA3  45                 	db	69	;'E'
   908  00FDA4  52                 	db	82	;'R'
   909  00FDA5  52                 	db	82	;'R'
   910  00FDA6  00                 	db	0
   911  00FDA7                     STR_59:
   912  00FDA7  54                 	db	84	;'T'
   913  00FDA8  55                 	db	85	;'U'
   914  00FDA9  52                 	db	82	;'R'
   915  00FDAA  42                 	db	66	;'B'
   916  00FDAB  49                 	db	73	;'I'
   917  00FDAC  4E                 	db	78	;'N'
   918  00FDAD  45                 	db	69	;'E'
   919  00FDAE  5F                 	db	95	;'_'
   920  00FDAF  55                 	db	85	;'U'
   921  00FDB0  53                 	db	83	;'S'
   922  00FDB1  5F                 	db	95	;'_'
   923  00FDB2  4F                 	db	79	;'O'
   924  00FDB3  53                 	db	83	;'S'
   925  00FDB4  00                 	db	0
   926  00FDB5                     STR_212:
   927  00FDB5  56                 	db	86	;'V'
   928  00FDB6  46                 	db	70	;'F'
   929  00FDB7  44                 	db	68	;'D'
   930  00FDB8  20                 	db	32
   931  00FDB9  42                 	db	66	;'B'
   932  00FDBA  4F                 	db	79	;'O'
   933  00FDBB  54                 	db	84	;'T'
   934  00FDBC  54                 	db	84	;'T'
   935  00FDBD  4F                 	db	79	;'O'
   936  00FDBE  4D                 	db	77	;'M'
   937  00FDBF  20                 	db	32
   938  00FDC0  43                 	db	67	;'C'
   939  00FDC1  54                 	db	84	;'T'
   940  00FDC2  00                 	db	0
   941  00FDC3                     STR_49:
   942  00FDC3  56                 	db	86	;'V'
   943  00FDC4  46                 	db	70	;'F'
   944  00FDC5  44                 	db	68	;'D'
   945  00FDC6  5F                 	db	95	;'_'
   946  00FDC7  52                 	db	82	;'R'
   947  00FDC8  55                 	db	85	;'U'
   948  00FDC9  4E                 	db	78	;'N'
   949  00FDCA  5F                 	db	95	;'_'
   950  00FDCB  54                 	db	84	;'T'
   951  00FDCC  49                 	db	73	;'I'
   952  00FDCD  4D                 	db	77	;'M'
   953  00FDCE  45                 	db	69	;'E'
   954  00FDCF  00                 	db	0
   955  00FDD0                     STR_83:
   956  00FDD0  56                 	db	86	;'V'
   957  00FDD1  46                 	db	70	;'F'
   958  00FDD2  44                 	db	68	;'D'
   959  00FDD3  5F                 	db	95	;'_'
   960  00FDD4  45                 	db	69	;'E'
   961  00FDD5  52                 	db	82	;'R'
   962  00FDD6  52                 	db	82	;'R'
   963  00FDD7  4F                 	db	79	;'O'
   964  00FDD8  52                 	db	82	;'R'
   965  00FDD9  5F                 	db	95	;'_'
   966  00FDDA  49                 	db	73	;'I'
   967  00FDDB  4F                 	db	79	;'O'
   968  00FDDC  00                 	db	0
   969  00FDDD                     STR_202:
   970  00FDDD  52                 	db	82	;'R'
   971  00FDDE  41                 	db	65	;'A'
   972  00FDDF  4D                 	db	77	;'M'
   973  00FDE0  50                 	db	80	;'P'
   974  00FDE1  20                 	db	32
   975  00FDE2  55                 	db	85	;'U'
   976  00FDE3  50                 	db	80	;'P'
   977  00FDE4  20                 	db	32
   978  00FDE5  4C                 	db	76	;'L'
   979  00FDE6  4F                 	db	79	;'O'
   980  00FDE7  4F                 	db	79	;'O'
   981  00FDE8  50                 	db	80	;'P'
   982  00FDE9  00                 	db	0
   983  00FDEA                     STR_198:
   984  00FDEA  4C                 	db	76	;'L'
   985  00FDEB  41                 	db	65	;'A'
   986  00FDEC  53                 	db	83	;'S'
   987  00FDED  54                 	db	84	;'T'
   988  00FDEE  20                 	db	32
   989  00FDEF  35                 	db	53	;'5'
   990  00FDF0  20                 	db	32
   991  00FDF1  45                 	db	69	;'E'
   992  00FDF2  52                 	db	82	;'R'
   993  00FDF3  52                 	db	82	;'R'
   994  00FDF4  4F                 	db	79	;'O'
   995  00FDF5  52                 	db	82	;'R'
   996  00FDF6  00                 	db	0
   997  00FDF7                     STR_132:
   998  00FDF7  57                 	db	87	;'W'
   999  00FDF8  49                 	db	73	;'I'
  1000  00FDF9  4E                 	db	78	;'N'
  1001  00FDFA  44                 	db	68	;'D'
  1002  00FDFB  5F                 	db	95	;'_'
  1003  00FDFC  49                 	db	73	;'I'
  1004  00FDFD  4E                 	db	78	;'N'
  1005  00FDFE  53                 	db	83	;'S'
  1006  00FDFF  54                 	db	84	;'T'
  1007  00FE00  41                 	db	65	;'A'
  1008  00FE01  4E                 	db	78	;'N'
  1009  00FE02  54                 	db	84	;'T'
  1010  00FE03  00                 	db	0
  1011  00FE04                     STR_184:
  1012  00FE04  49                 	db	73	;'I'
  1013  00FE05  4E                 	db	78	;'N'
  1014  00FE06  49                 	db	73	;'I'
  1015  00FE07  54                 	db	84	;'T'
  1016  00FE08  41                 	db	65	;'A'
  1017  00FE09  4C                 	db	76	;'L'
  1018  00FE0A  20                 	db	32
  1019  00FE0B  44                 	db	68	;'D'
  1020  00FE0C  45                 	db	69	;'E'
  1021  00FE0D  4C                 	db	76	;'L'
  1022  00FE0E  41                 	db	65	;'A'
  1023  00FE0F  59                 	db	89	;'Y'
  1024  00FE10  00                 	db	0
  1025  00FE11                     STR_180:
  1026  00FE11  50                 	db	80	;'P'
  1027  00FE12  48                 	db	72	;'H'
  1028  00FE13  41                 	db	65	;'A'
  1029  00FE14  53                 	db	83	;'S'
  1030  00FE15  45                 	db	69	;'E'
  1031  00FE16  20                 	db	32
  1032  00FE17  41                 	db	65	;'A'
  1033  00FE18  4E                 	db	78	;'N'
  1034  00FE19  47                 	db	71	;'G'
  1035  00FE1A  4C                 	db	76	;'L'
  1036  00FE1B  45                 	db	69	;'E'
  1037  00FE1C  00                 	db	0
  1038  00FE1D                     STR_196:
  1039  00FE1D  54                 	db	84	;'T'
  1040  00FE1E  45                 	db	69	;'E'
  1041  00FE1F  4D                 	db	77	;'M'
  1042  00FE20  50                 	db	80	;'P'
  1043  00FE21  45                 	db	69	;'E'
  1044  00FE22  52                 	db	82	;'R'
  1045  00FE23  41                 	db	65	;'A'
  1046  00FE24  54                 	db	84	;'T'
  1047  00FE25  55                 	db	85	;'U'
  1048  00FE26  52                 	db	82	;'R'
  1049  00FE27  45                 	db	69	;'E'
  1050  00FE28  00                 	db	0
  1051  00FE29                     STR_140:
  1052  00FE29  54                 	db	84	;'T'
  1053  00FE2A  55                 	db	85	;'U'
  1054  00FE2B  52                 	db	82	;'R'
  1055  00FE2C  42                 	db	66	;'B'
  1056  00FE2D  49                 	db	73	;'I'
  1057  00FE2E  4E                 	db	78	;'N'
  1058  00FE2F  45                 	db	69	;'E'
  1059  00FE30  20                 	db	32
  1060  00FE31  52                 	db	82	;'R'
  1061  00FE32  50                 	db	80	;'P'
  1062  00FE33  4D                 	db	77	;'M'
  1063  00FE34  00                 	db	0
  1064  00FE35                     STR_77:
  1065  00FE35  4D                 	db	77	;'M'
  1066  00FE36  41                 	db	65	;'A'
  1067  00FE37  4E                 	db	78	;'N'
  1068  00FE38  55                 	db	85	;'U'
  1069  00FE39  41                 	db	65	;'A'
  1070  00FE3A  4C                 	db	76	;'L'
  1071  00FE3B  5F                 	db	95	;'_'
  1072  00FE3C  53                 	db	83	;'S'
  1073  00FE3D  54                 	db	84	;'T'
  1074  00FE3E  4F                 	db	79	;'O'
  1075  00FE3F  50                 	db	80	;'P'
  1076  00FE40  00                 	db	0
  1077  00FE41                     STR_130:
  1078  00FE41  54                 	db	84	;'T'
  1079  00FE42  55                 	db	85	;'U'
  1080  00FE43  52                 	db	82	;'R'
  1081  00FE44  42                 	db	66	;'B'
  1082  00FE45  49                 	db	73	;'I'
  1083  00FE46  4E                 	db	78	;'N'
  1084  00FE47  45                 	db	69	;'E'
  1085  00FE48  20                 	db	32
  1086  00FE49  49                 	db	73	;'I'
  1087  00FE4A  44                 	db	68	;'D'
  1088  00FE4B  00                 	db	0
  1089  00FE4C                     STR_138:
  1090  00FE4C  57                 	db	87	;'W'
  1091  00FE4D  49                 	db	73	;'I'
  1092  00FE4E  4E                 	db	78	;'N'
  1093  00FE4F  44                 	db	68	;'D'
  1094  00FE50  20                 	db	32
  1095  00FE51  32                 	db	50	;'2'
  1096  00FE52  20                 	db	32
  1097  00FE53  41                 	db	65	;'A'
  1098  00FE54  56                 	db	86	;'V'
  1099  00FE55  47                 	db	71	;'G'
  1100  00FE56  00                 	db	0
  1101  00FE57                     STR_69:
  1102  00FE57  54                 	db	84	;'T'
  1103  00FE58  55                 	db	85	;'U'
  1104  00FE59  52                 	db	82	;'R'
  1105  00FE5A  42                 	db	66	;'B'
  1106  00FE5B  49                 	db	73	;'I'
  1107  00FE5C  4E                 	db	78	;'N'
  1108  00FE5D  45                 	db	69	;'E'
  1109  00FE5E  5F                 	db	95	;'_'
  1110  00FE5F  4F                 	db	79	;'O'
  1111  00FE60  4C                 	db	76	;'L'
  1112  00FE61  00                 	db	0
  1113  00FE62                     STR_57:
  1114  00FE62  4D                 	db	77	;'M'
  1115  00FE63  4F                 	db	79	;'O'
  1116  00FE64  54                 	db	84	;'T'
  1117  00FE65  4F                 	db	79	;'O'
  1118  00FE66  52                 	db	82	;'R'
  1119  00FE67  5F                 	db	95	;'_'
  1120  00FE68  53                 	db	83	;'S'
  1121  00FE69  4C                 	db	76	;'L'
  1122  00FE6A  49                 	db	73	;'I'
  1123  00FE6B  50                 	db	80	;'P'
  1124  00FE6C  00                 	db	0
  1125  00FE6D                     STR_55:
  1126  00FE6D  52                 	db	82	;'R'
  1127  00FE6E  4F                 	db	79	;'O'
  1128  00FE6F  54                 	db	84	;'T'
  1129  00FE70  4F                 	db	79	;'O'
  1130  00FE71  52                 	db	82	;'R'
  1131  00FE72  5F                 	db	95	;'_'
  1132  00FE73  53                 	db	83	;'S'
  1133  00FE74  4C                 	db	76	;'L'
  1134  00FE75  49                 	db	73	;'I'
  1135  00FE76  50                 	db	80	;'P'
  1136  00FE77  00                 	db	0
  1137  00FE78                     STR_47:
  1138  00FE78  54                 	db	84	;'T'
  1139  00FE79  55                 	db	85	;'U'
  1140  00FE7A  52                 	db	82	;'R'
  1141  00FE7B  42                 	db	66	;'B'
  1142  00FE7C  49                 	db	73	;'I'
  1143  00FE7D  4E                 	db	78	;'N'
  1144  00FE7E  45                 	db	69	;'E'
  1145  00FE7F  5F                 	db	95	;'_'
  1146  00FE80  4E                 	db	78	;'N'
  1147  00FE81  52                 	db	82	;'R'
  1148  00FE82  00                 	db	0
  1149  00FE83                     STR_81:
  1150  00FE83  4D                 	db	77	;'M'
  1151  00FE84  45                 	db	69	;'E'
  1152  00FE85  41                 	db	65	;'A'
  1153  00FE86  55                 	db	85	;'U'
  1154  00FE87  52                 	db	82	;'R'
  1155  00FE88  45                 	db	69	;'E'
  1156  00FE89  5F                 	db	95	;'_'
  1157  00FE8A  45                 	db	69	;'E'
  1158  00FE8B  52                 	db	82	;'R'
  1159  00FE8C  52                 	db	82	;'R'
  1160  00FE8D  00                 	db	0
  1161  00FE8E                     STR_210:
  1162  00FE8E  56                 	db	86	;'V'
  1163  00FE8F  46                 	db	70	;'F'
  1164  00FE90  44                 	db	68	;'D'
  1165  00FE91  20                 	db	32
  1166  00FE92  54                 	db	84	;'T'
  1167  00FE93  4F                 	db	79	;'O'
  1168  00FE94  50                 	db	80	;'P'
  1169  00FE95  20                 	db	32
  1170  00FE96  43                 	db	67	;'C'
  1171  00FE97  54                 	db	84	;'T'
  1172  00FE98  00                 	db	0
  1173  00FE99                     STR_71:
  1174  00FE99  44                 	db	68	;'D'
  1175  00FE9A  43                 	db	67	;'C'
  1176  00FE9B  5F                 	db	95	;'_'
  1177  00FE9C  45                 	db	69	;'E'
  1178  00FE9D  58                 	db	88	;'X'
  1179  00FE9E  54                 	db	84	;'T'
  1180  00FE9F  5F                 	db	95	;'_'
  1181  00FEA0  4C                 	db	76	;'L'
  1182  00FEA1  4F                 	db	79	;'O'
  1183  00FEA2  57                 	db	87	;'W'
  1184  00FEA3  00                 	db	0
  1185  00FEA4                     STR_35:
  1186  00FEA4  57                 	db	87	;'W'
  1187  00FEA5  53                 	db	83	;'S'
  1188  00FEA6  5F                 	db	95	;'_'
  1189  00FEA7  4D                 	db	77	;'M'
  1190  00FEA8  49                 	db	73	;'I'
  1191  00FEA9  4E                 	db	78	;'N'
  1192  00FEAA  5F                 	db	95	;'_'
  1193  00FEAB  4D                 	db	77	;'M'
  1194  00FEAC  41                 	db	65	;'A'
  1195  00FEAD  58                 	db	88	;'X'
  1196  00FEAE  00                 	db	0
  1197  00FEAF                     STR_37:
  1198  00FEAF  56                 	db	86	;'V'
  1199  00FEB0  4F                 	db	79	;'O'
  1200  00FEB1  4C                 	db	76	;'L'
  1201  00FEB2  54                 	db	84	;'T'
  1202  00FEB3  5F                 	db	95	;'_'
  1203  00FEB4  48                 	db	72	;'H'
  1204  00FEB5  49                 	db	73	;'I'
  1205  00FEB6  47                 	db	71	;'G'
  1206  00FEB7  48                 	db	72	;'H'
  1207  00FEB8  00                 	db	0
  1208  00FEB9                     STR_63:
  1209  00FEB9  43                 	db	67	;'C'
  1210  00FEBA  55                 	db	85	;'U'
  1211  00FEBB  52                 	db	82	;'R'
  1212  00FEBC  52                 	db	82	;'R'
  1213  00FEBD  45                 	db	69	;'E'
  1214  00FEBE  4E                 	db	78	;'N'
  1215  00FEBF  54                 	db	84	;'T'
  1216  00FEC0  5F                 	db	95	;'_'
  1217  00FEC1  48                 	db	72	;'H'
  1218  00FEC2  00                 	db	0
  1219  00FEC3                     STR_67:
  1220  00FEC3  50                 	db	80	;'P'
  1221  00FEC4  4F                 	db	79	;'O'
  1222  00FEC5  57                 	db	87	;'W'
  1223  00FEC6  45                 	db	69	;'E'
  1224  00FEC7  52                 	db	82	;'R'
  1225  00FEC8  5F                 	db	95	;'_'
  1226  00FEC9  4D                 	db	77	;'M'
  1227  00FECA  49                 	db	73	;'I'
  1228  00FECB  4E                 	db	78	;'N'
  1229  00FECC  00                 	db	0
  1230  00FECD                     STR_214:
  1231  00FECD  4C                 	db	76	;'L'
  1232  00FECE  4F                 	db	79	;'O'
  1233  00FECF  47                 	db	71	;'G'
  1234  00FED0  49                 	db	73	;'I'
  1235  00FED1  43                 	db	67	;'C'
  1236  00FED2  20                 	db	32
  1237  00FED3  4F                 	db	79	;'O'
  1238  00FED4  54                 	db	84	;'T'
  1239  00FED5  50                 	db	80	;'P'
  1240  00FED6  00                 	db	0
  1241  00FED7                     STR_43:
  1242  00FED7  50                 	db	80	;'P'
  1243  00FED8  48                 	db	72	;'H'
  1244  00FED9  41                 	db	65	;'A'
  1245  00FEDA  53                 	db	83	;'S'
  1246  00FEDB  45                 	db	69	;'E'
  1247  00FEDC  5F                 	db	95	;'_'
  1248  00FEDD  53                 	db	83	;'S'
  1249  00FEDE  45                 	db	69	;'E'
  1250  00FEDF  51                 	db	81	;'Q'
  1251  00FEE0  00                 	db	0
  1252  00FEE1                     STR_182:
  1253  00FEE1  56                 	db	86	;'V'
  1254  00FEE2  46                 	db	70	;'F'
  1255  00FEE3  44                 	db	68	;'D'
  1256  00FEE4  20                 	db	32
  1257  00FEE5  45                 	db	69	;'E'
  1258  00FEE6  52                 	db	82	;'R'
  1259  00FEE7  52                 	db	82	;'R'
  1260  00FEE8  4F                 	db	79	;'O'
  1261  00FEE9  52                 	db	82	;'R'
  1262  00FEEA  00                 	db	0
  1263  00FEEB                     STR_200:
  1264  00FEEB  43                 	db	67	;'C'
  1265  00FEEC  4F                 	db	79	;'O'
  1266  00FEED  4E                 	db	78	;'N'
  1267  00FEEE  54                 	db	84	;'T'
  1268  00FEEF  41                 	db	65	;'A'
  1269  00FEF0  43                 	db	67	;'C'
  1270  00FEF1  54                 	db	84	;'T'
  1271  00FEF2  4F                 	db	79	;'O'
  1272  00FEF3  52                 	db	82	;'R'
  1273  00FEF4  00                 	db	0
  1274  00FEF5                     STR_164:
  1275  00FEF5  42                 	db	66	;'B'
  1276  00FEF6  20                 	db	32
  1277  00FEF7  43                 	db	67	;'C'
  1278  00FEF8  55                 	db	85	;'U'
  1279  00FEF9  52                 	db	82	;'R'
  1280  00FEFA  52                 	db	82	;'R'
  1281  00FEFB  45                 	db	69	;'E'
  1282  00FEFC  4E                 	db	78	;'N'
  1283  00FEFD  54                 	db	84	;'T'
  1284  00FEFE  00                 	db	0
  1285  00FEFF                     STR_160:
  1286  00FEFF  52                 	db	82	;'R'
  1287  00FF00  20                 	db	32
  1288  00FF01  43                 	db	67	;'C'
  1289  00FF02  55                 	db	85	;'U'
  1290  00FF03  52                 	db	82	;'R'
  1291  00FF04  52                 	db	82	;'R'
  1292  00FF05  45                 	db	69	;'E'
  1293  00FF06  4E                 	db	78	;'N'
  1294  00FF07  54                 	db	84	;'T'
  1295  00FF08  00                 	db	0
  1296  00FF09                     STR_162:
  1297  00FF09  59                 	db	89	;'Y'
  1298  00FF0A  20                 	db	32
  1299  00FF0B  43                 	db	67	;'C'
  1300  00FF0C  55                 	db	85	;'U'
  1301  00FF0D  52                 	db	82	;'R'
  1302  00FF0E  52                 	db	82	;'R'
  1303  00FF0F  45                 	db	69	;'E'
  1304  00FF10  4E                 	db	78	;'N'
  1305  00FF11  54                 	db	84	;'T'
  1306  00FF12  00                 	db	0
  1307  00FF13                     STR_65:
  1308  00FF13  50                 	db	80	;'P'
  1309  00FF14  4F                 	db	79	;'O'
  1310  00FF15  57                 	db	87	;'W'
  1311  00FF16  45                 	db	69	;'E'
  1312  00FF17  52                 	db	82	;'R'
  1313  00FF18  5F                 	db	95	;'_'
  1314  00FF19  4D                 	db	77	;'M'
  1315  00FF1A  41                 	db	65	;'A'
  1316  00FF1B  58                 	db	88	;'X'
  1317  00FF1C  00                 	db	0
  1318  00FF1D                     STR_178:
  1319  00FF1D  46                 	db	70	;'F'
  1320  00FF1E  52                 	db	82	;'R'
  1321  00FF1F  45                 	db	69	;'E'
  1322  00FF20  51                 	db	81	;'Q'
  1323  00FF21  55                 	db	85	;'U'
  1324  00FF22  45                 	db	69	;'E'
  1325  00FF23  4E                 	db	78	;'N'
  1326  00FF24  43                 	db	67	;'C'
  1327  00FF25  59                 	db	89	;'Y'
  1328  00FF26  00                 	db	0
  1329  00FF27                     STR_128:
  1330  00FF27  53                 	db	83	;'S'
  1331  00FF28  65                 	db	101	;'e'
  1332  00FF29  72                 	db	114	;'r'
  1333  00FF2A  69                 	db	105	;'i'
  1334  00FF2B  61                 	db	97	;'a'
  1335  00FF2C  6C                 	db	108	;'l'
  1336  00FF2D  20                 	db	32
  1337  00FF2E  4E                 	db	78	;'N'
  1338  00FF2F  6F                 	db	111	;'o'
  1339  00FF30  00                 	db	0
  1340  00FF31                     STR_73:
  1341  00FF31  50                 	db	80	;'P'
  1342  00FF32  49                 	db	73	;'I'
  1343  00FF33  54                 	db	84	;'T'
  1344  00FF34  43                 	db	67	;'C'
  1345  00FF35  48                 	db	72	;'H'
  1346  00FF36  5F                 	db	95	;'_'
  1347  00FF37  46                 	db	70	;'F'
  1348  00FF38  42                 	db	66	;'B'
  1349  00FF39  00                 	db	0
  1350  00FF3A                     STR_91:
  1351  00FF3A  53                 	db	83	;'S'
  1352  00FF3B  54                 	db	84	;'T'
  1353  00FF3C  4F                 	db	79	;'O'
  1354  00FF3D  50                 	db	80	;'P'
  1355  00FF3E  50                 	db	80	;'P'
  1356  00FF3F  49                 	db	73	;'I'
  1357  00FF40  4E                 	db	78	;'N'
  1358  00FF41  47                 	db	71	;'G'
  1359  00FF42  00                 	db	0
  1360  00FF43                     STR_134:
  1361  00FF43  57                 	db	87	;'W'
  1362  00FF44  49                 	db	73	;'I'
  1363  00FF45  4E                 	db	78	;'N'
  1364  00FF46  44                 	db	68	;'D'
  1365  00FF47  20                 	db	32
  1366  00FF48  41                 	db	65	;'A'
  1367  00FF49  56                 	db	86	;'V'
  1368  00FF4A  47                 	db	71	;'G'
  1369  00FF4B  00                 	db	0
  1370  00FF4C                     STR_186:
  1371  00FF4C  45                 	db	69	;'E'
  1372  00FF4D  52                 	db	82	;'R'
  1373  00FF4E  52                 	db	82	;'R'
  1374  00FF4F  4F                 	db	79	;'O'
  1375  00FF50  52                 	db	82	;'R'
  1376  00FF51  20                 	db	32
  1377  00FF52  4E                 	db	78	;'N'
  1378  00FF53  4F                 	db	79	;'O'
  1379  00FF54  00                 	db	0
  1380  00FF55                     STR_33:
  1381  00FF55  4E                 	db	78	;'N'
  1382  00FF56  4F                 	db	79	;'O'
  1383  00FF57  5F                 	db	95	;'_'
  1384  00FF58  45                 	db	69	;'E'
  1385  00FF59  52                 	db	82	;'R'
  1386  00FF5A  52                 	db	82	;'R'
  1387  00FF5B  4F                 	db	79	;'O'
  1388  00FF5C  52                 	db	82	;'R'
  1389  00FF5D  00                 	db	0
  1390  00FF5E                     STR_39:
  1391  00FF5E  56                 	db	86	;'V'
  1392  00FF5F  4F                 	db	79	;'O'
  1393  00FF60  4C                 	db	76	;'L'
  1394  00FF61  54                 	db	84	;'T'
  1395  00FF62  5F                 	db	95	;'_'
  1396  00FF63  4C                 	db	76	;'L'
  1397  00FF64  4F                 	db	79	;'O'
  1398  00FF65  57                 	db	87	;'W'
  1399  00FF66  00                 	db	0
  1400  00FF67                     STR_89:
  1401  00FF67  52                 	db	82	;'R'
  1402  00FF68  55                 	db	85	;'U'
  1403  00FF69  4E                 	db	78	;'N'
  1404  00FF6A  4E                 	db	78	;'N'
  1405  00FF6B  49                 	db	73	;'I'
  1406  00FF6C  4E                 	db	78	;'N'
  1407  00FF6D  47                 	db	71	;'G'
  1408  00FF6E  00                 	db	0
  1409  00FF6F                     STR_51:
  1410  00FF6F  44                 	db	68	;'D'
  1411  00FF70  43                 	db	67	;'C'
  1412  00FF71  42                 	db	66	;'B'
  1413  00FF72  5F                 	db	95	;'_'
  1414  00FF73  4C                 	db	76	;'L'
  1415  00FF74  5F                 	db	95	;'_'
  1416  00FF75  48                 	db	72	;'H'
  1417  00FF76  00                 	db	0
  1418  00FF77                     STR_216:
  1419  00FF77  56                 	db	86	;'V'
  1420  00FF78  46                 	db	70	;'F'
  1421  00FF79  44                 	db	68	;'D'
  1422  00FF7A  20                 	db	32
  1423  00FF7B  4F                 	db	79	;'O'
  1424  00FF7C  54                 	db	84	;'T'
  1425  00FF7D  50                 	db	80	;'P'
  1426  00FF7E  00                 	db	0
  1427  00FF7F                     STR_85:
  1428  00FF7F  53                 	db	83	;'S'
  1429  00FF80  54                 	db	84	;'T'
  1430  00FF81  41                 	db	65	;'A'
  1431  00FF82  52                 	db	82	;'R'
  1432  00FF83  54                 	db	84	;'T'
  1433  00FF84  55                 	db	85	;'U'
  1434  00FF85  50                 	db	80	;'P'
  1435  00FF86  00                 	db	0
  1436  00FF87                     STR_235:
  1437  00FF87  28                 	db	40
  1438  00FF88  6E                 	db	110	;'n'
  1439  00FF89  75                 	db	117	;'u'
  1440  00FF8A  6C                 	db	108	;'l'
  1441  00FF8B  6C                 	db	108	;'l'
  1442  00FF8C  29                 	db	41
  1443  00FF8D  00                 	db	0
  1444  00FF8E                     STR_75:
  1445  00FF8E  47                 	db	71	;'G'
  1446  00FF8F  45                 	db	69	;'E'
  1447  00FF90  4E                 	db	78	;'N'
  1448  00FF91  5F                 	db	95	;'_'
  1449  00FF92  46                 	db	70	;'F'
  1450  00FF93  42                 	db	66	;'B'
  1451  00FF94  00                 	db	0
  1452  00FF95                     STR_53:
  1453  00FF95  56                 	db	86	;'V'
  1454  00FF96  46                 	db	70	;'F'
  1455  00FF97  44                 	db	68	;'D'
  1456  00FF98  5F                 	db	95	;'_'
  1457  00FF99  4F                 	db	79	;'O'
  1458  00FF9A  43                 	db	67	;'C'
  1459  00FF9B  00                 	db	0
  1460  00FF9C                     STR_87:
  1461  00FF9C  52                 	db	82	;'R'
  1462  00FF9D  41                 	db	65	;'A'
  1463  00FF9E  4D                 	db	77	;'M'
  1464  00FF9F  50                 	db	80	;'P'
  1465  00FFA0  55                 	db	85	;'U'
  1466  00FFA1  50                 	db	80	;'P'
  1467  00FFA2  00                 	db	0
  1468  00FFA3                     STR_61:
  1469  00FFA3  47                 	db	71	;'G'
  1470  00FFA4  45                 	db	69	;'E'
  1471  00FFA5  4E                 	db	78	;'N'
  1472  00FFA6  5F                 	db	95	;'_'
  1473  00FFA7  4F                 	db	79	;'O'
  1474  00FFA8  53                 	db	83	;'S'
  1475  00FFA9  00                 	db	0
  1476  00FFAA                     STR_158:
  1477  00FFAA  42                 	db	66	;'B'
  1478  00FFAB  20                 	db	32
  1479  00FFAC  56                 	db	86	;'V'
  1480  00FFAD  4F                 	db	79	;'O'
  1481  00FFAE  4C                 	db	76	;'L'
  1482  00FFAF  54                 	db	84	;'T'
  1483  00FFB0  00                 	db	0
  1484  00FFB1                     STR_154:
  1485  00FFB1  52                 	db	82	;'R'
  1486  00FFB2  20                 	db	32
  1487  00FFB3  56                 	db	86	;'V'
  1488  00FFB4  4F                 	db	79	;'O'
  1489  00FFB5  4C                 	db	76	;'L'
  1490  00FFB6  54                 	db	84	;'T'
  1491  00FFB7  00                 	db	0
  1492  00FFB8                     STR_156:
  1493  00FFB8  59                 	db	89	;'Y'
  1494  00FFB9  20                 	db	32
  1495  00FFBA  56                 	db	86	;'V'
  1496  00FFBB  4F                 	db	79	;'O'
  1497  00FFBC  4C                 	db	76	;'L'
  1498  00FFBD  54                 	db	84	;'T'
  1499  00FFBE  00                 	db	0
  1500  00FFBF                     STR_14:
  1501  00FFBF  25                 	db	37
  1502  00FFC0  34                 	db	52	;'4'
  1503  00FFC1  2E                 	db	46
  1504  00FFC2  30                 	db	48	;'0'
  1505  00FFC3  31                 	db	49	;'1'
  1506  00FFC4  66                 	db	102	;'f'
  1507  00FFC5  00                 	db	0
  1508  00FFC6                     STR_4:
  1509  00FFC6  25                 	db	37
  1510  00FFC7  34                 	db	52	;'4'
  1511  00FFC8  2E                 	db	46
  1512  00FFC9  30                 	db	48	;'0'
  1513  00FFCA  32                 	db	50	;'2'
  1514  00FFCB  66                 	db	102	;'f'
  1515  00FFCC  00                 	db	0
  1516  00FFCD                     STR_148:
  1517  00FFCD  56                 	db	86	;'V'
  1518  00FFCE  46                 	db	70	;'F'
  1519  00FFCF  44                 	db	68	;'D'
  1520  00FFD0  20                 	db	32
  1521  00FFD1  48                 	db	72	;'H'
  1522  00FFD2  7A                 	db	122	;'z'
  1523  00FFD3  00                 	db	0
  1524  00FFD4                     STR_15:
  1525  00FFD4  25                 	db	37
  1526  00FFD5  34                 	db	52	;'4'
  1527  00FFD6  2E                 	db	46
  1528  00FFD7  30                 	db	48	;'0'
  1529  00FFD8  66                 	db	102	;'f'
  1530  00FFD9  00                 	db	0
  1531  00FFDA                     STR_192:
  1532  00FFDA  44                 	db	68	;'D'
  1533  00FFDB  41                 	db	65	;'A'
  1534  00FFDC  54                 	db	84	;'T'
  1535  00FFDD  45                 	db	69	;'E'
  1536  00FFDE  00                 	db	0
  1537  00FFDF                     STR_45:
  1538  00FFDF  46                 	db	70	;'F'
  1539  00FFE0  52                 	db	82	;'R'
  1540  00FFE1  45                 	db	69	;'E'
  1541  00FFE2  51                 	db	81	;'Q'
  1542  00FFE3  00                 	db	0
  1543  00FFE4                     STR_172:
  1544  00FFE4  4B                 	db	75	;'K'
  1545  00FFE5  56                 	db	86	;'V'
  1546  00FFE6  41                 	db	65	;'A'
  1547  00FFE7  52                 	db	82	;'R'
  1548  00FFE8  00                 	db	0
  1549  00FFE9                     STR_168:
  1550  00FFE9  59                 	db	89	;'Y'
  1551  00FFEA  2D                 	db	45
  1552  00FFEB  4B                 	db	75	;'K'
  1553  00FFEC  57                 	db	87	;'W'
  1554  00FFED  00                 	db	0
  1555  00FFEE                     STR_170:
  1556  00FFEE  4B                 	db	75	;'K'
  1557  00FFEF  56                 	db	86	;'V'
  1558  00FFF0  41                 	db	65	;'A'
  1559  00FFF1  00                 	db	0
  1560  00FFF2                     STR_9:
  1561  00FFF2  25                 	db	37
  1562  00FFF3  64                 	db	100	;'d'
  1563  00FFF4  00                 	db	0
  1564  00FFF5                     STR_2:
  1565  00FFF5  25                 	db	37
  1566  00FFF6  73                 	db	115	;'s'
  1567  00FFF7  00                 	db	0
  1568  00FFF8                     STR_1:
  1569  00FFF8  25                 	db	37
  1570  00FFF9  75                 	db	117	;'u'
  1571  00FFFA  00                 	db	0
  1572  00FFFB                     STR_124:
  1573  00FFFB  0A                 	db	10
  1574  00FFFC  00                 	db	0
  1575  00FFFD                     STR_123:
  1576  00FFFD  0D                 	db	13
  1577  00FFFE  00                 	db	0
  1578  0000                     
  1579                           ; #config settings
  1580  00FFFF  00                 	db	0	; dummy byte at the end
  1581  0000                     
  1582                           	psect	cinit
  1583  019C86                     __pcinit:
  1584                           	opt stack 0
  1585  019C86                     start_initialization:
  1586                           	opt stack 0
  1587  019C86                     __initialization:
  1588                           	opt stack 0
  1589                           
  1590                           ; Initialize objects allocated to BANK5 (2 bytes)
  1591                           ; load TBLPTR registers with __pidataBANK5
  1592  019C86  0EC8               	movlw	low __pidataBANK5
  1593  019C88  6EF6               	movwf	tblptrl,c
  1594  019C8A  0EB1               	movlw	high __pidataBANK5
  1595  019C8C  6EF7               	movwf	tblptrh,c
  1596  019C8E  0E01               	movlw	low (__pidataBANK5 shr (0+16))
  1597  019C90  6EF8               	movwf	tblptru,c
  1598  019C92  0009               	tblrd		*+	;fetch initializer
  1599  019C94  CFF5 F5FC          	movff	tablat,__pdataBANK5
  1600  019C98  0009               	tblrd		*+	;fetch initializer
  1601  019C9A  CFF5 F5FD          	movff	tablat,__pdataBANK5+1
  1602                           
  1603                           ; Initialize objects allocated to BANK1 (2 bytes)
  1604                           ; load TBLPTR registers with __pidataBANK1
  1605  019C9E  0EC6               	movlw	low __pidataBANK1
  1606  019CA0  6EF6               	movwf	tblptrl,c
  1607  019CA2  0EB1               	movlw	high __pidataBANK1
  1608  019CA4  6EF7               	movwf	tblptrh,c
  1609  019CA6  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1610  019CA8  6EF8               	movwf	tblptru,c
  1611  019CAA  0009               	tblrd		*+	;fetch initializer
  1612  019CAC  CFF5 F1C7          	movff	tablat,__pdataBANK1
  1613  019CB0  0009               	tblrd		*+	;fetch initializer
  1614  019CB2  CFF5 F1C8          	movff	tablat,__pdataBANK1+1
  1615                           
  1616                           ; Clear objects allocated to BANK6 (120 bytes)
  1617  019CB6  EE06  F000         	lfsr	0,__pbssBANK6
  1618  019CBA  0E78               	movlw	120
  1619  019CBC                     clear_0:
  1620  019CBC  6AEE               	clrf	postinc0,c
  1621  019CBE  06E8               	decf	wreg,f,c
  1622  019CC0  E1FD               	bnz	clear_0
  1623                           
  1624                           ; Clear objects allocated to BANK5 (252 bytes)
  1625  019CC2  EE05  F000         	lfsr	0,__pbssBANK5
  1626  019CC6  0EFC               	movlw	252
  1627  019CC8                     clear_1:
  1628  019CC8  6AEE               	clrf	postinc0,c
  1629  019CCA  06E8               	decf	wreg,f,c
  1630  019CCC  E1FD               	bnz	clear_1
  1631                           
  1632                           ; Clear objects allocated to BANK4 (255 bytes)
  1633  019CCE  EE04  F000         	lfsr	0,__pbssBANK4
  1634  019CD2  EE10 F0FF          	lfsr	1,255
  1635  019CD6                     clear_2:
  1636  019CD6  6AEE               	clrf	postinc0,c
  1637  019CD8  50E5               	movf	postdec1,w,c
  1638  019CDA  50E1               	movf	fsr1l,w,c
  1639  019CDC  E1FC               	bnz	clear_2
  1640  019CDE  50E2               	movf	fsr1h,w,c
  1641  019CE0  E1FA               	bnz	clear_2
  1642                           
  1643                           ; Clear objects allocated to BANK3 (255 bytes)
  1644  019CE2  EE03  F000         	lfsr	0,__pbssBANK3
  1645  019CE6  EE10 F0FF          	lfsr	1,255
  1646  019CEA                     clear_3:
  1647  019CEA  6AEE               	clrf	postinc0,c
  1648  019CEC  50E5               	movf	postdec1,w,c
  1649  019CEE  50E1               	movf	fsr1l,w,c
  1650  019CF0  E1FC               	bnz	clear_3
  1651  019CF2  50E2               	movf	fsr1h,w,c
  1652  019CF4  E1FA               	bnz	clear_3
  1653                           
  1654                           ; Clear objects allocated to BANK2 (255 bytes)
  1655  019CF6  EE02  F000         	lfsr	0,__pbssBANK2
  1656  019CFA  EE10 F0FF          	lfsr	1,255
  1657  019CFE                     clear_4:
  1658  019CFE  6AEE               	clrf	postinc0,c
  1659  019D00  50E5               	movf	postdec1,w,c
  1660  019D02  50E1               	movf	fsr1l,w,c
  1661  019D04  E1FC               	bnz	clear_4
  1662  019D06  50E2               	movf	fsr1h,w,c
  1663  019D08  E1FA               	bnz	clear_4
  1664                           
  1665                           ; Clear objects allocated to BANK1 (170 bytes)
  1666  019D0A  EE01  F000         	lfsr	0,__pbssBANK1
  1667  019D0E  0EAA               	movlw	170
  1668  019D10                     clear_5:
  1669  019D10  6AEE               	clrf	postinc0,c
  1670  019D12  06E8               	decf	wreg,f,c
  1671  019D14  E1FD               	bnz	clear_5
  1672                           
  1673                           ; Clear objects allocated to BANK0 (60 bytes)
  1674  019D16  EE00  F0C4         	lfsr	0,__pbssBANK0
  1675  019D1A  0E3C               	movlw	60
  1676  019D1C                     clear_6:
  1677  019D1C  6AEE               	clrf	postinc0,c
  1678  019D1E  06E8               	decf	wreg,f,c
  1679  019D20  E1FD               	bnz	clear_6
  1680                           
  1681                           ; Clear objects allocated to COMRAM (36 bytes)
  1682  019D22  EE00  F001         	lfsr	0,__pbssCOMRAM
  1683  019D26  0E24               	movlw	36
  1684  019D28                     clear_7:
  1685  019D28  6AEE               	clrf	postinc0,c
  1686  019D2A  06E8               	decf	wreg,f,c
  1687  019D2C  E1FD               	bnz	clear_7
  1688  019D2E                     end_of_initialization:
  1689                           	opt stack 0
  1690  019D2E                     __end_of__initialization:
  1691                           	opt stack 0
  1692  019D2E  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1693  019D30  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1694  019D32  0100               	movlb	0
  1695  019D34  EFFA  F0BA         	goto	_main	;jump to C main() function
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           postdec1	equ	0xFE5
  1703                           fsr1h	equ	0xFE2
  1704                           fsr1l	equ	0xFE1
  1705                           
  1706                           	psect	bssCOMRAM
  1707  000001                     __pbssCOMRAM:
  1708                           	opt stack 0
  1709  000001                     _B_Volt:
  1710                           	opt stack 0
  1711  000001                     	ds	3
  1712  000004                     _Generator_RPM_FLT:
  1713                           	opt stack 0
  1714  000004                     	ds	3
  1715  000007                     _R_Volt:
  1716                           	opt stack 0
  1717  000007                     	ds	3
  1718  00000A                     _Turbine_RPM:
  1719                           	opt stack 0
  1720  00000A                     	ds	3
  1721  00000D                     _Wind_Speed_Avg:
  1722                           	opt stack 0
  1723  00000D                     	ds	3
  1724  000010                     _Y_Volt:
  1725                           	opt stack 0
  1726  000010                     	ds	3
  1727  000013                     _GiMinutes_2:
  1728                           	opt stack 0
  1729  000013                     	ds	2
  1730  000015                     _Communication_OTP:
  1731                           	opt stack 0
  1732  000015                     	ds	1
  1733  000016                     _Desired_Frequency:
  1734                           	opt stack 0
  1735  000016                     	ds	1
  1736  000017                     _EEPROM_Error_Flag:
  1737                           	opt stack 0
  1738  000017                     	ds	1
  1739  000018                     _EP_Errors1:
  1740                           	opt stack 0
  1741  000018                     	ds	1
  1742  000019                     _EP_Errors2:
  1743                           	opt stack 0
  1744  000019                     	ds	1
  1745  00001A                     _EP_Errors3:
  1746                           	opt stack 0
  1747  00001A                     	ds	1
  1748  00001B                     _Errors:
  1749                           	opt stack 0
  1750  00001B                     	ds	1
  1751  00001C                     _Grid_Over_current:
  1752                           	opt stack 0
  1753  00001C                     	ds	1
  1754  00001D                     _PS:
  1755                           	opt stack 0
  1756  00001D                     	ds	1
  1757  00001E                     _Phase_Sequence_Ok:
  1758                           	opt stack 0
  1759  00001E                     	ds	1
  1760  00001F                     _Start_Stop_Flag:
  1761                           	opt stack 0
  1762  00001F                     	ds	1
  1763  000020                     _VFD_Error_No:
  1764                           	opt stack 0
  1765  000020                     	ds	1
  1766  000021                     _i:
  1767                           	opt stack 0
  1768  000021                     	ds	1
  1769  000022                     _KW:
  1770                           	opt stack 0
  1771  000022                     	ds	3
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1h	equ	0xFE2
  1780                           fsr1l	equ	0xFE1
  1781                           
  1782                           	psect	bssBANK0
  1783  0000C4                     __pbssBANK0:
  1784                           	opt stack 0
  1785  0000C4                     _B_Curr:
  1786                           	opt stack 0
  1787  0000C4                     	ds	3
  1788  0000C7                     _Frequency:
  1789                           	opt stack 0
  1790  0000C7                     	ds	3
  1791  0000CA                     _Motor_slip:
  1792                           	opt stack 0
  1793  0000CA                     	ds	3
  1794  0000CD                     _R_Curr:
  1795                           	opt stack 0
  1796  0000CD                     	ds	3
  1797  0000D0                     _R_V_Old:
  1798                           	opt stack 0
  1799  0000D0                     	ds	3
  1800  0000D3                     _Rotor_slip:
  1801                           	opt stack 0
  1802  0000D3                     	ds	3
  1803  0000D6                     _Y_Curr:
  1804                           	opt stack 0
  1805  0000D6                     	ds	3
  1806  0000D9                     _GiHours_2:
  1807                           	opt stack 0
  1808  0000D9                     	ds	2
  1809  0000DB                     _GiMinutes_1:
  1810                           	opt stack 0
  1811  0000DB                     	ds	2
  1812  0000DD                     _GiMinutes_3:
  1813                           	opt stack 0
  1814  0000DD                     	ds	2
  1815  0000DF                     _Serial_No:
  1816                           	opt stack 0
  1817  0000DF                     	ds	2
  1818  0000E1                     _Errors1:
  1819                           	opt stack 0
  1820  0000E1                     	ds	1
  1821  0000E2                     _G_RPM_counter:
  1822                           	opt stack 0
  1823  0000E2                     	ds	1
  1824  0000E3                     _Gen_EP_Err_Flag:
  1825                           	opt stack 0
  1826  0000E3                     	ds	1
  1827  0000E4                     _Grid_Frequency_Error:
  1828                           	opt stack 0
  1829  0000E4                     	ds	1
  1830  0000E5                     _Grid_Ovr_voltage:
  1831                           	opt stack 0
  1832  0000E5                     	ds	1
  1833  0000E6                     _Grid_Phase_Sequence_Error:
  1834                           	opt stack 0
  1835  0000E6                     	ds	1
  1836  0000E7                     _Grid_Und_voltage:
  1837                           	opt stack 0
  1838  0000E7                     	ds	1
  1839  0000E8                     _One_Sec_Flag:
  1840                           	opt stack 0
  1841  0000E8                     	ds	1
  1842  0000E9                     _Pitch_EP_Err_Flag:
  1843                           	opt stack 0
  1844  0000E9                     	ds	1
  1845  0000EA                     _Pitch_FB_Error_Flag:
  1846                           	opt stack 0
  1847  0000EA                     	ds	1
  1848  0000EB                     _RPM_counter:
  1849                           	opt stack 0
  1850  0000EB                     	ds	1
  1851  0000EC                     _TRPM_Cal:
  1852                           	opt stack 0
  1853  0000EC                     	ds	1
  1854  0000ED                     _Ten_Sec_Counter:
  1855                           	opt stack 0
  1856  0000ED                     	ds	1
  1857  0000EE                     _Ten_Sec_Counter_2:
  1858                           	opt stack 0
  1859  0000EE                     	ds	1
  1860  0000EF                     _Turbine_Over_Speed_Flag:
  1861                           	opt stack 0
  1862  0000EF                     	ds	1
  1863  0000F0                     _Turbine_state:
  1864                           	opt stack 0
  1865  0000F0                     	ds	1
  1866  0000F1                     _VFD_communication_Error_Flag:
  1867                           	opt stack 0
  1868  0000F1                     	ds	1
  1869  0000F2                     _Wind_Cut_Out_Flag:
  1870                           	opt stack 0
  1871  0000F2                     	ds	1
  1872  0000F3                     _counter_1:
  1873                           	opt stack 0
  1874  0000F3                     	ds	1
  1875  0000F4                     _Bcurr_V_New:
  1876                           	opt stack 0
  1877  0000F4                     	ds	3
  1878  0000F7                     _R_V_New:
  1879                           	opt stack 0
  1880  0000F7                     	ds	3
  1881  0000FA                     _Rcurr_V_New:
  1882                           	opt stack 0
  1883  0000FA                     	ds	3
  1884  0000FD                     _Ycurr_V_New:
  1885                           	opt stack 0
  1886  0000FD                     	ds	3
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           postinc0	equ	0xFEE
  1892                           wreg	equ	0xFE8
  1893                           postdec1	equ	0xFE5
  1894                           fsr1h	equ	0xFE2
  1895                           fsr1l	equ	0xFE1
  1896                           
  1897                           	psect	bssBANK1
  1898  000100                     __pbssBANK1:
  1899                           	opt stack 0
  1900  000100                     _Avg_RYB_Current:
  1901                           	opt stack 0
  1902  000100                     	ds	3
  1903  000103                     _B_Gap_Ratio:
  1904                           	opt stack 0
  1905  000103                     	ds	3
  1906  000106                     _Generator_RPM_New:
  1907                           	opt stack 0
  1908  000106                     	ds	3
  1909  000109                     _Generator_RPM_Old:
  1910                           	opt stack 0
  1911  000109                     	ds	3
  1912  00010C                     _R_C_Max:
  1913                           	opt stack 0
  1914  00010C                     	ds	3
  1915  00010F                     _R_Gap_Ratio:
  1916                           	opt stack 0
  1917  00010F                     	ds	3
  1918  000112                     _R_V_Max:
  1919                           	opt stack 0
  1920  000112                     	ds	3
  1921  000115                     _Turbine_RPM_New:
  1922                           	opt stack 0
  1923  000115                     	ds	3
  1924  000118                     _Turbine_RPM_Old:
  1925                           	opt stack 0
  1926  000118                     	ds	3
  1927  00011B                     _Y_Gap_Ratio:
  1928                           	opt stack 0
  1929  00011B                     	ds	3
  1930  00011E                     _B_Peak:
  1931                           	opt stack 0
  1932  00011E                     	ds	2
  1933  000120                     _Capacitor_Counter:
  1934                           	opt stack 0
  1935  000120                     	ds	2
  1936  000122                     _GRPM_Cap_New:
  1937                           	opt stack 0
  1938  000122                     	ds	2
  1939  000124                     _GRPM_Cap_Old:
  1940                           	opt stack 0
  1941  000124                     	ds	2
  1942  000126                     _GiHours_1:
  1943                           	opt stack 0
  1944  000126                     	ds	2
  1945  000128                     _GiHours_3:
  1946                           	opt stack 0
  1947  000128                     	ds	2
  1948  00012A                     _Initial_Delay_Second:
  1949                           	opt stack 0
  1950  00012A                     	ds	2
  1951  00012C                     _RPM_Time:
  1952                           	opt stack 0
  1953  00012C                     	ds	2
  1954  00012E                     _R_Peak:
  1955                           	opt stack 0
  1956  00012E                     	ds	2
  1957  000130                     _TRPM_Cap_New:
  1958                           	opt stack 0
  1959  000130                     	ds	2
  1960  000132                     _TRPM_Cap_Old:
  1961                           	opt stack 0
  1962  000132                     	ds	2
  1963  000134                     _Timer1_OF_counter_Generator_New:
  1964                           	opt stack 0
  1965  000134                     	ds	2
  1966  000136                     _Timer1_OF_counter_New:
  1967                           	opt stack 0
  1968  000136                     	ds	2
  1969  000138                     _Timer1_OF_counter_Wind_2_temp_New:
  1970                           	opt stack 0
  1971  000138                     	ds	2
  1972  00013A                     _Timer1_OF_counter_Wind_temp_New:
  1973                           	opt stack 0
  1974  00013A                     	ds	2
  1975  00013C                     _Timer1_counter:
  1976                           	opt stack 0
  1977  00013C                     	ds	2
  1978  00013E                     _VFD_Bus_Voltage:
  1979                           	opt stack 0
  1980  00013E                     	ds	2
  1981  000140                     _VFD_Run_Time_Counter:
  1982                           	opt stack 0
  1983  000140                     	ds	2
  1984  000142                     _Wind_Cap_New:
  1985                           	opt stack 0
  1986  000142                     	ds	2
  1987  000144                     _Wind_Cap_New_2:
  1988                           	opt stack 0
  1989  000144                     	ds	2
  1990  000146                     _Wind_Cap_Old:
  1991                           	opt stack 0
  1992  000146                     	ds	2
  1993  000148                     _Wind_Cap_Old_2:
  1994                           	opt stack 0
  1995  000148                     	ds	2
  1996  00014A                     _Y_Peak:
  1997                           	opt stack 0
  1998  00014A                     	ds	2
  1999  00014C                     _B_PF_Flag:
  2000                           	opt stack 0
  2001  00014C                     	ds	1
  2002  00014D                     _DC_BUS_Current_Counter:
  2003                           	opt stack 0
  2004  00014D                     	ds	1
  2005  00014E                     _DC_BUS_High_Counter:
  2006                           	opt stack 0
  2007  00014E                     	ds	1
  2008  00014F                     _DC_BUS_Low_Counter:
  2009                           	opt stack 0
  2010  00014F                     	ds	1
  2011  000150                     _DC_Bus_Voltage_Flag:
  2012                           	opt stack 0
  2013  000150                     	ds	1
  2014  000151                     _Delay_counter:
  2015                           	opt stack 0
  2016  000151                     	ds	1
  2017  000152                     _Errors2:
  2018                           	opt stack 0
  2019  000152                     	ds	1
  2020  000153                     _Errors3:
  2021                           	opt stack 0
  2022  000153                     	ds	1
  2023  000154                     _Errors4:
  2024                           	opt stack 0
  2025  000154                     	ds	1
  2026  000155                     _Errors5:
  2027                           	opt stack 0
  2028  000155                     	ds	1
  2029  000156                     _Feedback_Error:
  2030                           	opt stack 0
  2031  000156                     	ds	1
  2032  000157                     _Five_Delay_counter:
  2033                           	opt stack 0
  2034  000157                     	ds	1
  2035  000158                     _Five_Sec_Delay_vab:
  2036                           	opt stack 0
  2037  000158                     	ds	1
  2038  000159                     _Five_Second_flag:
  2039                           	opt stack 0
  2040  000159                     	ds	1
  2041  00015A                     _Freq_Flag:
  2042                           	opt stack 0
  2043  00015A                     	ds	1
  2044  00015B                     _Frequency_Error_counter:
  2045                           	opt stack 0
  2046  00015B                     	ds	1
  2047  00015C                     _G_RPM_Counter:
  2048                           	opt stack 0
  2049  00015C                     	ds	1
  2050  00015D                     _GcDate:
  2051                           	opt stack 0
  2052  00015D                     	ds	1
  2053  00015E                     _GcHour:
  2054                           	opt stack 0
  2055  00015E                     	ds	1
  2056  00015F                     _GcMin:
  2057                           	opt stack 0
  2058  00015F                     	ds	1
  2059  000160                     _GcMonth:
  2060                           	opt stack 0
  2061  000160                     	ds	1
  2062  000161                     _GcSec:
  2063                           	opt stack 0
  2064  000161                     	ds	1
  2065  000162                     _GcYear:
  2066                           	opt stack 0
  2067  000162                     	ds	1
  2068  000163                     _Generator_One_Counter:
  2069                           	opt stack 0
  2070  000163                     	ds	1
  2071  000164                     _Generator_One_Feedback_Error:
  2072                           	opt stack 0
  2073  000164                     	ds	1
  2074  000165                     _Generator_Over_Speed:
  2075                           	opt stack 0
  2076  000165                     	ds	1
  2077  000166                     _Grid_Ov_Counter:
  2078                           	opt stack 0
  2079  000166                     	ds	1
  2080  000167                     _Grid_UV_Counter:
  2081                           	opt stack 0
  2082  000167                     	ds	1
  2083  000168                     _KW_Counter:
  2084                           	opt stack 0
  2085  000168                     	ds	1
  2086  000169                     _KW_Counter_Max:
  2087                           	opt stack 0
  2088  000169                     	ds	1
  2089  00016A                     _KW_Maximum_Error:
  2090                           	opt stack 0
  2091  00016A                     	ds	1
  2092  00016B                     _KW_Minimum_Error:
  2093                           	opt stack 0
  2094  00016B                     	ds	1
  2095  00016C                     _Key_Counter:
  2096                           	opt stack 0
  2097  00016C                     	ds	1
  2098  00016D                     _Key_Flag:
  2099                           	opt stack 0
  2100  00016D                     	ds	1
  2101  00016E                     _Minutes:
  2102                           	opt stack 0
  2103  00016E                     	ds	1
  2104  00016F                     _Minutes_1:
  2105                           	opt stack 0
  2106  00016F                     	ds	1
  2107  000170                     _Motor_Slip_Error_Flag:
  2108                           	opt stack 0
  2109  000170                     	ds	1
  2110  000171                     _OV_Counter:
  2111                           	opt stack 0
  2112  000171                     	ds	1
  2113  000172                     _One_Sec_Delay_vab:
  2114                           	opt stack 0
  2115  000172                     	ds	1
  2116  000173                     _One_Time_Flag:
  2117                           	opt stack 0
  2118  000173                     	ds	1
  2119  000174                     _One_sec_Delay_Flag:
  2120                           	opt stack 0
  2121  000174                     	ds	1
  2122  000175                     _Phase_Angle:
  2123                           	opt stack 0
  2124  000175                     	ds	1
  2125  000176                     _Pitch_FB_Error_counter:
  2126                           	opt stack 0
  2127  000176                     	ds	1
  2128  000177                     _RS485_Data_Flag:
  2129                           	opt stack 0
  2130  000177                     	ds	1
  2131  000178                     _R_PF_Flag:
  2132                           	opt stack 0
  2133  000178                     	ds	1
  2134  000179                     _Rotor_Slip_Error_Flag:
  2135                           	opt stack 0
  2136  000179                     	ds	1
  2137  00017A                     _S_S_Counter:
  2138                           	opt stack 0
  2139  00017A                     	ds	1
  2140  00017B                     _Slip_Error_Counter:
  2141                           	opt stack 0
  2142  00017B                     	ds	1
  2143  00017C                     _Slip_Error_Counter_1:
  2144                           	opt stack 0
  2145  00017C                     	ds	1
  2146  00017D                     _Slip_Flag:
  2147                           	opt stack 0
  2148  00017D                     	ds	1
  2149  00017E                     _Stopping_Counter:
  2150                           	opt stack 0
  2151  00017E                     	ds	1
  2152  00017F                     _TRPM_OverSpeed_Counter:
  2153                           	opt stack 0
  2154  00017F                     	ds	1
  2155  000180                     _TRPM_Under_Speed_Counter:
  2156                           	opt stack 0
  2157  000180                     	ds	1
  2158  000181                     _T_Overload_counter:
  2159                           	opt stack 0
  2160  000181                     	ds	1
  2161  000182                     _T_RPM_counter:
  2162                           	opt stack 0
  2163  000182                     	ds	1
  2164  000183                     _Ten_Sec_RampUp_Flag:
  2165                           	opt stack 0
  2166  000183                     	ds	1
  2167  000184                     _Timer0_Falg2:
  2168                           	opt stack 0
  2169  000184                     	ds	1
  2170  000185                     _Timer0_RAMPUP_Counter:
  2171                           	opt stack 0
  2172  000185                     	ds	1
  2173  000186                     _Timer1_interrupt_flag:
  2174                           	opt stack 0
  2175  000186                     	ds	1
  2176  000187                     _Total_Min:
  2177                           	opt stack 0
  2178  000187                     	ds	1
  2179  000188                     _Tur_OverLoaded_Error:
  2180                           	opt stack 0
  2181  000188                     	ds	1
  2182  000189                     _Turbine_Restore_Error:
  2183                           	opt stack 0
  2184  000189                     	ds	1
  2185  00018A                     _Turbine_Under_Speed_Flag:
  2186                           	opt stack 0
  2187  00018A                     	ds	1
  2188  00018B                     _Two_Delay_counter:
  2189                           	opt stack 0
  2190  00018B                     	ds	1
  2191  00018C                     _Two_Sec_Delay_vab:
  2192                           	opt stack 0
  2193  00018C                     	ds	1
  2194  00018D                     _Two_sec_Delay_Flag:
  2195                           	opt stack 0
  2196  00018D                     	ds	1
  2197  00018E                     _VFD_DC_Bus_Current_Error:
  2198                           	opt stack 0
  2199  00018E                     	ds	1
  2200  00018F                     _VFD_DC_Bus_High_Error:
  2201                           	opt stack 0
  2202  00018F                     	ds	1
  2203  000190                     _VFD_DC_Bus_Low_Error:
  2204                           	opt stack 0
  2205  000190                     	ds	1
  2206  000191                     _VFD_DC_EXTREM_LOW_Error:
  2207                           	opt stack 0
  2208  000191                     	ds	1
  2209  000192                     _VFD_Error_Flag:
  2210                           	opt stack 0
  2211  000192                     	ds	1
  2212  000193                     _VFD_ON_Flag:
  2213                           	opt stack 0
  2214  000193                     	ds	1
  2215  000194                     _VFD_On_Off:
  2216                           	opt stack 0
  2217  000194                     	ds	1
  2218  000195                     _VFD_RAMP:
  2219                           	opt stack 0
  2220  000195                     	ds	1
  2221  000196                     _VFD__Run_Time_Error:
  2222                           	opt stack 0
  2223  000196                     	ds	1
  2224  000197                     _VFD_communication_Error_Counter:
  2225                           	opt stack 0
  2226  000197                     	ds	1
  2227  000198                     _Volt_Curr_Flag:
  2228                           	opt stack 0
  2229  000198                     	ds	1
  2230  000199                     _Wind_Cut_In_Flag:
  2231                           	opt stack 0
  2232  000199                     	ds	1
  2233  00019A                     _Wind_Cut_Out_Counter:
  2234                           	opt stack 0
  2235  00019A                     	ds	1
  2236  00019B                     _Y_PF_Flag:
  2237                           	opt stack 0
  2238  00019B                     	ds	1
  2239  00019C                     _wind_1_Temp_flag:
  2240                           	opt stack 0
  2241  00019C                     	ds	1
  2242  00019D                     _wind_2_Temp_flag:
  2243                           	opt stack 0
  2244  00019D                     	ds	1
  2245  00019E                     _Bcurr_New:
  2246                           	opt stack 0
  2247  00019E                     	ds	3
  2248  0001A1                     _Rcurr_New:
  2249                           	opt stack 0
  2250  0001A1                     	ds	3
  2251  0001A4                     _Time_New:
  2252                           	opt stack 0
  2253  0001A4                     	ds	3
  2254  0001A7                     _Ycurr_New:
  2255                           	opt stack 0
  2256  0001A7                     	ds	3
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           postinc0	equ	0xFEE
  2262                           wreg	equ	0xFE8
  2263                           postdec1	equ	0xFE5
  2264                           fsr1h	equ	0xFE2
  2265                           fsr1l	equ	0xFE1
  2266                           
  2267                           	psect	dataBANK1
  2268  0001C7                     __pdataBANK1:
  2269                           	opt stack 0
  2270  0001C7                     _Case_Call:
  2271                           	opt stack 0
  2272  0001C7                     	ds	1
  2273  0001C8                     _Start_up_Error:
  2274                           	opt stack 0
  2275  0001C8                     	ds	1
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           postinc0	equ	0xFEE
  2281                           wreg	equ	0xFE8
  2282                           postdec1	equ	0xFE5
  2283                           fsr1h	equ	0xFE2
  2284                           fsr1l	equ	0xFE1
  2285                           
  2286                           	psect	bssBANK2
  2287  000200                     __pbssBANK2:
  2288                           	opt stack 0
  2289  000200                     _Avg_RYB_Voltage:
  2290                           	opt stack 0
  2291  000200                     	ds	3
  2292  000203                     _BGR_Avg_1:
  2293                           	opt stack 0
  2294  000203                     	ds	3
  2295  000206                     _B_C_Max:
  2296                           	opt stack 0
  2297  000206                     	ds	3
  2298  000209                     _B_V_Max:
  2299                           	opt stack 0
  2300  000209                     	ds	3
  2301  00020C                     _Bcurr_V_Old:
  2302                           	opt stack 0
  2303  00020C                     	ds	3
  2304  00020F                     _DC_Bus_Current:
  2305                           	opt stack 0
  2306  00020F                     	ds	3
  2307  000212                     _GENERATOR_RPM_THEORY:
  2308                           	opt stack 0
  2309  000212                     	ds	3
  2310  000215                     _Gen_Theory:
  2311                           	opt stack 0
  2312  000215                     	ds	3
  2313  000218                     _KVA:
  2314                           	opt stack 0
  2315  000218                     	ds	3
  2316  00021B                     _RGR_Avg_1:
  2317                           	opt stack 0
  2318  00021B                     	ds	3
  2319  00021E                     _Rcurr_V_Old:
  2320                           	opt stack 0
  2321  00021E                     	ds	3
  2322  000221                     _Temp:
  2323                           	opt stack 0
  2324  000221                     	ds	3
  2325  000224                     _Temprature:
  2326                           	opt stack 0
  2327  000224                     	ds	3
  2328  000227                     _Time_Old:
  2329                           	opt stack 0
  2330  000227                     	ds	3
  2331  00022A                     _Total_Power_Factor:
  2332                           	opt stack 0
  2333  00022A                     	ds	3
  2334  00022D                     _Turbine2Wheel_Ratio_Avg:
  2335                           	opt stack 0
  2336  00022D                     	ds	3
  2337  000230                     _Wind_Spd_2:
  2338                           	opt stack 0
  2339  000230                     	ds	3
  2340  000233                     _Wind_Speed:
  2341                           	opt stack 0
  2342  000233                     	ds	3
  2343  000236                     _Wind_Speed_0:
  2344                           	opt stack 0
  2345  000236                     	ds	3
  2346  000239                     _Wind_Speed_0_2:
  2347                           	opt stack 0
  2348  000239                     	ds	3
  2349  00023C                     _Wind_Speed_1:
  2350                           	opt stack 0
  2351  00023C                     	ds	3
  2352  00023F                     _Wind_Speed_1_2:
  2353                           	opt stack 0
  2354  00023F                     	ds	3
  2355  000242                     _Wind_Speed_2:
  2356                           	opt stack 0
  2357  000242                     	ds	3
  2358  000245                     _Wind_Speed_2_2:
  2359                           	opt stack 0
  2360  000245                     	ds	3
  2361  000248                     _Wind_Speed_3:
  2362                           	opt stack 0
  2363  000248                     	ds	3
  2364  00024B                     _Wind_Speed_3_2:
  2365                           	opt stack 0
  2366  00024B                     	ds	3
  2367  00024E                     _Wind_Speed_4:
  2368                           	opt stack 0
  2369  00024E                     	ds	3
  2370  000251                     _Wind_Speed_4_2:
  2371                           	opt stack 0
  2372  000251                     	ds	3
  2373  000254                     _Wind_Speed_5:
  2374                           	opt stack 0
  2375  000254                     	ds	3
  2376  000257                     _Wind_Speed_5_2:
  2377                           	opt stack 0
  2378  000257                     	ds	3
  2379  00025A                     _Wind_Speed_6:
  2380                           	opt stack 0
  2381  00025A                     	ds	3
  2382  00025D                     _Wind_Speed_6_2:
  2383                           	opt stack 0
  2384  00025D                     	ds	3
  2385  000260                     _Wind_Speed_7:
  2386                           	opt stack 0
  2387  000260                     	ds	3
  2388  000263                     _Wind_Speed_7_2:
  2389                           	opt stack 0
  2390  000263                     	ds	3
  2391  000266                     _Wind_Speed_8:
  2392                           	opt stack 0
  2393  000266                     	ds	3
  2394  000269                     _Wind_Speed_8_2:
  2395                           	opt stack 0
  2396  000269                     	ds	3
  2397  00026C                     _YGR_Avg_1:
  2398                           	opt stack 0
  2399  00026C                     	ds	3
  2400  00026F                     _Y_C_Max:
  2401                           	opt stack 0
  2402  00026F                     	ds	3
  2403  000272                     _Y_Power_Factor:
  2404                           	opt stack 0
  2405  000272                     	ds	3
  2406  000275                     _Y_V_Max:
  2407                           	opt stack 0
  2408  000275                     	ds	3
  2409  000278                     _Ycurr_V_Old:
  2410                           	opt stack 0
  2411  000278                     	ds	3
  2412  00027B                     _lc_Current_T_RPM:
  2413                           	opt stack 0
  2414  00027B                     	ds	3
  2415  00027E                     _BV_PS:
  2416                           	opt stack 0
  2417  00027E                     	ds	2
  2418  000280                     _B_C:
  2419                           	opt stack 0
  2420  000280                     	ds	2
  2421  000282                     _B_V:
  2422                           	opt stack 0
  2423  000282                     	ds	2
  2424  000284                     _GRPM_Cap:
  2425                           	opt stack 0
  2426  000284                     	ds	2
  2427  000286                     _GRPM_Counter:
  2428                           	opt stack 0
  2429  000286                     	ds	2
  2430  000288                     _Generator_RPM_INT:
  2431                           	opt stack 0
  2432  000288                     	ds	2
  2433  00028A                     _GiData:
  2434                           	opt stack 0
  2435  00028A                     	ds	2
  2436  00028C                     _GiHours:
  2437                           	opt stack 0
  2438  00028C                     	ds	2
  2439  00028E                     _GiMinutes:
  2440                           	opt stack 0
  2441  00028E                     	ds	2
  2442  000290                     _GiSeconds:
  2443                           	opt stack 0
  2444  000290                     	ds	2
  2445  000292                     _Gi_Timer1_OF_counter:
  2446                           	opt stack 0
  2447  000292                     	ds	2
  2448  000294                     _Pitch_Counter:
  2449                           	opt stack 0
  2450  000294                     	ds	2
  2451  000296                     _Pitching_FlAG:
  2452                           	opt stack 0
  2453  000296                     	ds	2
  2454  000298                     _RV_PS:
  2455                           	opt stack 0
  2456  000298                     	ds	2
  2457  00029A                     _R_C:
  2458                           	opt stack 0
  2459  00029A                     	ds	2
  2460  00029C                     _R_V:
  2461                           	opt stack 0
  2462  00029C                     	ds	2
  2463  00029E                     _Timer1_OF_counter_Generator_Old:
  2464                           	opt stack 0
  2465  00029E                     	ds	2
  2466  0002A0                     _Timer1_OF_counter_Old:
  2467                           	opt stack 0
  2468  0002A0                     	ds	2
  2469  0002A2                     _Timer1_OF_counter_Wind_2_temp_Old:
  2470                           	opt stack 0
  2471  0002A2                     	ds	2
  2472  0002A4                     _Timer1_OF_counter_Wind_temp_Old:
  2473                           	opt stack 0
  2474  0002A4                     	ds	2
  2475  0002A6                     _VFD_SHORT_CIRCUIT_fLAG:
  2476                           	opt stack 0
  2477  0002A6                     	ds	2
  2478  0002A8                     _WRPM_Counter:
  2479                           	opt stack 0
  2480  0002A8                     	ds	2
  2481  0002AA                     _WRPM_Counter_1:
  2482                           	opt stack 0
  2483  0002AA                     	ds	2
  2484  0002AC                     _Wind_Cap:
  2485                           	opt stack 0
  2486  0002AC                     	ds	2
  2487  0002AE                     _Wind_Cap_2:
  2488                           	opt stack 0
  2489  0002AE                     	ds	2
  2490  0002B0                     _YV_PS:
  2491                           	opt stack 0
  2492  0002B0                     	ds	2
  2493  0002B2                     _Y_C:
  2494                           	opt stack 0
  2495  0002B2                     	ds	2
  2496  0002B4                     _Y_V:
  2497                           	opt stack 0
  2498  0002B4                     	ds	2
  2499  0002B6                     _Check:
  2500                           	opt stack 0
  2501  0002B6                     	ds	1
  2502  0002B7                     _Consumption:
  2503                           	opt stack 0
  2504  0002B7                     	ds	1
  2505  0002B8                     _Five_sec_Delay_Flag:
  2506                           	opt stack 0
  2507  0002B8                     	ds	1
  2508  0002B9                     _GCB_phasev_flag:
  2509                           	opt stack 0
  2510  0002B9                     	ds	1
  2511  0002BA                     _GCDc_high_flag:
  2512                           	opt stack 0
  2513  0002BA                     	ds	1
  2514  0002BB                     _GCDc_low_flag:
  2515                           	opt stack 0
  2516  0002BB                     	ds	1
  2517  0002BC                     _GCG_rpm_flag:
  2518                           	opt stack 0
  2519  0002BC                     	ds	1
  2520  0002BD                     _GCM_slip_flag:
  2521                           	opt stack 0
  2522  0002BD                     	ds	1
  2523  0002BE                     _GCR_phasev_flag:
  2524                           	opt stack 0
  2525  0002BE                     	ds	1
  2526  0002BF                     _GCR_slip_flag:
  2527                           	opt stack 0
  2528  0002BF                     	ds	1
  2529  0002C0                     _GCT_rpm_flag:
  2530                           	opt stack 0
  2531  0002C0                     	ds	1
  2532  0002C1                     _GCWind_flag:
  2533                           	opt stack 0
  2534  0002C1                     	ds	1
  2535  0002C2                     _GCY_phasev_flag:
  2536                           	opt stack 0
  2537  0002C2                     	ds	1
  2538  0002C3                     _GCphase_flag:
  2539                           	opt stack 0
  2540  0002C3                     	ds	1
  2541  0002C4                     _GCvfd_curr_flag:
  2542                           	opt stack 0
  2543  0002C4                     	ds	1
  2544  0002C5                     _Gc_Generator_One_Fb:
  2545                           	opt stack 0
  2546  0002C5                     	ds	1
  2547  0002C6                     _Gc_Grid_Phase_Unbalance:
  2548                           	opt stack 0
  2549  0002C6                     	ds	1
  2550  0002C7                     _Gc_Grid_Phase_Unbalance_Error:
  2551                           	opt stack 0
  2552  0002C7                     	ds	1
  2553  0002C8                     _Gc_Motor_Slip_Error:
  2554                           	opt stack 0
  2555  0002C8                     	ds	1
  2556  0002C9                     _Gc_Pitch_Coil_Fb:
  2557                           	opt stack 0
  2558  0002C9                     	ds	1
  2559  0002CA                     _Gc_Pitch_Coil_Feedback_Error:
  2560                           	opt stack 0
  2561  0002CA                     	ds	1
  2562  0002CB                     _Gc_Rotor_Slip_Error:
  2563                           	opt stack 0
  2564  0002CB                     	ds	1
  2565  0002CC                     _Gc_TRPM_Rampup_Error:
  2566                           	opt stack 0
  2567  0002CC                     	ds	1
  2568  0002CD                     _Gc_Turbine2Wheel_Ratio_Error:
  2569                           	opt stack 0
  2570  0002CD                     	ds	1
  2571  0002CE                     _Gc_VFD_DC_Bus_Error:
  2572                           	opt stack 0
  2573  0002CE                     	ds	1
  2574  0002CF                     _Gf_Wind_Cut_In_Counter:
  2575                           	opt stack 0
  2576  0002CF                     	ds	1
  2577  0002D0                     _Hours:
  2578                           	opt stack 0
  2579  0002D0                     	ds	1
  2580  0002D1                     _Initial_Check:
  2581                           	opt stack 0
  2582  0002D1                     	ds	1
  2583  0002D2                     _KVA_Sign:
  2584                           	opt stack 0
  2585  0002D2                     	ds	1
  2586  0002D3                     _Lead_Lag:
  2587                           	opt stack 0
  2588  0002D3                     	ds	1
  2589  0002D4                     _PF_Lead_Lag:
  2590                           	opt stack 0
  2591  0002D4                     	ds	1
  2592  0002D5                     _PW_Error_Flag:
  2593                           	opt stack 0
  2594  0002D5                     	ds	1
  2595  0002D6                     _Start_Stop_Flag_1:
  2596                           	opt stack 0
  2597  0002D6                     	ds	1
  2598  0002D7                     _Temp_1:
  2599                           	opt stack 0
  2600  0002D7                     	ds	1
  2601  0002D8                     _Temp_2:
  2602                           	opt stack 0
  2603  0002D8                     	ds	1
  2604  0002D9                     _Temp_3:
  2605                           	opt stack 0
  2606  0002D9                     	ds	1
  2607  0002DA                     _Temp_4:
  2608                           	opt stack 0
  2609  0002DA                     	ds	1
  2610  0002DB                     _Temp_5:
  2611                           	opt stack 0
  2612  0002DB                     	ds	1
  2613  0002DC                     _Temp_6:
  2614                           	opt stack 0
  2615  0002DC                     	ds	1
  2616  0002DD                     _Timer0_Falg1:
  2617                           	opt stack 0
  2618  0002DD                     	ds	1
  2619  0002DE                     _VFD_Frequency:
  2620                           	opt stack 0
  2621  0002DE                     	ds	1
  2622  0002DF                     _lcDC_Bus_Counter:
  2623                           	opt stack 0
  2624  0002DF                     	ds	1
  2625  0002E0                     _lc_Avg_Counter:
  2626                           	opt stack 0
  2627  0002E0                     	ds	1
  2628  0002E1                     _lc_Motor_Slip_Error_Counter:
  2629                           	opt stack 0
  2630  0002E1                     	ds	1
  2631  0002E2                     _lc_Pitch_Coil_Counter:
  2632                           	opt stack 0
  2633  0002E2                     	ds	1
  2634  0002E3                     _lc_Rotor_Slip_Error_Counter:
  2635                           	opt stack 0
  2636  0002E3                     	ds	1
  2637  0002E4                     _BGR_Avg:
  2638                           	opt stack 0
  2639  0002E4                     	ds	3
  2640  0002E7                     _GRPM_Time_1:
  2641                           	opt stack 0
  2642  0002E7                     	ds	3
  2643  0002EA                     _RGR_Avg:
  2644                           	opt stack 0
  2645  0002EA                     	ds	3
  2646  0002ED                     _YGR_Avg:
  2647                           	opt stack 0
  2648  0002ED                     	ds	3
  2649  0002F0                     _Y_KW:
  2650                           	opt stack 0
  2651  0002F0                     	ds	3
  2652  0002F3                     _GRPM_Pulse_width:
  2653                           	opt stack 0
  2654  0002F3                     	ds	2
  2655  0002F5                     _Hours_1:
  2656                           	opt stack 0
  2657  0002F5                     	ds	2
  2658  0002F7                     _Hours_2:
  2659                           	opt stack 0
  2660  0002F7                     	ds	2
  2661  0002F9                     _RPM_PWM:
  2662                           	opt stack 0
  2663  0002F9                     	ds	2
  2664  0002FB                     _Wind_Pulse_width:
  2665                           	opt stack 0
  2666  0002FB                     	ds	2
  2667  0002FD                     _Wind_Pulse_width_2:
  2668                           	opt stack 0
  2669  0002FD                     	ds	2
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1h	equ	0xFE2
  2678                           fsr1l	equ	0xFE1
  2679                           
  2680                           	psect	bssBANK3
  2681  000300                     __pbssBANK3:
  2682                           	opt stack 0
  2683  000300                     _RGR_Arr:
  2684                           	opt stack 0
  2685  000300                     	ds	90
  2686  00035A                     _YGR_Arr:
  2687                           	opt stack 0
  2688  00035A                     	ds	90
  2689  0003B4                     _Temp_Arr:
  2690                           	opt stack 0
  2691  0003B4                     	ds	18
  2692  0003C6                     _RGR_Arr_1:
  2693                           	opt stack 0
  2694  0003C6                     	ds	15
  2695  0003D5                     _R_V_Arr:
  2696                           	opt stack 0
  2697  0003D5                     	ds	9
  2698  0003DE                     _Wind:
  2699                           	opt stack 0
  2700  0003DE                     	ds	3
  2701  0003E1                     _BV_PS_Max:
  2702                           	opt stack 0
  2703  0003E1                     	ds	2
  2704  0003E3                     _GiMonth:
  2705                           	opt stack 0
  2706  0003E3                     	ds	2
  2707  0003E5                     _GiYear:
  2708                           	opt stack 0
  2709  0003E5                     	ds	2
  2710  0003E7                     _Gi_Timer1_OF_counter_Generator_Temp:
  2711                           	opt stack 0
  2712  0003E7                     	ds	2
  2713  0003E9                     _Pitch_Ps_Counter:
  2714                           	opt stack 0
  2715  0003E9                     	ds	2
  2716  0003EB                     _RV_PS_Max:
  2717                           	opt stack 0
  2718  0003EB                     	ds	2
  2719  0003ED                     _Temp_Sensor:
  2720                           	opt stack 0
  2721  0003ED                     	ds	2
  2722  0003EF                     _Timer0_1Sec_Flag:
  2723                           	opt stack 0
  2724  0003EF                     	ds	2
  2725  0003F1                     _Timer1_OF_counter_Generator:
  2726                           	opt stack 0
  2727  0003F1                     	ds	2
  2728  0003F3                     _Timer1_OF_counter_Turbine:
  2729                           	opt stack 0
  2730  0003F3                     	ds	2
  2731  0003F5                     _Timer1_OF_counter_Wind:
  2732                           	opt stack 0
  2733  0003F5                     	ds	2
  2734  0003F7                     _Timer1_OF_counter_Wind_2:
  2735                           	opt stack 0
  2736  0003F7                     	ds	2
  2737  0003F9                     _Timer1_OF_counter_Wind_2_temp:
  2738                           	opt stack 0
  2739  0003F9                     	ds	2
  2740  0003FB                     _Timer1_OF_counter_Wind_temp:
  2741                           	opt stack 0
  2742  0003FB                     	ds	2
  2743  0003FD                     _YV_PS_Max:
  2744                           	opt stack 0
  2745  0003FD                     	ds	2
  2746                           tblptru	equ	0xFF8
  2747                           tblptrh	equ	0xFF7
  2748                           tblptrl	equ	0xFF6
  2749                           tablat	equ	0xFF5
  2750                           postinc0	equ	0xFEE
  2751                           wreg	equ	0xFE8
  2752                           postdec1	equ	0xFE5
  2753                           fsr1h	equ	0xFE2
  2754                           fsr1l	equ	0xFE1
  2755                           
  2756                           	psect	bssBANK4
  2757  000400                     __pbssBANK4:
  2758                           	opt stack 0
  2759  000400                     _BGR_Arr:
  2760                           	opt stack 0
  2761  000400                     	ds	90
  2762  00045A                     _BGR_Arr_1:
  2763                           	opt stack 0
  2764  00045A                     	ds	15
  2765  000469                     _YGR_Arr_1:
  2766                           	opt stack 0
  2767  000469                     	ds	15
  2768  000478                     _B_C_Arr:
  2769                           	opt stack 0
  2770  000478                     	ds	9
  2771  000481                     _B_V_Arr:
  2772                           	opt stack 0
  2773  000481                     	ds	9
  2774  00048A                     _R_C_Arr:
  2775                           	opt stack 0
  2776  00048A                     	ds	9
  2777  000493                     _Y_C_Arr:
  2778                           	opt stack 0
  2779  000493                     	ds	9
  2780  00049C                     _Y_V_Arr:
  2781                           	opt stack 0
  2782  00049C                     	ds	9
  2783  0004A5                     _GRPM_Time:
  2784                           	opt stack 0
  2785  0004A5                     	ds	3
  2786  0004A8                     _Gf_Turbine2Wheel_Ratio:
  2787                           	opt stack 0
  2788  0004A8                     	ds	3
  2789  0004AB                     _KVAr:
  2790                           	opt stack 0
  2791  0004AB                     	ds	3
  2792  0004AE                     _PWM_Temp:
  2793                           	opt stack 0
  2794  0004AE                     	ds	3
  2795  0004B1                     _RAMP_UP_GENERATOR_CUT_IN_RPM:
  2796                           	opt stack 0
  2797  0004B1                     	ds	3
  2798  0004B4                     _RAMP_UP_TURBINE_CUT_IN_RPM:
  2799                           	opt stack 0
  2800  0004B4                     	ds	3
  2801  0004B7                     _TURBINE_RPM_THEORY:
  2802                           	opt stack 0
  2803  0004B7                     	ds	3
  2804  0004BA                     _Turb_RPM:
  2805                           	opt stack 0
  2806  0004BA                     	ds	3
  2807  0004BD                     _Wind_Frequency:
  2808                           	opt stack 0
  2809  0004BD                     	ds	3
  2810  0004C0                     _Wind_Speed_9:
  2811                           	opt stack 0
  2812  0004C0                     	ds	3
  2813  0004C3                     _Wind_Speed_9_2:
  2814                           	opt stack 0
  2815  0004C3                     	ds	3
  2816  0004C6                     _Wind_Speed_Avg_2:
  2817                           	opt stack 0
  2818  0004C6                     	ds	3
  2819  0004C9                     _Wind_Time:
  2820                           	opt stack 0
  2821  0004C9                     	ds	3
  2822  0004CC                     _Wind_Time_2:
  2823                           	opt stack 0
  2824  0004CC                     	ds	3
  2825  0004CF                     _lc_Previous_T_RPM:
  2826                           	opt stack 0
  2827  0004CF                     	ds	3
  2828  0004D2                     _lc_T_RPM:
  2829                           	opt stack 0
  2830  0004D2                     	ds	3
  2831  0004D5                     _wind_2:
  2832                           	opt stack 0
  2833  0004D5                     	ds	3
  2834  0004D8                     _wind_Frequency_2:
  2835                           	opt stack 0
  2836  0004D8                     	ds	3
  2837  0004DB                     _B_C_Avg_Steps:
  2838                           	opt stack 0
  2839  0004DB                     	ds	3
  2840  0004DE                     _B_V_Avg_Steps:
  2841                           	opt stack 0
  2842  0004DE                     	ds	3
  2843  0004E1                     _GRPM_Frequency:
  2844                           	opt stack 0
  2845  0004E1                     	ds	3
  2846  0004E4                     _R_C_Avg_Steps:
  2847                           	opt stack 0
  2848  0004E4                     	ds	3
  2849  0004E7                     _R_V_Avg_Steps:
  2850                           	opt stack 0
  2851  0004E7                     	ds	3
  2852  0004EA                     _TRPM_Frequency:
  2853                           	opt stack 0
  2854  0004EA                     	ds	3
  2855  0004ED                     _TRPM_Time:
  2856                           	opt stack 0
  2857  0004ED                     	ds	3
  2858  0004F0                     _Time_Diff:
  2859                           	opt stack 0
  2860  0004F0                     	ds	3
  2861  0004F3                     _Wind_Time_1:
  2862                           	opt stack 0
  2863  0004F3                     	ds	3
  2864  0004F6                     _Y_C_Avg_Steps:
  2865                           	opt stack 0
  2866  0004F6                     	ds	3
  2867  0004F9                     _Y_V_Avg_Steps:
  2868                           	opt stack 0
  2869  0004F9                     	ds	3
  2870  0004FC                     _wind_Time_1_2:
  2871                           	opt stack 0
  2872  0004FC                     	ds	3
  2873                           tblptru	equ	0xFF8
  2874                           tblptrh	equ	0xFF7
  2875                           tblptrl	equ	0xFF6
  2876                           tablat	equ	0xFF5
  2877                           postinc0	equ	0xFEE
  2878                           wreg	equ	0xFE8
  2879                           postdec1	equ	0xFE5
  2880                           fsr1h	equ	0xFE2
  2881                           fsr1l	equ	0xFE1
  2882                           
  2883                           	psect	bssBANK5
  2884  000500                     __pbssBANK5:
  2885                           	opt stack 0
  2886  000500                     _Data_1:
  2887                           	opt stack 0
  2888  000500                     	ds	22
  2889  000516                     _B_C_Gap:
  2890                           	opt stack 0
  2891  000516                     	ds	3
  2892  000519                     _B_Current:
  2893                           	opt stack 0
  2894  000519                     	ds	3
  2895  00051C                     _B_Current_1:
  2896                           	opt stack 0
  2897  00051C                     	ds	3
  2898  00051F                     _B_Power_Factor:
  2899                           	opt stack 0
  2900  00051F                     	ds	3
  2901  000522                     _B_Rad:
  2902                           	opt stack 0
  2903  000522                     	ds	3
  2904  000525                     _B_V_Gap:
  2905                           	opt stack 0
  2906  000525                     	ds	3
  2907  000528                     _Frequency_1:
  2908                           	opt stack 0
  2909  000528                     	ds	3
  2910  00052B                     _Generator_RPM_0:
  2911                           	opt stack 0
  2912  00052B                     	ds	3
  2913  00052E                     _Generator_RPM_1:
  2914                           	opt stack 0
  2915  00052E                     	ds	3
  2916  000531                     _Generator_RPM_10:
  2917                           	opt stack 0
  2918  000531                     	ds	3
  2919  000534                     _Generator_RPM_2:
  2920                           	opt stack 0
  2921  000534                     	ds	3
  2922  000537                     _Generator_RPM_3:
  2923                           	opt stack 0
  2924  000537                     	ds	3
  2925  00053A                     _Generator_RPM_4:
  2926                           	opt stack 0
  2927  00053A                     	ds	3
  2928  00053D                     _Generator_RPM_5:
  2929                           	opt stack 0
  2930  00053D                     	ds	3
  2931  000540                     _Generator_RPM_6:
  2932                           	opt stack 0
  2933  000540                     	ds	3
  2934  000543                     _Generator_RPM_7:
  2935                           	opt stack 0
  2936  000543                     	ds	3
  2937  000546                     _Generator_RPM_8:
  2938                           	opt stack 0
  2939  000546                     	ds	3
  2940  000549                     _Generator_RPM_9:
  2941                           	opt stack 0
  2942  000549                     	ds	3
  2943  00054C                     _GfB_current:
  2944                           	opt stack 0
  2945  00054C                     	ds	3
  2946  00054F                     _GfB_volt:
  2947                           	opt stack 0
  2948  00054F                     	ds	3
  2949  000552                     _GfG_rpm:
  2950                           	opt stack 0
  2951  000552                     	ds	3
  2952  000555                     _GfKva:
  2953                           	opt stack 0
  2954  000555                     	ds	3
  2955  000558                     _GfKvar:
  2956                           	opt stack 0
  2957  000558                     	ds	3
  2958  00055B                     _GfKw:
  2959                           	opt stack 0
  2960  00055B                     	ds	3
  2961  00055E                     _GfR_current:
  2962                           	opt stack 0
  2963  00055E                     	ds	3
  2964  000561                     _GfR_volt:
  2965                           	opt stack 0
  2966  000561                     	ds	3
  2967  000564                     _GfT_rpm:
  2968                           	opt stack 0
  2969  000564                     	ds	3
  2970  000567                     _GfY_current:
  2971                           	opt stack 0
  2972  000567                     	ds	3
  2973  00056A                     _GfY_volt:
  2974                           	opt stack 0
  2975  00056A                     	ds	3
  2976  00056D                     _Gf_TRPM_Frequency:
  2977                           	opt stack 0
  2978  00056D                     	ds	3
  2979  000570                     _Gf_TRPM_Time:
  2980                           	opt stack 0
  2981  000570                     	ds	3
  2982  000573                     _Gf_TRPM_Time_1:
  2983                           	opt stack 0
  2984  000573                     	ds	3
  2985  000576                     _Gf_Turbine_RPM_1:
  2986                           	opt stack 0
  2987  000576                     	ds	3
  2988  000579                     _Gf_Turbine_RPM_Prev:
  2989                           	opt stack 0
  2990  000579                     	ds	3
  2991  00057C                     _Gfwind:
  2992                           	opt stack 0
  2993  00057C                     	ds	3
  2994  00057F                     _KVA_1:
  2995                           	opt stack 0
  2996  00057F                     	ds	3
  2997  000582                     _KVAr_1:
  2998                           	opt stack 0
  2999  000582                     	ds	3
  3000  000585                     _KW_1:
  3001                           	opt stack 0
  3002  000585                     	ds	3
  3003  000588                     _Motor_slip_1:
  3004                           	opt stack 0
  3005  000588                     	ds	3
  3006  00058B                     _R_C_Gap:
  3007                           	opt stack 0
  3008  00058B                     	ds	3
  3009  00058E                     _R_Current:
  3010                           	opt stack 0
  3011  00058E                     	ds	3
  3012  000591                     _R_Current_1:
  3013                           	opt stack 0
  3014  000591                     	ds	3
  3015  000594                     _R_Power_Factor:
  3016                           	opt stack 0
  3017  000594                     	ds	3
  3018  000597                     _R_Rad:
  3019                           	opt stack 0
  3020  000597                     	ds	3
  3021  00059A                     _R_V_Gap:
  3022                           	opt stack 0
  3023  00059A                     	ds	3
  3024  00059D                     _Rotor_slip_1:
  3025                           	opt stack 0
  3026  00059D                     	ds	3
  3027  0005A0                     _Temp_sign:
  3028                           	opt stack 0
  3029  0005A0                     	ds	3
  3030  0005A3                     _Timer1_Time_per_Count:
  3031                           	opt stack 0
  3032  0005A3                     	ds	3
  3033  0005A6                     _Timer_1_OverFlow_Time:
  3034                           	opt stack 0
  3035  0005A6                     	ds	3
  3036  0005A9                     _Total_Pf:
  3037                           	opt stack 0
  3038  0005A9                     	ds	3
  3039  0005AC                     _Total_Pf_1:
  3040                           	opt stack 0
  3041  0005AC                     	ds	3
  3042  0005AF                     _Wind_Speed_10:
  3043                           	opt stack 0
  3044  0005AF                     	ds	3
  3045  0005B2                     _Wind_Speed_10_2:
  3046                           	opt stack 0
  3047  0005B2                     	ds	3
  3048  0005B5                     _Y_C_Gap:
  3049                           	opt stack 0
  3050  0005B5                     	ds	3
  3051  0005B8                     _Y_Current:
  3052                           	opt stack 0
  3053  0005B8                     	ds	3
  3054  0005BB                     _Y_Current_1:
  3055                           	opt stack 0
  3056  0005BB                     	ds	3
  3057  0005BE                     _Y_Rad:
  3058                           	opt stack 0
  3059  0005BE                     	ds	3
  3060  0005C1                     _Y_V_Gap:
  3061                           	opt stack 0
  3062  0005C1                     	ds	3
  3063  0005C4                     _Dummy:
  3064                           	opt stack 0
  3065  0005C4                     	ds	2
  3066  0005C6                     _Flag_temp:
  3067                           	opt stack 0
  3068  0005C6                     	ds	2
  3069  0005C8                     _G_RPM_counter_1:
  3070                           	opt stack 0
  3071  0005C8                     	ds	2
  3072  0005CA                     _GiDay:
  3073                           	opt stack 0
  3074  0005CA                     	ds	2
  3075  0005CC                     _Gi_TRPM_Cap:
  3076                           	opt stack 0
  3077  0005CC                     	ds	2
  3078  0005CE                     _Gi_TRPM_Cap_New:
  3079                           	opt stack 0
  3080  0005CE                     	ds	2
  3081  0005D0                     _Gi_TRPM_Cap_Old:
  3082                           	opt stack 0
  3083  0005D0                     	ds	2
  3084  0005D2                     _Gi_TRPM_Pulse_width:
  3085                           	opt stack 0
  3086  0005D2                     	ds	2
  3087  0005D4                     _RPM_Time_1:
  3088                           	opt stack 0
  3089  0005D4                     	ds	2
  3090  0005D6                     _Slave_Id:
  3091                           	opt stack 0
  3092  0005D6                     	ds	2
  3093  0005D8                     _T1:
  3094                           	opt stack 0
  3095  0005D8                     	ds	2
  3096  0005DA                     _TEMP_1:
  3097                           	opt stack 0
  3098  0005DA                     	ds	2
  3099  0005DC                     _Timer0_RS485_flag:
  3100                           	opt stack 0
  3101  0005DC                     	ds	2
  3102  0005DE                     _Timer0_counter:
  3103                           	opt stack 0
  3104  0005DE                     	ds	2
  3105  0005E0                     _VFD_Temp_counter:
  3106                           	opt stack 0
  3107  0005E0                     	ds	2
  3108  0005E2                     _counter:
  3109                           	opt stack 0
  3110  0005E2                     	ds	2
  3111  0005E4                     _data:
  3112                           	opt stack 0
  3113  0005E4                     	ds	2
  3114  0005E6                     _digit1:
  3115                           	opt stack 0
  3116  0005E6                     	ds	2
  3117  0005E8                     _digit2:
  3118                           	opt stack 0
  3119  0005E8                     	ds	2
  3120  0005EA                     _digit3:
  3121                           	opt stack 0
  3122  0005EA                     	ds	2
  3123  0005EC                     _digit4:
  3124                           	opt stack 0
  3125  0005EC                     	ds	2
  3126  0005EE                     _digit5:
  3127                           	opt stack 0
  3128  0005EE                     	ds	2
  3129  0005F0                     _errno:
  3130                           	opt stack 0
  3131  0005F0                     	ds	2
  3132  0005F2                     _rtc:
  3133                           	opt stack 0
  3134  0005F2                     	ds	7
  3135  0005F9                     _Mot_Frequency:
  3136                           	opt stack 0
  3137  0005F9                     	ds	3
  3138                           tblptru	equ	0xFF8
  3139                           tblptrh	equ	0xFF7
  3140                           tblptrl	equ	0xFF6
  3141                           tablat	equ	0xFF5
  3142                           postinc0	equ	0xFEE
  3143                           wreg	equ	0xFE8
  3144                           postdec1	equ	0xFE5
  3145                           fsr1h	equ	0xFE2
  3146                           fsr1l	equ	0xFE1
  3147                           
  3148                           	psect	dataBANK5
  3149  0005FC                     __pdataBANK5:
  3150                           	opt stack 0
  3151  0005FC                     _VFD_Counter:
  3152                           	opt stack 0
  3153  0005FC                     	ds	2
  3154                           tblptru	equ	0xFF8
  3155                           tblptrh	equ	0xFF7
  3156                           tblptrl	equ	0xFF6
  3157                           tablat	equ	0xFF5
  3158                           postinc0	equ	0xFEE
  3159                           wreg	equ	0xFE8
  3160                           postdec1	equ	0xFE5
  3161                           fsr1h	equ	0xFE2
  3162                           fsr1l	equ	0xFE1
  3163                           
  3164                           	psect	bssBANK6
  3165  000600                     __pbssBANK6:
  3166                           	opt stack 0
  3167  000600                     _Data:
  3168                           	opt stack 0
  3169  000600                     	ds	60
  3170  00063C                     _Avg_Current:
  3171                           	opt stack 0
  3172  00063C                     	ds	3
  3173  00063F                     _Avg_Voltage:
  3174                           	opt stack 0
  3175  00063F                     	ds	3
  3176  000642                     _B_Deg:
  3177                           	opt stack 0
  3178  000642                     	ds	3
  3179  000645                     _Bcurr_Old:
  3180                           	opt stack 0
  3181  000645                     	ds	3
  3182  000648                     _Gf_Blue_Current:
  3183                           	opt stack 0
  3184  000648                     	ds	3
  3185  00064B                     _Gf_Blue_Phase_Voltage:
  3186                           	opt stack 0
  3187  00064B                     	ds	3
  3188  00064E                     _Gf_Grid_Frequency:
  3189                           	opt stack 0
  3190  00064E                     	ds	3
  3191  000651                     _Gf_KW:
  3192                           	opt stack 0
  3193  000651                     	ds	3
  3194  000654                     _Gf_Motor_Slip:
  3195                           	opt stack 0
  3196  000654                     	ds	3
  3197  000657                     _Gf_Red_Current:
  3198                           	opt stack 0
  3199  000657                     	ds	3
  3200  00065A                     _Gf_Red_Phase_Voltage:
  3201                           	opt stack 0
  3202  00065A                     	ds	3
  3203  00065D                     _Gf_Rotor_Slip:
  3204                           	opt stack 0
  3205  00065D                     	ds	3
  3206  000660                     _Gf_VFD_DC_Bus_Voltage:
  3207                           	opt stack 0
  3208  000660                     	ds	3
  3209  000663                     _Gf_Yellow_Current:
  3210                           	opt stack 0
  3211  000663                     	ds	3
  3212  000666                     _Gf_Yellow_Phase_Voltage:
  3213                           	opt stack 0
  3214  000666                     	ds	3
  3215  000669                     _R_Deg:
  3216                           	opt stack 0
  3217  000669                     	ds	3
  3218  00066C                     _Rcurr_Old:
  3219                           	opt stack 0
  3220  00066C                     	ds	3
  3221  00066F                     _Temperature_Avg:
  3222                           	opt stack 0
  3223  00066F                     	ds	3
  3224  000672                     _Y_Deg:
  3225                           	opt stack 0
  3226  000672                     	ds	3
  3227  000675                     _Ycurr_Old:
  3228                           	opt stack 0
  3229  000675                     	ds	3
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           postinc0	equ	0xFEE
  3235                           wreg	equ	0xFE8
  3236                           postdec1	equ	0xFE5
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           
  3240                           	psect	cstackBANK6
  3241  000678                     __pcstackBANK6:
  3242                           	opt stack 0
  3243  000678                     _R_PF_Avg$8083:
  3244                           	opt stack 0
  3245  000678                     _Y_PF_Avg$8112:
  3246                           	opt stack 0
  3247  000678                     _B_PF_Avg$8141:
  3248                           	opt stack 0
  3249                           
  3250                           ; 3 bytes @ 0x0
  3251  000678                     	ds	3
  3252  00067B                     _R_PF_Avg$8084:
  3253                           	opt stack 0
  3254  00067B                     _Y_PF_Avg$8113:
  3255                           	opt stack 0
  3256  00067B                     _B_PF_Avg$8142:
  3257                           	opt stack 0
  3258                           
  3259                           ; 3 bytes @ 0x3
  3260  00067B                     	ds	3
  3261  00067E                     _R_PF_Avg$8085:
  3262                           	opt stack 0
  3263  00067E                     _Y_PF_Avg$8114:
  3264                           	opt stack 0
  3265  00067E                     _B_PF_Avg$8143:
  3266                           	opt stack 0
  3267                           
  3268                           ; 3 bytes @ 0x6
  3269  00067E                     	ds	3
  3270  000681                     _R_PF_Avg$8086:
  3271                           	opt stack 0
  3272  000681                     _Y_PF_Avg$8115:
  3273                           	opt stack 0
  3274  000681                     _B_PF_Avg$8144:
  3275                           	opt stack 0
  3276                           
  3277                           ; 3 bytes @ 0x9
  3278  000681                     	ds	3
  3279  000684                     _R_PF_Avg$8087:
  3280                           	opt stack 0
  3281  000684                     _Y_PF_Avg$8116:
  3282                           	opt stack 0
  3283  000684                     _B_PF_Avg$8145:
  3284                           	opt stack 0
  3285                           
  3286                           ; 3 bytes @ 0xC
  3287  000684                     	ds	3
  3288  000687                     _R_PF_Avg$8088:
  3289                           	opt stack 0
  3290  000687                     _Y_PF_Avg$8117:
  3291                           	opt stack 0
  3292  000687                     _B_PF_Avg$8146:
  3293                           	opt stack 0
  3294                           
  3295                           ; 3 bytes @ 0xF
  3296  000687                     	ds	3
  3297  00068A                     _R_PF_Avg$8089:
  3298                           	opt stack 0
  3299  00068A                     _Y_PF_Avg$8118:
  3300                           	opt stack 0
  3301  00068A                     _B_PF_Avg$8147:
  3302                           	opt stack 0
  3303                           
  3304                           ; 3 bytes @ 0x12
  3305  00068A                     	ds	3
  3306  00068D                     _R_PF_Avg$8090:
  3307                           	opt stack 0
  3308  00068D                     _Y_PF_Avg$8119:
  3309                           	opt stack 0
  3310  00068D                     _B_PF_Avg$8148:
  3311                           	opt stack 0
  3312                           
  3313                           ; 3 bytes @ 0x15
  3314  00068D                     	ds	3
  3315  000690                     _R_PF_Avg$8091:
  3316                           	opt stack 0
  3317  000690                     _Y_PF_Avg$8120:
  3318                           	opt stack 0
  3319  000690                     _B_PF_Avg$8149:
  3320                           	opt stack 0
  3321                           
  3322                           ; 3 bytes @ 0x18
  3323  000690                     	ds	3
  3324  000693                     _R_PF_Avg$8092:
  3325                           	opt stack 0
  3326  000693                     _Y_PF_Avg$8121:
  3327                           	opt stack 0
  3328  000693                     _B_PF_Avg$8150:
  3329                           	opt stack 0
  3330                           
  3331                           ; 3 bytes @ 0x1B
  3332  000693                     	ds	3
  3333  000696                     _R_PF_Avg$8093:
  3334                           	opt stack 0
  3335  000696                     _Y_PF_Avg$8122:
  3336                           	opt stack 0
  3337  000696                     _B_PF_Avg$8151:
  3338                           	opt stack 0
  3339                           
  3340                           ; 3 bytes @ 0x1E
  3341  000696                     	ds	3
  3342  000699                     _R_PF_Avg$8094:
  3343                           	opt stack 0
  3344  000699                     _Y_PF_Avg$8123:
  3345                           	opt stack 0
  3346  000699                     _B_PF_Avg$8152:
  3347                           	opt stack 0
  3348                           
  3349                           ; 3 bytes @ 0x21
  3350  000699                     	ds	3
  3351  00069C                     _R_PF_Avg$8095:
  3352                           	opt stack 0
  3353  00069C                     _Y_PF_Avg$8124:
  3354                           	opt stack 0
  3355  00069C                     _B_PF_Avg$8153:
  3356                           	opt stack 0
  3357                           
  3358                           ; 3 bytes @ 0x24
  3359  00069C                     	ds	3
  3360  00069F                     _R_PF_Avg$8096:
  3361                           	opt stack 0
  3362  00069F                     _Y_PF_Avg$8125:
  3363                           	opt stack 0
  3364  00069F                     _B_PF_Avg$8154:
  3365                           	opt stack 0
  3366                           
  3367                           ; 3 bytes @ 0x27
  3368  00069F                     	ds	3
  3369  0006A2                     _R_PF_Avg$8097:
  3370                           	opt stack 0
  3371  0006A2                     _Y_PF_Avg$8126:
  3372                           	opt stack 0
  3373  0006A2                     _B_PF_Avg$8155:
  3374                           	opt stack 0
  3375                           
  3376                           ; 3 bytes @ 0x2A
  3377  0006A2                     	ds	3
  3378  0006A5                     _R_PF_Avg$8098:
  3379                           	opt stack 0
  3380  0006A5                     _Y_PF_Avg$8127:
  3381                           	opt stack 0
  3382  0006A5                     _B_PF_Avg$8156:
  3383                           	opt stack 0
  3384                           
  3385                           ; 3 bytes @ 0x2D
  3386  0006A5                     	ds	3
  3387  0006A8                     _R_PF_Avg$8099:
  3388                           	opt stack 0
  3389  0006A8                     _Y_PF_Avg$8128:
  3390                           	opt stack 0
  3391  0006A8                     _B_PF_Avg$8157:
  3392                           	opt stack 0
  3393                           
  3394                           ; 3 bytes @ 0x30
  3395  0006A8                     	ds	3
  3396  0006AB                     _R_PF_Avg$8100:
  3397                           	opt stack 0
  3398  0006AB                     _Y_PF_Avg$8129:
  3399                           	opt stack 0
  3400  0006AB                     _B_PF_Avg$8158:
  3401                           	opt stack 0
  3402                           
  3403                           ; 3 bytes @ 0x33
  3404  0006AB                     	ds	3
  3405  0006AE                     _R_PF_Avg$8101:
  3406                           	opt stack 0
  3407  0006AE                     _Y_PF_Avg$8130:
  3408                           	opt stack 0
  3409  0006AE                     _B_PF_Avg$8159:
  3410                           	opt stack 0
  3411                           
  3412                           ; 3 bytes @ 0x36
  3413  0006AE                     	ds	3
  3414  0006B1                     _R_PF_Avg$8102:
  3415                           	opt stack 0
  3416  0006B1                     _Y_PF_Avg$8131:
  3417                           	opt stack 0
  3418  0006B1                     _B_PF_Avg$8160:
  3419                           	opt stack 0
  3420                           
  3421                           ; 3 bytes @ 0x39
  3422  0006B1                     	ds	3
  3423  0006B4                     _R_PF_Avg$8103:
  3424                           	opt stack 0
  3425  0006B4                     _Y_PF_Avg$8132:
  3426                           	opt stack 0
  3427  0006B4                     _B_PF_Avg$8161:
  3428                           	opt stack 0
  3429                           
  3430                           ; 3 bytes @ 0x3C
  3431  0006B4                     	ds	3
  3432  0006B7                     _R_PF_Avg$8104:
  3433                           	opt stack 0
  3434  0006B7                     _Y_PF_Avg$8133:
  3435                           	opt stack 0
  3436  0006B7                     _B_PF_Avg$8162:
  3437                           	opt stack 0
  3438                           
  3439                           ; 3 bytes @ 0x3F
  3440  0006B7                     	ds	3
  3441  0006BA                     _R_PF_Avg$8105:
  3442                           	opt stack 0
  3443  0006BA                     _Y_PF_Avg$8134:
  3444                           	opt stack 0
  3445  0006BA                     _B_PF_Avg$8163:
  3446                           	opt stack 0
  3447                           
  3448                           ; 3 bytes @ 0x42
  3449  0006BA                     	ds	3
  3450  0006BD                     _R_PF_Avg$8106:
  3451                           	opt stack 0
  3452  0006BD                     _Y_PF_Avg$8135:
  3453                           	opt stack 0
  3454  0006BD                     _B_PF_Avg$8164:
  3455                           	opt stack 0
  3456                           
  3457                           ; 3 bytes @ 0x45
  3458  0006BD                     	ds	3
  3459  0006C0                     _R_PF_Avg$8107:
  3460                           	opt stack 0
  3461  0006C0                     _Y_PF_Avg$8136:
  3462                           	opt stack 0
  3463  0006C0                     _B_PF_Avg$8165:
  3464                           	opt stack 0
  3465                           
  3466                           ; 3 bytes @ 0x48
  3467  0006C0                     	ds	3
  3468  0006C3                     _R_PF_Avg$8080:
  3469                           	opt stack 0
  3470  0006C3                     _Y_PF_Avg$8109:
  3471                           	opt stack 0
  3472  0006C3                     _B_PF_Avg$8138:
  3473                           	opt stack 0
  3474                           
  3475                           ; 3 bytes @ 0x4B
  3476  0006C3                     	ds	3
  3477  0006C6                     _R_PF_Avg$8081:
  3478                           	opt stack 0
  3479  0006C6                     _Y_PF_Avg$8110:
  3480                           	opt stack 0
  3481  0006C6                     _B_PF_Avg$8139:
  3482                           	opt stack 0
  3483                           
  3484                           ; 3 bytes @ 0x4E
  3485  0006C6                     	ds	3
  3486  0006C9                     _R_PF_Avg$8082:
  3487                           	opt stack 0
  3488  0006C9                     _Y_PF_Avg$8111:
  3489                           	opt stack 0
  3490  0006C9                     _B_PF_Avg$8140:
  3491                           	opt stack 0
  3492                           
  3493                           ; 3 bytes @ 0x51
  3494  0006C9                     	ds	3
  3495                           tblptru	equ	0xFF8
  3496                           tblptrh	equ	0xFF7
  3497                           tblptrl	equ	0xFF6
  3498                           tablat	equ	0xFF5
  3499                           postinc0	equ	0xFEE
  3500                           wreg	equ	0xFE8
  3501                           postdec1	equ	0xFE5
  3502                           fsr1h	equ	0xFE2
  3503                           fsr1l	equ	0xFE1
  3504                           
  3505                           	psect	cstackBANK1
  3506  0001AA                     __pcstackBANK1:
  3507                           	opt stack 0
  3508  0001AA                     _Wind_Average$8065:
  3509                           	opt stack 0
  3510  0001AA                     _Power_Calc$8169:
  3511                           	opt stack 0
  3512  0001AA                     _printf$8173:
  3513                           	opt stack 0
  3514  0001AA                     _cos$8174:
  3515                           	opt stack 0
  3516                           
  3517                           ; 3 bytes @ 0x0
  3518  0001AA                     	ds	3
  3519  0001AD                     printf@cp:
  3520                           	opt stack 0
  3521  0001AD                     _Wind_Average$8066:
  3522                           	opt stack 0
  3523  0001AD                     _Power_Calc$8168:
  3524                           	opt stack 0
  3525                           
  3526                           ; 3 bytes @ 0x3
  3527  0001AD                     	ds	2
  3528  0001AF                     printf@ap:
  3529                           	opt stack 0
  3530                           
  3531                           ; 2 bytes @ 0x5
  3532  0001AF                     	ds	1
  3533  0001B0                     _Wind_Average$8067:
  3534                           	opt stack 0
  3535  0001B0                     _Power_Calc$8167:
  3536                           	opt stack 0
  3537                           
  3538                           ; 3 bytes @ 0x6
  3539  0001B0                     	ds	1
  3540  0001B1                     printf@len:
  3541                           	opt stack 0
  3542                           
  3543                           ; 2 bytes @ 0x7
  3544  0001B1                     	ds	2
  3545  0001B3                     printf@flag:
  3546                           	opt stack 0
  3547  0001B3                     _Wind_Average$8068:
  3548                           	opt stack 0
  3549                           
  3550                           ; 3 bytes @ 0x9
  3551  0001B3                     	ds	2
  3552  0001B5                     printf@tmpval:
  3553                           	opt stack 0
  3554                           
  3555                           ; 4 bytes @ 0xB
  3556  0001B5                     	ds	1
  3557  0001B6                     _Wind_Average$8069:
  3558                           	opt stack 0
  3559                           
  3560                           ; 3 bytes @ 0xC
  3561  0001B6                     	ds	3
  3562  0001B9                     _Wind_Average$8070:
  3563                           	opt stack 0
  3564  0001B9                     printf@val:
  3565                           	opt stack 0
  3566                           
  3567                           ; 4 bytes @ 0xF
  3568  0001B9                     	ds	3
  3569  0001BC                     _Wind_Average$8071:
  3570                           	opt stack 0
  3571                           
  3572                           ; 3 bytes @ 0x12
  3573  0001BC                     	ds	1
  3574  0001BD                     printf@exp:
  3575                           	opt stack 0
  3576                           
  3577                           ; 2 bytes @ 0x13
  3578  0001BD                     	ds	2
  3579  0001BF                     printf@width:
  3580                           	opt stack 0
  3581  0001BF                     _Wind_Average$8072:
  3582                           	opt stack 0
  3583                           
  3584                           ; 3 bytes @ 0x15
  3585  0001BF                     	ds	2
  3586  0001C1                     printf@fval:
  3587                           	opt stack 0
  3588                           
  3589                           ; 3 bytes @ 0x17
  3590  0001C1                     	ds	3
  3591  0001C4                     printf@prec:
  3592                           	opt stack 0
  3593                           
  3594                           ; 2 bytes @ 0x1A
  3595  0001C4                     	ds	2
  3596  0001C6                     printf@c:
  3597                           	opt stack 0
  3598                           
  3599                           ; 1 bytes @ 0x1C
  3600  0001C6                     	ds	1
  3601                           tblptru	equ	0xFF8
  3602                           tblptrh	equ	0xFF7
  3603                           tblptrl	equ	0xFF6
  3604                           tablat	equ	0xFF5
  3605                           postinc0	equ	0xFEE
  3606                           wreg	equ	0xFE8
  3607                           postdec1	equ	0xFE5
  3608                           fsr1h	equ	0xFE2
  3609                           fsr1l	equ	0xFE1
  3610                           
  3611                           	psect	cstackBANK0
  3612  000060                     __pcstackBANK0:
  3613                           	opt stack 0
  3614  000060                     ??_Communication_Error:
  3615  000060                     ??_isdigit:
  3616  000060                     ?_int_eeprom_read:
  3617                           	opt stack 0
  3618  000060                     ?_Read_Adc:
  3619                           	opt stack 0
  3620  000060                     ?___awmod:
  3621                           	opt stack 0
  3622  000060                     ?___ftpack:
  3623                           	opt stack 0
  3624  000060                     ?__tdiv_to_l_:
  3625                           	opt stack 0
  3626  000060                     ?__div_to_l_:
  3627                           	opt stack 0
  3628  000060                     ?___lldiv:
  3629                           	opt stack 0
  3630  000060                     I2C_Read@v_ackOption_u8:
  3631                           	opt stack 0
  3632  000060                     I2C_Write@v_i2cData_u8:
  3633                           	opt stack 0
  3634  000060                     usart_str_1@str:
  3635                           	opt stack 0
  3636  000060                     putch@data:
  3637                           	opt stack 0
  3638  000060                     usart_str_2@str:
  3639                           	opt stack 0
  3640  000060                     usart_str@str:
  3641                           	opt stack 0
  3642  000060                     int_eeprom_read@adr:
  3643                           	opt stack 0
  3644  000060                     int_eeprom_write@adr:
  3645                           	opt stack 0
  3646  000060                     ___awmod@dividend:
  3647                           	opt stack 0
  3648  000060                     __div_to_l_@f1:
  3649                           	opt stack 0
  3650  000060                     ___ftpack@arg:
  3651                           	opt stack 0
  3652  000060                     __tdiv_to_l_@f1:
  3653                           	opt stack 0
  3654  000060                     frexp@value:
  3655                           	opt stack 0
  3656  000060                     ___lldiv@dividend:
  3657                           	opt stack 0
  3658                           
  3659                           ; 4 bytes @ 0x0
  3660  000060                     	ds	1
  3661  000061                     ??_RS485_Data_communication:
  3662  000061                     I2C_Read@v_i2cData_u8:
  3663                           	opt stack 0
  3664  000061                     _isdigit$7638:
  3665                           	opt stack 0
  3666                           
  3667                           ; 1 bytes @ 0x1
  3668  000061                     	ds	1
  3669  000062                     ??_Read_Adc:
  3670  000062                     isdigit@c:
  3671                           	opt stack 0
  3672  000062                     RTC_GetDateTime@rtc:
  3673                           	opt stack 0
  3674  000062                     int_eeprom_read@temp:
  3675                           	opt stack 0
  3676  000062                     int_eeprom_write@dat:
  3677                           	opt stack 0
  3678  000062                     ___awmod@divisor:
  3679                           	opt stack 0
  3680                           
  3681                           ; 2 bytes @ 0x2
  3682  000062                     	ds	1
  3683  000063                     ___ftpack@exp:
  3684                           	opt stack 0
  3685  000063                     frexp@eptr:
  3686                           	opt stack 0
  3687  000063                     __div_to_l_@f2:
  3688                           	opt stack 0
  3689  000063                     __tdiv_to_l_@f2:
  3690                           	opt stack 0
  3691                           
  3692                           ; 3 bytes @ 0x3
  3693  000063                     	ds	1
  3694  000064                     ??_EEPROM_Error_Stop:
  3695  000064                     Read_Adc@ch:
  3696                           	opt stack 0
  3697  000064                     ___awmod@counter:
  3698                           	opt stack 0
  3699  000064                     ___ftpack@sign:
  3700                           	opt stack 0
  3701  000064                     ___lldiv@divisor:
  3702                           	opt stack 0
  3703                           
  3704                           ; 4 bytes @ 0x4
  3705  000064                     	ds	1
  3706  000065                     ??___ftpack:
  3707  000065                     ??_frexp:
  3708  000065                     ___awmod@sign:
  3709                           	opt stack 0
  3710                           
  3711                           ; 1 bytes @ 0x5
  3712  000065                     	ds	1
  3713  000066                     ??__tdiv_to_l_:
  3714  000066                     ?___awdiv:
  3715                           	opt stack 0
  3716  000066                     ___awdiv@dividend:
  3717                           	opt stack 0
  3718  000066                     __div_to_l_@quot:
  3719                           	opt stack 0
  3720                           
  3721                           ; 4 bytes @ 0x6
  3722  000066                     	ds	2
  3723  000068                     ?___lbtoft:
  3724                           	opt stack 0
  3725  000068                     ?___lltoft:
  3726                           	opt stack 0
  3727  000068                     ?___lwtoft:
  3728                           	opt stack 0
  3729  000068                     ___awdiv@divisor:
  3730                           	opt stack 0
  3731  000068                     ___lwtoft@c:
  3732                           	opt stack 0
  3733  000068                     ___lldiv@quotient:
  3734                           	opt stack 0
  3735  000068                     ___lltoft@c:
  3736                           	opt stack 0
  3737                           
  3738                           ; 4 bytes @ 0x8
  3739  000068                     	ds	1
  3740  000069                     __tdiv_to_l_@quot:
  3741                           	opt stack 0
  3742                           
  3743                           ; 4 bytes @ 0x9
  3744  000069                     	ds	1
  3745  00006A                     ___awdiv@counter:
  3746                           	opt stack 0
  3747  00006A                     __div_to_l_@cntr:
  3748                           	opt stack 0
  3749                           
  3750                           ; 1 bytes @ 0xA
  3751  00006A                     	ds	1
  3752  00006B                     ___awdiv@sign:
  3753                           	opt stack 0
  3754  00006B                     __div_to_l_@exp1:
  3755                           	opt stack 0
  3756  00006B                     ___lbtoft@c:
  3757                           	opt stack 0
  3758                           
  3759                           ; 1 bytes @ 0xB
  3760  00006B                     	ds	1
  3761  00006C                     ??___lltoft:
  3762  00006C                     ___lldiv@counter:
  3763                           	opt stack 0
  3764  00006C                     ___awdiv@quotient:
  3765                           	opt stack 0
  3766                           
  3767                           ; 2 bytes @ 0xC
  3768  00006C                     	ds	1
  3769  00006D                     ?___llmod:
  3770                           	opt stack 0
  3771  00006D                     __tdiv_to_l_@cntr:
  3772                           	opt stack 0
  3773  00006D                     ___llmod@dividend:
  3774                           	opt stack 0
  3775                           
  3776                           ; 4 bytes @ 0xD
  3777  00006D                     	ds	1
  3778  00006E                     ?___wmul:
  3779                           	opt stack 0
  3780  00006E                     __tdiv_to_l_@exp1:
  3781                           	opt stack 0
  3782  00006E                     ___wmul@multiplier:
  3783                           	opt stack 0
  3784                           
  3785                           ; 2 bytes @ 0xE
  3786  00006E                     	ds	2
  3787  000070                     ___lltoft@exp:
  3788                           	opt stack 0
  3789  000070                     ___wmul@multiplicand:
  3790                           	opt stack 0
  3791                           
  3792                           ; 2 bytes @ 0x10
  3793  000070                     	ds	1
  3794  000071                     ___llmod@divisor:
  3795                           	opt stack 0
  3796                           
  3797                           ; 4 bytes @ 0x11
  3798  000071                     	ds	1
  3799  000072                     ___wmul@product:
  3800                           	opt stack 0
  3801                           
  3802                           ; 2 bytes @ 0x12
  3803  000072                     	ds	2
  3804  000074                     ?_BCDtoI:
  3805                           	opt stack 0
  3806  000074                     ?___ftmul:
  3807                           	opt stack 0
  3808  000074                     BCDtoI@BCD:
  3809                           	opt stack 0
  3810  000074                     ___ftmul@f1:
  3811                           	opt stack 0
  3812                           
  3813                           ; 3 bytes @ 0x14
  3814  000074                     	ds	1
  3815  000075                     ___llmod@counter:
  3816                           	opt stack 0
  3817                           
  3818                           ; 1 bytes @ 0x15
  3819  000075                     	ds	1
  3820  000076                     ??_BCDtoI:
  3821                           
  3822                           ; 1 bytes @ 0x16
  3823  000076                     	ds	1
  3824  000077                     ___ftmul@f2:
  3825                           	opt stack 0
  3826                           
  3827                           ; 3 bytes @ 0x17
  3828  000077                     	ds	2
  3829  000079                     BCDtoI@result:
  3830                           	opt stack 0
  3831                           
  3832                           ; 2 bytes @ 0x19
  3833  000079                     	ds	1
  3834  00007A                     ??___ftmul:
  3835                           
  3836                           ; 1 bytes @ 0x1A
  3837  00007A                     	ds	3
  3838  00007D                     ___ftmul@exp:
  3839                           	opt stack 0
  3840                           
  3841                           ; 1 bytes @ 0x1D
  3842  00007D                     	ds	1
  3843  00007E                     ___ftmul@f3_as_product:
  3844                           	opt stack 0
  3845                           
  3846                           ; 3 bytes @ 0x1E
  3847  00007E                     	ds	3
  3848  000081                     ___ftmul@cntr:
  3849                           	opt stack 0
  3850                           
  3851                           ; 1 bytes @ 0x21
  3852  000081                     	ds	1
  3853  000082                     ___ftmul@sign:
  3854                           	opt stack 0
  3855                           
  3856                           ; 1 bytes @ 0x22
  3857  000082                     	ds	1
  3858  000083                     ?_fround:
  3859                           	opt stack 0
  3860  000083                     ?_scale:
  3861                           	opt stack 0
  3862  000083                     ?___ftneg:
  3863                           	opt stack 0
  3864  000083                     ___ftneg@f1:
  3865                           	opt stack 0
  3866                           
  3867                           ; 3 bytes @ 0x23
  3868  000083                     	ds	3
  3869  000086                     _fround$8171:
  3870                           	opt stack 0
  3871  000086                     _scale$8172:
  3872                           	opt stack 0
  3873                           
  3874                           ; 3 bytes @ 0x26
  3875  000086                     	ds	3
  3876  000089                     scale@scl:
  3877                           	opt stack 0
  3878  000089                     _fround$8170:
  3879                           	opt stack 0
  3880                           
  3881                           ; 3 bytes @ 0x29
  3882  000089                     	ds	1
  3883  00008A                     ?___fttol:
  3884                           	opt stack 0
  3885  00008A                     ___fttol@f1:
  3886                           	opt stack 0
  3887                           
  3888                           ; 3 bytes @ 0x2A
  3889  00008A                     	ds	2
  3890  00008C                     fround@prec:
  3891                           	opt stack 0
  3892                           
  3893                           ; 1 bytes @ 0x2C
  3894  00008C                     	ds	1
  3895  00008D                     ?___ftadd:
  3896                           	opt stack 0
  3897  00008D                     ___ftadd@f1:
  3898                           	opt stack 0
  3899                           
  3900                           ; 3 bytes @ 0x2D
  3901  00008D                     	ds	1
  3902  00008E                     ??___fttol:
  3903                           
  3904                           ; 1 bytes @ 0x2E
  3905  00008E                     	ds	2
  3906  000090                     ___ftadd@f2:
  3907                           	opt stack 0
  3908                           
  3909                           ; 3 bytes @ 0x30
  3910  000090                     	ds	3
  3911  000093                     ??___ftadd:
  3912  000093                     ___fttol@sign1:
  3913                           	opt stack 0
  3914                           
  3915                           ; 1 bytes @ 0x33
  3916  000093                     	ds	1
  3917  000094                     ___fttol@lval:
  3918                           	opt stack 0
  3919                           
  3920                           ; 4 bytes @ 0x34
  3921  000094                     	ds	2
  3922  000096                     ___ftadd@sign:
  3923                           	opt stack 0
  3924                           
  3925                           ; 1 bytes @ 0x36
  3926  000096                     	ds	1
  3927  000097                     ___ftadd@exp2:
  3928                           	opt stack 0
  3929                           
  3930                           ; 1 bytes @ 0x37
  3931  000097                     	ds	1
  3932  000098                     ___ftadd@exp1:
  3933                           	opt stack 0
  3934  000098                     ___fttol@exp1:
  3935                           	opt stack 0
  3936                           
  3937                           ; 1 bytes @ 0x38
  3938  000098                     	ds	1
  3939  000099                     ?_eval_poly:
  3940                           	opt stack 0
  3941  000099                     ?___altoft:
  3942                           	opt stack 0
  3943  000099                     ___ftge@ff1:
  3944                           	opt stack 0
  3945  000099                     eval_poly@x:
  3946                           	opt stack 0
  3947  000099                     ___altoft@c:
  3948                           	opt stack 0
  3949                           
  3950                           ; 4 bytes @ 0x39
  3951  000099                     	ds	3
  3952  00009C                     eval_poly@d:
  3953                           	opt stack 0
  3954  00009C                     ___ftge@ff2:
  3955                           	opt stack 0
  3956                           
  3957                           ; 3 bytes @ 0x3C
  3958  00009C                     	ds	1
  3959  00009D                     ??___altoft:
  3960                           
  3961                           ; 1 bytes @ 0x3D
  3962  00009D                     	ds	1
  3963  00009E                     eval_poly@n:
  3964                           	opt stack 0
  3965                           
  3966                           ; 2 bytes @ 0x3E
  3967  00009E                     	ds	1
  3968  00009F                     ??___ftge:
  3969                           
  3970                           ; 1 bytes @ 0x3F
  3971  00009F                     	ds	1
  3972  0000A0                     ??_eval_poly:
  3973                           
  3974                           ; 1 bytes @ 0x40
  3975  0000A0                     	ds	1
  3976  0000A1                     ___altoft@exp:
  3977                           	opt stack 0
  3978                           
  3979                           ; 1 bytes @ 0x41
  3980  0000A1                     	ds	1
  3981  0000A2                     ___altoft@sign:
  3982                           	opt stack 0
  3983  0000A2                     eval_poly@res:
  3984                           	opt stack 0
  3985                           
  3986                           ; 3 bytes @ 0x42
  3987  0000A2                     	ds	1
  3988  0000A3                     ?_floor:
  3989                           	opt stack 0
  3990  0000A3                     floor@x:
  3991                           	opt stack 0
  3992                           
  3993                           ; 3 bytes @ 0x43
  3994  0000A3                     	ds	2
  3995  0000A5                     ?___ftdiv:
  3996                           	opt stack 0
  3997  0000A5                     ___ftdiv@f1:
  3998                           	opt stack 0
  3999                           
  4000                           ; 3 bytes @ 0x45
  4001  0000A5                     	ds	1
  4002  0000A6                     floor@i:
  4003                           	opt stack 0
  4004                           
  4005                           ; 3 bytes @ 0x46
  4006  0000A6                     	ds	2
  4007  0000A8                     ___ftdiv@f2:
  4008                           	opt stack 0
  4009                           
  4010                           ; 3 bytes @ 0x48
  4011  0000A8                     	ds	1
  4012  0000A9                     floor@expon:
  4013                           	opt stack 0
  4014                           
  4015                           ; 2 bytes @ 0x49
  4016  0000A9                     	ds	2
  4017  0000AB                     ??___ftdiv:
  4018  0000AB                     ?___ftsub:
  4019                           	opt stack 0
  4020  0000AB                     ___ftsub@f1:
  4021                           	opt stack 0
  4022                           
  4023                           ; 3 bytes @ 0x4B
  4024  0000AB                     	ds	3
  4025  0000AE                     ___ftdiv@cntr:
  4026                           	opt stack 0
  4027  0000AE                     ___ftsub@f2:
  4028                           	opt stack 0
  4029                           
  4030                           ; 3 bytes @ 0x4E
  4031  0000AE                     	ds	1
  4032  0000AF                     ___ftdiv@f3:
  4033                           	opt stack 0
  4034                           
  4035                           ; 3 bytes @ 0x4F
  4036  0000AF                     	ds	2
  4037  0000B1                     ?_printf:
  4038                           	opt stack 0
  4039  0000B1                     ?_sqrt:
  4040                           	opt stack 0
  4041  0000B1                     printf@f:
  4042                           	opt stack 0
  4043  0000B1                     sqrt@a:
  4044                           	opt stack 0
  4045                           
  4046                           ; 3 bytes @ 0x51
  4047  0000B1                     	ds	1
  4048  0000B2                     ___ftdiv@exp:
  4049                           	opt stack 0
  4050                           
  4051                           ; 1 bytes @ 0x52
  4052  0000B2                     	ds	1
  4053  0000B3                     ___ftdiv@sign:
  4054                           	opt stack 0
  4055                           
  4056                           ; 1 bytes @ 0x53
  4057  0000B3                     	ds	1
  4058  0000B4                     ??_Generator_RPM_Cal:
  4059  0000B4                     ??_Turbine_RPM_Cal:
  4060  0000B4                     ??_Wind_Speed_Cal:
  4061  0000B4                     ??_Wind_Speed_2_Cal:
  4062  0000B4                     ??_VFD_RS485_Data:
  4063  0000B4                     ??_RAMP_UP:
  4064  0000B4                     ??_sqrt:
  4065  0000B4                     ?_sin:
  4066                           	opt stack 0
  4067  0000B4                     sin@f:
  4068                           	opt stack 0
  4069  0000B4                     _Temp_Read$8073:
  4070                           	opt stack 0
  4071  0000B4                     _Volt_Curr_Avg$8077:
  4072                           	opt stack 0
  4073  0000B4                     _Freq_Calc$8078:
  4074                           	opt stack 0
  4075  0000B4                     _R_PF_Calc$8079:
  4076                           	opt stack 0
  4077  0000B4                     _Y_PF_Calc$8108:
  4078                           	opt stack 0
  4079  0000B4                     _B_PF_Calc$8137:
  4080                           	opt stack 0
  4081  0000B4                     _Power_Factor$8166:
  4082                           	opt stack 0
  4083                           
  4084                           ; 3 bytes @ 0x54
  4085  0000B4                     	ds	1
  4086  0000B5                     
  4087                           ; 1 bytes @ 0x55
  4088  0000B5                     	ds	1
  4089  0000B6                     ??_printf:
  4090  0000B6                     
  4091                           ; 1 bytes @ 0x56
  4092  0000B6                     	ds	1
  4093  0000B7                     sin@y:
  4094                           	opt stack 0
  4095  0000B7                     sqrt@og:
  4096                           	opt stack 0
  4097  0000B7                     _Temp_Read$8074:
  4098                           	opt stack 0
  4099                           
  4100                           ; 3 bytes @ 0x57
  4101  0000B7                     	ds	3
  4102  0000BA                     sqrt@z:
  4103                           	opt stack 0
  4104  0000BA                     _Temp_Read$8075:
  4105                           	opt stack 0
  4106  0000BA                     _sin$8175:
  4107                           	opt stack 0
  4108                           
  4109                           ; 3 bytes @ 0x5A
  4110  0000BA                     	ds	2
  4111  0000BC                     
  4112                           ; 1 bytes @ 0x5C
  4113  0000BC                     	ds	1
  4114  0000BD                     sqrt@i:
  4115                           	opt stack 0
  4116  0000BD                     sin@x2:
  4117                           	opt stack 0
  4118  0000BD                     _Temp_Read$8076:
  4119                           	opt stack 0
  4120                           
  4121                           ; 3 bytes @ 0x5D
  4122  0000BD                     	ds	1
  4123  0000BE                     sqrt@q:
  4124                           	opt stack 0
  4125                           
  4126                           ; 3 bytes @ 0x5E
  4127  0000BE                     	ds	2
  4128  0000C0                     sin@sgn:
  4129                           	opt stack 0
  4130                           
  4131                           ; 1 bytes @ 0x60
  4132  0000C0                     	ds	1
  4133  0000C1                     ?_cos:
  4134                           	opt stack 0
  4135  0000C1                     cos@f:
  4136                           	opt stack 0
  4137  0000C1                     sqrt@x:
  4138                           	opt stack 0
  4139                           
  4140                           ; 3 bytes @ 0x61
  4141  0000C1                     	ds	3
  4142  0000C4                     tblptru	equ	0xFF8
  4143                           tblptrh	equ	0xFF7
  4144                           tblptrl	equ	0xFF6
  4145                           tablat	equ	0xFF5
  4146                           postinc0	equ	0xFEE
  4147                           wreg	equ	0xFE8
  4148                           postdec1	equ	0xFE5
  4149                           fsr1h	equ	0xFE2
  4150                           fsr1l	equ	0xFE1
  4151                           
  4152                           ; 1 bytes @ 0x64
  4153                           
  4154                           	psect	cstackCOMRAM
  4155  000025                     __pcstackCOMRAM:
  4156                           	opt stack 0
  4157  000025                     ?i2___ftpack:
  4158                           	opt stack 0
  4159  000025                     i2___ftpack@arg:
  4160                           	opt stack 0
  4161  000025                     i2___ftge@ff1:
  4162                           	opt stack 0
  4163                           
  4164                           ; 3 bytes @ 0x0
  4165  000025                     	ds	3
  4166  000028                     i2___ftpack@exp:
  4167                           	opt stack 0
  4168  000028                     i2___ftge@ff2:
  4169                           	opt stack 0
  4170                           
  4171                           ; 3 bytes @ 0x3
  4172  000028                     	ds	1
  4173  000029                     i2___ftpack@sign:
  4174                           	opt stack 0
  4175                           
  4176                           ; 1 bytes @ 0x4
  4177  000029                     	ds	1
  4178  00002A                     ??i2___ftpack:
  4179                           
  4180                           ; 1 bytes @ 0x5
  4181  00002A                     	ds	1
  4182  00002B                     ??i2___ftge:
  4183                           
  4184                           ; 1 bytes @ 0x6
  4185  00002B                     	ds	2
  4186  00002D                     ?___awtoft:
  4187                           	opt stack 0
  4188  00002D                     ?i2___ftadd:
  4189                           	opt stack 0
  4190  00002D                     ___awtoft@c:
  4191                           	opt stack 0
  4192  00002D                     i2___ftadd@f1:
  4193                           	opt stack 0
  4194                           
  4195                           ; 3 bytes @ 0x8
  4196  00002D                     	ds	1
  4197  00002E                     
  4198                           ; 1 bytes @ 0x9
  4199  00002E                     	ds	2
  4200  000030                     ___awtoft@sign:
  4201                           	opt stack 0
  4202  000030                     i2___ftadd@f2:
  4203                           	opt stack 0
  4204                           
  4205                           ; 3 bytes @ 0xB
  4206  000030                     	ds	3
  4207  000033                     ??i2___ftadd:
  4208                           
  4209                           ; 1 bytes @ 0xE
  4210  000033                     	ds	3
  4211  000036                     i2___ftadd@sign:
  4212                           	opt stack 0
  4213                           
  4214                           ; 1 bytes @ 0x11
  4215  000036                     	ds	1
  4216  000037                     i2___ftadd@exp2:
  4217                           	opt stack 0
  4218                           
  4219                           ; 1 bytes @ 0x12
  4220  000037                     	ds	1
  4221  000038                     i2___ftadd@exp1:
  4222                           	opt stack 0
  4223                           
  4224                           ; 1 bytes @ 0x13
  4225  000038                     	ds	1
  4226  000039                     ??_ISR:
  4227                           
  4228                           ; 1 bytes @ 0x14
  4229  000039                     	ds	16
  4230                           tblptru	equ	0xFF8
  4231                           tblptrh	equ	0xFF7
  4232                           tblptrl	equ	0xFF6
  4233                           tablat	equ	0xFF5
  4234                           postinc0	equ	0xFEE
  4235                           wreg	equ	0xFE8
  4236                           postdec1	equ	0xFE5
  4237                           fsr1h	equ	0xFE2
  4238                           fsr1l	equ	0xFE1
  4239                           
  4240 ;;
  4241 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4242 ;;
  4243 ;; *************** function _main *****************
  4244 ;; Defined at:
  4245 ;;		line 30 in file "main_Logic.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  rtc             7    0        struct .
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;Total ram usage:        0 bytes
  4264 ;; Hardware stack levels required when called:   10
  4265 ;; This function calls:
  4266 ;;		_B_PF_Avg
  4267 ;;		_B_PF_Calc
  4268 ;;		_Cons_Gene
  4269 ;;		_EEPROM_Error_Stop
  4270 ;;		_Freq_Calc
  4271 ;;		_Generator_RPM_Cal
  4272 ;;		_Generator_RPM_Initiate
  4273 ;;		_IO_Initiate
  4274 ;;		_OSCILLATOR
  4275 ;;		_PM_ADC_Initialization
  4276 ;;		_PM_IO_Initialization
  4277 ;;		_PM_Timer_Initialization
  4278 ;;		_Phase_Sequence
  4279 ;;		_Power_Calc
  4280 ;;		_Power_Factor
  4281 ;;		_RPM_Data_Kill
  4282 ;;		_RS485_Data_communication
  4283 ;;		_RTC_Init
  4284 ;;		_R_PF_Avg
  4285 ;;		_R_PF_Calc
  4286 ;;		_Rampup_state_function
  4287 ;;		_Temp_Read
  4288 ;;		_Timer0_OneSecond_Function
  4289 ;;		_Timer1_Initiate
  4290 ;;		_Timer7_Init
  4291 ;;		_Turbine_RPM_Cal
  4292 ;;		_Turbine_RPM_Initiate
  4293 ;;		_Volt_Curr_Avg
  4294 ;;		_Volt_Curr_Read
  4295 ;;		_Wind_Speed_2_Cal
  4296 ;;		_Wind_Speed_2_Initiate
  4297 ;;		_Wind_Speed_Cal
  4298 ;;		_Wind_Speed_Initiate
  4299 ;;		_Y_PF_Avg
  4300 ;;		_Y_PF_Calc
  4301 ;;		_startup_state_function
  4302 ;;		_usart_init
  4303 ;; This function is called by:
  4304 ;;		Startup code after reset
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text0
  4309  0175F4                     __ptext0:
  4310                           	opt stack 0
  4311  0175F4                     _main:
  4312                           	opt stack 21
  4313                           
  4314                           ;main_Logic.c: 32: rtc_t rtc;
  4315                           ;main_Logic.c: 33: RTC_Init();
  4316                           
  4317                           ;incstack = 0
  4318  0175F4  EC15  F0D8         	call	_RTC_Init	;wreg free
  4319                           
  4320                           ;main_Logic.c: 34: OSCILLATOR();
  4321  0175F8  ECDE  F0D8         	call	_OSCILLATOR	;wreg free
  4322                           
  4323                           ;main_Logic.c: 35: Timer1_Initiate();
  4324  0175FC  EC68  F0D8         	call	_Timer1_Initiate	;wreg free
  4325                           
  4326                           ;main_Logic.c: 36: Timer7_Init();
  4327  017600  EC97  F0D8         	call	_Timer7_Init	;wreg free
  4328                           
  4329                           ;main_Logic.c: 37: usart_init();
  4330  017604  EC25  F0D8         	call	_usart_init	;wreg free
  4331                           
  4332                           ;main_Logic.c: 40: Generator_RPM_Initiate();
  4333  017608  EC84  F0D8         	call	_Generator_RPM_Initiate	;wreg free
  4334                           
  4335                           ;main_Logic.c: 41: Wind_Speed_Initiate();
  4336  01760C  EC8B  F0D8         	call	_Wind_Speed_Initiate	;wreg free
  4337                           
  4338                           ;main_Logic.c: 42: Turbine_RPM_Initiate();
  4339  017610  EC91  F0D8         	call	_Turbine_RPM_Initiate	;wreg free
  4340                           
  4341                           ;main_Logic.c: 43: Wind_Speed_2_Initiate();
  4342  017614  EC61  F0D8         	call	_Wind_Speed_2_Initiate	;wreg free
  4343                           
  4344                           ;main_Logic.c: 44: IO_Initiate();
  4345  017618  EC29  F0D6         	call	_IO_Initiate	;wreg free
  4346                           
  4347                           ;main_Logic.c: 45: PM_IO_Initialization();
  4348  01761C  EC84  F0D4         	call	_PM_IO_Initialization	;wreg free
  4349                           
  4350                           ;main_Logic.c: 46: PM_Timer_Initialization();
  4351  017620  ECB2  F0D8         	call	_PM_Timer_Initialization	;wreg free
  4352                           
  4353                           ;main_Logic.c: 47: PM_ADC_Initialization();
  4354  017624  ECB7  F0D8         	call	_PM_ADC_Initialization	;wreg free
  4355                           
  4356                           ;main_Logic.c: 48: Phase_Sequence();
  4357  017628  EC4D  F0C0         	call	_Phase_Sequence	;wreg free
  4358                           
  4359                           ;main_Logic.c: 50: PEIE=1;
  4360  01762C  8CF2               	bsf	intcon,6,c	;volatile
  4361                           
  4362                           ;main_Logic.c: 51: GIE=1;
  4363  01762E  8EF2               	bsf	intcon,7,c	;volatile
  4364                           
  4365                           ;main_Logic.c: 53: EEPROM_Error_Stop();
  4366  017630  ECCC  F0AA         	call	_EEPROM_Error_Stop	;wreg free
  4367                           
  4368                           ;main_Logic.c: 55: counter_1 = 0;
  4369  017634  0E00               	movlw	0
  4370  017636  0100               	movlb	0	; () banked
  4371  017638  6FF3               	movwf	_counter_1& (0+255),b
  4372  01763A                     l23116:
  4373                           
  4374                           ;main_Logic.c: 66: {
  4375                           ;main_Logic.c: 68: Temp_Read();
  4376  01763A  EC27  F0BE         	call	_Temp_Read	;wreg free
  4377                           
  4378                           ;main_Logic.c: 70: if(Volt_Curr_Flag == 1)
  4379  01763E  0101               	movlb	1	; () banked
  4380  017640  0598               	decf	_Volt_Curr_Flag& (0+255),w,b
  4381  017642  A4D8               	btfss	status,2,c
  4382  017644  D007               	goto	l23126
  4383                           
  4384                           ; BSR set to: 1
  4385                           ;main_Logic.c: 71: {
  4386                           ;main_Logic.c: 72: Volt_Curr_Flag = 0;
  4387  017646  0E00               	movlw	0
  4388  017648  0101               	movlb	1	; () banked
  4389  01764A  6F98               	movwf	_Volt_Curr_Flag& (0+255),b
  4390                           
  4391                           ; BSR set to: 1
  4392                           ;main_Logic.c: 73: Volt_Curr_Read();
  4393  01764C  ECA0  F0A5         	call	_Volt_Curr_Read	;wreg free
  4394                           
  4395                           ;main_Logic.c: 74: Volt_Curr_Avg();
  4396  017650  EC79  F09C         	call	_Volt_Curr_Avg	;wreg free
  4397  017654                     l23126:
  4398                           
  4399                           ;main_Logic.c: 76: }
  4400                           ;main_Logic.c: 78: if(Freq_Flag == 1)
  4401  017654  0101               	movlb	1	; () banked
  4402  017656  055A               	decf	_Freq_Flag& (0+255),w,b
  4403  017658  A4D8               	btfss	status,2,c
  4404  01765A  D005               	goto	l23132
  4405                           
  4406                           ; BSR set to: 1
  4407                           ;main_Logic.c: 79: {
  4408                           ;main_Logic.c: 80: Freq_Flag = 0;
  4409  01765C  0E00               	movlw	0
  4410  01765E  0101               	movlb	1	; () banked
  4411  017660  6F5A               	movwf	_Freq_Flag& (0+255),b
  4412                           
  4413                           ; BSR set to: 1
  4414                           ;main_Logic.c: 81: Freq_Calc();
  4415  017662  EC5A  F0B8         	call	_Freq_Calc	;wreg free
  4416  017666                     l23132:
  4417                           
  4418                           ;main_Logic.c: 82: }
  4419                           ;main_Logic.c: 84: if(R_PF_Flag == 1)
  4420  017666  0101               	movlb	1	; () banked
  4421  017668  0578               	decf	_R_PF_Flag& (0+255),w,b
  4422  01766A  A4D8               	btfss	status,2,c
  4423  01766C  D007               	goto	l23140
  4424                           
  4425                           ; BSR set to: 1
  4426                           ;main_Logic.c: 85: {
  4427                           ;main_Logic.c: 86: R_PF_Flag = 0;
  4428  01766E  0E00               	movlw	0
  4429  017670  0101               	movlb	1	; () banked
  4430  017672  6F78               	movwf	_R_PF_Flag& (0+255),b
  4431                           
  4432                           ; BSR set to: 1
  4433                           ;main_Logic.c: 87: R_PF_Calc();
  4434  017674  EC2C  F0B6         	call	_R_PF_Calc	;wreg free
  4435                           
  4436                           ;main_Logic.c: 88: R_PF_Avg();
  4437  017678  ECFD  F090         	call	_R_PF_Avg	;wreg free
  4438  01767C                     l23140:
  4439                           
  4440                           ;main_Logic.c: 89: }
  4441                           ;main_Logic.c: 91: if(Y_PF_Flag == 1)
  4442  01767C  0101               	movlb	1	; () banked
  4443  01767E  059B               	decf	_Y_PF_Flag& (0+255),w,b
  4444  017680  A4D8               	btfss	status,2,c
  4445  017682  D007               	goto	l23148
  4446                           
  4447                           ; BSR set to: 1
  4448                           ;main_Logic.c: 92: {
  4449                           ;main_Logic.c: 93: Y_PF_Flag = 0;
  4450  017684  0E00               	movlw	0
  4451  017686  0101               	movlb	1	; () banked
  4452  017688  6F9B               	movwf	_Y_PF_Flag& (0+255),b
  4453                           
  4454                           ; BSR set to: 1
  4455                           ;main_Logic.c: 94: Y_PF_Calc();
  4456  01768A  EC15  F0B5         	call	_Y_PF_Calc	;wreg free
  4457                           
  4458                           ;main_Logic.c: 95: Y_PF_Avg();
  4459  01768E  EC12  F08D         	call	_Y_PF_Avg	;wreg free
  4460  017692                     l23148:
  4461                           
  4462                           ;main_Logic.c: 96: }
  4463                           ;main_Logic.c: 98: if(B_PF_Flag == 1)
  4464  017692  0101               	movlb	1	; () banked
  4465  017694  054C               	decf	_B_PF_Flag& (0+255),w,b
  4466  017696  A4D8               	btfss	status,2,c
  4467  017698  D007               	goto	l23156
  4468                           
  4469                           ; BSR set to: 1
  4470                           ;main_Logic.c: 99: {
  4471                           ;main_Logic.c: 100: B_PF_Flag = 0;
  4472  01769A  0E00               	movlw	0
  4473  01769C  0101               	movlb	1	; () banked
  4474  01769E  6F4C               	movwf	_B_PF_Flag& (0+255),b
  4475                           
  4476                           ; BSR set to: 1
  4477                           ;main_Logic.c: 101: B_PF_Calc();
  4478  0176A0  EC43  F0B7         	call	_B_PF_Calc	;wreg free
  4479                           
  4480                           ;main_Logic.c: 102: B_PF_Avg();
  4481  0176A4  ECE8  F094         	call	_B_PF_Avg	;wreg free
  4482  0176A8                     l23156:
  4483                           
  4484                           ;main_Logic.c: 103: }
  4485                           ;main_Logic.c: 105: Power_Factor();
  4486  0176A8  ECAF  F0CB         	call	_Power_Factor	;wreg free
  4487                           
  4488                           ;main_Logic.c: 106: Power_Calc();
  4489  0176AC  ECF2  F0B3         	call	_Power_Calc	;wreg free
  4490                           
  4491                           ;main_Logic.c: 107: Cons_Gene();
  4492  0176B0  ECC8  F0C4         	call	_Cons_Gene	;wreg free
  4493                           
  4494                           ;main_Logic.c: 111: if (GRPM_Cap)
  4495  0176B4  0102               	movlb	2	; () banked
  4496  0176B6  5184               	movf	_GRPM_Cap& (0+255),w,b
  4497  0176B8  0102               	movlb	2	; () banked
  4498  0176BA  1185               	iorwf	(_GRPM_Cap+1)& (0+255),w,b
  4499  0176BC  B4D8               	btfsc	status,2,c
  4500  0176BE  D007               	goto	l23168
  4501                           
  4502                           ; BSR set to: 2
  4503                           ;main_Logic.c: 112: {
  4504                           ;main_Logic.c: 113: Generator_RPM_Cal();
  4505  0176C0  EC6F  F0A7         	call	_Generator_RPM_Cal	;wreg free
  4506                           
  4507                           ;main_Logic.c: 114: GRPM_Cap = 0;
  4508  0176C4  0E00               	movlw	0
  4509  0176C6  0102               	movlb	2	; () banked
  4510  0176C8  6F85               	movwf	(_GRPM_Cap+1)& (0+255),b
  4511  0176CA  0E00               	movlw	0
  4512  0176CC  6F84               	movwf	_GRPM_Cap& (0+255),b
  4513  0176CE                     l23168:
  4514                           
  4515                           ; BSR set to: 2
  4516                           ;main_Logic.c: 115: }
  4517                           ;main_Logic.c: 116: if(TRPM_Cal)
  4518  0176CE  0100               	movlb	0	; () banked
  4519  0176D0  51EC               	movf	_TRPM_Cal& (0+255),w,b
  4520  0176D2  B4D8               	btfsc	status,2,c
  4521  0176D4  D005               	goto	l23174
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;main_Logic.c: 117: {
  4525                           ;main_Logic.c: 118: Turbine_RPM_Cal();
  4526  0176D6  ECC6  F0A3         	call	_Turbine_RPM_Cal	;wreg free
  4527                           
  4528                           ;main_Logic.c: 119: TRPM_Cal = 0;
  4529  0176DA  0E00               	movlw	0
  4530  0176DC  0100               	movlb	0	; () banked
  4531  0176DE  6FEC               	movwf	_TRPM_Cal& (0+255),b
  4532  0176E0                     l23174:
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;main_Logic.c: 120: }
  4536                           ;main_Logic.c: 121: if (Wind_Cap)
  4537  0176E0  0102               	movlb	2	; () banked
  4538  0176E2  51AC               	movf	_Wind_Cap& (0+255),w,b
  4539  0176E4  0102               	movlb	2	; () banked
  4540  0176E6  11AD               	iorwf	(_Wind_Cap+1)& (0+255),w,b
  4541  0176E8  B4D8               	btfsc	status,2,c
  4542  0176EA  D007               	goto	l23180
  4543                           
  4544                           ; BSR set to: 2
  4545                           ;main_Logic.c: 122: {
  4546                           ;main_Logic.c: 123: Wind_Cap = 0;
  4547  0176EC  0E00               	movlw	0
  4548  0176EE  0102               	movlb	2	; () banked
  4549  0176F0  6FAD               	movwf	(_Wind_Cap+1)& (0+255),b
  4550  0176F2  0E00               	movlw	0
  4551  0176F4  6FAC               	movwf	_Wind_Cap& (0+255),b
  4552                           
  4553                           ; BSR set to: 2
  4554                           ;main_Logic.c: 124: Wind_Speed_Cal();
  4555  0176F6  EC50  F0B0         	call	_Wind_Speed_Cal	;wreg free
  4556  0176FA                     l23180:
  4557                           
  4558                           ;main_Logic.c: 125: }
  4559                           ;main_Logic.c: 126: if(Wind_Cap_2)
  4560  0176FA  0102               	movlb	2	; () banked
  4561  0176FC  51AE               	movf	_Wind_Cap_2& (0+255),w,b
  4562  0176FE  0102               	movlb	2	; () banked
  4563  017700  11AF               	iorwf	(_Wind_Cap_2+1)& (0+255),w,b
  4564  017702  B4D8               	btfsc	status,2,c
  4565  017704  D007               	goto	l23186
  4566                           
  4567                           ; BSR set to: 2
  4568                           ;main_Logic.c: 127: {
  4569                           ;main_Logic.c: 128: Wind_Speed_2_Cal();
  4570  017706  EC87  F0B1         	call	_Wind_Speed_2_Cal	;wreg free
  4571                           
  4572                           ;main_Logic.c: 129: Wind_Cap_2 = 0;
  4573  01770A  0E00               	movlw	0
  4574  01770C  0102               	movlb	2	; () banked
  4575  01770E  6FAF               	movwf	(_Wind_Cap_2+1)& (0+255),b
  4576  017710  0E00               	movlw	0
  4577  017712  6FAE               	movwf	_Wind_Cap_2& (0+255),b
  4578  017714                     l23186:
  4579                           
  4580                           ; BSR set to: 2
  4581                           ;main_Logic.c: 130: }
  4582                           ;main_Logic.c: 131: if(Timer1_interrupt_flag)
  4583  017714  0101               	movlb	1	; () banked
  4584  017716  5186               	movf	_Timer1_interrupt_flag& (0+255),w,b
  4585  017718  B4D8               	btfsc	status,2,c
  4586  01771A  D021               	goto	l23210
  4587                           
  4588                           ; BSR set to: 1
  4589                           ;main_Logic.c: 132: {
  4590                           ;main_Logic.c: 133: Timer1_interrupt_flag = 0;
  4591  01771C  0E00               	movlw	0
  4592  01771E  0101               	movlb	1	; () banked
  4593  017720  6F86               	movwf	_Timer1_interrupt_flag& (0+255),b
  4594                           
  4595                           ; BSR set to: 1
  4596                           ;main_Logic.c: 134: RPM_Data_Kill();
  4597  017722  EC9E  F0BC         	call	_RPM_Data_Kill	;wreg free
  4598                           
  4599                           ;main_Logic.c: 135: }
  4600                           ;main_Logic.c: 136: switch(Turbine_state)
  4601  017726  D01B               	goto	l23210
  4602  017728                     l23192:
  4603                           
  4604                           ;main_Logic.c: 139: Desired_Frequency = (8);
  4605  017728  0E08               	movlw	8
  4606  01772A  6E16               	movwf	_Desired_Frequency,c
  4607                           
  4608                           ;main_Logic.c: 140: startup_state_function();
  4609  01772C  ECE3  F0D7         	call	_startup_state_function	;wreg free
  4610                           
  4611                           ;main_Logic.c: 141: Pitch_Counter = 0;
  4612  017730  0E00               	movlw	0
  4613  017732  0102               	movlb	2	; () banked
  4614  017734  6F95               	movwf	(_Pitch_Counter+1)& (0+255),b
  4615  017736  0E00               	movlw	0
  4616  017738  6F94               	movwf	_Pitch_Counter& (0+255),b
  4617                           
  4618                           ; BSR set to: 2
  4619                           ;main_Logic.c: 142: Pitching_FlAG = 0;
  4620  01773A  0E00               	movlw	0
  4621  01773C  0102               	movlb	2	; () banked
  4622  01773E  6F97               	movwf	(_Pitching_FlAG+1)& (0+255),b
  4623  017740  0E00               	movlw	0
  4624  017742  6F96               	movwf	_Pitching_FlAG& (0+255),b
  4625                           
  4626                           ; BSR set to: 2
  4627                           ;main_Logic.c: 143: Two_Delay_counter = 0;
  4628  017744  0E00               	movlw	0
  4629  017746  0101               	movlb	1	; () banked
  4630  017748  6F8B               	movwf	_Two_Delay_counter& (0+255),b
  4631                           
  4632                           ; BSR set to: 1
  4633                           ;main_Logic.c: 144: Two_Sec_Delay_vab = 0;
  4634  01774A  0E00               	movlw	0
  4635  01774C  0101               	movlb	1	; () banked
  4636  01774E  6F8C               	movwf	_Two_Sec_Delay_vab& (0+255),b
  4637                           
  4638                           ; BSR set to: 1
  4639                           ;main_Logic.c: 145: Two_sec_Delay_Flag = 0;
  4640  017750  0E00               	movlw	0
  4641  017752  0101               	movlb	1	; () banked
  4642  017754  6F8D               	movwf	_Two_sec_Delay_Flag& (0+255),b
  4643                           
  4644                           ;main_Logic.c: 146: break;
  4645  017756  D00E               	goto	l23212
  4646  017758                     l23206:
  4647                           
  4648                           ;main_Logic.c: 149: Rampup_state_function();
  4649  017758  ECDB  F0D8         	call	_Rampup_state_function	;wreg free
  4650                           
  4651                           ;main_Logic.c: 162: }
  4652                           
  4653                           ;main_Logic.c: 161: break;
  4654                           
  4655                           ;main_Logic.c: 160: default:
  4656                           
  4657                           ;main_Logic.c: 158: break;
  4658                           
  4659                           ;main_Logic.c: 156: case STOPPING_STATE:
  4660                           
  4661                           ;main_Logic.c: 154: break;
  4662                           
  4663                           ;main_Logic.c: 152: case RUNNING_STATE:
  4664                           
  4665                           ;main_Logic.c: 150: break;
  4666  01775C  D00B               	goto	l23212
  4667  01775E                     l23210:
  4668  01775E  0100               	movlb	0	; () banked
  4669  017760  51F0               	movf	_Turbine_state& (0+255),w,b
  4670                           
  4671                           ; Switch size 1, requested type "space"
  4672                           ; Number of cases is 4, Range of values is 0 to 3
  4673                           ; switch strategies available:
  4674                           ; Name         Instructions Cycles
  4675                           ; simple_byte           13     7 (average)
  4676                           ;	Chosen strategy is simple_byte
  4677  017762  0A00               	xorlw	0	; case 0
  4678  017764  B4D8               	btfsc	status,2,c
  4679  017766  D7E0               	goto	l23192
  4680  017768  0A01               	xorlw	1	; case 1
  4681  01776A  B4D8               	btfsc	status,2,c
  4682  01776C  D7F5               	goto	l23206
  4683  01776E  0A03               	xorlw	3	; case 2
  4684  017770  A4D8               	btfss	status,2,c
  4685  017772  0A01               	xorlw	1	; case 3
  4686  017774                     l23212:
  4687                           
  4688                           ;main_Logic.c: 164: if(Timer0_1Sec_Flag)
  4689  017774  0103               	movlb	3	; () banked
  4690  017776  51EF               	movf	_Timer0_1Sec_Flag& (0+255),w,b
  4691  017778  0103               	movlb	3	; () banked
  4692  01777A  11F0               	iorwf	(_Timer0_1Sec_Flag+1)& (0+255),w,b
  4693  01777C  B4D8               	btfsc	status,2,c
  4694  01777E  D00C               	goto	l23220
  4695                           
  4696                           ; BSR set to: 3
  4697                           ;main_Logic.c: 165: {
  4698                           ;main_Logic.c: 166: Timer0_1Sec_Flag = 0;
  4699  017780  0E00               	movlw	0
  4700  017782  0103               	movlb	3	; () banked
  4701  017784  6FF0               	movwf	(_Timer0_1Sec_Flag+1)& (0+255),b
  4702  017786  0E00               	movlw	0
  4703  017788  6FEF               	movwf	_Timer0_1Sec_Flag& (0+255),b
  4704                           
  4705                           ; BSR set to: 3
  4706                           ;main_Logic.c: 167: Timer0_OneSecond_Function();
  4707  01778A  ECA9  F0C9         	call	_Timer0_OneSecond_Function	;wreg free
  4708                           
  4709                           ;main_Logic.c: 168: RA4 = ~RA4;
  4710  01778E  B880               	btfsc	3968,4,c	;volatile
  4711  017790  D002               	goto	u17980
  4712  017792  8880               	bsf	3968,4,c	;volatile
  4713  017794  D001               	goto	l23220
  4714  017796                     u17980:
  4715  017796  9880               	bcf	3968,4,c	;volatile
  4716  017798                     l23220:
  4717                           
  4718                           ;main_Logic.c: 169: }
  4719                           ;main_Logic.c: 170: RS485_Data_communication();
  4720  017798  ECF8  F0D0         	call	_RS485_Data_communication	;wreg free
  4721  01779C  D74E               	goto	l23116
  4722  01779E                     __end_of_main:
  4723                           	opt stack 0
  4724                           tblptru	equ	0xFF8
  4725                           tblptrh	equ	0xFF7
  4726                           tblptrl	equ	0xFF6
  4727                           tablat	equ	0xFF5
  4728                           intcon	equ	0xFF2
  4729                           postinc0	equ	0xFEE
  4730                           wreg	equ	0xFE8
  4731                           postdec1	equ	0xFE5
  4732                           fsr1h	equ	0xFE2
  4733                           fsr1l	equ	0xFE1
  4734                           status	equ	0xFD8
  4735                           
  4736 ;; *************** function _usart_init *****************
  4737 ;; Defined at:
  4738 ;;		line 541 in file "UART.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;Total ram usage:        0 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    3
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_main
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text1
  4767  01B04A                     __ptext1:
  4768                           	opt stack 0
  4769  01B04A                     _usart_init:
  4770                           	opt stack 27
  4771                           
  4772                           ;UART.c: 544: TXSTAbits.SYNC = 0;
  4773                           
  4774                           ;incstack = 0
  4775  01B04A  98AC               	bcf	4012,4,c	;volatile
  4776                           
  4777                           ;UART.c: 545: TXSTAbits.BRGH = 1;
  4778  01B04C  84AC               	bsf	4012,2,c	;volatile
  4779                           
  4780                           ;UART.c: 546: BAUDCONbits.BRG16 = 0;
  4781  01B04E  9665               	bcf	3941,3,c	;volatile
  4782                           
  4783                           ;UART.c: 547: TRISCbits.TRISC6 = 1;
  4784  01B050  8C94               	bsf	3988,6,c	;volatile
  4785                           
  4786                           ;UART.c: 548: TRISCbits.TRISC7 = 1;
  4787  01B052  8E94               	bsf	3988,7,c	;volatile
  4788                           
  4789                           ;UART.c: 549: TXSTAbits.TXEN = 1;
  4790  01B054  8AAC               	bsf	4012,5,c	;volatile
  4791                           
  4792                           ;UART.c: 550: RCSTAbits.CREN = 0;
  4793  01B056  98AB               	bcf	4011,4,c	;volatile
  4794                           
  4795                           ;UART.c: 551: RCSTAbits.SPEN = 1;
  4796  01B058  8EAB               	bsf	4011,7,c	;volatile
  4797                           
  4798                           ;UART.c: 552: SPBRG1=8;
  4799  01B05A  0E08               	movlw	8
  4800  01B05C  6EAF               	movwf	4015,c	;volatile
  4801                           
  4802                           ;UART.c: 554: PIR1bits.RC1IF = 0;
  4803  01B05E  9A9E               	bcf	3998,5,c	;volatile
  4804                           
  4805                           ;UART.c: 555: PIE1bits.RC1IE = 0;
  4806  01B060  9A9D               	bcf	3997,5,c	;volatile
  4807  01B062  0012               	return		;funcret
  4808  01B064                     __end_of_usart_init:
  4809                           	opt stack 0
  4810                           tblptru	equ	0xFF8
  4811                           tblptrh	equ	0xFF7
  4812                           tblptrl	equ	0xFF6
  4813                           tablat	equ	0xFF5
  4814                           intcon	equ	0xFF2
  4815                           postinc0	equ	0xFEE
  4816                           wreg	equ	0xFE8
  4817                           postdec1	equ	0xFE5
  4818                           fsr1h	equ	0xFE2
  4819                           fsr1l	equ	0xFE1
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function _startup_state_function *****************
  4823 ;; Defined at:
  4824 ;;		line 16 in file "state.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;		None
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;		None
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  1    wreg      void 
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;Total ram usage:        0 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    3
  4845 ;; This function calls:
  4846 ;;		Nothing
  4847 ;; This function is called by:
  4848 ;;		_main
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           	psect	text2
  4853  01AFC6                     __ptext2:
  4854                           	opt stack 0
  4855  01AFC6                     _startup_state_function:
  4856                           	opt stack 27
  4857                           
  4858                           ;state.c: 18: if(Start_up_Error == 0)
  4859                           
  4860                           ;incstack = 0
  4861  01AFC6  0101               	movlb	1	; () banked
  4862  01AFC8  51C8               	movf	_Start_up_Error& (0+255),w,b
  4863  01AFCA  A4D8               	btfss	status,2,c
  4864  01AFCC  D006               	goto	l22988
  4865                           
  4866                           ; BSR set to: 1
  4867                           ;state.c: 19: {
  4868                           ;state.c: 20: Turbine_state = RAMPUP_STATE;
  4869  01AFCE  0E01               	movlw	1
  4870  01AFD0  0100               	movlb	0	; () banked
  4871  01AFD2  6FF0               	movwf	_Turbine_state& (0+255),b
  4872                           
  4873                           ;state.c: 21: VFD_RAMP = VFD_IN;
  4874  01AFD4  0E00               	movlw	0
  4875  01AFD6  0101               	movlb	1	; () banked
  4876  01AFD8  6F95               	movwf	_VFD_RAMP& (0+255),b
  4877  01AFDA                     l22988:
  4878                           
  4879                           ; BSR set to: 1
  4880                           ;state.c: 22: }
  4881                           ;state.c: 23: if(Turbine_Restore_Error == 1)
  4882  01AFDA  0101               	movlb	1	; () banked
  4883  01AFDC  0589               	decf	_Turbine_Restore_Error& (0+255),w,b
  4884  01AFDE  A4D8               	btfss	status,2,c
  4885  01AFE0  0012               	return	
  4886                           
  4887                           ; BSR set to: 1
  4888                           ;state.c: 24: {
  4889                           ;state.c: 25: Turbine_state = STOPPING_STATE;
  4890  01AFE2  0E03               	movlw	3
  4891  01AFE4  0100               	movlb	0	; () banked
  4892  01AFE6  6FF0               	movwf	_Turbine_state& (0+255),b
  4893  01AFE8  0012               	return	
  4894  01AFEA                     __end_of_startup_state_function:
  4895                           	opt stack 0
  4896                           tblptru	equ	0xFF8
  4897                           tblptrh	equ	0xFF7
  4898                           tblptrl	equ	0xFF6
  4899                           tablat	equ	0xFF5
  4900                           intcon	equ	0xFF2
  4901                           postinc0	equ	0xFEE
  4902                           wreg	equ	0xFE8
  4903                           postdec1	equ	0xFE5
  4904                           fsr1h	equ	0xFE2
  4905                           fsr1l	equ	0xFE1
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _Y_PF_Calc *****************
  4909 ;; Defined at:
  4910 ;;		line 435 in file "Power_Meter.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;Total ram usage:        3 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    5
  4931 ;; This function calls:
  4932 ;;		___ftadd
  4933 ;;		___ftdiv
  4934 ;;		___ftge
  4935 ;;		___ftmul
  4936 ;;		___ftneg
  4937 ;; This function is called by:
  4938 ;;		_main
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           	psect	text3
  4943  016A2A                     __ptext3:
  4944                           	opt stack 0
  4945  016A2A                     _Y_PF_Calc:
  4946                           	opt stack 25
  4947                           
  4948                           ;Power_Meter.c: 437: if(Ycurr_V_New < Ycurr_V_Old)
  4949                           
  4950                           ;incstack = 0
  4951  016A2A  C0FD  F099         	movff	_Ycurr_V_New,___ftge@ff1
  4952  016A2E  C0FE  F09A         	movff	_Ycurr_V_New+1,___ftge@ff1+1
  4953  016A32  C0FF  F09B         	movff	_Ycurr_V_New+2,___ftge@ff1+2
  4954  016A36  C278  F09C         	movff	_Ycurr_V_Old,___ftge@ff2
  4955  016A3A  C279  F09D         	movff	_Ycurr_V_Old+1,___ftge@ff2+1
  4956  016A3E  C27A  F09E         	movff	_Ycurr_V_Old+2,___ftge@ff2+2
  4957  016A42  EC4B  F0CB         	call	___ftge	;wreg free
  4958  016A46  0100               	movlb	0	; () banked
  4959  016A48  B0D8               	btfsc	status,0,c
  4960  016A4A  D02E               	goto	l22618
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;Power_Meter.c: 438: {
  4964                           ;Power_Meter.c: 439: Y_V_Gap = ((Ycurr_V_New - Ycurr_V_Old + 1) + 65536);
  4965  016A4C  C0FD  F090         	movff	_Ycurr_V_New,___ftadd@f2
  4966  016A50  C0FE  F091         	movff	_Ycurr_V_New+1,___ftadd@f2+1
  4967  016A54  C0FF  F092         	movff	_Ycurr_V_New+2,___ftadd@f2+2
  4968  016A58  C278  F083         	movff	_Ycurr_V_Old,___ftneg@f1
  4969  016A5C  C279  F084         	movff	_Ycurr_V_Old+1,___ftneg@f1+1
  4970  016A60  C27A  F085         	movff	_Ycurr_V_Old+2,___ftneg@f1+2
  4971  016A64  EC1D  F0D7         	call	___ftneg	;wreg free
  4972  016A68  C083  F08D         	movff	?___ftneg,___ftadd@f1
  4973  016A6C  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  4974  016A70  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  4975  016A74  ECBE  F0B2         	call	___ftadd	;wreg free
  4976  016A78  C08D  F0B4         	movff	?___ftadd,_Y_PF_Calc$8108
  4977  016A7C  C08E  F0B5         	movff	?___ftadd+1,_Y_PF_Calc$8108+1
  4978  016A80  C08F  F0B6         	movff	?___ftadd+2,_Y_PF_Calc$8108+2
  4979                           
  4980                           ;Power_Meter.c: 438: {
  4981                           ;Power_Meter.c: 439: Y_V_Gap = ((Ycurr_V_New - Ycurr_V_Old + 1) + 65536);
  4982  016A84  C0B4  F08D         	movff	_Y_PF_Calc$8108,___ftadd@f1
  4983  016A88  C0B5  F08E         	movff	_Y_PF_Calc$8108+1,___ftadd@f1+1
  4984  016A8C  C0B6  F08F         	movff	_Y_PF_Calc$8108+2,___ftadd@f1+2
  4985  016A90  0E01               	movlw	1
  4986  016A92  0100               	movlb	0	; () banked
  4987  016A94  6F90               	movwf	___ftadd@f2& (0+255),b
  4988  016A96  0E80               	movlw	128
  4989  016A98  0100               	movlb	0	; () banked
  4990  016A9A  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  4991  016A9C  0E47               	movlw	71
  4992  016A9E  0100               	movlb	0	; () banked
  4993  016AA0  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  4994  016AA2  ECBE  F0B2         	call	___ftadd	;wreg free
  4995  016AA6  D088               	goto	L1
  4996  016AA8                     l22618:
  4997                           
  4998                           ;Power_Meter.c: 442: else if((Ycurr_New + 100) < Ycurr_V_New)
  4999  016AA8  0E00               	movlw	0
  5000  016AAA  0100               	movlb	0	; () banked
  5001  016AAC  6F90               	movwf	___ftadd@f2& (0+255),b
  5002  016AAE  0EC8               	movlw	200
  5003  016AB0  0100               	movlb	0	; () banked
  5004  016AB2  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  5005  016AB4  0E42               	movlw	66
  5006  016AB6  0100               	movlb	0	; () banked
  5007  016AB8  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  5008  016ABA  C1A7  F08D         	movff	_Ycurr_New,___ftadd@f1
  5009  016ABE  C1A8  F08E         	movff	_Ycurr_New+1,___ftadd@f1+1
  5010  016AC2  C1A9  F08F         	movff	_Ycurr_New+2,___ftadd@f1+2
  5011  016AC6  ECBE  F0B2         	call	___ftadd	;wreg free
  5012  016ACA  C08D  F099         	movff	?___ftadd,___ftge@ff1
  5013  016ACE  C08E  F09A         	movff	?___ftadd+1,___ftge@ff1+1
  5014  016AD2  C08F  F09B         	movff	?___ftadd+2,___ftge@ff1+2
  5015  016AD6  C0FD  F09C         	movff	_Ycurr_V_New,___ftge@ff2
  5016  016ADA  C0FE  F09D         	movff	_Ycurr_V_New+1,___ftge@ff2+1
  5017  016ADE  C0FF  F09E         	movff	_Ycurr_V_New+2,___ftge@ff2+2
  5018  016AE2  EC4B  F0CB         	call	___ftge	;wreg free
  5019  016AE6  0100               	movlb	0	; () banked
  5020  016AE8  B0D8               	btfsc	status,0,c
  5021  016AEA  D034               	goto	l22622
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;Power_Meter.c: 443: {
  5025                           ;Power_Meter.c: 444: Y_C_Gap = ((Ycurr_New - Ycurr_V_New + 1) + 65536);
  5026  016AEC  C1A7  F090         	movff	_Ycurr_New,___ftadd@f2
  5027  016AF0  C1A8  F091         	movff	_Ycurr_New+1,___ftadd@f2+1
  5028  016AF4  C1A9  F092         	movff	_Ycurr_New+2,___ftadd@f2+2
  5029  016AF8  C0FD  F083         	movff	_Ycurr_V_New,___ftneg@f1
  5030  016AFC  C0FE  F084         	movff	_Ycurr_V_New+1,___ftneg@f1+1
  5031  016B00  C0FF  F085         	movff	_Ycurr_V_New+2,___ftneg@f1+2
  5032  016B04  EC1D  F0D7         	call	___ftneg	;wreg free
  5033  016B08  C083  F08D         	movff	?___ftneg,___ftadd@f1
  5034  016B0C  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  5035  016B10  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  5036  016B14  ECBE  F0B2         	call	___ftadd	;wreg free
  5037  016B18  C08D  F0B4         	movff	?___ftadd,_Y_PF_Calc$8108
  5038  016B1C  C08E  F0B5         	movff	?___ftadd+1,_Y_PF_Calc$8108+1
  5039  016B20  C08F  F0B6         	movff	?___ftadd+2,_Y_PF_Calc$8108+2
  5040                           
  5041                           ;Power_Meter.c: 443: {
  5042                           ;Power_Meter.c: 444: Y_C_Gap = ((Ycurr_New - Ycurr_V_New + 1) + 65536);
  5043  016B24  C0B4  F08D         	movff	_Y_PF_Calc$8108,___ftadd@f1
  5044  016B28  C0B5  F08E         	movff	_Y_PF_Calc$8108+1,___ftadd@f1+1
  5045  016B2C  C0B6  F08F         	movff	_Y_PF_Calc$8108+2,___ftadd@f1+2
  5046  016B30  0E01               	movlw	1
  5047  016B32  0100               	movlb	0	; () banked
  5048  016B34  6F90               	movwf	___ftadd@f2& (0+255),b
  5049  016B36  0E80               	movlw	128
  5050  016B38  0100               	movlb	0	; () banked
  5051  016B3A  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  5052  016B3C  0E47               	movlw	71
  5053  016B3E  0100               	movlb	0	; () banked
  5054  016B40  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  5055  016B42  ECBE  F0B2         	call	___ftadd	;wreg free
  5056  016B46  C08D  F5B5         	movff	?___ftadd,_Y_C_Gap
  5057  016B4A  C08E  F5B6         	movff	?___ftadd+1,_Y_C_Gap+1
  5058  016B4E  C08F  F5B7         	movff	?___ftadd+2,_Y_C_Gap+2
  5059                           
  5060                           ;Power_Meter.c: 445: }
  5061  016B52  D038               	goto	l9264
  5062  016B54                     l22622:
  5063                           
  5064                           ;Power_Meter.c: 447: else
  5065                           ;Power_Meter.c: 448: {
  5066                           ;Power_Meter.c: 449: Y_C_Gap = (Ycurr_New - Ycurr_V_New);
  5067  016B54  C0FD  F083         	movff	_Ycurr_V_New,___ftneg@f1
  5068  016B58  C0FE  F084         	movff	_Ycurr_V_New+1,___ftneg@f1+1
  5069  016B5C  C0FF  F085         	movff	_Ycurr_V_New+2,___ftneg@f1+2
  5070  016B60  EC1D  F0D7         	call	___ftneg	;wreg free
  5071  016B64  C083  F08D         	movff	?___ftneg,___ftadd@f1
  5072  016B68  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  5073  016B6C  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  5074  016B70  C1A7  F090         	movff	_Ycurr_New,___ftadd@f2
  5075  016B74  C1A8  F091         	movff	_Ycurr_New+1,___ftadd@f2+1
  5076  016B78  C1A9  F092         	movff	_Ycurr_New+2,___ftadd@f2+2
  5077  016B7C  ECBE  F0B2         	call	___ftadd	;wreg free
  5078  016B80  C08D  F5B5         	movff	?___ftadd,_Y_C_Gap
  5079  016B84  C08E  F5B6         	movff	?___ftadd+1,_Y_C_Gap+1
  5080  016B88  C08F  F5B7         	movff	?___ftadd+2,_Y_C_Gap+2
  5081                           
  5082                           ;Power_Meter.c: 450: Y_V_Gap = (Ycurr_V_New - Ycurr_V_Old);
  5083  016B8C  C278  F083         	movff	_Ycurr_V_Old,___ftneg@f1
  5084  016B90  C279  F084         	movff	_Ycurr_V_Old+1,___ftneg@f1+1
  5085  016B94  C27A  F085         	movff	_Ycurr_V_Old+2,___ftneg@f1+2
  5086  016B98  EC1D  F0D7         	call	___ftneg	;wreg free
  5087  016B9C  C083  F08D         	movff	?___ftneg,___ftadd@f1
  5088  016BA0  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  5089  016BA4  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  5090  016BA8  C0FD  F090         	movff	_Ycurr_V_New,___ftadd@f2
  5091  016BAC  C0FE  F091         	movff	_Ycurr_V_New+1,___ftadd@f2+1
  5092  016BB0  C0FF  F092         	movff	_Ycurr_V_New+2,___ftadd@f2+2
  5093  016BB4  ECBE  F0B2         	call	___ftadd	;wreg free
  5094  016BB8                     L1:
  5095  016BB8  C08D  F5C1         	movff	?___ftadd,_Y_V_Gap
  5096  016BBC  C08E  F5C2         	movff	?___ftadd+1,_Y_V_Gap+1
  5097  016BC0  C08F  F5C3         	movff	?___ftadd+2,_Y_V_Gap+2
  5098  016BC4                     l9264:
  5099                           
  5100                           ;Power_Meter.c: 451: }
  5101                           ;Power_Meter.c: 453: Y_Gap_Ratio = (Y_C_Gap / Y_V_Gap);
  5102  016BC4  C5B5  F0A5         	movff	_Y_C_Gap,___ftdiv@f1
  5103  016BC8  C5B6  F0A6         	movff	_Y_C_Gap+1,___ftdiv@f1+1
  5104  016BCC  C5B7  F0A7         	movff	_Y_C_Gap+2,___ftdiv@f1+2
  5105  016BD0  C5C1  F0A8         	movff	_Y_V_Gap,___ftdiv@f2
  5106  016BD4  C5C2  F0A9         	movff	_Y_V_Gap+1,___ftdiv@f2+1
  5107  016BD8  C5C3  F0AA         	movff	_Y_V_Gap+2,___ftdiv@f2+2
  5108  016BDC  ECAF  F0C1         	call	___ftdiv	;wreg free
  5109  016BE0  C0A5  F11B         	movff	?___ftdiv,_Y_Gap_Ratio
  5110  016BE4  C0A6  F11C         	movff	?___ftdiv+1,_Y_Gap_Ratio+1
  5111  016BE8  C0A7  F11D         	movff	?___ftdiv+2,_Y_Gap_Ratio+2
  5112                           
  5113                           ;Power_Meter.c: 454: Y_Deg = Y_Gap_Ratio * 360;
  5114  016BEC  C11B  F074         	movff	_Y_Gap_Ratio,___ftmul@f1
  5115  016BF0  C11C  F075         	movff	_Y_Gap_Ratio+1,___ftmul@f1+1
  5116  016BF4  C11D  F076         	movff	_Y_Gap_Ratio+2,___ftmul@f1+2
  5117  016BF8  0E00               	movlw	0
  5118  016BFA  0100               	movlb	0	; () banked
  5119  016BFC  6F77               	movwf	___ftmul@f2& (0+255),b
  5120  016BFE  0EB4               	movlw	180
  5121  016C00  0100               	movlb	0	; () banked
  5122  016C02  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5123  016C04  0E43               	movlw	67
  5124  016C06  0100               	movlb	0	; () banked
  5125  016C08  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5126  016C0A  EC00  F0C1         	call	___ftmul	;wreg free
  5127  016C0E  C074  F672         	movff	?___ftmul,_Y_Deg
  5128  016C12  C075  F673         	movff	?___ftmul+1,_Y_Deg+1
  5129  016C16  C076  F674         	movff	?___ftmul+2,_Y_Deg+2
  5130                           
  5131                           ;Power_Meter.c: 456: YGR_Arr_1[4] = YGR_Arr_1[3];
  5132  016C1A  C472  F475         	movff	_YGR_Arr_1+9,_YGR_Arr_1+12
  5133  016C1E  C473  F476         	movff	_YGR_Arr_1+10,_YGR_Arr_1+13
  5134  016C22  C474  F477         	movff	_YGR_Arr_1+11,_YGR_Arr_1+14
  5135                           
  5136                           ;Power_Meter.c: 457: YGR_Arr_1[3] = YGR_Arr_1[2];
  5137  016C26  C46F  F472         	movff	_YGR_Arr_1+6,_YGR_Arr_1+9
  5138  016C2A  C470  F473         	movff	_YGR_Arr_1+7,_YGR_Arr_1+10
  5139  016C2E  C471  F474         	movff	_YGR_Arr_1+8,_YGR_Arr_1+11
  5140                           
  5141                           ;Power_Meter.c: 458: YGR_Arr_1[2] = YGR_Arr_1[1];
  5142  016C32  C46C  F46F         	movff	_YGR_Arr_1+3,_YGR_Arr_1+6
  5143  016C36  C46D  F470         	movff	_YGR_Arr_1+4,_YGR_Arr_1+7
  5144  016C3A  C46E  F471         	movff	_YGR_Arr_1+5,_YGR_Arr_1+8
  5145                           
  5146                           ;Power_Meter.c: 459: YGR_Arr_1[1] = YGR_Arr_1[0];
  5147  016C3E  C469  F46C         	movff	_YGR_Arr_1,_YGR_Arr_1+3
  5148  016C42  C46A  F46D         	movff	_YGR_Arr_1+1,_YGR_Arr_1+4
  5149  016C46  C46B  F46E         	movff	_YGR_Arr_1+2,_YGR_Arr_1+5
  5150                           
  5151                           ;Power_Meter.c: 460: YGR_Arr_1[0] = Y_Gap_Ratio;
  5152  016C4A  C11B  F469         	movff	_Y_Gap_Ratio,_YGR_Arr_1
  5153  016C4E  C11C  F46A         	movff	_Y_Gap_Ratio+1,_YGR_Arr_1+1
  5154  016C52  C11D  F46B         	movff	_Y_Gap_Ratio+2,_YGR_Arr_1+2
  5155  016C56  0012               	return		;funcret
  5156  016C58                     __end_of_Y_PF_Calc:
  5157                           	opt stack 0
  5158                           tblptru	equ	0xFF8
  5159                           tblptrh	equ	0xFF7
  5160                           tblptrl	equ	0xFF6
  5161                           tablat	equ	0xFF5
  5162                           intcon	equ	0xFF2
  5163                           postinc0	equ	0xFEE
  5164                           wreg	equ	0xFE8
  5165                           postdec1	equ	0xFE5
  5166                           fsr1h	equ	0xFE2
  5167                           fsr1l	equ	0xFE1
  5168                           status	equ	0xFD8
  5169                           
  5170 ;; *************** function _Y_PF_Avg *****************
  5171 ;; Defined at:
  5172 ;;		line 464 in file "Power_Meter.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;		None
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;		None
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  1    wreg      void 
  5179 ;; Registers used:
  5180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Locals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Totals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
  5190 ;;Total ram usage:       84 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    8
  5193 ;; This function calls:
  5194 ;;		___ftadd
  5195 ;;		___ftdiv
  5196 ;;		___ftge
  5197 ;;		___ftmul
  5198 ;;		_cos
  5199 ;; This function is called by:
  5200 ;;		_main
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           	psect	text4
  5205  011A24                     __ptext4:
  5206                           	opt stack 0
  5207  011A24                     _Y_PF_Avg:
  5208                           	opt stack 22
  5209                           
  5210                           ;Power_Meter.c: 466: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5211                           
  5212                           ;incstack = 0
  5213  011A24  C472  F090         	movff	_YGR_Arr_1+9,___ftadd@f2
  5214  011A28  C473  F091         	movff	_YGR_Arr_1+10,___ftadd@f2+1
  5215  011A2C  C474  F092         	movff	_YGR_Arr_1+11,___ftadd@f2+2
  5216  011A30  C475  F08D         	movff	_YGR_Arr_1+12,___ftadd@f1
  5217  011A34  C476  F08E         	movff	_YGR_Arr_1+13,___ftadd@f1+1
  5218  011A38  C477  F08F         	movff	_YGR_Arr_1+14,___ftadd@f1+2
  5219  011A3C  ECBE  F0B2         	call	___ftadd	;wreg free
  5220  011A40  C08D  F6C3         	movff	?___ftadd,_Y_PF_Avg$8109
  5221  011A44  C08E  F6C4         	movff	?___ftadd+1,_Y_PF_Avg$8109+1
  5222  011A48  C08F  F6C5         	movff	?___ftadd+2,_Y_PF_Avg$8109+2
  5223                           
  5224                           ;Power_Meter.c: 466: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5225  011A4C  C46F  F090         	movff	_YGR_Arr_1+6,___ftadd@f2
  5226  011A50  C470  F091         	movff	_YGR_Arr_1+7,___ftadd@f2+1
  5227  011A54  C471  F092         	movff	_YGR_Arr_1+8,___ftadd@f2+2
  5228  011A58  C6C3  F08D         	movff	_Y_PF_Avg$8109,___ftadd@f1
  5229  011A5C  C6C4  F08E         	movff	_Y_PF_Avg$8109+1,___ftadd@f1+1
  5230  011A60  C6C5  F08F         	movff	_Y_PF_Avg$8109+2,___ftadd@f1+2
  5231  011A64  ECBE  F0B2         	call	___ftadd	;wreg free
  5232  011A68  C08D  F6C6         	movff	?___ftadd,_Y_PF_Avg$8110
  5233  011A6C  C08E  F6C7         	movff	?___ftadd+1,_Y_PF_Avg$8110+1
  5234  011A70  C08F  F6C8         	movff	?___ftadd+2,_Y_PF_Avg$8110+2
  5235                           
  5236                           ;Power_Meter.c: 466: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5237  011A74  C46C  F090         	movff	_YGR_Arr_1+3,___ftadd@f2
  5238  011A78  C46D  F091         	movff	_YGR_Arr_1+4,___ftadd@f2+1
  5239  011A7C  C46E  F092         	movff	_YGR_Arr_1+5,___ftadd@f2+2
  5240  011A80  C6C6  F08D         	movff	_Y_PF_Avg$8110,___ftadd@f1
  5241  011A84  C6C7  F08E         	movff	_Y_PF_Avg$8110+1,___ftadd@f1+1
  5242  011A88  C6C8  F08F         	movff	_Y_PF_Avg$8110+2,___ftadd@f1+2
  5243  011A8C  ECBE  F0B2         	call	___ftadd	;wreg free
  5244  011A90  C08D  F6C9         	movff	?___ftadd,_Y_PF_Avg$8111
  5245  011A94  C08E  F6CA         	movff	?___ftadd+1,_Y_PF_Avg$8111+1
  5246  011A98  C08F  F6CB         	movff	?___ftadd+2,_Y_PF_Avg$8111+2
  5247                           
  5248                           ;Power_Meter.c: 466: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5249  011A9C  C469  F090         	movff	_YGR_Arr_1,___ftadd@f2
  5250  011AA0  C46A  F091         	movff	_YGR_Arr_1+1,___ftadd@f2+1
  5251  011AA4  C46B  F092         	movff	_YGR_Arr_1+2,___ftadd@f2+2
  5252  011AA8  C6C9  F08D         	movff	_Y_PF_Avg$8111,___ftadd@f1
  5253  011AAC  C6CA  F08E         	movff	_Y_PF_Avg$8111+1,___ftadd@f1+1
  5254  011AB0  C6CB  F08F         	movff	_Y_PF_Avg$8111+2,___ftadd@f1+2
  5255  011AB4  ECBE  F0B2         	call	___ftadd	;wreg free
  5256  011AB8  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  5257  011ABC  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  5258  011AC0  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  5259  011AC4  0E00               	movlw	0
  5260  011AC6  0100               	movlb	0	; () banked
  5261  011AC8  6FA8               	movwf	___ftdiv@f2& (0+255),b
  5262  011ACA  0EA0               	movlw	160
  5263  011ACC  0100               	movlb	0	; () banked
  5264  011ACE  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  5265  011AD0  0E40               	movlw	64
  5266  011AD2  0100               	movlb	0	; () banked
  5267  011AD4  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  5268  011AD6  ECAF  F0C1         	call	___ftdiv	;wreg free
  5269  011ADA  C0A5  F26C         	movff	?___ftdiv,_YGR_Avg_1
  5270  011ADE  C0A6  F26D         	movff	?___ftdiv+1,_YGR_Avg_1+1
  5271  011AE2  C0A7  F26E         	movff	?___ftdiv+2,_YGR_Avg_1+2
  5272                           
  5273                           ;Power_Meter.c: 469: YGR_Arr[29] = YGR_Arr[28];
  5274  011AE6  C3AE  F3B1         	movff	_YGR_Arr+84,_YGR_Arr+87
  5275  011AEA  C3AF  F3B2         	movff	_YGR_Arr+85,_YGR_Arr+88
  5276  011AEE  C3B0  F3B3         	movff	_YGR_Arr+86,_YGR_Arr+89
  5277                           
  5278                           ;Power_Meter.c: 470: YGR_Arr[28] = YGR_Arr[27];
  5279  011AF2  C3AB  F3AE         	movff	_YGR_Arr+81,_YGR_Arr+84
  5280  011AF6  C3AC  F3AF         	movff	_YGR_Arr+82,_YGR_Arr+85
  5281  011AFA  C3AD  F3B0         	movff	_YGR_Arr+83,_YGR_Arr+86
  5282                           
  5283                           ;Power_Meter.c: 471: YGR_Arr[27] = YGR_Arr[26];
  5284  011AFE  C3A8  F3AB         	movff	_YGR_Arr+78,_YGR_Arr+81
  5285  011B02  C3A9  F3AC         	movff	_YGR_Arr+79,_YGR_Arr+82
  5286  011B06  C3AA  F3AD         	movff	_YGR_Arr+80,_YGR_Arr+83
  5287                           
  5288                           ;Power_Meter.c: 472: YGR_Arr[26] = YGR_Arr[25];
  5289  011B0A  C3A5  F3A8         	movff	_YGR_Arr+75,_YGR_Arr+78
  5290  011B0E  C3A6  F3A9         	movff	_YGR_Arr+76,_YGR_Arr+79
  5291  011B12  C3A7  F3AA         	movff	_YGR_Arr+77,_YGR_Arr+80
  5292                           
  5293                           ;Power_Meter.c: 473: YGR_Arr[25] = YGR_Arr[24];
  5294  011B16  C3A2  F3A5         	movff	_YGR_Arr+72,_YGR_Arr+75
  5295  011B1A  C3A3  F3A6         	movff	_YGR_Arr+73,_YGR_Arr+76
  5296  011B1E  C3A4  F3A7         	movff	_YGR_Arr+74,_YGR_Arr+77
  5297                           
  5298                           ;Power_Meter.c: 474: YGR_Arr[24] = YGR_Arr[23];
  5299  011B22  C39F  F3A2         	movff	_YGR_Arr+69,_YGR_Arr+72
  5300  011B26  C3A0  F3A3         	movff	_YGR_Arr+70,_YGR_Arr+73
  5301  011B2A  C3A1  F3A4         	movff	_YGR_Arr+71,_YGR_Arr+74
  5302                           
  5303                           ;Power_Meter.c: 475: YGR_Arr[23] = YGR_Arr[22];
  5304  011B2E  C39C  F39F         	movff	_YGR_Arr+66,_YGR_Arr+69
  5305  011B32  C39D  F3A0         	movff	_YGR_Arr+67,_YGR_Arr+70
  5306  011B36  C39E  F3A1         	movff	_YGR_Arr+68,_YGR_Arr+71
  5307                           
  5308                           ;Power_Meter.c: 476: YGR_Arr[22] = YGR_Arr[21];
  5309  011B3A  C399  F39C         	movff	_YGR_Arr+63,_YGR_Arr+66
  5310  011B3E  C39A  F39D         	movff	_YGR_Arr+64,_YGR_Arr+67
  5311  011B42  C39B  F39E         	movff	_YGR_Arr+65,_YGR_Arr+68
  5312                           
  5313                           ;Power_Meter.c: 477: YGR_Arr[21] = YGR_Arr[20];
  5314  011B46  C396  F399         	movff	_YGR_Arr+60,_YGR_Arr+63
  5315  011B4A  C397  F39A         	movff	_YGR_Arr+61,_YGR_Arr+64
  5316  011B4E  C398  F39B         	movff	_YGR_Arr+62,_YGR_Arr+65
  5317                           
  5318                           ;Power_Meter.c: 478: YGR_Arr[20] = YGR_Arr[19];
  5319  011B52  C393  F396         	movff	_YGR_Arr+57,_YGR_Arr+60
  5320  011B56  C394  F397         	movff	_YGR_Arr+58,_YGR_Arr+61
  5321  011B5A  C395  F398         	movff	_YGR_Arr+59,_YGR_Arr+62
  5322                           
  5323                           ;Power_Meter.c: 479: YGR_Arr[19] = YGR_Arr[18];
  5324  011B5E  C390  F393         	movff	_YGR_Arr+54,_YGR_Arr+57
  5325  011B62  C391  F394         	movff	_YGR_Arr+55,_YGR_Arr+58
  5326  011B66  C392  F395         	movff	_YGR_Arr+56,_YGR_Arr+59
  5327                           
  5328                           ;Power_Meter.c: 480: YGR_Arr[18] = YGR_Arr[17];
  5329  011B6A  C38D  F390         	movff	_YGR_Arr+51,_YGR_Arr+54
  5330  011B6E  C38E  F391         	movff	_YGR_Arr+52,_YGR_Arr+55
  5331  011B72  C38F  F392         	movff	_YGR_Arr+53,_YGR_Arr+56
  5332                           
  5333                           ;Power_Meter.c: 481: YGR_Arr[17] = YGR_Arr[16];
  5334  011B76  C38A  F38D         	movff	_YGR_Arr+48,_YGR_Arr+51
  5335  011B7A  C38B  F38E         	movff	_YGR_Arr+49,_YGR_Arr+52
  5336  011B7E  C38C  F38F         	movff	_YGR_Arr+50,_YGR_Arr+53
  5337                           
  5338                           ;Power_Meter.c: 482: YGR_Arr[16] = YGR_Arr[15];
  5339  011B82  C387  F38A         	movff	_YGR_Arr+45,_YGR_Arr+48
  5340  011B86  C388  F38B         	movff	_YGR_Arr+46,_YGR_Arr+49
  5341  011B8A  C389  F38C         	movff	_YGR_Arr+47,_YGR_Arr+50
  5342                           
  5343                           ;Power_Meter.c: 483: YGR_Arr[15] = YGR_Arr[14];
  5344  011B8E  C384  F387         	movff	_YGR_Arr+42,_YGR_Arr+45
  5345  011B92  C385  F388         	movff	_YGR_Arr+43,_YGR_Arr+46
  5346  011B96  C386  F389         	movff	_YGR_Arr+44,_YGR_Arr+47
  5347                           
  5348                           ;Power_Meter.c: 484: YGR_Arr[14] = YGR_Arr[13];
  5349  011B9A  C381  F384         	movff	_YGR_Arr+39,_YGR_Arr+42
  5350  011B9E  C382  F385         	movff	_YGR_Arr+40,_YGR_Arr+43
  5351  011BA2  C383  F386         	movff	_YGR_Arr+41,_YGR_Arr+44
  5352                           
  5353                           ;Power_Meter.c: 485: YGR_Arr[13] = YGR_Arr[12];
  5354  011BA6  C37E  F381         	movff	_YGR_Arr+36,_YGR_Arr+39
  5355  011BAA  C37F  F382         	movff	_YGR_Arr+37,_YGR_Arr+40
  5356  011BAE  C380  F383         	movff	_YGR_Arr+38,_YGR_Arr+41
  5357                           
  5358                           ;Power_Meter.c: 486: YGR_Arr[12] = YGR_Arr[11];
  5359  011BB2  C37B  F37E         	movff	_YGR_Arr+33,_YGR_Arr+36
  5360  011BB6  C37C  F37F         	movff	_YGR_Arr+34,_YGR_Arr+37
  5361  011BBA  C37D  F380         	movff	_YGR_Arr+35,_YGR_Arr+38
  5362                           
  5363                           ;Power_Meter.c: 487: YGR_Arr[11] = YGR_Arr[10];
  5364  011BBE  C378  F37B         	movff	_YGR_Arr+30,_YGR_Arr+33
  5365  011BC2  C379  F37C         	movff	_YGR_Arr+31,_YGR_Arr+34
  5366  011BC6  C37A  F37D         	movff	_YGR_Arr+32,_YGR_Arr+35
  5367                           
  5368                           ;Power_Meter.c: 488: YGR_Arr[10] = YGR_Arr[9];
  5369  011BCA  C375  F378         	movff	_YGR_Arr+27,_YGR_Arr+30
  5370  011BCE  C376  F379         	movff	_YGR_Arr+28,_YGR_Arr+31
  5371  011BD2  C377  F37A         	movff	_YGR_Arr+29,_YGR_Arr+32
  5372                           
  5373                           ;Power_Meter.c: 489: YGR_Arr[9] = YGR_Arr[8];
  5374  011BD6  C372  F375         	movff	_YGR_Arr+24,_YGR_Arr+27
  5375  011BDA  C373  F376         	movff	_YGR_Arr+25,_YGR_Arr+28
  5376  011BDE  C374  F377         	movff	_YGR_Arr+26,_YGR_Arr+29
  5377                           
  5378                           ;Power_Meter.c: 490: YGR_Arr[8] = YGR_Arr[7];
  5379  011BE2  C36F  F372         	movff	_YGR_Arr+21,_YGR_Arr+24
  5380  011BE6  C370  F373         	movff	_YGR_Arr+22,_YGR_Arr+25
  5381  011BEA  C371  F374         	movff	_YGR_Arr+23,_YGR_Arr+26
  5382                           
  5383                           ;Power_Meter.c: 491: YGR_Arr[7] = YGR_Arr[6];
  5384  011BEE  C36C  F36F         	movff	_YGR_Arr+18,_YGR_Arr+21
  5385  011BF2  C36D  F370         	movff	_YGR_Arr+19,_YGR_Arr+22
  5386  011BF6  C36E  F371         	movff	_YGR_Arr+20,_YGR_Arr+23
  5387                           
  5388                           ;Power_Meter.c: 492: YGR_Arr[6] = YGR_Arr[5];
  5389  011BFA  C369  F36C         	movff	_YGR_Arr+15,_YGR_Arr+18
  5390  011BFE  C36A  F36D         	movff	_YGR_Arr+16,_YGR_Arr+19
  5391  011C02  C36B  F36E         	movff	_YGR_Arr+17,_YGR_Arr+20
  5392                           
  5393                           ;Power_Meter.c: 493: YGR_Arr[5] = YGR_Arr[4];
  5394  011C06  C366  F369         	movff	_YGR_Arr+12,_YGR_Arr+15
  5395  011C0A  C367  F36A         	movff	_YGR_Arr+13,_YGR_Arr+16
  5396  011C0E  C368  F36B         	movff	_YGR_Arr+14,_YGR_Arr+17
  5397                           
  5398                           ;Power_Meter.c: 494: YGR_Arr[4] = YGR_Arr[3];
  5399  011C12  C363  F366         	movff	_YGR_Arr+9,_YGR_Arr+12
  5400  011C16  C364  F367         	movff	_YGR_Arr+10,_YGR_Arr+13
  5401  011C1A  C365  F368         	movff	_YGR_Arr+11,_YGR_Arr+14
  5402                           
  5403                           ;Power_Meter.c: 495: YGR_Arr[3] = YGR_Arr[2];
  5404  011C1E  C360  F363         	movff	_YGR_Arr+6,_YGR_Arr+9
  5405  011C22  C361  F364         	movff	_YGR_Arr+7,_YGR_Arr+10
  5406  011C26  C362  F365         	movff	_YGR_Arr+8,_YGR_Arr+11
  5407                           
  5408                           ;Power_Meter.c: 496: YGR_Arr[2] = YGR_Arr[1];
  5409  011C2A  C35D  F360         	movff	_YGR_Arr+3,_YGR_Arr+6
  5410  011C2E  C35E  F361         	movff	_YGR_Arr+4,_YGR_Arr+7
  5411  011C32  C35F  F362         	movff	_YGR_Arr+5,_YGR_Arr+8
  5412                           
  5413                           ;Power_Meter.c: 497: YGR_Arr[1] = YGR_Arr[0];
  5414  011C36  C35A  F35D         	movff	_YGR_Arr,_YGR_Arr+3
  5415  011C3A  C35B  F35E         	movff	_YGR_Arr+1,_YGR_Arr+4
  5416  011C3E  C35C  F35F         	movff	_YGR_Arr+2,_YGR_Arr+5
  5417                           
  5418                           ;Power_Meter.c: 500: if( (YGR_Avg_1 > (Y_Gap_Ratio * 0.8)) && (YGR_Avg_1 < (Y_Gap_Ratio 
      +                          * 1.2)) )
  5419  011C42  0ECD               	movlw	205
  5420  011C44  0100               	movlb	0	; () banked
  5421  011C46  6F77               	movwf	___ftmul@f2& (0+255),b
  5422  011C48  0E4C               	movlw	76
  5423  011C4A  0100               	movlb	0	; () banked
  5424  011C4C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5425  011C4E  0E3F               	movlw	63
  5426  011C50  0100               	movlb	0	; () banked
  5427  011C52  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5428  011C54  C11B  F074         	movff	_Y_Gap_Ratio,___ftmul@f1
  5429  011C58  C11C  F075         	movff	_Y_Gap_Ratio+1,___ftmul@f1+1
  5430  011C5C  C11D  F076         	movff	_Y_Gap_Ratio+2,___ftmul@f1+2
  5431  011C60  EC00  F0C1         	call	___ftmul	;wreg free
  5432  011C64  C074  F099         	movff	?___ftmul,___ftge@ff1
  5433  011C68  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
  5434  011C6C  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
  5435  011C70  C26C  F09C         	movff	_YGR_Avg_1,___ftge@ff2
  5436  011C74  C26D  F09D         	movff	_YGR_Avg_1+1,___ftge@ff2+1
  5437  011C78  C26E  F09E         	movff	_YGR_Avg_1+2,___ftge@ff2+2
  5438  011C7C  EC4B  F0CB         	call	___ftge	;wreg free
  5439  011C80  0100               	movlb	0	; () banked
  5440  011C82  B0D8               	btfsc	status,0,c
  5441  011C84  D028               	goto	l22698
  5442                           
  5443                           ; BSR set to: 0
  5444  011C86  C26C  F099         	movff	_YGR_Avg_1,___ftge@ff1
  5445  011C8A  C26D  F09A         	movff	_YGR_Avg_1+1,___ftge@ff1+1
  5446  011C8E  C26E  F09B         	movff	_YGR_Avg_1+2,___ftge@ff1+2
  5447  011C92  0E9A               	movlw	154
  5448  011C94  0100               	movlb	0	; () banked
  5449  011C96  6F77               	movwf	___ftmul@f2& (0+255),b
  5450  011C98  0E99               	movlw	153
  5451  011C9A  0100               	movlb	0	; () banked
  5452  011C9C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5453  011C9E  0E3F               	movlw	63
  5454  011CA0  0100               	movlb	0	; () banked
  5455  011CA2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5456  011CA4  C11B  F074         	movff	_Y_Gap_Ratio,___ftmul@f1
  5457  011CA8  C11C  F075         	movff	_Y_Gap_Ratio+1,___ftmul@f1+1
  5458  011CAC  C11D  F076         	movff	_Y_Gap_Ratio+2,___ftmul@f1+2
  5459  011CB0  EC00  F0C1         	call	___ftmul	;wreg free
  5460  011CB4  C074  F09C         	movff	?___ftmul,___ftge@ff2
  5461  011CB8  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
  5462  011CBC  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
  5463  011CC0  EC4B  F0CB         	call	___ftge	;wreg free
  5464  011CC4  0100               	movlb	0	; () banked
  5465  011CC6  B0D8               	btfsc	status,0,c
  5466  011CC8  D006               	goto	l22698
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;Power_Meter.c: 501: {
  5470                           ;Power_Meter.c: 502: YGR_Arr[0] = Y_Gap_Ratio;
  5471  011CCA  C11B  F35A         	movff	_Y_Gap_Ratio,_YGR_Arr
  5472  011CCE  C11C  F35B         	movff	_Y_Gap_Ratio+1,_YGR_Arr+1
  5473  011CD2  C11D  F35C         	movff	_Y_Gap_Ratio+2,_YGR_Arr+2
  5474  011CD6                     l22698:
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;Power_Meter.c: 503: }
  5478                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5479                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5480                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5481                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5482  011CD6  C3AE  F090         	movff	_YGR_Arr+84,___ftadd@f2
  5483  011CDA  C3AF  F091         	movff	_YGR_Arr+85,___ftadd@f2+1
  5484  011CDE  C3B0  F092         	movff	_YGR_Arr+86,___ftadd@f2+2
  5485  011CE2  C3B1  F08D         	movff	_YGR_Arr+87,___ftadd@f1
  5486  011CE6  C3B2  F08E         	movff	_YGR_Arr+88,___ftadd@f1+1
  5487  011CEA  C3B3  F08F         	movff	_YGR_Arr+89,___ftadd@f1+2
  5488  011CEE  ECBE  F0B2         	call	___ftadd	;wreg free
  5489  011CF2  C08D  F6C3         	movff	?___ftadd,_Y_PF_Avg$8109
  5490  011CF6  C08E  F6C4         	movff	?___ftadd+1,_Y_PF_Avg$8109+1
  5491  011CFA  C08F  F6C5         	movff	?___ftadd+2,_Y_PF_Avg$8109+2
  5492                           
  5493                           ;Power_Meter.c: 503: }
  5494                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5495                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5496                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5497                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5498  011CFE  C3AB  F090         	movff	_YGR_Arr+81,___ftadd@f2
  5499  011D02  C3AC  F091         	movff	_YGR_Arr+82,___ftadd@f2+1
  5500  011D06  C3AD  F092         	movff	_YGR_Arr+83,___ftadd@f2+2
  5501  011D0A  C6C3  F08D         	movff	_Y_PF_Avg$8109,___ftadd@f1
  5502  011D0E  C6C4  F08E         	movff	_Y_PF_Avg$8109+1,___ftadd@f1+1
  5503  011D12  C6C5  F08F         	movff	_Y_PF_Avg$8109+2,___ftadd@f1+2
  5504  011D16  ECBE  F0B2         	call	___ftadd	;wreg free
  5505  011D1A  C08D  F6C6         	movff	?___ftadd,_Y_PF_Avg$8110
  5506  011D1E  C08E  F6C7         	movff	?___ftadd+1,_Y_PF_Avg$8110+1
  5507  011D22  C08F  F6C8         	movff	?___ftadd+2,_Y_PF_Avg$8110+2
  5508                           
  5509                           ;Power_Meter.c: 503: }
  5510                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5511                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5512                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5513                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5514  011D26  C3A8  F090         	movff	_YGR_Arr+78,___ftadd@f2
  5515  011D2A  C3A9  F091         	movff	_YGR_Arr+79,___ftadd@f2+1
  5516  011D2E  C3AA  F092         	movff	_YGR_Arr+80,___ftadd@f2+2
  5517  011D32  C6C6  F08D         	movff	_Y_PF_Avg$8110,___ftadd@f1
  5518  011D36  C6C7  F08E         	movff	_Y_PF_Avg$8110+1,___ftadd@f1+1
  5519  011D3A  C6C8  F08F         	movff	_Y_PF_Avg$8110+2,___ftadd@f1+2
  5520  011D3E  ECBE  F0B2         	call	___ftadd	;wreg free
  5521  011D42  C08D  F6C9         	movff	?___ftadd,_Y_PF_Avg$8111
  5522  011D46  C08E  F6CA         	movff	?___ftadd+1,_Y_PF_Avg$8111+1
  5523  011D4A  C08F  F6CB         	movff	?___ftadd+2,_Y_PF_Avg$8111+2
  5524                           
  5525                           ;Power_Meter.c: 503: }
  5526                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5527                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5528                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5529                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5530  011D4E  C3A5  F090         	movff	_YGR_Arr+75,___ftadd@f2
  5531  011D52  C3A6  F091         	movff	_YGR_Arr+76,___ftadd@f2+1
  5532  011D56  C3A7  F092         	movff	_YGR_Arr+77,___ftadd@f2+2
  5533  011D5A  C6C9  F08D         	movff	_Y_PF_Avg$8111,___ftadd@f1
  5534  011D5E  C6CA  F08E         	movff	_Y_PF_Avg$8111+1,___ftadd@f1+1
  5535  011D62  C6CB  F08F         	movff	_Y_PF_Avg$8111+2,___ftadd@f1+2
  5536  011D66  ECBE  F0B2         	call	___ftadd	;wreg free
  5537  011D6A  C08D  F678         	movff	?___ftadd,_Y_PF_Avg$8112
  5538  011D6E  C08E  F679         	movff	?___ftadd+1,_Y_PF_Avg$8112+1
  5539  011D72  C08F  F67A         	movff	?___ftadd+2,_Y_PF_Avg$8112+2
  5540                           
  5541                           ;Power_Meter.c: 503: }
  5542                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5543                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5544                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5545                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5546  011D76  C3A2  F090         	movff	_YGR_Arr+72,___ftadd@f2
  5547  011D7A  C3A3  F091         	movff	_YGR_Arr+73,___ftadd@f2+1
  5548  011D7E  C3A4  F092         	movff	_YGR_Arr+74,___ftadd@f2+2
  5549  011D82  C678  F08D         	movff	_Y_PF_Avg$8112,___ftadd@f1
  5550  011D86  C679  F08E         	movff	_Y_PF_Avg$8112+1,___ftadd@f1+1
  5551  011D8A  C67A  F08F         	movff	_Y_PF_Avg$8112+2,___ftadd@f1+2
  5552  011D8E  ECBE  F0B2         	call	___ftadd	;wreg free
  5553  011D92  C08D  F67B         	movff	?___ftadd,_Y_PF_Avg$8113
  5554  011D96  C08E  F67C         	movff	?___ftadd+1,_Y_PF_Avg$8113+1
  5555  011D9A  C08F  F67D         	movff	?___ftadd+2,_Y_PF_Avg$8113+2
  5556                           
  5557                           ;Power_Meter.c: 503: }
  5558                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5559                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5560                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5561                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5562  011D9E  C39F  F090         	movff	_YGR_Arr+69,___ftadd@f2
  5563  011DA2  C3A0  F091         	movff	_YGR_Arr+70,___ftadd@f2+1
  5564  011DA6  C3A1  F092         	movff	_YGR_Arr+71,___ftadd@f2+2
  5565  011DAA  C67B  F08D         	movff	_Y_PF_Avg$8113,___ftadd@f1
  5566  011DAE  C67C  F08E         	movff	_Y_PF_Avg$8113+1,___ftadd@f1+1
  5567  011DB2  C67D  F08F         	movff	_Y_PF_Avg$8113+2,___ftadd@f1+2
  5568  011DB6  ECBE  F0B2         	call	___ftadd	;wreg free
  5569  011DBA  C08D  F67E         	movff	?___ftadd,_Y_PF_Avg$8114
  5570  011DBE  C08E  F67F         	movff	?___ftadd+1,_Y_PF_Avg$8114+1
  5571  011DC2  C08F  F680         	movff	?___ftadd+2,_Y_PF_Avg$8114+2
  5572                           
  5573                           ;Power_Meter.c: 503: }
  5574                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5575                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5576                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5577                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5578  011DC6  C39C  F090         	movff	_YGR_Arr+66,___ftadd@f2
  5579  011DCA  C39D  F091         	movff	_YGR_Arr+67,___ftadd@f2+1
  5580  011DCE  C39E  F092         	movff	_YGR_Arr+68,___ftadd@f2+2
  5581  011DD2  C67E  F08D         	movff	_Y_PF_Avg$8114,___ftadd@f1
  5582  011DD6  C67F  F08E         	movff	_Y_PF_Avg$8114+1,___ftadd@f1+1
  5583  011DDA  C680  F08F         	movff	_Y_PF_Avg$8114+2,___ftadd@f1+2
  5584  011DDE  ECBE  F0B2         	call	___ftadd	;wreg free
  5585  011DE2  C08D  F681         	movff	?___ftadd,_Y_PF_Avg$8115
  5586  011DE6  C08E  F682         	movff	?___ftadd+1,_Y_PF_Avg$8115+1
  5587  011DEA  C08F  F683         	movff	?___ftadd+2,_Y_PF_Avg$8115+2
  5588                           
  5589                           ;Power_Meter.c: 503: }
  5590                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5591                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5592                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5593                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5594  011DEE  C399  F090         	movff	_YGR_Arr+63,___ftadd@f2
  5595  011DF2  C39A  F091         	movff	_YGR_Arr+64,___ftadd@f2+1
  5596  011DF6  C39B  F092         	movff	_YGR_Arr+65,___ftadd@f2+2
  5597  011DFA  C681  F08D         	movff	_Y_PF_Avg$8115,___ftadd@f1
  5598  011DFE  C682  F08E         	movff	_Y_PF_Avg$8115+1,___ftadd@f1+1
  5599  011E02  C683  F08F         	movff	_Y_PF_Avg$8115+2,___ftadd@f1+2
  5600  011E06  ECBE  F0B2         	call	___ftadd	;wreg free
  5601  011E0A  C08D  F684         	movff	?___ftadd,_Y_PF_Avg$8116
  5602  011E0E  C08E  F685         	movff	?___ftadd+1,_Y_PF_Avg$8116+1
  5603  011E12  C08F  F686         	movff	?___ftadd+2,_Y_PF_Avg$8116+2
  5604                           
  5605                           ;Power_Meter.c: 503: }
  5606                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5607                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5608                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5609                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5610  011E16  C396  F090         	movff	_YGR_Arr+60,___ftadd@f2
  5611  011E1A  C397  F091         	movff	_YGR_Arr+61,___ftadd@f2+1
  5612  011E1E  C398  F092         	movff	_YGR_Arr+62,___ftadd@f2+2
  5613  011E22  C684  F08D         	movff	_Y_PF_Avg$8116,___ftadd@f1
  5614  011E26  C685  F08E         	movff	_Y_PF_Avg$8116+1,___ftadd@f1+1
  5615  011E2A  C686  F08F         	movff	_Y_PF_Avg$8116+2,___ftadd@f1+2
  5616  011E2E  ECBE  F0B2         	call	___ftadd	;wreg free
  5617  011E32  C08D  F687         	movff	?___ftadd,_Y_PF_Avg$8117
  5618  011E36  C08E  F688         	movff	?___ftadd+1,_Y_PF_Avg$8117+1
  5619  011E3A  C08F  F689         	movff	?___ftadd+2,_Y_PF_Avg$8117+2
  5620                           
  5621                           ;Power_Meter.c: 503: }
  5622                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5623                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5624                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5625                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5626  011E3E  C393  F090         	movff	_YGR_Arr+57,___ftadd@f2
  5627  011E42  C394  F091         	movff	_YGR_Arr+58,___ftadd@f2+1
  5628  011E46  C395  F092         	movff	_YGR_Arr+59,___ftadd@f2+2
  5629  011E4A  C687  F08D         	movff	_Y_PF_Avg$8117,___ftadd@f1
  5630  011E4E  C688  F08E         	movff	_Y_PF_Avg$8117+1,___ftadd@f1+1
  5631  011E52  C689  F08F         	movff	_Y_PF_Avg$8117+2,___ftadd@f1+2
  5632  011E56  ECBE  F0B2         	call	___ftadd	;wreg free
  5633  011E5A  C08D  F68A         	movff	?___ftadd,_Y_PF_Avg$8118
  5634  011E5E  C08E  F68B         	movff	?___ftadd+1,_Y_PF_Avg$8118+1
  5635  011E62  C08F  F68C         	movff	?___ftadd+2,_Y_PF_Avg$8118+2
  5636                           
  5637                           ;Power_Meter.c: 503: }
  5638                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5639                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5640                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5641                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5642  011E66  C390  F090         	movff	_YGR_Arr+54,___ftadd@f2
  5643  011E6A  C391  F091         	movff	_YGR_Arr+55,___ftadd@f2+1
  5644  011E6E  C392  F092         	movff	_YGR_Arr+56,___ftadd@f2+2
  5645  011E72  C68A  F08D         	movff	_Y_PF_Avg$8118,___ftadd@f1
  5646  011E76  C68B  F08E         	movff	_Y_PF_Avg$8118+1,___ftadd@f1+1
  5647  011E7A  C68C  F08F         	movff	_Y_PF_Avg$8118+2,___ftadd@f1+2
  5648  011E7E  ECBE  F0B2         	call	___ftadd	;wreg free
  5649  011E82  C08D  F68D         	movff	?___ftadd,_Y_PF_Avg$8119
  5650  011E86  C08E  F68E         	movff	?___ftadd+1,_Y_PF_Avg$8119+1
  5651  011E8A  C08F  F68F         	movff	?___ftadd+2,_Y_PF_Avg$8119+2
  5652                           
  5653                           ;Power_Meter.c: 503: }
  5654                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5655                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5656                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5657                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5658  011E8E  C38D  F090         	movff	_YGR_Arr+51,___ftadd@f2
  5659  011E92  C38E  F091         	movff	_YGR_Arr+52,___ftadd@f2+1
  5660  011E96  C38F  F092         	movff	_YGR_Arr+53,___ftadd@f2+2
  5661  011E9A  C68D  F08D         	movff	_Y_PF_Avg$8119,___ftadd@f1
  5662  011E9E  C68E  F08E         	movff	_Y_PF_Avg$8119+1,___ftadd@f1+1
  5663  011EA2  C68F  F08F         	movff	_Y_PF_Avg$8119+2,___ftadd@f1+2
  5664  011EA6  ECBE  F0B2         	call	___ftadd	;wreg free
  5665  011EAA  C08D  F690         	movff	?___ftadd,_Y_PF_Avg$8120
  5666  011EAE  C08E  F691         	movff	?___ftadd+1,_Y_PF_Avg$8120+1
  5667  011EB2  C08F  F692         	movff	?___ftadd+2,_Y_PF_Avg$8120+2
  5668                           
  5669                           ;Power_Meter.c: 503: }
  5670                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5671                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5672                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5673                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5674  011EB6  C38A  F090         	movff	_YGR_Arr+48,___ftadd@f2
  5675  011EBA  C38B  F091         	movff	_YGR_Arr+49,___ftadd@f2+1
  5676  011EBE  C38C  F092         	movff	_YGR_Arr+50,___ftadd@f2+2
  5677  011EC2  C690  F08D         	movff	_Y_PF_Avg$8120,___ftadd@f1
  5678  011EC6  C691  F08E         	movff	_Y_PF_Avg$8120+1,___ftadd@f1+1
  5679  011ECA  C692  F08F         	movff	_Y_PF_Avg$8120+2,___ftadd@f1+2
  5680  011ECE  ECBE  F0B2         	call	___ftadd	;wreg free
  5681  011ED2  C08D  F693         	movff	?___ftadd,_Y_PF_Avg$8121
  5682  011ED6  C08E  F694         	movff	?___ftadd+1,_Y_PF_Avg$8121+1
  5683  011EDA  C08F  F695         	movff	?___ftadd+2,_Y_PF_Avg$8121+2
  5684                           
  5685                           ;Power_Meter.c: 503: }
  5686                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5687                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5688                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5689                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5690  011EDE  C387  F090         	movff	_YGR_Arr+45,___ftadd@f2
  5691  011EE2  C388  F091         	movff	_YGR_Arr+46,___ftadd@f2+1
  5692  011EE6  C389  F092         	movff	_YGR_Arr+47,___ftadd@f2+2
  5693  011EEA  C693  F08D         	movff	_Y_PF_Avg$8121,___ftadd@f1
  5694  011EEE  C694  F08E         	movff	_Y_PF_Avg$8121+1,___ftadd@f1+1
  5695  011EF2  C695  F08F         	movff	_Y_PF_Avg$8121+2,___ftadd@f1+2
  5696  011EF6  ECBE  F0B2         	call	___ftadd	;wreg free
  5697  011EFA  C08D  F696         	movff	?___ftadd,_Y_PF_Avg$8122
  5698  011EFE  C08E  F697         	movff	?___ftadd+1,_Y_PF_Avg$8122+1
  5699  011F02  C08F  F698         	movff	?___ftadd+2,_Y_PF_Avg$8122+2
  5700                           
  5701                           ;Power_Meter.c: 503: }
  5702                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5703                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5704                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5705                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5706  011F06  C384  F090         	movff	_YGR_Arr+42,___ftadd@f2
  5707  011F0A  C385  F091         	movff	_YGR_Arr+43,___ftadd@f2+1
  5708  011F0E  C386  F092         	movff	_YGR_Arr+44,___ftadd@f2+2
  5709  011F12  C696  F08D         	movff	_Y_PF_Avg$8122,___ftadd@f1
  5710  011F16  C697  F08E         	movff	_Y_PF_Avg$8122+1,___ftadd@f1+1
  5711  011F1A  C698  F08F         	movff	_Y_PF_Avg$8122+2,___ftadd@f1+2
  5712  011F1E  ECBE  F0B2         	call	___ftadd	;wreg free
  5713  011F22  C08D  F699         	movff	?___ftadd,_Y_PF_Avg$8123
  5714  011F26  C08E  F69A         	movff	?___ftadd+1,_Y_PF_Avg$8123+1
  5715  011F2A  C08F  F69B         	movff	?___ftadd+2,_Y_PF_Avg$8123+2
  5716                           
  5717                           ;Power_Meter.c: 503: }
  5718                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5719                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5720                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5721                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5722  011F2E  C381  F090         	movff	_YGR_Arr+39,___ftadd@f2
  5723  011F32  C382  F091         	movff	_YGR_Arr+40,___ftadd@f2+1
  5724  011F36  C383  F092         	movff	_YGR_Arr+41,___ftadd@f2+2
  5725  011F3A  C699  F08D         	movff	_Y_PF_Avg$8123,___ftadd@f1
  5726  011F3E  C69A  F08E         	movff	_Y_PF_Avg$8123+1,___ftadd@f1+1
  5727  011F42  C69B  F08F         	movff	_Y_PF_Avg$8123+2,___ftadd@f1+2
  5728  011F46  ECBE  F0B2         	call	___ftadd	;wreg free
  5729  011F4A  C08D  F69C         	movff	?___ftadd,_Y_PF_Avg$8124
  5730  011F4E  C08E  F69D         	movff	?___ftadd+1,_Y_PF_Avg$8124+1
  5731  011F52  C08F  F69E         	movff	?___ftadd+2,_Y_PF_Avg$8124+2
  5732                           
  5733                           ;Power_Meter.c: 503: }
  5734                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5735                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5736                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5737                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5738  011F56  C37E  F090         	movff	_YGR_Arr+36,___ftadd@f2
  5739  011F5A  C37F  F091         	movff	_YGR_Arr+37,___ftadd@f2+1
  5740  011F5E  C380  F092         	movff	_YGR_Arr+38,___ftadd@f2+2
  5741  011F62  C69C  F08D         	movff	_Y_PF_Avg$8124,___ftadd@f1
  5742  011F66  C69D  F08E         	movff	_Y_PF_Avg$8124+1,___ftadd@f1+1
  5743  011F6A  C69E  F08F         	movff	_Y_PF_Avg$8124+2,___ftadd@f1+2
  5744  011F6E  ECBE  F0B2         	call	___ftadd	;wreg free
  5745  011F72  C08D  F69F         	movff	?___ftadd,_Y_PF_Avg$8125
  5746  011F76  C08E  F6A0         	movff	?___ftadd+1,_Y_PF_Avg$8125+1
  5747  011F7A  C08F  F6A1         	movff	?___ftadd+2,_Y_PF_Avg$8125+2
  5748                           
  5749                           ;Power_Meter.c: 503: }
  5750                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5751                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5752                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5753                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5754  011F7E  C37B  F090         	movff	_YGR_Arr+33,___ftadd@f2
  5755  011F82  C37C  F091         	movff	_YGR_Arr+34,___ftadd@f2+1
  5756  011F86  C37D  F092         	movff	_YGR_Arr+35,___ftadd@f2+2
  5757  011F8A  C69F  F08D         	movff	_Y_PF_Avg$8125,___ftadd@f1
  5758  011F8E  C6A0  F08E         	movff	_Y_PF_Avg$8125+1,___ftadd@f1+1
  5759  011F92  C6A1  F08F         	movff	_Y_PF_Avg$8125+2,___ftadd@f1+2
  5760  011F96  ECBE  F0B2         	call	___ftadd	;wreg free
  5761  011F9A  C08D  F6A2         	movff	?___ftadd,_Y_PF_Avg$8126
  5762  011F9E  C08E  F6A3         	movff	?___ftadd+1,_Y_PF_Avg$8126+1
  5763  011FA2  C08F  F6A4         	movff	?___ftadd+2,_Y_PF_Avg$8126+2
  5764                           
  5765                           ;Power_Meter.c: 503: }
  5766                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5767                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5768                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5769                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5770  011FA6  C378  F090         	movff	_YGR_Arr+30,___ftadd@f2
  5771  011FAA  C379  F091         	movff	_YGR_Arr+31,___ftadd@f2+1
  5772  011FAE  C37A  F092         	movff	_YGR_Arr+32,___ftadd@f2+2
  5773  011FB2  C6A2  F08D         	movff	_Y_PF_Avg$8126,___ftadd@f1
  5774  011FB6  C6A3  F08E         	movff	_Y_PF_Avg$8126+1,___ftadd@f1+1
  5775  011FBA  C6A4  F08F         	movff	_Y_PF_Avg$8126+2,___ftadd@f1+2
  5776  011FBE  ECBE  F0B2         	call	___ftadd	;wreg free
  5777  011FC2  C08D  F6A5         	movff	?___ftadd,_Y_PF_Avg$8127
  5778  011FC6  C08E  F6A6         	movff	?___ftadd+1,_Y_PF_Avg$8127+1
  5779  011FCA  C08F  F6A7         	movff	?___ftadd+2,_Y_PF_Avg$8127+2
  5780                           
  5781                           ;Power_Meter.c: 503: }
  5782                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5783                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5784                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5785                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5786  011FCE  C375  F090         	movff	_YGR_Arr+27,___ftadd@f2
  5787  011FD2  C376  F091         	movff	_YGR_Arr+28,___ftadd@f2+1
  5788  011FD6  C377  F092         	movff	_YGR_Arr+29,___ftadd@f2+2
  5789  011FDA  C6A5  F08D         	movff	_Y_PF_Avg$8127,___ftadd@f1
  5790  011FDE  C6A6  F08E         	movff	_Y_PF_Avg$8127+1,___ftadd@f1+1
  5791  011FE2  C6A7  F08F         	movff	_Y_PF_Avg$8127+2,___ftadd@f1+2
  5792  011FE6  ECBE  F0B2         	call	___ftadd	;wreg free
  5793  011FEA  C08D  F6A8         	movff	?___ftadd,_Y_PF_Avg$8128
  5794  011FEE  C08E  F6A9         	movff	?___ftadd+1,_Y_PF_Avg$8128+1
  5795  011FF2  C08F  F6AA         	movff	?___ftadd+2,_Y_PF_Avg$8128+2
  5796                           
  5797                           ;Power_Meter.c: 503: }
  5798                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5799                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5800                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5801                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5802  011FF6  C372  F090         	movff	_YGR_Arr+24,___ftadd@f2
  5803  011FFA  C373  F091         	movff	_YGR_Arr+25,___ftadd@f2+1
  5804  011FFE  C374  F092         	movff	_YGR_Arr+26,___ftadd@f2+2
  5805  012002  C6A8  F08D         	movff	_Y_PF_Avg$8128,___ftadd@f1
  5806  012006  C6A9  F08E         	movff	_Y_PF_Avg$8128+1,___ftadd@f1+1
  5807  01200A  C6AA  F08F         	movff	_Y_PF_Avg$8128+2,___ftadd@f1+2
  5808  01200E  ECBE  F0B2         	call	___ftadd	;wreg free
  5809  012012  C08D  F6AB         	movff	?___ftadd,_Y_PF_Avg$8129
  5810  012016  C08E  F6AC         	movff	?___ftadd+1,_Y_PF_Avg$8129+1
  5811  01201A  C08F  F6AD         	movff	?___ftadd+2,_Y_PF_Avg$8129+2
  5812                           
  5813                           ;Power_Meter.c: 503: }
  5814                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5815                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5816                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5817                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5818  01201E  C36F  F090         	movff	_YGR_Arr+21,___ftadd@f2
  5819  012022  C370  F091         	movff	_YGR_Arr+22,___ftadd@f2+1
  5820  012026  C371  F092         	movff	_YGR_Arr+23,___ftadd@f2+2
  5821  01202A  C6AB  F08D         	movff	_Y_PF_Avg$8129,___ftadd@f1
  5822  01202E  C6AC  F08E         	movff	_Y_PF_Avg$8129+1,___ftadd@f1+1
  5823  012032  C6AD  F08F         	movff	_Y_PF_Avg$8129+2,___ftadd@f1+2
  5824  012036  ECBE  F0B2         	call	___ftadd	;wreg free
  5825  01203A  C08D  F6AE         	movff	?___ftadd,_Y_PF_Avg$8130
  5826  01203E  C08E  F6AF         	movff	?___ftadd+1,_Y_PF_Avg$8130+1
  5827  012042  C08F  F6B0         	movff	?___ftadd+2,_Y_PF_Avg$8130+2
  5828                           
  5829                           ;Power_Meter.c: 503: }
  5830                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5831                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5832                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5833                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5834  012046  C36C  F090         	movff	_YGR_Arr+18,___ftadd@f2
  5835  01204A  C36D  F091         	movff	_YGR_Arr+19,___ftadd@f2+1
  5836  01204E  C36E  F092         	movff	_YGR_Arr+20,___ftadd@f2+2
  5837  012052  C6AE  F08D         	movff	_Y_PF_Avg$8130,___ftadd@f1
  5838  012056  C6AF  F08E         	movff	_Y_PF_Avg$8130+1,___ftadd@f1+1
  5839  01205A  C6B0  F08F         	movff	_Y_PF_Avg$8130+2,___ftadd@f1+2
  5840  01205E  ECBE  F0B2         	call	___ftadd	;wreg free
  5841  012062  C08D  F6B1         	movff	?___ftadd,_Y_PF_Avg$8131
  5842  012066  C08E  F6B2         	movff	?___ftadd+1,_Y_PF_Avg$8131+1
  5843  01206A  C08F  F6B3         	movff	?___ftadd+2,_Y_PF_Avg$8131+2
  5844                           
  5845                           ;Power_Meter.c: 503: }
  5846                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5847                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5848                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5849                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5850  01206E  C369  F090         	movff	_YGR_Arr+15,___ftadd@f2
  5851  012072  C36A  F091         	movff	_YGR_Arr+16,___ftadd@f2+1
  5852  012076  C36B  F092         	movff	_YGR_Arr+17,___ftadd@f2+2
  5853  01207A  C6B1  F08D         	movff	_Y_PF_Avg$8131,___ftadd@f1
  5854  01207E  C6B2  F08E         	movff	_Y_PF_Avg$8131+1,___ftadd@f1+1
  5855  012082  C6B3  F08F         	movff	_Y_PF_Avg$8131+2,___ftadd@f1+2
  5856  012086  ECBE  F0B2         	call	___ftadd	;wreg free
  5857  01208A  C08D  F6B4         	movff	?___ftadd,_Y_PF_Avg$8132
  5858  01208E  C08E  F6B5         	movff	?___ftadd+1,_Y_PF_Avg$8132+1
  5859  012092  C08F  F6B6         	movff	?___ftadd+2,_Y_PF_Avg$8132+2
  5860                           
  5861                           ;Power_Meter.c: 503: }
  5862                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5863                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5864                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5865                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5866  012096  C366  F090         	movff	_YGR_Arr+12,___ftadd@f2
  5867  01209A  C367  F091         	movff	_YGR_Arr+13,___ftadd@f2+1
  5868  01209E  C368  F092         	movff	_YGR_Arr+14,___ftadd@f2+2
  5869  0120A2  C6B4  F08D         	movff	_Y_PF_Avg$8132,___ftadd@f1
  5870  0120A6  C6B5  F08E         	movff	_Y_PF_Avg$8132+1,___ftadd@f1+1
  5871  0120AA  C6B6  F08F         	movff	_Y_PF_Avg$8132+2,___ftadd@f1+2
  5872  0120AE  ECBE  F0B2         	call	___ftadd	;wreg free
  5873  0120B2  C08D  F6B7         	movff	?___ftadd,_Y_PF_Avg$8133
  5874  0120B6  C08E  F6B8         	movff	?___ftadd+1,_Y_PF_Avg$8133+1
  5875  0120BA  C08F  F6B9         	movff	?___ftadd+2,_Y_PF_Avg$8133+2
  5876                           
  5877                           ;Power_Meter.c: 503: }
  5878                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5879                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5880                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5881                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5882  0120BE  C363  F090         	movff	_YGR_Arr+9,___ftadd@f2
  5883  0120C2  C364  F091         	movff	_YGR_Arr+10,___ftadd@f2+1
  5884  0120C6  C365  F092         	movff	_YGR_Arr+11,___ftadd@f2+2
  5885  0120CA  C6B7  F08D         	movff	_Y_PF_Avg$8133,___ftadd@f1
  5886  0120CE  C6B8  F08E         	movff	_Y_PF_Avg$8133+1,___ftadd@f1+1
  5887  0120D2  C6B9  F08F         	movff	_Y_PF_Avg$8133+2,___ftadd@f1+2
  5888  0120D6  ECBE  F0B2         	call	___ftadd	;wreg free
  5889  0120DA  C08D  F6BA         	movff	?___ftadd,_Y_PF_Avg$8134
  5890  0120DE  C08E  F6BB         	movff	?___ftadd+1,_Y_PF_Avg$8134+1
  5891  0120E2  C08F  F6BC         	movff	?___ftadd+2,_Y_PF_Avg$8134+2
  5892                           
  5893                           ;Power_Meter.c: 503: }
  5894                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5895                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5896                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5897                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5898  0120E6  C360  F090         	movff	_YGR_Arr+6,___ftadd@f2
  5899  0120EA  C361  F091         	movff	_YGR_Arr+7,___ftadd@f2+1
  5900  0120EE  C362  F092         	movff	_YGR_Arr+8,___ftadd@f2+2
  5901  0120F2  C6BA  F08D         	movff	_Y_PF_Avg$8134,___ftadd@f1
  5902  0120F6  C6BB  F08E         	movff	_Y_PF_Avg$8134+1,___ftadd@f1+1
  5903  0120FA  C6BC  F08F         	movff	_Y_PF_Avg$8134+2,___ftadd@f1+2
  5904  0120FE  ECBE  F0B2         	call	___ftadd	;wreg free
  5905  012102  C08D  F6BD         	movff	?___ftadd,_Y_PF_Avg$8135
  5906  012106  C08E  F6BE         	movff	?___ftadd+1,_Y_PF_Avg$8135+1
  5907  01210A  C08F  F6BF         	movff	?___ftadd+2,_Y_PF_Avg$8135+2
  5908                           
  5909                           ;Power_Meter.c: 503: }
  5910                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5911                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5912                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5913                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5914  01210E  C35D  F090         	movff	_YGR_Arr+3,___ftadd@f2
  5915  012112  C35E  F091         	movff	_YGR_Arr+4,___ftadd@f2+1
  5916  012116  C35F  F092         	movff	_YGR_Arr+5,___ftadd@f2+2
  5917  01211A  C6BD  F08D         	movff	_Y_PF_Avg$8135,___ftadd@f1
  5918  01211E  C6BE  F08E         	movff	_Y_PF_Avg$8135+1,___ftadd@f1+1
  5919  012122  C6BF  F08F         	movff	_Y_PF_Avg$8135+2,___ftadd@f1+2
  5920  012126  ECBE  F0B2         	call	___ftadd	;wreg free
  5921  01212A  C08D  F6C0         	movff	?___ftadd,_Y_PF_Avg$8136
  5922  01212E  C08E  F6C1         	movff	?___ftadd+1,_Y_PF_Avg$8136+1
  5923  012132  C08F  F6C2         	movff	?___ftadd+2,_Y_PF_Avg$8136+2
  5924                           
  5925                           ;Power_Meter.c: 503: }
  5926                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5927                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5928                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5929                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5930  012136  C6C0  F08D         	movff	_Y_PF_Avg$8136,___ftadd@f1
  5931  01213A  C6C1  F08E         	movff	_Y_PF_Avg$8136+1,___ftadd@f1+1
  5932  01213E  C6C2  F08F         	movff	_Y_PF_Avg$8136+2,___ftadd@f1+2
  5933  012142  C35A  F090         	movff	_YGR_Arr,___ftadd@f2
  5934  012146  C35B  F091         	movff	_YGR_Arr+1,___ftadd@f2+1
  5935  01214A  C35C  F092         	movff	_YGR_Arr+2,___ftadd@f2+2
  5936  01214E  ECBE  F0B2         	call	___ftadd	;wreg free
  5937  012152  C08D  F2ED         	movff	?___ftadd,_YGR_Avg
  5938  012156  C08E  F2EE         	movff	?___ftadd+1,_YGR_Avg+1
  5939  01215A  C08F  F2EF         	movff	?___ftadd+2,_YGR_Avg+2
  5940                           
  5941                           ;Power_Meter.c: 510: YGR_Avg = (YGR_Avg / 30);
  5942  01215E  C2ED  F0A5         	movff	_YGR_Avg,___ftdiv@f1
  5943  012162  C2EE  F0A6         	movff	_YGR_Avg+1,___ftdiv@f1+1
  5944  012166  C2EF  F0A7         	movff	_YGR_Avg+2,___ftdiv@f1+2
  5945  01216A  0E00               	movlw	0
  5946  01216C  0100               	movlb	0	; () banked
  5947  01216E  6FA8               	movwf	___ftdiv@f2& (0+255),b
  5948  012170  0EF0               	movlw	240
  5949  012172  0100               	movlb	0	; () banked
  5950  012174  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  5951  012176  0E41               	movlw	65
  5952  012178  0100               	movlb	0	; () banked
  5953  01217A  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  5954  01217C  ECAF  F0C1         	call	___ftdiv	;wreg free
  5955  012180  C0A5  F2ED         	movff	?___ftdiv,_YGR_Avg
  5956  012184  C0A6  F2EE         	movff	?___ftdiv+1,_YGR_Avg+1
  5957  012188  C0A7  F2EF         	movff	?___ftdiv+2,_YGR_Avg+2
  5958                           
  5959                           ;Power_Meter.c: 511: Y_Rad = ((YGR_Avg * 2 * 3.1412) - (0.575959));
  5960  01218C  0E09               	movlw	9
  5961  01218E  0100               	movlb	0	; () banked
  5962  012190  6F77               	movwf	___ftmul@f2& (0+255),b
  5963  012192  0EC9               	movlw	201
  5964  012194  0100               	movlb	0	; () banked
  5965  012196  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5966  012198  0E40               	movlw	64
  5967  01219A  0100               	movlb	0	; () banked
  5968  01219C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5969  01219E  C2ED  F074         	movff	_YGR_Avg,___ftmul@f1
  5970  0121A2  C2EE  F075         	movff	_YGR_Avg+1,___ftmul@f1+1
  5971  0121A6  C2EF  F076         	movff	_YGR_Avg+2,___ftmul@f1+2
  5972  0121AA  EC00  F0C1         	call	___ftmul	;wreg free
  5973  0121AE  C074  F08D         	movff	?___ftmul,___ftadd@f1
  5974  0121B2  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  5975  0121B6  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  5976  0121BA  0E72               	movlw	114
  5977  0121BC  0100               	movlb	0	; () banked
  5978  0121BE  6F90               	movwf	___ftadd@f2& (0+255),b
  5979  0121C0  0E13               	movlw	19
  5980  0121C2  0100               	movlb	0	; () banked
  5981  0121C4  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  5982  0121C6  0EBF               	movlw	191
  5983  0121C8  0100               	movlb	0	; () banked
  5984  0121CA  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  5985  0121CC  ECBE  F0B2         	call	___ftadd	;wreg free
  5986  0121D0  C08D  F5BE         	movff	?___ftadd,_Y_Rad
  5987  0121D4  C08E  F5BF         	movff	?___ftadd+1,_Y_Rad+1
  5988  0121D8  C08F  F5C0         	movff	?___ftadd+2,_Y_Rad+2
  5989                           
  5990                           ;Power_Meter.c: 512: Y_Power_Factor = (cos(Y_Rad));
  5991  0121DC  C5BE  F0C1         	movff	_Y_Rad,cos@f
  5992  0121E0  C5BF  F0C2         	movff	_Y_Rad+1,cos@f+1
  5993  0121E4  C5C0  F0C3         	movff	_Y_Rad+2,cos@f+2
  5994  0121E8  EC10  F0CC         	call	_cos	;wreg free
  5995  0121EC  C0C1  F272         	movff	?_cos,_Y_Power_Factor
  5996  0121F0  C0C2  F273         	movff	?_cos+1,_Y_Power_Factor+1
  5997  0121F4  C0C3  F274         	movff	?_cos+2,_Y_Power_Factor+2
  5998  0121F8  0012               	return		;funcret
  5999  0121FA                     __end_of_Y_PF_Avg:
  6000                           	opt stack 0
  6001                           tblptru	equ	0xFF8
  6002                           tblptrh	equ	0xFF7
  6003                           tblptrl	equ	0xFF6
  6004                           tablat	equ	0xFF5
  6005                           intcon	equ	0xFF2
  6006                           postinc0	equ	0xFEE
  6007                           wreg	equ	0xFE8
  6008                           postdec1	equ	0xFE5
  6009                           fsr1h	equ	0xFE2
  6010                           fsr1l	equ	0xFE1
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function _Wind_Speed_Initiate *****************
  6014 ;; Defined at:
  6015 ;;		line 55 in file "Initialization.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;		None
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;		None
  6020 ;; Return value:  Size  Location     Type
  6021 ;;                  2   14[None  ] int 
  6022 ;; Registers used:
  6023 ;;		wreg, status,2
  6024 ;; Tracked objects:
  6025 ;;		On entry : 0/0
  6026 ;;		On exit  : 0/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;Total ram usage:        0 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:    3
  6036 ;; This function calls:
  6037 ;;		Nothing
  6038 ;; This function is called by:
  6039 ;;		_main
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text5
  6044  01B116                     __ptext5:
  6045                           	opt stack 0
  6046  01B116                     _Wind_Speed_Initiate:
  6047                           	opt stack 27
  6048                           
  6049                           ;Initialization.c: 57: TRISEbits.TRISE6=1;
  6050                           
  6051                           ;incstack = 0
  6052  01B116  8C96               	bsf	3990,6,c	;volatile
  6053                           
  6054                           ;Initialization.c: 58: CCP6CON = 0x04;
  6055  01B118  0E04               	movlw	4
  6056  01B11A  6E71               	movwf	3953,c	;volatile
  6057                           
  6058                           ;Initialization.c: 59: CCP6IE = 1;
  6059  01B11C  86B6               	bsf	4022,3,c	;volatile
  6060                           
  6061                           ;Initialization.c: 60: CCP6IF = 0;
  6062  01B11E  96B7               	bcf	4023,3,c	;volatile
  6063  01B120  0012               	return		;funcret
  6064  01B122                     __end_of_Wind_Speed_Initiate:
  6065                           	opt stack 0
  6066                           tblptru	equ	0xFF8
  6067                           tblptrh	equ	0xFF7
  6068                           tblptrl	equ	0xFF6
  6069                           tablat	equ	0xFF5
  6070                           intcon	equ	0xFF2
  6071                           postinc0	equ	0xFEE
  6072                           wreg	equ	0xFE8
  6073                           postdec1	equ	0xFE5
  6074                           fsr1h	equ	0xFE2
  6075                           fsr1l	equ	0xFE1
  6076                           status	equ	0xFD8
  6077                           
  6078 ;; *************** function _Wind_Speed_Cal *****************
  6079 ;; Defined at:
  6080 ;;		line 163 in file "RPM_Measurement.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;		None
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;		None
  6085 ;; Return value:  Size  Location     Type
  6086 ;;                  1    wreg      void 
  6087 ;; Registers used:
  6088 ;;		wreg, status,2, status,0, cstack
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/0
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6098 ;;Total ram usage:        2 bytes
  6099 ;; Hardware stack levels used:    1
  6100 ;; Hardware stack levels required when called:    5
  6101 ;; This function calls:
  6102 ;;		___ftadd
  6103 ;;		___ftdiv
  6104 ;;		___ftmul
  6105 ;;		___lwtoft
  6106 ;; This function is called by:
  6107 ;;		_main
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           	psect	text6
  6112  0160A0                     __ptext6:
  6113                           	opt stack 0
  6114  0160A0                     _Wind_Speed_Cal:
  6115                           	opt stack 25
  6116                           
  6117                           ;RPM_Measurement.c: 166: Timer1_OF_counter_Wind = 0;
  6118                           
  6119                           ;incstack = 0
  6120  0160A0  0E00               	movlw	0
  6121  0160A2  0103               	movlb	3	; () banked
  6122  0160A4  6FF6               	movwf	(_Timer1_OF_counter_Wind+1)& (0+255),b
  6123  0160A6  0E00               	movlw	0
  6124  0160A8  6FF5               	movwf	_Timer1_OF_counter_Wind& (0+255),b
  6125                           
  6126                           ;RPM_Measurement.c: 167: Wind_Frequency = 0;
  6127  0160AA  0E00               	movlw	0
  6128  0160AC  0104               	movlb	4	; () banked
  6129  0160AE  6FBD               	movwf	_Wind_Frequency& (0+255),b
  6130  0160B0  0E00               	movlw	0
  6131  0160B2  0104               	movlb	4	; () banked
  6132  0160B4  6FBE               	movwf	(_Wind_Frequency+1)& (0+255),b
  6133  0160B6  0E00               	movlw	0
  6134  0160B8  0104               	movlb	4	; () banked
  6135  0160BA  6FBF               	movwf	(_Wind_Frequency+2)& (0+255),b
  6136                           
  6137                           ;RPM_Measurement.c: 168: Wind_Time_1 = 0;
  6138  0160BC  0E00               	movlw	0
  6139  0160BE  0104               	movlb	4	; () banked
  6140  0160C0  6FF3               	movwf	_Wind_Time_1& (0+255),b
  6141  0160C2  0E00               	movlw	0
  6142  0160C4  0104               	movlb	4	; () banked
  6143  0160C6  6FF4               	movwf	(_Wind_Time_1+1)& (0+255),b
  6144  0160C8  0E00               	movlw	0
  6145  0160CA  0104               	movlb	4	; () banked
  6146  0160CC  6FF5               	movwf	(_Wind_Time_1+2)& (0+255),b
  6147                           
  6148                           ;RPM_Measurement.c: 169: Wind_Time = 0;
  6149  0160CE  0E00               	movlw	0
  6150  0160D0  0104               	movlb	4	; () banked
  6151  0160D2  6FC9               	movwf	_Wind_Time& (0+255),b
  6152  0160D4  0E00               	movlw	0
  6153  0160D6  0104               	movlb	4	; () banked
  6154  0160D8  6FCA               	movwf	(_Wind_Time+1)& (0+255),b
  6155  0160DA  0E00               	movlw	0
  6156  0160DC  0104               	movlb	4	; () banked
  6157  0160DE  6FCB               	movwf	(_Wind_Time+2)& (0+255),b
  6158                           
  6159                           ;RPM_Measurement.c: 170: Wind_Pulse_width = 0;
  6160  0160E0  0E00               	movlw	0
  6161  0160E2  0102               	movlb	2	; () banked
  6162  0160E4  6FFC               	movwf	(_Wind_Pulse_width+1)& (0+255),b
  6163  0160E6  0E00               	movlw	0
  6164  0160E8  6FFB               	movwf	_Wind_Pulse_width& (0+255),b
  6165                           
  6166                           ; BSR set to: 2
  6167                           ;RPM_Measurement.c: 172: if(Wind_Cap_New > Wind_Cap_Old)
  6168  0160EA  0101               	movlb	1	; () banked
  6169  0160EC  5142               	movf	_Wind_Cap_New& (0+255),w,b
  6170  0160EE  0101               	movlb	1	; () banked
  6171  0160F0  5D46               	subwf	_Wind_Cap_Old& (0+255),w,b
  6172  0160F2  0101               	movlb	1	; () banked
  6173  0160F4  5143               	movf	(_Wind_Cap_New+1)& (0+255),w,b
  6174  0160F6  0101               	movlb	1	; () banked
  6175  0160F8  5947               	subwfb	(_Wind_Cap_Old+1)& (0+255),w,b
  6176  0160FA  B0D8               	btfsc	status,0,c
  6177  0160FC  D02F               	goto	l22934
  6178                           
  6179                           ; BSR set to: 1
  6180                           ;RPM_Measurement.c: 173: {
  6181                           ;RPM_Measurement.c: 174: Wind_Pulse_width = (Wind_Cap_New - Wind_Cap_Old + 1) ;
  6182  0160FE  C146  F0B4         	movff	_Wind_Cap_Old,??_Wind_Speed_Cal
  6183  016102  C147  F0B5         	movff	_Wind_Cap_Old+1,??_Wind_Speed_Cal+1
  6184  016106  0100               	movlb	0	; () banked
  6185  016108  1FB4               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6186  01610A  1FB5               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6187  01610C  4BB4               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6188  01610E  2BB5               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6189  016110  0101               	movlb	1	; () banked
  6190  016112  5142               	movf	_Wind_Cap_New& (0+255),w,b
  6191  016114  0100               	movlb	0	; () banked
  6192  016116  27B4               	addwf	??_Wind_Speed_Cal& (0+255),f,b
  6193  016118  0101               	movlb	1	; () banked
  6194  01611A  5143               	movf	(_Wind_Cap_New+1)& (0+255),w,b
  6195  01611C  0100               	movlb	0	; () banked
  6196  01611E  23B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6197  016120  0E01               	movlw	1
  6198  016122  0100               	movlb	0	; () banked
  6199  016124  25B4               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6200  016126  0102               	movlb	2	; () banked
  6201  016128  6FFB               	movwf	_Wind_Pulse_width& (0+255),b
  6202  01612A  0E00               	movlw	0
  6203  01612C  0100               	movlb	0	; () banked
  6204  01612E  21B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6205  016130  0102               	movlb	2	; () banked
  6206  016132  6FFC               	movwf	(_Wind_Pulse_width+1)& (0+255),b
  6207                           
  6208                           ;RPM_Measurement.c: 175: WRPM_Counter = (Timer1_OF_counter_Wind_temp_New - Timer1_OF_cou
      +                          nter_Wind_temp_Old);
  6209  016134  C2A4  F0B4         	movff	_Timer1_OF_counter_Wind_temp_Old,??_Wind_Speed_Cal
  6210  016138  C2A5  F0B5         	movff	_Timer1_OF_counter_Wind_temp_Old+1,??_Wind_Speed_Cal+1
  6211  01613C  0100               	movlb	0	; () banked
  6212  01613E  1FB4               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6213  016140  1FB5               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6214  016142  4BB4               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6215  016144  2BB5               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6216  016146  0101               	movlb	1	; () banked
  6217  016148  513A               	movf	_Timer1_OF_counter_Wind_temp_New& (0+255),w,b
  6218  01614A  0100               	movlb	0	; () banked
  6219  01614C  25B4               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6220  01614E  0102               	movlb	2	; () banked
  6221  016150  6FA8               	movwf	_WRPM_Counter& (0+255),b
  6222  016152  0101               	movlb	1	; () banked
  6223  016154  513B               	movf	(_Timer1_OF_counter_Wind_temp_New+1)& (0+255),w,b
  6224  016156  0100               	movlb	0	; () banked
  6225  016158  21B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6226  01615A  D038               	goto	L2
  6227  01615C                     l22934:
  6228                           
  6229                           ;RPM_Measurement.c: 177: else
  6230                           ;RPM_Measurement.c: 178: {
  6231                           ;RPM_Measurement.c: 179: Wind_Pulse_width = (Wind_Cap_New - Wind_Cap_Old + 1) + 65536;
  6232  01615C  C146  F0B4         	movff	_Wind_Cap_Old,??_Wind_Speed_Cal
  6233  016160  C147  F0B5         	movff	_Wind_Cap_Old+1,??_Wind_Speed_Cal+1
  6234  016164  0100               	movlb	0	; () banked
  6235  016166  1FB4               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6236  016168  1FB5               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6237  01616A  4BB4               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6238  01616C  2BB5               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6239  01616E  0101               	movlb	1	; () banked
  6240  016170  5142               	movf	_Wind_Cap_New& (0+255),w,b
  6241  016172  0100               	movlb	0	; () banked
  6242  016174  27B4               	addwf	??_Wind_Speed_Cal& (0+255),f,b
  6243  016176  0101               	movlb	1	; () banked
  6244  016178  5143               	movf	(_Wind_Cap_New+1)& (0+255),w,b
  6245  01617A  0100               	movlb	0	; () banked
  6246  01617C  23B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6247  01617E  0E01               	movlw	1
  6248  016180  0100               	movlb	0	; () banked
  6249  016182  25B4               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6250  016184  0102               	movlb	2	; () banked
  6251  016186  6FFB               	movwf	_Wind_Pulse_width& (0+255),b
  6252  016188  0E00               	movlw	0
  6253  01618A  0100               	movlb	0	; () banked
  6254  01618C  21B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6255  01618E  0102               	movlb	2	; () banked
  6256  016190  6FFC               	movwf	(_Wind_Pulse_width+1)& (0+255),b
  6257                           
  6258                           ;RPM_Measurement.c: 180: WRPM_Counter = (Timer1_OF_counter_Wind_temp_New - Timer1_OF_cou
      +                          nter_Wind_temp_Old);
  6259  016192  C2A4  F0B4         	movff	_Timer1_OF_counter_Wind_temp_Old,??_Wind_Speed_Cal
  6260  016196  C2A5  F0B5         	movff	_Timer1_OF_counter_Wind_temp_Old+1,??_Wind_Speed_Cal+1
  6261  01619A  0100               	movlb	0	; () banked
  6262  01619C  1FB4               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6263  01619E  1FB5               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6264  0161A0  4BB4               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6265  0161A2  2BB5               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6266  0161A4  0101               	movlb	1	; () banked
  6267  0161A6  513A               	movf	_Timer1_OF_counter_Wind_temp_New& (0+255),w,b
  6268  0161A8  0100               	movlb	0	; () banked
  6269  0161AA  25B4               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6270  0161AC  0102               	movlb	2	; () banked
  6271  0161AE  6FA8               	movwf	_WRPM_Counter& (0+255),b
  6272  0161B0  0101               	movlb	1	; () banked
  6273  0161B2  513B               	movf	(_Timer1_OF_counter_Wind_temp_New+1)& (0+255),w,b
  6274  0161B4  0100               	movlb	0	; () banked
  6275  0161B6  21B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6276  0161B8  0102               	movlb	2	; () banked
  6277  0161BA  6FA9               	movwf	(_WRPM_Counter+1)& (0+255),b
  6278                           
  6279                           ;RPM_Measurement.c: 181: WRPM_Counter = WRPM_Counter -1;
  6280  0161BC  0EFF               	movlw	255
  6281  0161BE  0102               	movlb	2	; () banked
  6282  0161C0  25A8               	addwf	_WRPM_Counter& (0+255),w,b
  6283  0161C2  0102               	movlb	2	; () banked
  6284  0161C4  6FA8               	movwf	_WRPM_Counter& (0+255),b
  6285  0161C6  0EFF               	movlw	255
  6286  0161C8  0102               	movlb	2	; () banked
  6287  0161CA  21A9               	addwfc	(_WRPM_Counter+1)& (0+255),w,b
  6288  0161CC                     L2:
  6289  0161CC  0102               	movlb	2	; () banked
  6290  0161CE  6FA9               	movwf	(_WRPM_Counter+1)& (0+255),b
  6291                           
  6292                           ; BSR set to: 2
  6293                           ;RPM_Measurement.c: 182: }
  6294                           ;RPM_Measurement.c: 184: Wind_Time = 0.000004 * Wind_Pulse_width;
  6295                           
  6296                           ; BSR set to: 2
  6297  0161D0  C2FB  F068         	movff	_Wind_Pulse_width,___lwtoft@c
  6298  0161D4  C2FC  F069         	movff	_Wind_Pulse_width+1,___lwtoft@c+1
  6299  0161D8  ECCE  F0D7         	call	___lwtoft	;wreg free
  6300  0161DC  C068  F074         	movff	?___lwtoft,___ftmul@f1
  6301  0161E0  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  6302  0161E4  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  6303  0161E8  0E38               	movlw	56
  6304  0161EA  0100               	movlb	0	; () banked
  6305  0161EC  6F77               	movwf	___ftmul@f2& (0+255),b
  6306  0161EE  0E86               	movlw	134
  6307  0161F0  0100               	movlb	0	; () banked
  6308  0161F2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6309  0161F4  0E36               	movlw	54
  6310  0161F6  0100               	movlb	0	; () banked
  6311  0161F8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6312  0161FA  EC00  F0C1         	call	___ftmul	;wreg free
  6313  0161FE  C074  F4C9         	movff	?___ftmul,_Wind_Time
  6314  016202  C075  F4CA         	movff	?___ftmul+1,_Wind_Time+1
  6315  016206  C076  F4CB         	movff	?___ftmul+2,_Wind_Time+2
  6316                           
  6317                           ;RPM_Measurement.c: 186: Wind_Time_1 = Wind_Time + (0.262 * WRPM_Counter);
  6318  01620A  0E25               	movlw	37
  6319  01620C  0100               	movlb	0	; () banked
  6320  01620E  6F77               	movwf	___ftmul@f2& (0+255),b
  6321  016210  0E86               	movlw	134
  6322  016212  0100               	movlb	0	; () banked
  6323  016214  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6324  016216  0E3E               	movlw	62
  6325  016218  0100               	movlb	0	; () banked
  6326  01621A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6327  01621C  C2A8  F068         	movff	_WRPM_Counter,___lwtoft@c
  6328  016220  C2A9  F069         	movff	_WRPM_Counter+1,___lwtoft@c+1
  6329  016224  ECCE  F0D7         	call	___lwtoft	;wreg free
  6330  016228  C068  F074         	movff	?___lwtoft,___ftmul@f1
  6331  01622C  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  6332  016230  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  6333  016234  EC00  F0C1         	call	___ftmul	;wreg free
  6334  016238  C074  F08D         	movff	?___ftmul,___ftadd@f1
  6335  01623C  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  6336  016240  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  6337  016244  C4C9  F090         	movff	_Wind_Time,___ftadd@f2
  6338  016248  C4CA  F091         	movff	_Wind_Time+1,___ftadd@f2+1
  6339  01624C  C4CB  F092         	movff	_Wind_Time+2,___ftadd@f2+2
  6340  016250  ECBE  F0B2         	call	___ftadd	;wreg free
  6341  016254  C08D  F4F3         	movff	?___ftadd,_Wind_Time_1
  6342  016258  C08E  F4F4         	movff	?___ftadd+1,_Wind_Time_1+1
  6343  01625C  C08F  F4F5         	movff	?___ftadd+2,_Wind_Time_1+2
  6344                           
  6345                           ;RPM_Measurement.c: 188: Wind_Frequency = (1/Wind_Time_1);
  6346  016260  0E00               	movlw	0
  6347  016262  0100               	movlb	0	; () banked
  6348  016264  6FA5               	movwf	___ftdiv@f1& (0+255),b
  6349  016266  0E80               	movlw	128
  6350  016268  0100               	movlb	0	; () banked
  6351  01626A  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
  6352  01626C  0E3F               	movlw	63
  6353  01626E  0100               	movlb	0	; () banked
  6354  016270  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
  6355  016272  C4F3  F0A8         	movff	_Wind_Time_1,___ftdiv@f2
  6356  016276  C4F4  F0A9         	movff	_Wind_Time_1+1,___ftdiv@f2+1
  6357  01627A  C4F5  F0AA         	movff	_Wind_Time_1+2,___ftdiv@f2+2
  6358  01627E  ECAF  F0C1         	call	___ftdiv	;wreg free
  6359  016282  C0A5  F4BD         	movff	?___ftdiv,_Wind_Frequency
  6360  016286  C0A6  F4BE         	movff	?___ftdiv+1,_Wind_Frequency+1
  6361  01628A  C0A7  F4BF         	movff	?___ftdiv+2,_Wind_Frequency+2
  6362                           
  6363                           ;RPM_Measurement.c: 189: Wind = (Wind_Frequency / 6);
  6364  01628E  C4BD  F0A5         	movff	_Wind_Frequency,___ftdiv@f1
  6365  016292  C4BE  F0A6         	movff	_Wind_Frequency+1,___ftdiv@f1+1
  6366  016296  C4BF  F0A7         	movff	_Wind_Frequency+2,___ftdiv@f1+2
  6367  01629A  0E00               	movlw	0
  6368  01629C  0100               	movlb	0	; () banked
  6369  01629E  6FA8               	movwf	___ftdiv@f2& (0+255),b
  6370  0162A0  0EC0               	movlw	192
  6371  0162A2  0100               	movlb	0	; () banked
  6372  0162A4  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  6373  0162A6  0E40               	movlw	64
  6374  0162A8  0100               	movlb	0	; () banked
  6375  0162AA  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  6376  0162AC  ECAF  F0C1         	call	___ftdiv	;wreg free
  6377  0162B0  C0A5  F3DE         	movff	?___ftdiv,_Wind
  6378  0162B4  C0A6  F3DF         	movff	?___ftdiv+1,_Wind+1
  6379  0162B8  C0A7  F3E0         	movff	?___ftdiv+2,_Wind+2
  6380                           
  6381                           ;RPM_Measurement.c: 190: Wind_Speed = ((Wind * (143))/100);
  6382  0162BC  0E00               	movlw	0
  6383  0162BE  0100               	movlb	0	; () banked
  6384  0162C0  6F77               	movwf	___ftmul@f2& (0+255),b
  6385  0162C2  0E0F               	movlw	15
  6386  0162C4  0100               	movlb	0	; () banked
  6387  0162C6  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6388  0162C8  0E43               	movlw	67
  6389  0162CA  0100               	movlb	0	; () banked
  6390  0162CC  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6391  0162CE  C3DE  F074         	movff	_Wind,___ftmul@f1
  6392  0162D2  C3DF  F075         	movff	_Wind+1,___ftmul@f1+1
  6393  0162D6  C3E0  F076         	movff	_Wind+2,___ftmul@f1+2
  6394  0162DA  EC00  F0C1         	call	___ftmul	;wreg free
  6395  0162DE  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
  6396  0162E2  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
  6397  0162E6  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
  6398  0162EA  0E00               	movlw	0
  6399  0162EC  0100               	movlb	0	; () banked
  6400  0162EE  6FA8               	movwf	___ftdiv@f2& (0+255),b
  6401  0162F0  0EC8               	movlw	200
  6402  0162F2  0100               	movlb	0	; () banked
  6403  0162F4  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  6404  0162F6  0E42               	movlw	66
  6405  0162F8  0100               	movlb	0	; () banked
  6406  0162FA  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  6407  0162FC  ECAF  F0C1         	call	___ftdiv	;wreg free
  6408  016300  C0A5  F233         	movff	?___ftdiv,_Wind_Speed
  6409  016304  C0A6  F234         	movff	?___ftdiv+1,_Wind_Speed+1
  6410  016308  C0A7  F235         	movff	?___ftdiv+2,_Wind_Speed+2
  6411  01630C  0012               	return		;funcret
  6412  01630E                     __end_of_Wind_Speed_Cal:
  6413                           	opt stack 0
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           intcon	equ	0xFF2
  6419                           postinc0	equ	0xFEE
  6420                           wreg	equ	0xFE8
  6421                           postdec1	equ	0xFE5
  6422                           fsr1h	equ	0xFE2
  6423                           fsr1l	equ	0xFE1
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _Wind_Speed_2_Initiate *****************
  6427 ;; Defined at:
  6428 ;;		line 48 in file "Initialization.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;		None
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;		None
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		wreg, status,2
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:        0 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    3
  6449 ;; This function calls:
  6450 ;;		Nothing
  6451 ;; This function is called by:
  6452 ;;		_main
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text7
  6457  01B0C2                     __ptext7:
  6458                           	opt stack 0
  6459  01B0C2                     _Wind_Speed_2_Initiate:
  6460                           	opt stack 27
  6461                           
  6462                           ;Initialization.c: 50: TRISEbits.TRISE2=1;
  6463                           
  6464                           ;incstack = 0
  6465  01B0C2  8496               	bsf	3990,2,c	;volatile
  6466                           
  6467                           ;Initialization.c: 51: CCP10CON = 0x04;
  6468  01B0C4  0E04               	movlw	4
  6469  01B0C6  010F               	movlb	15	; () banked
  6470  01B0C8  6F40               	movwf	64,b	;volatile
  6471                           
  6472                           ; BSR set to: 15
  6473                           ;Initialization.c: 52: CCP10IE = 1;
  6474  01B0CA  8EB6               	bsf	4022,7,c	;volatile
  6475                           
  6476                           ; BSR set to: 15
  6477                           ;Initialization.c: 53: CCP10IF = 0;
  6478  01B0CC  9EB7               	bcf	4023,7,c	;volatile
  6479                           
  6480                           ; BSR set to: 15
  6481  01B0CE  0012               	return		;funcret
  6482  01B0D0                     __end_of_Wind_Speed_2_Initiate:
  6483                           	opt stack 0
  6484                           tblptru	equ	0xFF8
  6485                           tblptrh	equ	0xFF7
  6486                           tblptrl	equ	0xFF6
  6487                           tablat	equ	0xFF5
  6488                           intcon	equ	0xFF2
  6489                           postinc0	equ	0xFEE
  6490                           wreg	equ	0xFE8
  6491                           postdec1	equ	0xFE5
  6492                           fsr1h	equ	0xFE2
  6493                           fsr1l	equ	0xFE1
  6494                           status	equ	0xFD8
  6495                           
  6496 ;; *************** function _Wind_Speed_2_Cal *****************
  6497 ;; Defined at:
  6498 ;;		line 193 in file "RPM_Measurement.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;		None
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;		None
  6503 ;; Return value:  Size  Location     Type
  6504 ;;                  2   68[None  ] int 
  6505 ;; Registers used:
  6506 ;;		wreg, status,2, status,0, cstack
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;Total ram usage:        2 bytes
  6517 ;; Hardware stack levels used:    1
  6518 ;; Hardware stack levels required when called:    5
  6519 ;; This function calls:
  6520 ;;		___ftadd
  6521 ;;		___ftdiv
  6522 ;;		___ftmul
  6523 ;;		___lwtoft
  6524 ;; This function is called by:
  6525 ;;		_main
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           	psect	text8
  6530  01630E                     __ptext8:
  6531                           	opt stack 0
  6532  01630E                     _Wind_Speed_2_Cal:
  6533                           	opt stack 25
  6534                           
  6535                           ;RPM_Measurement.c: 196: Timer1_OF_counter_Wind_2 = 0;
  6536                           
  6537                           ; BSR set to: 15
  6538                           ;incstack = 0
  6539  01630E  0E00               	movlw	0
  6540  016310  0103               	movlb	3	; () banked
  6541  016312  6FF8               	movwf	(_Timer1_OF_counter_Wind_2+1)& (0+255),b
  6542  016314  0E00               	movlw	0
  6543  016316  6FF7               	movwf	_Timer1_OF_counter_Wind_2& (0+255),b
  6544                           
  6545                           ;RPM_Measurement.c: 197: wind_Frequency_2 = 0;
  6546  016318  0E00               	movlw	0
  6547  01631A  0104               	movlb	4	; () banked
  6548  01631C  6FD8               	movwf	_wind_Frequency_2& (0+255),b
  6549  01631E  0E00               	movlw	0
  6550  016320  0104               	movlb	4	; () banked
  6551  016322  6FD9               	movwf	(_wind_Frequency_2+1)& (0+255),b
  6552  016324  0E00               	movlw	0
  6553  016326  0104               	movlb	4	; () banked
  6554  016328  6FDA               	movwf	(_wind_Frequency_2+2)& (0+255),b
  6555                           
  6556                           ;RPM_Measurement.c: 198: wind_Time_1_2 = 0;
  6557  01632A  0E00               	movlw	0
  6558  01632C  0104               	movlb	4	; () banked
  6559  01632E  6FFC               	movwf	_wind_Time_1_2& (0+255),b
  6560  016330  0E00               	movlw	0
  6561  016332  0104               	movlb	4	; () banked
  6562  016334  6FFD               	movwf	(_wind_Time_1_2+1)& (0+255),b
  6563  016336  0E00               	movlw	0
  6564  016338  0104               	movlb	4	; () banked
  6565  01633A  6FFE               	movwf	(_wind_Time_1_2+2)& (0+255),b
  6566                           
  6567                           ;RPM_Measurement.c: 199: Wind_Time_2 = 0;
  6568  01633C  0E00               	movlw	0
  6569  01633E  0104               	movlb	4	; () banked
  6570  016340  6FCC               	movwf	_Wind_Time_2& (0+255),b
  6571  016342  0E00               	movlw	0
  6572  016344  0104               	movlb	4	; () banked
  6573  016346  6FCD               	movwf	(_Wind_Time_2+1)& (0+255),b
  6574  016348  0E00               	movlw	0
  6575  01634A  0104               	movlb	4	; () banked
  6576  01634C  6FCE               	movwf	(_Wind_Time_2+2)& (0+255),b
  6577                           
  6578                           ;RPM_Measurement.c: 200: Wind_Pulse_width_2 = 0;
  6579  01634E  0E00               	movlw	0
  6580  016350  0102               	movlb	2	; () banked
  6581  016352  6FFE               	movwf	(_Wind_Pulse_width_2+1)& (0+255),b
  6582  016354  0E00               	movlw	0
  6583  016356  6FFD               	movwf	_Wind_Pulse_width_2& (0+255),b
  6584                           
  6585                           ; BSR set to: 2
  6586                           ;RPM_Measurement.c: 202: if(Wind_Cap_New_2 > Wind_Cap_Old_2)
  6587  016358  0101               	movlb	1	; () banked
  6588  01635A  5144               	movf	_Wind_Cap_New_2& (0+255),w,b
  6589  01635C  0101               	movlb	1	; () banked
  6590  01635E  5D48               	subwf	_Wind_Cap_Old_2& (0+255),w,b
  6591  016360  0101               	movlb	1	; () banked
  6592  016362  5145               	movf	(_Wind_Cap_New_2+1)& (0+255),w,b
  6593  016364  0101               	movlb	1	; () banked
  6594  016366  5949               	subwfb	(_Wind_Cap_Old_2+1)& (0+255),w,b
  6595  016368  B0D8               	btfsc	status,0,c
  6596  01636A  D02F               	goto	l22952
  6597                           
  6598                           ; BSR set to: 1
  6599                           ;RPM_Measurement.c: 203: {
  6600                           ;RPM_Measurement.c: 204: Wind_Pulse_width_2 = (Wind_Cap_New_2 - Wind_Cap_Old_2 + 1) ;
  6601  01636C  C148  F0B4         	movff	_Wind_Cap_Old_2,??_Wind_Speed_2_Cal
  6602  016370  C149  F0B5         	movff	_Wind_Cap_Old_2+1,??_Wind_Speed_2_Cal+1
  6603  016374  0100               	movlb	0	; () banked
  6604  016376  1FB4               	comf	??_Wind_Speed_2_Cal& (0+255),f,b
  6605  016378  1FB5               	comf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6606  01637A  4BB4               	infsnz	??_Wind_Speed_2_Cal& (0+255),f,b
  6607  01637C  2BB5               	incf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6608  01637E  0101               	movlb	1	; () banked
  6609  016380  5144               	movf	_Wind_Cap_New_2& (0+255),w,b
  6610  016382  0100               	movlb	0	; () banked
  6611  016384  27B4               	addwf	??_Wind_Speed_2_Cal& (0+255),f,b
  6612  016386  0101               	movlb	1	; () banked
  6613  016388  5145               	movf	(_Wind_Cap_New_2+1)& (0+255),w,b
  6614  01638A  0100               	movlb	0	; () banked
  6615  01638C  23B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6616  01638E  0E01               	movlw	1
  6617  016390  0100               	movlb	0	; () banked
  6618  016392  25B4               	addwf	??_Wind_Speed_2_Cal& (0+255),w,b
  6619  016394  0102               	movlb	2	; () banked
  6620  016396  6FFD               	movwf	_Wind_Pulse_width_2& (0+255),b
  6621  016398  0E00               	movlw	0
  6622  01639A  0100               	movlb	0	; () banked
  6623  01639C  21B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),w,b
  6624  01639E  0102               	movlb	2	; () banked
  6625  0163A0  6FFE               	movwf	(_Wind_Pulse_width_2+1)& (0+255),b
  6626                           
  6627                           ;RPM_Measurement.c: 205: WRPM_Counter_1 = (Timer1_OF_counter_Wind_2_temp_New - Timer1_OF
      +                          _counter_Wind_2_temp_Old);
  6628  0163A2  C2A2  F0B4         	movff	_Timer1_OF_counter_Wind_2_temp_Old,??_Wind_Speed_2_Cal
  6629  0163A6  C2A3  F0B5         	movff	_Timer1_OF_counter_Wind_2_temp_Old+1,??_Wind_Speed_2_Cal+1
  6630  0163AA  0100               	movlb	0	; () banked
  6631  0163AC  1FB4               	comf	??_Wind_Speed_2_Cal& (0+255),f,b
  6632  0163AE  1FB5               	comf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6633  0163B0  4BB4               	infsnz	??_Wind_Speed_2_Cal& (0+255),f,b
  6634  0163B2  2BB5               	incf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6635  0163B4  0101               	movlb	1	; () banked
  6636  0163B6  5138               	movf	_Timer1_OF_counter_Wind_2_temp_New& (0+255),w,b
  6637  0163B8  0100               	movlb	0	; () banked
  6638  0163BA  25B4               	addwf	??_Wind_Speed_2_Cal& (0+255),w,b
  6639  0163BC  0102               	movlb	2	; () banked
  6640  0163BE  6FAA               	movwf	_WRPM_Counter_1& (0+255),b
  6641  0163C0  0101               	movlb	1	; () banked
  6642  0163C2  5139               	movf	(_Timer1_OF_counter_Wind_2_temp_New+1)& (0+255),w,b
  6643  0163C4  0100               	movlb	0	; () banked
  6644  0163C6  21B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),w,b
  6645  0163C8  D038               	goto	L3
  6646  0163CA                     l22952:
  6647                           
  6648                           ;RPM_Measurement.c: 207: else
  6649                           ;RPM_Measurement.c: 208: {
  6650                           ;RPM_Measurement.c: 209: Wind_Pulse_width_2 = (Wind_Cap_New_2 - Wind_Cap_Old_2 + 1) + 65
      +                          536;
  6651  0163CA  C148  F0B4         	movff	_Wind_Cap_Old_2,??_Wind_Speed_2_Cal
  6652  0163CE  C149  F0B5         	movff	_Wind_Cap_Old_2+1,??_Wind_Speed_2_Cal+1
  6653  0163D2  0100               	movlb	0	; () banked
  6654  0163D4  1FB4               	comf	??_Wind_Speed_2_Cal& (0+255),f,b
  6655  0163D6  1FB5               	comf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6656  0163D8  4BB4               	infsnz	??_Wind_Speed_2_Cal& (0+255),f,b
  6657  0163DA  2BB5               	incf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6658  0163DC  0101               	movlb	1	; () banked
  6659  0163DE  5144               	movf	_Wind_Cap_New_2& (0+255),w,b
  6660  0163E0  0100               	movlb	0	; () banked
  6661  0163E2  27B4               	addwf	??_Wind_Speed_2_Cal& (0+255),f,b
  6662  0163E4  0101               	movlb	1	; () banked
  6663  0163E6  5145               	movf	(_Wind_Cap_New_2+1)& (0+255),w,b
  6664  0163E8  0100               	movlb	0	; () banked
  6665  0163EA  23B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6666  0163EC  0E01               	movlw	1
  6667  0163EE  0100               	movlb	0	; () banked
  6668  0163F0  25B4               	addwf	??_Wind_Speed_2_Cal& (0+255),w,b
  6669  0163F2  0102               	movlb	2	; () banked
  6670  0163F4  6FFD               	movwf	_Wind_Pulse_width_2& (0+255),b
  6671  0163F6  0E00               	movlw	0
  6672  0163F8  0100               	movlb	0	; () banked
  6673  0163FA  21B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),w,b
  6674  0163FC  0102               	movlb	2	; () banked
  6675  0163FE  6FFE               	movwf	(_Wind_Pulse_width_2+1)& (0+255),b
  6676                           
  6677                           ;RPM_Measurement.c: 210: WRPM_Counter_1 = (Timer1_OF_counter_Wind_2_temp_New - Timer1_OF
      +                          _counter_Wind_2_temp_Old);
  6678  016400  C2A2  F0B4         	movff	_Timer1_OF_counter_Wind_2_temp_Old,??_Wind_Speed_2_Cal
  6679  016404  C2A3  F0B5         	movff	_Timer1_OF_counter_Wind_2_temp_Old+1,??_Wind_Speed_2_Cal+1
  6680  016408  0100               	movlb	0	; () banked
  6681  01640A  1FB4               	comf	??_Wind_Speed_2_Cal& (0+255),f,b
  6682  01640C  1FB5               	comf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6683  01640E  4BB4               	infsnz	??_Wind_Speed_2_Cal& (0+255),f,b
  6684  016410  2BB5               	incf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6685  016412  0101               	movlb	1	; () banked
  6686  016414  5138               	movf	_Timer1_OF_counter_Wind_2_temp_New& (0+255),w,b
  6687  016416  0100               	movlb	0	; () banked
  6688  016418  25B4               	addwf	??_Wind_Speed_2_Cal& (0+255),w,b
  6689  01641A  0102               	movlb	2	; () banked
  6690  01641C  6FAA               	movwf	_WRPM_Counter_1& (0+255),b
  6691  01641E  0101               	movlb	1	; () banked
  6692  016420  5139               	movf	(_Timer1_OF_counter_Wind_2_temp_New+1)& (0+255),w,b
  6693  016422  0100               	movlb	0	; () banked
  6694  016424  21B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),w,b
  6695  016426  0102               	movlb	2	; () banked
  6696  016428  6FAB               	movwf	(_WRPM_Counter_1+1)& (0+255),b
  6697                           
  6698                           ;RPM_Measurement.c: 211: WRPM_Counter_1 = WRPM_Counter_1 -1;
  6699  01642A  0EFF               	movlw	255
  6700  01642C  0102               	movlb	2	; () banked
  6701  01642E  25AA               	addwf	_WRPM_Counter_1& (0+255),w,b
  6702  016430  0102               	movlb	2	; () banked
  6703  016432  6FAA               	movwf	_WRPM_Counter_1& (0+255),b
  6704  016434  0EFF               	movlw	255
  6705  016436  0102               	movlb	2	; () banked
  6706  016438  21AB               	addwfc	(_WRPM_Counter_1+1)& (0+255),w,b
  6707  01643A                     L3:
  6708  01643A  0102               	movlb	2	; () banked
  6709  01643C  6FAB               	movwf	(_WRPM_Counter_1+1)& (0+255),b
  6710                           
  6711                           ; BSR set to: 2
  6712                           ;RPM_Measurement.c: 212: }
  6713                           ;RPM_Measurement.c: 215: Wind_Time_2 = 0.000004 * Wind_Pulse_width_2;
  6714                           
  6715                           ; BSR set to: 2
  6716  01643E  C2FD  F068         	movff	_Wind_Pulse_width_2,___lwtoft@c
  6717  016442  C2FE  F069         	movff	_Wind_Pulse_width_2+1,___lwtoft@c+1
  6718  016446  ECCE  F0D7         	call	___lwtoft	;wreg free
  6719  01644A  C068  F074         	movff	?___lwtoft,___ftmul@f1
  6720  01644E  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  6721  016452  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  6722  016456  0E38               	movlw	56
  6723  016458  0100               	movlb	0	; () banked
  6724  01645A  6F77               	movwf	___ftmul@f2& (0+255),b
  6725  01645C  0E86               	movlw	134
  6726  01645E  0100               	movlb	0	; () banked
  6727  016460  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6728  016462  0E36               	movlw	54
  6729  016464  0100               	movlb	0	; () banked
  6730  016466  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6731  016468  EC00  F0C1         	call	___ftmul	;wreg free
  6732  01646C  C074  F4CC         	movff	?___ftmul,_Wind_Time_2
  6733  016470  C075  F4CD         	movff	?___ftmul+1,_Wind_Time_2+1
  6734  016474  C076  F4CE         	movff	?___ftmul+2,_Wind_Time_2+2
  6735                           
  6736                           ;RPM_Measurement.c: 217: wind_Time_1_2 = Wind_Time_2 + (0.262 * WRPM_Counter_1);
  6737  016478  0E25               	movlw	37
  6738  01647A  0100               	movlb	0	; () banked
  6739  01647C  6F77               	movwf	___ftmul@f2& (0+255),b
  6740  01647E  0E86               	movlw	134
  6741  016480  0100               	movlb	0	; () banked
  6742  016482  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6743  016484  0E3E               	movlw	62
  6744  016486  0100               	movlb	0	; () banked
  6745  016488  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6746  01648A  C2AA  F068         	movff	_WRPM_Counter_1,___lwtoft@c
  6747  01648E  C2AB  F069         	movff	_WRPM_Counter_1+1,___lwtoft@c+1
  6748  016492  ECCE  F0D7         	call	___lwtoft	;wreg free
  6749  016496  C068  F074         	movff	?___lwtoft,___ftmul@f1
  6750  01649A  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  6751  01649E  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  6752  0164A2  EC00  F0C1         	call	___ftmul	;wreg free
  6753  0164A6  C074  F08D         	movff	?___ftmul,___ftadd@f1
  6754  0164AA  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  6755  0164AE  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  6756  0164B2  C4CC  F090         	movff	_Wind_Time_2,___ftadd@f2
  6757  0164B6  C4CD  F091         	movff	_Wind_Time_2+1,___ftadd@f2+1
  6758  0164BA  C4CE  F092         	movff	_Wind_Time_2+2,___ftadd@f2+2
  6759  0164BE  ECBE  F0B2         	call	___ftadd	;wreg free
  6760  0164C2  C08D  F4FC         	movff	?___ftadd,_wind_Time_1_2
  6761  0164C6  C08E  F4FD         	movff	?___ftadd+1,_wind_Time_1_2+1
  6762  0164CA  C08F  F4FE         	movff	?___ftadd+2,_wind_Time_1_2+2
  6763                           
  6764                           ;RPM_Measurement.c: 219: wind_Frequency_2 = (1/wind_Time_1_2);
  6765  0164CE  0E00               	movlw	0
  6766  0164D0  0100               	movlb	0	; () banked
  6767  0164D2  6FA5               	movwf	___ftdiv@f1& (0+255),b
  6768  0164D4  0E80               	movlw	128
  6769  0164D6  0100               	movlb	0	; () banked
  6770  0164D8  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
  6771  0164DA  0E3F               	movlw	63
  6772  0164DC  0100               	movlb	0	; () banked
  6773  0164DE  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
  6774  0164E0  C4FC  F0A8         	movff	_wind_Time_1_2,___ftdiv@f2
  6775  0164E4  C4FD  F0A9         	movff	_wind_Time_1_2+1,___ftdiv@f2+1
  6776  0164E8  C4FE  F0AA         	movff	_wind_Time_1_2+2,___ftdiv@f2+2
  6777  0164EC  ECAF  F0C1         	call	___ftdiv	;wreg free
  6778  0164F0  C0A5  F4D8         	movff	?___ftdiv,_wind_Frequency_2
  6779  0164F4  C0A6  F4D9         	movff	?___ftdiv+1,_wind_Frequency_2+1
  6780  0164F8  C0A7  F4DA         	movff	?___ftdiv+2,_wind_Frequency_2+2
  6781                           
  6782                           ;RPM_Measurement.c: 220: wind_2 = (wind_Frequency_2 / 6);
  6783  0164FC  C4D8  F0A5         	movff	_wind_Frequency_2,___ftdiv@f1
  6784  016500  C4D9  F0A6         	movff	_wind_Frequency_2+1,___ftdiv@f1+1
  6785  016504  C4DA  F0A7         	movff	_wind_Frequency_2+2,___ftdiv@f1+2
  6786  016508  0E00               	movlw	0
  6787  01650A  0100               	movlb	0	; () banked
  6788  01650C  6FA8               	movwf	___ftdiv@f2& (0+255),b
  6789  01650E  0EC0               	movlw	192
  6790  016510  0100               	movlb	0	; () banked
  6791  016512  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  6792  016514  0E40               	movlw	64
  6793  016516  0100               	movlb	0	; () banked
  6794  016518  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  6795  01651A  ECAF  F0C1         	call	___ftdiv	;wreg free
  6796  01651E  C0A5  F4D5         	movff	?___ftdiv,_wind_2
  6797  016522  C0A6  F4D6         	movff	?___ftdiv+1,_wind_2+1
  6798  016526  C0A7  F4D7         	movff	?___ftdiv+2,_wind_2+2
  6799                           
  6800                           ;RPM_Measurement.c: 221: Wind_Speed_2 = ((wind_2 * (143))/100);
  6801  01652A  0E00               	movlw	0
  6802  01652C  0100               	movlb	0	; () banked
  6803  01652E  6F77               	movwf	___ftmul@f2& (0+255),b
  6804  016530  0E0F               	movlw	15
  6805  016532  0100               	movlb	0	; () banked
  6806  016534  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6807  016536  0E43               	movlw	67
  6808  016538  0100               	movlb	0	; () banked
  6809  01653A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6810  01653C  C4D5  F074         	movff	_wind_2,___ftmul@f1
  6811  016540  C4D6  F075         	movff	_wind_2+1,___ftmul@f1+1
  6812  016544  C4D7  F076         	movff	_wind_2+2,___ftmul@f1+2
  6813  016548  EC00  F0C1         	call	___ftmul	;wreg free
  6814  01654C  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
  6815  016550  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
  6816  016554  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
  6817  016558  0E00               	movlw	0
  6818  01655A  0100               	movlb	0	; () banked
  6819  01655C  6FA8               	movwf	___ftdiv@f2& (0+255),b
  6820  01655E  0EC8               	movlw	200
  6821  016560  0100               	movlb	0	; () banked
  6822  016562  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  6823  016564  0E42               	movlw	66
  6824  016566  0100               	movlb	0	; () banked
  6825  016568  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  6826  01656A  ECAF  F0C1         	call	___ftdiv	;wreg free
  6827  01656E  C0A5  F242         	movff	?___ftdiv,_Wind_Speed_2
  6828  016572  C0A6  F243         	movff	?___ftdiv+1,_Wind_Speed_2+1
  6829  016576  C0A7  F244         	movff	?___ftdiv+2,_Wind_Speed_2+2
  6830  01657A  0012               	return		;funcret
  6831  01657C                     __end_of_Wind_Speed_2_Cal:
  6832                           	opt stack 0
  6833                           tblptru	equ	0xFF8
  6834                           tblptrh	equ	0xFF7
  6835                           tblptrl	equ	0xFF6
  6836                           tablat	equ	0xFF5
  6837                           intcon	equ	0xFF2
  6838                           postinc0	equ	0xFEE
  6839                           wreg	equ	0xFE8
  6840                           postdec1	equ	0xFE5
  6841                           fsr1h	equ	0xFE2
  6842                           fsr1l	equ	0xFE1
  6843                           status	equ	0xFD8
  6844                           
  6845 ;; *************** function _Volt_Curr_Read *****************
  6846 ;; Defined at:
  6847 ;;		line 140 in file "Power_Meter.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;		None
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;		None
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      void 
  6854 ;; Registers used:
  6855 ;;		wreg, status,2, status,0, cstack
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/0
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;Total ram usage:        0 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    5
  6868 ;; This function calls:
  6869 ;;		_Read_Adc
  6870 ;;		___ftge
  6871 ;;		___lwtoft
  6872 ;; This function is called by:
  6873 ;;		_main
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	text9
  6878  014B40                     __ptext9:
  6879                           	opt stack 0
  6880  014B40                     _Volt_Curr_Read:
  6881                           	opt stack 25
  6882                           
  6883                           ;Power_Meter.c: 143: switch (Case_Call)
  6884                           
  6885                           ;incstack = 0
  6886  014B40  D1C2               	goto	l22510
  6887  014B42                     l22460:
  6888                           
  6889                           ;Power_Meter.c: 147: Case_Call = 2;
  6890  014B42  0E02               	movlw	2
  6891  014B44  0101               	movlb	1	; () banked
  6892  014B46  6FC7               	movwf	_Case_Call& (0+255),b
  6893                           
  6894                           ;Power_Meter.c: 149: R_V_Max = 0;
  6895  014B48  0E00               	movlw	0
  6896  014B4A  0101               	movlb	1	; () banked
  6897  014B4C  6F12               	movwf	_R_V_Max& (0+255),b
  6898  014B4E  0E00               	movlw	0
  6899  014B50  0101               	movlb	1	; () banked
  6900  014B52  6F13               	movwf	(_R_V_Max+1)& (0+255),b
  6901  014B54  0E00               	movlw	0
  6902  014B56  0101               	movlb	1	; () banked
  6903  014B58  6F14               	movwf	(_R_V_Max+2)& (0+255),b
  6904                           
  6905                           ;Power_Meter.c: 150: R_C_Max = 0;
  6906  014B5A  0E00               	movlw	0
  6907  014B5C  0101               	movlb	1	; () banked
  6908  014B5E  6F0C               	movwf	_R_C_Max& (0+255),b
  6909  014B60  0E00               	movlw	0
  6910  014B62  0101               	movlb	1	; () banked
  6911  014B64  6F0D               	movwf	(_R_C_Max+1)& (0+255),b
  6912  014B66  0E00               	movlw	0
  6913  014B68  0101               	movlb	1	; () banked
  6914  014B6A  6F0E               	movwf	(_R_C_Max+2)& (0+255),b
  6915                           
  6916                           ;Power_Meter.c: 152: for(i=0; i<70; i++)
  6917  014B6C  0E00               	movlw	0
  6918  014B6E  6E21               	movwf	_i,c
  6919  014B70                     l22462:
  6920                           
  6921                           ; BSR set to: 1
  6922  014B70  0E45               	movlw	69
  6923  014B72  6421               	cpfsgt	_i,c
  6924  014B74  D001               	goto	l22466
  6925  014B76  D056               	goto	l9204
  6926  014B78                     l22466:
  6927                           
  6928                           ;Power_Meter.c: 153: {
  6929                           ;Power_Meter.c: 154: R_V = Read_Adc(1);
  6930  014B78  0E01               	movlw	1
  6931  014B7A  EC09  F0D6         	call	_Read_Adc
  6932  014B7E  C060  F29C         	movff	?_Read_Adc,_R_V
  6933  014B82  C061  F29D         	movff	?_Read_Adc+1,_R_V+1
  6934                           
  6935                           ;Power_Meter.c: 155: R_C = Read_Adc(9);
  6936  014B86  0E09               	movlw	9
  6937  014B88  EC09  F0D6         	call	_Read_Adc
  6938  014B8C  C060  F29A         	movff	?_Read_Adc,_R_C
  6939  014B90  C061  F29B         	movff	?_Read_Adc+1,_R_C+1
  6940                           
  6941                           ;Power_Meter.c: 157: if(R_V_Max < R_V)
  6942  014B94  C112  F099         	movff	_R_V_Max,___ftge@ff1
  6943  014B98  C113  F09A         	movff	_R_V_Max+1,___ftge@ff1+1
  6944  014B9C  C114  F09B         	movff	_R_V_Max+2,___ftge@ff1+2
  6945  014BA0  C29C  F068         	movff	_R_V,___lwtoft@c
  6946  014BA4  C29D  F069         	movff	_R_V+1,___lwtoft@c+1
  6947  014BA8  ECCE  F0D7         	call	___lwtoft	;wreg free
  6948  014BAC  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  6949  014BB0  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  6950  014BB4  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  6951  014BB8  EC4B  F0CB         	call	___ftge	;wreg free
  6952  014BBC  0100               	movlb	0	; () banked
  6953  014BBE  B0D8               	btfsc	status,0,c
  6954  014BC0  D00C               	goto	l9205
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;Power_Meter.c: 158: {
  6958                           ;Power_Meter.c: 159: R_V_Max = R_V;
  6959  014BC2  C29C  F068         	movff	_R_V,___lwtoft@c
  6960  014BC6  C29D  F069         	movff	_R_V+1,___lwtoft@c+1
  6961  014BCA  ECCE  F0D7         	call	___lwtoft	;wreg free
  6962  014BCE  C068  F112         	movff	?___lwtoft,_R_V_Max
  6963  014BD2  C069  F113         	movff	?___lwtoft+1,_R_V_Max+1
  6964  014BD6  C06A  F114         	movff	?___lwtoft+2,_R_V_Max+2
  6965  014BDA                     l9205:
  6966                           
  6967                           ;Power_Meter.c: 160: }
  6968                           ;Power_Meter.c: 162: if(R_C_Max < R_C)
  6969  014BDA  C10C  F099         	movff	_R_C_Max,___ftge@ff1
  6970  014BDE  C10D  F09A         	movff	_R_C_Max+1,___ftge@ff1+1
  6971  014BE2  C10E  F09B         	movff	_R_C_Max+2,___ftge@ff1+2
  6972  014BE6  C29A  F068         	movff	_R_C,___lwtoft@c
  6973  014BEA  C29B  F069         	movff	_R_C+1,___lwtoft@c+1
  6974  014BEE  ECCE  F0D7         	call	___lwtoft	;wreg free
  6975  014BF2  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  6976  014BF6  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  6977  014BFA  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  6978  014BFE  EC4B  F0CB         	call	___ftge	;wreg free
  6979  014C02  0100               	movlb	0	; () banked
  6980  014C04  B0D8               	btfsc	status,0,c
  6981  014C06  D00C               	goto	l22472
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;Power_Meter.c: 163: {
  6985                           ;Power_Meter.c: 164: R_C_Max = R_C;
  6986  014C08  C29A  F068         	movff	_R_C,___lwtoft@c
  6987  014C0C  C29B  F069         	movff	_R_C+1,___lwtoft@c+1
  6988  014C10  ECCE  F0D7         	call	___lwtoft	;wreg free
  6989  014C14  C068  F10C         	movff	?___lwtoft,_R_C_Max
  6990  014C18  C069  F10D         	movff	?___lwtoft+1,_R_C_Max+1
  6991  014C1C  C06A  F10E         	movff	?___lwtoft+2,_R_C_Max+2
  6992  014C20                     l22472:
  6993  014C20  2A21               	incf	_i,f,c
  6994  014C22  D7A6               	goto	l22462
  6995  014C24                     l9204:
  6996                           
  6997                           ;Power_Meter.c: 165: }
  6998                           ;Power_Meter.c: 166: }
  6999                           ;Power_Meter.c: 168: R_V_Arr[2] = R_V_Arr[1];
  7000  014C24  C3D8  F3DB         	movff	_R_V_Arr+3,_R_V_Arr+6
  7001  014C28  C3D9  F3DC         	movff	_R_V_Arr+4,_R_V_Arr+7
  7002  014C2C  C3DA  F3DD         	movff	_R_V_Arr+5,_R_V_Arr+8
  7003                           
  7004                           ;Power_Meter.c: 169: R_V_Arr[1] = R_V_Arr[0];
  7005  014C30  C3D5  F3D8         	movff	_R_V_Arr,_R_V_Arr+3
  7006  014C34  C3D6  F3D9         	movff	_R_V_Arr+1,_R_V_Arr+4
  7007  014C38  C3D7  F3DA         	movff	_R_V_Arr+2,_R_V_Arr+5
  7008                           
  7009                           ;Power_Meter.c: 170: R_V_Arr[0] = R_V_Max;
  7010  014C3C  C112  F3D5         	movff	_R_V_Max,_R_V_Arr
  7011  014C40  C113  F3D6         	movff	_R_V_Max+1,_R_V_Arr+1
  7012  014C44  C114  F3D7         	movff	_R_V_Max+2,_R_V_Arr+2
  7013                           
  7014                           ;Power_Meter.c: 172: R_C_Arr[2] = R_C_Arr[1];
  7015  014C48  C48D  F490         	movff	_R_C_Arr+3,_R_C_Arr+6
  7016  014C4C  C48E  F491         	movff	_R_C_Arr+4,_R_C_Arr+7
  7017  014C50  C48F  F492         	movff	_R_C_Arr+5,_R_C_Arr+8
  7018                           
  7019                           ;Power_Meter.c: 173: R_C_Arr[1] = R_C_Arr[0];
  7020  014C54  C48A  F48D         	movff	_R_C_Arr,_R_C_Arr+3
  7021  014C58  C48B  F48E         	movff	_R_C_Arr+1,_R_C_Arr+4
  7022  014C5C  C48C  F48F         	movff	_R_C_Arr+2,_R_C_Arr+5
  7023                           
  7024                           ;Power_Meter.c: 174: R_C_Arr[0] = R_C_Max;
  7025  014C60  C10C  F48A         	movff	_R_C_Max,_R_C_Arr
  7026  014C64  C10D  F48B         	movff	_R_C_Max+1,_R_C_Arr+1
  7027  014C68  C10E  F48C         	movff	_R_C_Max+2,_R_C_Arr+2
  7028                           
  7029                           ;Power_Meter.c: 176: break;
  7030  014C6C  0012               	return	
  7031  014C6E                     l22476:
  7032                           
  7033                           ;Power_Meter.c: 180: Case_Call = 3;
  7034  014C6E  0E03               	movlw	3
  7035  014C70  0101               	movlb	1	; () banked
  7036  014C72  6FC7               	movwf	_Case_Call& (0+255),b
  7037                           
  7038                           ;Power_Meter.c: 182: Y_V_Max = 0;
  7039  014C74  0E00               	movlw	0
  7040  014C76  0102               	movlb	2	; () banked
  7041  014C78  6F75               	movwf	_Y_V_Max& (0+255),b
  7042  014C7A  0E00               	movlw	0
  7043  014C7C  0102               	movlb	2	; () banked
  7044  014C7E  6F76               	movwf	(_Y_V_Max+1)& (0+255),b
  7045  014C80  0E00               	movlw	0
  7046  014C82  0102               	movlb	2	; () banked
  7047  014C84  6F77               	movwf	(_Y_V_Max+2)& (0+255),b
  7048                           
  7049                           ;Power_Meter.c: 183: Y_C_Max = 0;
  7050  014C86  0E00               	movlw	0
  7051  014C88  0102               	movlb	2	; () banked
  7052  014C8A  6F6F               	movwf	_Y_C_Max& (0+255),b
  7053  014C8C  0E00               	movlw	0
  7054  014C8E  0102               	movlb	2	; () banked
  7055  014C90  6F70               	movwf	(_Y_C_Max+1)& (0+255),b
  7056  014C92  0E00               	movlw	0
  7057  014C94  0102               	movlb	2	; () banked
  7058  014C96  6F71               	movwf	(_Y_C_Max+2)& (0+255),b
  7059                           
  7060                           ;Power_Meter.c: 185: for(i=0; i<70; i++)
  7061  014C98  0E00               	movlw	0
  7062  014C9A  6E21               	movwf	_i,c
  7063  014C9C                     l22478:
  7064                           
  7065                           ; BSR set to: 2
  7066  014C9C  0E45               	movlw	69
  7067  014C9E  6421               	cpfsgt	_i,c
  7068  014CA0  D001               	goto	l22482
  7069  014CA2  D056               	goto	l9210
  7070  014CA4                     l22482:
  7071                           
  7072                           ;Power_Meter.c: 186: {
  7073                           ;Power_Meter.c: 187: Y_V = Read_Adc(2);
  7074  014CA4  0E02               	movlw	2
  7075  014CA6  EC09  F0D6         	call	_Read_Adc
  7076  014CAA  C060  F2B4         	movff	?_Read_Adc,_Y_V
  7077  014CAE  C061  F2B5         	movff	?_Read_Adc+1,_Y_V+1
  7078                           
  7079                           ;Power_Meter.c: 188: Y_C = Read_Adc(10);
  7080  014CB2  0E0A               	movlw	10
  7081  014CB4  EC09  F0D6         	call	_Read_Adc
  7082  014CB8  C060  F2B2         	movff	?_Read_Adc,_Y_C
  7083  014CBC  C061  F2B3         	movff	?_Read_Adc+1,_Y_C+1
  7084                           
  7085                           ;Power_Meter.c: 190: if(Y_V_Max < Y_V)
  7086  014CC0  C275  F099         	movff	_Y_V_Max,___ftge@ff1
  7087  014CC4  C276  F09A         	movff	_Y_V_Max+1,___ftge@ff1+1
  7088  014CC8  C277  F09B         	movff	_Y_V_Max+2,___ftge@ff1+2
  7089  014CCC  C2B4  F068         	movff	_Y_V,___lwtoft@c
  7090  014CD0  C2B5  F069         	movff	_Y_V+1,___lwtoft@c+1
  7091  014CD4  ECCE  F0D7         	call	___lwtoft	;wreg free
  7092  014CD8  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  7093  014CDC  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  7094  014CE0  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  7095  014CE4  EC4B  F0CB         	call	___ftge	;wreg free
  7096  014CE8  0100               	movlb	0	; () banked
  7097  014CEA  B0D8               	btfsc	status,0,c
  7098  014CEC  D00C               	goto	l9211
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;Power_Meter.c: 191: {
  7102                           ;Power_Meter.c: 192: Y_V_Max = Y_V;
  7103  014CEE  C2B4  F068         	movff	_Y_V,___lwtoft@c
  7104  014CF2  C2B5  F069         	movff	_Y_V+1,___lwtoft@c+1
  7105  014CF6  ECCE  F0D7         	call	___lwtoft	;wreg free
  7106  014CFA  C068  F275         	movff	?___lwtoft,_Y_V_Max
  7107  014CFE  C069  F276         	movff	?___lwtoft+1,_Y_V_Max+1
  7108  014D02  C06A  F277         	movff	?___lwtoft+2,_Y_V_Max+2
  7109  014D06                     l9211:
  7110                           
  7111                           ;Power_Meter.c: 193: }
  7112                           ;Power_Meter.c: 195: if(Y_C_Max < Y_C)
  7113  014D06  C26F  F099         	movff	_Y_C_Max,___ftge@ff1
  7114  014D0A  C270  F09A         	movff	_Y_C_Max+1,___ftge@ff1+1
  7115  014D0E  C271  F09B         	movff	_Y_C_Max+2,___ftge@ff1+2
  7116  014D12  C2B2  F068         	movff	_Y_C,___lwtoft@c
  7117  014D16  C2B3  F069         	movff	_Y_C+1,___lwtoft@c+1
  7118  014D1A  ECCE  F0D7         	call	___lwtoft	;wreg free
  7119  014D1E  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  7120  014D22  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  7121  014D26  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  7122  014D2A  EC4B  F0CB         	call	___ftge	;wreg free
  7123  014D2E  0100               	movlb	0	; () banked
  7124  014D30  B0D8               	btfsc	status,0,c
  7125  014D32  D00C               	goto	l22488
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;Power_Meter.c: 196: {
  7129                           ;Power_Meter.c: 197: Y_C_Max = Y_C;
  7130  014D34  C2B2  F068         	movff	_Y_C,___lwtoft@c
  7131  014D38  C2B3  F069         	movff	_Y_C+1,___lwtoft@c+1
  7132  014D3C  ECCE  F0D7         	call	___lwtoft	;wreg free
  7133  014D40  C068  F26F         	movff	?___lwtoft,_Y_C_Max
  7134  014D44  C069  F270         	movff	?___lwtoft+1,_Y_C_Max+1
  7135  014D48  C06A  F271         	movff	?___lwtoft+2,_Y_C_Max+2
  7136  014D4C                     l22488:
  7137  014D4C  2A21               	incf	_i,f,c
  7138  014D4E  D7A6               	goto	l22478
  7139  014D50                     l9210:
  7140                           
  7141                           ;Power_Meter.c: 198: }
  7142                           ;Power_Meter.c: 199: }
  7143                           ;Power_Meter.c: 201: Y_V_Arr[2] = Y_V_Arr[1];
  7144  014D50  C49F  F4A2         	movff	_Y_V_Arr+3,_Y_V_Arr+6
  7145  014D54  C4A0  F4A3         	movff	_Y_V_Arr+4,_Y_V_Arr+7
  7146  014D58  C4A1  F4A4         	movff	_Y_V_Arr+5,_Y_V_Arr+8
  7147                           
  7148                           ;Power_Meter.c: 202: Y_V_Arr[1] = Y_V_Arr[0];
  7149  014D5C  C49C  F49F         	movff	_Y_V_Arr,_Y_V_Arr+3
  7150  014D60  C49D  F4A0         	movff	_Y_V_Arr+1,_Y_V_Arr+4
  7151  014D64  C49E  F4A1         	movff	_Y_V_Arr+2,_Y_V_Arr+5
  7152                           
  7153                           ;Power_Meter.c: 203: Y_V_Arr[0] = Y_V_Max;
  7154  014D68  C275  F49C         	movff	_Y_V_Max,_Y_V_Arr
  7155  014D6C  C276  F49D         	movff	_Y_V_Max+1,_Y_V_Arr+1
  7156  014D70  C277  F49E         	movff	_Y_V_Max+2,_Y_V_Arr+2
  7157                           
  7158                           ;Power_Meter.c: 205: Y_C_Arr[2] = Y_C_Arr[1];
  7159  014D74  C496  F499         	movff	_Y_C_Arr+3,_Y_C_Arr+6
  7160  014D78  C497  F49A         	movff	_Y_C_Arr+4,_Y_C_Arr+7
  7161  014D7C  C498  F49B         	movff	_Y_C_Arr+5,_Y_C_Arr+8
  7162                           
  7163                           ;Power_Meter.c: 206: Y_C_Arr[1] = Y_C_Arr[0];
  7164  014D80  C493  F496         	movff	_Y_C_Arr,_Y_C_Arr+3
  7165  014D84  C494  F497         	movff	_Y_C_Arr+1,_Y_C_Arr+4
  7166  014D88  C495  F498         	movff	_Y_C_Arr+2,_Y_C_Arr+5
  7167                           
  7168                           ;Power_Meter.c: 207: Y_C_Arr[0] = Y_C_Max;
  7169  014D8C  C26F  F493         	movff	_Y_C_Max,_Y_C_Arr
  7170  014D90  C270  F494         	movff	_Y_C_Max+1,_Y_C_Arr+1
  7171  014D94  C271  F495         	movff	_Y_C_Max+2,_Y_C_Arr+2
  7172                           
  7173                           ;Power_Meter.c: 209: break;
  7174  014D98  0012               	return	
  7175  014D9A                     l22492:
  7176                           
  7177                           ;Power_Meter.c: 213: Case_Call = 1;
  7178  014D9A  0E01               	movlw	1
  7179  014D9C  0101               	movlb	1	; () banked
  7180  014D9E  6FC7               	movwf	_Case_Call& (0+255),b
  7181                           
  7182                           ;Power_Meter.c: 215: B_V_Max=0;
  7183  014DA0  0E00               	movlw	0
  7184  014DA2  0102               	movlb	2	; () banked
  7185  014DA4  6F09               	movwf	_B_V_Max& (0+255),b
  7186  014DA6  0E00               	movlw	0
  7187  014DA8  0102               	movlb	2	; () banked
  7188  014DAA  6F0A               	movwf	(_B_V_Max+1)& (0+255),b
  7189  014DAC  0E00               	movlw	0
  7190  014DAE  0102               	movlb	2	; () banked
  7191  014DB0  6F0B               	movwf	(_B_V_Max+2)& (0+255),b
  7192                           
  7193                           ;Power_Meter.c: 216: B_C_Max=0;
  7194  014DB2  0E00               	movlw	0
  7195  014DB4  0102               	movlb	2	; () banked
  7196  014DB6  6F06               	movwf	_B_C_Max& (0+255),b
  7197  014DB8  0E00               	movlw	0
  7198  014DBA  0102               	movlb	2	; () banked
  7199  014DBC  6F07               	movwf	(_B_C_Max+1)& (0+255),b
  7200  014DBE  0E00               	movlw	0
  7201  014DC0  0102               	movlb	2	; () banked
  7202  014DC2  6F08               	movwf	(_B_C_Max+2)& (0+255),b
  7203                           
  7204                           ;Power_Meter.c: 218: for(i=0; i<70; i++)
  7205  014DC4  0E00               	movlw	0
  7206  014DC6  6E21               	movwf	_i,c
  7207  014DC8                     l22494:
  7208                           
  7209                           ; BSR set to: 2
  7210  014DC8  0E45               	movlw	69
  7211  014DCA  6421               	cpfsgt	_i,c
  7212  014DCC  D001               	goto	l22498
  7213  014DCE  D056               	goto	l9215
  7214  014DD0                     l22498:
  7215                           
  7216                           ;Power_Meter.c: 219: {
  7217                           ;Power_Meter.c: 220: B_V = Read_Adc(3);
  7218  014DD0  0E03               	movlw	3
  7219  014DD2  EC09  F0D6         	call	_Read_Adc
  7220  014DD6  C060  F282         	movff	?_Read_Adc,_B_V
  7221  014DDA  C061  F283         	movff	?_Read_Adc+1,_B_V+1
  7222                           
  7223                           ;Power_Meter.c: 221: B_C = Read_Adc(11);
  7224  014DDE  0E0B               	movlw	11
  7225  014DE0  EC09  F0D6         	call	_Read_Adc
  7226  014DE4  C060  F280         	movff	?_Read_Adc,_B_C
  7227  014DE8  C061  F281         	movff	?_Read_Adc+1,_B_C+1
  7228                           
  7229                           ;Power_Meter.c: 223: if(B_V_Max < B_V)
  7230  014DEC  C209  F099         	movff	_B_V_Max,___ftge@ff1
  7231  014DF0  C20A  F09A         	movff	_B_V_Max+1,___ftge@ff1+1
  7232  014DF4  C20B  F09B         	movff	_B_V_Max+2,___ftge@ff1+2
  7233  014DF8  C282  F068         	movff	_B_V,___lwtoft@c
  7234  014DFC  C283  F069         	movff	_B_V+1,___lwtoft@c+1
  7235  014E00  ECCE  F0D7         	call	___lwtoft	;wreg free
  7236  014E04  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  7237  014E08  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  7238  014E0C  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  7239  014E10  EC4B  F0CB         	call	___ftge	;wreg free
  7240  014E14  0100               	movlb	0	; () banked
  7241  014E16  B0D8               	btfsc	status,0,c
  7242  014E18  D00C               	goto	l9216
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;Power_Meter.c: 224: {
  7246                           ;Power_Meter.c: 225: B_V_Max = B_V;
  7247  014E1A  C282  F068         	movff	_B_V,___lwtoft@c
  7248  014E1E  C283  F069         	movff	_B_V+1,___lwtoft@c+1
  7249  014E22  ECCE  F0D7         	call	___lwtoft	;wreg free
  7250  014E26  C068  F209         	movff	?___lwtoft,_B_V_Max
  7251  014E2A  C069  F20A         	movff	?___lwtoft+1,_B_V_Max+1
  7252  014E2E  C06A  F20B         	movff	?___lwtoft+2,_B_V_Max+2
  7253  014E32                     l9216:
  7254                           
  7255                           ;Power_Meter.c: 226: }
  7256                           ;Power_Meter.c: 228: if(B_C_Max < B_C)
  7257  014E32  C206  F099         	movff	_B_C_Max,___ftge@ff1
  7258  014E36  C207  F09A         	movff	_B_C_Max+1,___ftge@ff1+1
  7259  014E3A  C208  F09B         	movff	_B_C_Max+2,___ftge@ff1+2
  7260  014E3E  C280  F068         	movff	_B_C,___lwtoft@c
  7261  014E42  C281  F069         	movff	_B_C+1,___lwtoft@c+1
  7262  014E46  ECCE  F0D7         	call	___lwtoft	;wreg free
  7263  014E4A  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  7264  014E4E  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  7265  014E52  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  7266  014E56  EC4B  F0CB         	call	___ftge	;wreg free
  7267  014E5A  0100               	movlb	0	; () banked
  7268  014E5C  B0D8               	btfsc	status,0,c
  7269  014E5E  D00C               	goto	l22504
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;Power_Meter.c: 229: {
  7273                           ;Power_Meter.c: 230: B_C_Max = B_C;
  7274  014E60  C280  F068         	movff	_B_C,___lwtoft@c
  7275  014E64  C281  F069         	movff	_B_C+1,___lwtoft@c+1
  7276  014E68  ECCE  F0D7         	call	___lwtoft	;wreg free
  7277  014E6C  C068  F206         	movff	?___lwtoft,_B_C_Max
  7278  014E70  C069  F207         	movff	?___lwtoft+1,_B_C_Max+1
  7279  014E74  C06A  F208         	movff	?___lwtoft+2,_B_C_Max+2
  7280  014E78                     l22504:
  7281  014E78  2A21               	incf	_i,f,c
  7282  014E7A  D7A6               	goto	l22494
  7283  014E7C                     l9215:
  7284                           
  7285                           ;Power_Meter.c: 231: }
  7286                           ;Power_Meter.c: 232: }
  7287                           ;Power_Meter.c: 234: B_V_Arr[2] = B_V_Arr[1];
  7288  014E7C  C484  F487         	movff	_B_V_Arr+3,_B_V_Arr+6
  7289  014E80  C485  F488         	movff	_B_V_Arr+4,_B_V_Arr+7
  7290  014E84  C486  F489         	movff	_B_V_Arr+5,_B_V_Arr+8
  7291                           
  7292                           ;Power_Meter.c: 235: B_V_Arr[1] = B_V_Arr[0];
  7293  014E88  C481  F484         	movff	_B_V_Arr,_B_V_Arr+3
  7294  014E8C  C482  F485         	movff	_B_V_Arr+1,_B_V_Arr+4
  7295  014E90  C483  F486         	movff	_B_V_Arr+2,_B_V_Arr+5
  7296                           
  7297                           ;Power_Meter.c: 236: B_V_Arr[0] = B_V_Max;
  7298  014E94  C209  F481         	movff	_B_V_Max,_B_V_Arr
  7299  014E98  C20A  F482         	movff	_B_V_Max+1,_B_V_Arr+1
  7300  014E9C  C20B  F483         	movff	_B_V_Max+2,_B_V_Arr+2
  7301                           
  7302                           ;Power_Meter.c: 238: B_C_Arr[2] = B_C_Arr[1];
  7303  014EA0  C47B  F47E         	movff	_B_C_Arr+3,_B_C_Arr+6
  7304  014EA4  C47C  F47F         	movff	_B_C_Arr+4,_B_C_Arr+7
  7305  014EA8  C47D  F480         	movff	_B_C_Arr+5,_B_C_Arr+8
  7306                           
  7307                           ;Power_Meter.c: 239: B_C_Arr[1] = B_C_Arr[0];
  7308  014EAC  C478  F47B         	movff	_B_C_Arr,_B_C_Arr+3
  7309  014EB0  C479  F47C         	movff	_B_C_Arr+1,_B_C_Arr+4
  7310  014EB4  C47A  F47D         	movff	_B_C_Arr+2,_B_C_Arr+5
  7311                           
  7312                           ;Power_Meter.c: 240: B_C_Arr[0] = B_C_Max;
  7313  014EB8  C206  F478         	movff	_B_C_Max,_B_C_Arr
  7314  014EBC  C207  F479         	movff	_B_C_Max+1,_B_C_Arr+1
  7315  014EC0  C208  F47A         	movff	_B_C_Max+2,_B_C_Arr+2
  7316                           
  7317                           ;Power_Meter.c: 243: }
  7318                           
  7319                           ;Power_Meter.c: 242: break;
  7320  014EC4  0012               	return	
  7321  014EC6                     l22510:
  7322  014EC6  0101               	movlb	1	; () banked
  7323  014EC8  51C7               	movf	_Case_Call& (0+255),w,b
  7324                           
  7325                           ; Switch size 1, requested type "space"
  7326                           ; Number of cases is 3, Range of values is 1 to 3
  7327                           ; switch strategies available:
  7328                           ; Name         Instructions Cycles
  7329                           ; simple_byte           10     6 (average)
  7330                           ;	Chosen strategy is simple_byte
  7331  014ECA  0A01               	xorlw	1	; case 1
  7332  014ECC  B4D8               	btfsc	status,2,c
  7333  014ECE  D639               	goto	l22460
  7334  014ED0  0A03               	xorlw	3	; case 2
  7335  014ED2  B4D8               	btfsc	status,2,c
  7336  014ED4  D6CC               	goto	l22476
  7337  014ED6  0A01               	xorlw	1	; case 3
  7338  014ED8  A4D8               	btfss	status,2,c
  7339  014EDA  0012               	return	
  7340  014EDC  D75E               	goto	l22492
  7341  014EDE                     __end_of_Volt_Curr_Read:
  7342                           	opt stack 0
  7343                           tblptru	equ	0xFF8
  7344                           tblptrh	equ	0xFF7
  7345                           tblptrl	equ	0xFF6
  7346                           tablat	equ	0xFF5
  7347                           intcon	equ	0xFF2
  7348                           postinc0	equ	0xFEE
  7349                           wreg	equ	0xFE8
  7350                           postdec1	equ	0xFE5
  7351                           fsr1h	equ	0xFE2
  7352                           fsr1l	equ	0xFE1
  7353                           status	equ	0xFD8
  7354                           
  7355 ;; *************** function _Volt_Curr_Avg *****************
  7356 ;; Defined at:
  7357 ;;		line 246 in file "Power_Meter.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;		None
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;		None
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      void 
  7364 ;; Registers used:
  7365 ;;		wreg, status,2, status,0, cstack
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;Total ram usage:        3 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    5
  7378 ;; This function calls:
  7379 ;;		___ftadd
  7380 ;;		___ftdiv
  7381 ;;		___ftmul
  7382 ;; This function is called by:
  7383 ;;		_main
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           	psect	text10
  7388  0138F2                     __ptext10:
  7389                           	opt stack 0
  7390  0138F2                     _Volt_Curr_Avg:
  7391                           	opt stack 25
  7392                           
  7393                           ;Power_Meter.c: 248: R_V_Avg_Steps = ((R_V_Arr[0] + R_V_Arr[1] + R_V_Arr[2] ) / 3);
  7394                           
  7395                           ;incstack = 0
  7396  0138F2  C3DB  F090         	movff	_R_V_Arr+6,___ftadd@f2
  7397  0138F6  C3DC  F091         	movff	_R_V_Arr+7,___ftadd@f2+1
  7398  0138FA  C3DD  F092         	movff	_R_V_Arr+8,___ftadd@f2+2
  7399  0138FE  C3D8  F08D         	movff	_R_V_Arr+3,___ftadd@f1
  7400  013902  C3D9  F08E         	movff	_R_V_Arr+4,___ftadd@f1+1
  7401  013906  C3DA  F08F         	movff	_R_V_Arr+5,___ftadd@f1+2
  7402  01390A  ECBE  F0B2         	call	___ftadd	;wreg free
  7403  01390E  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8077
  7404  013912  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8077+1
  7405  013916  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8077+2
  7406                           
  7407                           ;Power_Meter.c: 248: R_V_Avg_Steps = ((R_V_Arr[0] + R_V_Arr[1] + R_V_Arr[2] ) / 3);
  7408  01391A  C3D5  F090         	movff	_R_V_Arr,___ftadd@f2
  7409  01391E  C3D6  F091         	movff	_R_V_Arr+1,___ftadd@f2+1
  7410  013922  C3D7  F092         	movff	_R_V_Arr+2,___ftadd@f2+2
  7411  013926  C0B4  F08D         	movff	_Volt_Curr_Avg$8077,___ftadd@f1
  7412  01392A  C0B5  F08E         	movff	_Volt_Curr_Avg$8077+1,___ftadd@f1+1
  7413  01392E  C0B6  F08F         	movff	_Volt_Curr_Avg$8077+2,___ftadd@f1+2
  7414  013932  ECBE  F0B2         	call	___ftadd	;wreg free
  7415  013936  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7416  01393A  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7417  01393E  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7418  013942  0E00               	movlw	0
  7419  013944  0100               	movlb	0	; () banked
  7420  013946  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7421  013948  0E40               	movlw	64
  7422  01394A  0100               	movlb	0	; () banked
  7423  01394C  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7424  01394E  0E40               	movlw	64
  7425  013950  0100               	movlb	0	; () banked
  7426  013952  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7427  013954  ECAF  F0C1         	call	___ftdiv	;wreg free
  7428  013958  C0A5  F4E7         	movff	?___ftdiv,_R_V_Avg_Steps
  7429  01395C  C0A6  F4E8         	movff	?___ftdiv+1,_R_V_Avg_Steps+1
  7430  013960  C0A7  F4E9         	movff	?___ftdiv+2,_R_V_Avg_Steps+2
  7431                           
  7432                           ;Power_Meter.c: 249: R_Volt = ((R_V_Avg_Steps - (2119)) * (0.727749)) * 0.707106781;
  7433  013964  0E70               	movlw	112
  7434  013966  0100               	movlb	0	; () banked
  7435  013968  6F90               	movwf	___ftadd@f2& (0+255),b
  7436  01396A  0E04               	movlw	4
  7437  01396C  0100               	movlb	0	; () banked
  7438  01396E  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7439  013970  0EC5               	movlw	197
  7440  013972  0100               	movlb	0	; () banked
  7441  013974  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7442  013976  C4E7  F08D         	movff	_R_V_Avg_Steps,___ftadd@f1
  7443  01397A  C4E8  F08E         	movff	_R_V_Avg_Steps+1,___ftadd@f1+1
  7444  01397E  C4E9  F08F         	movff	_R_V_Avg_Steps+2,___ftadd@f1+2
  7445  013982  ECBE  F0B2         	call	___ftadd	;wreg free
  7446  013986  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7447  01398A  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7448  01398E  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7449  013992  0EBD               	movlw	189
  7450  013994  0100               	movlb	0	; () banked
  7451  013996  6F77               	movwf	___ftmul@f2& (0+255),b
  7452  013998  0E03               	movlw	3
  7453  01399A  0100               	movlb	0	; () banked
  7454  01399C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7455  01399E  0E3F               	movlw	63
  7456  0139A0  0100               	movlb	0	; () banked
  7457  0139A2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7458  0139A4  EC00  F0C1         	call	___ftmul	;wreg free
  7459  0139A8  C074  F007         	movff	?___ftmul,_R_Volt
  7460  0139AC  C075  F008         	movff	?___ftmul+1,_R_Volt+1
  7461  0139B0  C076  F009         	movff	?___ftmul+2,_R_Volt+2
  7462                           
  7463                           ;Power_Meter.c: 251: R_C_Avg_Steps = ((R_C_Arr[0]+R_C_Arr[1] + R_C_Arr[2] ) / 3);
  7464  0139B4  C490  F090         	movff	_R_C_Arr+6,___ftadd@f2
  7465  0139B8  C491  F091         	movff	_R_C_Arr+7,___ftadd@f2+1
  7466  0139BC  C492  F092         	movff	_R_C_Arr+8,___ftadd@f2+2
  7467  0139C0  C48D  F08D         	movff	_R_C_Arr+3,___ftadd@f1
  7468  0139C4  C48E  F08E         	movff	_R_C_Arr+4,___ftadd@f1+1
  7469  0139C8  C48F  F08F         	movff	_R_C_Arr+5,___ftadd@f1+2
  7470  0139CC  ECBE  F0B2         	call	___ftadd	;wreg free
  7471  0139D0  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8077
  7472  0139D4  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8077+1
  7473  0139D8  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8077+2
  7474                           
  7475                           ;Power_Meter.c: 251: R_C_Avg_Steps = ((R_C_Arr[0]+R_C_Arr[1] + R_C_Arr[2] ) / 3);
  7476  0139DC  C48A  F090         	movff	_R_C_Arr,___ftadd@f2
  7477  0139E0  C48B  F091         	movff	_R_C_Arr+1,___ftadd@f2+1
  7478  0139E4  C48C  F092         	movff	_R_C_Arr+2,___ftadd@f2+2
  7479  0139E8  C0B4  F08D         	movff	_Volt_Curr_Avg$8077,___ftadd@f1
  7480  0139EC  C0B5  F08E         	movff	_Volt_Curr_Avg$8077+1,___ftadd@f1+1
  7481  0139F0  C0B6  F08F         	movff	_Volt_Curr_Avg$8077+2,___ftadd@f1+2
  7482  0139F4  ECBE  F0B2         	call	___ftadd	;wreg free
  7483  0139F8  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7484  0139FC  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7485  013A00  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7486  013A04  0E00               	movlw	0
  7487  013A06  0100               	movlb	0	; () banked
  7488  013A08  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7489  013A0A  0E40               	movlw	64
  7490  013A0C  0100               	movlb	0	; () banked
  7491  013A0E  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7492  013A10  0E40               	movlw	64
  7493  013A12  0100               	movlb	0	; () banked
  7494  013A14  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7495  013A16  ECAF  F0C1         	call	___ftdiv	;wreg free
  7496  013A1A  C0A5  F4E4         	movff	?___ftdiv,_R_C_Avg_Steps
  7497  013A1E  C0A6  F4E5         	movff	?___ftdiv+1,_R_C_Avg_Steps+1
  7498  013A22  C0A7  F4E6         	movff	?___ftdiv+2,_R_C_Avg_Steps+2
  7499                           
  7500                           ;Power_Meter.c: 252: R_Curr = ((R_C_Avg_Steps - (2119)) * (0.036912)) * 0.707106781;
  7501  013A26  0E70               	movlw	112
  7502  013A28  0100               	movlb	0	; () banked
  7503  013A2A  6F90               	movwf	___ftadd@f2& (0+255),b
  7504  013A2C  0E04               	movlw	4
  7505  013A2E  0100               	movlb	0	; () banked
  7506  013A30  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7507  013A32  0EC5               	movlw	197
  7508  013A34  0100               	movlb	0	; () banked
  7509  013A36  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7510  013A38  C4E4  F08D         	movff	_R_C_Avg_Steps,___ftadd@f1
  7511  013A3C  C4E5  F08E         	movff	_R_C_Avg_Steps+1,___ftadd@f1+1
  7512  013A40  C4E6  F08F         	movff	_R_C_Avg_Steps+2,___ftadd@f1+2
  7513  013A44  ECBE  F0B2         	call	___ftadd	;wreg free
  7514  013A48  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7515  013A4C  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7516  013A50  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7517  013A54  0ED1               	movlw	209
  7518  013A56  0100               	movlb	0	; () banked
  7519  013A58  6F77               	movwf	___ftmul@f2& (0+255),b
  7520  013A5A  0ED5               	movlw	213
  7521  013A5C  0100               	movlb	0	; () banked
  7522  013A5E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7523  013A60  0E3C               	movlw	60
  7524  013A62  0100               	movlb	0	; () banked
  7525  013A64  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7526  013A66  EC00  F0C1         	call	___ftmul	;wreg free
  7527  013A6A  C074  F0CD         	movff	?___ftmul,_R_Curr
  7528  013A6E  C075  F0CE         	movff	?___ftmul+1,_R_Curr+1
  7529  013A72  C076  F0CF         	movff	?___ftmul+2,_R_Curr+2
  7530                           
  7531                           ;Power_Meter.c: 254: Y_V_Avg_Steps = ((Y_V_Arr[0] + Y_V_Arr[1] + Y_V_Arr[2] ) / 3);
  7532  013A76  C4A2  F090         	movff	_Y_V_Arr+6,___ftadd@f2
  7533  013A7A  C4A3  F091         	movff	_Y_V_Arr+7,___ftadd@f2+1
  7534  013A7E  C4A4  F092         	movff	_Y_V_Arr+8,___ftadd@f2+2
  7535  013A82  C49F  F08D         	movff	_Y_V_Arr+3,___ftadd@f1
  7536  013A86  C4A0  F08E         	movff	_Y_V_Arr+4,___ftadd@f1+1
  7537  013A8A  C4A1  F08F         	movff	_Y_V_Arr+5,___ftadd@f1+2
  7538  013A8E  ECBE  F0B2         	call	___ftadd	;wreg free
  7539  013A92  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8077
  7540  013A96  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8077+1
  7541  013A9A  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8077+2
  7542                           
  7543                           ;Power_Meter.c: 254: Y_V_Avg_Steps = ((Y_V_Arr[0] + Y_V_Arr[1] + Y_V_Arr[2] ) / 3);
  7544  013A9E  C49C  F090         	movff	_Y_V_Arr,___ftadd@f2
  7545  013AA2  C49D  F091         	movff	_Y_V_Arr+1,___ftadd@f2+1
  7546  013AA6  C49E  F092         	movff	_Y_V_Arr+2,___ftadd@f2+2
  7547  013AAA  C0B4  F08D         	movff	_Volt_Curr_Avg$8077,___ftadd@f1
  7548  013AAE  C0B5  F08E         	movff	_Volt_Curr_Avg$8077+1,___ftadd@f1+1
  7549  013AB2  C0B6  F08F         	movff	_Volt_Curr_Avg$8077+2,___ftadd@f1+2
  7550  013AB6  ECBE  F0B2         	call	___ftadd	;wreg free
  7551  013ABA  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7552  013ABE  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7553  013AC2  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7554  013AC6  0E00               	movlw	0
  7555  013AC8  0100               	movlb	0	; () banked
  7556  013ACA  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7557  013ACC  0E40               	movlw	64
  7558  013ACE  0100               	movlb	0	; () banked
  7559  013AD0  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7560  013AD2  0E40               	movlw	64
  7561  013AD4  0100               	movlb	0	; () banked
  7562  013AD6  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7563  013AD8  ECAF  F0C1         	call	___ftdiv	;wreg free
  7564  013ADC  C0A5  F4F9         	movff	?___ftdiv,_Y_V_Avg_Steps
  7565  013AE0  C0A6  F4FA         	movff	?___ftdiv+1,_Y_V_Avg_Steps+1
  7566  013AE4  C0A7  F4FB         	movff	?___ftdiv+2,_Y_V_Avg_Steps+2
  7567                           
  7568                           ;Power_Meter.c: 255: Y_Volt = ((Y_V_Avg_Steps - (2119)) * (0.727749)) * 0.707106781;
  7569  013AE8  0E70               	movlw	112
  7570  013AEA  0100               	movlb	0	; () banked
  7571  013AEC  6F90               	movwf	___ftadd@f2& (0+255),b
  7572  013AEE  0E04               	movlw	4
  7573  013AF0  0100               	movlb	0	; () banked
  7574  013AF2  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7575  013AF4  0EC5               	movlw	197
  7576  013AF6  0100               	movlb	0	; () banked
  7577  013AF8  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7578  013AFA  C4F9  F08D         	movff	_Y_V_Avg_Steps,___ftadd@f1
  7579  013AFE  C4FA  F08E         	movff	_Y_V_Avg_Steps+1,___ftadd@f1+1
  7580  013B02  C4FB  F08F         	movff	_Y_V_Avg_Steps+2,___ftadd@f1+2
  7581  013B06  ECBE  F0B2         	call	___ftadd	;wreg free
  7582  013B0A  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7583  013B0E  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7584  013B12  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7585  013B16  0EBD               	movlw	189
  7586  013B18  0100               	movlb	0	; () banked
  7587  013B1A  6F77               	movwf	___ftmul@f2& (0+255),b
  7588  013B1C  0E03               	movlw	3
  7589  013B1E  0100               	movlb	0	; () banked
  7590  013B20  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7591  013B22  0E3F               	movlw	63
  7592  013B24  0100               	movlb	0	; () banked
  7593  013B26  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7594  013B28  EC00  F0C1         	call	___ftmul	;wreg free
  7595  013B2C  C074  F010         	movff	?___ftmul,_Y_Volt
  7596  013B30  C075  F011         	movff	?___ftmul+1,_Y_Volt+1
  7597  013B34  C076  F012         	movff	?___ftmul+2,_Y_Volt+2
  7598                           
  7599                           ;Power_Meter.c: 257: Y_C_Avg_Steps = ((Y_C_Arr[0] + Y_C_Arr[1] + Y_C_Arr[2] ) / 3);
  7600  013B38  C499  F090         	movff	_Y_C_Arr+6,___ftadd@f2
  7601  013B3C  C49A  F091         	movff	_Y_C_Arr+7,___ftadd@f2+1
  7602  013B40  C49B  F092         	movff	_Y_C_Arr+8,___ftadd@f2+2
  7603  013B44  C496  F08D         	movff	_Y_C_Arr+3,___ftadd@f1
  7604  013B48  C497  F08E         	movff	_Y_C_Arr+4,___ftadd@f1+1
  7605  013B4C  C498  F08F         	movff	_Y_C_Arr+5,___ftadd@f1+2
  7606  013B50  ECBE  F0B2         	call	___ftadd	;wreg free
  7607  013B54  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8077
  7608  013B58  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8077+1
  7609  013B5C  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8077+2
  7610                           
  7611                           ;Power_Meter.c: 257: Y_C_Avg_Steps = ((Y_C_Arr[0] + Y_C_Arr[1] + Y_C_Arr[2] ) / 3);
  7612  013B60  C493  F090         	movff	_Y_C_Arr,___ftadd@f2
  7613  013B64  C494  F091         	movff	_Y_C_Arr+1,___ftadd@f2+1
  7614  013B68  C495  F092         	movff	_Y_C_Arr+2,___ftadd@f2+2
  7615  013B6C  C0B4  F08D         	movff	_Volt_Curr_Avg$8077,___ftadd@f1
  7616  013B70  C0B5  F08E         	movff	_Volt_Curr_Avg$8077+1,___ftadd@f1+1
  7617  013B74  C0B6  F08F         	movff	_Volt_Curr_Avg$8077+2,___ftadd@f1+2
  7618  013B78  ECBE  F0B2         	call	___ftadd	;wreg free
  7619  013B7C  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7620  013B80  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7621  013B84  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7622  013B88  0E00               	movlw	0
  7623  013B8A  0100               	movlb	0	; () banked
  7624  013B8C  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7625  013B8E  0E40               	movlw	64
  7626  013B90  0100               	movlb	0	; () banked
  7627  013B92  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7628  013B94  0E40               	movlw	64
  7629  013B96  0100               	movlb	0	; () banked
  7630  013B98  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7631  013B9A  ECAF  F0C1         	call	___ftdiv	;wreg free
  7632  013B9E  C0A5  F4F6         	movff	?___ftdiv,_Y_C_Avg_Steps
  7633  013BA2  C0A6  F4F7         	movff	?___ftdiv+1,_Y_C_Avg_Steps+1
  7634  013BA6  C0A7  F4F8         	movff	?___ftdiv+2,_Y_C_Avg_Steps+2
  7635                           
  7636                           ;Power_Meter.c: 258: Y_Curr = ((Y_C_Avg_Steps - (2119)) * (0.036912)) * 0.707106781;
  7637  013BAA  0E70               	movlw	112
  7638  013BAC  0100               	movlb	0	; () banked
  7639  013BAE  6F90               	movwf	___ftadd@f2& (0+255),b
  7640  013BB0  0E04               	movlw	4
  7641  013BB2  0100               	movlb	0	; () banked
  7642  013BB4  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7643  013BB6  0EC5               	movlw	197
  7644  013BB8  0100               	movlb	0	; () banked
  7645  013BBA  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7646  013BBC  C4F6  F08D         	movff	_Y_C_Avg_Steps,___ftadd@f1
  7647  013BC0  C4F7  F08E         	movff	_Y_C_Avg_Steps+1,___ftadd@f1+1
  7648  013BC4  C4F8  F08F         	movff	_Y_C_Avg_Steps+2,___ftadd@f1+2
  7649  013BC8  ECBE  F0B2         	call	___ftadd	;wreg free
  7650  013BCC  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7651  013BD0  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7652  013BD4  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7653  013BD8  0ED1               	movlw	209
  7654  013BDA  0100               	movlb	0	; () banked
  7655  013BDC  6F77               	movwf	___ftmul@f2& (0+255),b
  7656  013BDE  0ED5               	movlw	213
  7657  013BE0  0100               	movlb	0	; () banked
  7658  013BE2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7659  013BE4  0E3C               	movlw	60
  7660  013BE6  0100               	movlb	0	; () banked
  7661  013BE8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7662  013BEA  EC00  F0C1         	call	___ftmul	;wreg free
  7663  013BEE  C074  F0D6         	movff	?___ftmul,_Y_Curr
  7664  013BF2  C075  F0D7         	movff	?___ftmul+1,_Y_Curr+1
  7665  013BF6  C076  F0D8         	movff	?___ftmul+2,_Y_Curr+2
  7666                           
  7667                           ;Power_Meter.c: 260: B_V_Avg_Steps = ((B_V_Arr[0] + B_V_Arr[1] + B_V_Arr[2] ) / 3);
  7668  013BFA  C487  F090         	movff	_B_V_Arr+6,___ftadd@f2
  7669  013BFE  C488  F091         	movff	_B_V_Arr+7,___ftadd@f2+1
  7670  013C02  C489  F092         	movff	_B_V_Arr+8,___ftadd@f2+2
  7671  013C06  C484  F08D         	movff	_B_V_Arr+3,___ftadd@f1
  7672  013C0A  C485  F08E         	movff	_B_V_Arr+4,___ftadd@f1+1
  7673  013C0E  C486  F08F         	movff	_B_V_Arr+5,___ftadd@f1+2
  7674  013C12  ECBE  F0B2         	call	___ftadd	;wreg free
  7675  013C16  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8077
  7676  013C1A  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8077+1
  7677  013C1E  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8077+2
  7678                           
  7679                           ;Power_Meter.c: 260: B_V_Avg_Steps = ((B_V_Arr[0] + B_V_Arr[1] + B_V_Arr[2] ) / 3);
  7680  013C22  C481  F090         	movff	_B_V_Arr,___ftadd@f2
  7681  013C26  C482  F091         	movff	_B_V_Arr+1,___ftadd@f2+1
  7682  013C2A  C483  F092         	movff	_B_V_Arr+2,___ftadd@f2+2
  7683  013C2E  C0B4  F08D         	movff	_Volt_Curr_Avg$8077,___ftadd@f1
  7684  013C32  C0B5  F08E         	movff	_Volt_Curr_Avg$8077+1,___ftadd@f1+1
  7685  013C36  C0B6  F08F         	movff	_Volt_Curr_Avg$8077+2,___ftadd@f1+2
  7686  013C3A  ECBE  F0B2         	call	___ftadd	;wreg free
  7687  013C3E  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7688  013C42  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7689  013C46  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7690  013C4A  0E00               	movlw	0
  7691  013C4C  0100               	movlb	0	; () banked
  7692  013C4E  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7693  013C50  0E40               	movlw	64
  7694  013C52  0100               	movlb	0	; () banked
  7695  013C54  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7696  013C56  0E40               	movlw	64
  7697  013C58  0100               	movlb	0	; () banked
  7698  013C5A  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7699  013C5C  ECAF  F0C1         	call	___ftdiv	;wreg free
  7700  013C60  C0A5  F4DE         	movff	?___ftdiv,_B_V_Avg_Steps
  7701  013C64  C0A6  F4DF         	movff	?___ftdiv+1,_B_V_Avg_Steps+1
  7702  013C68  C0A7  F4E0         	movff	?___ftdiv+2,_B_V_Avg_Steps+2
  7703                           
  7704                           ;Power_Meter.c: 261: B_Volt = ((B_V_Avg_Steps - (2119)) * (0.727749)) * 0.707106781;
  7705  013C6C  0E70               	movlw	112
  7706  013C6E  0100               	movlb	0	; () banked
  7707  013C70  6F90               	movwf	___ftadd@f2& (0+255),b
  7708  013C72  0E04               	movlw	4
  7709  013C74  0100               	movlb	0	; () banked
  7710  013C76  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7711  013C78  0EC5               	movlw	197
  7712  013C7A  0100               	movlb	0	; () banked
  7713  013C7C  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7714  013C7E  C4DE  F08D         	movff	_B_V_Avg_Steps,___ftadd@f1
  7715  013C82  C4DF  F08E         	movff	_B_V_Avg_Steps+1,___ftadd@f1+1
  7716  013C86  C4E0  F08F         	movff	_B_V_Avg_Steps+2,___ftadd@f1+2
  7717  013C8A  ECBE  F0B2         	call	___ftadd	;wreg free
  7718  013C8E  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7719  013C92  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7720  013C96  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7721  013C9A  0EBD               	movlw	189
  7722  013C9C  0100               	movlb	0	; () banked
  7723  013C9E  6F77               	movwf	___ftmul@f2& (0+255),b
  7724  013CA0  0E03               	movlw	3
  7725  013CA2  0100               	movlb	0	; () banked
  7726  013CA4  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7727  013CA6  0E3F               	movlw	63
  7728  013CA8  0100               	movlb	0	; () banked
  7729  013CAA  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7730  013CAC  EC00  F0C1         	call	___ftmul	;wreg free
  7731  013CB0  C074  F001         	movff	?___ftmul,_B_Volt
  7732  013CB4  C075  F002         	movff	?___ftmul+1,_B_Volt+1
  7733  013CB8  C076  F003         	movff	?___ftmul+2,_B_Volt+2
  7734                           
  7735                           ;Power_Meter.c: 263: B_C_Avg_Steps = ((B_C_Arr[0] + B_C_Arr[1] + B_C_Arr[2] ) / 3);
  7736  013CBC  C47E  F090         	movff	_B_C_Arr+6,___ftadd@f2
  7737  013CC0  C47F  F091         	movff	_B_C_Arr+7,___ftadd@f2+1
  7738  013CC4  C480  F092         	movff	_B_C_Arr+8,___ftadd@f2+2
  7739  013CC8  C47B  F08D         	movff	_B_C_Arr+3,___ftadd@f1
  7740  013CCC  C47C  F08E         	movff	_B_C_Arr+4,___ftadd@f1+1
  7741  013CD0  C47D  F08F         	movff	_B_C_Arr+5,___ftadd@f1+2
  7742  013CD4  ECBE  F0B2         	call	___ftadd	;wreg free
  7743  013CD8  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8077
  7744  013CDC  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8077+1
  7745  013CE0  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8077+2
  7746                           
  7747                           ;Power_Meter.c: 263: B_C_Avg_Steps = ((B_C_Arr[0] + B_C_Arr[1] + B_C_Arr[2] ) / 3);
  7748  013CE4  C478  F090         	movff	_B_C_Arr,___ftadd@f2
  7749  013CE8  C479  F091         	movff	_B_C_Arr+1,___ftadd@f2+1
  7750  013CEC  C47A  F092         	movff	_B_C_Arr+2,___ftadd@f2+2
  7751  013CF0  C0B4  F08D         	movff	_Volt_Curr_Avg$8077,___ftadd@f1
  7752  013CF4  C0B5  F08E         	movff	_Volt_Curr_Avg$8077+1,___ftadd@f1+1
  7753  013CF8  C0B6  F08F         	movff	_Volt_Curr_Avg$8077+2,___ftadd@f1+2
  7754  013CFC  ECBE  F0B2         	call	___ftadd	;wreg free
  7755  013D00  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7756  013D04  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7757  013D08  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7758  013D0C  0E00               	movlw	0
  7759  013D0E  0100               	movlb	0	; () banked
  7760  013D10  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7761  013D12  0E40               	movlw	64
  7762  013D14  0100               	movlb	0	; () banked
  7763  013D16  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7764  013D18  0E40               	movlw	64
  7765  013D1A  0100               	movlb	0	; () banked
  7766  013D1C  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7767  013D1E  ECAF  F0C1         	call	___ftdiv	;wreg free
  7768  013D22  C0A5  F4DB         	movff	?___ftdiv,_B_C_Avg_Steps
  7769  013D26  C0A6  F4DC         	movff	?___ftdiv+1,_B_C_Avg_Steps+1
  7770  013D2A  C0A7  F4DD         	movff	?___ftdiv+2,_B_C_Avg_Steps+2
  7771                           
  7772                           ;Power_Meter.c: 264: B_Curr = ((B_C_Avg_Steps - (2119)) * (0.036912)) * 0.707106781;
  7773  013D2E  0E70               	movlw	112
  7774  013D30  0100               	movlb	0	; () banked
  7775  013D32  6F90               	movwf	___ftadd@f2& (0+255),b
  7776  013D34  0E04               	movlw	4
  7777  013D36  0100               	movlb	0	; () banked
  7778  013D38  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7779  013D3A  0EC5               	movlw	197
  7780  013D3C  0100               	movlb	0	; () banked
  7781  013D3E  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7782  013D40  C4DB  F08D         	movff	_B_C_Avg_Steps,___ftadd@f1
  7783  013D44  C4DC  F08E         	movff	_B_C_Avg_Steps+1,___ftadd@f1+1
  7784  013D48  C4DD  F08F         	movff	_B_C_Avg_Steps+2,___ftadd@f1+2
  7785  013D4C  ECBE  F0B2         	call	___ftadd	;wreg free
  7786  013D50  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7787  013D54  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7788  013D58  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7789  013D5C  0ED1               	movlw	209
  7790  013D5E  0100               	movlb	0	; () banked
  7791  013D60  6F77               	movwf	___ftmul@f2& (0+255),b
  7792  013D62  0ED5               	movlw	213
  7793  013D64  0100               	movlb	0	; () banked
  7794  013D66  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7795  013D68  0E3C               	movlw	60
  7796  013D6A  0100               	movlb	0	; () banked
  7797  013D6C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7798  013D6E  EC00  F0C1         	call	___ftmul	;wreg free
  7799  013D72  C074  F0C4         	movff	?___ftmul,_B_Curr
  7800  013D76  C075  F0C5         	movff	?___ftmul+1,_B_Curr+1
  7801  013D7A  C076  F0C6         	movff	?___ftmul+2,_B_Curr+2
  7802                           
  7803                           ;Power_Meter.c: 266: Avg_RYB_Voltage = ((R_Volt + Y_Volt + B_Volt) / 3);
  7804  013D7E  C010  F090         	movff	_Y_Volt,___ftadd@f2
  7805  013D82  C011  F091         	movff	_Y_Volt+1,___ftadd@f2+1
  7806  013D86  C012  F092         	movff	_Y_Volt+2,___ftadd@f2+2
  7807  013D8A  C007  F08D         	movff	_R_Volt,___ftadd@f1
  7808  013D8E  C008  F08E         	movff	_R_Volt+1,___ftadd@f1+1
  7809  013D92  C009  F08F         	movff	_R_Volt+2,___ftadd@f1+2
  7810  013D96  ECBE  F0B2         	call	___ftadd	;wreg free
  7811  013D9A  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8077
  7812  013D9E  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8077+1
  7813  013DA2  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8077+2
  7814                           
  7815                           ;Power_Meter.c: 266: Avg_RYB_Voltage = ((R_Volt + Y_Volt + B_Volt) / 3);
  7816  013DA6  C001  F090         	movff	_B_Volt,___ftadd@f2
  7817  013DAA  C002  F091         	movff	_B_Volt+1,___ftadd@f2+1
  7818  013DAE  C003  F092         	movff	_B_Volt+2,___ftadd@f2+2
  7819  013DB2  C0B4  F08D         	movff	_Volt_Curr_Avg$8077,___ftadd@f1
  7820  013DB6  C0B5  F08E         	movff	_Volt_Curr_Avg$8077+1,___ftadd@f1+1
  7821  013DBA  C0B6  F08F         	movff	_Volt_Curr_Avg$8077+2,___ftadd@f1+2
  7822  013DBE  ECBE  F0B2         	call	___ftadd	;wreg free
  7823  013DC2  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7824  013DC6  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7825  013DCA  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7826  013DCE  0E00               	movlw	0
  7827  013DD0  0100               	movlb	0	; () banked
  7828  013DD2  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7829  013DD4  0E40               	movlw	64
  7830  013DD6  0100               	movlb	0	; () banked
  7831  013DD8  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7832  013DDA  0E40               	movlw	64
  7833  013DDC  0100               	movlb	0	; () banked
  7834  013DDE  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7835  013DE0  ECAF  F0C1         	call	___ftdiv	;wreg free
  7836  013DE4  C0A5  F200         	movff	?___ftdiv,_Avg_RYB_Voltage
  7837  013DE8  C0A6  F201         	movff	?___ftdiv+1,_Avg_RYB_Voltage+1
  7838  013DEC  C0A7  F202         	movff	?___ftdiv+2,_Avg_RYB_Voltage+2
  7839                           
  7840                           ;Power_Meter.c: 267: Avg_RYB_Current = ((R_Curr + Y_Curr + B_Curr) / 3);
  7841  013DF0  C0D6  F090         	movff	_Y_Curr,___ftadd@f2
  7842  013DF4  C0D7  F091         	movff	_Y_Curr+1,___ftadd@f2+1
  7843  013DF8  C0D8  F092         	movff	_Y_Curr+2,___ftadd@f2+2
  7844  013DFC  C0CD  F08D         	movff	_R_Curr,___ftadd@f1
  7845  013E00  C0CE  F08E         	movff	_R_Curr+1,___ftadd@f1+1
  7846  013E04  C0CF  F08F         	movff	_R_Curr+2,___ftadd@f1+2
  7847  013E08  ECBE  F0B2         	call	___ftadd	;wreg free
  7848  013E0C  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8077
  7849  013E10  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8077+1
  7850  013E14  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8077+2
  7851                           
  7852                           ;Power_Meter.c: 267: Avg_RYB_Current = ((R_Curr + Y_Curr + B_Curr) / 3);
  7853  013E18  C0C4  F090         	movff	_B_Curr,___ftadd@f2
  7854  013E1C  C0C5  F091         	movff	_B_Curr+1,___ftadd@f2+1
  7855  013E20  C0C6  F092         	movff	_B_Curr+2,___ftadd@f2+2
  7856  013E24  C0B4  F08D         	movff	_Volt_Curr_Avg$8077,___ftadd@f1
  7857  013E28  C0B5  F08E         	movff	_Volt_Curr_Avg$8077+1,___ftadd@f1+1
  7858  013E2C  C0B6  F08F         	movff	_Volt_Curr_Avg$8077+2,___ftadd@f1+2
  7859  013E30  ECBE  F0B2         	call	___ftadd	;wreg free
  7860  013E34  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7861  013E38  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7862  013E3C  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7863  013E40  0E00               	movlw	0
  7864  013E42  0100               	movlb	0	; () banked
  7865  013E44  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7866  013E46  0E40               	movlw	64
  7867  013E48  0100               	movlb	0	; () banked
  7868  013E4A  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7869  013E4C  0E40               	movlw	64
  7870  013E4E  0100               	movlb	0	; () banked
  7871  013E50  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7872  013E52  ECAF  F0C1         	call	___ftdiv	;wreg free
  7873  013E56  C0A5  F100         	movff	?___ftdiv,_Avg_RYB_Current
  7874  013E5A  C0A6  F101         	movff	?___ftdiv+1,_Avg_RYB_Current+1
  7875  013E5E  C0A7  F102         	movff	?___ftdiv+2,_Avg_RYB_Current+2
  7876  013E62  0012               	return		;funcret
  7877  013E64                     __end_of_Volt_Curr_Avg:
  7878                           	opt stack 0
  7879                           tblptru	equ	0xFF8
  7880                           tblptrh	equ	0xFF7
  7881                           tblptrl	equ	0xFF6
  7882                           tablat	equ	0xFF5
  7883                           intcon	equ	0xFF2
  7884                           postinc0	equ	0xFEE
  7885                           wreg	equ	0xFE8
  7886                           postdec1	equ	0xFE5
  7887                           fsr1h	equ	0xFE2
  7888                           fsr1l	equ	0xFE1
  7889                           status	equ	0xFD8
  7890                           
  7891 ;; *************** function _Turbine_RPM_Initiate *****************
  7892 ;; Defined at:
  7893 ;;		line 34 in file "Initialization.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;		None
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;		None
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  1    wreg      void 
  7900 ;; Registers used:
  7901 ;;		wreg, status,2
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;Total ram usage:        0 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    3
  7914 ;; This function calls:
  7915 ;;		Nothing
  7916 ;; This function is called by:
  7917 ;;		_main
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text11
  7922  01B122                     __ptext11:
  7923                           	opt stack 0
  7924  01B122                     _Turbine_RPM_Initiate:
  7925                           	opt stack 27
  7926                           
  7927                           ;Initialization.c: 36: TRISEbits.TRISE5=1;
  7928                           
  7929                           ;incstack = 0
  7930  01B122  8A96               	bsf	3990,5,c	;volatile
  7931                           
  7932                           ;Initialization.c: 37: CCP7CON = 0x04;
  7933  01B124  0E04               	movlw	4
  7934  01B126  6E6E               	movwf	3950,c	;volatile
  7935                           
  7936                           ;Initialization.c: 38: CCP7IE = 1;
  7937  01B128  88B6               	bsf	4022,4,c	;volatile
  7938                           
  7939                           ;Initialization.c: 39: CCP7IF = 0;
  7940  01B12A  98B7               	bcf	4023,4,c	;volatile
  7941  01B12C  0012               	return		;funcret
  7942  01B12E                     __end_of_Turbine_RPM_Initiate:
  7943                           	opt stack 0
  7944                           tblptru	equ	0xFF8
  7945                           tblptrh	equ	0xFF7
  7946                           tblptrl	equ	0xFF6
  7947                           tablat	equ	0xFF5
  7948                           intcon	equ	0xFF2
  7949                           postinc0	equ	0xFEE
  7950                           wreg	equ	0xFE8
  7951                           postdec1	equ	0xFE5
  7952                           fsr1h	equ	0xFE2
  7953                           fsr1l	equ	0xFE1
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function _Turbine_RPM_Cal *****************
  7957 ;; Defined at:
  7958 ;;		line 16 in file "RPM_Measurement.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;		None
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;		None
  7963 ;; Return value:  Size  Location     Type
  7964 ;;                  1    wreg      void 
  7965 ;; Registers used:
  7966 ;;		wreg, status,2, status,0, cstack
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;Total ram usage:        2 bytes
  7977 ;; Hardware stack levels used:    1
  7978 ;; Hardware stack levels required when called:    5
  7979 ;; This function calls:
  7980 ;;		___ftadd
  7981 ;;		___ftdiv
  7982 ;;		___ftge
  7983 ;;		___ftmul
  7984 ;;		___lwtoft
  7985 ;; This function is called by:
  7986 ;;		_main
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           	psect	text12
  7991  01478C                     __ptext12:
  7992                           	opt stack 0
  7993  01478C                     _Turbine_RPM_Cal:
  7994                           	opt stack 25
  7995                           
  7996                           ;RPM_Measurement.c: 18: if(TRPM_Cal)
  7997                           
  7998                           ;incstack = 0
  7999  01478C  0100               	movlb	0	; () banked
  8000  01478E  51EC               	movf	_TRPM_Cal& (0+255),w,b
  8001  014790  B4D8               	btfsc	status,2,c
  8002  014792  0012               	return	
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;RPM_Measurement.c: 19: {
  8006                           ;RPM_Measurement.c: 20: TRPM_Cal = 0;
  8007  014794  0E00               	movlw	0
  8008  014796  0100               	movlb	0	; () banked
  8009  014798  6FEC               	movwf	_TRPM_Cal& (0+255),b
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;RPM_Measurement.c: 21: CCP7IE = 0;
  8013  01479A  98B6               	bcf	4022,4,c	;volatile
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;RPM_Measurement.c: 22: if(TRPM_Cap_New > TRPM_Cap_Old)
  8017  01479C  0101               	movlb	1	; () banked
  8018  01479E  5130               	movf	_TRPM_Cap_New& (0+255),w,b
  8019  0147A0  0101               	movlb	1	; () banked
  8020  0147A2  5D32               	subwf	_TRPM_Cap_Old& (0+255),w,b
  8021  0147A4  0101               	movlb	1	; () banked
  8022  0147A6  5131               	movf	(_TRPM_Cap_New+1)& (0+255),w,b
  8023  0147A8  0101               	movlb	1	; () banked
  8024  0147AA  5933               	subwfb	(_TRPM_Cap_Old+1)& (0+255),w,b
  8025  0147AC  B0D8               	btfsc	status,0,c
  8026  0147AE  D035               	goto	l22874
  8027                           
  8028                           ; BSR set to: 1
  8029                           ;RPM_Measurement.c: 23: {
  8030                           ;RPM_Measurement.c: 24: RPM_PWM = (TRPM_Cap_New - TRPM_Cap_Old + 1) ;
  8031  0147B0  C132  F0B4         	movff	_TRPM_Cap_Old,??_Turbine_RPM_Cal
  8032  0147B4  C133  F0B5         	movff	_TRPM_Cap_Old+1,??_Turbine_RPM_Cal+1
  8033  0147B8  0100               	movlb	0	; () banked
  8034  0147BA  1FB4               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  8035  0147BC  1FB5               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8036  0147BE  4BB4               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  8037  0147C0  2BB5               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8038  0147C2  0101               	movlb	1	; () banked
  8039  0147C4  5130               	movf	_TRPM_Cap_New& (0+255),w,b
  8040  0147C6  0100               	movlb	0	; () banked
  8041  0147C8  27B4               	addwf	??_Turbine_RPM_Cal& (0+255),f,b
  8042  0147CA  0101               	movlb	1	; () banked
  8043  0147CC  5131               	movf	(_TRPM_Cap_New+1)& (0+255),w,b
  8044  0147CE  0100               	movlb	0	; () banked
  8045  0147D0  23B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8046  0147D2  0E01               	movlw	1
  8047  0147D4  0100               	movlb	0	; () banked
  8048  0147D6  25B4               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  8049  0147D8  0102               	movlb	2	; () banked
  8050  0147DA  6FF9               	movwf	_RPM_PWM& (0+255),b
  8051  0147DC  0E00               	movlw	0
  8052  0147DE  0100               	movlb	0	; () banked
  8053  0147E0  21B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  8054  0147E2  0102               	movlb	2	; () banked
  8055  0147E4  6FFA               	movwf	(_RPM_PWM+1)& (0+255),b
  8056                           
  8057                           ;RPM_Measurement.c: 25: RPM_Time = (Timer1_OF_counter_New - Timer1_OF_counter_Old);
  8058  0147E6  C2A0  F0B4         	movff	_Timer1_OF_counter_Old,??_Turbine_RPM_Cal
  8059  0147EA  C2A1  F0B5         	movff	_Timer1_OF_counter_Old+1,??_Turbine_RPM_Cal+1
  8060  0147EE  0100               	movlb	0	; () banked
  8061  0147F0  1FB4               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  8062  0147F2  1FB5               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8063  0147F4  4BB4               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  8064  0147F6  2BB5               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8065  0147F8  0101               	movlb	1	; () banked
  8066  0147FA  5136               	movf	_Timer1_OF_counter_New& (0+255),w,b
  8067  0147FC  0100               	movlb	0	; () banked
  8068  0147FE  25B4               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  8069  014800  0101               	movlb	1	; () banked
  8070  014802  6F2C               	movwf	_RPM_Time& (0+255),b
  8071  014804  0101               	movlb	1	; () banked
  8072  014806  5137               	movf	(_Timer1_OF_counter_New+1)& (0+255),w,b
  8073  014808  0100               	movlb	0	; () banked
  8074  01480A  21B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  8075  01480C  0101               	movlb	1	; () banked
  8076  01480E  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
  8077                           
  8078                           ; BSR set to: 1
  8079                           ;RPM_Measurement.c: 26: Flag_temp = 0;
  8080  014810  0E00               	movlw	0
  8081  014812  0105               	movlb	5	; () banked
  8082  014814  6FC7               	movwf	(_Flag_temp+1)& (0+255),b
  8083  014816  0E00               	movlw	0
  8084  014818  D03E               	goto	L4
  8085  01481A                     l22874:
  8086                           
  8087                           ;RPM_Measurement.c: 28: else
  8088                           ;RPM_Measurement.c: 29: {
  8089                           ;RPM_Measurement.c: 30: RPM_PWM = (TRPM_Cap_New - TRPM_Cap_Old + 1) + 65536;
  8090  01481A  C132  F0B4         	movff	_TRPM_Cap_Old,??_Turbine_RPM_Cal
  8091  01481E  C133  F0B5         	movff	_TRPM_Cap_Old+1,??_Turbine_RPM_Cal+1
  8092  014822  0100               	movlb	0	; () banked
  8093  014824  1FB4               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  8094  014826  1FB5               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8095  014828  4BB4               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  8096  01482A  2BB5               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8097  01482C  0101               	movlb	1	; () banked
  8098  01482E  5130               	movf	_TRPM_Cap_New& (0+255),w,b
  8099  014830  0100               	movlb	0	; () banked
  8100  014832  27B4               	addwf	??_Turbine_RPM_Cal& (0+255),f,b
  8101  014834  0101               	movlb	1	; () banked
  8102  014836  5131               	movf	(_TRPM_Cap_New+1)& (0+255),w,b
  8103  014838  0100               	movlb	0	; () banked
  8104  01483A  23B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8105  01483C  0E01               	movlw	1
  8106  01483E  0100               	movlb	0	; () banked
  8107  014840  25B4               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  8108  014842  0102               	movlb	2	; () banked
  8109  014844  6FF9               	movwf	_RPM_PWM& (0+255),b
  8110  014846  0E00               	movlw	0
  8111  014848  0100               	movlb	0	; () banked
  8112  01484A  21B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  8113  01484C  0102               	movlb	2	; () banked
  8114  01484E  6FFA               	movwf	(_RPM_PWM+1)& (0+255),b
  8115                           
  8116                           ;RPM_Measurement.c: 31: RPM_Time = (Timer1_OF_counter_New - Timer1_OF_counter_Old);
  8117  014850  C2A0  F0B4         	movff	_Timer1_OF_counter_Old,??_Turbine_RPM_Cal
  8118  014854  C2A1  F0B5         	movff	_Timer1_OF_counter_Old+1,??_Turbine_RPM_Cal+1
  8119  014858  0100               	movlb	0	; () banked
  8120  01485A  1FB4               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  8121  01485C  1FB5               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8122  01485E  4BB4               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  8123  014860  2BB5               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8124  014862  0101               	movlb	1	; () banked
  8125  014864  5136               	movf	_Timer1_OF_counter_New& (0+255),w,b
  8126  014866  0100               	movlb	0	; () banked
  8127  014868  25B4               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  8128  01486A  0101               	movlb	1	; () banked
  8129  01486C  6F2C               	movwf	_RPM_Time& (0+255),b
  8130  01486E  0101               	movlb	1	; () banked
  8131  014870  5137               	movf	(_Timer1_OF_counter_New+1)& (0+255),w,b
  8132  014872  0100               	movlb	0	; () banked
  8133  014874  21B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  8134  014876  0101               	movlb	1	; () banked
  8135  014878  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
  8136                           
  8137                           ;RPM_Measurement.c: 32: RPM_Time = RPM_Time -1;
  8138  01487A  0EFF               	movlw	255
  8139  01487C  0101               	movlb	1	; () banked
  8140  01487E  252C               	addwf	_RPM_Time& (0+255),w,b
  8141  014880  0101               	movlb	1	; () banked
  8142  014882  6F2C               	movwf	_RPM_Time& (0+255),b
  8143  014884  0EFF               	movlw	255
  8144  014886  0101               	movlb	1	; () banked
  8145  014888  212D               	addwfc	(_RPM_Time+1)& (0+255),w,b
  8146  01488A  0101               	movlb	1	; () banked
  8147  01488C  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
  8148                           
  8149                           ; BSR set to: 1
  8150                           ;RPM_Measurement.c: 33: Flag_temp = 1;
  8151  01488E  0E00               	movlw	0
  8152  014890  0105               	movlb	5	; () banked
  8153  014892  6FC7               	movwf	(_Flag_temp+1)& (0+255),b
  8154  014894  0E01               	movlw	1
  8155  014896                     L4:
  8156  014896  6FC6               	movwf	_Flag_temp& (0+255),b
  8157                           
  8158                           ; BSR set to: 5
  8159                           ;RPM_Measurement.c: 34: }
  8160                           ;RPM_Measurement.c: 35: PWM_Temp = (0.000004 * RPM_PWM);
  8161                           
  8162                           ; BSR set to: 5
  8163  014898  C2F9  F068         	movff	_RPM_PWM,___lwtoft@c
  8164  01489C  C2FA  F069         	movff	_RPM_PWM+1,___lwtoft@c+1
  8165  0148A0  ECCE  F0D7         	call	___lwtoft	;wreg free
  8166  0148A4  C068  F074         	movff	?___lwtoft,___ftmul@f1
  8167  0148A8  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  8168  0148AC  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  8169  0148B0  0E38               	movlw	56
  8170  0148B2  0100               	movlb	0	; () banked
  8171  0148B4  6F77               	movwf	___ftmul@f2& (0+255),b
  8172  0148B6  0E86               	movlw	134
  8173  0148B8  0100               	movlb	0	; () banked
  8174  0148BA  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8175  0148BC  0E36               	movlw	54
  8176  0148BE  0100               	movlb	0	; () banked
  8177  0148C0  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8178  0148C2  EC00  F0C1         	call	___ftmul	;wreg free
  8179  0148C6  C074  F4AE         	movff	?___ftmul,_PWM_Temp
  8180  0148CA  C075  F4AF         	movff	?___ftmul+1,_PWM_Temp+1
  8181  0148CE  C076  F4B0         	movff	?___ftmul+2,_PWM_Temp+2
  8182                           
  8183                           ;RPM_Measurement.c: 37: TRPM_Time = PWM_Temp + (0.262 * RPM_Time);
  8184  0148D2  0E25               	movlw	37
  8185  0148D4  0100               	movlb	0	; () banked
  8186  0148D6  6F77               	movwf	___ftmul@f2& (0+255),b
  8187  0148D8  0E86               	movlw	134
  8188  0148DA  0100               	movlb	0	; () banked
  8189  0148DC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8190  0148DE  0E3E               	movlw	62
  8191  0148E0  0100               	movlb	0	; () banked
  8192  0148E2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8193  0148E4  C12C  F068         	movff	_RPM_Time,___lwtoft@c
  8194  0148E8  C12D  F069         	movff	_RPM_Time+1,___lwtoft@c+1
  8195  0148EC  ECCE  F0D7         	call	___lwtoft	;wreg free
  8196  0148F0  C068  F074         	movff	?___lwtoft,___ftmul@f1
  8197  0148F4  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  8198  0148F8  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  8199  0148FC  EC00  F0C1         	call	___ftmul	;wreg free
  8200  014900  C074  F08D         	movff	?___ftmul,___ftadd@f1
  8201  014904  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  8202  014908  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  8203  01490C  C4AE  F090         	movff	_PWM_Temp,___ftadd@f2
  8204  014910  C4AF  F091         	movff	_PWM_Temp+1,___ftadd@f2+1
  8205  014914  C4B0  F092         	movff	_PWM_Temp+2,___ftadd@f2+2
  8206  014918  ECBE  F0B2         	call	___ftadd	;wreg free
  8207  01491C  C08D  F4ED         	movff	?___ftadd,_TRPM_Time
  8208  014920  C08E  F4EE         	movff	?___ftadd+1,_TRPM_Time+1
  8209  014924  C08F  F4EF         	movff	?___ftadd+2,_TRPM_Time+2
  8210                           
  8211                           ;RPM_Measurement.c: 39: TRPM_Frequency = 1/TRPM_Time;
  8212  014928  0E00               	movlw	0
  8213  01492A  0100               	movlb	0	; () banked
  8214  01492C  6FA5               	movwf	___ftdiv@f1& (0+255),b
  8215  01492E  0E80               	movlw	128
  8216  014930  0100               	movlb	0	; () banked
  8217  014932  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
  8218  014934  0E3F               	movlw	63
  8219  014936  0100               	movlb	0	; () banked
  8220  014938  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
  8221  01493A  C4ED  F0A8         	movff	_TRPM_Time,___ftdiv@f2
  8222  01493E  C4EE  F0A9         	movff	_TRPM_Time+1,___ftdiv@f2+1
  8223  014942  C4EF  F0AA         	movff	_TRPM_Time+2,___ftdiv@f2+2
  8224  014946  ECAF  F0C1         	call	___ftdiv	;wreg free
  8225  01494A  C0A5  F4EA         	movff	?___ftdiv,_TRPM_Frequency
  8226  01494E  C0A6  F4EB         	movff	?___ftdiv+1,_TRPM_Frequency+1
  8227  014952  C0A7  F4EC         	movff	?___ftdiv+2,_TRPM_Frequency+2
  8228                           
  8229                           ;RPM_Measurement.c: 41: if(RPM_counter < 2)
  8230  014956  0E02               	movlw	2
  8231  014958  0100               	movlb	0	; () banked
  8232  01495A  61EB               	cpfslt	_RPM_counter& (0+255),b
  8233  01495C  D002               	goto	l22888
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;RPM_Measurement.c: 42: {
  8237                           ;RPM_Measurement.c: 43: RPM_counter++;
  8238  01495E  0100               	movlb	0	; () banked
  8239  014960  2BEB               	incf	_RPM_counter& (0+255),f,b
  8240  014962                     l22888:
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;RPM_Measurement.c: 44: }
  8244                           ;RPM_Measurement.c: 46: if(RPM_counter == 2)
  8245  014962  0E02               	movlw	2
  8246  014964  0100               	movlb	0	; () banked
  8247  014966  19EB               	xorwf	_RPM_counter& (0+255),w,b
  8248  014968  A4D8               	btfss	status,2,c
  8249  01496A  D09D               	goto	l22908
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;RPM_Measurement.c: 47: {
  8253                           ;RPM_Measurement.c: 48: Turb_RPM = (60 * TRPM_Frequency) / 1;
  8254  01496C  0E00               	movlw	0
  8255  01496E  0100               	movlb	0	; () banked
  8256  014970  6F77               	movwf	___ftmul@f2& (0+255),b
  8257  014972  0E70               	movlw	112
  8258  014974  0100               	movlb	0	; () banked
  8259  014976  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8260  014978  0E42               	movlw	66
  8261  01497A  0100               	movlb	0	; () banked
  8262  01497C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8263  01497E  C4EA  F074         	movff	_TRPM_Frequency,___ftmul@f1
  8264  014982  C4EB  F075         	movff	_TRPM_Frequency+1,___ftmul@f1+1
  8265  014986  C4EC  F076         	movff	_TRPM_Frequency+2,___ftmul@f1+2
  8266  01498A  EC00  F0C1         	call	___ftmul	;wreg free
  8267  01498E  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
  8268  014992  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
  8269  014996  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
  8270  01499A  0E00               	movlw	0
  8271  01499C  0100               	movlb	0	; () banked
  8272  01499E  6FA8               	movwf	___ftdiv@f2& (0+255),b
  8273  0149A0  0E80               	movlw	128
  8274  0149A2  0100               	movlb	0	; () banked
  8275  0149A4  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  8276  0149A6  0E3F               	movlw	63
  8277  0149A8  0100               	movlb	0	; () banked
  8278  0149AA  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  8279  0149AC  ECAF  F0C1         	call	___ftdiv	;wreg free
  8280  0149B0  C0A5  F4BA         	movff	?___ftdiv,_Turb_RPM
  8281  0149B4  C0A6  F4BB         	movff	?___ftdiv+1,_Turb_RPM+1
  8282  0149B8  C0A7  F4BC         	movff	?___ftdiv+2,_Turb_RPM+2
  8283                           
  8284                           ;RPM_Measurement.c: 49: Turbine_RPM_Old = Turbine_RPM_New;
  8285  0149BC  C115  F118         	movff	_Turbine_RPM_New,_Turbine_RPM_Old
  8286  0149C0  C116  F119         	movff	_Turbine_RPM_New+1,_Turbine_RPM_Old+1
  8287  0149C4  C117  F11A         	movff	_Turbine_RPM_New+2,_Turbine_RPM_Old+2
  8288                           
  8289                           ;RPM_Measurement.c: 50: Turbine_RPM_New = Turb_RPM;
  8290  0149C8  C4BA  F115         	movff	_Turb_RPM,_Turbine_RPM_New
  8291  0149CC  C4BB  F116         	movff	_Turb_RPM+1,_Turbine_RPM_New+1
  8292  0149D0  C4BC  F117         	movff	_Turb_RPM+2,_Turbine_RPM_New+2
  8293                           
  8294                           ;RPM_Measurement.c: 52: if(Turbine_state == RAMPUP_STATE || Turbine_state == RUNNING_STA
      +                          TE)
  8295  0149D4  0100               	movlb	0	; () banked
  8296  0149D6  05F0               	decf	_Turbine_state& (0+255),w,b
  8297  0149D8  B4D8               	btfsc	status,2,c
  8298  0149DA  D005               	goto	l22900
  8299                           
  8300                           ; BSR set to: 0
  8301  0149DC  0E02               	movlw	2
  8302  0149DE  0100               	movlb	0	; () banked
  8303  0149E0  19F0               	xorwf	_Turbine_state& (0+255),w,b
  8304  0149E2  A4D8               	btfss	status,2,c
  8305  0149E4  D051               	goto	l22904
  8306  0149E6                     l22900:
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;RPM_Measurement.c: 53: {
  8310                           ;RPM_Measurement.c: 54: if( Turbine_RPM_New > (Turbine_RPM_Old + 10) || (Turbine_RPM_New
      +                           < (Turbine_RPM_Old - 10) ) )
  8311  0149E6  0E00               	movlw	0
  8312  0149E8  0100               	movlb	0	; () banked
  8313  0149EA  6F90               	movwf	___ftadd@f2& (0+255),b
  8314  0149EC  0E20               	movlw	32
  8315  0149EE  0100               	movlb	0	; () banked
  8316  0149F0  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  8317  0149F2  0E41               	movlw	65
  8318  0149F4  0100               	movlb	0	; () banked
  8319  0149F6  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  8320  0149F8  C118  F08D         	movff	_Turbine_RPM_Old,___ftadd@f1
  8321  0149FC  C119  F08E         	movff	_Turbine_RPM_Old+1,___ftadd@f1+1
  8322  014A00  C11A  F08F         	movff	_Turbine_RPM_Old+2,___ftadd@f1+2
  8323  014A04  ECBE  F0B2         	call	___ftadd	;wreg free
  8324  014A08  C08D  F099         	movff	?___ftadd,___ftge@ff1
  8325  014A0C  C08E  F09A         	movff	?___ftadd+1,___ftge@ff1+1
  8326  014A10  C08F  F09B         	movff	?___ftadd+2,___ftge@ff1+2
  8327  014A14  C115  F09C         	movff	_Turbine_RPM_New,___ftge@ff2
  8328  014A18  C116  F09D         	movff	_Turbine_RPM_New+1,___ftge@ff2+1
  8329  014A1C  C117  F09E         	movff	_Turbine_RPM_New+2,___ftge@ff2+2
  8330  014A20  EC4B  F0CB         	call	___ftge	;wreg free
  8331  014A24  0100               	movlb	0	; () banked
  8332  014A26  A0D8               	btfss	status,0,c
  8333  014A28  D022               	goto	l3774
  8334                           
  8335                           ; BSR set to: 0
  8336  014A2A  C115  F099         	movff	_Turbine_RPM_New,___ftge@ff1
  8337  014A2E  C116  F09A         	movff	_Turbine_RPM_New+1,___ftge@ff1+1
  8338  014A32  C117  F09B         	movff	_Turbine_RPM_New+2,___ftge@ff1+2
  8339  014A36  0E00               	movlw	0
  8340  014A38  0100               	movlb	0	; () banked
  8341  014A3A  6F90               	movwf	___ftadd@f2& (0+255),b
  8342  014A3C  0E20               	movlw	32
  8343  014A3E  0100               	movlb	0	; () banked
  8344  014A40  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  8345  014A42  0EC1               	movlw	193
  8346  014A44  0100               	movlb	0	; () banked
  8347  014A46  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  8348  014A48  C118  F08D         	movff	_Turbine_RPM_Old,___ftadd@f1
  8349  014A4C  C119  F08E         	movff	_Turbine_RPM_Old+1,___ftadd@f1+1
  8350  014A50  C11A  F08F         	movff	_Turbine_RPM_Old+2,___ftadd@f1+2
  8351  014A54  ECBE  F0B2         	call	___ftadd	;wreg free
  8352  014A58  C08D  F09C         	movff	?___ftadd,___ftge@ff2
  8353  014A5C  C08E  F09D         	movff	?___ftadd+1,___ftge@ff2+1
  8354  014A60  C08F  F09E         	movff	?___ftadd+2,___ftge@ff2+2
  8355  014A64  EC4B  F0CB         	call	___ftge	;wreg free
  8356  014A68  0100               	movlb	0	; () banked
  8357  014A6A  B0D8               	btfsc	status,0,c
  8358  014A6C  D016               	goto	l3779
  8359  014A6E                     l3774:
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;RPM_Measurement.c: 55: {
  8363                           ;RPM_Measurement.c: 56: Turbine_RPM = Turbine_RPM_Old;
  8364  014A6E  C118  F00A         	movff	_Turbine_RPM_Old,_Turbine_RPM
  8365  014A72  C119  F00B         	movff	_Turbine_RPM_Old+1,_Turbine_RPM+1
  8366  014A76  C11A  F00C         	movff	_Turbine_RPM_Old+2,_Turbine_RPM+2
  8367                           
  8368                           ;RPM_Measurement.c: 57: Turbine_RPM_New = Turbine_RPM_Old;
  8369  014A7A  C118  F115         	movff	_Turbine_RPM_Old,_Turbine_RPM_New
  8370  014A7E  C119  F116         	movff	_Turbine_RPM_Old+1,_Turbine_RPM_New+1
  8371  014A82  C11A  F117         	movff	_Turbine_RPM_Old+2,_Turbine_RPM_New+2
  8372                           
  8373                           ;RPM_Measurement.c: 58: }
  8374  014A86  D00F               	goto	l22908
  8375  014A88                     l22904:
  8376                           
  8377                           ; BSR set to: 0
  8378                           ;RPM_Measurement.c: 64: else if(Turbine_state == STARTUP_STATE || Turbine_state == STOPP
      +                          ING_STATE)
  8379  014A88  0100               	movlb	0	; () banked
  8380  014A8A  51F0               	movf	_Turbine_state& (0+255),w,b
  8381  014A8C  B4D8               	btfsc	status,2,c
  8382  014A8E  D005               	goto	l3779
  8383                           
  8384                           ; BSR set to: 0
  8385  014A90  0E03               	movlw	3
  8386  014A92  0100               	movlb	0	; () banked
  8387  014A94  19F0               	xorwf	_Turbine_state& (0+255),w,b
  8388  014A96  A4D8               	btfss	status,2,c
  8389  014A98  D006               	goto	l22908
  8390  014A9A                     l3779:
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;RPM_Measurement.c: 65: {
  8394                           ;RPM_Measurement.c: 66: Turbine_RPM = Turbine_RPM_New;
  8395  014A9A  C115  F00A         	movff	_Turbine_RPM_New,_Turbine_RPM
  8396  014A9E  C116  F00B         	movff	_Turbine_RPM_New+1,_Turbine_RPM+1
  8397  014AA2  C117  F00C         	movff	_Turbine_RPM_New+2,_Turbine_RPM+2
  8398  014AA6                     l22908:
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;RPM_Measurement.c: 67: }
  8402                           ;RPM_Measurement.c: 70: }
  8403                           ;RPM_Measurement.c: 71: if(Turbine_state == RAMPUP_STATE)
  8404  014AA6  0100               	movlb	0	; () banked
  8405  014AA8  05F0               	decf	_Turbine_state& (0+255),w,b
  8406  014AAA  A4D8               	btfss	status,2,c
  8407  014AAC  D00C               	goto	l22914
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;RPM_Measurement.c: 72: {
  8411                           ;RPM_Measurement.c: 73: if(Pitch_Counter < 2)
  8412  014AAE  0102               	movlb	2	; () banked
  8413  014AB0  5195               	movf	(_Pitch_Counter+1)& (0+255),w,b
  8414  014AB2  E112               	bnz	l22918
  8415  014AB4  0E02               	movlw	2
  8416  014AB6  0102               	movlb	2	; () banked
  8417  014AB8  5D94               	subwf	_Pitch_Counter& (0+255),w,b
  8418  014ABA  B0D8               	btfsc	status,0,c
  8419  014ABC  D00D               	goto	l22918
  8420                           
  8421                           ; BSR set to: 2
  8422                           ;RPM_Measurement.c: 74: {
  8423                           ;RPM_Measurement.c: 75: Pitch_Counter++;
  8424  014ABE  0102               	movlb	2	; () banked
  8425  014AC0  4B94               	infsnz	_Pitch_Counter& (0+255),f,b
  8426  014AC2  2B95               	incf	(_Pitch_Counter+1)& (0+255),f,b
  8427                           
  8428                           ; BSR set to: 2
  8429                           ;RPM_Measurement.c: 76: }
  8430                           ;RPM_Measurement.c: 77: }
  8431  014AC4  D009               	goto	l22918
  8432  014AC6                     l22914:
  8433                           
  8434                           ;RPM_Measurement.c: 78: else if(Turbine_state != RAMPUP_STATE)
  8435  014AC6  0100               	movlb	0	; () banked
  8436  014AC8  05F0               	decf	_Turbine_state& (0+255),w,b
  8437  014ACA  B4D8               	btfsc	status,2,c
  8438  014ACC  D005               	goto	l22918
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;RPM_Measurement.c: 79: {
  8442                           ;RPM_Measurement.c: 80: Pitch_Counter = 0;
  8443  014ACE  0E00               	movlw	0
  8444  014AD0  0102               	movlb	2	; () banked
  8445  014AD2  6F95               	movwf	(_Pitch_Counter+1)& (0+255),b
  8446  014AD4  0E00               	movlw	0
  8447  014AD6  6F94               	movwf	_Pitch_Counter& (0+255),b
  8448  014AD8                     l22918:
  8449                           
  8450                           ;RPM_Measurement.c: 82: }
  8451                           ;RPM_Measurement.c: 83: if(Pitch_Counter == 2)
  8452  014AD8  0E02               	movlw	2
  8453  014ADA  0102               	movlb	2	; () banked
  8454  014ADC  1994               	xorwf	_Pitch_Counter& (0+255),w,b
  8455  014ADE  0102               	movlb	2	; () banked
  8456  014AE0  1195               	iorwf	(_Pitch_Counter+1)& (0+255),w,b
  8457  014AE2  A4D8               	btfss	status,2,c
  8458  014AE4  D005               	goto	l3784
  8459                           
  8460                           ; BSR set to: 2
  8461                           ;RPM_Measurement.c: 84: {
  8462                           ;RPM_Measurement.c: 85: Pitching_FlAG = 1;
  8463  014AE6  0E00               	movlw	0
  8464  014AE8  0102               	movlb	2	; () banked
  8465  014AEA  6F97               	movwf	(_Pitching_FlAG+1)& (0+255),b
  8466  014AEC  0E01               	movlw	1
  8467  014AEE  6F96               	movwf	_Pitching_FlAG& (0+255),b
  8468  014AF0                     l3784:
  8469                           
  8470                           ; BSR set to: 2
  8471                           ;RPM_Measurement.c: 86: }
  8472                           ;RPM_Measurement.c: 88: Timer1_OF_counter_Turbine = 0;
  8473  014AF0  0E00               	movlw	0
  8474  014AF2  0103               	movlb	3	; () banked
  8475  014AF4  6FF4               	movwf	(_Timer1_OF_counter_Turbine+1)& (0+255),b
  8476  014AF6  0E00               	movlw	0
  8477  014AF8  6FF3               	movwf	_Timer1_OF_counter_Turbine& (0+255),b
  8478                           
  8479                           ; BSR set to: 3
  8480                           ;RPM_Measurement.c: 89: RPM_Time_1 = RPM_Time;
  8481  014AFA  C12C  F5D4         	movff	_RPM_Time,_RPM_Time_1
  8482  014AFE  C12D  F5D5         	movff	_RPM_Time+1,_RPM_Time_1+1
  8483                           
  8484                           ;RPM_Measurement.c: 91: RPM_PWM = 0;
  8485  014B02  0E00               	movlw	0
  8486  014B04  0102               	movlb	2	; () banked
  8487  014B06  6FFA               	movwf	(_RPM_PWM+1)& (0+255),b
  8488  014B08  0E00               	movlw	0
  8489  014B0A  6FF9               	movwf	_RPM_PWM& (0+255),b
  8490                           
  8491                           ;RPM_Measurement.c: 92: RPM_Time = 0;
  8492  014B0C  0E00               	movlw	0
  8493  014B0E  0101               	movlb	1	; () banked
  8494  014B10  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
  8495  014B12  0E00               	movlw	0
  8496  014B14  6F2C               	movwf	_RPM_Time& (0+255),b
  8497                           
  8498                           ;RPM_Measurement.c: 93: TRPM_Frequency = 0;
  8499  014B16  0E00               	movlw	0
  8500  014B18  0104               	movlb	4	; () banked
  8501  014B1A  6FEA               	movwf	_TRPM_Frequency& (0+255),b
  8502  014B1C  0E00               	movlw	0
  8503  014B1E  0104               	movlb	4	; () banked
  8504  014B20  6FEB               	movwf	(_TRPM_Frequency+1)& (0+255),b
  8505  014B22  0E00               	movlw	0
  8506  014B24  0104               	movlb	4	; () banked
  8507  014B26  6FEC               	movwf	(_TRPM_Frequency+2)& (0+255),b
  8508                           
  8509                           ;RPM_Measurement.c: 94: TRPM_Time = 0;
  8510  014B28  0E00               	movlw	0
  8511  014B2A  0104               	movlb	4	; () banked
  8512  014B2C  6FED               	movwf	_TRPM_Time& (0+255),b
  8513  014B2E  0E00               	movlw	0
  8514  014B30  0104               	movlb	4	; () banked
  8515  014B32  6FEE               	movwf	(_TRPM_Time+1)& (0+255),b
  8516  014B34  0E00               	movlw	0
  8517  014B36  0104               	movlb	4	; () banked
  8518  014B38  6FEF               	movwf	(_TRPM_Time+2)& (0+255),b
  8519                           
  8520                           ; BSR set to: 4
  8521                           ;RPM_Measurement.c: 95: CCP7IE = 1;
  8522  014B3A  88B6               	bsf	4022,4,c	;volatile
  8523                           
  8524                           ; BSR set to: 4
  8525                           ;RPM_Measurement.c: 96: CCP7IF = 0;
  8526  014B3C  98B7               	bcf	4023,4,c	;volatile
  8527  014B3E  0012               	return	
  8528  014B40                     __end_of_Turbine_RPM_Cal:
  8529                           	opt stack 0
  8530                           tblptru	equ	0xFF8
  8531                           tblptrh	equ	0xFF7
  8532                           tblptrl	equ	0xFF6
  8533                           tablat	equ	0xFF5
  8534                           intcon	equ	0xFF2
  8535                           postinc0	equ	0xFEE
  8536                           wreg	equ	0xFE8
  8537                           postdec1	equ	0xFE5
  8538                           fsr1h	equ	0xFE2
  8539                           fsr1l	equ	0xFE1
  8540                           status	equ	0xFD8
  8541                           
  8542 ;; *************** function _Timer7_Init *****************
  8543 ;; Defined at:
  8544 ;;		line 27 in file "Initialization.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;		None
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;		None
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  1    wreg      void 
  8551 ;; Registers used:
  8552 ;;		wreg, status,2
  8553 ;; Tracked objects:
  8554 ;;		On entry : 0/0
  8555 ;;		On exit  : 0/0
  8556 ;;		Unchanged: 0/0
  8557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;Total ram usage:        0 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; Hardware stack levels required when called:    3
  8565 ;; This function calls:
  8566 ;;		Nothing
  8567 ;; This function is called by:
  8568 ;;		_main
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           	psect	text13
  8573  01B12E                     __ptext13:
  8574                           	opt stack 0
  8575  01B12E                     _Timer7_Init:
  8576                           	opt stack 27
  8577                           
  8578                           ;Initialization.c: 29: T7CON = 0b00000101;
  8579                           
  8580                           ;incstack = 0
  8581  01B12E  0E05               	movlw	5
  8582  01B130  010F               	movlb	15	; () banked
  8583  01B132  6F3D               	movwf	61,b	;volatile
  8584                           
  8585                           ; BSR set to: 15
  8586                           ;Initialization.c: 31: TMR7IE = 1;
  8587  01B134  86B9               	bsf	4025,3,c	;volatile
  8588                           
  8589                           ; BSR set to: 15
  8590                           ;Initialization.c: 32: TMR7IF = 0;
  8591  01B136  96BA               	bcf	4026,3,c	;volatile
  8592                           
  8593                           ; BSR set to: 15
  8594  01B138  0012               	return		;funcret
  8595  01B13A                     __end_of_Timer7_Init:
  8596                           	opt stack 0
  8597                           tblptru	equ	0xFF8
  8598                           tblptrh	equ	0xFF7
  8599                           tblptrl	equ	0xFF6
  8600                           tablat	equ	0xFF5
  8601                           intcon	equ	0xFF2
  8602                           postinc0	equ	0xFEE
  8603                           wreg	equ	0xFE8
  8604                           postdec1	equ	0xFE5
  8605                           fsr1h	equ	0xFE2
  8606                           fsr1l	equ	0xFE1
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function _Timer1_Initiate *****************
  8610 ;; Defined at:
  8611 ;;		line 17 in file "Initialization.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;                  1    wreg      void 
  8618 ;; Registers used:
  8619 ;;		None
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;Total ram usage:        0 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    3
  8632 ;; This function calls:
  8633 ;;		Nothing
  8634 ;; This function is called by:
  8635 ;;		_main
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text14
  8640  01B0D0                     __ptext14:
  8641                           	opt stack 0
  8642  01B0D0                     _Timer1_Initiate:
  8643                           	opt stack 27
  8644                           
  8645                           ;Initialization.c: 20: T1CKPS1= 1;
  8646                           
  8647                           ; BSR set to: 15
  8648                           ;incstack = 0
  8649  01B0D0  8ACD               	bsf	4045,5,c	;volatile
  8650                           
  8651                           ;Initialization.c: 21: T1CKPS0 = 1;
  8652  01B0D2  88CD               	bsf	4045,4,c	;volatile
  8653                           
  8654                           ;Initialization.c: 22: T1CONbits.RD16 = 0;
  8655  01B0D4  92CD               	bcf	4045,1,c	;volatile
  8656                           
  8657                           ;Initialization.c: 23: TMR1ON = 1;
  8658  01B0D6  80CD               	bsf	4045,0,c	;volatile
  8659                           
  8660                           ;Initialization.c: 24: TMR1IF = 0;
  8661  01B0D8  909E               	bcf	3998,0,c	;volatile
  8662                           
  8663                           ;Initialization.c: 25: TMR1IE = 1;
  8664  01B0DA  809D               	bsf	3997,0,c	;volatile
  8665  01B0DC  0012               	return		;funcret
  8666  01B0DE                     __end_of_Timer1_Initiate:
  8667                           	opt stack 0
  8668                           tblptru	equ	0xFF8
  8669                           tblptrh	equ	0xFF7
  8670                           tblptrl	equ	0xFF6
  8671                           tablat	equ	0xFF5
  8672                           intcon	equ	0xFF2
  8673                           postinc0	equ	0xFEE
  8674                           wreg	equ	0xFE8
  8675                           postdec1	equ	0xFE5
  8676                           fsr1h	equ	0xFE2
  8677                           fsr1l	equ	0xFE1
  8678                           status	equ	0xFD8
  8679                           
  8680 ;; *************** function _Timer0_OneSecond_Function *****************
  8681 ;; Defined at:
  8682 ;;		line 22 in file "OneSecond_Function.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;		None
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;		None
  8687 ;; Return value:  Size  Location     Type
  8688 ;;                  1    wreg      void 
  8689 ;; Registers used:
  8690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;Total ram usage:        0 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; Hardware stack levels required when called:    9
  8703 ;; This function calls:
  8704 ;;		_EEPROM_Error_Monitor
  8705 ;;		_Error_Checking_One_Second
  8706 ;;		_Error_Scan_Running
  8707 ;;		_Last_Five_Error
  8708 ;;		_Stopping_state_function
  8709 ;;		_Turbine_Ramp_up_1_Second
  8710 ;;		_Turbine_Start_up_1_Second
  8711 ;;		_Two_Sec_Delay
  8712 ;;		_UART_Data
  8713 ;;		_VFD_RS485_Data
  8714 ;;		_VFD_RS485_Data_filter
  8715 ;;		_Wind_Average
  8716 ;; This function is called by:
  8717 ;;		_main
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           	psect	text15
  8722  019352                     __ptext15:
  8723                           	opt stack 0
  8724  019352                     _Timer0_OneSecond_Function:
  8725                           	opt stack 21
  8726                           
  8727                           ;OneSecond_Function.c: 26: if(Data_1[8] == 0x40)
  8728                           
  8729                           ;incstack = 0
  8730  019352  0E40               	movlw	64
  8731  019354  0105               	movlb	5	; () banked
  8732  019356  1910               	xorwf	(_Data_1+16)& (0+255),w,b
  8733  019358  0105               	movlb	5	; () banked
  8734  01935A  1111               	iorwf	(_Data_1+17)& (0+255),w,b
  8735  01935C  B4D8               	btfsc	status,2,c
  8736                           
  8737                           ; BSR set to: 5
  8738                           ;OneSecond_Function.c: 27: {
  8739                           ;OneSecond_Function.c: 28: VFD_RS485_Data();
  8740  01935E  ECAC  F0D3         	call	_VFD_RS485_Data	;wreg free
  8741                           
  8742                           ;OneSecond_Function.c: 29: }
  8743                           ;OneSecond_Function.c: 30: VFD_RS485_Data_filter();
  8744  019362  ECB6  F0D2         	call	_VFD_RS485_Data_filter	;wreg free
  8745                           
  8746                           ;OneSecond_Function.c: 32: Error_Checking_One_Second();
  8747  019366  EC7E  F0CA         	call	_Error_Checking_One_Second	;wreg free
  8748                           
  8749                           ;OneSecond_Function.c: 34: if(Turbine_state == STARTUP_STATE)
  8750  01936A  0100               	movlb	0	; () banked
  8751  01936C  51F0               	movf	_Turbine_state& (0+255),w,b
  8752  01936E  B4D8               	btfsc	status,2,c
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;OneSecond_Function.c: 35: {
  8756                           ;OneSecond_Function.c: 36: Turbine_Start_up_1_Second();
  8757  019370  ECAD  F0D8         	call	_Turbine_Start_up_1_Second	;wreg free
  8758                           
  8759                           ;OneSecond_Function.c: 37: }
  8760                           ;OneSecond_Function.c: 39: if(Turbine_state == RAMPUP_STATE)
  8761  019374  0100               	movlb	0	; () banked
  8762  019376  05F0               	decf	_Turbine_state& (0+255),w,b
  8763  019378  B4D8               	btfsc	status,2,c
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;OneSecond_Function.c: 40: {
  8767                           ;OneSecond_Function.c: 41: Turbine_Ramp_up_1_Second();
  8768  01937A  EC3E  F0D8         	call	_Turbine_Ramp_up_1_Second	;wreg free
  8769                           
  8770                           ;OneSecond_Function.c: 42: }
  8771                           ;OneSecond_Function.c: 44: if(Turbine_state == RUNNING_STATE)
  8772  01937E  0E02               	movlw	2
  8773  019380  0100               	movlb	0	; () banked
  8774  019382  19F0               	xorwf	_Turbine_state& (0+255),w,b
  8775  019384  A4D8               	btfss	status,2,c
  8776  019386  D004               	goto	l23012
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;OneSecond_Function.c: 45: {
  8780                           ;OneSecond_Function.c: 46: Error_Scan_Running();
  8781  019388  EC4E  F0CF         	call	_Error_Scan_Running	;wreg free
  8782                           
  8783                           ;OneSecond_Function.c: 47: Two_Sec_Delay();
  8784  01938C  ECA4  F0D7         	call	_Two_Sec_Delay	;wreg free
  8785  019390                     l23012:
  8786                           
  8787                           ;OneSecond_Function.c: 48: }
  8788                           ;OneSecond_Function.c: 50: if(Turbine_state == STOPPING_STATE)
  8789  019390  0E03               	movlw	3
  8790  019392  0100               	movlb	0	; () banked
  8791  019394  19F0               	xorwf	_Turbine_state& (0+255),w,b
  8792  019396  B4D8               	btfsc	status,2,c
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;OneSecond_Function.c: 51: {
  8796                           ;OneSecond_Function.c: 52: Stopping_state_function();
  8797  019398  EC54  F0D0         	call	_Stopping_state_function	;wreg free
  8798                           
  8799                           ;OneSecond_Function.c: 53: }
  8800                           ;OneSecond_Function.c: 55: if(Timer0_RAMPUP_Counter < (10) && Turbine_state == RAMPUP_ST
      +                          ATE)
  8801  01939C  0E0A               	movlw	10
  8802  01939E  0101               	movlb	1	; () banked
  8803  0193A0  6185               	cpfslt	_Timer0_RAMPUP_Counter& (0+255),b
  8804  0193A2  D007               	goto	l23022
  8805                           
  8806                           ; BSR set to: 1
  8807  0193A4  0100               	movlb	0	; () banked
  8808  0193A6  05F0               	decf	_Turbine_state& (0+255),w,b
  8809  0193A8  A4D8               	btfss	status,2,c
  8810  0193AA  D003               	goto	l23022
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;OneSecond_Function.c: 56: {
  8814                           ;OneSecond_Function.c: 57: Timer0_RAMPUP_Counter++;
  8815  0193AC  0101               	movlb	1	; () banked
  8816  0193AE  2B85               	incf	_Timer0_RAMPUP_Counter& (0+255),f,b
  8817                           
  8818                           ;OneSecond_Function.c: 58: }
  8819  0193B0  D00A               	goto	l23026
  8820  0193B2                     l23022:
  8821                           
  8822                           ;OneSecond_Function.c: 59: else if(Turbine_state != RAMPUP_STATE )
  8823  0193B2  0100               	movlb	0	; () banked
  8824  0193B4  05F0               	decf	_Turbine_state& (0+255),w,b
  8825  0193B6  B4D8               	btfsc	status,2,c
  8826  0193B8  D006               	goto	l23026
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;OneSecond_Function.c: 60: {
  8830                           ;OneSecond_Function.c: 61: Ten_Sec_RampUp_Flag = 0;
  8831  0193BA  0E00               	movlw	0
  8832  0193BC  0101               	movlb	1	; () banked
  8833  0193BE  6F83               	movwf	_Ten_Sec_RampUp_Flag& (0+255),b
  8834                           
  8835                           ;OneSecond_Function.c: 62: Timer0_RAMPUP_Counter = 0;
  8836  0193C0  0E00               	movlw	0
  8837  0193C2  0101               	movlb	1	; () banked
  8838  0193C4  6F85               	movwf	_Timer0_RAMPUP_Counter& (0+255),b
  8839  0193C6                     l23026:
  8840                           
  8841                           ;OneSecond_Function.c: 63: }
  8842                           ;OneSecond_Function.c: 64: if(Timer0_RAMPUP_Counter == (10) && Turbine_state == RAMPUP_S
      +                          TATE)
  8843  0193C6  0E0A               	movlw	10
  8844  0193C8  0101               	movlb	1	; () banked
  8845  0193CA  1985               	xorwf	_Timer0_RAMPUP_Counter& (0+255),w,b
  8846  0193CC  A4D8               	btfss	status,2,c
  8847  0193CE  D006               	goto	l23032
  8848                           
  8849                           ; BSR set to: 1
  8850  0193D0  0100               	movlb	0	; () banked
  8851  0193D2  05F0               	decf	_Turbine_state& (0+255),w,b
  8852  0193D4  A4D8               	btfss	status,2,c
  8853  0193D6  D002               	goto	l23032
  8854                           
  8855                           ; BSR set to: 0
  8856                           ;OneSecond_Function.c: 65: {
  8857                           ;OneSecond_Function.c: 66: Ten_Sec_RampUp_Flag = 1;
  8858  0193D8  0E01               	movlw	1
  8859  0193DA  D009               	goto	L5
  8860  0193DC                     l23032:
  8861                           
  8862                           ;OneSecond_Function.c: 68: else if(Ten_Sec_RampUp_Flag < (10) || Turbine_state != RAMPUP
      +                          _STATE)
  8863  0193DC  0E09               	movlw	9
  8864  0193DE  0101               	movlb	1	; () banked
  8865  0193E0  6583               	cpfsgt	_Ten_Sec_RampUp_Flag& (0+255),b
  8866  0193E2  D004               	goto	l23036
  8867                           
  8868                           ; BSR set to: 1
  8869  0193E4  0100               	movlb	0	; () banked
  8870  0193E6  05F0               	decf	_Turbine_state& (0+255),w,b
  8871  0193E8  B4D8               	btfsc	status,2,c
  8872  0193EA  D003               	goto	l23038
  8873  0193EC                     l23036:
  8874                           
  8875                           ;OneSecond_Function.c: 69: {
  8876                           ;OneSecond_Function.c: 70: Ten_Sec_RampUp_Flag = 0;
  8877  0193EC  0E00               	movlw	0
  8878  0193EE                     L5:
  8879  0193EE  0101               	movlb	1	; () banked
  8880  0193F0  6F83               	movwf	_Ten_Sec_RampUp_Flag& (0+255),b
  8881  0193F2                     l23038:
  8882                           
  8883                           ;OneSecond_Function.c: 71: }
  8884                           ;OneSecond_Function.c: 73: Last_Five_Error();
  8885  0193F2  ECF5  F0D7         	call	_Last_Five_Error	;wreg free
  8886                           
  8887                           ;OneSecond_Function.c: 74: Wind_Average();
  8888  0193F6  ECAD  F0A1         	call	_Wind_Average	;wreg free
  8889                           
  8890                           ;OneSecond_Function.c: 75: EEPROM_Error_Monitor();
  8891  0193FA  EC17  F0AF         	call	_EEPROM_Error_Monitor	;wreg free
  8892                           
  8893                           ;OneSecond_Function.c: 77: Serial_No = Serial_No + 1;
  8894  0193FE  0E01               	movlw	1
  8895  019400  0100               	movlb	0	; () banked
  8896  019402  25DF               	addwf	_Serial_No& (0+255),w,b
  8897  019404  0100               	movlb	0	; () banked
  8898  019406  6FDF               	movwf	_Serial_No& (0+255),b
  8899  019408  0E00               	movlw	0
  8900  01940A  0100               	movlb	0	; () banked
  8901  01940C  21E0               	addwfc	(_Serial_No+1)& (0+255),w,b
  8902  01940E  0100               	movlb	0	; () banked
  8903  019410  6FE0               	movwf	(_Serial_No+1)& (0+255),b
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;OneSecond_Function.c: 78: if(Serial_No > 2)
  8907  019412  0100               	movlb	0	; () banked
  8908  019414  51E0               	movf	(_Serial_No+1)& (0+255),w,b
  8909  019416  E105               	bnz	u17810
  8910  019418  0E03               	movlw	3
  8911  01941A  0100               	movlb	0	; () banked
  8912  01941C  5DDF               	subwf	_Serial_No& (0+255),w,b
  8913  01941E  A0D8               	btfss	status,0,c
  8914  019420  0012               	return	
  8915  019422                     u17810:
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;OneSecond_Function.c: 79: {
  8919                           ;OneSecond_Function.c: 80: UART_Data();
  8920  019422  EC00  F080         	call	_UART_Data	;wreg free
  8921  019426  0012               	return	
  8922  019428                     __end_of_Timer0_OneSecond_Function:
  8923                           	opt stack 0
  8924                           tblptru	equ	0xFF8
  8925                           tblptrh	equ	0xFF7
  8926                           tblptrl	equ	0xFF6
  8927                           tablat	equ	0xFF5
  8928                           intcon	equ	0xFF2
  8929                           postinc0	equ	0xFEE
  8930                           wreg	equ	0xFE8
  8931                           postdec1	equ	0xFE5
  8932                           fsr1h	equ	0xFE2
  8933                           fsr1l	equ	0xFE1
  8934                           status	equ	0xFD8
  8935                           
  8936 ;; *************** function _Wind_Average *****************
  8937 ;; Defined at:
  8938 ;;		line 225 in file "RPM_Measurement.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;		None
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;		None
  8943 ;; Return value:  Size  Location     Type
  8944 ;;                  1    wreg      void 
  8945 ;; Registers used:
  8946 ;;		wreg, status,2, status,0, cstack
  8947 ;; Tracked objects:
  8948 ;;		On entry : 0/0
  8949 ;;		On exit  : 0/0
  8950 ;;		Unchanged: 0/0
  8951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8953 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8955 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8956 ;;Total ram usage:       24 bytes
  8957 ;; Hardware stack levels used:    1
  8958 ;; Hardware stack levels required when called:    5
  8959 ;; This function calls:
  8960 ;;		___ftadd
  8961 ;;		___ftdiv
  8962 ;; This function is called by:
  8963 ;;		_Timer0_OneSecond_Function
  8964 ;; This function uses a non-reentrant model
  8965 ;;
  8966                           
  8967                           	psect	text16
  8968  01435A                     __ptext16:
  8969                           	opt stack 0
  8970  01435A                     _Wind_Average:
  8971                           	opt stack 24
  8972                           
  8973                           ;RPM_Measurement.c: 227: Wind_Speed_9 = Wind_Speed_8;
  8974                           
  8975                           ;incstack = 0
  8976  01435A  C266  F4C0         	movff	_Wind_Speed_8,_Wind_Speed_9
  8977  01435E  C267  F4C1         	movff	_Wind_Speed_8+1,_Wind_Speed_9+1
  8978  014362  C268  F4C2         	movff	_Wind_Speed_8+2,_Wind_Speed_9+2
  8979                           
  8980                           ;RPM_Measurement.c: 228: Wind_Speed_8 = Wind_Speed_7;
  8981  014366  C260  F266         	movff	_Wind_Speed_7,_Wind_Speed_8
  8982  01436A  C261  F267         	movff	_Wind_Speed_7+1,_Wind_Speed_8+1
  8983  01436E  C262  F268         	movff	_Wind_Speed_7+2,_Wind_Speed_8+2
  8984                           
  8985                           ;RPM_Measurement.c: 229: Wind_Speed_7 = Wind_Speed_6;
  8986  014372  C25A  F260         	movff	_Wind_Speed_6,_Wind_Speed_7
  8987  014376  C25B  F261         	movff	_Wind_Speed_6+1,_Wind_Speed_7+1
  8988  01437A  C25C  F262         	movff	_Wind_Speed_6+2,_Wind_Speed_7+2
  8989                           
  8990                           ;RPM_Measurement.c: 230: Wind_Speed_6 = Wind_Speed_5;
  8991  01437E  C254  F25A         	movff	_Wind_Speed_5,_Wind_Speed_6
  8992  014382  C255  F25B         	movff	_Wind_Speed_5+1,_Wind_Speed_6+1
  8993  014386  C256  F25C         	movff	_Wind_Speed_5+2,_Wind_Speed_6+2
  8994                           
  8995                           ;RPM_Measurement.c: 231: Wind_Speed_5 = Wind_Speed_4;
  8996  01438A  C24E  F254         	movff	_Wind_Speed_4,_Wind_Speed_5
  8997  01438E  C24F  F255         	movff	_Wind_Speed_4+1,_Wind_Speed_5+1
  8998  014392  C250  F256         	movff	_Wind_Speed_4+2,_Wind_Speed_5+2
  8999                           
  9000                           ;RPM_Measurement.c: 232: Wind_Speed_4 = Wind_Speed_3;
  9001  014396  C248  F24E         	movff	_Wind_Speed_3,_Wind_Speed_4
  9002  01439A  C249  F24F         	movff	_Wind_Speed_3+1,_Wind_Speed_4+1
  9003  01439E  C24A  F250         	movff	_Wind_Speed_3+2,_Wind_Speed_4+2
  9004                           
  9005                           ;RPM_Measurement.c: 233: Wind_Speed_3 = Wind_Spd_2;
  9006  0143A2  C230  F248         	movff	_Wind_Spd_2,_Wind_Speed_3
  9007  0143A6  C231  F249         	movff	_Wind_Spd_2+1,_Wind_Speed_3+1
  9008  0143AA  C232  F24A         	movff	_Wind_Spd_2+2,_Wind_Speed_3+2
  9009                           
  9010                           ;RPM_Measurement.c: 234: Wind_Spd_2 = Wind_Speed_1;
  9011  0143AE  C23C  F230         	movff	_Wind_Speed_1,_Wind_Spd_2
  9012  0143B2  C23D  F231         	movff	_Wind_Speed_1+1,_Wind_Spd_2+1
  9013  0143B6  C23E  F232         	movff	_Wind_Speed_1+2,_Wind_Spd_2+2
  9014                           
  9015                           ;RPM_Measurement.c: 235: Wind_Speed_1 = Wind_Speed_0;
  9016  0143BA  C236  F23C         	movff	_Wind_Speed_0,_Wind_Speed_1
  9017  0143BE  C237  F23D         	movff	_Wind_Speed_0+1,_Wind_Speed_1+1
  9018  0143C2  C238  F23E         	movff	_Wind_Speed_0+2,_Wind_Speed_1+2
  9019                           
  9020                           ;RPM_Measurement.c: 236: Wind_Speed_0 = Wind_Speed;
  9021  0143C6  C233  F236         	movff	_Wind_Speed,_Wind_Speed_0
  9022  0143CA  C234  F237         	movff	_Wind_Speed+1,_Wind_Speed_0+1
  9023  0143CE  C235  F238         	movff	_Wind_Speed+2,_Wind_Speed_0+2
  9024                           
  9025                           ;RPM_Measurement.c: 238: if(Ten_Sec_Counter < (10))
  9026  0143D2  0E0A               	movlw	10
  9027  0143D4  0100               	movlb	0	; () banked
  9028  0143D6  61ED               	cpfslt	_Ten_Sec_Counter& (0+255),b
  9029  0143D8  D002               	goto	l22064
  9030                           
  9031                           ; BSR set to: 0
  9032                           ;RPM_Measurement.c: 239: {
  9033                           ;RPM_Measurement.c: 240: Ten_Sec_Counter++;
  9034  0143DA  0100               	movlb	0	; () banked
  9035  0143DC  2BED               	incf	_Ten_Sec_Counter& (0+255),f,b
  9036  0143DE                     l22064:
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;RPM_Measurement.c: 241: }
  9040                           ;RPM_Measurement.c: 242: if(Ten_Sec_Counter == (10))
  9041  0143DE  0E0A               	movlw	10
  9042  0143E0  0100               	movlb	0	; () banked
  9043  0143E2  19ED               	xorwf	_Ten_Sec_Counter& (0+255),w,b
  9044  0143E4  A4D8               	btfss	status,2,c
  9045  0143E6  D0C5               	goto	l22068
  9046                           
  9047                           ; BSR set to: 0
  9048                           ;RPM_Measurement.c: 243: {
  9049                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9050  0143E8  C266  F090         	movff	_Wind_Speed_8,___ftadd@f2
  9051  0143EC  C267  F091         	movff	_Wind_Speed_8+1,___ftadd@f2+1
  9052  0143F0  C268  F092         	movff	_Wind_Speed_8+2,___ftadd@f2+2
  9053  0143F4  C4C0  F08D         	movff	_Wind_Speed_9,___ftadd@f1
  9054  0143F8  C4C1  F08E         	movff	_Wind_Speed_9+1,___ftadd@f1+1
  9055  0143FC  C4C2  F08F         	movff	_Wind_Speed_9+2,___ftadd@f1+2
  9056  014400  ECBE  F0B2         	call	___ftadd	;wreg free
  9057  014404  C08D  F1AA         	movff	?___ftadd,_Wind_Average$8065
  9058  014408  C08E  F1AB         	movff	?___ftadd+1,_Wind_Average$8065+1
  9059  01440C  C08F  F1AC         	movff	?___ftadd+2,_Wind_Average$8065+2
  9060                           
  9061                           ;RPM_Measurement.c: 243: {
  9062                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9063  014410  C260  F090         	movff	_Wind_Speed_7,___ftadd@f2
  9064  014414  C261  F091         	movff	_Wind_Speed_7+1,___ftadd@f2+1
  9065  014418  C262  F092         	movff	_Wind_Speed_7+2,___ftadd@f2+2
  9066  01441C  C1AA  F08D         	movff	_Wind_Average$8065,___ftadd@f1
  9067  014420  C1AB  F08E         	movff	_Wind_Average$8065+1,___ftadd@f1+1
  9068  014424  C1AC  F08F         	movff	_Wind_Average$8065+2,___ftadd@f1+2
  9069  014428  ECBE  F0B2         	call	___ftadd	;wreg free
  9070  01442C  C08D  F1AD         	movff	?___ftadd,_Wind_Average$8066
  9071  014430  C08E  F1AE         	movff	?___ftadd+1,_Wind_Average$8066+1
  9072  014434  C08F  F1AF         	movff	?___ftadd+2,_Wind_Average$8066+2
  9073                           
  9074                           ;RPM_Measurement.c: 243: {
  9075                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9076  014438  C25A  F090         	movff	_Wind_Speed_6,___ftadd@f2
  9077  01443C  C25B  F091         	movff	_Wind_Speed_6+1,___ftadd@f2+1
  9078  014440  C25C  F092         	movff	_Wind_Speed_6+2,___ftadd@f2+2
  9079  014444  C1AD  F08D         	movff	_Wind_Average$8066,___ftadd@f1
  9080  014448  C1AE  F08E         	movff	_Wind_Average$8066+1,___ftadd@f1+1
  9081  01444C  C1AF  F08F         	movff	_Wind_Average$8066+2,___ftadd@f1+2
  9082  014450  ECBE  F0B2         	call	___ftadd	;wreg free
  9083  014454  C08D  F1B0         	movff	?___ftadd,_Wind_Average$8067
  9084  014458  C08E  F1B1         	movff	?___ftadd+1,_Wind_Average$8067+1
  9085  01445C  C08F  F1B2         	movff	?___ftadd+2,_Wind_Average$8067+2
  9086                           
  9087                           ;RPM_Measurement.c: 243: {
  9088                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9089  014460  C254  F090         	movff	_Wind_Speed_5,___ftadd@f2
  9090  014464  C255  F091         	movff	_Wind_Speed_5+1,___ftadd@f2+1
  9091  014468  C256  F092         	movff	_Wind_Speed_5+2,___ftadd@f2+2
  9092  01446C  C1B0  F08D         	movff	_Wind_Average$8067,___ftadd@f1
  9093  014470  C1B1  F08E         	movff	_Wind_Average$8067+1,___ftadd@f1+1
  9094  014474  C1B2  F08F         	movff	_Wind_Average$8067+2,___ftadd@f1+2
  9095  014478  ECBE  F0B2         	call	___ftadd	;wreg free
  9096  01447C  C08D  F1B3         	movff	?___ftadd,_Wind_Average$8068
  9097  014480  C08E  F1B4         	movff	?___ftadd+1,_Wind_Average$8068+1
  9098  014484  C08F  F1B5         	movff	?___ftadd+2,_Wind_Average$8068+2
  9099                           
  9100                           ;RPM_Measurement.c: 243: {
  9101                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9102  014488  C24E  F090         	movff	_Wind_Speed_4,___ftadd@f2
  9103  01448C  C24F  F091         	movff	_Wind_Speed_4+1,___ftadd@f2+1
  9104  014490  C250  F092         	movff	_Wind_Speed_4+2,___ftadd@f2+2
  9105  014494  C1B3  F08D         	movff	_Wind_Average$8068,___ftadd@f1
  9106  014498  C1B4  F08E         	movff	_Wind_Average$8068+1,___ftadd@f1+1
  9107  01449C  C1B5  F08F         	movff	_Wind_Average$8068+2,___ftadd@f1+2
  9108  0144A0  ECBE  F0B2         	call	___ftadd	;wreg free
  9109  0144A4  C08D  F1B6         	movff	?___ftadd,_Wind_Average$8069
  9110  0144A8  C08E  F1B7         	movff	?___ftadd+1,_Wind_Average$8069+1
  9111  0144AC  C08F  F1B8         	movff	?___ftadd+2,_Wind_Average$8069+2
  9112                           
  9113                           ;RPM_Measurement.c: 243: {
  9114                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9115  0144B0  C248  F090         	movff	_Wind_Speed_3,___ftadd@f2
  9116  0144B4  C249  F091         	movff	_Wind_Speed_3+1,___ftadd@f2+1
  9117  0144B8  C24A  F092         	movff	_Wind_Speed_3+2,___ftadd@f2+2
  9118  0144BC  C1B6  F08D         	movff	_Wind_Average$8069,___ftadd@f1
  9119  0144C0  C1B7  F08E         	movff	_Wind_Average$8069+1,___ftadd@f1+1
  9120  0144C4  C1B8  F08F         	movff	_Wind_Average$8069+2,___ftadd@f1+2
  9121  0144C8  ECBE  F0B2         	call	___ftadd	;wreg free
  9122  0144CC  C08D  F1B9         	movff	?___ftadd,_Wind_Average$8070
  9123  0144D0  C08E  F1BA         	movff	?___ftadd+1,_Wind_Average$8070+1
  9124  0144D4  C08F  F1BB         	movff	?___ftadd+2,_Wind_Average$8070+2
  9125                           
  9126                           ;RPM_Measurement.c: 243: {
  9127                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9128  0144D8  C230  F090         	movff	_Wind_Spd_2,___ftadd@f2
  9129  0144DC  C231  F091         	movff	_Wind_Spd_2+1,___ftadd@f2+1
  9130  0144E0  C232  F092         	movff	_Wind_Spd_2+2,___ftadd@f2+2
  9131  0144E4  C1B9  F08D         	movff	_Wind_Average$8070,___ftadd@f1
  9132  0144E8  C1BA  F08E         	movff	_Wind_Average$8070+1,___ftadd@f1+1
  9133  0144EC  C1BB  F08F         	movff	_Wind_Average$8070+2,___ftadd@f1+2
  9134  0144F0  ECBE  F0B2         	call	___ftadd	;wreg free
  9135  0144F4  C08D  F1BC         	movff	?___ftadd,_Wind_Average$8071
  9136  0144F8  C08E  F1BD         	movff	?___ftadd+1,_Wind_Average$8071+1
  9137  0144FC  C08F  F1BE         	movff	?___ftadd+2,_Wind_Average$8071+2
  9138                           
  9139                           ;RPM_Measurement.c: 243: {
  9140                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9141  014500  C23C  F090         	movff	_Wind_Speed_1,___ftadd@f2
  9142  014504  C23D  F091         	movff	_Wind_Speed_1+1,___ftadd@f2+1
  9143  014508  C23E  F092         	movff	_Wind_Speed_1+2,___ftadd@f2+2
  9144  01450C  C1BC  F08D         	movff	_Wind_Average$8071,___ftadd@f1
  9145  014510  C1BD  F08E         	movff	_Wind_Average$8071+1,___ftadd@f1+1
  9146  014514  C1BE  F08F         	movff	_Wind_Average$8071+2,___ftadd@f1+2
  9147  014518  ECBE  F0B2         	call	___ftadd	;wreg free
  9148  01451C  C08D  F1BF         	movff	?___ftadd,_Wind_Average$8072
  9149  014520  C08E  F1C0         	movff	?___ftadd+1,_Wind_Average$8072+1
  9150  014524  C08F  F1C1         	movff	?___ftadd+2,_Wind_Average$8072+2
  9151                           
  9152                           ;RPM_Measurement.c: 243: {
  9153                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9154  014528  C236  F090         	movff	_Wind_Speed_0,___ftadd@f2
  9155  01452C  C237  F091         	movff	_Wind_Speed_0+1,___ftadd@f2+1
  9156  014530  C238  F092         	movff	_Wind_Speed_0+2,___ftadd@f2+2
  9157  014534  C1BF  F08D         	movff	_Wind_Average$8072,___ftadd@f1
  9158  014538  C1C0  F08E         	movff	_Wind_Average$8072+1,___ftadd@f1+1
  9159  01453C  C1C1  F08F         	movff	_Wind_Average$8072+2,___ftadd@f1+2
  9160  014540  ECBE  F0B2         	call	___ftadd	;wreg free
  9161  014544  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  9162  014548  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  9163  01454C  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  9164  014550  0E00               	movlw	0
  9165  014552  0100               	movlb	0	; () banked
  9166  014554  6FA8               	movwf	___ftdiv@f2& (0+255),b
  9167  014556  0E20               	movlw	32
  9168  014558  0100               	movlb	0	; () banked
  9169  01455A  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  9170  01455C  0E41               	movlw	65
  9171  01455E  0100               	movlb	0	; () banked
  9172  014560  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  9173  014562  ECAF  F0C1         	call	___ftdiv	;wreg free
  9174  014566  C0A5  F00D         	movff	?___ftdiv,_Wind_Speed_Avg
  9175  01456A  C0A6  F00E         	movff	?___ftdiv+1,_Wind_Speed_Avg+1
  9176  01456E  C0A7  F00F         	movff	?___ftdiv+2,_Wind_Speed_Avg+2
  9177  014572                     l22068:
  9178                           
  9179                           ;RPM_Measurement.c: 245: }
  9180                           ;RPM_Measurement.c: 248: Wind_Speed_9_2 = Wind_Speed_8_2;
  9181  014572  C269  F4C3         	movff	_Wind_Speed_8_2,_Wind_Speed_9_2
  9182  014576  C26A  F4C4         	movff	_Wind_Speed_8_2+1,_Wind_Speed_9_2+1
  9183  01457A  C26B  F4C5         	movff	_Wind_Speed_8_2+2,_Wind_Speed_9_2+2
  9184                           
  9185                           ;RPM_Measurement.c: 249: Wind_Speed_8_2 = Wind_Speed_7_2;
  9186  01457E  C263  F269         	movff	_Wind_Speed_7_2,_Wind_Speed_8_2
  9187  014582  C264  F26A         	movff	_Wind_Speed_7_2+1,_Wind_Speed_8_2+1
  9188  014586  C265  F26B         	movff	_Wind_Speed_7_2+2,_Wind_Speed_8_2+2
  9189                           
  9190                           ;RPM_Measurement.c: 250: Wind_Speed_7_2 = Wind_Speed_6_2;
  9191  01458A  C25D  F263         	movff	_Wind_Speed_6_2,_Wind_Speed_7_2
  9192  01458E  C25E  F264         	movff	_Wind_Speed_6_2+1,_Wind_Speed_7_2+1
  9193  014592  C25F  F265         	movff	_Wind_Speed_6_2+2,_Wind_Speed_7_2+2
  9194                           
  9195                           ;RPM_Measurement.c: 251: Wind_Speed_6_2 = Wind_Speed_5_2;
  9196  014596  C257  F25D         	movff	_Wind_Speed_5_2,_Wind_Speed_6_2
  9197  01459A  C258  F25E         	movff	_Wind_Speed_5_2+1,_Wind_Speed_6_2+1
  9198  01459E  C259  F25F         	movff	_Wind_Speed_5_2+2,_Wind_Speed_6_2+2
  9199                           
  9200                           ;RPM_Measurement.c: 252: Wind_Speed_5_2 = Wind_Speed_4_2;
  9201  0145A2  C251  F257         	movff	_Wind_Speed_4_2,_Wind_Speed_5_2
  9202  0145A6  C252  F258         	movff	_Wind_Speed_4_2+1,_Wind_Speed_5_2+1
  9203  0145AA  C253  F259         	movff	_Wind_Speed_4_2+2,_Wind_Speed_5_2+2
  9204                           
  9205                           ;RPM_Measurement.c: 253: Wind_Speed_4_2 = Wind_Speed_3_2;
  9206  0145AE  C24B  F251         	movff	_Wind_Speed_3_2,_Wind_Speed_4_2
  9207  0145B2  C24C  F252         	movff	_Wind_Speed_3_2+1,_Wind_Speed_4_2+1
  9208  0145B6  C24D  F253         	movff	_Wind_Speed_3_2+2,_Wind_Speed_4_2+2
  9209                           
  9210                           ;RPM_Measurement.c: 254: Wind_Speed_3_2 = Wind_Speed_2_2;
  9211  0145BA  C245  F24B         	movff	_Wind_Speed_2_2,_Wind_Speed_3_2
  9212  0145BE  C246  F24C         	movff	_Wind_Speed_2_2+1,_Wind_Speed_3_2+1
  9213  0145C2  C247  F24D         	movff	_Wind_Speed_2_2+2,_Wind_Speed_3_2+2
  9214                           
  9215                           ;RPM_Measurement.c: 255: Wind_Speed_2_2 = Wind_Speed_1_2;
  9216  0145C6  C23F  F245         	movff	_Wind_Speed_1_2,_Wind_Speed_2_2
  9217  0145CA  C240  F246         	movff	_Wind_Speed_1_2+1,_Wind_Speed_2_2+1
  9218  0145CE  C241  F247         	movff	_Wind_Speed_1_2+2,_Wind_Speed_2_2+2
  9219                           
  9220                           ;RPM_Measurement.c: 256: Wind_Speed_1_2 = Wind_Speed_0_2;
  9221  0145D2  C239  F23F         	movff	_Wind_Speed_0_2,_Wind_Speed_1_2
  9222  0145D6  C23A  F240         	movff	_Wind_Speed_0_2+1,_Wind_Speed_1_2+1
  9223  0145DA  C23B  F241         	movff	_Wind_Speed_0_2+2,_Wind_Speed_1_2+2
  9224                           
  9225                           ;RPM_Measurement.c: 257: Wind_Speed_0_2 = Wind_Speed_2;
  9226  0145DE  C242  F239         	movff	_Wind_Speed_2,_Wind_Speed_0_2
  9227  0145E2  C243  F23A         	movff	_Wind_Speed_2+1,_Wind_Speed_0_2+1
  9228  0145E6  C244  F23B         	movff	_Wind_Speed_2+2,_Wind_Speed_0_2+2
  9229                           
  9230                           ;RPM_Measurement.c: 259: if(Ten_Sec_Counter_2 < (10))
  9231  0145EA  0E0A               	movlw	10
  9232  0145EC  0100               	movlb	0	; () banked
  9233  0145EE  61EE               	cpfslt	_Ten_Sec_Counter_2& (0+255),b
  9234  0145F0  D002               	goto	l22092
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;RPM_Measurement.c: 260: {
  9238                           ;RPM_Measurement.c: 261: Ten_Sec_Counter_2++;
  9239  0145F2  0100               	movlb	0	; () banked
  9240  0145F4  2BEE               	incf	_Ten_Sec_Counter_2& (0+255),f,b
  9241  0145F6                     l22092:
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;RPM_Measurement.c: 262: }
  9245                           ;RPM_Measurement.c: 263: if(Ten_Sec_Counter_2 == (10))
  9246  0145F6  0E0A               	movlw	10
  9247  0145F8  0100               	movlb	0	; () banked
  9248  0145FA  19EE               	xorwf	_Ten_Sec_Counter_2& (0+255),w,b
  9249  0145FC  A4D8               	btfss	status,2,c
  9250  0145FE  0012               	return	
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;RPM_Measurement.c: 264: {
  9254                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9255  014600  C269  F090         	movff	_Wind_Speed_8_2,___ftadd@f2
  9256  014604  C26A  F091         	movff	_Wind_Speed_8_2+1,___ftadd@f2+1
  9257  014608  C26B  F092         	movff	_Wind_Speed_8_2+2,___ftadd@f2+2
  9258  01460C  C4C3  F08D         	movff	_Wind_Speed_9_2,___ftadd@f1
  9259  014610  C4C4  F08E         	movff	_Wind_Speed_9_2+1,___ftadd@f1+1
  9260  014614  C4C5  F08F         	movff	_Wind_Speed_9_2+2,___ftadd@f1+2
  9261  014618  ECBE  F0B2         	call	___ftadd	;wreg free
  9262  01461C  C08D  F1AA         	movff	?___ftadd,_Wind_Average$8065
  9263  014620  C08E  F1AB         	movff	?___ftadd+1,_Wind_Average$8065+1
  9264  014624  C08F  F1AC         	movff	?___ftadd+2,_Wind_Average$8065+2
  9265                           
  9266                           ;RPM_Measurement.c: 264: {
  9267                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9268  014628  C263  F090         	movff	_Wind_Speed_7_2,___ftadd@f2
  9269  01462C  C264  F091         	movff	_Wind_Speed_7_2+1,___ftadd@f2+1
  9270  014630  C265  F092         	movff	_Wind_Speed_7_2+2,___ftadd@f2+2
  9271  014634  C1AA  F08D         	movff	_Wind_Average$8065,___ftadd@f1
  9272  014638  C1AB  F08E         	movff	_Wind_Average$8065+1,___ftadd@f1+1
  9273  01463C  C1AC  F08F         	movff	_Wind_Average$8065+2,___ftadd@f1+2
  9274  014640  ECBE  F0B2         	call	___ftadd	;wreg free
  9275  014644  C08D  F1AD         	movff	?___ftadd,_Wind_Average$8066
  9276  014648  C08E  F1AE         	movff	?___ftadd+1,_Wind_Average$8066+1
  9277  01464C  C08F  F1AF         	movff	?___ftadd+2,_Wind_Average$8066+2
  9278                           
  9279                           ;RPM_Measurement.c: 264: {
  9280                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9281  014650  C25D  F090         	movff	_Wind_Speed_6_2,___ftadd@f2
  9282  014654  C25E  F091         	movff	_Wind_Speed_6_2+1,___ftadd@f2+1
  9283  014658  C25F  F092         	movff	_Wind_Speed_6_2+2,___ftadd@f2+2
  9284  01465C  C1AD  F08D         	movff	_Wind_Average$8066,___ftadd@f1
  9285  014660  C1AE  F08E         	movff	_Wind_Average$8066+1,___ftadd@f1+1
  9286  014664  C1AF  F08F         	movff	_Wind_Average$8066+2,___ftadd@f1+2
  9287  014668  ECBE  F0B2         	call	___ftadd	;wreg free
  9288  01466C  C08D  F1B0         	movff	?___ftadd,_Wind_Average$8067
  9289  014670  C08E  F1B1         	movff	?___ftadd+1,_Wind_Average$8067+1
  9290  014674  C08F  F1B2         	movff	?___ftadd+2,_Wind_Average$8067+2
  9291                           
  9292                           ;RPM_Measurement.c: 264: {
  9293                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9294  014678  C257  F090         	movff	_Wind_Speed_5_2,___ftadd@f2
  9295  01467C  C258  F091         	movff	_Wind_Speed_5_2+1,___ftadd@f2+1
  9296  014680  C259  F092         	movff	_Wind_Speed_5_2+2,___ftadd@f2+2
  9297  014684  C1B0  F08D         	movff	_Wind_Average$8067,___ftadd@f1
  9298  014688  C1B1  F08E         	movff	_Wind_Average$8067+1,___ftadd@f1+1
  9299  01468C  C1B2  F08F         	movff	_Wind_Average$8067+2,___ftadd@f1+2
  9300  014690  ECBE  F0B2         	call	___ftadd	;wreg free
  9301  014694  C08D  F1B3         	movff	?___ftadd,_Wind_Average$8068
  9302  014698  C08E  F1B4         	movff	?___ftadd+1,_Wind_Average$8068+1
  9303  01469C  C08F  F1B5         	movff	?___ftadd+2,_Wind_Average$8068+2
  9304                           
  9305                           ;RPM_Measurement.c: 264: {
  9306                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9307  0146A0  C251  F090         	movff	_Wind_Speed_4_2,___ftadd@f2
  9308  0146A4  C252  F091         	movff	_Wind_Speed_4_2+1,___ftadd@f2+1
  9309  0146A8  C253  F092         	movff	_Wind_Speed_4_2+2,___ftadd@f2+2
  9310  0146AC  C1B3  F08D         	movff	_Wind_Average$8068,___ftadd@f1
  9311  0146B0  C1B4  F08E         	movff	_Wind_Average$8068+1,___ftadd@f1+1
  9312  0146B4  C1B5  F08F         	movff	_Wind_Average$8068+2,___ftadd@f1+2
  9313  0146B8  ECBE  F0B2         	call	___ftadd	;wreg free
  9314  0146BC  C08D  F1B6         	movff	?___ftadd,_Wind_Average$8069
  9315  0146C0  C08E  F1B7         	movff	?___ftadd+1,_Wind_Average$8069+1
  9316  0146C4  C08F  F1B8         	movff	?___ftadd+2,_Wind_Average$8069+2
  9317                           
  9318                           ;RPM_Measurement.c: 264: {
  9319                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9320  0146C8  C24B  F090         	movff	_Wind_Speed_3_2,___ftadd@f2
  9321  0146CC  C24C  F091         	movff	_Wind_Speed_3_2+1,___ftadd@f2+1
  9322  0146D0  C24D  F092         	movff	_Wind_Speed_3_2+2,___ftadd@f2+2
  9323  0146D4  C1B6  F08D         	movff	_Wind_Average$8069,___ftadd@f1
  9324  0146D8  C1B7  F08E         	movff	_Wind_Average$8069+1,___ftadd@f1+1
  9325  0146DC  C1B8  F08F         	movff	_Wind_Average$8069+2,___ftadd@f1+2
  9326  0146E0  ECBE  F0B2         	call	___ftadd	;wreg free
  9327  0146E4  C08D  F1B9         	movff	?___ftadd,_Wind_Average$8070
  9328  0146E8  C08E  F1BA         	movff	?___ftadd+1,_Wind_Average$8070+1
  9329  0146EC  C08F  F1BB         	movff	?___ftadd+2,_Wind_Average$8070+2
  9330                           
  9331                           ;RPM_Measurement.c: 264: {
  9332                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9333  0146F0  C245  F090         	movff	_Wind_Speed_2_2,___ftadd@f2
  9334  0146F4  C246  F091         	movff	_Wind_Speed_2_2+1,___ftadd@f2+1
  9335  0146F8  C247  F092         	movff	_Wind_Speed_2_2+2,___ftadd@f2+2
  9336  0146FC  C1B9  F08D         	movff	_Wind_Average$8070,___ftadd@f1
  9337  014700  C1BA  F08E         	movff	_Wind_Average$8070+1,___ftadd@f1+1
  9338  014704  C1BB  F08F         	movff	_Wind_Average$8070+2,___ftadd@f1+2
  9339  014708  ECBE  F0B2         	call	___ftadd	;wreg free
  9340  01470C  C08D  F1BC         	movff	?___ftadd,_Wind_Average$8071
  9341  014710  C08E  F1BD         	movff	?___ftadd+1,_Wind_Average$8071+1
  9342  014714  C08F  F1BE         	movff	?___ftadd+2,_Wind_Average$8071+2
  9343                           
  9344                           ;RPM_Measurement.c: 264: {
  9345                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9346  014718  C23F  F090         	movff	_Wind_Speed_1_2,___ftadd@f2
  9347  01471C  C240  F091         	movff	_Wind_Speed_1_2+1,___ftadd@f2+1
  9348  014720  C241  F092         	movff	_Wind_Speed_1_2+2,___ftadd@f2+2
  9349  014724  C1BC  F08D         	movff	_Wind_Average$8071,___ftadd@f1
  9350  014728  C1BD  F08E         	movff	_Wind_Average$8071+1,___ftadd@f1+1
  9351  01472C  C1BE  F08F         	movff	_Wind_Average$8071+2,___ftadd@f1+2
  9352  014730  ECBE  F0B2         	call	___ftadd	;wreg free
  9353  014734  C08D  F1BF         	movff	?___ftadd,_Wind_Average$8072
  9354  014738  C08E  F1C0         	movff	?___ftadd+1,_Wind_Average$8072+1
  9355  01473C  C08F  F1C1         	movff	?___ftadd+2,_Wind_Average$8072+2
  9356                           
  9357                           ;RPM_Measurement.c: 264: {
  9358                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9359  014740  C239  F090         	movff	_Wind_Speed_0_2,___ftadd@f2
  9360  014744  C23A  F091         	movff	_Wind_Speed_0_2+1,___ftadd@f2+1
  9361  014748  C23B  F092         	movff	_Wind_Speed_0_2+2,___ftadd@f2+2
  9362  01474C  C1BF  F08D         	movff	_Wind_Average$8072,___ftadd@f1
  9363  014750  C1C0  F08E         	movff	_Wind_Average$8072+1,___ftadd@f1+1
  9364  014754  C1C1  F08F         	movff	_Wind_Average$8072+2,___ftadd@f1+2
  9365  014758  ECBE  F0B2         	call	___ftadd	;wreg free
  9366  01475C  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  9367  014760  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  9368  014764  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  9369  014768  0E00               	movlw	0
  9370  01476A  0100               	movlb	0	; () banked
  9371  01476C  6FA8               	movwf	___ftdiv@f2& (0+255),b
  9372  01476E  0E20               	movlw	32
  9373  014770  0100               	movlb	0	; () banked
  9374  014772  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  9375  014774  0E41               	movlw	65
  9376  014776  0100               	movlb	0	; () banked
  9377  014778  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  9378  01477A  ECAF  F0C1         	call	___ftdiv	;wreg free
  9379  01477E  C0A5  F4C6         	movff	?___ftdiv,_Wind_Speed_Avg_2
  9380  014782  C0A6  F4C7         	movff	?___ftdiv+1,_Wind_Speed_Avg_2+1
  9381  014786  C0A7  F4C8         	movff	?___ftdiv+2,_Wind_Speed_Avg_2+2
  9382  01478A  0012               	return	
  9383  01478C                     __end_of_Wind_Average:
  9384                           	opt stack 0
  9385                           tblptru	equ	0xFF8
  9386                           tblptrh	equ	0xFF7
  9387                           tblptrl	equ	0xFF6
  9388                           tablat	equ	0xFF5
  9389                           intcon	equ	0xFF2
  9390                           postinc0	equ	0xFEE
  9391                           wreg	equ	0xFE8
  9392                           postdec1	equ	0xFE5
  9393                           fsr1h	equ	0xFE2
  9394                           fsr1l	equ	0xFE1
  9395                           status	equ	0xFD8
  9396                           
  9397 ;; *************** function _VFD_RS485_Data_filter *****************
  9398 ;; Defined at:
  9399 ;;		line 67 in file "RS485_COMMUNICATION.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;		None
  9402 ;; Auto vars:     Size  Location     Type
  9403 ;;		None
  9404 ;; Return value:  Size  Location     Type
  9405 ;;                  1    wreg      void 
  9406 ;; Registers used:
  9407 ;;		wreg, status,2, status,0, cstack
  9408 ;; Tracked objects:
  9409 ;;		On entry : 0/0
  9410 ;;		On exit  : 0/0
  9411 ;;		Unchanged: 0/0
  9412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;Total ram usage:        0 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; Hardware stack levels required when called:    6
  9420 ;; This function calls:
  9421 ;;		_VFD_RS485_Data
  9422 ;; This function is called by:
  9423 ;;		_Timer0_OneSecond_Function
  9424 ;; This function uses a non-reentrant model
  9425 ;;
  9426                           
  9427                           	psect	text17
  9428  01A56C                     __ptext17:
  9429                           	opt stack 0
  9430  01A56C                     _VFD_RS485_Data_filter:
  9431                           	opt stack 23
  9432                           
  9433                           ;RS485_COMMUNICATION.c: 69: if(Data_1[1] == Data_1[7])
  9434                           
  9435                           ;incstack = 0
  9436  01A56C  0105               	movlb	5	; () banked
  9437  01A56E  510E               	movf	(_Data_1+14)& (0+255),w,b
  9438  01A570  0105               	movlb	5	; () banked
  9439  01A572  1902               	xorwf	(_Data_1+2)& (0+255),w,b
  9440  01A574  E109               	bnz	l21972
  9441  01A576  0105               	movlb	5	; () banked
  9442  01A578  510F               	movf	(_Data_1+15)& (0+255),w,b
  9443  01A57A  0105               	movlb	5	; () banked
  9444  01A57C  1903               	xorwf	(_Data_1+3)& (0+255),w,b
  9445  01A57E  A4D8               	btfss	status,2,c
  9446  01A580  D003               	goto	l21972
  9447                           
  9448                           ; BSR set to: 5
  9449                           ;RS485_COMMUNICATION.c: 70: {
  9450                           ;RS485_COMMUNICATION.c: 71: VFD_RS485_Data();
  9451  01A582  ECAC  F0D3         	call	_VFD_RS485_Data	;wreg free
  9452                           
  9453                           ;RS485_COMMUNICATION.c: 73: }
  9454  01A586  0012               	return	
  9455  01A588                     l21972:
  9456                           
  9457                           ;RS485_COMMUNICATION.c: 74: else
  9458                           ;RS485_COMMUNICATION.c: 75: {
  9459                           ;RS485_COMMUNICATION.c: 76: Data_1[0] = 0; Data_1[1] = 0; Data_1[2] = 0; Data_1[3] = 0; 
      +                          Data_1[9] = 0;
  9460  01A588  0E00               	movlw	0
  9461  01A58A  0105               	movlb	5	; () banked
  9462  01A58C  6F01               	movwf	(_Data_1+1)& (0+255),b
  9463  01A58E  0E00               	movlw	0
  9464  01A590  6F00               	movwf	_Data_1& (0+255),b
  9465  01A592  0E00               	movlw	0
  9466  01A594  0105               	movlb	5	; () banked
  9467  01A596  6F03               	movwf	(_Data_1+3)& (0+255),b
  9468  01A598  0E00               	movlw	0
  9469  01A59A  6F02               	movwf	(_Data_1+2)& (0+255),b
  9470  01A59C  0E00               	movlw	0
  9471  01A59E  0105               	movlb	5	; () banked
  9472  01A5A0  6F05               	movwf	(_Data_1+5)& (0+255),b
  9473  01A5A2  0E00               	movlw	0
  9474  01A5A4  6F04               	movwf	(_Data_1+4)& (0+255),b
  9475  01A5A6  0E00               	movlw	0
  9476  01A5A8  0105               	movlb	5	; () banked
  9477  01A5AA  6F07               	movwf	(_Data_1+7)& (0+255),b
  9478  01A5AC  0E00               	movlw	0
  9479  01A5AE  6F06               	movwf	(_Data_1+6)& (0+255),b
  9480  01A5B0  0E00               	movlw	0
  9481  01A5B2  0105               	movlb	5	; () banked
  9482  01A5B4  6F13               	movwf	(_Data_1+19)& (0+255),b
  9483  01A5B6  0E00               	movlw	0
  9484  01A5B8  6F12               	movwf	(_Data_1+18)& (0+255),b
  9485                           
  9486                           ;RS485_COMMUNICATION.c: 77: Data_1[4] = 0; Data_1[5] = 0; Data_1[6] = 0; Data_1[7] = 0; 
      +                          Data_1[8] = 0;
  9487  01A5BA  0E00               	movlw	0
  9488  01A5BC  0105               	movlb	5	; () banked
  9489  01A5BE  6F09               	movwf	(_Data_1+9)& (0+255),b
  9490  01A5C0  0E00               	movlw	0
  9491  01A5C2  6F08               	movwf	(_Data_1+8)& (0+255),b
  9492  01A5C4  0E00               	movlw	0
  9493  01A5C6  0105               	movlb	5	; () banked
  9494  01A5C8  6F0B               	movwf	(_Data_1+11)& (0+255),b
  9495  01A5CA  0E00               	movlw	0
  9496  01A5CC  6F0A               	movwf	(_Data_1+10)& (0+255),b
  9497  01A5CE  0E00               	movlw	0
  9498  01A5D0  0105               	movlb	5	; () banked
  9499  01A5D2  6F0D               	movwf	(_Data_1+13)& (0+255),b
  9500  01A5D4  0E00               	movlw	0
  9501  01A5D6  6F0C               	movwf	(_Data_1+12)& (0+255),b
  9502  01A5D8  0E00               	movlw	0
  9503  01A5DA  0105               	movlb	5	; () banked
  9504  01A5DC  6F0F               	movwf	(_Data_1+15)& (0+255),b
  9505  01A5DE  0E00               	movlw	0
  9506  01A5E0  6F0E               	movwf	(_Data_1+14)& (0+255),b
  9507  01A5E2  0E00               	movlw	0
  9508  01A5E4  0105               	movlb	5	; () banked
  9509  01A5E6  6F11               	movwf	(_Data_1+17)& (0+255),b
  9510  01A5E8  0E00               	movlw	0
  9511  01A5EA  6F10               	movwf	(_Data_1+16)& (0+255),b
  9512  01A5EC  0012               	return	
  9513  01A5EE                     __end_of_VFD_RS485_Data_filter:
  9514                           	opt stack 0
  9515                           tblptru	equ	0xFF8
  9516                           tblptrh	equ	0xFF7
  9517                           tblptrl	equ	0xFF6
  9518                           tablat	equ	0xFF5
  9519                           intcon	equ	0xFF2
  9520                           postinc0	equ	0xFEE
  9521                           wreg	equ	0xFE8
  9522                           postdec1	equ	0xFE5
  9523                           fsr1h	equ	0xFE2
  9524                           fsr1l	equ	0xFE1
  9525                           status	equ	0xFD8
  9526                           
  9527 ;; *************** function _VFD_RS485_Data *****************
  9528 ;; Defined at:
  9529 ;;		line 56 in file "RS485_COMMUNICATION.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;		None
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;		None
  9534 ;; Return value:  Size  Location     Type
  9535 ;;                  1    wreg      void 
  9536 ;; Registers used:
  9537 ;;		wreg, status,2, status,0, cstack
  9538 ;; Tracked objects:
  9539 ;;		On entry : 0/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9547 ;;Total ram usage:        2 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    5
  9550 ;; This function calls:
  9551 ;;		___ftdiv
  9552 ;;		___lwtoft
  9553 ;; This function is called by:
  9554 ;;		_Timer0_OneSecond_Function
  9555 ;;		_VFD_RS485_Data_filter
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           	psect	text18
  9560  01A758                     __ptext18:
  9561                           	opt stack 0
  9562  01A758                     _VFD_RS485_Data:
  9563                           	opt stack 23
  9564                           
  9565                           ;RS485_COMMUNICATION.c: 60: VFD_Frequency = Data_1[2];
  9566                           
  9567                           ;incstack = 0
  9568  01A758  C504  F2DE         	movff	_Data_1+4,_VFD_Frequency
  9569                           
  9570                           ;RS485_COMMUNICATION.c: 61: VFD_Bus_Voltage = Data_1[3] + (Data_1[4] * 256);
  9571  01A75C  0105               	movlb	5	; () banked
  9572  01A75E  5108               	movf	(_Data_1+8)& (0+255),w,b
  9573  01A760  0100               	movlb	0	; () banked
  9574  01A762  6FB5               	movwf	(??_VFD_RS485_Data+1)& (0+255),b
  9575  01A764  6BB4               	clrf	??_VFD_RS485_Data& (0+255),b
  9576  01A766  0105               	movlb	5	; () banked
  9577  01A768  5106               	movf	(_Data_1+6)& (0+255),w,b
  9578  01A76A  0100               	movlb	0	; () banked
  9579  01A76C  25B4               	addwf	??_VFD_RS485_Data& (0+255),w,b
  9580  01A76E  0101               	movlb	1	; () banked
  9581  01A770  6F3E               	movwf	_VFD_Bus_Voltage& (0+255),b
  9582  01A772  0105               	movlb	5	; () banked
  9583  01A774  5107               	movf	(_Data_1+7)& (0+255),w,b
  9584  01A776  0100               	movlb	0	; () banked
  9585  01A778  21B5               	addwfc	(??_VFD_RS485_Data+1)& (0+255),w,b
  9586  01A77A  0101               	movlb	1	; () banked
  9587  01A77C  6F3F               	movwf	(_VFD_Bus_Voltage+1)& (0+255),b
  9588                           
  9589                           ; BSR set to: 1
  9590                           ;RS485_COMMUNICATION.c: 62: DC_Bus_Current = Data_1[5];
  9591  01A77E  C50A  F068         	movff	_Data_1+10,___lwtoft@c
  9592  01A782  C50B  F069         	movff	_Data_1+11,___lwtoft@c+1
  9593  01A786  ECCE  F0D7         	call	___lwtoft	;wreg free
  9594  01A78A  C068  F20F         	movff	?___lwtoft,_DC_Bus_Current
  9595  01A78E  C069  F210         	movff	?___lwtoft+1,_DC_Bus_Current+1
  9596  01A792  C06A  F211         	movff	?___lwtoft+2,_DC_Bus_Current+2
  9597                           
  9598                           ;RS485_COMMUNICATION.c: 63: DC_Bus_Current = DC_Bus_Current / 10;
  9599  01A796  C20F  F0A5         	movff	_DC_Bus_Current,___ftdiv@f1
  9600  01A79A  C210  F0A6         	movff	_DC_Bus_Current+1,___ftdiv@f1+1
  9601  01A79E  C211  F0A7         	movff	_DC_Bus_Current+2,___ftdiv@f1+2
  9602  01A7A2  0E00               	movlw	0
  9603  01A7A4  0100               	movlb	0	; () banked
  9604  01A7A6  6FA8               	movwf	___ftdiv@f2& (0+255),b
  9605  01A7A8  0E20               	movlw	32
  9606  01A7AA  0100               	movlb	0	; () banked
  9607  01A7AC  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  9608  01A7AE  0E41               	movlw	65
  9609  01A7B0  0100               	movlb	0	; () banked
  9610  01A7B2  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  9611  01A7B4  ECAF  F0C1         	call	___ftdiv	;wreg free
  9612  01A7B8  C0A5  F20F         	movff	?___ftdiv,_DC_Bus_Current
  9613  01A7BC  C0A6  F210         	movff	?___ftdiv+1,_DC_Bus_Current+1
  9614  01A7C0  C0A7  F211         	movff	?___ftdiv+2,_DC_Bus_Current+2
  9615                           
  9616                           ;RS485_COMMUNICATION.c: 65: VFD_Error_No = Data_1[6];
  9617  01A7C4  C50C  F020         	movff	_Data_1+12,_VFD_Error_No
  9618  01A7C8  0012               	return		;funcret
  9619  01A7CA                     __end_of_VFD_RS485_Data:
  9620                           	opt stack 0
  9621                           tblptru	equ	0xFF8
  9622                           tblptrh	equ	0xFF7
  9623                           tblptrl	equ	0xFF6
  9624                           tablat	equ	0xFF5
  9625                           intcon	equ	0xFF2
  9626                           postinc0	equ	0xFEE
  9627                           wreg	equ	0xFE8
  9628                           postdec1	equ	0xFE5
  9629                           fsr1h	equ	0xFE2
  9630                           fsr1l	equ	0xFE1
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function _UART_Data *****************
  9634 ;; Defined at:
  9635 ;;		line 22 in file "UART.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;		None
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  1    wreg      void 
  9642 ;; Registers used:
  9643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;Total ram usage:        0 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    8
  9656 ;; This function calls:
  9657 ;;		_BCDtoI
  9658 ;;		_RTC_GetDateTime
  9659 ;;		_UART_Data_String
  9660 ;;		_printf
  9661 ;;		_usart_str
  9662 ;;		_usart_str_1
  9663 ;; This function is called by:
  9664 ;;		_Timer0_OneSecond_Function
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           	psect	text19
  9669  010000                     __ptext19:
  9670                           	opt stack 0
  9671  010000                     _UART_Data:
  9672                           	opt stack 21
  9673                           
  9674                           ;UART.c: 24: if(Serial_No == 3)
  9675                           
  9676                           ;incstack = 0
  9677  010000  0E03               	movlw	3
  9678  010002  0100               	movlb	0	; () banked
  9679  010004  19DF               	xorwf	_Serial_No& (0+255),w,b
  9680  010006  0100               	movlb	0	; () banked
  9681  010008  11E0               	iorwf	(_Serial_No+1)& (0+255),w,b
  9682  01000A  B4D8               	btfsc	status,2,c
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;UART.c: 25: {
  9686                           ;UART.c: 26: UART_Data_String();
  9687  01000C  ECD3  F098         	call	_UART_Data_String	;wreg free
  9688                           
  9689                           ;UART.c: 27: }
  9690                           ;UART.c: 29: printf("%u",Serial_No);
  9691  010010  0EF8               	movlw	low STR_1
  9692  010012  0100               	movlb	0	; () banked
  9693  010014  6FB1               	movwf	printf@f& (0+255),b
  9694  010016  0EFF               	movlw	high STR_1
  9695  010018  0100               	movlb	0	; () banked
  9696  01001A  6FB2               	movwf	(printf@f+1)& (0+255),b
  9697  01001C  C0DF  F0B3         	movff	_Serial_No,?_printf+2
  9698  010020  C0E0  F0B4         	movff	_Serial_No+1,?_printf+3
  9699  010024  ECA0  F086         	call	_printf	;wreg free
  9700                           
  9701                           ;UART.c: 30: usart_str_1(',');
  9702  010028  0E2C               	movlw	44
  9703  01002A  EC6F  F0D8         	call	_usart_str_1
  9704                           
  9705                           ;UART.c: 32: printf("%s","RT01 Rv3 KAVANOOR");
  9706  01002E  0EF5               	movlw	low STR_2
  9707  010030  0100               	movlb	0	; () banked
  9708  010032  6FB1               	movwf	printf@f& (0+255),b
  9709  010034  0EFF               	movlw	high STR_2
  9710  010036  0100               	movlb	0	; () banked
  9711  010038  6FB2               	movwf	(printf@f+1)& (0+255),b
  9712  01003A  0EBD               	movlw	low STR_3
  9713  01003C  0100               	movlb	0	; () banked
  9714  01003E  6FB3               	movwf	(?_printf+2)& (0+255),b
  9715  010040  0EFC               	movlw	high STR_3
  9716  010042  0100               	movlb	0	; () banked
  9717  010044  6FB4               	movwf	(?_printf+3)& (0+255),b
  9718  010046  ECA0  F086         	call	_printf	;wreg free
  9719                           
  9720                           ;UART.c: 33: usart_str_1(',');
  9721  01004A  0E2C               	movlw	44
  9722  01004C  EC6F  F0D8         	call	_usart_str_1
  9723                           
  9724                           ;UART.c: 35: printf("%4.02f",Wind_Speed);
  9725  010050  0EC6               	movlw	low STR_4
  9726  010052  0100               	movlb	0	; () banked
  9727  010054  6FB1               	movwf	printf@f& (0+255),b
  9728  010056  0EFF               	movlw	high STR_4
  9729  010058  0100               	movlb	0	; () banked
  9730  01005A  6FB2               	movwf	(printf@f+1)& (0+255),b
  9731  01005C  C233  F0B3         	movff	_Wind_Speed,?_printf+2
  9732  010060  C234  F0B4         	movff	_Wind_Speed+1,?_printf+3
  9733  010064  C235  F0B5         	movff	_Wind_Speed+2,?_printf+4
  9734  010068  ECA0  F086         	call	_printf	;wreg free
  9735                           
  9736                           ;UART.c: 36: usart_str_1(',');
  9737  01006C  0E2C               	movlw	44
  9738  01006E  EC6F  F0D8         	call	_usart_str_1
  9739                           
  9740                           ;UART.c: 38: printf("%4.02f",Wind_Speed_Avg);
  9741  010072  0EC6               	movlw	low STR_4
  9742  010074  0100               	movlb	0	; () banked
  9743  010076  6FB1               	movwf	printf@f& (0+255),b
  9744  010078  0EFF               	movlw	high STR_4
  9745  01007A  0100               	movlb	0	; () banked
  9746  01007C  6FB2               	movwf	(printf@f+1)& (0+255),b
  9747  01007E  C00D  F0B3         	movff	_Wind_Speed_Avg,?_printf+2
  9748  010082  C00E  F0B4         	movff	_Wind_Speed_Avg+1,?_printf+3
  9749  010086  C00F  F0B5         	movff	_Wind_Speed_Avg+2,?_printf+4
  9750  01008A  ECA0  F086         	call	_printf	;wreg free
  9751                           
  9752                           ;UART.c: 39: usart_str_1(',');
  9753  01008E  0E2C               	movlw	44
  9754  010090  EC6F  F0D8         	call	_usart_str_1
  9755                           
  9756                           ;UART.c: 41: printf("%4.02f",Wind_Speed_2);
  9757  010094  0EC6               	movlw	low STR_4
  9758  010096  0100               	movlb	0	; () banked
  9759  010098  6FB1               	movwf	printf@f& (0+255),b
  9760  01009A  0EFF               	movlw	high STR_4
  9761  01009C  0100               	movlb	0	; () banked
  9762  01009E  6FB2               	movwf	(printf@f+1)& (0+255),b
  9763  0100A0  C242  F0B3         	movff	_Wind_Speed_2,?_printf+2
  9764  0100A4  C243  F0B4         	movff	_Wind_Speed_2+1,?_printf+3
  9765  0100A8  C244  F0B5         	movff	_Wind_Speed_2+2,?_printf+4
  9766  0100AC  ECA0  F086         	call	_printf	;wreg free
  9767                           
  9768                           ;UART.c: 42: usart_str_1(',');
  9769  0100B0  0E2C               	movlw	44
  9770  0100B2  EC6F  F0D8         	call	_usart_str_1
  9771                           
  9772                           ;UART.c: 44: printf("%4.02f",Wind_Speed_Avg_2);
  9773  0100B6  0EC6               	movlw	low STR_4
  9774  0100B8  0100               	movlb	0	; () banked
  9775  0100BA  6FB1               	movwf	printf@f& (0+255),b
  9776  0100BC  0EFF               	movlw	high STR_4
  9777  0100BE  0100               	movlb	0	; () banked
  9778  0100C0  6FB2               	movwf	(printf@f+1)& (0+255),b
  9779  0100C2  C4C6  F0B3         	movff	_Wind_Speed_Avg_2,?_printf+2
  9780  0100C6  C4C7  F0B4         	movff	_Wind_Speed_Avg_2+1,?_printf+3
  9781  0100CA  C4C8  F0B5         	movff	_Wind_Speed_Avg_2+2,?_printf+4
  9782  0100CE  ECA0  F086         	call	_printf	;wreg free
  9783                           
  9784                           ;UART.c: 45: usart_str_1(',');
  9785  0100D2  0E2C               	movlw	44
  9786  0100D4  EC6F  F0D8         	call	_usart_str_1
  9787                           
  9788                           ;UART.c: 47: printf("%4.02f",Turbine_RPM);
  9789  0100D8  0EC6               	movlw	low STR_4
  9790  0100DA  0100               	movlb	0	; () banked
  9791  0100DC  6FB1               	movwf	printf@f& (0+255),b
  9792  0100DE  0EFF               	movlw	high STR_4
  9793  0100E0  0100               	movlb	0	; () banked
  9794  0100E2  6FB2               	movwf	(printf@f+1)& (0+255),b
  9795  0100E4  C00A  F0B3         	movff	_Turbine_RPM,?_printf+2
  9796  0100E8  C00B  F0B4         	movff	_Turbine_RPM+1,?_printf+3
  9797  0100EC  C00C  F0B5         	movff	_Turbine_RPM+2,?_printf+4
  9798  0100F0  ECA0  F086         	call	_printf	;wreg free
  9799                           
  9800                           ;UART.c: 48: usart_str_1(',');
  9801  0100F4  0E2C               	movlw	44
  9802  0100F6  EC6F  F0D8         	call	_usart_str_1
  9803                           
  9804                           ;UART.c: 50: printf("%d",Generator_RPM_INT);
  9805  0100FA  0EF2               	movlw	low STR_9
  9806  0100FC  0100               	movlb	0	; () banked
  9807  0100FE  6FB1               	movwf	printf@f& (0+255),b
  9808  010100  0EFF               	movlw	high STR_9
  9809  010102  0100               	movlb	0	; () banked
  9810  010104  6FB2               	movwf	(printf@f+1)& (0+255),b
  9811  010106  C288  F0B3         	movff	_Generator_RPM_INT,?_printf+2
  9812  01010A  C289  F0B4         	movff	_Generator_RPM_INT+1,?_printf+3
  9813  01010E  ECA0  F086         	call	_printf	;wreg free
  9814                           
  9815                           ;UART.c: 51: usart_str_1(',');
  9816  010112  0E2C               	movlw	44
  9817  010114  EC6F  F0D8         	call	_usart_str_1
  9818                           
  9819                           ;UART.c: 53: printf("%4.02f",Motor_slip);
  9820  010118  0EC6               	movlw	low STR_4
  9821  01011A  0100               	movlb	0	; () banked
  9822  01011C  6FB1               	movwf	printf@f& (0+255),b
  9823  01011E  0EFF               	movlw	high STR_4
  9824  010120  0100               	movlb	0	; () banked
  9825  010122  6FB2               	movwf	(printf@f+1)& (0+255),b
  9826  010124  C0CA  F0B3         	movff	_Motor_slip,?_printf+2
  9827  010128  C0CB  F0B4         	movff	_Motor_slip+1,?_printf+3
  9828  01012C  C0CC  F0B5         	movff	_Motor_slip+2,?_printf+4
  9829  010130  ECA0  F086         	call	_printf	;wreg free
  9830                           
  9831                           ;UART.c: 54: usart_str_1(',');
  9832  010134  0E2C               	movlw	44
  9833  010136  EC6F  F0D8         	call	_usart_str_1
  9834                           
  9835                           ;UART.c: 56: printf("%4.02f",Rotor_slip);
  9836  01013A  0EC6               	movlw	low STR_4
  9837  01013C  0100               	movlb	0	; () banked
  9838  01013E  6FB1               	movwf	printf@f& (0+255),b
  9839  010140  0EFF               	movlw	high STR_4
  9840  010142  0100               	movlb	0	; () banked
  9841  010144  6FB2               	movwf	(printf@f+1)& (0+255),b
  9842  010146  C0D3  F0B3         	movff	_Rotor_slip,?_printf+2
  9843  01014A  C0D4  F0B4         	movff	_Rotor_slip+1,?_printf+3
  9844  01014E  C0D5  F0B5         	movff	_Rotor_slip+2,?_printf+4
  9845  010152  ECA0  F086         	call	_printf	;wreg free
  9846                           
  9847                           ;UART.c: 57: usart_str_1(',');
  9848  010156  0E2C               	movlw	44
  9849  010158  EC6F  F0D8         	call	_usart_str_1
  9850                           
  9851                           ;UART.c: 59: printf("%d",Desired_Frequency);
  9852  01015C  0EF2               	movlw	low STR_9
  9853  01015E  0100               	movlb	0	; () banked
  9854  010160  6FB1               	movwf	printf@f& (0+255),b
  9855  010162  0EFF               	movlw	high STR_9
  9856  010164  0100               	movlb	0	; () banked
  9857  010166  6FB2               	movwf	(printf@f+1)& (0+255),b
  9858  010168  C016  F0B3         	movff	_Desired_Frequency,?_printf+2
  9859  01016C  0100               	movlb	0	; () banked
  9860  01016E  6BB4               	clrf	(?_printf+3)& (0+255),b
  9861  010170  ECA0  F086         	call	_printf	;wreg free
  9862                           
  9863                           ;UART.c: 60: usart_str_1(',');
  9864  010174  0E2C               	movlw	44
  9865  010176  EC6F  F0D8         	call	_usart_str_1
  9866                           
  9867                           ;UART.c: 62: printf("%d",VFD_Bus_Voltage);
  9868  01017A  0EF2               	movlw	low STR_9
  9869  01017C  0100               	movlb	0	; () banked
  9870  01017E  6FB1               	movwf	printf@f& (0+255),b
  9871  010180  0EFF               	movlw	high STR_9
  9872  010182  0100               	movlb	0	; () banked
  9873  010184  6FB2               	movwf	(printf@f+1)& (0+255),b
  9874  010186  C13E  F0B3         	movff	_VFD_Bus_Voltage,?_printf+2
  9875  01018A  C13F  F0B4         	movff	_VFD_Bus_Voltage+1,?_printf+3
  9876  01018E  ECA0  F086         	call	_printf	;wreg free
  9877                           
  9878                           ;UART.c: 63: usart_str_1(',');
  9879  010192  0E2C               	movlw	44
  9880  010194  EC6F  F0D8         	call	_usart_str_1
  9881                           
  9882                           ;UART.c: 65: printf("%4.01f",DC_Bus_Current);
  9883  010198  0EBF               	movlw	low STR_14
  9884  01019A  0100               	movlb	0	; () banked
  9885  01019C  6FB1               	movwf	printf@f& (0+255),b
  9886  01019E  0EFF               	movlw	high STR_14
  9887  0101A0  0100               	movlb	0	; () banked
  9888  0101A2  6FB2               	movwf	(printf@f+1)& (0+255),b
  9889  0101A4  C20F  F0B3         	movff	_DC_Bus_Current,?_printf+2
  9890  0101A8  C210  F0B4         	movff	_DC_Bus_Current+1,?_printf+3
  9891  0101AC  C211  F0B5         	movff	_DC_Bus_Current+2,?_printf+4
  9892  0101B0  ECA0  F086         	call	_printf	;wreg free
  9893                           
  9894                           ;UART.c: 66: usart_str_1(',');
  9895  0101B4  0E2C               	movlw	44
  9896  0101B6  EC6F  F0D8         	call	_usart_str_1
  9897                           
  9898                           ;UART.c: 68: printf("%4.0f",R_Volt);
  9899  0101BA  0ED4               	movlw	low STR_15
  9900  0101BC  0100               	movlb	0	; () banked
  9901  0101BE  6FB1               	movwf	printf@f& (0+255),b
  9902  0101C0  0EFF               	movlw	high STR_15
  9903  0101C2  0100               	movlb	0	; () banked
  9904  0101C4  6FB2               	movwf	(printf@f+1)& (0+255),b
  9905  0101C6  C007  F0B3         	movff	_R_Volt,?_printf+2
  9906  0101CA  C008  F0B4         	movff	_R_Volt+1,?_printf+3
  9907  0101CE  C009  F0B5         	movff	_R_Volt+2,?_printf+4
  9908  0101D2  ECA0  F086         	call	_printf	;wreg free
  9909                           
  9910                           ;UART.c: 69: usart_str_1(',');
  9911  0101D6  0E2C               	movlw	44
  9912  0101D8  EC6F  F0D8         	call	_usart_str_1
  9913                           
  9914                           ;UART.c: 71: printf("%4.0f",Y_Volt);
  9915  0101DC  0ED4               	movlw	low STR_15
  9916  0101DE  0100               	movlb	0	; () banked
  9917  0101E0  6FB1               	movwf	printf@f& (0+255),b
  9918  0101E2  0EFF               	movlw	high STR_15
  9919  0101E4  0100               	movlb	0	; () banked
  9920  0101E6  6FB2               	movwf	(printf@f+1)& (0+255),b
  9921  0101E8  C010  F0B3         	movff	_Y_Volt,?_printf+2
  9922  0101EC  C011  F0B4         	movff	_Y_Volt+1,?_printf+3
  9923  0101F0  C012  F0B5         	movff	_Y_Volt+2,?_printf+4
  9924  0101F4  ECA0  F086         	call	_printf	;wreg free
  9925                           
  9926                           ;UART.c: 72: usart_str_1(',');
  9927  0101F8  0E2C               	movlw	44
  9928  0101FA  EC6F  F0D8         	call	_usart_str_1
  9929                           
  9930                           ;UART.c: 74: printf("%4.0f",B_Volt);
  9931  0101FE  0ED4               	movlw	low STR_15
  9932  010200  0100               	movlb	0	; () banked
  9933  010202  6FB1               	movwf	printf@f& (0+255),b
  9934  010204  0EFF               	movlw	high STR_15
  9935  010206  0100               	movlb	0	; () banked
  9936  010208  6FB2               	movwf	(printf@f+1)& (0+255),b
  9937  01020A  C001  F0B3         	movff	_B_Volt,?_printf+2
  9938  01020E  C002  F0B4         	movff	_B_Volt+1,?_printf+3
  9939  010212  C003  F0B5         	movff	_B_Volt+2,?_printf+4
  9940  010216  ECA0  F086         	call	_printf	;wreg free
  9941                           
  9942                           ;UART.c: 75: usart_str_1(',');
  9943  01021A  0E2C               	movlw	44
  9944  01021C  EC6F  F0D8         	call	_usart_str_1
  9945                           
  9946                           ;UART.c: 77: printf("%4.01f",R_Curr);
  9947  010220  0EBF               	movlw	low STR_14
  9948  010222  0100               	movlb	0	; () banked
  9949  010224  6FB1               	movwf	printf@f& (0+255),b
  9950  010226  0EFF               	movlw	high STR_14
  9951  010228  0100               	movlb	0	; () banked
  9952  01022A  6FB2               	movwf	(printf@f+1)& (0+255),b
  9953  01022C  C0CD  F0B3         	movff	_R_Curr,?_printf+2
  9954  010230  C0CE  F0B4         	movff	_R_Curr+1,?_printf+3
  9955  010234  C0CF  F0B5         	movff	_R_Curr+2,?_printf+4
  9956  010238  ECA0  F086         	call	_printf	;wreg free
  9957                           
  9958                           ;UART.c: 78: usart_str_1(',');
  9959  01023C  0E2C               	movlw	44
  9960  01023E  EC6F  F0D8         	call	_usart_str_1
  9961                           
  9962                           ;UART.c: 80: printf("%4.01f",Y_Curr);
  9963  010242  0EBF               	movlw	low STR_14
  9964  010244  0100               	movlb	0	; () banked
  9965  010246  6FB1               	movwf	printf@f& (0+255),b
  9966  010248  0EFF               	movlw	high STR_14
  9967  01024A  0100               	movlb	0	; () banked
  9968  01024C  6FB2               	movwf	(printf@f+1)& (0+255),b
  9969  01024E  C0D6  F0B3         	movff	_Y_Curr,?_printf+2
  9970  010252  C0D7  F0B4         	movff	_Y_Curr+1,?_printf+3
  9971  010256  C0D8  F0B5         	movff	_Y_Curr+2,?_printf+4
  9972  01025A  ECA0  F086         	call	_printf	;wreg free
  9973                           
  9974                           ;UART.c: 81: usart_str_1(',');
  9975  01025E  0E2C               	movlw	44
  9976  010260  EC6F  F0D8         	call	_usart_str_1
  9977                           
  9978                           ;UART.c: 83: printf("%4.01f",B_Curr);
  9979  010264  0EBF               	movlw	low STR_14
  9980  010266  0100               	movlb	0	; () banked
  9981  010268  6FB1               	movwf	printf@f& (0+255),b
  9982  01026A  0EFF               	movlw	high STR_14
  9983  01026C  0100               	movlb	0	; () banked
  9984  01026E  6FB2               	movwf	(printf@f+1)& (0+255),b
  9985  010270  C0C4  F0B3         	movff	_B_Curr,?_printf+2
  9986  010274  C0C5  F0B4         	movff	_B_Curr+1,?_printf+3
  9987  010278  C0C6  F0B5         	movff	_B_Curr+2,?_printf+4
  9988  01027C  ECA0  F086         	call	_printf	;wreg free
  9989                           
  9990                           ;UART.c: 84: usart_str_1(',');
  9991  010280  0E2C               	movlw	44
  9992  010282  EC6F  F0D8         	call	_usart_str_1
  9993                           
  9994                           ;UART.c: 86: printf("%4.02f",KW);
  9995  010286  0EC6               	movlw	low STR_4
  9996  010288  0100               	movlb	0	; () banked
  9997  01028A  6FB1               	movwf	printf@f& (0+255),b
  9998  01028C  0EFF               	movlw	high STR_4
  9999  01028E  0100               	movlb	0	; () banked
 10000  010290  6FB2               	movwf	(printf@f+1)& (0+255),b
 10001  010292  C022  F0B3         	movff	_KW,?_printf+2
 10002  010296  C023  F0B4         	movff	_KW+1,?_printf+3
 10003  01029A  C024  F0B5         	movff	_KW+2,?_printf+4
 10004  01029E  ECA0  F086         	call	_printf	;wreg free
 10005                           
 10006                           ;UART.c: 87: usart_str_1(',');
 10007  0102A2  0E2C               	movlw	44
 10008  0102A4  EC6F  F0D8         	call	_usart_str_1
 10009                           
 10010                           ;UART.c: 89: printf("%4.02f",Y_KW);
 10011  0102A8  0EC6               	movlw	low STR_4
 10012  0102AA  0100               	movlb	0	; () banked
 10013  0102AC  6FB1               	movwf	printf@f& (0+255),b
 10014  0102AE  0EFF               	movlw	high STR_4
 10015  0102B0  0100               	movlb	0	; () banked
 10016  0102B2  6FB2               	movwf	(printf@f+1)& (0+255),b
 10017  0102B4  C2F0  F0B3         	movff	_Y_KW,?_printf+2
 10018  0102B8  C2F1  F0B4         	movff	_Y_KW+1,?_printf+3
 10019  0102BC  C2F2  F0B5         	movff	_Y_KW+2,?_printf+4
 10020  0102C0  ECA0  F086         	call	_printf	;wreg free
 10021                           
 10022                           ;UART.c: 90: usart_str_1(',');
 10023  0102C4  0E2C               	movlw	44
 10024  0102C6  EC6F  F0D8         	call	_usart_str_1
 10025                           
 10026                           ;UART.c: 92: printf("%4.02f",KVA);
 10027  0102CA  0EC6               	movlw	low STR_4
 10028  0102CC  0100               	movlb	0	; () banked
 10029  0102CE  6FB1               	movwf	printf@f& (0+255),b
 10030  0102D0  0EFF               	movlw	high STR_4
 10031  0102D2  0100               	movlb	0	; () banked
 10032  0102D4  6FB2               	movwf	(printf@f+1)& (0+255),b
 10033  0102D6  C218  F0B3         	movff	_KVA,?_printf+2
 10034  0102DA  C219  F0B4         	movff	_KVA+1,?_printf+3
 10035  0102DE  C21A  F0B5         	movff	_KVA+2,?_printf+4
 10036  0102E2  ECA0  F086         	call	_printf	;wreg free
 10037                           
 10038                           ;UART.c: 93: usart_str_1(',');
 10039  0102E6  0E2C               	movlw	44
 10040  0102E8  EC6F  F0D8         	call	_usart_str_1
 10041                           
 10042                           ;UART.c: 95: printf("%4.02f",KVAr);
 10043  0102EC  0EC6               	movlw	low STR_4
 10044  0102EE  0100               	movlb	0	; () banked
 10045  0102F0  6FB1               	movwf	printf@f& (0+255),b
 10046  0102F2  0EFF               	movlw	high STR_4
 10047  0102F4  0100               	movlb	0	; () banked
 10048  0102F6  6FB2               	movwf	(printf@f+1)& (0+255),b
 10049  0102F8  C4AB  F0B3         	movff	_KVAr,?_printf+2
 10050  0102FC  C4AC  F0B4         	movff	_KVAr+1,?_printf+3
 10051  010300  C4AD  F0B5         	movff	_KVAr+2,?_printf+4
 10052  010304  ECA0  F086         	call	_printf	;wreg free
 10053                           
 10054                           ;UART.c: 96: usart_str_1(',');
 10055  010308  0E2C               	movlw	44
 10056  01030A  EC6F  F0D8         	call	_usart_str_1
 10057                           
 10058                           ;UART.c: 98: printf("%4.02f",Total_Power_Factor);
 10059  01030E  0EC6               	movlw	low STR_4
 10060  010310  0100               	movlb	0	; () banked
 10061  010312  6FB1               	movwf	printf@f& (0+255),b
 10062  010314  0EFF               	movlw	high STR_4
 10063  010316  0100               	movlb	0	; () banked
 10064  010318  6FB2               	movwf	(printf@f+1)& (0+255),b
 10065  01031A  C22A  F0B3         	movff	_Total_Power_Factor,?_printf+2
 10066  01031E  C22B  F0B4         	movff	_Total_Power_Factor+1,?_printf+3
 10067  010322  C22C  F0B5         	movff	_Total_Power_Factor+2,?_printf+4
 10068  010326  ECA0  F086         	call	_printf	;wreg free
 10069                           
 10070                           ;UART.c: 99: usart_str_1(',');
 10071  01032A  0E2C               	movlw	44
 10072  01032C  EC6F  F0D8         	call	_usart_str_1
 10073                           
 10074                           ;UART.c: 101: printf("%4.02f",Y_Power_Factor);
 10075  010330  0EC6               	movlw	low STR_4
 10076  010332  0100               	movlb	0	; () banked
 10077  010334  6FB1               	movwf	printf@f& (0+255),b
 10078  010336  0EFF               	movlw	high STR_4
 10079  010338  0100               	movlb	0	; () banked
 10080  01033A  6FB2               	movwf	(printf@f+1)& (0+255),b
 10081  01033C  C272  F0B3         	movff	_Y_Power_Factor,?_printf+2
 10082  010340  C273  F0B4         	movff	_Y_Power_Factor+1,?_printf+3
 10083  010344  C274  F0B5         	movff	_Y_Power_Factor+2,?_printf+4
 10084  010348  ECA0  F086         	call	_printf	;wreg free
 10085                           
 10086                           ;UART.c: 102: usart_str_1(',');
 10087  01034C  0E2C               	movlw	44
 10088  01034E  EC6F  F0D8         	call	_usart_str_1
 10089                           
 10090                           ;UART.c: 104: printf("%4.02f",Frequency);
 10091  010352  0EC6               	movlw	low STR_4
 10092  010354  0100               	movlb	0	; () banked
 10093  010356  6FB1               	movwf	printf@f& (0+255),b
 10094  010358  0EFF               	movlw	high STR_4
 10095  01035A  0100               	movlb	0	; () banked
 10096  01035C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10097  01035E  C0C7  F0B3         	movff	_Frequency,?_printf+2
 10098  010362  C0C8  F0B4         	movff	_Frequency+1,?_printf+3
 10099  010366  C0C9  F0B5         	movff	_Frequency+2,?_printf+4
 10100  01036A  ECA0  F086         	call	_printf	;wreg free
 10101                           
 10102                           ;UART.c: 105: usart_str_1(',');
 10103  01036E  0E2C               	movlw	44
 10104  010370  EC6F  F0D8         	call	_usart_str_1
 10105                           
 10106                           ;UART.c: 107: printf("%d",Phase_Sequence_Ok);
 10107  010374  0EF2               	movlw	low STR_9
 10108  010376  0100               	movlb	0	; () banked
 10109  010378  6FB1               	movwf	printf@f& (0+255),b
 10110  01037A  0EFF               	movlw	high STR_9
 10111  01037C  0100               	movlb	0	; () banked
 10112  01037E  6FB2               	movwf	(printf@f+1)& (0+255),b
 10113  010380  C01E  F0B3         	movff	_Phase_Sequence_Ok,?_printf+2
 10114  010384  0100               	movlb	0	; () banked
 10115  010386  6BB4               	clrf	(?_printf+3)& (0+255),b
 10116  010388  ECA0  F086         	call	_printf	;wreg free
 10117                           
 10118                           ;UART.c: 108: usart_str_1(',');
 10119  01038C  0E2C               	movlw	44
 10120  01038E  EC6F  F0D8         	call	_usart_str_1
 10121                           
 10122                           ;UART.c: 110: printf("%d",VFD_Error_No);
 10123  010392  0EF2               	movlw	low STR_9
 10124  010394  0100               	movlb	0	; () banked
 10125  010396  6FB1               	movwf	printf@f& (0+255),b
 10126  010398  0EFF               	movlw	high STR_9
 10127  01039A  0100               	movlb	0	; () banked
 10128  01039C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10129  01039E  C020  F0B3         	movff	_VFD_Error_No,?_printf+2
 10130  0103A2  0100               	movlb	0	; () banked
 10131  0103A4  6BB4               	clrf	(?_printf+3)& (0+255),b
 10132  0103A6  ECA0  F086         	call	_printf	;wreg free
 10133                           
 10134                           ;UART.c: 111: usart_str_1(',');
 10135  0103AA  0E2C               	movlw	44
 10136  0103AC  EC6F  F0D8         	call	_usart_str_1
 10137                           
 10138                           ;UART.c: 113: printf("%d",Initial_Delay_Second);
 10139  0103B0  0EF2               	movlw	low STR_9
 10140  0103B2  0100               	movlb	0	; () banked
 10141  0103B4  6FB1               	movwf	printf@f& (0+255),b
 10142  0103B6  0EFF               	movlw	high STR_9
 10143  0103B8  0100               	movlb	0	; () banked
 10144  0103BA  6FB2               	movwf	(printf@f+1)& (0+255),b
 10145  0103BC  C12A  F0B3         	movff	_Initial_Delay_Second,?_printf+2
 10146  0103C0  C12B  F0B4         	movff	_Initial_Delay_Second+1,?_printf+3
 10147  0103C4  ECA0  F086         	call	_printf	;wreg free
 10148                           
 10149                           ;UART.c: 114: usart_str_1(',');
 10150  0103C8  0E2C               	movlw	44
 10151  0103CA  EC6F  F0D8         	call	_usart_str_1
 10152                           
 10153                           ;UART.c: 116: printf("%d",Errors);
 10154  0103CE  0EF2               	movlw	low STR_9
 10155  0103D0  0100               	movlb	0	; () banked
 10156  0103D2  6FB1               	movwf	printf@f& (0+255),b
 10157  0103D4  0EFF               	movlw	high STR_9
 10158  0103D6  0100               	movlb	0	; () banked
 10159  0103D8  6FB2               	movwf	(printf@f+1)& (0+255),b
 10160  0103DA  C01B  F0B3         	movff	_Errors,?_printf+2
 10161  0103DE  0100               	movlb	0	; () banked
 10162  0103E0  6BB4               	clrf	(?_printf+3)& (0+255),b
 10163  0103E2  ECA0  F086         	call	_printf	;wreg free
 10164                           
 10165                           ;UART.c: 117: usart_str_1(',');
 10166  0103E6  0E2C               	movlw	44
 10167  0103E8  EC6F  F0D8         	call	_usart_str_1
 10168                           
 10169                           ;UART.c: 119: switch(Errors)
 10170  0103EC  D1D4               	goto	l21796
 10171  0103EE                     l21690:
 10172                           
 10173                           ;UART.c: 122: printf("%s","NO_ERROR");
 10174  0103EE  0EF5               	movlw	low STR_2
 10175  0103F0  0100               	movlb	0	; () banked
 10176  0103F2  6FB1               	movwf	printf@f& (0+255),b
 10177  0103F4  0EFF               	movlw	high STR_2
 10178  0103F6  0100               	movlb	0	; () banked
 10179  0103F8  6FB2               	movwf	(printf@f+1)& (0+255),b
 10180  0103FA  0E55               	movlw	low STR_33
 10181  0103FC  0100               	movlb	0	; () banked
 10182  0103FE  6FB3               	movwf	(?_printf+2)& (0+255),b
 10183  010400  0EFF               	movlw	high STR_33
 10184  010402  0100               	movlb	0	; () banked
 10185  010404  6FB4               	movwf	(?_printf+3)& (0+255),b
 10186  010406  ECA0  F086         	call	_printf	;wreg free
 10187                           
 10188                           ;UART.c: 123: usart_str_1(',');
 10189  01040A  0E2C               	movlw	44
 10190  01040C  EC6F  F0D8         	call	_usart_str_1
 10191                           
 10192                           ;UART.c: 124: break;
 10193  010410  D25A               	goto	l21816
 10194  010412                     l21694:
 10195                           
 10196                           ;UART.c: 127: printf("%s","WS_MIN_MAX");
 10197  010412  0EF5               	movlw	low STR_2
 10198  010414  0100               	movlb	0	; () banked
 10199  010416  6FB1               	movwf	printf@f& (0+255),b
 10200  010418  0EFF               	movlw	high STR_2
 10201  01041A  0100               	movlb	0	; () banked
 10202  01041C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10203  01041E  0EA4               	movlw	low STR_35
 10204  010420  0100               	movlb	0	; () banked
 10205  010422  6FB3               	movwf	(?_printf+2)& (0+255),b
 10206  010424  0EFE               	movlw	high STR_35
 10207  010426  0100               	movlb	0	; () banked
 10208  010428  6FB4               	movwf	(?_printf+3)& (0+255),b
 10209  01042A  ECA0  F086         	call	_printf	;wreg free
 10210                           
 10211                           ;UART.c: 128: usart_str_1(',');
 10212  01042E  0E2C               	movlw	44
 10213  010430  EC6F  F0D8         	call	_usart_str_1
 10214                           
 10215                           ;UART.c: 129: break;
 10216  010434  D248               	goto	l21816
 10217  010436                     l21698:
 10218                           
 10219                           ;UART.c: 132: printf("%s","VOLT_HIGH");
 10220  010436  0EF5               	movlw	low STR_2
 10221  010438  0100               	movlb	0	; () banked
 10222  01043A  6FB1               	movwf	printf@f& (0+255),b
 10223  01043C  0EFF               	movlw	high STR_2
 10224  01043E  0100               	movlb	0	; () banked
 10225  010440  6FB2               	movwf	(printf@f+1)& (0+255),b
 10226  010442  0EAF               	movlw	low STR_37
 10227  010444  0100               	movlb	0	; () banked
 10228  010446  6FB3               	movwf	(?_printf+2)& (0+255),b
 10229  010448  0EFE               	movlw	high STR_37
 10230  01044A  0100               	movlb	0	; () banked
 10231  01044C  6FB4               	movwf	(?_printf+3)& (0+255),b
 10232  01044E  ECA0  F086         	call	_printf	;wreg free
 10233                           
 10234                           ;UART.c: 133: usart_str_1(',');
 10235  010452  0E2C               	movlw	44
 10236  010454  EC6F  F0D8         	call	_usart_str_1
 10237                           
 10238                           ;UART.c: 134: break;
 10239  010458  D236               	goto	l21816
 10240  01045A                     l21702:
 10241                           
 10242                           ;UART.c: 137: printf("%s","VOLT_LOW");
 10243  01045A  0EF5               	movlw	low STR_2
 10244  01045C  0100               	movlb	0	; () banked
 10245  01045E  6FB1               	movwf	printf@f& (0+255),b
 10246  010460  0EFF               	movlw	high STR_2
 10247  010462  0100               	movlb	0	; () banked
 10248  010464  6FB2               	movwf	(printf@f+1)& (0+255),b
 10249  010466  0E5E               	movlw	low STR_39
 10250  010468  0100               	movlb	0	; () banked
 10251  01046A  6FB3               	movwf	(?_printf+2)& (0+255),b
 10252  01046C  0EFF               	movlw	high STR_39
 10253  01046E  0100               	movlb	0	; () banked
 10254  010470  6FB4               	movwf	(?_printf+3)& (0+255),b
 10255  010472  ECA0  F086         	call	_printf	;wreg free
 10256                           
 10257                           ;UART.c: 138: usart_str_1(',');
 10258  010476  0E2C               	movlw	44
 10259  010478  EC6F  F0D8         	call	_usart_str_1
 10260                           
 10261                           ;UART.c: 139: break;
 10262  01047C  D224               	goto	l21816
 10263  01047E                     l21706:
 10264                           
 10265                           ;UART.c: 142: printf("%s","VFD_SHORT_CIRCUIT");
 10266  01047E  0EF5               	movlw	low STR_2
 10267  010480  0100               	movlb	0	; () banked
 10268  010482  6FB1               	movwf	printf@f& (0+255),b
 10269  010484  0EFF               	movlw	high STR_2
 10270  010486  0100               	movlb	0	; () banked
 10271  010488  6FB2               	movwf	(printf@f+1)& (0+255),b
 10272  01048A  0ECF               	movlw	low STR_41
 10273  01048C  0100               	movlb	0	; () banked
 10274  01048E  6FB3               	movwf	(?_printf+2)& (0+255),b
 10275  010490  0EFC               	movlw	high STR_41
 10276  010492  0100               	movlb	0	; () banked
 10277  010494  6FB4               	movwf	(?_printf+3)& (0+255),b
 10278  010496  ECA0  F086         	call	_printf	;wreg free
 10279                           
 10280                           ;UART.c: 143: usart_str_1(',');
 10281  01049A  0E2C               	movlw	44
 10282  01049C  EC6F  F0D8         	call	_usart_str_1
 10283                           
 10284                           ;UART.c: 144: break;
 10285  0104A0  D212               	goto	l21816
 10286  0104A2                     l21710:
 10287                           
 10288                           ;UART.c: 147: printf("%s","PHASE_SEQ");
 10289  0104A2  0EF5               	movlw	low STR_2
 10290  0104A4  0100               	movlb	0	; () banked
 10291  0104A6  6FB1               	movwf	printf@f& (0+255),b
 10292  0104A8  0EFF               	movlw	high STR_2
 10293  0104AA  0100               	movlb	0	; () banked
 10294  0104AC  6FB2               	movwf	(printf@f+1)& (0+255),b
 10295  0104AE  0ED7               	movlw	low STR_43
 10296  0104B0  0100               	movlb	0	; () banked
 10297  0104B2  6FB3               	movwf	(?_printf+2)& (0+255),b
 10298  0104B4  0EFE               	movlw	high STR_43
 10299  0104B6  0100               	movlb	0	; () banked
 10300  0104B8  6FB4               	movwf	(?_printf+3)& (0+255),b
 10301  0104BA  ECA0  F086         	call	_printf	;wreg free
 10302                           
 10303                           ;UART.c: 148: usart_str_1(',');
 10304  0104BE  0E2C               	movlw	44
 10305  0104C0  EC6F  F0D8         	call	_usart_str_1
 10306                           
 10307                           ;UART.c: 149: break;
 10308  0104C4  D200               	goto	l21816
 10309  0104C6                     l21714:
 10310                           
 10311                           ;UART.c: 152: printf("%s","FREQ");
 10312  0104C6  0EF5               	movlw	low STR_2
 10313  0104C8  0100               	movlb	0	; () banked
 10314  0104CA  6FB1               	movwf	printf@f& (0+255),b
 10315  0104CC  0EFF               	movlw	high STR_2
 10316  0104CE  0100               	movlb	0	; () banked
 10317  0104D0  6FB2               	movwf	(printf@f+1)& (0+255),b
 10318  0104D2  0EDF               	movlw	low STR_45
 10319  0104D4  0100               	movlb	0	; () banked
 10320  0104D6  6FB3               	movwf	(?_printf+2)& (0+255),b
 10321  0104D8  0EFF               	movlw	high STR_45
 10322  0104DA  0100               	movlb	0	; () banked
 10323  0104DC  6FB4               	movwf	(?_printf+3)& (0+255),b
 10324  0104DE  ECA0  F086         	call	_printf	;wreg free
 10325                           
 10326                           ;UART.c: 153: usart_str_1(',');
 10327  0104E2  0E2C               	movlw	44
 10328  0104E4  EC6F  F0D8         	call	_usart_str_1
 10329                           
 10330                           ;UART.c: 154: break;
 10331  0104E8  D1EE               	goto	l21816
 10332  0104EA                     l21718:
 10333                           
 10334                           ;UART.c: 157: printf("%s","TURBINE_NR");
 10335  0104EA  0EF5               	movlw	low STR_2
 10336  0104EC  0100               	movlb	0	; () banked
 10337  0104EE  6FB1               	movwf	printf@f& (0+255),b
 10338  0104F0  0EFF               	movlw	high STR_2
 10339  0104F2  0100               	movlb	0	; () banked
 10340  0104F4  6FB2               	movwf	(printf@f+1)& (0+255),b
 10341  0104F6  0E78               	movlw	low STR_47
 10342  0104F8  0100               	movlb	0	; () banked
 10343  0104FA  6FB3               	movwf	(?_printf+2)& (0+255),b
 10344  0104FC  0EFE               	movlw	high STR_47
 10345  0104FE  0100               	movlb	0	; () banked
 10346  010500  6FB4               	movwf	(?_printf+3)& (0+255),b
 10347  010502  ECA0  F086         	call	_printf	;wreg free
 10348                           
 10349                           ;UART.c: 158: usart_str_1(',');
 10350  010506  0E2C               	movlw	44
 10351  010508  EC6F  F0D8         	call	_usart_str_1
 10352                           
 10353                           ;UART.c: 159: break;
 10354  01050C  D1DC               	goto	l21816
 10355  01050E                     l21722:
 10356                           
 10357                           ;UART.c: 162: printf("%s","VFD_RUN_TIME");
 10358  01050E  0EF5               	movlw	low STR_2
 10359  010510  0100               	movlb	0	; () banked
 10360  010512  6FB1               	movwf	printf@f& (0+255),b
 10361  010514  0EFF               	movlw	high STR_2
 10362  010516  0100               	movlb	0	; () banked
 10363  010518  6FB2               	movwf	(printf@f+1)& (0+255),b
 10364  01051A  0EC3               	movlw	low STR_49
 10365  01051C  0100               	movlb	0	; () banked
 10366  01051E  6FB3               	movwf	(?_printf+2)& (0+255),b
 10367  010520  0EFD               	movlw	high STR_49
 10368  010522  0100               	movlb	0	; () banked
 10369  010524  6FB4               	movwf	(?_printf+3)& (0+255),b
 10370  010526  ECA0  F086         	call	_printf	;wreg free
 10371                           
 10372                           ;UART.c: 163: usart_str_1(',');
 10373  01052A  0E2C               	movlw	44
 10374  01052C  EC6F  F0D8         	call	_usart_str_1
 10375                           
 10376                           ;UART.c: 164: break;
 10377  010530  D1CA               	goto	l21816
 10378  010532                     l21726:
 10379                           
 10380                           ;UART.c: 167: printf("%s","DCB_L_H");
 10381  010532  0EF5               	movlw	low STR_2
 10382  010534  0100               	movlb	0	; () banked
 10383  010536  6FB1               	movwf	printf@f& (0+255),b
 10384  010538  0EFF               	movlw	high STR_2
 10385  01053A  0100               	movlb	0	; () banked
 10386  01053C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10387  01053E  0E6F               	movlw	low STR_51
 10388  010540  0100               	movlb	0	; () banked
 10389  010542  6FB3               	movwf	(?_printf+2)& (0+255),b
 10390  010544  0EFF               	movlw	high STR_51
 10391  010546  0100               	movlb	0	; () banked
 10392  010548  6FB4               	movwf	(?_printf+3)& (0+255),b
 10393  01054A  ECA0  F086         	call	_printf	;wreg free
 10394                           
 10395                           ;UART.c: 168: usart_str_1(',');
 10396  01054E  0E2C               	movlw	44
 10397  010550  EC6F  F0D8         	call	_usart_str_1
 10398                           
 10399                           ;UART.c: 169: break;
 10400  010554  D1B8               	goto	l21816
 10401  010556                     l21730:
 10402                           
 10403                           ;UART.c: 172: printf("%s","VFD_OC");
 10404  010556  0EF5               	movlw	low STR_2
 10405  010558  0100               	movlb	0	; () banked
 10406  01055A  6FB1               	movwf	printf@f& (0+255),b
 10407  01055C  0EFF               	movlw	high STR_2
 10408  01055E  0100               	movlb	0	; () banked
 10409  010560  6FB2               	movwf	(printf@f+1)& (0+255),b
 10410  010562  0E95               	movlw	low STR_53
 10411  010564  0100               	movlb	0	; () banked
 10412  010566  6FB3               	movwf	(?_printf+2)& (0+255),b
 10413  010568  0EFF               	movlw	high STR_53
 10414  01056A  0100               	movlb	0	; () banked
 10415  01056C  6FB4               	movwf	(?_printf+3)& (0+255),b
 10416  01056E  ECA0  F086         	call	_printf	;wreg free
 10417                           
 10418                           ;UART.c: 173: usart_str_1(',');
 10419  010572  0E2C               	movlw	44
 10420  010574  EC6F  F0D8         	call	_usart_str_1
 10421                           
 10422                           ;UART.c: 174: break;
 10423  010578  D1A6               	goto	l21816
 10424  01057A                     l21734:
 10425                           
 10426                           ;UART.c: 177: printf("%s","ROTOR_SLIP");
 10427  01057A  0EF5               	movlw	low STR_2
 10428  01057C  0100               	movlb	0	; () banked
 10429  01057E  6FB1               	movwf	printf@f& (0+255),b
 10430  010580  0EFF               	movlw	high STR_2
 10431  010582  0100               	movlb	0	; () banked
 10432  010584  6FB2               	movwf	(printf@f+1)& (0+255),b
 10433  010586  0E6D               	movlw	low STR_55
 10434  010588  0100               	movlb	0	; () banked
 10435  01058A  6FB3               	movwf	(?_printf+2)& (0+255),b
 10436  01058C  0EFE               	movlw	high STR_55
 10437  01058E  0100               	movlb	0	; () banked
 10438  010590  6FB4               	movwf	(?_printf+3)& (0+255),b
 10439  010592  ECA0  F086         	call	_printf	;wreg free
 10440                           
 10441                           ;UART.c: 178: usart_str_1(',');
 10442  010596  0E2C               	movlw	44
 10443  010598  EC6F  F0D8         	call	_usart_str_1
 10444                           
 10445                           ;UART.c: 179: break;
 10446  01059C  D194               	goto	l21816
 10447  01059E                     l21738:
 10448                           
 10449                           ;UART.c: 182: printf("%s","MOTOR_SLIP");
 10450  01059E  0EF5               	movlw	low STR_2
 10451  0105A0  0100               	movlb	0	; () banked
 10452  0105A2  6FB1               	movwf	printf@f& (0+255),b
 10453  0105A4  0EFF               	movlw	high STR_2
 10454  0105A6  0100               	movlb	0	; () banked
 10455  0105A8  6FB2               	movwf	(printf@f+1)& (0+255),b
 10456  0105AA  0E62               	movlw	low STR_57
 10457  0105AC  0100               	movlb	0	; () banked
 10458  0105AE  6FB3               	movwf	(?_printf+2)& (0+255),b
 10459  0105B0  0EFE               	movlw	high STR_57
 10460  0105B2  0100               	movlb	0	; () banked
 10461  0105B4  6FB4               	movwf	(?_printf+3)& (0+255),b
 10462  0105B6  ECA0  F086         	call	_printf	;wreg free
 10463                           
 10464                           ;UART.c: 183: usart_str_1(',');
 10465  0105BA  0E2C               	movlw	44
 10466  0105BC  EC6F  F0D8         	call	_usart_str_1
 10467                           
 10468                           ;UART.c: 184: break;
 10469  0105C0  D182               	goto	l21816
 10470  0105C2                     l21742:
 10471                           
 10472                           ;UART.c: 187: printf("%s","TURBINE_US_OS");
 10473  0105C2  0EF5               	movlw	low STR_2
 10474  0105C4  0100               	movlb	0	; () banked
 10475  0105C6  6FB1               	movwf	printf@f& (0+255),b
 10476  0105C8  0EFF               	movlw	high STR_2
 10477  0105CA  0100               	movlb	0	; () banked
 10478  0105CC  6FB2               	movwf	(printf@f+1)& (0+255),b
 10479  0105CE  0EA7               	movlw	low STR_59
 10480  0105D0  0100               	movlb	0	; () banked
 10481  0105D2  6FB3               	movwf	(?_printf+2)& (0+255),b
 10482  0105D4  0EFD               	movlw	high STR_59
 10483  0105D6  0100               	movlb	0	; () banked
 10484  0105D8  6FB4               	movwf	(?_printf+3)& (0+255),b
 10485  0105DA  ECA0  F086         	call	_printf	;wreg free
 10486                           
 10487                           ;UART.c: 188: usart_str_1(',');
 10488  0105DE  0E2C               	movlw	44
 10489  0105E0  EC6F  F0D8         	call	_usart_str_1
 10490                           
 10491                           ;UART.c: 189: break;
 10492  0105E4  D170               	goto	l21816
 10493  0105E6                     l21746:
 10494                           
 10495                           ;UART.c: 192: printf("%s","GEN_OS");
 10496  0105E6  0EF5               	movlw	low STR_2
 10497  0105E8  0100               	movlb	0	; () banked
 10498  0105EA  6FB1               	movwf	printf@f& (0+255),b
 10499  0105EC  0EFF               	movlw	high STR_2
 10500  0105EE  0100               	movlb	0	; () banked
 10501  0105F0  6FB2               	movwf	(printf@f+1)& (0+255),b
 10502  0105F2  0EA3               	movlw	low STR_61
 10503  0105F4  0100               	movlb	0	; () banked
 10504  0105F6  6FB3               	movwf	(?_printf+2)& (0+255),b
 10505  0105F8  0EFF               	movlw	high STR_61
 10506  0105FA  0100               	movlb	0	; () banked
 10507  0105FC  6FB4               	movwf	(?_printf+3)& (0+255),b
 10508  0105FE  ECA0  F086         	call	_printf	;wreg free
 10509                           
 10510                           ;UART.c: 193: usart_str_1(',');
 10511  010602  0E2C               	movlw	44
 10512  010604  EC6F  F0D8         	call	_usart_str_1
 10513                           
 10514                           ;UART.c: 194: break;
 10515  010608  D15E               	goto	l21816
 10516  01060A                     l21750:
 10517                           
 10518                           ;UART.c: 197: printf("%s","CURRENT_H");
 10519  01060A  0EF5               	movlw	low STR_2
 10520  01060C  0100               	movlb	0	; () banked
 10521  01060E  6FB1               	movwf	printf@f& (0+255),b
 10522  010610  0EFF               	movlw	high STR_2
 10523  010612  0100               	movlb	0	; () banked
 10524  010614  6FB2               	movwf	(printf@f+1)& (0+255),b
 10525  010616  0EB9               	movlw	low STR_63
 10526  010618  0100               	movlb	0	; () banked
 10527  01061A  6FB3               	movwf	(?_printf+2)& (0+255),b
 10528  01061C  0EFE               	movlw	high STR_63
 10529  01061E  0100               	movlb	0	; () banked
 10530  010620  6FB4               	movwf	(?_printf+3)& (0+255),b
 10531  010622  ECA0  F086         	call	_printf	;wreg free
 10532                           
 10533                           ;UART.c: 198: usart_str_1(',');
 10534  010626  0E2C               	movlw	44
 10535  010628  EC6F  F0D8         	call	_usart_str_1
 10536                           
 10537                           ;UART.c: 199: break;
 10538  01062C  D14C               	goto	l21816
 10539  01062E                     l21754:
 10540                           
 10541                           ;UART.c: 202: printf("%s","POWER_MAX");
 10542  01062E  0EF5               	movlw	low STR_2
 10543  010630  0100               	movlb	0	; () banked
 10544  010632  6FB1               	movwf	printf@f& (0+255),b
 10545  010634  0EFF               	movlw	high STR_2
 10546  010636  0100               	movlb	0	; () banked
 10547  010638  6FB2               	movwf	(printf@f+1)& (0+255),b
 10548  01063A  0E13               	movlw	low STR_65
 10549  01063C  0100               	movlb	0	; () banked
 10550  01063E  6FB3               	movwf	(?_printf+2)& (0+255),b
 10551  010640  0EFF               	movlw	high STR_65
 10552  010642  0100               	movlb	0	; () banked
 10553  010644  6FB4               	movwf	(?_printf+3)& (0+255),b
 10554  010646  ECA0  F086         	call	_printf	;wreg free
 10555                           
 10556                           ;UART.c: 203: usart_str_1(',');
 10557  01064A  0E2C               	movlw	44
 10558  01064C  EC6F  F0D8         	call	_usart_str_1
 10559                           
 10560                           ;UART.c: 204: break;
 10561  010650  D13A               	goto	l21816
 10562  010652                     l21758:
 10563                           
 10564                           ;UART.c: 207: printf("%s","POWER_MIN");
 10565  010652  0EF5               	movlw	low STR_2
 10566  010654  0100               	movlb	0	; () banked
 10567  010656  6FB1               	movwf	printf@f& (0+255),b
 10568  010658  0EFF               	movlw	high STR_2
 10569  01065A  0100               	movlb	0	; () banked
 10570  01065C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10571  01065E  0EC3               	movlw	low STR_67
 10572  010660  0100               	movlb	0	; () banked
 10573  010662  6FB3               	movwf	(?_printf+2)& (0+255),b
 10574  010664  0EFE               	movlw	high STR_67
 10575  010666  0100               	movlb	0	; () banked
 10576  010668  6FB4               	movwf	(?_printf+3)& (0+255),b
 10577  01066A  ECA0  F086         	call	_printf	;wreg free
 10578                           
 10579                           ;UART.c: 208: usart_str_1(',');
 10580  01066E  0E2C               	movlw	44
 10581  010670  EC6F  F0D8         	call	_usart_str_1
 10582                           
 10583                           ;UART.c: 209: break;
 10584  010674  D128               	goto	l21816
 10585  010676                     l21762:
 10586                           
 10587                           ;UART.c: 212: printf("%s","TURBINE_OL");
 10588  010676  0EF5               	movlw	low STR_2
 10589  010678  0100               	movlb	0	; () banked
 10590  01067A  6FB1               	movwf	printf@f& (0+255),b
 10591  01067C  0EFF               	movlw	high STR_2
 10592  01067E  0100               	movlb	0	; () banked
 10593  010680  6FB2               	movwf	(printf@f+1)& (0+255),b
 10594  010682  0E57               	movlw	low STR_69
 10595  010684  0100               	movlb	0	; () banked
 10596  010686  6FB3               	movwf	(?_printf+2)& (0+255),b
 10597  010688  0EFE               	movlw	high STR_69
 10598  01068A  0100               	movlb	0	; () banked
 10599  01068C  6FB4               	movwf	(?_printf+3)& (0+255),b
 10600  01068E  ECA0  F086         	call	_printf	;wreg free
 10601                           
 10602                           ;UART.c: 213: usart_str_1(',');
 10603  010692  0E2C               	movlw	44
 10604  010694  EC6F  F0D8         	call	_usart_str_1
 10605                           
 10606                           ;UART.c: 214: break;
 10607  010698  D116               	goto	l21816
 10608  01069A                     l21766:
 10609                           
 10610                           ;UART.c: 217: printf("%s","DC_EXT_LOW");
 10611  01069A  0EF5               	movlw	low STR_2
 10612  01069C  0100               	movlb	0	; () banked
 10613  01069E  6FB1               	movwf	printf@f& (0+255),b
 10614  0106A0  0EFF               	movlw	high STR_2
 10615  0106A2  0100               	movlb	0	; () banked
 10616  0106A4  6FB2               	movwf	(printf@f+1)& (0+255),b
 10617  0106A6  0E99               	movlw	low STR_71
 10618  0106A8  0100               	movlb	0	; () banked
 10619  0106AA  6FB3               	movwf	(?_printf+2)& (0+255),b
 10620  0106AC  0EFE               	movlw	high STR_71
 10621  0106AE  0100               	movlb	0	; () banked
 10622  0106B0  6FB4               	movwf	(?_printf+3)& (0+255),b
 10623  0106B2  ECA0  F086         	call	_printf	;wreg free
 10624                           
 10625                           ;UART.c: 218: usart_str_1(',');
 10626  0106B6  0E2C               	movlw	44
 10627  0106B8  EC6F  F0D8         	call	_usart_str_1
 10628                           
 10629                           ;UART.c: 219: break;
 10630  0106BC  D104               	goto	l21816
 10631  0106BE                     l21770:
 10632                           
 10633                           ;UART.c: 222: printf("%s","PITCH_FB");
 10634  0106BE  0EF5               	movlw	low STR_2
 10635  0106C0  0100               	movlb	0	; () banked
 10636  0106C2  6FB1               	movwf	printf@f& (0+255),b
 10637  0106C4  0EFF               	movlw	high STR_2
 10638  0106C6  0100               	movlb	0	; () banked
 10639  0106C8  6FB2               	movwf	(printf@f+1)& (0+255),b
 10640  0106CA  0E31               	movlw	low STR_73
 10641  0106CC  0100               	movlb	0	; () banked
 10642  0106CE  6FB3               	movwf	(?_printf+2)& (0+255),b
 10643  0106D0  0EFF               	movlw	high STR_73
 10644  0106D2  0100               	movlb	0	; () banked
 10645  0106D4  6FB4               	movwf	(?_printf+3)& (0+255),b
 10646  0106D6  ECA0  F086         	call	_printf	;wreg free
 10647                           
 10648                           ;UART.c: 223: usart_str_1(',');
 10649  0106DA  0E2C               	movlw	44
 10650  0106DC  EC6F  F0D8         	call	_usart_str_1
 10651                           
 10652                           ;UART.c: 224: break;
 10653  0106E0  D0F2               	goto	l21816
 10654  0106E2                     l21774:
 10655                           
 10656                           ;UART.c: 227: printf("%s","GEN_FB");
 10657  0106E2  0EF5               	movlw	low STR_2
 10658  0106E4  0100               	movlb	0	; () banked
 10659  0106E6  6FB1               	movwf	printf@f& (0+255),b
 10660  0106E8  0EFF               	movlw	high STR_2
 10661  0106EA  0100               	movlb	0	; () banked
 10662  0106EC  6FB2               	movwf	(printf@f+1)& (0+255),b
 10663  0106EE  0E8E               	movlw	low STR_75
 10664  0106F0  0100               	movlb	0	; () banked
 10665  0106F2  6FB3               	movwf	(?_printf+2)& (0+255),b
 10666  0106F4  0EFF               	movlw	high STR_75
 10667  0106F6  0100               	movlb	0	; () banked
 10668  0106F8  6FB4               	movwf	(?_printf+3)& (0+255),b
 10669  0106FA  ECA0  F086         	call	_printf	;wreg free
 10670                           
 10671                           ;UART.c: 228: usart_str_1(',');
 10672  0106FE  0E2C               	movlw	44
 10673  010700  EC6F  F0D8         	call	_usart_str_1
 10674                           
 10675                           ;UART.c: 229: break;
 10676  010704  D0E0               	goto	l21816
 10677  010706                     l21778:
 10678                           
 10679                           ;UART.c: 232: printf("%s","MANUAL_STOP");
 10680  010706  0EF5               	movlw	low STR_2
 10681  010708  0100               	movlb	0	; () banked
 10682  01070A  6FB1               	movwf	printf@f& (0+255),b
 10683  01070C  0EFF               	movlw	high STR_2
 10684  01070E  0100               	movlb	0	; () banked
 10685  010710  6FB2               	movwf	(printf@f+1)& (0+255),b
 10686  010712  0E35               	movlw	low STR_77
 10687  010714  0100               	movlb	0	; () banked
 10688  010716  6FB3               	movwf	(?_printf+2)& (0+255),b
 10689  010718  0EFE               	movlw	high STR_77
 10690  01071A  0100               	movlb	0	; () banked
 10691  01071C  6FB4               	movwf	(?_printf+3)& (0+255),b
 10692  01071E  ECA0  F086         	call	_printf	;wreg free
 10693                           
 10694                           ;UART.c: 233: usart_str_1(',');
 10695  010722  0E2C               	movlw	44
 10696  010724  EC6F  F0D8         	call	_usart_str_1
 10697                           
 10698                           ;UART.c: 234: break;
 10699  010728  D0CE               	goto	l21816
 10700  01072A                     l21782:
 10701                           
 10702                           ;UART.c: 237: printf("%s","VFD_COMMU_ERR");
 10703  01072A  0EF5               	movlw	low STR_2
 10704  01072C  0100               	movlb	0	; () banked
 10705  01072E  6FB1               	movwf	printf@f& (0+255),b
 10706  010730  0EFF               	movlw	high STR_2
 10707  010732  0100               	movlb	0	; () banked
 10708  010734  6FB2               	movwf	(printf@f+1)& (0+255),b
 10709  010736  0E99               	movlw	low STR_79
 10710  010738  0100               	movlb	0	; () banked
 10711  01073A  6FB3               	movwf	(?_printf+2)& (0+255),b
 10712  01073C  0EFD               	movlw	high STR_79
 10713  01073E  0100               	movlb	0	; () banked
 10714  010740  6FB4               	movwf	(?_printf+3)& (0+255),b
 10715  010742  ECA0  F086         	call	_printf	;wreg free
 10716                           
 10717                           ;UART.c: 238: usart_str_1(',');
 10718  010746  0E2C               	movlw	44
 10719  010748  EC6F  F0D8         	call	_usart_str_1
 10720                           
 10721                           ;UART.c: 239: break;
 10722  01074C  D0BC               	goto	l21816
 10723  01074E                     l21786:
 10724                           
 10725                           ;UART.c: 242: printf("%s","MEAURE_ERR");
 10726  01074E  0EF5               	movlw	low STR_2
 10727  010750  0100               	movlb	0	; () banked
 10728  010752  6FB1               	movwf	printf@f& (0+255),b
 10729  010754  0EFF               	movlw	high STR_2
 10730  010756  0100               	movlb	0	; () banked
 10731  010758  6FB2               	movwf	(printf@f+1)& (0+255),b
 10732  01075A  0E83               	movlw	low STR_81
 10733  01075C  0100               	movlb	0	; () banked
 10734  01075E  6FB3               	movwf	(?_printf+2)& (0+255),b
 10735  010760  0EFE               	movlw	high STR_81
 10736  010762  0100               	movlb	0	; () banked
 10737  010764  6FB4               	movwf	(?_printf+3)& (0+255),b
 10738  010766  ECA0  F086         	call	_printf	;wreg free
 10739                           
 10740                           ;UART.c: 243: usart_str_1(',');
 10741  01076A  0E2C               	movlw	44
 10742  01076C  EC6F  F0D8         	call	_usart_str_1
 10743                           
 10744                           ;UART.c: 244: break;
 10745  010770  D0AA               	goto	l21816
 10746  010772                     l21790:
 10747                           
 10748                           ;UART.c: 247: printf("%s","VFD_ERROR_IO");
 10749  010772  0EF5               	movlw	low STR_2
 10750  010774  0100               	movlb	0	; () banked
 10751  010776  6FB1               	movwf	printf@f& (0+255),b
 10752  010778  0EFF               	movlw	high STR_2
 10753  01077A  0100               	movlb	0	; () banked
 10754  01077C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10755  01077E  0ED0               	movlw	low STR_83
 10756  010780  0100               	movlb	0	; () banked
 10757  010782  6FB3               	movwf	(?_printf+2)& (0+255),b
 10758  010784  0EFD               	movlw	high STR_83
 10759  010786  0100               	movlb	0	; () banked
 10760  010788  6FB4               	movwf	(?_printf+3)& (0+255),b
 10761  01078A  ECA0  F086         	call	_printf	;wreg free
 10762                           
 10763                           ;UART.c: 248: usart_str_1(',');
 10764  01078E  0E2C               	movlw	44
 10765  010790  EC6F  F0D8         	call	_usart_str_1
 10766                           
 10767                           ;UART.c: 250: }
 10768                           
 10769                           ;UART.c: 249: break;
 10770  010794  D098               	goto	l21816
 10771  010796                     l21796:
 10772  010796  501B               	movf	_Errors,w,c
 10773                           
 10774                           ; Switch size 1, requested type "space"
 10775                           ; Number of cases is 26, Range of values is 0 to 25
 10776                           ; switch strategies available:
 10777                           ; Name         Instructions Cycles
 10778                           ; simple_byte           79    40 (average)
 10779                           ;	Chosen strategy is simple_byte
 10780  010798  0A00               	xorlw	0	; case 0
 10781  01079A  B4D8               	btfsc	status,2,c
 10782  01079C  D628               	goto	l21690
 10783  01079E  0A01               	xorlw	1	; case 1
 10784  0107A0  B4D8               	btfsc	status,2,c
 10785  0107A2  D637               	goto	l21694
 10786  0107A4  0A03               	xorlw	3	; case 2
 10787  0107A6  B4D8               	btfsc	status,2,c
 10788  0107A8  D658               	goto	l21702
 10789  0107AA  0A01               	xorlw	1	; case 3
 10790  0107AC  B4D8               	btfsc	status,2,c
 10791  0107AE  D6C1               	goto	l21726
 10792  0107B0  0A07               	xorlw	7	; case 4
 10793  0107B2  B4D8               	btfsc	status,2,c
 10794  0107B4  D6AC               	goto	l21722
 10795  0107B6  0A01               	xorlw	1	; case 5
 10796  0107B8  B4D8               	btfsc	status,2,c
 10797  0107BA  D7B7               	goto	l21782
 10798  0107BC  0A03               	xorlw	3	; case 6
 10799  0107BE  B4D8               	btfsc	status,2,c
 10800  0107C0  D65E               	goto	l21706
 10801  0107C2  0A01               	xorlw	1	; case 7
 10802  0107C4  B4D8               	btfsc	status,2,c
 10803  0107C6  D769               	goto	l21766
 10804  0107C8  0A0F               	xorlw	15	; case 8
 10805  0107CA  B4D8               	btfsc	status,2,c
 10806  0107CC  D6C4               	goto	l21730
 10807  0107CE  0A01               	xorlw	1	; case 9
 10808  0107D0  B4D8               	btfsc	status,2,c
 10809  0107D2  D71B               	goto	l21750
 10810  0107D4  0A03               	xorlw	3	; case 10
 10811  0107D6  B4D8               	btfsc	status,2,c
 10812  0107D8  D6F4               	goto	l21742
 10813  0107DA  0A01               	xorlw	1	; case 11
 10814  0107DC  B4D8               	btfsc	status,2,c
 10815  0107DE  D703               	goto	l21746
 10816  0107E0  0A07               	xorlw	7	; case 12
 10817  0107E2  B4D8               	btfsc	status,2,c
 10818  0107E4  D670               	goto	l21714
 10819  0107E6  0A01               	xorlw	1	; case 13
 10820  0107E8  B4D8               	btfsc	status,2,c
 10821  0107EA  D65B               	goto	l21710
 10822  0107EC  0A03               	xorlw	3	; case 14
 10823  0107EE  B4D8               	btfsc	status,2,c
 10824  0107F0  D71E               	goto	l21754
 10825  0107F2  0A01               	xorlw	1	; case 15
 10826  0107F4  B4D8               	btfsc	status,2,c
 10827  0107F6  D72D               	goto	l21758
 10828  0107F8  0A1F               	xorlw	31	; case 16
 10829  0107FA  B4D8               	btfsc	status,2,c
 10830  0107FC  D6D0               	goto	l21738
 10831  0107FE  0A01               	xorlw	1	; case 17
 10832  010800  B4D8               	btfsc	status,2,c
 10833  010802  D6BB               	goto	l21734
 10834  010804  0A03               	xorlw	3	; case 18
 10835  010806  B4D8               	btfsc	status,2,c
 10836  010808  D736               	goto	l21762
 10837  01080A  0A01               	xorlw	1	; case 19
 10838  01080C  B4D8               	btfsc	status,2,c
 10839  01080E  D77B               	goto	l21778
 10840  010810  0A07               	xorlw	7	; case 20
 10841  010812  B4D8               	btfsc	status,2,c
 10842  010814  D766               	goto	l21774
 10843  010816  0A01               	xorlw	1	; case 21
 10844  010818  B4D8               	btfsc	status,2,c
 10845  01081A  D751               	goto	l21770
 10846  01081C  0A03               	xorlw	3	; case 22
 10847  01081E  B4D8               	btfsc	status,2,c
 10848  010820  D796               	goto	l21786
 10849  010822  0A01               	xorlw	1	; case 23
 10850  010824  B4D8               	btfsc	status,2,c
 10851  010826  D661               	goto	l21718
 10852  010828  0A0F               	xorlw	15	; case 24
 10853  01082A  B4D8               	btfsc	status,2,c
 10854  01082C  D604               	goto	l21698
 10855  01082E  0A01               	xorlw	1	; case 25
 10856  010830  B4D8               	btfsc	status,2,c
 10857  010832  D79F               	goto	l21790
 10858                           
 10859                           ;UART.c: 252: switch(Turbine_state)
 10860  010834  D048               	goto	l21816
 10861  010836                     l21798:
 10862                           
 10863                           ;UART.c: 255: printf("%s","STARTUP");
 10864  010836  0EF5               	movlw	low STR_2
 10865  010838  0100               	movlb	0	; () banked
 10866  01083A  6FB1               	movwf	printf@f& (0+255),b
 10867  01083C  0EFF               	movlw	high STR_2
 10868  01083E  0100               	movlb	0	; () banked
 10869  010840  6FB2               	movwf	(printf@f+1)& (0+255),b
 10870  010842  0E7F               	movlw	low STR_85
 10871  010844  0100               	movlb	0	; () banked
 10872  010846  6FB3               	movwf	(?_printf+2)& (0+255),b
 10873  010848  0EFF               	movlw	high STR_85
 10874  01084A  0100               	movlb	0	; () banked
 10875  01084C  6FB4               	movwf	(?_printf+3)& (0+255),b
 10876  01084E  ECA0  F086         	call	_printf	;wreg free
 10877                           
 10878                           ;UART.c: 256: usart_str_1(',');
 10879  010852  0E2C               	movlw	44
 10880  010854  EC6F  F0D8         	call	_usart_str_1
 10881                           
 10882                           ;UART.c: 257: break;
 10883  010858  D044               	goto	l21818
 10884  01085A                     l21802:
 10885                           
 10886                           ;UART.c: 260: printf("%s","RAMPUP");
 10887  01085A  0EF5               	movlw	low STR_2
 10888  01085C  0100               	movlb	0	; () banked
 10889  01085E  6FB1               	movwf	printf@f& (0+255),b
 10890  010860  0EFF               	movlw	high STR_2
 10891  010862  0100               	movlb	0	; () banked
 10892  010864  6FB2               	movwf	(printf@f+1)& (0+255),b
 10893  010866  0E9C               	movlw	low STR_87
 10894  010868  0100               	movlb	0	; () banked
 10895  01086A  6FB3               	movwf	(?_printf+2)& (0+255),b
 10896  01086C  0EFF               	movlw	high STR_87
 10897  01086E  0100               	movlb	0	; () banked
 10898  010870  6FB4               	movwf	(?_printf+3)& (0+255),b
 10899  010872  ECA0  F086         	call	_printf	;wreg free
 10900                           
 10901                           ;UART.c: 261: usart_str_1(',');
 10902  010876  0E2C               	movlw	44
 10903  010878  EC6F  F0D8         	call	_usart_str_1
 10904                           
 10905                           ;UART.c: 262: break;
 10906  01087C  D032               	goto	l21818
 10907  01087E                     l21806:
 10908                           
 10909                           ;UART.c: 265: printf("%s","RUNNING");
 10910  01087E  0EF5               	movlw	low STR_2
 10911  010880  0100               	movlb	0	; () banked
 10912  010882  6FB1               	movwf	printf@f& (0+255),b
 10913  010884  0EFF               	movlw	high STR_2
 10914  010886  0100               	movlb	0	; () banked
 10915  010888  6FB2               	movwf	(printf@f+1)& (0+255),b
 10916  01088A  0E67               	movlw	low STR_89
 10917  01088C  0100               	movlb	0	; () banked
 10918  01088E  6FB3               	movwf	(?_printf+2)& (0+255),b
 10919  010890  0EFF               	movlw	high STR_89
 10920  010892  0100               	movlb	0	; () banked
 10921  010894  6FB4               	movwf	(?_printf+3)& (0+255),b
 10922  010896  ECA0  F086         	call	_printf	;wreg free
 10923                           
 10924                           ;UART.c: 266: usart_str_1(',');
 10925  01089A  0E2C               	movlw	44
 10926  01089C  EC6F  F0D8         	call	_usart_str_1
 10927                           
 10928                           ;UART.c: 267: break;
 10929  0108A0  D020               	goto	l21818
 10930  0108A2                     l21810:
 10931                           
 10932                           ;UART.c: 270: printf("%s","STOPPING");
 10933  0108A2  0EF5               	movlw	low STR_2
 10934  0108A4  0100               	movlb	0	; () banked
 10935  0108A6  6FB1               	movwf	printf@f& (0+255),b
 10936  0108A8  0EFF               	movlw	high STR_2
 10937  0108AA  0100               	movlb	0	; () banked
 10938  0108AC  6FB2               	movwf	(printf@f+1)& (0+255),b
 10939  0108AE  0E3A               	movlw	low STR_91
 10940  0108B0  0100               	movlb	0	; () banked
 10941  0108B2  6FB3               	movwf	(?_printf+2)& (0+255),b
 10942  0108B4  0EFF               	movlw	high STR_91
 10943  0108B6  0100               	movlb	0	; () banked
 10944  0108B8  6FB4               	movwf	(?_printf+3)& (0+255),b
 10945  0108BA  ECA0  F086         	call	_printf	;wreg free
 10946                           
 10947                           ;UART.c: 271: usart_str_1(',');
 10948  0108BE  0E2C               	movlw	44
 10949  0108C0  EC6F  F0D8         	call	_usart_str_1
 10950                           
 10951                           ;UART.c: 273: }
 10952                           
 10953                           ;UART.c: 272: break;
 10954  0108C4  D00E               	goto	l21818
 10955  0108C6                     l21816:
 10956  0108C6  0100               	movlb	0	; () banked
 10957  0108C8  51F0               	movf	_Turbine_state& (0+255),w,b
 10958                           
 10959                           ; Switch size 1, requested type "space"
 10960                           ; Number of cases is 4, Range of values is 0 to 3
 10961                           ; switch strategies available:
 10962                           ; Name         Instructions Cycles
 10963                           ; simple_byte           13     7 (average)
 10964                           ;	Chosen strategy is simple_byte
 10965  0108CA  0A00               	xorlw	0	; case 0
 10966  0108CC  B4D8               	btfsc	status,2,c
 10967  0108CE  D7B3               	goto	l21798
 10968  0108D0  0A01               	xorlw	1	; case 1
 10969  0108D2  B4D8               	btfsc	status,2,c
 10970  0108D4  D7C2               	goto	l21802
 10971  0108D6  0A03               	xorlw	3	; case 2
 10972  0108D8  B4D8               	btfsc	status,2,c
 10973  0108DA  D7D1               	goto	l21806
 10974  0108DC  0A01               	xorlw	1	; case 3
 10975  0108DE  B4D8               	btfsc	status,2,c
 10976  0108E0  D7E0               	goto	l21810
 10977  0108E2                     l21818:
 10978                           
 10979                           ;UART.c: 276: RTC_GetDateTime(&rtc);
 10980  0108E2  0EF2               	movlw	low _rtc
 10981  0108E4  0100               	movlb	0	; () banked
 10982  0108E6  6F62               	movwf	RTC_GetDateTime@rtc& (0+255),b
 10983  0108E8  0E05               	movlw	high _rtc
 10984  0108EA  0100               	movlb	0	; () banked
 10985  0108EC  6F63               	movwf	(RTC_GetDateTime@rtc+1)& (0+255),b
 10986  0108EE  EC8C  F0CD         	call	_RTC_GetDateTime	;wreg free
 10987                           
 10988                           ;UART.c: 277: GiHours = BCDtoI(rtc.hour);
 10989  0108F2  C5F4  F074         	movff	_rtc+2,BCDtoI@BCD
 10990  0108F6  0100               	movlb	0	; () banked
 10991  0108F8  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10992  0108FA  EC14  F0CA         	call	_BCDtoI	;wreg free
 10993  0108FE  C074  F28C         	movff	?_BCDtoI,_GiHours
 10994  010902  C075  F28D         	movff	?_BCDtoI+1,_GiHours+1
 10995                           
 10996                           ;UART.c: 278: GiMinutes = BCDtoI(rtc.min);
 10997  010906  C5F3  F074         	movff	_rtc+1,BCDtoI@BCD
 10998  01090A  0100               	movlb	0	; () banked
 10999  01090C  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 11000  01090E  EC14  F0CA         	call	_BCDtoI	;wreg free
 11001  010912  C074  F28E         	movff	?_BCDtoI,_GiMinutes
 11002  010916  C075  F28F         	movff	?_BCDtoI+1,_GiMinutes+1
 11003                           
 11004                           ;UART.c: 279: GiSeconds = BCDtoI(rtc.sec);
 11005  01091A  C5F2  F074         	movff	_rtc,BCDtoI@BCD
 11006  01091E  0100               	movlb	0	; () banked
 11007  010920  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 11008  010922  EC14  F0CA         	call	_BCDtoI	;wreg free
 11009  010926  C074  F290         	movff	?_BCDtoI,_GiSeconds
 11010  01092A  C075  F291         	movff	?_BCDtoI+1,_GiSeconds+1
 11011                           
 11012                           ;UART.c: 280: GiData = BCDtoI(rtc.date);
 11013  01092E  C5F6  F074         	movff	_rtc+4,BCDtoI@BCD
 11014  010932  0100               	movlb	0	; () banked
 11015  010934  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 11016  010936  EC14  F0CA         	call	_BCDtoI	;wreg free
 11017  01093A  C074  F28A         	movff	?_BCDtoI,_GiData
 11018  01093E  C075  F28B         	movff	?_BCDtoI+1,_GiData+1
 11019                           
 11020                           ;UART.c: 281: GiMonth = BCDtoI(rtc.month);
 11021  010942  C5F7  F074         	movff	_rtc+5,BCDtoI@BCD
 11022  010946  0100               	movlb	0	; () banked
 11023  010948  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 11024  01094A  EC14  F0CA         	call	_BCDtoI	;wreg free
 11025  01094E  C074  F3E3         	movff	?_BCDtoI,_GiMonth
 11026  010952  C075  F3E4         	movff	?_BCDtoI+1,_GiMonth+1
 11027                           
 11028                           ;UART.c: 282: GiYear = BCDtoI(rtc.year);
 11029  010956  C5F8  F074         	movff	_rtc+6,BCDtoI@BCD
 11030  01095A  0100               	movlb	0	; () banked
 11031  01095C  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 11032  01095E  EC14  F0CA         	call	_BCDtoI	;wreg free
 11033  010962  C074  F3E5         	movff	?_BCDtoI,_GiYear
 11034  010966  C075  F3E6         	movff	?_BCDtoI+1,_GiYear+1
 11035                           
 11036                           ;UART.c: 283: GiDay = BCDtoI(rtc.weekDay);
 11037  01096A  C5F5  F074         	movff	_rtc+3,BCDtoI@BCD
 11038  01096E  0100               	movlb	0	; () banked
 11039  010970  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 11040  010972  EC14  F0CA         	call	_BCDtoI	;wreg free
 11041  010976  C074  F5CA         	movff	?_BCDtoI,_GiDay
 11042  01097A  C075  F5CB         	movff	?_BCDtoI+1,_GiDay+1
 11043                           
 11044                           ;UART.c: 285: printf("%d",GiData);
 11045  01097E  0EF2               	movlw	low STR_9
 11046  010980  0100               	movlb	0	; () banked
 11047  010982  6FB1               	movwf	printf@f& (0+255),b
 11048  010984  0EFF               	movlw	high STR_9
 11049  010986  0100               	movlb	0	; () banked
 11050  010988  6FB2               	movwf	(printf@f+1)& (0+255),b
 11051  01098A  C28A  F0B3         	movff	_GiData,?_printf+2
 11052  01098E  C28B  F0B4         	movff	_GiData+1,?_printf+3
 11053  010992  ECA0  F086         	call	_printf	;wreg free
 11054                           
 11055                           ;UART.c: 286: usart_str_1('-');
 11056  010996  0E2D               	movlw	45
 11057  010998  EC6F  F0D8         	call	_usart_str_1
 11058                           
 11059                           ;UART.c: 287: printf("%d",GiMonth);
 11060  01099C  0EF2               	movlw	low STR_9
 11061  01099E  0100               	movlb	0	; () banked
 11062  0109A0  6FB1               	movwf	printf@f& (0+255),b
 11063  0109A2  0EFF               	movlw	high STR_9
 11064  0109A4  0100               	movlb	0	; () banked
 11065  0109A6  6FB2               	movwf	(printf@f+1)& (0+255),b
 11066  0109A8  C3E3  F0B3         	movff	_GiMonth,?_printf+2
 11067  0109AC  C3E4  F0B4         	movff	_GiMonth+1,?_printf+3
 11068  0109B0  ECA0  F086         	call	_printf	;wreg free
 11069                           
 11070                           ;UART.c: 288: usart_str_1('-');
 11071  0109B4  0E2D               	movlw	45
 11072  0109B6  EC6F  F0D8         	call	_usart_str_1
 11073                           
 11074                           ;UART.c: 289: printf("%d",GiYear);
 11075  0109BA  0EF2               	movlw	low STR_9
 11076  0109BC  0100               	movlb	0	; () banked
 11077  0109BE  6FB1               	movwf	printf@f& (0+255),b
 11078  0109C0  0EFF               	movlw	high STR_9
 11079  0109C2  0100               	movlb	0	; () banked
 11080  0109C4  6FB2               	movwf	(printf@f+1)& (0+255),b
 11081  0109C6  C3E5  F0B3         	movff	_GiYear,?_printf+2
 11082  0109CA  C3E6  F0B4         	movff	_GiYear+1,?_printf+3
 11083  0109CE  ECA0  F086         	call	_printf	;wreg free
 11084                           
 11085                           ;UART.c: 290: usart_str_1(',');
 11086  0109D2  0E2C               	movlw	44
 11087  0109D4  EC6F  F0D8         	call	_usart_str_1
 11088                           
 11089                           ;UART.c: 292: printf("%d",GiHours);
 11090  0109D8  0EF2               	movlw	low STR_9
 11091  0109DA  0100               	movlb	0	; () banked
 11092  0109DC  6FB1               	movwf	printf@f& (0+255),b
 11093  0109DE  0EFF               	movlw	high STR_9
 11094  0109E0  0100               	movlb	0	; () banked
 11095  0109E2  6FB2               	movwf	(printf@f+1)& (0+255),b
 11096  0109E4  C28C  F0B3         	movff	_GiHours,?_printf+2
 11097  0109E8  C28D  F0B4         	movff	_GiHours+1,?_printf+3
 11098  0109EC  ECA0  F086         	call	_printf	;wreg free
 11099                           
 11100                           ;UART.c: 293: usart_str_1(':');
 11101  0109F0  0E3A               	movlw	58
 11102  0109F2  EC6F  F0D8         	call	_usart_str_1
 11103                           
 11104                           ;UART.c: 294: printf("%d",GiMinutes);
 11105  0109F6  0EF2               	movlw	low STR_9
 11106  0109F8  0100               	movlb	0	; () banked
 11107  0109FA  6FB1               	movwf	printf@f& (0+255),b
 11108  0109FC  0EFF               	movlw	high STR_9
 11109  0109FE  0100               	movlb	0	; () banked
 11110  010A00  6FB2               	movwf	(printf@f+1)& (0+255),b
 11111  010A02  C28E  F0B3         	movff	_GiMinutes,?_printf+2
 11112  010A06  C28F  F0B4         	movff	_GiMinutes+1,?_printf+3
 11113  010A0A  ECA0  F086         	call	_printf	;wreg free
 11114                           
 11115                           ;UART.c: 295: usart_str_1(':');
 11116  010A0E  0E3A               	movlw	58
 11117  010A10  EC6F  F0D8         	call	_usart_str_1
 11118                           
 11119                           ;UART.c: 296: printf("%d",GiSeconds);
 11120  010A14  0EF2               	movlw	low STR_9
 11121  010A16  0100               	movlb	0	; () banked
 11122  010A18  6FB1               	movwf	printf@f& (0+255),b
 11123  010A1A  0EFF               	movlw	high STR_9
 11124  010A1C  0100               	movlb	0	; () banked
 11125  010A1E  6FB2               	movwf	(printf@f+1)& (0+255),b
 11126  010A20  C290  F0B3         	movff	_GiSeconds,?_printf+2
 11127  010A24  C291  F0B4         	movff	_GiSeconds+1,?_printf+3
 11128  010A28  ECA0  F086         	call	_printf	;wreg free
 11129                           
 11130                           ;UART.c: 297: usart_str_1(',');
 11131  010A2C  0E2C               	movlw	44
 11132  010A2E  EC6F  F0D8         	call	_usart_str_1
 11133                           
 11134                           ;UART.c: 299: printf("%4.01f",Temprature);
 11135  010A32  0EBF               	movlw	low STR_14
 11136  010A34  0100               	movlb	0	; () banked
 11137  010A36  6FB1               	movwf	printf@f& (0+255),b
 11138  010A38  0EFF               	movlw	high STR_14
 11139  010A3A  0100               	movlb	0	; () banked
 11140  010A3C  6FB2               	movwf	(printf@f+1)& (0+255),b
 11141  010A3E  C224  F0B3         	movff	_Temprature,?_printf+2
 11142  010A42  C225  F0B4         	movff	_Temprature+1,?_printf+3
 11143  010A46  C226  F0B5         	movff	_Temprature+2,?_printf+4
 11144  010A4A  ECA0  F086         	call	_printf	;wreg free
 11145                           
 11146                           ;UART.c: 300: usart_str_1(',');
 11147  010A4E  0E2C               	movlw	44
 11148  010A50  EC6F  F0D8         	call	_usart_str_1
 11149                           
 11150                           ;UART.c: 303: printf("%d",Errors1);
 11151  010A54  0EF2               	movlw	low STR_9
 11152  010A56  0100               	movlb	0	; () banked
 11153  010A58  6FB1               	movwf	printf@f& (0+255),b
 11154  010A5A  0EFF               	movlw	high STR_9
 11155  010A5C  0100               	movlb	0	; () banked
 11156  010A5E  6FB2               	movwf	(printf@f+1)& (0+255),b
 11157  010A60  C0E1  F0B3         	movff	_Errors1,?_printf+2
 11158  010A64  0100               	movlb	0	; () banked
 11159  010A66  6BB4               	clrf	(?_printf+3)& (0+255),b
 11160  010A68  ECA0  F086         	call	_printf	;wreg free
 11161                           
 11162                           ;UART.c: 304: usart_str_1('.');
 11163  010A6C  0E2E               	movlw	46
 11164  010A6E  EC6F  F0D8         	call	_usart_str_1
 11165                           
 11166                           ;UART.c: 305: printf("%d",Errors2);
 11167  010A72  0EF2               	movlw	low STR_9
 11168  010A74  0100               	movlb	0	; () banked
 11169  010A76  6FB1               	movwf	printf@f& (0+255),b
 11170  010A78  0EFF               	movlw	high STR_9
 11171  010A7A  0100               	movlb	0	; () banked
 11172  010A7C  6FB2               	movwf	(printf@f+1)& (0+255),b
 11173  010A7E  C152  F0B3         	movff	_Errors2,?_printf+2
 11174  010A82  0100               	movlb	0	; () banked
 11175  010A84  6BB4               	clrf	(?_printf+3)& (0+255),b
 11176  010A86  ECA0  F086         	call	_printf	;wreg free
 11177                           
 11178                           ;UART.c: 306: usart_str_1('.');
 11179  010A8A  0E2E               	movlw	46
 11180  010A8C  EC6F  F0D8         	call	_usart_str_1
 11181                           
 11182                           ;UART.c: 307: printf("%d",Errors3);
 11183  010A90  0EF2               	movlw	low STR_9
 11184  010A92  0100               	movlb	0	; () banked
 11185  010A94  6FB1               	movwf	printf@f& (0+255),b
 11186  010A96  0EFF               	movlw	high STR_9
 11187  010A98  0100               	movlb	0	; () banked
 11188  010A9A  6FB2               	movwf	(printf@f+1)& (0+255),b
 11189  010A9C  C153  F0B3         	movff	_Errors3,?_printf+2
 11190  010AA0  0100               	movlb	0	; () banked
 11191  010AA2  6BB4               	clrf	(?_printf+3)& (0+255),b
 11192  010AA4  ECA0  F086         	call	_printf	;wreg free
 11193                           
 11194                           ;UART.c: 308: usart_str_1('.');
 11195  010AA8  0E2E               	movlw	46
 11196  010AAA  EC6F  F0D8         	call	_usart_str_1
 11197                           
 11198                           ;UART.c: 309: printf("%d",Errors4);
 11199  010AAE  0EF2               	movlw	low STR_9
 11200  010AB0  0100               	movlb	0	; () banked
 11201  010AB2  6FB1               	movwf	printf@f& (0+255),b
 11202  010AB4  0EFF               	movlw	high STR_9
 11203  010AB6  0100               	movlb	0	; () banked
 11204  010AB8  6FB2               	movwf	(printf@f+1)& (0+255),b
 11205  010ABA  C154  F0B3         	movff	_Errors4,?_printf+2
 11206  010ABE  0100               	movlb	0	; () banked
 11207  010AC0  6BB4               	clrf	(?_printf+3)& (0+255),b
 11208  010AC2  ECA0  F086         	call	_printf	;wreg free
 11209                           
 11210                           ;UART.c: 310: usart_str_1('.');
 11211  010AC6  0E2E               	movlw	46
 11212  010AC8  EC6F  F0D8         	call	_usart_str_1
 11213                           
 11214                           ;UART.c: 311: printf("%d",Errors5);
 11215  010ACC  0EF2               	movlw	low STR_9
 11216  010ACE  0100               	movlb	0	; () banked
 11217  010AD0  6FB1               	movwf	printf@f& (0+255),b
 11218  010AD2  0EFF               	movlw	high STR_9
 11219  010AD4  0100               	movlb	0	; () banked
 11220  010AD6  6FB2               	movwf	(printf@f+1)& (0+255),b
 11221  010AD8  C155  F0B3         	movff	_Errors5,?_printf+2
 11222  010ADC  0100               	movlb	0	; () banked
 11223  010ADE  6BB4               	clrf	(?_printf+3)& (0+255),b
 11224  010AE0  ECA0  F086         	call	_printf	;wreg free
 11225                           
 11226                           ;UART.c: 312: usart_str_1(',');
 11227  010AE4  0E2C               	movlw	44
 11228  010AE6  EC6F  F0D8         	call	_usart_str_1
 11229                           
 11230                           ;UART.c: 316: printf("%d",PORTD);
 11231  010AEA  0EF2               	movlw	low STR_9
 11232  010AEC  0100               	movlb	0	; () banked
 11233  010AEE  6FB1               	movwf	printf@f& (0+255),b
 11234  010AF0  0EFF               	movlw	high STR_9
 11235  010AF2  0100               	movlb	0	; () banked
 11236  010AF4  6FB2               	movwf	(printf@f+1)& (0+255),b
 11237  010AF6  CF83 F0B3          	movff	3971,?_printf+2	;volatile
 11238  010AFA  0100               	movlb	0	; () banked
 11239  010AFC  6BB4               	clrf	(?_printf+3)& (0+255),b
 11240  010AFE  ECA0  F086         	call	_printf	;wreg free
 11241                           
 11242                           ;UART.c: 317: usart_str_1(',');
 11243  010B02  0E2C               	movlw	44
 11244  010B04  EC6F  F0D8         	call	_usart_str_1
 11245                           
 11246                           ;UART.c: 319: printf("%d",VFD_RAMP);
 11247  010B08  0EF2               	movlw	low STR_9
 11248  010B0A  0100               	movlb	0	; () banked
 11249  010B0C  6FB1               	movwf	printf@f& (0+255),b
 11250  010B0E  0EFF               	movlw	high STR_9
 11251  010B10  0100               	movlb	0	; () banked
 11252  010B12  6FB2               	movwf	(printf@f+1)& (0+255),b
 11253  010B14  C195  F0B3         	movff	_VFD_RAMP,?_printf+2
 11254  010B18  0100               	movlb	0	; () banked
 11255  010B1A  6BB4               	clrf	(?_printf+3)& (0+255),b
 11256  010B1C  ECA0  F086         	call	_printf	;wreg free
 11257                           
 11258                           ;UART.c: 320: usart_str_1(',');
 11259  010B20  0E2C               	movlw	44
 11260  010B22  EC6F  F0D8         	call	_usart_str_1
 11261                           
 11262                           ;UART.c: 322: printf("%d",VFD_Run_Time_Counter);
 11263  010B26  0EF2               	movlw	low STR_9
 11264  010B28  0100               	movlb	0	; () banked
 11265  010B2A  6FB1               	movwf	printf@f& (0+255),b
 11266  010B2C  0EFF               	movlw	high STR_9
 11267  010B2E  0100               	movlb	0	; () banked
 11268  010B30  6FB2               	movwf	(printf@f+1)& (0+255),b
 11269  010B32  C140  F0B3         	movff	_VFD_Run_Time_Counter,?_printf+2
 11270  010B36  C141  F0B4         	movff	_VFD_Run_Time_Counter+1,?_printf+3
 11271  010B3A  ECA0  F086         	call	_printf	;wreg free
 11272                           
 11273                           ;UART.c: 323: usart_str_1(',');
 11274  010B3E  0E2C               	movlw	44
 11275  010B40  EC6F  F0D8         	call	_usart_str_1
 11276                           
 11277                           ;UART.c: 325: printf("%d",Slip_Error_Counter);
 11278  010B44  0EF2               	movlw	low STR_9
 11279  010B46  0100               	movlb	0	; () banked
 11280  010B48  6FB1               	movwf	printf@f& (0+255),b
 11281  010B4A  0EFF               	movlw	high STR_9
 11282  010B4C  0100               	movlb	0	; () banked
 11283  010B4E  6FB2               	movwf	(printf@f+1)& (0+255),b
 11284  010B50  C17B  F0B3         	movff	_Slip_Error_Counter,?_printf+2
 11285  010B54  0100               	movlb	0	; () banked
 11286  010B56  6BB4               	clrf	(?_printf+3)& (0+255),b
 11287  010B58  ECA0  F086         	call	_printf	;wreg free
 11288                           
 11289                           ;UART.c: 326: usart_str_1(',');
 11290  010B5C  0E2C               	movlw	44
 11291  010B5E  EC6F  F0D8         	call	_usart_str_1
 11292                           
 11293                           ;UART.c: 328: printf("%d",Slip_Error_Counter_1);
 11294  010B62  0EF2               	movlw	low STR_9
 11295  010B64  0100               	movlb	0	; () banked
 11296  010B66  6FB1               	movwf	printf@f& (0+255),b
 11297  010B68  0EFF               	movlw	high STR_9
 11298  010B6A  0100               	movlb	0	; () banked
 11299  010B6C  6FB2               	movwf	(printf@f+1)& (0+255),b
 11300  010B6E  C17C  F0B3         	movff	_Slip_Error_Counter_1,?_printf+2
 11301  010B72  0100               	movlb	0	; () banked
 11302  010B74  6BB4               	clrf	(?_printf+3)& (0+255),b
 11303  010B76  ECA0  F086         	call	_printf	;wreg free
 11304                           
 11305                           ;UART.c: 329: usart_str_1(',');
 11306  010B7A  0E2C               	movlw	44
 11307  010B7C  EC6F  F0D8         	call	_usart_str_1
 11308                           
 11309                           ;UART.c: 331: printf("%d",Data_1[1]);
 11310  010B80  0EF2               	movlw	low STR_9
 11311  010B82  0100               	movlb	0	; () banked
 11312  010B84  6FB1               	movwf	printf@f& (0+255),b
 11313  010B86  0EFF               	movlw	high STR_9
 11314  010B88  0100               	movlb	0	; () banked
 11315  010B8A  6FB2               	movwf	(printf@f+1)& (0+255),b
 11316  010B8C  C502  F0B3         	movff	_Data_1+2,?_printf+2
 11317  010B90  C503  F0B4         	movff	_Data_1+3,?_printf+3
 11318  010B94  ECA0  F086         	call	_printf	;wreg free
 11319                           
 11320                           ;UART.c: 332: usart_str_1(',');
 11321  010B98  0E2C               	movlw	44
 11322  010B9A  EC6F  F0D8         	call	_usart_str_1
 11323                           
 11324                           ;UART.c: 334: printf("%d",Data_1[7]);
 11325  010B9E  0EF2               	movlw	low STR_9
 11326  010BA0  0100               	movlb	0	; () banked
 11327  010BA2  6FB1               	movwf	printf@f& (0+255),b
 11328  010BA4  0EFF               	movlw	high STR_9
 11329  010BA6  0100               	movlb	0	; () banked
 11330  010BA8  6FB2               	movwf	(printf@f+1)& (0+255),b
 11331  010BAA  C50E  F0B3         	movff	_Data_1+14,?_printf+2
 11332  010BAE  C50F  F0B4         	movff	_Data_1+15,?_printf+3
 11333  010BB2  ECA0  F086         	call	_printf	;wreg free
 11334                           
 11335                           ;UART.c: 335: usart_str_1(',');
 11336  010BB6  0E2C               	movlw	44
 11337  010BB8  EC6F  F0D8         	call	_usart_str_1
 11338                           
 11339                           ;UART.c: 337: printf("%d",Communication_OTP);
 11340  010BBC  0EF2               	movlw	low STR_9
 11341  010BBE  0100               	movlb	0	; () banked
 11342  010BC0  6FB1               	movwf	printf@f& (0+255),b
 11343  010BC2  0EFF               	movlw	high STR_9
 11344  010BC4  0100               	movlb	0	; () banked
 11345  010BC6  6FB2               	movwf	(printf@f+1)& (0+255),b
 11346  010BC8  C015  F0B3         	movff	_Communication_OTP,?_printf+2
 11347  010BCC  0100               	movlb	0	; () banked
 11348  010BCE  6BB4               	clrf	(?_printf+3)& (0+255),b
 11349  010BD0  ECA0  F086         	call	_printf	;wreg free
 11350                           
 11351                           ;UART.c: 338: usart_str_1(',');
 11352  010BD4  0E2C               	movlw	44
 11353  010BD6  EC6F  F0D8         	call	_usart_str_1
 11354                           
 11355                           ;UART.c: 340: printf("%d",Data_1[9]);
 11356  010BDA  0EF2               	movlw	low STR_9
 11357  010BDC  0100               	movlb	0	; () banked
 11358  010BDE  6FB1               	movwf	printf@f& (0+255),b
 11359  010BE0  0EFF               	movlw	high STR_9
 11360  010BE2  0100               	movlb	0	; () banked
 11361  010BE4  6FB2               	movwf	(printf@f+1)& (0+255),b
 11362  010BE6  C512  F0B3         	movff	_Data_1+18,?_printf+2
 11363  010BEA  C513  F0B4         	movff	_Data_1+19,?_printf+3
 11364  010BEE  ECA0  F086         	call	_printf	;wreg free
 11365                           
 11366                           ;UART.c: 341: usart_str_1(',');
 11367  010BF2  0E2C               	movlw	44
 11368  010BF4  EC6F  F0D8         	call	_usart_str_1
 11369                           
 11370                           ;UART.c: 343: printf("%d",Gen_EP_Err_Flag);
 11371  010BF8  0EF2               	movlw	low STR_9
 11372  010BFA  0100               	movlb	0	; () banked
 11373  010BFC  6FB1               	movwf	printf@f& (0+255),b
 11374  010BFE  0EFF               	movlw	high STR_9
 11375  010C00  0100               	movlb	0	; () banked
 11376  010C02  6FB2               	movwf	(printf@f+1)& (0+255),b
 11377  010C04  C0E3  F0B3         	movff	_Gen_EP_Err_Flag,?_printf+2
 11378  010C08  0100               	movlb	0	; () banked
 11379  010C0A  6BB4               	clrf	(?_printf+3)& (0+255),b
 11380  010C0C  ECA0  F086         	call	_printf	;wreg free
 11381                           
 11382                           ;UART.c: 344: usart_str_1(',');
 11383  010C10  0E2C               	movlw	44
 11384  010C12  EC6F  F0D8         	call	_usart_str_1
 11385                           
 11386                           ;UART.c: 346: printf("%d",Pitch_EP_Err_Flag);
 11387  010C16  0EF2               	movlw	low STR_9
 11388  010C18  0100               	movlb	0	; () banked
 11389  010C1A  6FB1               	movwf	printf@f& (0+255),b
 11390  010C1C  0EFF               	movlw	high STR_9
 11391  010C1E  0100               	movlb	0	; () banked
 11392  010C20  6FB2               	movwf	(printf@f+1)& (0+255),b
 11393  010C22  C0E9  F0B3         	movff	_Pitch_EP_Err_Flag,?_printf+2
 11394  010C26  0100               	movlb	0	; () banked
 11395  010C28  6BB4               	clrf	(?_printf+3)& (0+255),b
 11396  010C2A  ECA0  F086         	call	_printf	;wreg free
 11397                           
 11398                           ;UART.c: 347: usart_str_1(',');
 11399  010C2E  0E2C               	movlw	44
 11400  010C30  EC6F  F0D8         	call	_usart_str_1
 11401                           
 11402                           ;UART.c: 349: printf("%d",Total_Min);
 11403  010C34  0EF2               	movlw	low STR_9
 11404  010C36  0100               	movlb	0	; () banked
 11405  010C38  6FB1               	movwf	printf@f& (0+255),b
 11406  010C3A  0EFF               	movlw	high STR_9
 11407  010C3C  0100               	movlb	0	; () banked
 11408  010C3E  6FB2               	movwf	(printf@f+1)& (0+255),b
 11409  010C40  C187  F0B3         	movff	_Total_Min,?_printf+2
 11410  010C44  0100               	movlb	0	; () banked
 11411  010C46  6BB4               	clrf	(?_printf+3)& (0+255),b
 11412  010C48  ECA0  F086         	call	_printf	;wreg free
 11413                           
 11414                           ;UART.c: 350: usart_str_1(',');
 11415  010C4C  0E2C               	movlw	44
 11416  010C4E  EC6F  F0D8         	call	_usart_str_1
 11417                           
 11418                           ;UART.c: 352: printf("%d",EEPROM_Error_Flag);
 11419  010C52  0EF2               	movlw	low STR_9
 11420  010C54  0100               	movlb	0	; () banked
 11421  010C56  6FB1               	movwf	printf@f& (0+255),b
 11422  010C58  0EFF               	movlw	high STR_9
 11423  010C5A  0100               	movlb	0	; () banked
 11424  010C5C  6FB2               	movwf	(printf@f+1)& (0+255),b
 11425  010C5E  C017  F0B3         	movff	_EEPROM_Error_Flag,?_printf+2
 11426  010C62  0100               	movlb	0	; () banked
 11427  010C64  6BB4               	clrf	(?_printf+3)& (0+255),b
 11428  010C66  ECA0  F086         	call	_printf	;wreg free
 11429                           
 11430                           ;UART.c: 353: usart_str_1(',');
 11431  010C6A  0E2C               	movlw	44
 11432  010C6C  EC6F  F0D8         	call	_usart_str_1
 11433                           
 11434                           ;UART.c: 356: printf("%d",EP_Errors1);
 11435  010C70  0EF2               	movlw	low STR_9
 11436  010C72  0100               	movlb	0	; () banked
 11437  010C74  6FB1               	movwf	printf@f& (0+255),b
 11438  010C76  0EFF               	movlw	high STR_9
 11439  010C78  0100               	movlb	0	; () banked
 11440  010C7A  6FB2               	movwf	(printf@f+1)& (0+255),b
 11441  010C7C  C018  F0B3         	movff	_EP_Errors1,?_printf+2
 11442  010C80  0100               	movlb	0	; () banked
 11443  010C82  6BB4               	clrf	(?_printf+3)& (0+255),b
 11444  010C84  ECA0  F086         	call	_printf	;wreg free
 11445                           
 11446                           ;UART.c: 357: usart_str_1('.');
 11447  010C88  0E2E               	movlw	46
 11448  010C8A  EC6F  F0D8         	call	_usart_str_1
 11449                           
 11450                           ;UART.c: 358: printf("%d",EP_Errors2);
 11451  010C8E  0EF2               	movlw	low STR_9
 11452  010C90  0100               	movlb	0	; () banked
 11453  010C92  6FB1               	movwf	printf@f& (0+255),b
 11454  010C94  0EFF               	movlw	high STR_9
 11455  010C96  0100               	movlb	0	; () banked
 11456  010C98  6FB2               	movwf	(printf@f+1)& (0+255),b
 11457  010C9A  C019  F0B3         	movff	_EP_Errors2,?_printf+2
 11458  010C9E  0100               	movlb	0	; () banked
 11459  010CA0  6BB4               	clrf	(?_printf+3)& (0+255),b
 11460  010CA2  ECA0  F086         	call	_printf	;wreg free
 11461                           
 11462                           ;UART.c: 359: usart_str_1('.');
 11463  010CA6  0E2E               	movlw	46
 11464  010CA8  EC6F  F0D8         	call	_usart_str_1
 11465                           
 11466                           ;UART.c: 360: printf("%d",EP_Errors3);
 11467  010CAC  0EF2               	movlw	low STR_9
 11468  010CAE  0100               	movlb	0	; () banked
 11469  010CB0  6FB1               	movwf	printf@f& (0+255),b
 11470  010CB2  0EFF               	movlw	high STR_9
 11471  010CB4  0100               	movlb	0	; () banked
 11472  010CB6  6FB2               	movwf	(printf@f+1)& (0+255),b
 11473  010CB8  C01A  F0B3         	movff	_EP_Errors3,?_printf+2
 11474  010CBC  0100               	movlb	0	; () banked
 11475  010CBE  6BB4               	clrf	(?_printf+3)& (0+255),b
 11476  010CC0  ECA0  F086         	call	_printf	;wreg free
 11477                           
 11478                           ;UART.c: 361: usart_str_1(',');
 11479  010CC4  0E2C               	movlw	44
 11480  010CC6  EC6F  F0D8         	call	_usart_str_1
 11481                           
 11482                           ;UART.c: 363: printf("%d",VFD_Error_Flag);
 11483  010CCA  0EF2               	movlw	low STR_9
 11484  010CCC  0100               	movlb	0	; () banked
 11485  010CCE  6FB1               	movwf	printf@f& (0+255),b
 11486  010CD0  0EFF               	movlw	high STR_9
 11487  010CD2  0100               	movlb	0	; () banked
 11488  010CD4  6FB2               	movwf	(printf@f+1)& (0+255),b
 11489  010CD6  C192  F0B3         	movff	_VFD_Error_Flag,?_printf+2
 11490  010CDA  0100               	movlb	0	; () banked
 11491  010CDC  6BB4               	clrf	(?_printf+3)& (0+255),b
 11492  010CDE  ECA0  F086         	call	_printf	;wreg free
 11493                           
 11494                           ;UART.c: 364: usart_str_1(',');
 11495  010CE2  0E2C               	movlw	44
 11496  010CE4  EC6F  F0D8         	call	_usart_str_1
 11497                           
 11498                           ;UART.c: 366: printf("%d",wind_1_Temp_flag);
 11499  010CE8  0EF2               	movlw	low STR_9
 11500  010CEA  0100               	movlb	0	; () banked
 11501  010CEC  6FB1               	movwf	printf@f& (0+255),b
 11502  010CEE  0EFF               	movlw	high STR_9
 11503  010CF0  0100               	movlb	0	; () banked
 11504  010CF2  6FB2               	movwf	(printf@f+1)& (0+255),b
 11505  010CF4  C19C  F0B3         	movff	_wind_1_Temp_flag,?_printf+2
 11506  010CF8  0100               	movlb	0	; () banked
 11507  010CFA  6BB4               	clrf	(?_printf+3)& (0+255),b
 11508  010CFC  ECA0  F086         	call	_printf	;wreg free
 11509                           
 11510                           ;UART.c: 367: usart_str_1(',');
 11511  010D00  0E2C               	movlw	44
 11512  010D02  EC6F  F0D8         	call	_usart_str_1
 11513                           
 11514                           ;UART.c: 369: printf("%d",wind_2_Temp_flag);
 11515  010D06  0EF2               	movlw	low STR_9
 11516  010D08  0100               	movlb	0	; () banked
 11517  010D0A  6FB1               	movwf	printf@f& (0+255),b
 11518  010D0C  0EFF               	movlw	high STR_9
 11519  010D0E  0100               	movlb	0	; () banked
 11520  010D10  6FB2               	movwf	(printf@f+1)& (0+255),b
 11521  010D12  C19D  F0B3         	movff	_wind_2_Temp_flag,?_printf+2
 11522  010D16  0100               	movlb	0	; () banked
 11523  010D18  6BB4               	clrf	(?_printf+3)& (0+255),b
 11524  010D1A  ECA0  F086         	call	_printf	;wreg free
 11525                           
 11526                           ;UART.c: 371: usart_str("\r");
 11527  010D1E  0EFD               	movlw	low STR_123
 11528  010D20  0100               	movlb	0	; () banked
 11529  010D22  6F60               	movwf	usart_str@str& (0+255),b
 11530  010D24  0EFF               	movlw	high STR_123
 11531  010D26  0100               	movlb	0	; () banked
 11532  010D28  6F61               	movwf	(usart_str@str+1)& (0+255),b
 11533  010D2A  EC83  F0D6         	call	_usart_str	;wreg free
 11534                           
 11535                           ;UART.c: 372: usart_str("\n");
 11536  010D2E  0EFB               	movlw	low STR_124
 11537  010D30  0100               	movlb	0	; () banked
 11538  010D32  6F60               	movwf	usart_str@str& (0+255),b
 11539  010D34  0EFF               	movlw	high STR_124
 11540  010D36  0100               	movlb	0	; () banked
 11541  010D38  6F61               	movwf	(usart_str@str+1)& (0+255),b
 11542  010D3A  EC83  F0D6         	call	_usart_str	;wreg free
 11543  010D3E  0012               	return		;funcret
 11544  010D40                     __end_of_UART_Data:
 11545                           	opt stack 0
 11546                           tblptru	equ	0xFF8
 11547                           tblptrh	equ	0xFF7
 11548                           tblptrl	equ	0xFF6
 11549                           tablat	equ	0xFF5
 11550                           intcon	equ	0xFF2
 11551                           postinc0	equ	0xFEE
 11552                           wreg	equ	0xFE8
 11553                           postdec1	equ	0xFE5
 11554                           fsr1h	equ	0xFE2
 11555                           fsr1l	equ	0xFE1
 11556                           status	equ	0xFD8
 11557                           
 11558 ;; *************** function _UART_Data_String *****************
 11559 ;; Defined at:
 11560 ;;		line 374 in file "UART.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;		None
 11563 ;; Auto vars:     Size  Location     Type
 11564 ;;		None
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  1    wreg      void 
 11567 ;; Registers used:
 11568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11578 ;;Total ram usage:        0 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; Hardware stack levels required when called:    7
 11581 ;; This function calls:
 11582 ;;		_printf
 11583 ;;		_usart_str
 11584 ;;		_usart_str_1
 11585 ;; This function is called by:
 11586 ;;		_UART_Data
 11587 ;; This function uses a non-reentrant model
 11588 ;;
 11589                           
 11590                           	psect	text20
 11591  0131A6                     __ptext20:
 11592                           	opt stack 0
 11593  0131A6                     _UART_Data_String:
 11594                           	opt stack 21
 11595                           
 11596                           ;UART.c: 376: usart_str("\r");
 11597                           
 11598                           ;incstack = 0
 11599  0131A6  0EFD               	movlw	low STR_123
 11600  0131A8  0100               	movlb	0	; () banked
 11601  0131AA  6F60               	movwf	usart_str@str& (0+255),b
 11602  0131AC  0EFF               	movlw	high STR_123
 11603  0131AE  0100               	movlb	0	; () banked
 11604  0131B0  6F61               	movwf	(usart_str@str+1)& (0+255),b
 11605  0131B2  EC83  F0D6         	call	_usart_str	;wreg free
 11606                           
 11607                           ;UART.c: 377: usart_str("\n");
 11608  0131B6  0EFB               	movlw	low STR_124
 11609  0131B8  0100               	movlb	0	; () banked
 11610  0131BA  6F60               	movwf	usart_str@str& (0+255),b
 11611  0131BC  0EFF               	movlw	high STR_124
 11612  0131BE  0100               	movlb	0	; () banked
 11613  0131C0  6F61               	movwf	(usart_str@str+1)& (0+255),b
 11614  0131C2  EC83  F0D6         	call	_usart_str	;wreg free
 11615                           
 11616                           ;UART.c: 379: printf("%s","Serial No");
 11617  0131C6  0EF5               	movlw	low STR_2
 11618  0131C8  0100               	movlb	0	; () banked
 11619  0131CA  6FB1               	movwf	printf@f& (0+255),b
 11620  0131CC  0EFF               	movlw	high STR_2
 11621  0131CE  0100               	movlb	0	; () banked
 11622  0131D0  6FB2               	movwf	(printf@f+1)& (0+255),b
 11623  0131D2  0E27               	movlw	low STR_128
 11624  0131D4  0100               	movlb	0	; () banked
 11625  0131D6  6FB3               	movwf	(?_printf+2)& (0+255),b
 11626  0131D8  0EFF               	movlw	high STR_128
 11627  0131DA  0100               	movlb	0	; () banked
 11628  0131DC  6FB4               	movwf	(?_printf+3)& (0+255),b
 11629  0131DE  ECA0  F086         	call	_printf	;wreg free
 11630                           
 11631                           ;UART.c: 380: usart_str_1(',');
 11632  0131E2  0E2C               	movlw	44
 11633  0131E4  EC6F  F0D8         	call	_usart_str_1
 11634                           
 11635                           ;UART.c: 382: printf("%s","TURBINE ID");
 11636  0131E8  0EF5               	movlw	low STR_2
 11637  0131EA  0100               	movlb	0	; () banked
 11638  0131EC  6FB1               	movwf	printf@f& (0+255),b
 11639  0131EE  0EFF               	movlw	high STR_2
 11640  0131F0  0100               	movlb	0	; () banked
 11641  0131F2  6FB2               	movwf	(printf@f+1)& (0+255),b
 11642  0131F4  0E41               	movlw	low STR_130
 11643  0131F6  0100               	movlb	0	; () banked
 11644  0131F8  6FB3               	movwf	(?_printf+2)& (0+255),b
 11645  0131FA  0EFE               	movlw	high STR_130
 11646  0131FC  0100               	movlb	0	; () banked
 11647  0131FE  6FB4               	movwf	(?_printf+3)& (0+255),b
 11648  013200  ECA0  F086         	call	_printf	;wreg free
 11649                           
 11650                           ;UART.c: 383: usart_str_1(',');
 11651  013204  0E2C               	movlw	44
 11652  013206  EC6F  F0D8         	call	_usart_str_1
 11653                           
 11654                           ;UART.c: 385: printf("%s","WIND_INSTANT");
 11655  01320A  0EF5               	movlw	low STR_2
 11656  01320C  0100               	movlb	0	; () banked
 11657  01320E  6FB1               	movwf	printf@f& (0+255),b
 11658  013210  0EFF               	movlw	high STR_2
 11659  013212  0100               	movlb	0	; () banked
 11660  013214  6FB2               	movwf	(printf@f+1)& (0+255),b
 11661  013216  0EF7               	movlw	low STR_132
 11662  013218  0100               	movlb	0	; () banked
 11663  01321A  6FB3               	movwf	(?_printf+2)& (0+255),b
 11664  01321C  0EFD               	movlw	high STR_132
 11665  01321E  0100               	movlb	0	; () banked
 11666  013220  6FB4               	movwf	(?_printf+3)& (0+255),b
 11667  013222  ECA0  F086         	call	_printf	;wreg free
 11668                           
 11669                           ;UART.c: 386: usart_str_1(',');
 11670  013226  0E2C               	movlw	44
 11671  013228  EC6F  F0D8         	call	_usart_str_1
 11672                           
 11673                           ;UART.c: 388: printf("%s","WIND AVG");
 11674  01322C  0EF5               	movlw	low STR_2
 11675  01322E  0100               	movlb	0	; () banked
 11676  013230  6FB1               	movwf	printf@f& (0+255),b
 11677  013232  0EFF               	movlw	high STR_2
 11678  013234  0100               	movlb	0	; () banked
 11679  013236  6FB2               	movwf	(printf@f+1)& (0+255),b
 11680  013238  0E43               	movlw	low STR_134
 11681  01323A  0100               	movlb	0	; () banked
 11682  01323C  6FB3               	movwf	(?_printf+2)& (0+255),b
 11683  01323E  0EFF               	movlw	high STR_134
 11684  013240  0100               	movlb	0	; () banked
 11685  013242  6FB4               	movwf	(?_printf+3)& (0+255),b
 11686  013244  ECA0  F086         	call	_printf	;wreg free
 11687                           
 11688                           ;UART.c: 389: usart_str_1(',');
 11689  013248  0E2C               	movlw	44
 11690  01324A  EC6F  F0D8         	call	_usart_str_1
 11691                           
 11692                           ;UART.c: 391: printf("%s","WIND 2 INSTANT");
 11693  01324E  0EF5               	movlw	low STR_2
 11694  013250  0100               	movlb	0	; () banked
 11695  013252  6FB1               	movwf	printf@f& (0+255),b
 11696  013254  0EFF               	movlw	high STR_2
 11697  013256  0100               	movlb	0	; () banked
 11698  013258  6FB2               	movwf	(printf@f+1)& (0+255),b
 11699  01325A  0E5F               	movlw	low STR_136
 11700  01325C  0100               	movlb	0	; () banked
 11701  01325E  6FB3               	movwf	(?_printf+2)& (0+255),b
 11702  013260  0EFD               	movlw	high STR_136
 11703  013262  0100               	movlb	0	; () banked
 11704  013264  6FB4               	movwf	(?_printf+3)& (0+255),b
 11705  013266  ECA0  F086         	call	_printf	;wreg free
 11706                           
 11707                           ;UART.c: 392: usart_str_1(',');
 11708  01326A  0E2C               	movlw	44
 11709  01326C  EC6F  F0D8         	call	_usart_str_1
 11710                           
 11711                           ;UART.c: 394: printf("%s","WIND 2 AVG");
 11712  013270  0EF5               	movlw	low STR_2
 11713  013272  0100               	movlb	0	; () banked
 11714  013274  6FB1               	movwf	printf@f& (0+255),b
 11715  013276  0EFF               	movlw	high STR_2
 11716  013278  0100               	movlb	0	; () banked
 11717  01327A  6FB2               	movwf	(printf@f+1)& (0+255),b
 11718  01327C  0E4C               	movlw	low STR_138
 11719  01327E  0100               	movlb	0	; () banked
 11720  013280  6FB3               	movwf	(?_printf+2)& (0+255),b
 11721  013282  0EFE               	movlw	high STR_138
 11722  013284  0100               	movlb	0	; () banked
 11723  013286  6FB4               	movwf	(?_printf+3)& (0+255),b
 11724  013288  ECA0  F086         	call	_printf	;wreg free
 11725                           
 11726                           ;UART.c: 395: usart_str_1(',');
 11727  01328C  0E2C               	movlw	44
 11728  01328E  EC6F  F0D8         	call	_usart_str_1
 11729                           
 11730                           ;UART.c: 397: printf("%s","TURBINE RPM");
 11731  013292  0EF5               	movlw	low STR_2
 11732  013294  0100               	movlb	0	; () banked
 11733  013296  6FB1               	movwf	printf@f& (0+255),b
 11734  013298  0EFF               	movlw	high STR_2
 11735  01329A  0100               	movlb	0	; () banked
 11736  01329C  6FB2               	movwf	(printf@f+1)& (0+255),b
 11737  01329E  0E29               	movlw	low STR_140
 11738  0132A0  0100               	movlb	0	; () banked
 11739  0132A2  6FB3               	movwf	(?_printf+2)& (0+255),b
 11740  0132A4  0EFE               	movlw	high STR_140
 11741  0132A6  0100               	movlb	0	; () banked
 11742  0132A8  6FB4               	movwf	(?_printf+3)& (0+255),b
 11743  0132AA  ECA0  F086         	call	_printf	;wreg free
 11744                           
 11745                           ;UART.c: 398: usart_str_1(',');
 11746  0132AE  0E2C               	movlw	44
 11747  0132B0  EC6F  F0D8         	call	_usart_str_1
 11748                           
 11749                           ;UART.c: 400: printf("%s","GENERATOR RPM");
 11750  0132B4  0EF5               	movlw	low STR_2
 11751  0132B6  0100               	movlb	0	; () banked
 11752  0132B8  6FB1               	movwf	printf@f& (0+255),b
 11753  0132BA  0EFF               	movlw	high STR_2
 11754  0132BC  0100               	movlb	0	; () banked
 11755  0132BE  6FB2               	movwf	(printf@f+1)& (0+255),b
 11756  0132C0  0E8B               	movlw	low STR_142
 11757  0132C2  0100               	movlb	0	; () banked
 11758  0132C4  6FB3               	movwf	(?_printf+2)& (0+255),b
 11759  0132C6  0EFD               	movlw	high STR_142
 11760  0132C8  0100               	movlb	0	; () banked
 11761  0132CA  6FB4               	movwf	(?_printf+3)& (0+255),b
 11762  0132CC  ECA0  F086         	call	_printf	;wreg free
 11763                           
 11764                           ;UART.c: 401: usart_str_1(',');
 11765  0132D0  0E2C               	movlw	44
 11766  0132D2  EC6F  F0D8         	call	_usart_str_1
 11767                           
 11768                           ;UART.c: 403: printf("%s","MOTOR SLIP RPM");
 11769  0132D6  0EF5               	movlw	low STR_2
 11770  0132D8  0100               	movlb	0	; () banked
 11771  0132DA  6FB1               	movwf	printf@f& (0+255),b
 11772  0132DC  0EFF               	movlw	high STR_2
 11773  0132DE  0100               	movlb	0	; () banked
 11774  0132E0  6FB2               	movwf	(printf@f+1)& (0+255),b
 11775  0132E2  0E32               	movlw	low STR_144
 11776  0132E4  0100               	movlb	0	; () banked
 11777  0132E6  6FB3               	movwf	(?_printf+2)& (0+255),b
 11778  0132E8  0EFD               	movlw	high STR_144
 11779  0132EA  0100               	movlb	0	; () banked
 11780  0132EC  6FB4               	movwf	(?_printf+3)& (0+255),b
 11781  0132EE  ECA0  F086         	call	_printf	;wreg free
 11782                           
 11783                           ;UART.c: 404: usart_str_1(',');
 11784  0132F2  0E2C               	movlw	44
 11785  0132F4  EC6F  F0D8         	call	_usart_str_1
 11786                           
 11787                           ;UART.c: 406: printf("%s","ROTOR SLIP RPM");
 11788  0132F8  0EF5               	movlw	low STR_2
 11789  0132FA  0100               	movlb	0	; () banked
 11790  0132FC  6FB1               	movwf	printf@f& (0+255),b
 11791  0132FE  0EFF               	movlw	high STR_2
 11792  013300  0100               	movlb	0	; () banked
 11793  013302  6FB2               	movwf	(printf@f+1)& (0+255),b
 11794  013304  0E41               	movlw	low STR_146
 11795  013306  0100               	movlb	0	; () banked
 11796  013308  6FB3               	movwf	(?_printf+2)& (0+255),b
 11797  01330A  0EFD               	movlw	high STR_146
 11798  01330C  0100               	movlb	0	; () banked
 11799  01330E  6FB4               	movwf	(?_printf+3)& (0+255),b
 11800  013310  ECA0  F086         	call	_printf	;wreg free
 11801                           
 11802                           ;UART.c: 407: usart_str_1(',');
 11803  013314  0E2C               	movlw	44
 11804  013316  EC6F  F0D8         	call	_usart_str_1
 11805                           
 11806                           ;UART.c: 409: printf("%s","VFD Hz");
 11807  01331A  0EF5               	movlw	low STR_2
 11808  01331C  0100               	movlb	0	; () banked
 11809  01331E  6FB1               	movwf	printf@f& (0+255),b
 11810  013320  0EFF               	movlw	high STR_2
 11811  013322  0100               	movlb	0	; () banked
 11812  013324  6FB2               	movwf	(printf@f+1)& (0+255),b
 11813  013326  0ECD               	movlw	low STR_148
 11814  013328  0100               	movlb	0	; () banked
 11815  01332A  6FB3               	movwf	(?_printf+2)& (0+255),b
 11816  01332C  0EFF               	movlw	high STR_148
 11817  01332E  0100               	movlb	0	; () banked
 11818  013330  6FB4               	movwf	(?_printf+3)& (0+255),b
 11819  013332  ECA0  F086         	call	_printf	;wreg free
 11820                           
 11821                           ;UART.c: 410: usart_str_1(',');
 11822  013336  0E2C               	movlw	44
 11823  013338  EC6F  F0D8         	call	_usart_str_1
 11824                           
 11825                           ;UART.c: 412: printf("%s","DC BUS VOLTAGE");
 11826  01333C  0EF5               	movlw	low STR_2
 11827  01333E  0100               	movlb	0	; () banked
 11828  013340  6FB1               	movwf	printf@f& (0+255),b
 11829  013342  0EFF               	movlw	high STR_2
 11830  013344  0100               	movlb	0	; () banked
 11831  013346  6FB2               	movwf	(printf@f+1)& (0+255),b
 11832  013348  0E23               	movlw	low STR_150
 11833  01334A  0100               	movlb	0	; () banked
 11834  01334C  6FB3               	movwf	(?_printf+2)& (0+255),b
 11835  01334E  0EFD               	movlw	high STR_150
 11836  013350  0100               	movlb	0	; () banked
 11837  013352  6FB4               	movwf	(?_printf+3)& (0+255),b
 11838  013354  ECA0  F086         	call	_printf	;wreg free
 11839                           
 11840                           ;UART.c: 413: usart_str_1(',');
 11841  013358  0E2C               	movlw	44
 11842  01335A  EC6F  F0D8         	call	_usart_str_1
 11843                           
 11844                           ;UART.c: 415: printf("%s","DC BUS CURRENT");
 11845  01335E  0EF5               	movlw	low STR_2
 11846  013360  0100               	movlb	0	; () banked
 11847  013362  6FB1               	movwf	printf@f& (0+255),b
 11848  013364  0EFF               	movlw	high STR_2
 11849  013366  0100               	movlb	0	; () banked
 11850  013368  6FB2               	movwf	(printf@f+1)& (0+255),b
 11851  01336A  0E6E               	movlw	low STR_152
 11852  01336C  0100               	movlb	0	; () banked
 11853  01336E  6FB3               	movwf	(?_printf+2)& (0+255),b
 11854  013370  0EFD               	movlw	high STR_152
 11855  013372  0100               	movlb	0	; () banked
 11856  013374  6FB4               	movwf	(?_printf+3)& (0+255),b
 11857  013376  ECA0  F086         	call	_printf	;wreg free
 11858                           
 11859                           ;UART.c: 416: usart_str_1(',');
 11860  01337A  0E2C               	movlw	44
 11861  01337C  EC6F  F0D8         	call	_usart_str_1
 11862                           
 11863                           ;UART.c: 418: printf("%s","R VOLT");
 11864  013380  0EF5               	movlw	low STR_2
 11865  013382  0100               	movlb	0	; () banked
 11866  013384  6FB1               	movwf	printf@f& (0+255),b
 11867  013386  0EFF               	movlw	high STR_2
 11868  013388  0100               	movlb	0	; () banked
 11869  01338A  6FB2               	movwf	(printf@f+1)& (0+255),b
 11870  01338C  0EB1               	movlw	low STR_154
 11871  01338E  0100               	movlb	0	; () banked
 11872  013390  6FB3               	movwf	(?_printf+2)& (0+255),b
 11873  013392  0EFF               	movlw	high STR_154
 11874  013394  0100               	movlb	0	; () banked
 11875  013396  6FB4               	movwf	(?_printf+3)& (0+255),b
 11876  013398  ECA0  F086         	call	_printf	;wreg free
 11877                           
 11878                           ;UART.c: 419: usart_str_1(',');
 11879  01339C  0E2C               	movlw	44
 11880  01339E  EC6F  F0D8         	call	_usart_str_1
 11881                           
 11882                           ;UART.c: 421: printf("%s","Y VOLT");
 11883  0133A2  0EF5               	movlw	low STR_2
 11884  0133A4  0100               	movlb	0	; () banked
 11885  0133A6  6FB1               	movwf	printf@f& (0+255),b
 11886  0133A8  0EFF               	movlw	high STR_2
 11887  0133AA  0100               	movlb	0	; () banked
 11888  0133AC  6FB2               	movwf	(printf@f+1)& (0+255),b
 11889  0133AE  0EB8               	movlw	low STR_156
 11890  0133B0  0100               	movlb	0	; () banked
 11891  0133B2  6FB3               	movwf	(?_printf+2)& (0+255),b
 11892  0133B4  0EFF               	movlw	high STR_156
 11893  0133B6  0100               	movlb	0	; () banked
 11894  0133B8  6FB4               	movwf	(?_printf+3)& (0+255),b
 11895  0133BA  ECA0  F086         	call	_printf	;wreg free
 11896                           
 11897                           ;UART.c: 422: usart_str_1(',');
 11898  0133BE  0E2C               	movlw	44
 11899  0133C0  EC6F  F0D8         	call	_usart_str_1
 11900                           
 11901                           ;UART.c: 424: printf("%s","B VOLT");
 11902  0133C4  0EF5               	movlw	low STR_2
 11903  0133C6  0100               	movlb	0	; () banked
 11904  0133C8  6FB1               	movwf	printf@f& (0+255),b
 11905  0133CA  0EFF               	movlw	high STR_2
 11906  0133CC  0100               	movlb	0	; () banked
 11907  0133CE  6FB2               	movwf	(printf@f+1)& (0+255),b
 11908  0133D0  0EAA               	movlw	low STR_158
 11909  0133D2  0100               	movlb	0	; () banked
 11910  0133D4  6FB3               	movwf	(?_printf+2)& (0+255),b
 11911  0133D6  0EFF               	movlw	high STR_158
 11912  0133D8  0100               	movlb	0	; () banked
 11913  0133DA  6FB4               	movwf	(?_printf+3)& (0+255),b
 11914  0133DC  ECA0  F086         	call	_printf	;wreg free
 11915                           
 11916                           ;UART.c: 425: usart_str_1(',');
 11917  0133E0  0E2C               	movlw	44
 11918  0133E2  EC6F  F0D8         	call	_usart_str_1
 11919                           
 11920                           ;UART.c: 427: printf("%s","R CURRENT");
 11921  0133E6  0EF5               	movlw	low STR_2
 11922  0133E8  0100               	movlb	0	; () banked
 11923  0133EA  6FB1               	movwf	printf@f& (0+255),b
 11924  0133EC  0EFF               	movlw	high STR_2
 11925  0133EE  0100               	movlb	0	; () banked
 11926  0133F0  6FB2               	movwf	(printf@f+1)& (0+255),b
 11927  0133F2  0EFF               	movlw	low STR_160
 11928  0133F4  0100               	movlb	0	; () banked
 11929  0133F6  6FB3               	movwf	(?_printf+2)& (0+255),b
 11930  0133F8  0EFE               	movlw	high STR_160
 11931  0133FA  0100               	movlb	0	; () banked
 11932  0133FC  6FB4               	movwf	(?_printf+3)& (0+255),b
 11933  0133FE  ECA0  F086         	call	_printf	;wreg free
 11934                           
 11935                           ;UART.c: 428: usart_str_1(',');
 11936  013402  0E2C               	movlw	44
 11937  013404  EC6F  F0D8         	call	_usart_str_1
 11938                           
 11939                           ;UART.c: 430: printf("%s","Y CURRENT");
 11940  013408  0EF5               	movlw	low STR_2
 11941  01340A  0100               	movlb	0	; () banked
 11942  01340C  6FB1               	movwf	printf@f& (0+255),b
 11943  01340E  0EFF               	movlw	high STR_2
 11944  013410  0100               	movlb	0	; () banked
 11945  013412  6FB2               	movwf	(printf@f+1)& (0+255),b
 11946  013414  0E09               	movlw	low STR_162
 11947  013416  0100               	movlb	0	; () banked
 11948  013418  6FB3               	movwf	(?_printf+2)& (0+255),b
 11949  01341A  0EFF               	movlw	high STR_162
 11950  01341C  0100               	movlb	0	; () banked
 11951  01341E  6FB4               	movwf	(?_printf+3)& (0+255),b
 11952  013420  ECA0  F086         	call	_printf	;wreg free
 11953                           
 11954                           ;UART.c: 431: usart_str_1(',');
 11955  013424  0E2C               	movlw	44
 11956  013426  EC6F  F0D8         	call	_usart_str_1
 11957                           
 11958                           ;UART.c: 433: printf("%s","B CURRENT");
 11959  01342A  0EF5               	movlw	low STR_2
 11960  01342C  0100               	movlb	0	; () banked
 11961  01342E  6FB1               	movwf	printf@f& (0+255),b
 11962  013430  0EFF               	movlw	high STR_2
 11963  013432  0100               	movlb	0	; () banked
 11964  013434  6FB2               	movwf	(printf@f+1)& (0+255),b
 11965  013436  0EF5               	movlw	low STR_164
 11966  013438  0100               	movlb	0	; () banked
 11967  01343A  6FB3               	movwf	(?_printf+2)& (0+255),b
 11968  01343C  0EFE               	movlw	high STR_164
 11969  01343E  0100               	movlb	0	; () banked
 11970  013440  6FB4               	movwf	(?_printf+3)& (0+255),b
 11971  013442  ECA0  F086         	call	_printf	;wreg free
 11972                           
 11973                           ;UART.c: 434: usart_str_1(',');
 11974  013446  0E2C               	movlw	44
 11975  013448  EC6F  F0D8         	call	_usart_str_1
 11976                           
 11977                           ;UART.c: 436: printf("%s","KW");
 11978  01344C  0EF5               	movlw	low STR_2
 11979  01344E  0100               	movlb	0	; () banked
 11980  013450  6FB1               	movwf	printf@f& (0+255),b
 11981  013452  0EFF               	movlw	high STR_2
 11982  013454  0100               	movlb	0	; () banked
 11983  013456  6FB2               	movwf	(printf@f+1)& (0+255),b
 11984  013458  0EEB               	movlw	low (STR_168+2)
 11985  01345A  0100               	movlb	0	; () banked
 11986  01345C  6FB3               	movwf	(?_printf+2)& (0+255),b
 11987  01345E  0EFF               	movlw	high (STR_168+2)
 11988  013460  0100               	movlb	0	; () banked
 11989  013462  6FB4               	movwf	(?_printf+3)& (0+255),b
 11990  013464  ECA0  F086         	call	_printf	;wreg free
 11991                           
 11992                           ;UART.c: 437: usart_str_1(',');
 11993  013468  0E2C               	movlw	44
 11994  01346A  EC6F  F0D8         	call	_usart_str_1
 11995                           
 11996                           ;UART.c: 439: printf("%s","Y-KW");
 11997  01346E  0EF5               	movlw	low STR_2
 11998  013470  0100               	movlb	0	; () banked
 11999  013472  6FB1               	movwf	printf@f& (0+255),b
 12000  013474  0EFF               	movlw	high STR_2
 12001  013476  0100               	movlb	0	; () banked
 12002  013478  6FB2               	movwf	(printf@f+1)& (0+255),b
 12003  01347A  0EE9               	movlw	low STR_168
 12004  01347C  0100               	movlb	0	; () banked
 12005  01347E  6FB3               	movwf	(?_printf+2)& (0+255),b
 12006  013480  0EFF               	movlw	high STR_168
 12007  013482  0100               	movlb	0	; () banked
 12008  013484  6FB4               	movwf	(?_printf+3)& (0+255),b
 12009  013486  ECA0  F086         	call	_printf	;wreg free
 12010                           
 12011                           ;UART.c: 440: usart_str_1(',');
 12012  01348A  0E2C               	movlw	44
 12013  01348C  EC6F  F0D8         	call	_usart_str_1
 12014                           
 12015                           ;UART.c: 442: printf("%s","KVA");
 12016  013490  0EF5               	movlw	low STR_2
 12017  013492  0100               	movlb	0	; () banked
 12018  013494  6FB1               	movwf	printf@f& (0+255),b
 12019  013496  0EFF               	movlw	high STR_2
 12020  013498  0100               	movlb	0	; () banked
 12021  01349A  6FB2               	movwf	(printf@f+1)& (0+255),b
 12022  01349C  0EEE               	movlw	low STR_170
 12023  01349E  0100               	movlb	0	; () banked
 12024  0134A0  6FB3               	movwf	(?_printf+2)& (0+255),b
 12025  0134A2  0EFF               	movlw	high STR_170
 12026  0134A4  0100               	movlb	0	; () banked
 12027  0134A6  6FB4               	movwf	(?_printf+3)& (0+255),b
 12028  0134A8  ECA0  F086         	call	_printf	;wreg free
 12029                           
 12030                           ;UART.c: 443: usart_str_1(',');
 12031  0134AC  0E2C               	movlw	44
 12032  0134AE  EC6F  F0D8         	call	_usart_str_1
 12033                           
 12034                           ;UART.c: 445: printf("%s","KVAR");
 12035  0134B2  0EF5               	movlw	low STR_2
 12036  0134B4  0100               	movlb	0	; () banked
 12037  0134B6  6FB1               	movwf	printf@f& (0+255),b
 12038  0134B8  0EFF               	movlw	high STR_2
 12039  0134BA  0100               	movlb	0	; () banked
 12040  0134BC  6FB2               	movwf	(printf@f+1)& (0+255),b
 12041  0134BE  0EE4               	movlw	low STR_172
 12042  0134C0  0100               	movlb	0	; () banked
 12043  0134C2  6FB3               	movwf	(?_printf+2)& (0+255),b
 12044  0134C4  0EFF               	movlw	high STR_172
 12045  0134C6  0100               	movlb	0	; () banked
 12046  0134C8  6FB4               	movwf	(?_printf+3)& (0+255),b
 12047  0134CA  ECA0  F086         	call	_printf	;wreg free
 12048                           
 12049                           ;UART.c: 446: usart_str_1(',');
 12050  0134CE  0E2C               	movlw	44
 12051  0134D0  EC6F  F0D8         	call	_usart_str_1
 12052                           
 12053                           ;UART.c: 448: printf("%s","POWER FACTOR");
 12054  0134D4  0EF5               	movlw	low STR_2
 12055  0134D6  0100               	movlb	0	; () banked
 12056  0134D8  6FB1               	movwf	printf@f& (0+255),b
 12057  0134DA  0EFF               	movlw	high STR_2
 12058  0134DC  0100               	movlb	0	; () banked
 12059  0134DE  6FB2               	movwf	(printf@f+1)& (0+255),b
 12060  0134E0  0E52               	movlw	low (STR_176+2)
 12061  0134E2  0100               	movlb	0	; () banked
 12062  0134E4  6FB3               	movwf	(?_printf+2)& (0+255),b
 12063  0134E6  0EFD               	movlw	high (STR_176+2)
 12064  0134E8  0100               	movlb	0	; () banked
 12065  0134EA  6FB4               	movwf	(?_printf+3)& (0+255),b
 12066  0134EC  ECA0  F086         	call	_printf	;wreg free
 12067                           
 12068                           ;UART.c: 449: usart_str_1(',');
 12069  0134F0  0E2C               	movlw	44
 12070  0134F2  EC6F  F0D8         	call	_usart_str_1
 12071                           
 12072                           ;UART.c: 451: printf("%s","Y-POWER FACTOR");
 12073  0134F6  0EF5               	movlw	low STR_2
 12074  0134F8  0100               	movlb	0	; () banked
 12075  0134FA  6FB1               	movwf	printf@f& (0+255),b
 12076  0134FC  0EFF               	movlw	high STR_2
 12077  0134FE  0100               	movlb	0	; () banked
 12078  013500  6FB2               	movwf	(printf@f+1)& (0+255),b
 12079  013502  0E50               	movlw	low STR_176
 12080  013504  0100               	movlb	0	; () banked
 12081  013506  6FB3               	movwf	(?_printf+2)& (0+255),b
 12082  013508  0EFD               	movlw	high STR_176
 12083  01350A  0100               	movlb	0	; () banked
 12084  01350C  6FB4               	movwf	(?_printf+3)& (0+255),b
 12085  01350E  ECA0  F086         	call	_printf	;wreg free
 12086                           
 12087                           ;UART.c: 452: usart_str_1(',');
 12088  013512  0E2C               	movlw	44
 12089  013514  EC6F  F0D8         	call	_usart_str_1
 12090                           
 12091                           ;UART.c: 454: printf("%s","FREQUENCY");
 12092  013518  0EF5               	movlw	low STR_2
 12093  01351A  0100               	movlb	0	; () banked
 12094  01351C  6FB1               	movwf	printf@f& (0+255),b
 12095  01351E  0EFF               	movlw	high STR_2
 12096  013520  0100               	movlb	0	; () banked
 12097  013522  6FB2               	movwf	(printf@f+1)& (0+255),b
 12098  013524  0E1D               	movlw	low STR_178
 12099  013526  0100               	movlb	0	; () banked
 12100  013528  6FB3               	movwf	(?_printf+2)& (0+255),b
 12101  01352A  0EFF               	movlw	high STR_178
 12102  01352C  0100               	movlb	0	; () banked
 12103  01352E  6FB4               	movwf	(?_printf+3)& (0+255),b
 12104  013530  ECA0  F086         	call	_printf	;wreg free
 12105                           
 12106                           ;UART.c: 455: usart_str_1(',');
 12107  013534  0E2C               	movlw	44
 12108  013536  EC6F  F0D8         	call	_usart_str_1
 12109                           
 12110                           ;UART.c: 457: printf("%s","PHASE ANGLE");
 12111  01353A  0EF5               	movlw	low STR_2
 12112  01353C  0100               	movlb	0	; () banked
 12113  01353E  6FB1               	movwf	printf@f& (0+255),b
 12114  013540  0EFF               	movlw	high STR_2
 12115  013542  0100               	movlb	0	; () banked
 12116  013544  6FB2               	movwf	(printf@f+1)& (0+255),b
 12117  013546  0E11               	movlw	low STR_180
 12118  013548  0100               	movlb	0	; () banked
 12119  01354A  6FB3               	movwf	(?_printf+2)& (0+255),b
 12120  01354C  0EFE               	movlw	high STR_180
 12121  01354E  0100               	movlb	0	; () banked
 12122  013550  6FB4               	movwf	(?_printf+3)& (0+255),b
 12123  013552  ECA0  F086         	call	_printf	;wreg free
 12124                           
 12125                           ;UART.c: 458: usart_str_1(',');
 12126  013556  0E2C               	movlw	44
 12127  013558  EC6F  F0D8         	call	_usart_str_1
 12128                           
 12129                           ;UART.c: 460: printf("%s","VFD ERROR");
 12130  01355C  0EF5               	movlw	low STR_2
 12131  01355E  0100               	movlb	0	; () banked
 12132  013560  6FB1               	movwf	printf@f& (0+255),b
 12133  013562  0EFF               	movlw	high STR_2
 12134  013564  0100               	movlb	0	; () banked
 12135  013566  6FB2               	movwf	(printf@f+1)& (0+255),b
 12136  013568  0EE1               	movlw	low STR_182
 12137  01356A  0100               	movlb	0	; () banked
 12138  01356C  6FB3               	movwf	(?_printf+2)& (0+255),b
 12139  01356E  0EFE               	movlw	high STR_182
 12140  013570  0100               	movlb	0	; () banked
 12141  013572  6FB4               	movwf	(?_printf+3)& (0+255),b
 12142  013574  ECA0  F086         	call	_printf	;wreg free
 12143                           
 12144                           ;UART.c: 461: usart_str_1(',');
 12145  013578  0E2C               	movlw	44
 12146  01357A  EC6F  F0D8         	call	_usart_str_1
 12147                           
 12148                           ;UART.c: 463: printf("%s","INITAL DELAY");
 12149  01357E  0EF5               	movlw	low STR_2
 12150  013580  0100               	movlb	0	; () banked
 12151  013582  6FB1               	movwf	printf@f& (0+255),b
 12152  013584  0EFF               	movlw	high STR_2
 12153  013586  0100               	movlb	0	; () banked
 12154  013588  6FB2               	movwf	(printf@f+1)& (0+255),b
 12155  01358A  0E04               	movlw	low STR_184
 12156  01358C  0100               	movlb	0	; () banked
 12157  01358E  6FB3               	movwf	(?_printf+2)& (0+255),b
 12158  013590  0EFE               	movlw	high STR_184
 12159  013592  0100               	movlb	0	; () banked
 12160  013594  6FB4               	movwf	(?_printf+3)& (0+255),b
 12161  013596  ECA0  F086         	call	_printf	;wreg free
 12162                           
 12163                           ;UART.c: 464: usart_str_1(',');
 12164  01359A  0E2C               	movlw	44
 12165  01359C  EC6F  F0D8         	call	_usart_str_1
 12166                           
 12167                           ;UART.c: 466: printf("%s","ERROR NO");
 12168  0135A0  0EF5               	movlw	low STR_2
 12169  0135A2  0100               	movlb	0	; () banked
 12170  0135A4  6FB1               	movwf	printf@f& (0+255),b
 12171  0135A6  0EFF               	movlw	high STR_2
 12172  0135A8  0100               	movlb	0	; () banked
 12173  0135AA  6FB2               	movwf	(printf@f+1)& (0+255),b
 12174  0135AC  0E4C               	movlw	low STR_186
 12175  0135AE  0100               	movlb	0	; () banked
 12176  0135B0  6FB3               	movwf	(?_printf+2)& (0+255),b
 12177  0135B2  0EFF               	movlw	high STR_186
 12178  0135B4  0100               	movlb	0	; () banked
 12179  0135B6  6FB4               	movwf	(?_printf+3)& (0+255),b
 12180  0135B8  ECA0  F086         	call	_printf	;wreg free
 12181                           
 12182                           ;UART.c: 467: usart_str_1(',');
 12183  0135BC  0E2C               	movlw	44
 12184  0135BE  EC6F  F0D8         	call	_usart_str_1
 12185                           
 12186                           ;UART.c: 469: printf("%s","ERROR IN STRING");
 12187  0135C2  0EF5               	movlw	low STR_2
 12188  0135C4  0100               	movlb	0	; () banked
 12189  0135C6  6FB1               	movwf	printf@f& (0+255),b
 12190  0135C8  0EFF               	movlw	high STR_2
 12191  0135CA  0100               	movlb	0	; () banked
 12192  0135CC  6FB2               	movwf	(printf@f+1)& (0+255),b
 12193  0135CE  0E13               	movlw	low STR_188
 12194  0135D0  0100               	movlb	0	; () banked
 12195  0135D2  6FB3               	movwf	(?_printf+2)& (0+255),b
 12196  0135D4  0EFD               	movlw	high STR_188
 12197  0135D6  0100               	movlb	0	; () banked
 12198  0135D8  6FB4               	movwf	(?_printf+3)& (0+255),b
 12199  0135DA  ECA0  F086         	call	_printf	;wreg free
 12200                           
 12201                           ;UART.c: 470: usart_str_1(',');
 12202  0135DE  0E2C               	movlw	44
 12203  0135E0  EC6F  F0D8         	call	_usart_str_1
 12204                           
 12205                           ;UART.c: 472: printf("%s","TURBINE STATE");
 12206  0135E4  0EF5               	movlw	low STR_2
 12207  0135E6  0100               	movlb	0	; () banked
 12208  0135E8  6FB1               	movwf	printf@f& (0+255),b
 12209  0135EA  0EFF               	movlw	high STR_2
 12210  0135EC  0100               	movlb	0	; () banked
 12211  0135EE  6FB2               	movwf	(printf@f+1)& (0+255),b
 12212  0135F0  0E7D               	movlw	low STR_190
 12213  0135F2  0100               	movlb	0	; () banked
 12214  0135F4  6FB3               	movwf	(?_printf+2)& (0+255),b
 12215  0135F6  0EFD               	movlw	high STR_190
 12216  0135F8  0100               	movlb	0	; () banked
 12217  0135FA  6FB4               	movwf	(?_printf+3)& (0+255),b
 12218  0135FC  ECA0  F086         	call	_printf	;wreg free
 12219                           
 12220                           ;UART.c: 473: usart_str_1(',');
 12221  013600  0E2C               	movlw	44
 12222  013602  EC6F  F0D8         	call	_usart_str_1
 12223                           
 12224                           ;UART.c: 475: printf("%s","DATE");
 12225  013606  0EF5               	movlw	low STR_2
 12226  013608  0100               	movlb	0	; () banked
 12227  01360A  6FB1               	movwf	printf@f& (0+255),b
 12228  01360C  0EFF               	movlw	high STR_2
 12229  01360E  0100               	movlb	0	; () banked
 12230  013610  6FB2               	movwf	(printf@f+1)& (0+255),b
 12231  013612  0EDA               	movlw	low STR_192
 12232  013614  0100               	movlb	0	; () banked
 12233  013616  6FB3               	movwf	(?_printf+2)& (0+255),b
 12234  013618  0EFF               	movlw	high STR_192
 12235  01361A  0100               	movlb	0	; () banked
 12236  01361C  6FB4               	movwf	(?_printf+3)& (0+255),b
 12237  01361E  ECA0  F086         	call	_printf	;wreg free
 12238                           
 12239                           ;UART.c: 476: usart_str_1(',');
 12240  013622  0E2C               	movlw	44
 12241  013624  EC6F  F0D8         	call	_usart_str_1
 12242                           
 12243                           ;UART.c: 478: printf("%s","TIME");
 12244  013628  0EF5               	movlw	low STR_2
 12245  01362A  0100               	movlb	0	; () banked
 12246  01362C  6FB1               	movwf	printf@f& (0+255),b
 12247  01362E  0EFF               	movlw	high STR_2
 12248  013630  0100               	movlb	0	; () banked
 12249  013632  6FB2               	movwf	(printf@f+1)& (0+255),b
 12250  013634  0E82               	movlw	low (STR_222+13)
 12251  013636  0100               	movlb	0	; () banked
 12252  013638  6FB3               	movwf	(?_printf+2)& (0+255),b
 12253  01363A  0EFC               	movlw	high (STR_222+13)
 12254  01363C  0100               	movlb	0	; () banked
 12255  01363E  6FB4               	movwf	(?_printf+3)& (0+255),b
 12256  013640  ECA0  F086         	call	_printf	;wreg free
 12257                           
 12258                           ;UART.c: 479: usart_str_1(',');
 12259  013644  0E2C               	movlw	44
 12260  013646  EC6F  F0D8         	call	_usart_str_1
 12261                           
 12262                           ;UART.c: 481: printf("%s","TEMPERATURE");
 12263  01364A  0EF5               	movlw	low STR_2
 12264  01364C  0100               	movlb	0	; () banked
 12265  01364E  6FB1               	movwf	printf@f& (0+255),b
 12266  013650  0EFF               	movlw	high STR_2
 12267  013652  0100               	movlb	0	; () banked
 12268  013654  6FB2               	movwf	(printf@f+1)& (0+255),b
 12269  013656  0E1D               	movlw	low STR_196
 12270  013658  0100               	movlb	0	; () banked
 12271  01365A  6FB3               	movwf	(?_printf+2)& (0+255),b
 12272  01365C  0EFE               	movlw	high STR_196
 12273  01365E  0100               	movlb	0	; () banked
 12274  013660  6FB4               	movwf	(?_printf+3)& (0+255),b
 12275  013662  ECA0  F086         	call	_printf	;wreg free
 12276                           
 12277                           ;UART.c: 482: usart_str_1(',');
 12278  013666  0E2C               	movlw	44
 12279  013668  EC6F  F0D8         	call	_usart_str_1
 12280                           
 12281                           ;UART.c: 484: printf("%s","LAST 5 ERROR");
 12282  01366C  0EF5               	movlw	low STR_2
 12283  01366E  0100               	movlb	0	; () banked
 12284  013670  6FB1               	movwf	printf@f& (0+255),b
 12285  013672  0EFF               	movlw	high STR_2
 12286  013674  0100               	movlb	0	; () banked
 12287  013676  6FB2               	movwf	(printf@f+1)& (0+255),b
 12288  013678  0EEA               	movlw	low STR_198
 12289  01367A  0100               	movlb	0	; () banked
 12290  01367C  6FB3               	movwf	(?_printf+2)& (0+255),b
 12291  01367E  0EFD               	movlw	high STR_198
 12292  013680  0100               	movlb	0	; () banked
 12293  013682  6FB4               	movwf	(?_printf+3)& (0+255),b
 12294  013684  ECA0  F086         	call	_printf	;wreg free
 12295                           
 12296                           ;UART.c: 485: usart_str_1(',');
 12297  013688  0E2C               	movlw	44
 12298  01368A  EC6F  F0D8         	call	_usart_str_1
 12299                           
 12300                           ;UART.c: 487: printf("%s","CONTACTOR");
 12301  01368E  0EF5               	movlw	low STR_2
 12302  013690  0100               	movlb	0	; () banked
 12303  013692  6FB1               	movwf	printf@f& (0+255),b
 12304  013694  0EFF               	movlw	high STR_2
 12305  013696  0100               	movlb	0	; () banked
 12306  013698  6FB2               	movwf	(printf@f+1)& (0+255),b
 12307  01369A  0EEB               	movlw	low STR_200
 12308  01369C  0100               	movlb	0	; () banked
 12309  01369E  6FB3               	movwf	(?_printf+2)& (0+255),b
 12310  0136A0  0EFE               	movlw	high STR_200
 12311  0136A2  0100               	movlb	0	; () banked
 12312  0136A4  6FB4               	movwf	(?_printf+3)& (0+255),b
 12313  0136A6  ECA0  F086         	call	_printf	;wreg free
 12314                           
 12315                           ;UART.c: 488: usart_str_1(',');
 12316  0136AA  0E2C               	movlw	44
 12317  0136AC  EC6F  F0D8         	call	_usart_str_1
 12318                           
 12319                           ;UART.c: 490: printf("%s","RAMP UP LOOP");
 12320  0136B0  0EF5               	movlw	low STR_2
 12321  0136B2  0100               	movlb	0	; () banked
 12322  0136B4  6FB1               	movwf	printf@f& (0+255),b
 12323  0136B6  0EFF               	movlw	high STR_2
 12324  0136B8  0100               	movlb	0	; () banked
 12325  0136BA  6FB2               	movwf	(printf@f+1)& (0+255),b
 12326  0136BC  0EDD               	movlw	low STR_202
 12327  0136BE  0100               	movlb	0	; () banked
 12328  0136C0  6FB3               	movwf	(?_printf+2)& (0+255),b
 12329  0136C2  0EFD               	movlw	high STR_202
 12330  0136C4  0100               	movlb	0	; () banked
 12331  0136C6  6FB4               	movwf	(?_printf+3)& (0+255),b
 12332  0136C8  ECA0  F086         	call	_printf	;wreg free
 12333                           
 12334                           ;UART.c: 491: usart_str_1(',');
 12335  0136CC  0E2C               	movlw	44
 12336  0136CE  EC6F  F0D8         	call	_usart_str_1
 12337                           
 12338                           ;UART.c: 493: printf("%s","VFD RUN TIME ERROR COUNTER");
 12339  0136D2  0EF5               	movlw	low STR_2
 12340  0136D4  0100               	movlb	0	; () banked
 12341  0136D6  6FB1               	movwf	printf@f& (0+255),b
 12342  0136D8  0EFF               	movlw	high STR_2
 12343  0136DA  0100               	movlb	0	; () banked
 12344  0136DC  6FB2               	movwf	(printf@f+1)& (0+255),b
 12345  0136DE  0E1C               	movlw	low STR_204
 12346  0136E0  0100               	movlb	0	; () banked
 12347  0136E2  6FB3               	movwf	(?_printf+2)& (0+255),b
 12348  0136E4  0EFC               	movlw	high STR_204
 12349  0136E6  0100               	movlb	0	; () banked
 12350  0136E8  6FB4               	movwf	(?_printf+3)& (0+255),b
 12351  0136EA  ECA0  F086         	call	_printf	;wreg free
 12352                           
 12353                           ;UART.c: 494: usart_str_1(',');
 12354  0136EE  0E2C               	movlw	44
 12355  0136F0  EC6F  F0D8         	call	_usart_str_1
 12356                           
 12357                           ;UART.c: 496: printf("%s","ROTOR SLIP COUNTER");
 12358  0136F4  0EF5               	movlw	low STR_2
 12359  0136F6  0100               	movlb	0	; () banked
 12360  0136F8  6FB1               	movwf	printf@f& (0+255),b
 12361  0136FA  0EFF               	movlw	high STR_2
 12362  0136FC  0100               	movlb	0	; () banked
 12363  0136FE  6FB2               	movwf	(printf@f+1)& (0+255),b
 12364  013700  0E62               	movlw	low STR_206
 12365  013702  0100               	movlb	0	; () banked
 12366  013704  6FB3               	movwf	(?_printf+2)& (0+255),b
 12367  013706  0EFC               	movlw	high STR_206
 12368  013708  0100               	movlb	0	; () banked
 12369  01370A  6FB4               	movwf	(?_printf+3)& (0+255),b
 12370  01370C  ECA0  F086         	call	_printf	;wreg free
 12371                           
 12372                           ;UART.c: 497: usart_str_1(',');
 12373  013710  0E2C               	movlw	44
 12374  013712  EC6F  F0D8         	call	_usart_str_1
 12375                           
 12376                           ;UART.c: 499: printf("%s","MOTOR SLIP COUNTER");
 12377  013716  0EF5               	movlw	low STR_2
 12378  013718  0100               	movlb	0	; () banked
 12379  01371A  6FB1               	movwf	printf@f& (0+255),b
 12380  01371C  0EFF               	movlw	high STR_2
 12381  01371E  0100               	movlb	0	; () banked
 12382  013720  6FB2               	movwf	(printf@f+1)& (0+255),b
 12383  013722  0E4F               	movlw	low STR_208
 12384  013724  0100               	movlb	0	; () banked
 12385  013726  6FB3               	movwf	(?_printf+2)& (0+255),b
 12386  013728  0EFC               	movlw	high STR_208
 12387  01372A  0100               	movlb	0	; () banked
 12388  01372C  6FB4               	movwf	(?_printf+3)& (0+255),b
 12389  01372E  ECA0  F086         	call	_printf	;wreg free
 12390                           
 12391                           ;UART.c: 500: usart_str_1(',');
 12392  013732  0E2C               	movlw	44
 12393  013734  EC6F  F0D8         	call	_usart_str_1
 12394                           
 12395                           ;UART.c: 502: printf("%s","VFD TOP CT");
 12396  013738  0EF5               	movlw	low STR_2
 12397  01373A  0100               	movlb	0	; () banked
 12398  01373C  6FB1               	movwf	printf@f& (0+255),b
 12399  01373E  0EFF               	movlw	high STR_2
 12400  013740  0100               	movlb	0	; () banked
 12401  013742  6FB2               	movwf	(printf@f+1)& (0+255),b
 12402  013744  0E8E               	movlw	low STR_210
 12403  013746  0100               	movlb	0	; () banked
 12404  013748  6FB3               	movwf	(?_printf+2)& (0+255),b
 12405  01374A  0EFE               	movlw	high STR_210
 12406  01374C  0100               	movlb	0	; () banked
 12407  01374E  6FB4               	movwf	(?_printf+3)& (0+255),b
 12408  013750  ECA0  F086         	call	_printf	;wreg free
 12409                           
 12410                           ;UART.c: 503: usart_str_1(',');
 12411  013754  0E2C               	movlw	44
 12412  013756  EC6F  F0D8         	call	_usart_str_1
 12413                           
 12414                           ;UART.c: 505: printf("%s","VFD BOTTOM CT");
 12415  01375A  0EF5               	movlw	low STR_2
 12416  01375C  0100               	movlb	0	; () banked
 12417  01375E  6FB1               	movwf	printf@f& (0+255),b
 12418  013760  0EFF               	movlw	high STR_2
 12419  013762  0100               	movlb	0	; () banked
 12420  013764  6FB2               	movwf	(printf@f+1)& (0+255),b
 12421  013766  0EB5               	movlw	low STR_212
 12422  013768  0100               	movlb	0	; () banked
 12423  01376A  6FB3               	movwf	(?_printf+2)& (0+255),b
 12424  01376C  0EFD               	movlw	high STR_212
 12425  01376E  0100               	movlb	0	; () banked
 12426  013770  6FB4               	movwf	(?_printf+3)& (0+255),b
 12427  013772  ECA0  F086         	call	_printf	;wreg free
 12428                           
 12429                           ;UART.c: 506: usart_str_1(',');
 12430  013776  0E2C               	movlw	44
 12431  013778  EC6F  F0D8         	call	_usart_str_1
 12432                           
 12433                           ;UART.c: 508: printf("%s","LOGIC OTP");
 12434  01377C  0EF5               	movlw	low STR_2
 12435  01377E  0100               	movlb	0	; () banked
 12436  013780  6FB1               	movwf	printf@f& (0+255),b
 12437  013782  0EFF               	movlw	high STR_2
 12438  013784  0100               	movlb	0	; () banked
 12439  013786  6FB2               	movwf	(printf@f+1)& (0+255),b
 12440  013788  0ECD               	movlw	low STR_214
 12441  01378A  0100               	movlb	0	; () banked
 12442  01378C  6FB3               	movwf	(?_printf+2)& (0+255),b
 12443  01378E  0EFE               	movlw	high STR_214
 12444  013790  0100               	movlb	0	; () banked
 12445  013792  6FB4               	movwf	(?_printf+3)& (0+255),b
 12446  013794  ECA0  F086         	call	_printf	;wreg free
 12447                           
 12448                           ;UART.c: 509: usart_str_1(',');
 12449  013798  0E2C               	movlw	44
 12450  01379A  EC6F  F0D8         	call	_usart_str_1
 12451                           
 12452                           ;UART.c: 511: printf("%s","VFD OTP");
 12453  01379E  0EF5               	movlw	low STR_2
 12454  0137A0  0100               	movlb	0	; () banked
 12455  0137A2  6FB1               	movwf	printf@f& (0+255),b
 12456  0137A4  0EFF               	movlw	high STR_2
 12457  0137A6  0100               	movlb	0	; () banked
 12458  0137A8  6FB2               	movwf	(printf@f+1)& (0+255),b
 12459  0137AA  0E77               	movlw	low STR_216
 12460  0137AC  0100               	movlb	0	; () banked
 12461  0137AE  6FB3               	movwf	(?_printf+2)& (0+255),b
 12462  0137B0  0EFF               	movlw	high STR_216
 12463  0137B2  0100               	movlb	0	; () banked
 12464  0137B4  6FB4               	movwf	(?_printf+3)& (0+255),b
 12465  0137B6  ECA0  F086         	call	_printf	;wreg free
 12466                           
 12467                           ;UART.c: 512: usart_str_1(',');
 12468  0137BA  0E2C               	movlw	44
 12469  0137BC  EC6F  F0D8         	call	_usart_str_1
 12470                           
 12471                           ;UART.c: 514: printf("%s","GEN EEPROM FLAG");
 12472  0137C0  0EF5               	movlw	low STR_2
 12473  0137C2  0100               	movlb	0	; () banked
 12474  0137C4  6FB1               	movwf	printf@f& (0+255),b
 12475  0137C6  0EFF               	movlw	high STR_2
 12476  0137C8  0100               	movlb	0	; () banked
 12477  0137CA  6FB2               	movwf	(printf@f+1)& (0+255),b
 12478  0137CC  0E03               	movlw	low STR_218
 12479  0137CE  0100               	movlb	0	; () banked
 12480  0137D0  6FB3               	movwf	(?_printf+2)& (0+255),b
 12481  0137D2  0EFD               	movlw	high STR_218
 12482  0137D4  0100               	movlb	0	; () banked
 12483  0137D6  6FB4               	movwf	(?_printf+3)& (0+255),b
 12484  0137D8  ECA0  F086         	call	_printf	;wreg free
 12485                           
 12486                           ;UART.c: 515: usart_str_1(',');
 12487  0137DC  0E2C               	movlw	44
 12488  0137DE  EC6F  F0D8         	call	_usart_str_1
 12489                           
 12490                           ;UART.c: 517: printf("%s","PITCH EEPROM FLAG");
 12491  0137E2  0EF5               	movlw	low STR_2
 12492  0137E4  0100               	movlb	0	; () banked
 12493  0137E6  6FB1               	movwf	printf@f& (0+255),b
 12494  0137E8  0EFF               	movlw	high STR_2
 12495  0137EA  0100               	movlb	0	; () banked
 12496  0137EC  6FB2               	movwf	(printf@f+1)& (0+255),b
 12497  0137EE  0E87               	movlw	low STR_220
 12498  0137F0  0100               	movlb	0	; () banked
 12499  0137F2  6FB3               	movwf	(?_printf+2)& (0+255),b
 12500  0137F4  0EFC               	movlw	high STR_220
 12501  0137F6  0100               	movlb	0	; () banked
 12502  0137F8  6FB4               	movwf	(?_printf+3)& (0+255),b
 12503  0137FA  ECA0  F086         	call	_printf	;wreg free
 12504                           
 12505                           ;UART.c: 518: usart_str_1(',');
 12506  0137FE  0E2C               	movlw	44
 12507  013800  EC6F  F0D8         	call	_usart_str_1
 12508                           
 12509                           ;UART.c: 520: printf("%s","EEPROM ERROR TIME");
 12510  013804  0EF5               	movlw	low STR_2
 12511  013806  0100               	movlb	0	; () banked
 12512  013808  6FB1               	movwf	printf@f& (0+255),b
 12513  01380A  0EFF               	movlw	high STR_2
 12514  01380C  0100               	movlb	0	; () banked
 12515  01380E  6FB2               	movwf	(printf@f+1)& (0+255),b
 12516  013810  0E75               	movlw	low STR_222
 12517  013812  0100               	movlb	0	; () banked
 12518  013814  6FB3               	movwf	(?_printf+2)& (0+255),b
 12519  013816  0EFC               	movlw	high STR_222
 12520  013818  0100               	movlb	0	; () banked
 12521  01381A  6FB4               	movwf	(?_printf+3)& (0+255),b
 12522  01381C  ECA0  F086         	call	_printf	;wreg free
 12523                           
 12524                           ;UART.c: 521: usart_str_1(',');
 12525  013820  0E2C               	movlw	44
 12526  013822  EC6F  F0D8         	call	_usart_str_1
 12527                           
 12528                           ;UART.c: 523: printf("%s","EEPROM ERROR FLAG");
 12529  013826  0EF5               	movlw	low STR_2
 12530  013828  0100               	movlb	0	; () banked
 12531  01382A  6FB1               	movwf	printf@f& (0+255),b
 12532  01382C  0EFF               	movlw	high STR_2
 12533  01382E  0100               	movlb	0	; () banked
 12534  013830  6FB2               	movwf	(printf@f+1)& (0+255),b
 12535  013832  0E99               	movlw	low STR_224
 12536  013834  0100               	movlb	0	; () banked
 12537  013836  6FB3               	movwf	(?_printf+2)& (0+255),b
 12538  013838  0EFC               	movlw	high STR_224
 12539  01383A  0100               	movlb	0	; () banked
 12540  01383C  6FB4               	movwf	(?_printf+3)& (0+255),b
 12541  01383E  ECA0  F086         	call	_printf	;wreg free
 12542                           
 12543                           ;UART.c: 524: usart_str_1(',');
 12544  013842  0E2C               	movlw	44
 12545  013844  EC6F  F0D8         	call	_usart_str_1
 12546                           
 12547                           ;UART.c: 526: printf("%s","EEPROM LAST THREE ERROR");
 12548  013848  0EF5               	movlw	low STR_2
 12549  01384A  0100               	movlb	0	; () banked
 12550  01384C  6FB1               	movwf	printf@f& (0+255),b
 12551  01384E  0EFF               	movlw	high STR_2
 12552  013850  0100               	movlb	0	; () banked
 12553  013852  6FB2               	movwf	(printf@f+1)& (0+255),b
 12554  013854  0E37               	movlw	low STR_226
 12555  013856  0100               	movlb	0	; () banked
 12556  013858  6FB3               	movwf	(?_printf+2)& (0+255),b
 12557  01385A  0EFC               	movlw	high STR_226
 12558  01385C  0100               	movlb	0	; () banked
 12559  01385E  6FB4               	movwf	(?_printf+3)& (0+255),b
 12560  013860  ECA0  F086         	call	_printf	;wreg free
 12561                           
 12562                           ;UART.c: 527: usart_str_1(',');
 12563  013864  0E2C               	movlw	44
 12564  013866  EC6F  F0D8         	call	_usart_str_1
 12565                           
 12566                           ;UART.c: 529: printf("%s","VFD IO ERROR FLAG");
 12567  01386A  0EF5               	movlw	low STR_2
 12568  01386C  0100               	movlb	0	; () banked
 12569  01386E  6FB1               	movwf	printf@f& (0+255),b
 12570  013870  0EFF               	movlw	high STR_2
 12571  013872  0100               	movlb	0	; () banked
 12572  013874  6FB2               	movwf	(printf@f+1)& (0+255),b
 12573  013876  0EAB               	movlw	low STR_228
 12574  013878  0100               	movlb	0	; () banked
 12575  01387A  6FB3               	movwf	(?_printf+2)& (0+255),b
 12576  01387C  0EFC               	movlw	high STR_228
 12577  01387E  0100               	movlb	0	; () banked
 12578  013880  6FB4               	movwf	(?_printf+3)& (0+255),b
 12579  013882  ECA0  F086         	call	_printf	;wreg free
 12580                           
 12581                           ;UART.c: 530: usart_str_1(',');
 12582  013886  0E2C               	movlw	44
 12583  013888  EC6F  F0D8         	call	_usart_str_1
 12584                           
 12585                           ;UART.c: 532: printf("%s","WIND 1 TEMP FLAG");
 12586  01388C  0EF5               	movlw	low STR_2
 12587  01388E  0100               	movlb	0	; () banked
 12588  013890  6FB1               	movwf	printf@f& (0+255),b
 12589  013892  0EFF               	movlw	high STR_2
 12590  013894  0100               	movlb	0	; () banked
 12591  013896  6FB2               	movwf	(printf@f+1)& (0+255),b
 12592  013898  0EE1               	movlw	low STR_230
 12593  01389A  0100               	movlb	0	; () banked
 12594  01389C  6FB3               	movwf	(?_printf+2)& (0+255),b
 12595  01389E  0EFC               	movlw	high STR_230
 12596  0138A0  0100               	movlb	0	; () banked
 12597  0138A2  6FB4               	movwf	(?_printf+3)& (0+255),b
 12598  0138A4  ECA0  F086         	call	_printf	;wreg free
 12599                           
 12600                           ;UART.c: 533: usart_str_1(',');
 12601  0138A8  0E2C               	movlw	44
 12602  0138AA  EC6F  F0D8         	call	_usart_str_1
 12603                           
 12604                           ;UART.c: 535: printf("%s","WIND 2 TEMP FLAG");
 12605  0138AE  0EF5               	movlw	low STR_2
 12606  0138B0  0100               	movlb	0	; () banked
 12607  0138B2  6FB1               	movwf	printf@f& (0+255),b
 12608  0138B4  0EFF               	movlw	high STR_2
 12609  0138B6  0100               	movlb	0	; () banked
 12610  0138B8  6FB2               	movwf	(printf@f+1)& (0+255),b
 12611  0138BA  0EF2               	movlw	low STR_232
 12612  0138BC  0100               	movlb	0	; () banked
 12613  0138BE  6FB3               	movwf	(?_printf+2)& (0+255),b
 12614  0138C0  0EFC               	movlw	high STR_232
 12615  0138C2  0100               	movlb	0	; () banked
 12616  0138C4  6FB4               	movwf	(?_printf+3)& (0+255),b
 12617  0138C6  ECA0  F086         	call	_printf	;wreg free
 12618                           
 12619                           ;UART.c: 536: usart_str_1(',');
 12620  0138CA  0E2C               	movlw	44
 12621  0138CC  EC6F  F0D8         	call	_usart_str_1
 12622                           
 12623                           ;UART.c: 538: usart_str("\r");
 12624  0138D0  0EFD               	movlw	low STR_123
 12625  0138D2  0100               	movlb	0	; () banked
 12626  0138D4  6F60               	movwf	usart_str@str& (0+255),b
 12627  0138D6  0EFF               	movlw	high STR_123
 12628  0138D8  0100               	movlb	0	; () banked
 12629  0138DA  6F61               	movwf	(usart_str@str+1)& (0+255),b
 12630  0138DC  EC83  F0D6         	call	_usart_str	;wreg free
 12631                           
 12632                           ;UART.c: 539: usart_str("\n");
 12633  0138E0  0EFB               	movlw	low STR_124
 12634  0138E2  0100               	movlb	0	; () banked
 12635  0138E4  6F60               	movwf	usart_str@str& (0+255),b
 12636  0138E6  0EFF               	movlw	high STR_124
 12637  0138E8  0100               	movlb	0	; () banked
 12638  0138EA  6F61               	movwf	(usart_str@str+1)& (0+255),b
 12639  0138EC  EC83  F0D6         	call	_usart_str	;wreg free
 12640  0138F0  0012               	return		;funcret
 12641  0138F2                     __end_of_UART_Data_String:
 12642                           	opt stack 0
 12643                           tblptru	equ	0xFF8
 12644                           tblptrh	equ	0xFF7
 12645                           tblptrl	equ	0xFF6
 12646                           tablat	equ	0xFF5
 12647                           intcon	equ	0xFF2
 12648                           postinc0	equ	0xFEE
 12649                           wreg	equ	0xFE8
 12650                           postdec1	equ	0xFE5
 12651                           fsr1h	equ	0xFE2
 12652                           fsr1l	equ	0xFE1
 12653                           status	equ	0xFD8
 12654                           
 12655 ;; *************** function _usart_str_1 *****************
 12656 ;; Defined at:
 12657 ;;		line 586 in file "UART.c"
 12658 ;; Parameters:    Size  Location     Type
 12659 ;;  str             1    wreg     const unsigned char 
 12660 ;; Auto vars:     Size  Location     Type
 12661 ;;  str             1    0[BANK0 ] const unsigned char 
 12662 ;; Return value:  Size  Location     Type
 12663 ;;                  1    wreg      void 
 12664 ;; Registers used:
 12665 ;;		wreg
 12666 ;; Tracked objects:
 12667 ;;		On entry : 0/0
 12668 ;;		On exit  : 0/0
 12669 ;;		Unchanged: 0/0
 12670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12674 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12675 ;;Total ram usage:        1 bytes
 12676 ;; Hardware stack levels used:    1
 12677 ;; Hardware stack levels required when called:    3
 12678 ;; This function calls:
 12679 ;;		Nothing
 12680 ;; This function is called by:
 12681 ;;		_UART_Data
 12682 ;;		_UART_Data_String
 12683 ;; This function uses a non-reentrant model
 12684 ;;
 12685                           
 12686                           	psect	text21
 12687  01B0DE                     __ptext21:
 12688                           	opt stack 0
 12689  01B0DE                     _usart_str_1:
 12690                           	opt stack 25
 12691                           
 12692                           ;incstack = 0
 12693                           ;usart_str_1@str stored from wreg
 12694  01B0DE  0100               	movlb	0	; () banked
 12695  01B0E0  6F60               	movwf	usart_str_1@str& (0+255),b
 12696  01B0E2                     l2447:
 12697  01B0E2  A89E               	btfss	3998,4,c	;volatile
 12698  01B0E4  D7FE               	goto	l2447
 12699                           
 12700                           ;UART.c: 589: TXREG=(str);
 12701  01B0E6  C060  FFAD         	movff	usart_str_1@str,4013	;volatile
 12702  01B0EA  0012               	return		;funcret
 12703  01B0EC                     __end_of_usart_str_1:
 12704                           	opt stack 0
 12705                           tblptru	equ	0xFF8
 12706                           tblptrh	equ	0xFF7
 12707                           tblptrl	equ	0xFF6
 12708                           tablat	equ	0xFF5
 12709                           intcon	equ	0xFF2
 12710                           postinc0	equ	0xFEE
 12711                           wreg	equ	0xFE8
 12712                           postdec1	equ	0xFE5
 12713                           fsr1h	equ	0xFE2
 12714                           fsr1l	equ	0xFE1
 12715                           status	equ	0xFD8
 12716                           
 12717 ;; *************** function _usart_str *****************
 12718 ;; Defined at:
 12719 ;;		line 577 in file "UART.c"
 12720 ;; Parameters:    Size  Location     Type
 12721 ;;  str             2    0[BANK0 ] PTR const unsigned char 
 12722 ;;		 -> STR_234(2), STR_233(2), STR_126(2), STR_125(2), 
 12723 ;;		 -> STR_124(2), STR_123(2), 
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;		None
 12726 ;; Return value:  Size  Location     Type
 12727 ;;                  1    wreg      void 
 12728 ;; Registers used:
 12729 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12730 ;; Tracked objects:
 12731 ;;		On entry : 0/0
 12732 ;;		On exit  : 0/0
 12733 ;;		Unchanged: 0/0
 12734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12735 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12738 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12739 ;;Total ram usage:        2 bytes
 12740 ;; Hardware stack levels used:    1
 12741 ;; Hardware stack levels required when called:    3
 12742 ;; This function calls:
 12743 ;;		Nothing
 12744 ;; This function is called by:
 12745 ;;		_UART_Data
 12746 ;;		_UART_Data_String
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           	psect	text22
 12751  01AD06                     __ptext22:
 12752                           	opt stack 0
 12753  01AD06                     _usart_str:
 12754                           	opt stack 25
 12755                           
 12756                           ;UART.c: 579: while((*str)!='\0')
 12757                           
 12758                           ;incstack = 0
 12759  01AD06  D00E               	goto	l20538
 12760  01AD08                     l2440:
 12761  01AD08  A89E               	btfss	3998,4,c	;volatile
 12762  01AD0A  D7FE               	goto	l2440
 12763                           
 12764                           ;UART.c: 582: TXREG=(*str);
 12765  01AD0C  C060  FFF6         	movff	usart_str@str,tblptrl
 12766  01AD10  C061  FFF7         	movff	usart_str@str+1,tblptrh
 12767  01AD14                     	if	0	;tblptru may be non-zero
 12768  01AD14                     	endif
 12769  01AD14                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12770  01AD14  0E00               	movlw	low (__mediumconst shr (0+16))
 12771  01AD16  6EF8               	movwf	tblptru,c
 12772  01AD18                     	endif
 12773  01AD18  0008               	tblrd		*
 12774  01AD1A  CFF5 FFAD          	movff	tablat,4013	;volatile
 12775                           
 12776                           ;UART.c: 583: str++;
 12777  01AD1E  0100               	movlb	0	; () banked
 12778  01AD20  4B60               	infsnz	usart_str@str& (0+255),f,b
 12779  01AD22  2B61               	incf	(usart_str@str+1)& (0+255),f,b
 12780  01AD24                     l20538:
 12781  01AD24  C060  FFF6         	movff	usart_str@str,tblptrl
 12782  01AD28  C061  FFF7         	movff	usart_str@str+1,tblptrh
 12783  01AD2C                     	if	0	;tblptru may be non-zero
 12784  01AD2C                     	endif
 12785  01AD2C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12786  01AD2C  0E00               	movlw	low (__mediumconst shr (0+16))
 12787  01AD2E  6EF8               	movwf	tblptru,c
 12788  01AD30                     	endif
 12789  01AD30  0008               	tblrd		*
 12790  01AD32  50F5               	movf	tablat,w,c
 12791  01AD34  0900               	iorlw	0
 12792  01AD36  B4D8               	btfsc	status,2,c
 12793  01AD38  0012               	return	
 12794  01AD3A  D7E6               	goto	l2440
 12795  01AD3C                     __end_of_usart_str:
 12796                           	opt stack 0
 12797                           tblptru	equ	0xFF8
 12798                           tblptrh	equ	0xFF7
 12799                           tblptrl	equ	0xFF6
 12800                           tablat	equ	0xFF5
 12801                           intcon	equ	0xFF2
 12802                           postinc0	equ	0xFEE
 12803                           wreg	equ	0xFE8
 12804                           postdec1	equ	0xFE5
 12805                           fsr1h	equ	0xFE2
 12806                           fsr1l	equ	0xFE1
 12807                           status	equ	0xFD8
 12808                           
 12809 ;; *************** function _printf *****************
 12810 ;; Defined at:
 12811 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 12812 ;; Parameters:    Size  Location     Type
 12813 ;;  f               2   81[BANK0 ] PTR const unsigned char 
 12814 ;;		 -> STR_231(3), STR_229(3), STR_227(3), STR_225(3), 
 12815 ;;		 -> STR_223(3), STR_221(3), STR_219(3), STR_217(3), 
 12816 ;;		 -> STR_215(3), STR_213(3), STR_211(3), STR_209(3), 
 12817 ;;		 -> STR_207(3), STR_205(3), STR_203(3), STR_201(3), 
 12818 ;;		 -> STR_199(3), STR_197(3), STR_195(3), STR_193(3), 
 12819 ;;		 -> STR_191(3), STR_189(3), STR_187(3), STR_185(3), 
 12820 ;;		 -> STR_183(3), STR_181(3), STR_179(3), STR_177(3), 
 12821 ;;		 -> STR_175(3), STR_173(3), STR_171(3), STR_169(3), 
 12822 ;;		 -> STR_167(3), STR_165(3), STR_163(3), STR_161(3), 
 12823 ;;		 -> STR_159(3), STR_157(3), STR_155(3), STR_153(3), 
 12824 ;;		 -> STR_151(3), STR_149(3), STR_147(3), STR_145(3), 
 12825 ;;		 -> STR_143(3), STR_141(3), STR_139(3), STR_137(3), 
 12826 ;;		 -> STR_135(3), STR_133(3), STR_131(3), STR_129(3), 
 12827 ;;		 -> STR_127(3), STR_122(3), STR_121(3), STR_120(3), 
 12828 ;;		 -> STR_119(3), STR_118(3), STR_117(3), STR_116(3), 
 12829 ;;		 -> STR_115(3), STR_114(3), STR_113(3), STR_112(3), 
 12830 ;;		 -> STR_111(3), STR_110(3), STR_109(3), STR_108(3), 
 12831 ;;		 -> STR_107(3), STR_106(3), STR_105(3), STR_104(3), 
 12832 ;;		 -> STR_103(3), STR_102(3), STR_101(3), STR_100(3), 
 12833 ;;		 -> STR_99(3), STR_98(7), STR_97(3), STR_96(3), 
 12834 ;;		 -> STR_95(3), STR_94(3), STR_93(3), STR_92(3), 
 12835 ;;		 -> STR_90(3), STR_88(3), STR_86(3), STR_84(3), 
 12836 ;;		 -> STR_82(3), STR_80(3), STR_78(3), STR_76(3), 
 12837 ;;		 -> STR_74(3), STR_72(3), STR_70(3), STR_68(3), 
 12838 ;;		 -> STR_66(3), STR_64(3), STR_62(3), STR_60(3), 
 12839 ;;		 -> STR_58(3), STR_56(3), STR_54(3), STR_52(3), 
 12840 ;;		 -> STR_50(3), STR_48(3), STR_46(3), STR_44(3), 
 12841 ;;		 -> STR_42(3), STR_40(3), STR_38(3), STR_36(3), 
 12842 ;;		 -> STR_34(3), STR_32(3), STR_31(3), STR_30(3), 
 12843 ;;		 -> STR_29(3), STR_28(3), STR_27(7), STR_26(7), 
 12844 ;;		 -> STR_25(7), STR_24(7), STR_23(7), STR_22(7), 
 12845 ;;		 -> STR_21(7), STR_20(7), STR_19(7), STR_18(7), 
 12846 ;;		 -> STR_17(6), STR_16(6), STR_15(6), STR_14(7), 
 12847 ;;		 -> STR_13(3), STR_12(3), STR_11(7), STR_10(7), 
 12848 ;;		 -> STR_9(3), STR_8(7), STR_7(7), STR_6(7), 
 12849 ;;		 -> STR_5(7), STR_4(7), STR_2(3), STR_1(3), 
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;  val             4   15[BANK1 ] unsigned long 
 12852 ;;  tmpval          4   11[BANK1 ] struct .
 12853 ;;  fval            3   23[BANK1 ] struct .
 12854 ;;  prec            2   26[BANK1 ] int 
 12855 ;;  width           2   21[BANK1 ] int 
 12856 ;;  exp             2   19[BANK1 ] int 
 12857 ;;  flag            2    9[BANK1 ] unsigned short 
 12858 ;;  len             2    7[BANK1 ] unsigned int 
 12859 ;;  ap              2    5[BANK1 ] PTR void [1]
 12860 ;;		 -> ?_printf(2), 
 12861 ;;  cp              2    3[BANK1 ] PTR const unsigned char 
 12862 ;;		 -> STR_235(7), Hours_2(2), Mot_Frequency(3), Time_New(3), 
 12863 ;;		 -> wind_Time_1_2(3), Wind_Time_1(3), GRPM_Frequency(3), GRPM_Time_1(3), 
 12864 ;;		 -> TRPM_Frequency(3), TRPM_Time(3), STR_232(17), STR_230(17), 
 12865 ;;		 -> STR_228(18), STR_226(24), STR_224(18), STR_222(18), 
 12866 ;;		 -> STR_220(18), STR_218(16), STR_216(8), STR_214(10), 
 12867 ;;		 -> STR_212(14), STR_210(11), STR_208(19), STR_206(19), 
 12868 ;;		 -> STR_204(27), STR_202(13), STR_200(10), STR_198(13), 
 12869 ;;		 -> STR_196(12), STR_194(5), STR_192(5), STR_190(14), 
 12870 ;;		 -> STR_188(16), STR_186(9), STR_184(13), STR_182(10), 
 12871 ;;		 -> STR_180(12), STR_178(10), STR_176(15), STR_174(13), 
 12872 ;;		 -> STR_172(5), STR_170(4), STR_168(5), STR_166(3), 
 12873 ;;		 -> STR_164(10), STR_162(10), STR_160(10), STR_158(7), 
 12874 ;;		 -> STR_156(7), STR_154(7), STR_152(15), STR_150(15), 
 12875 ;;		 -> STR_148(7), STR_146(15), STR_144(15), STR_142(14), 
 12876 ;;		 -> STR_140(12), STR_138(11), STR_136(15), STR_134(9), 
 12877 ;;		 -> STR_132(13), STR_130(11), STR_128(10), STR_91(9), 
 12878 ;;		 -> STR_89(8), STR_87(7), STR_85(8), STR_83(13), 
 12879 ;;		 -> STR_81(11), STR_79(14), STR_77(12), STR_75(7), 
 12880 ;;		 -> STR_73(9), STR_71(11), STR_69(11), STR_67(10), 
 12881 ;;		 -> STR_65(10), STR_63(10), STR_61(7), STR_59(14), 
 12882 ;;		 -> STR_57(11), STR_55(11), STR_53(7), STR_51(8), 
 12883 ;;		 -> STR_49(13), STR_47(11), STR_45(5), STR_43(10), 
 12884 ;;		 -> STR_41(18), STR_39(9), STR_37(10), STR_35(11), 
 12885 ;;		 -> STR_33(9), Y_KW(3), KW(3), STR_3(18), 
 12886 ;;  c               1   28[BANK1 ] char 
 12887 ;;  d               1    0        unsigned char 
 12888 ;; Return value:  Size  Location     Type
 12889 ;;                  2   81[BANK0 ] int 
 12890 ;; Registers used:
 12891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12892 ;; Tracked objects:
 12893 ;;		On entry : 0/0
 12894 ;;		On exit  : 0/0
 12895 ;;		Unchanged: 0/0
 12896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12897 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12898 ;;      Locals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12899 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12900 ;;      Totals:         0      11      29       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12901 ;;Total ram usage:       40 bytes
 12902 ;; Hardware stack levels used:    1
 12903 ;; Hardware stack levels required when called:    6
 12904 ;; This function calls:
 12905 ;;		___awdiv
 12906 ;;		___ftadd
 12907 ;;		___ftge
 12908 ;;		___ftmul
 12909 ;;		___ftneg
 12910 ;;		___ftsub
 12911 ;;		___fttol
 12912 ;;		___lldiv
 12913 ;;		___llmod
 12914 ;;		___lltoft
 12915 ;;		___wmul
 12916 ;;		__div_to_l_
 12917 ;;		__tdiv_to_l_
 12918 ;;		_fround
 12919 ;;		_isdigit
 12920 ;;		_putch
 12921 ;;		_scale
 12922 ;; This function is called by:
 12923 ;;		_UART_Data
 12924 ;;		_UART_Data_String
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           	psect	text23
 12929  010D40                     __ptext23:
 12930                           	opt stack 0
 12931  010D40                     _printf:
 12932                           	opt stack 22
 12933                           
 12934                           ;doprnt.c: 466: va_list ap;
 12935                           ;doprnt.c: 499: signed char c;
 12936                           ;doprnt.c: 501: int width;
 12937                           ;doprnt.c: 504: int prec;
 12938                           ;doprnt.c: 508: unsigned short flag;
 12939                           ;doprnt.c: 515: char d;
 12940                           ;doprnt.c: 516: double fval;
 12941                           ;doprnt.c: 517: int exp;
 12942                           ;doprnt.c: 523: union {
 12943                           ;doprnt.c: 524: unsigned long vd;
 12944                           ;doprnt.c: 525: double integ;
 12945                           ;doprnt.c: 526: } tmpval;
 12946                           ;doprnt.c: 528: unsigned long val;
 12947                           ;doprnt.c: 529: unsigned len;
 12948                           ;doprnt.c: 530: const char * cp;
 12949                           ;doprnt.c: 533: *ap = __va_start();
 12950                           
 12951                           ;incstack = 0
 12952  010D40  0EB3               	movlw	low (?_printf+2)
 12953  010D42  0101               	movlb	1	; () banked
 12954  010D44  6FAF               	movwf	printf@ap& (0+255),b
 12955  010D46  0E00               	movlw	high (?_printf+2)
 12956  010D48  0101               	movlb	1	; () banked
 12957  010D4A  6FB0               	movwf	(printf@ap+1)& (0+255),b
 12958                           
 12959                           ;doprnt.c: 536: while(c = *f++) {
 12960  010D4C  EF00  F08D         	goto	l20526
 12961  010D50                     l20222:
 12962                           
 12963                           ; BSR set to: 1
 12964                           ;doprnt.c: 538: if(c != '%')
 12965  010D50  0E25               	movlw	37
 12966  010D52  0101               	movlb	1	; () banked
 12967  010D54  19C6               	xorwf	printf@c& (0+255),w,b
 12968  010D56  B4D8               	btfsc	status,2,c
 12969  010D58  D006               	goto	l20226
 12970                           
 12971                           ; BSR set to: 1
 12972                           ;doprnt.c: 540: {
 12973                           ;doprnt.c: 541: (putch(c) );
 12974  010D5A  0101               	movlb	1	; () banked
 12975  010D5C  51C6               	movf	printf@c& (0+255),w,b
 12976  010D5E  EC76  F0D8         	call	_putch
 12977                           
 12978                           ;doprnt.c: 542: continue;
 12979  010D62  EF00  F08D         	goto	l20526
 12980  010D66                     l20226:
 12981                           
 12982                           ;doprnt.c: 543: }
 12983                           ;doprnt.c: 546: width = 0;
 12984  010D66  0E00               	movlw	0
 12985  010D68  0101               	movlb	1	; () banked
 12986  010D6A  6FC0               	movwf	(printf@width+1)& (0+255),b
 12987  010D6C  0E00               	movlw	0
 12988  010D6E  6FBF               	movwf	printf@width& (0+255),b
 12989                           
 12990                           ;doprnt.c: 548: flag = 0;
 12991  010D70  0E00               	movlw	0
 12992  010D72  0101               	movlb	1	; () banked
 12993  010D74  6FB4               	movwf	(printf@flag+1)& (0+255),b
 12994  010D76  0E00               	movlw	0
 12995  010D78  6FB3               	movwf	printf@flag& (0+255),b
 12996                           
 12997                           ; BSR set to: 1
 12998                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12999  010D7A  C0B1  FFF6         	movff	printf@f,tblptrl
 13000  010D7E  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13001  010D82                     	if	0	;tblptru may be non-zero
 13002  010D82                     	endif
 13003  010D82                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13004  010D82  0E00               	movlw	low (__mediumconst shr (0+16))
 13005  010D84  6EF8               	movwf	tblptru,c
 13006  010D86                     	endif
 13007  010D86  0008               	tblrd		*
 13008  010D88  50F5               	movf	tablat,w,c
 13009  010D8A  EC8F  F0D7         	call	_isdigit
 13010  010D8E  A0D8               	btfss	status,0,c
 13011  010D90  D044               	goto	l20240
 13012                           
 13013                           ;doprnt.c: 598: width = 0;
 13014  010D92  0E00               	movlw	0
 13015  010D94  0101               	movlb	1	; () banked
 13016  010D96  6FC0               	movwf	(printf@width+1)& (0+255),b
 13017  010D98  0E00               	movlw	0
 13018  010D9A  6FBF               	movwf	printf@width& (0+255),b
 13019  010D9C                     l20232:
 13020                           
 13021                           ;doprnt.c: 600: width *= 10;
 13022  010D9C  C1BF  F06E         	movff	printf@width,___wmul@multiplier
 13023  010DA0  C1C0  F06F         	movff	printf@width+1,___wmul@multiplier+1
 13024  010DA4  0E00               	movlw	0
 13025  010DA6  0100               	movlb	0	; () banked
 13026  010DA8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13027  010DAA  0E0A               	movlw	10
 13028  010DAC  6F70               	movwf	___wmul@multiplicand& (0+255),b
 13029  010DAE  ECB9  F0D6         	call	___wmul	;wreg free
 13030  010DB2  C06E  F1BF         	movff	?___wmul,printf@width
 13031  010DB6  C06F  F1C0         	movff	?___wmul+1,printf@width+1
 13032                           
 13033                           ;doprnt.c: 601: width += *f++ - '0';
 13034  010DBA  0ED0               	movlw	208
 13035  010DBC  0100               	movlb	0	; () banked
 13036  010DBE  6FB6               	movwf	??_printf& (0+255),b
 13037  010DC0  0EFF               	movlw	255
 13038  010DC2  0100               	movlb	0	; () banked
 13039  010DC4  6FB7               	movwf	(??_printf+1)& (0+255),b
 13040  010DC6  C0B1  FFF6         	movff	printf@f,tblptrl
 13041  010DCA  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13042  010DCE                     	if	0	;tblptru may be non-zero
 13043  010DCE                     	endif
 13044  010DCE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13045  010DCE  0E00               	movlw	low (__mediumconst shr (0+16))
 13046  010DD0  6EF8               	movwf	tblptru,c
 13047  010DD2                     	endif
 13048  010DD2  0008               	tblrd		*
 13049  010DD4  50F5               	movf	tablat,w,c
 13050  010DD6  0100               	movlb	0	; () banked
 13051  010DD8  6FB8               	movwf	(??_printf+2)& (0+255),b
 13052  010DDA  6BB9               	clrf	(??_printf+3)& (0+255),b
 13053  010DDC  0100               	movlb	0	; () banked
 13054  010DDE  51B6               	movf	??_printf& (0+255),w,b
 13055  010DE0  0100               	movlb	0	; () banked
 13056  010DE2  27B8               	addwf	(??_printf+2)& (0+255),f,b
 13057  010DE4  0100               	movlb	0	; () banked
 13058  010DE6  51B7               	movf	(??_printf+1)& (0+255),w,b
 13059  010DE8  0100               	movlb	0	; () banked
 13060  010DEA  23B9               	addwfc	(??_printf+3)& (0+255),f,b
 13061  010DEC  0100               	movlb	0	; () banked
 13062  010DEE  51B8               	movf	(??_printf+2)& (0+255),w,b
 13063  010DF0  0101               	movlb	1	; () banked
 13064  010DF2  27BF               	addwf	printf@width& (0+255),f,b
 13065  010DF4  0100               	movlb	0	; () banked
 13066  010DF6  51B9               	movf	(??_printf+3)& (0+255),w,b
 13067  010DF8  0101               	movlb	1	; () banked
 13068  010DFA  23C0               	addwfc	(printf@width+1)& (0+255),f,b
 13069                           
 13070                           ; BSR set to: 1
 13071  010DFC  0100               	movlb	0	; () banked
 13072  010DFE  4BB1               	infsnz	printf@f& (0+255),f,b
 13073  010E00  2BB2               	incf	(printf@f+1)& (0+255),f,b
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13077  010E02  C0B1  FFF6         	movff	printf@f,tblptrl
 13078  010E06  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13079  010E0A                     	if	0	;tblptru may be non-zero
 13080  010E0A                     	endif
 13081  010E0A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13082  010E0A  0E00               	movlw	low (__mediumconst shr (0+16))
 13083  010E0C  6EF8               	movwf	tblptru,c
 13084  010E0E                     	endif
 13085  010E0E  0008               	tblrd		*
 13086  010E10  50F5               	movf	tablat,w,c
 13087  010E12  EC8F  F0D7         	call	_isdigit
 13088  010E16  B0D8               	btfsc	status,0,c
 13089  010E18  D7C1               	goto	l20232
 13090  010E1A                     l20240:
 13091                           
 13092                           ;doprnt.c: 608: }
 13093                           ;doprnt.c: 611: if(*f == '.') {
 13094  010E1A  C0B1  FFF6         	movff	printf@f,tblptrl
 13095  010E1E  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13096  010E22                     	if	0	;tblptru may be non-zero
 13097  010E22                     	endif
 13098  010E22                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13099  010E22  0E00               	movlw	low (__mediumconst shr (0+16))
 13100  010E24  6EF8               	movwf	tblptru,c
 13101  010E26                     	endif
 13102  010E26  0008               	tblrd		*
 13103  010E28  50F5               	movf	tablat,w,c
 13104  010E2A  0A2E               	xorlw	46
 13105  010E2C  A4D8               	btfss	status,2,c
 13106  010E2E  D03D               	goto	l20252
 13107                           
 13108                           ;doprnt.c: 612: flag |= 0x4000;
 13109  010E30  0101               	movlb	1	; () banked
 13110  010E32  8DB4               	bsf	(printf@flag+1)& (0+255),6,b
 13111                           
 13112                           ;doprnt.c: 613: f++;
 13113  010E34  0100               	movlb	0	; () banked
 13114  010E36  4BB1               	infsnz	printf@f& (0+255),f,b
 13115  010E38  2BB2               	incf	(printf@f+1)& (0+255),f,b
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;doprnt.c: 620: {
 13119                           ;doprnt.c: 621: prec = 0;
 13120  010E3A  0E00               	movlw	0
 13121  010E3C  0101               	movlb	1	; () banked
 13122  010E3E  6FC5               	movwf	(printf@prec+1)& (0+255),b
 13123  010E40  0E00               	movlw	0
 13124  010E42  6FC4               	movwf	printf@prec& (0+255),b
 13125                           
 13126                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 13127  010E44  D025               	goto	l20250
 13128  010E46                     l20246:
 13129                           
 13130                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 13131  010E46  C1C4  F06E         	movff	printf@prec,___wmul@multiplier
 13132  010E4A  C1C5  F06F         	movff	printf@prec+1,___wmul@multiplier+1
 13133  010E4E  0E00               	movlw	0
 13134  010E50  0100               	movlb	0	; () banked
 13135  010E52  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13136  010E54  0E0A               	movlw	10
 13137  010E56  6F70               	movwf	___wmul@multiplicand& (0+255),b
 13138  010E58  ECB9  F0D6         	call	___wmul	;wreg free
 13139  010E5C  C0B1  FFF6         	movff	printf@f,tblptrl
 13140  010E60  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13141  010E64                     	if	0	;tblptru may be non-zero
 13142  010E64                     	endif
 13143  010E64                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13144  010E64  0E00               	movlw	low (__mediumconst shr (0+16))
 13145  010E66  6EF8               	movwf	tblptru,c
 13146  010E68                     	endif
 13147  010E68  0008               	tblrd		*
 13148  010E6A  50F5               	movf	tablat,w,c
 13149  010E6C  0100               	movlb	0	; () banked
 13150  010E6E  276E               	addwf	?___wmul& (0+255),f,b
 13151  010E70  0E00               	movlw	0
 13152  010E72  0100               	movlb	0	; () banked
 13153  010E74  236F               	addwfc	(?___wmul+1)& (0+255),f,b
 13154  010E76  0ED0               	movlw	208
 13155  010E78  0100               	movlb	0	; () banked
 13156  010E7A  256E               	addwf	?___wmul& (0+255),w,b
 13157  010E7C  0101               	movlb	1	; () banked
 13158  010E7E  6FC4               	movwf	printf@prec& (0+255),b
 13159  010E80  0EFF               	movlw	255
 13160  010E82  0100               	movlb	0	; () banked
 13161  010E84  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 13162  010E86  0101               	movlb	1	; () banked
 13163  010E88  6FC5               	movwf	(printf@prec+1)& (0+255),b
 13164                           
 13165                           ; BSR set to: 1
 13166  010E8A  0100               	movlb	0	; () banked
 13167  010E8C  4BB1               	infsnz	printf@f& (0+255),f,b
 13168  010E8E  2BB2               	incf	(printf@f+1)& (0+255),f,b
 13169  010E90                     l20250:
 13170  010E90  C0B1  FFF6         	movff	printf@f,tblptrl
 13171  010E94  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13172  010E98                     	if	0	;tblptru may be non-zero
 13173  010E98                     	endif
 13174  010E98                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13175  010E98  0E00               	movlw	low (__mediumconst shr (0+16))
 13176  010E9A  6EF8               	movwf	tblptru,c
 13177  010E9C                     	endif
 13178  010E9C  0008               	tblrd		*
 13179  010E9E  50F5               	movf	tablat,w,c
 13180  010EA0  EC8F  F0D7         	call	_isdigit
 13181  010EA4  A0D8               	btfss	status,0,c
 13182  010EA6  D0B0               	goto	l20298
 13183  010EA8  D7CE               	goto	l20246
 13184  010EAA                     l20252:
 13185                           
 13186                           ;doprnt.c: 626: prec = 0;
 13187  010EAA  0E00               	movlw	0
 13188  010EAC  0101               	movlb	1	; () banked
 13189  010EAE  6FC5               	movwf	(printf@prec+1)& (0+255),b
 13190  010EB0  0E00               	movlw	0
 13191  010EB2  6FC4               	movwf	printf@prec& (0+255),b
 13192                           
 13193                           ; BSR set to: 1
 13194                           ;doprnt.c: 628: flag |= 0x1000;
 13195  010EB4  0101               	movlb	1	; () banked
 13196  010EB6  89B4               	bsf	(printf@flag+1)& (0+255),4,b
 13197                           
 13198                           ; BSR set to: 1
 13199                           ;doprnt.c: 630: }
 13200                           ;doprnt.c: 635: switch(c = *f++) {
 13201  010EB8  D0A7               	goto	l20298
 13202  010EBA                     l20256:
 13203                           
 13204                           ; BSR set to: 1
 13205                           ;doprnt.c: 663: flag |= 0x400;
 13206  010EBA  0101               	movlb	1	; () banked
 13207  010EBC  85B4               	bsf	(printf@flag+1)& (0+255),2,b
 13208                           
 13209                           ; BSR set to: 1
 13210                           ;doprnt.c: 698: case 'i':
 13211                           ;doprnt.c: 699: break;
 13212                           
 13213                           ; BSR set to: 1
 13214                           
 13215                           ;doprnt.c: 697: case 'd':
 13216                           
 13217                           ;doprnt.c: 664: break;
 13218  010EBE  D0C6               	goto	l20300
 13219  010EC0                     l20258:
 13220                           
 13221                           ; BSR set to: 1
 13222                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13223  010EC0  C1AF  FFD9         	movff	printf@ap,fsr2l
 13224  010EC4  C1B0  FFDA         	movff	printf@ap+1,fsr2h
 13225  010EC8  CFDE F1AD          	movff	postinc2,printf@cp
 13226  010ECC  CFDD F1AE          	movff	postdec2,printf@cp+1
 13227                           
 13228                           ; BSR set to: 1
 13229  010ED0  0E02               	movlw	2
 13230  010ED2  0101               	movlb	1	; () banked
 13231  010ED4  27AF               	addwf	printf@ap& (0+255),f,b
 13232  010ED6  0E00               	movlw	0
 13233  010ED8  23B0               	addwfc	(printf@ap+1)& (0+255),f,b
 13234                           
 13235                           ; BSR set to: 1
 13236                           ;doprnt.c: 740: if(!cp)
 13237  010EDA  0101               	movlb	1	; () banked
 13238  010EDC  51AD               	movf	printf@cp& (0+255),w,b
 13239  010EDE  0101               	movlb	1	; () banked
 13240  010EE0  11AE               	iorwf	(printf@cp+1)& (0+255),w,b
 13241  010EE2  A4D8               	btfss	status,2,c
 13242  010EE4  D006               	goto	l20266
 13243                           
 13244                           ; BSR set to: 1
 13245                           ;doprnt.c: 741: cp = "(null)";
 13246  010EE6  0E87               	movlw	low STR_235
 13247  010EE8  0101               	movlb	1	; () banked
 13248  010EEA  6FAD               	movwf	printf@cp& (0+255),b
 13249  010EEC  0EFF               	movlw	high STR_235
 13250  010EEE  0101               	movlb	1	; () banked
 13251  010EF0  6FAE               	movwf	(printf@cp+1)& (0+255),b
 13252  010EF2                     l20266:
 13253                           
 13254                           ; BSR set to: 1
 13255                           ;doprnt.c: 745: len = 0;
 13256  010EF2  0E00               	movlw	0
 13257  010EF4  0101               	movlb	1	; () banked
 13258  010EF6  6FB2               	movwf	(printf@len+1)& (0+255),b
 13259  010EF8  0E00               	movlw	0
 13260  010EFA  6FB1               	movwf	printf@len& (0+255),b
 13261                           
 13262                           ;doprnt.c: 746: while(cp[len])
 13263  010EFC  D003               	goto	l20270
 13264  010EFE                     l20268:
 13265                           
 13266                           ;doprnt.c: 747: len++;
 13267  010EFE  0101               	movlb	1	; () banked
 13268  010F00  4BB1               	infsnz	printf@len& (0+255),f,b
 13269  010F02  2BB2               	incf	(printf@len+1)& (0+255),f,b
 13270  010F04                     l20270:
 13271                           
 13272                           ; BSR set to: 1
 13273  010F04  0101               	movlb	1	; () banked
 13274  010F06  51B1               	movf	printf@len& (0+255),w,b
 13275  010F08  0101               	movlb	1	; () banked
 13276  010F0A  25AD               	addwf	printf@cp& (0+255),w,b
 13277  010F0C  0100               	movlb	0	; () banked
 13278  010F0E  6FB6               	movwf	??_printf& (0+255),b
 13279  010F10  0101               	movlb	1	; () banked
 13280  010F12  51B2               	movf	(printf@len+1)& (0+255),w,b
 13281  010F14  0101               	movlb	1	; () banked
 13282  010F16  21AE               	addwfc	(printf@cp+1)& (0+255),w,b
 13283  010F18  0100               	movlb	0	; () banked
 13284  010F1A  6FB7               	movwf	(??_printf+1)& (0+255),b
 13285  010F1C  C0B6  FFF6         	movff	??_printf,tblptrl
 13286  010F20  C0B7  FFF7         	movff	??_printf+1,tblptrh
 13287  010F24  0E00               	movlw	low (__mediumconst shr (0+16))
 13288  010F26  6EF8               	movwf	tblptru,c
 13289  010F28  0E0F               	movlw	(high __ramtop+-1)
 13290  010F2A  64F7               	cpfsgt	tblptrh,c
 13291  010F2C  D003               	bra	u13937
 13292  010F2E  0008               	tblrd		*
 13293  010F30  50F5               	movf	tablat,w,c
 13294  010F32  D005               	bra	u13930
 13295  010F34                     u13937:
 13296  010F34  CFF6 FFD9          	movff	tblptrl,fsr2l
 13297  010F38  CFF7 FFDA          	movff	tblptrh,fsr2h
 13298  010F3C  50DF               	movf	indf2,w,c
 13299  010F3E                     u13930:
 13300  010F3E  0900               	iorlw	0
 13301  010F40  A4D8               	btfss	status,2,c
 13302  010F42  D7DD               	goto	l20268
 13303                           
 13304                           ;doprnt.c: 753: if(prec && prec < len)
 13305  010F44  0101               	movlb	1	; () banked
 13306  010F46  51C4               	movf	printf@prec& (0+255),w,b
 13307  010F48  0101               	movlb	1	; () banked
 13308  010F4A  11C5               	iorwf	(printf@prec+1)& (0+255),w,b
 13309  010F4C  B4D8               	btfsc	status,2,c
 13310  010F4E  D00E               	goto	l20278
 13311                           
 13312                           ; BSR set to: 1
 13313  010F50  0101               	movlb	1	; () banked
 13314  010F52  51B1               	movf	printf@len& (0+255),w,b
 13315  010F54  0101               	movlb	1	; () banked
 13316  010F56  5DC4               	subwf	printf@prec& (0+255),w,b
 13317  010F58  0101               	movlb	1	; () banked
 13318  010F5A  51B2               	movf	(printf@len+1)& (0+255),w,b
 13319  010F5C  0101               	movlb	1	; () banked
 13320  010F5E  59C5               	subwfb	(printf@prec+1)& (0+255),w,b
 13321  010F60  B0D8               	btfsc	status,0,c
 13322  010F62  D004               	goto	l20278
 13323                           
 13324                           ; BSR set to: 1
 13325                           ;doprnt.c: 754: len = prec;
 13326  010F64  C1C4  F1B1         	movff	printf@prec,printf@len
 13327  010F68  C1C5  F1B2         	movff	printf@prec+1,printf@len+1
 13328  010F6C                     l20278:
 13329                           
 13330                           ; BSR set to: 1
 13331                           ;doprnt.c: 757: if(width > len)
 13332  010F6C  0101               	movlb	1	; () banked
 13333  010F6E  51BF               	movf	printf@width& (0+255),w,b
 13334  010F70  0101               	movlb	1	; () banked
 13335  010F72  5DB1               	subwf	printf@len& (0+255),w,b
 13336  010F74  0101               	movlb	1	; () banked
 13337  010F76  51C0               	movf	(printf@width+1)& (0+255),w,b
 13338  010F78  0101               	movlb	1	; () banked
 13339  010F7A  59B2               	subwfb	(printf@len+1)& (0+255),w,b
 13340  010F7C  B0D8               	btfsc	status,0,c
 13341  010F7E  D009               	goto	l20282
 13342                           
 13343                           ; BSR set to: 1
 13344                           ;doprnt.c: 758: width -= len;
 13345  010F80  0101               	movlb	1	; () banked
 13346  010F82  51B1               	movf	printf@len& (0+255),w,b
 13347  010F84  0101               	movlb	1	; () banked
 13348  010F86  5FBF               	subwf	printf@width& (0+255),f,b
 13349  010F88  0101               	movlb	1	; () banked
 13350  010F8A  51B2               	movf	(printf@len+1)& (0+255),w,b
 13351  010F8C  0101               	movlb	1	; () banked
 13352  010F8E  5BC0               	subwfb	(printf@width+1)& (0+255),f,b
 13353  010F90  D009               	goto	l20286
 13354  010F92                     l20282:
 13355                           
 13356                           ; BSR set to: 1
 13357                           ;doprnt.c: 759: else
 13358                           ;doprnt.c: 760: width = 0;
 13359  010F92  0E00               	movlw	0
 13360  010F94  0101               	movlb	1	; () banked
 13361  010F96  6FC0               	movwf	(printf@width+1)& (0+255),b
 13362  010F98  0E00               	movlw	0
 13363  010F9A  6FBF               	movwf	printf@width& (0+255),b
 13364                           
 13365                           ; BSR set to: 1
 13366                           ;doprnt.c: 764: while(width--)
 13367  010F9C  D003               	goto	l20286
 13368  010F9E                     l20284:
 13369                           
 13370                           ; BSR set to: 1
 13371                           ;doprnt.c: 765: (putch(' ') );
 13372  010F9E  0E20               	movlw	32
 13373  010FA0  EC76  F0D8         	call	_putch
 13374  010FA4                     l20286:
 13375  010FA4  0101               	movlb	1	; () banked
 13376  010FA6  07BF               	decf	printf@width& (0+255),f,b
 13377  010FA8  A0D8               	btfss	status,0,c
 13378  010FAA  07C0               	decf	(printf@width+1)& (0+255),f,b
 13379  010FAC  0101               	movlb	1	; () banked
 13380  010FAE  29BF               	incf	printf@width& (0+255),w,b
 13381  010FB0  E1F6               	bnz	l20284
 13382  010FB2  0101               	movlb	1	; () banked
 13383  010FB4  29C0               	incf	(printf@width+1)& (0+255),w,b
 13384  010FB6  B4D8               	btfsc	status,2,c
 13385  010FB8  D017               	goto	l20292
 13386  010FBA  D7F1               	goto	l20284
 13387  010FBC                     l20288:
 13388                           
 13389                           ; BSR set to: 1
 13390                           ;doprnt.c: 768: (putch(*cp++) );
 13391  010FBC  C1AD  FFF6         	movff	printf@cp,tblptrl
 13392  010FC0  C1AE  FFF7         	movff	printf@cp+1,tblptrh
 13393  010FC4  0E00               	movlw	low (__mediumconst shr (0+16))
 13394  010FC6  6EF8               	movwf	tblptru,c
 13395  010FC8  0E0F               	movlw	(high __ramtop+-1)
 13396  010FCA  64F7               	cpfsgt	tblptrh,c
 13397  010FCC  D003               	bra	u13997
 13398  010FCE  0008               	tblrd		*
 13399  010FD0  50F5               	movf	tablat,w,c
 13400  010FD2  D005               	bra	u13990
 13401  010FD4                     u13997:
 13402  010FD4  CFF6 FFD9          	movff	tblptrl,fsr2l
 13403  010FD8  CFF7 FFDA          	movff	tblptrh,fsr2h
 13404  010FDC  50DF               	movf	indf2,w,c
 13405  010FDE                     u13990:
 13406  010FDE  EC76  F0D8         	call	_putch
 13407  010FE2  0101               	movlb	1	; () banked
 13408  010FE4  4BAD               	infsnz	printf@cp& (0+255),f,b
 13409  010FE6  2BAE               	incf	(printf@cp+1)& (0+255),f,b
 13410  010FE8                     l20292:
 13411                           
 13412                           ; BSR set to: 1
 13413  010FE8  0101               	movlb	1	; () banked
 13414  010FEA  07B1               	decf	printf@len& (0+255),f,b
 13415  010FEC  A0D8               	btfss	status,0,c
 13416  010FEE  07B2               	decf	(printf@len+1)& (0+255),f,b
 13417  010FF0  0101               	movlb	1	; () banked
 13418  010FF2  29B1               	incf	printf@len& (0+255),w,b
 13419  010FF4  E1E3               	bnz	l20288
 13420  010FF6  0101               	movlb	1	; () banked
 13421  010FF8  29B2               	incf	(printf@len+1)& (0+255),w,b
 13422  010FFA  B4D8               	btfsc	status,2,c
 13423  010FFC  EF00  F08D         	goto	l20526
 13424  011000  D7DD               	goto	l20288
 13425  011002                     l20294:
 13426                           
 13427                           ; BSR set to: 1
 13428                           ;doprnt.c: 818: flag |= 0x40;
 13429  011002  0101               	movlb	1	; () banked
 13430  011004  8DB3               	bsf	printf@flag& (0+255),6,b
 13431                           
 13432                           ; BSR set to: 1
 13433                           ;doprnt.c: 822: }
 13434                           
 13435                           ;doprnt.c: 819: break;
 13436  011006  D022               	goto	l20300
 13437  011008                     l20298:
 13438  011008  C0B1  FFF6         	movff	printf@f,tblptrl
 13439  01100C  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13440  011010  0100               	movlb	0	; () banked
 13441  011012  4BB1               	infsnz	printf@f& (0+255),f,b
 13442  011014  2BB2               	incf	(printf@f+1)& (0+255),f,b
 13443  011016                     	if	0	;tblptru may be non-zero
 13444  011016                     	endif
 13445  011016                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13446  011016  0E00               	movlw	low (__mediumconst shr (0+16))
 13447  011018  6EF8               	movwf	tblptru,c
 13448  01101A                     	endif
 13449  01101A  0008               	tblrd		*
 13450  01101C  CFF5 F1C6          	movff	tablat,printf@c
 13451  011020  0101               	movlb	1	; () banked
 13452  011022  51C6               	movf	printf@c& (0+255),w,b
 13453                           
 13454                           ; Switch size 1, requested type "space"
 13455                           ; Number of cases is 6, Range of values is 0 to 117
 13456                           ; switch strategies available:
 13457                           ; Name         Instructions Cycles
 13458                           ; simple_byte           19    10 (average)
 13459                           ;	Chosen strategy is simple_byte
 13460  011024  0A00               	xorlw	0	; case 0
 13461  011026  B4D8               	btfsc	status,2,c
 13462  011028  0012               	return	
 13463  01102A  0A64               	xorlw	100	; case 100
 13464  01102C  B4D8               	btfsc	status,2,c
 13465  01102E  D00E               	goto	l20300
 13466  011030  0A02               	xorlw	2	; case 102
 13467  011032  B4D8               	btfsc	status,2,c
 13468  011034  D742               	goto	l20256
 13469  011036  0A0F               	xorlw	15	; case 105
 13470  011038  B4D8               	btfsc	status,2,c
 13471  01103A  D008               	goto	l20300
 13472  01103C  0A1A               	xorlw	26	; case 115
 13473  01103E  B4D8               	btfsc	status,2,c
 13474  011040  D73F               	goto	l20258
 13475  011042  0A06               	xorlw	6	; case 117
 13476  011044  B4D8               	btfsc	status,2,c
 13477  011046  D7DD               	goto	l20294
 13478  011048  EF00  F08D         	goto	l20526
 13479  01104C                     l20300:
 13480                           
 13481                           ; BSR set to: 1
 13482                           ;doprnt.c: 825: if(flag & (0x700)) {
 13483  01104C  0E07               	movlw	7
 13484  01104E  0101               	movlb	1	; () banked
 13485  011050  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 13486  011052  B4D8               	btfsc	status,2,c
 13487  011054  D35D               	goto	l10317
 13488                           
 13489                           ; BSR set to: 1
 13490                           ;doprnt.c: 827: if(flag & 0x1000)
 13491  011056  0101               	movlb	1	; () banked
 13492  011058  A9B4               	btfss	(printf@flag+1)& (0+255),4,b
 13493  01105A  D005               	goto	l20306
 13494                           
 13495                           ; BSR set to: 1
 13496                           ;doprnt.c: 829: prec = 6;
 13497  01105C  0E00               	movlw	0
 13498  01105E  0101               	movlb	1	; () banked
 13499  011060  6FC5               	movwf	(printf@prec+1)& (0+255),b
 13500  011062  0E06               	movlw	6
 13501  011064  6FC4               	movwf	printf@prec& (0+255),b
 13502  011066                     l20306:
 13503                           
 13504                           ; BSR set to: 1
 13505                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13506  011066  C1AF  FFD9         	movff	printf@ap,fsr2l
 13507  01106A  C1B0  FFDA         	movff	printf@ap+1,fsr2h
 13508  01106E  CFDE F1C1          	movff	postinc2,printf@fval
 13509  011072  CFDE F1C2          	movff	postinc2,printf@fval+1
 13510  011076  CFDD F1C3          	movff	postdec2,printf@fval+2
 13511                           
 13512                           ; BSR set to: 1
 13513  01107A  0E03               	movlw	3
 13514  01107C  0101               	movlb	1	; () banked
 13515  01107E  27AF               	addwf	printf@ap& (0+255),f,b
 13516  011080  0E00               	movlw	0
 13517  011082  23B0               	addwfc	(printf@ap+1)& (0+255),f,b
 13518                           
 13519                           ; BSR set to: 1
 13520                           ;doprnt.c: 831: if(fval < 0.0) {
 13521  011084  0101               	movlb	1	; () banked
 13522  011086  AFC3               	btfss	(printf@fval+2)& (0+255),7,b
 13523  011088  D011               	goto	l20316
 13524                           
 13525                           ; BSR set to: 1
 13526                           ;doprnt.c: 832: fval = -fval;
 13527  01108A  C1C1  F083         	movff	printf@fval,___ftneg@f1
 13528  01108E  C1C2  F084         	movff	printf@fval+1,___ftneg@f1+1
 13529  011092  C1C3  F085         	movff	printf@fval+2,___ftneg@f1+2
 13530  011096  EC1D  F0D7         	call	___ftneg	;wreg free
 13531  01109A  C083  F1C1         	movff	?___ftneg,printf@fval
 13532  01109E  C084  F1C2         	movff	?___ftneg+1,printf@fval+1
 13533  0110A2  C085  F1C3         	movff	?___ftneg+2,printf@fval+2
 13534                           
 13535                           ;doprnt.c: 833: flag |= 0x03;
 13536  0110A6  0E03               	movlw	3
 13537  0110A8  0101               	movlb	1	; () banked
 13538  0110AA  13B3               	iorwf	printf@flag& (0+255),f,b
 13539  0110AC                     l20316:
 13540                           
 13541                           ; BSR set to: 1
 13542                           ;doprnt.c: 834: }
 13543                           ;doprnt.c: 835: exp = 0;
 13544  0110AC  0E00               	movlw	0
 13545  0110AE  0101               	movlb	1	; () banked
 13546  0110B0  6FBE               	movwf	(printf@exp+1)& (0+255),b
 13547  0110B2  0E00               	movlw	0
 13548  0110B4  6FBD               	movwf	printf@exp& (0+255),b
 13549                           
 13550                           ; BSR set to: 1
 13551                           ;doprnt.c: 836: if( fval!=0) {
 13552  0110B6  0101               	movlb	1	; () banked
 13553  0110B8  51C1               	movf	printf@fval& (0+255),w,b
 13554  0110BA  0101               	movlb	1	; () banked
 13555  0110BC  11C2               	iorwf	(printf@fval+1)& (0+255),w,b
 13556  0110BE  0101               	movlb	1	; () banked
 13557  0110C0  11C3               	iorwf	(printf@fval+2)& (0+255),w,b
 13558  0110C2  B4D8               	btfsc	status,2,c
 13559  0110C4  D09B               	goto	l20344
 13560                           
 13561                           ; BSR set to: 1
 13562                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13563  0110C6  0E82               	movlw	130
 13564  0110C8  0100               	movlb	0	; () banked
 13565  0110CA  6FB6               	movwf	??_printf& (0+255),b
 13566  0110CC  0EFF               	movlw	255
 13567  0110CE  0100               	movlb	0	; () banked
 13568  0110D0  6FB7               	movwf	(??_printf+1)& (0+255),b
 13569  0110D2  C1C1  F0B8         	movff	printf@fval,??_printf+2
 13570  0110D6  C1C2  F0B9         	movff	printf@fval+1,??_printf+3
 13571  0110DA  C1C3  F0BA         	movff	printf@fval+2,??_printf+4
 13572  0110DE  C1C4  F0BB         	movff	printf@fval+3,??_printf+5
 13573  0110E2  0E10               	movlw	16
 13574  0110E4  D006               	goto	u14050
 13575  0110E6                     u14055:
 13576  0110E6  0100               	movlb	0	; () banked
 13577  0110E8  90D8               	bcf	status,0,c
 13578  0110EA  33BB               	rrcf	(??_printf+5)& (0+255),f,b
 13579  0110EC  33BA               	rrcf	(??_printf+4)& (0+255),f,b
 13580  0110EE  33B9               	rrcf	(??_printf+3)& (0+255),f,b
 13581  0110F0  33B8               	rrcf	(??_printf+2)& (0+255),f,b
 13582  0110F2                     u14050:
 13583  0110F2  2EE8               	decfsz	wreg,f,c
 13584  0110F4  D7F8               	goto	u14055
 13585  0110F6  0100               	movlb	0	; () banked
 13586  0110F8  51B8               	movf	(??_printf+2)& (0+255),w,b
 13587  0110FA  0100               	movlb	0	; () banked
 13588  0110FC  25B6               	addwf	??_printf& (0+255),w,b
 13589  0110FE  0101               	movlb	1	; () banked
 13590  011100  6FBD               	movwf	printf@exp& (0+255),b
 13591  011102  0E00               	movlw	0
 13592  011104  0100               	movlb	0	; () banked
 13593  011106  21B7               	addwfc	(??_printf+1)& (0+255),w,b
 13594  011108  0101               	movlb	1	; () banked
 13595  01110A  6FBE               	movwf	(printf@exp+1)& (0+255),b
 13596                           
 13597                           ; BSR set to: 1
 13598                           ;doprnt.c: 838: exp--;
 13599  01110C  0101               	movlb	1	; () banked
 13600  01110E  07BD               	decf	printf@exp& (0+255),f,b
 13601  011110  A0D8               	btfss	status,0,c
 13602  011112  07BE               	decf	(printf@exp+1)& (0+255),f,b
 13603                           
 13604                           ; BSR set to: 1
 13605                           ;doprnt.c: 839: exp *= 3;
 13606  011114  C1BD  F06E         	movff	printf@exp,___wmul@multiplier
 13607  011118  C1BE  F06F         	movff	printf@exp+1,___wmul@multiplier+1
 13608  01111C  0E00               	movlw	0
 13609  01111E  0100               	movlb	0	; () banked
 13610  011120  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13611  011122  0E03               	movlw	3
 13612  011124  6F70               	movwf	___wmul@multiplicand& (0+255),b
 13613  011126  ECB9  F0D6         	call	___wmul	;wreg free
 13614  01112A  C06E  F1BD         	movff	?___wmul,printf@exp
 13615  01112E  C06F  F1BE         	movff	?___wmul+1,printf@exp+1
 13616                           
 13617                           ;doprnt.c: 840: exp /= 10;
 13618  011132  C1BD  F066         	movff	printf@exp,___awdiv@dividend
 13619  011136  C1BE  F067         	movff	printf@exp+1,___awdiv@dividend+1
 13620  01113A  0E00               	movlw	0
 13621  01113C  0100               	movlb	0	; () banked
 13622  01113E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 13623  011140  0E0A               	movlw	10
 13624  011142  6F68               	movwf	___awdiv@divisor& (0+255),b
 13625  011144  EC70  F0CC         	call	___awdiv	;wreg free
 13626  011148  C066  F1BD         	movff	?___awdiv,printf@exp
 13627  01114C  C067  F1BE         	movff	?___awdiv+1,printf@exp+1
 13628                           
 13629                           ;doprnt.c: 841: if(exp < 0)
 13630  011150  0101               	movlb	1	; () banked
 13631  011152  AFBE               	btfss	(printf@exp+1)& (0+255),7,b
 13632  011154  D004               	goto	l20332
 13633                           
 13634                           ; BSR set to: 1
 13635                           ;doprnt.c: 842: exp--;
 13636  011156  0101               	movlb	1	; () banked
 13637  011158  07BD               	decf	printf@exp& (0+255),f,b
 13638  01115A  A0D8               	btfss	status,0,c
 13639  01115C  07BE               	decf	(printf@exp+1)& (0+255),f,b
 13640  01115E                     l20332:
 13641                           
 13642                           ; BSR set to: 1
 13643                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13644  01115E  0101               	movlb	1	; () banked
 13645  011160  51BD               	movf	printf@exp& (0+255),w,b
 13646  011162  0800               	sublw	0
 13647  011164  EC32  F09F         	call	_scale
 13648  011168  C083  F1B5         	movff	?_scale,printf@tmpval
 13649  01116C  C084  F1B6         	movff	?_scale+1,printf@tmpval+1
 13650  011170  C085  F1B7         	movff	?_scale+2,printf@tmpval+2
 13651                           
 13652                           ;doprnt.c: 847: tmpval.integ *= fval;
 13653  011174  C1B5  F074         	movff	printf@tmpval,___ftmul@f1
 13654  011178  C1B6  F075         	movff	printf@tmpval+1,___ftmul@f1+1
 13655  01117C  C1B7  F076         	movff	printf@tmpval+2,___ftmul@f1+2
 13656  011180  C1C1  F077         	movff	printf@fval,___ftmul@f2
 13657  011184  C1C2  F078         	movff	printf@fval+1,___ftmul@f2+1
 13658  011188  C1C3  F079         	movff	printf@fval+2,___ftmul@f2+2
 13659  01118C  EC00  F0C1         	call	___ftmul	;wreg free
 13660  011190  C074  F1B5         	movff	?___ftmul,printf@tmpval
 13661  011194  C075  F1B6         	movff	?___ftmul+1,printf@tmpval+1
 13662  011198  C076  F1B7         	movff	?___ftmul+2,printf@tmpval+2
 13663                           
 13664                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13665  01119C  C1B5  F099         	movff	printf@tmpval,___ftge@ff1
 13666  0111A0  C1B6  F09A         	movff	printf@tmpval+1,___ftge@ff1+1
 13667  0111A4  C1B7  F09B         	movff	printf@tmpval+2,___ftge@ff1+2
 13668  0111A8  0E00               	movlw	0
 13669  0111AA  0100               	movlb	0	; () banked
 13670  0111AC  6F9C               	movwf	___ftge@ff2& (0+255),b
 13671  0111AE  0E80               	movlw	128
 13672  0111B0  0100               	movlb	0	; () banked
 13673  0111B2  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 13674  0111B4  0E3F               	movlw	63
 13675  0111B6  0100               	movlb	0	; () banked
 13676  0111B8  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 13677  0111BA  EC4B  F0CB         	call	___ftge	;wreg free
 13678  0111BE  0100               	movlb	0	; () banked
 13679  0111C0  B0D8               	btfsc	status,0,c
 13680  0111C2  D005               	goto	l20340
 13681                           
 13682                           ; BSR set to: 0
 13683                           ;doprnt.c: 849: exp--;
 13684  0111C4  0101               	movlb	1	; () banked
 13685  0111C6  07BD               	decf	printf@exp& (0+255),f,b
 13686  0111C8  A0D8               	btfss	status,0,c
 13687  0111CA  07BE               	decf	(printf@exp+1)& (0+255),f,b
 13688  0111CC  D017               	goto	l20344
 13689  0111CE                     l20340:
 13690                           
 13691                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13692  0111CE  C1B5  F099         	movff	printf@tmpval,___ftge@ff1
 13693  0111D2  C1B6  F09A         	movff	printf@tmpval+1,___ftge@ff1+1
 13694  0111D6  C1B7  F09B         	movff	printf@tmpval+2,___ftge@ff1+2
 13695  0111DA  0E00               	movlw	0
 13696  0111DC  0100               	movlb	0	; () banked
 13697  0111DE  6F9C               	movwf	___ftge@ff2& (0+255),b
 13698  0111E0  0E20               	movlw	32
 13699  0111E2  0100               	movlb	0	; () banked
 13700  0111E4  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 13701  0111E6  0E41               	movlw	65
 13702  0111E8  0100               	movlb	0	; () banked
 13703  0111EA  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 13704  0111EC  EC4B  F0CB         	call	___ftge	;wreg free
 13705  0111F0  0100               	movlb	0	; () banked
 13706  0111F2  A0D8               	btfss	status,0,c
 13707  0111F4  D003               	goto	l20344
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;doprnt.c: 851: exp++;
 13711  0111F6  0101               	movlb	1	; () banked
 13712  0111F8  4BBD               	infsnz	printf@exp& (0+255),f,b
 13713  0111FA  2BBE               	incf	(printf@exp+1)& (0+255),f,b
 13714  0111FC                     l20344:
 13715                           
 13716                           ;doprnt.c: 852: }
 13717                           ;doprnt.c: 1112: if(prec <= 12)
 13718  0111FC  0101               	movlb	1	; () banked
 13719  0111FE  BFC5               	btfsc	(printf@prec+1)& (0+255),7,b
 13720  011200  D008               	goto	l20346
 13721  011202  0101               	movlb	1	; () banked
 13722  011204  51C5               	movf	(printf@prec+1)& (0+255),w,b
 13723  011206  E11D               	bnz	l20348
 13724  011208  0E0D               	movlw	13
 13725  01120A  0101               	movlb	1	; () banked
 13726  01120C  5DC4               	subwf	printf@prec& (0+255),w,b
 13727  01120E  B0D8               	btfsc	status,0,c
 13728  011210  D018               	goto	l20348
 13729  011212                     l20346:
 13730                           
 13731                           ; BSR set to: 1
 13732                           ;doprnt.c: 1113: fval += fround(prec);
 13733  011212  C1C1  F08D         	movff	printf@fval,___ftadd@f1
 13734  011216  C1C2  F08E         	movff	printf@fval+1,___ftadd@f1+1
 13735  01121A  C1C3  F08F         	movff	printf@fval+2,___ftadd@f1+2
 13736  01121E  0101               	movlb	1	; () banked
 13737  011220  51C4               	movf	printf@prec& (0+255),w,b
 13738  011222  EC63  F0AC         	call	_fround
 13739  011226  C083  F090         	movff	?_fround,___ftadd@f2
 13740  01122A  C084  F091         	movff	?_fround+1,___ftadd@f2+1
 13741  01122E  C085  F092         	movff	?_fround+2,___ftadd@f2+2
 13742  011232  ECBE  F0B2         	call	___ftadd	;wreg free
 13743  011236  C08D  F1C1         	movff	?___ftadd,printf@fval
 13744  01123A  C08E  F1C2         	movff	?___ftadd+1,printf@fval+1
 13745  01123E  C08F  F1C3         	movff	?___ftadd+2,printf@fval+2
 13746  011242                     l20348:
 13747                           
 13748                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13749  011242  0101               	movlb	1	; () banked
 13750  011244  BFBE               	btfsc	(printf@exp+1)& (0+255),7,b
 13751  011246  D008               	goto	l20350
 13752  011248  0101               	movlb	1	; () banked
 13753  01124A  51BE               	movf	(printf@exp+1)& (0+255),w,b
 13754  01124C  E12A               	bnz	l20356
 13755  01124E  0E0A               	movlw	10
 13756  011250  0101               	movlb	1	; () banked
 13757  011252  5DBD               	subwf	printf@exp& (0+255),w,b
 13758  011254  B0D8               	btfsc	status,0,c
 13759  011256  D025               	goto	l20356
 13760  011258                     l20350:
 13761                           
 13762                           ; BSR set to: 1
 13763  011258  0101               	movlb	1	; () banked
 13764  01125A  51C1               	movf	printf@fval& (0+255),w,b
 13765  01125C  0101               	movlb	1	; () banked
 13766  01125E  11C2               	iorwf	(printf@fval+1)& (0+255),w,b
 13767  011260  0101               	movlb	1	; () banked
 13768  011262  11C3               	iorwf	(printf@fval+2)& (0+255),w,b
 13769  011264  B4D8               	btfsc	status,2,c
 13770  011266  D063               	goto	l20370
 13771                           
 13772                           ; BSR set to: 1
 13773  011268  C1C1  F08A         	movff	printf@fval,___fttol@f1
 13774  01126C  C1C2  F08B         	movff	printf@fval+1,___fttol@f1+1
 13775  011270  C1C3  F08C         	movff	printf@fval+2,___fttol@f1+2
 13776  011274  EC55  F0C2         	call	___fttol	;wreg free
 13777  011278  0100               	movlb	0	; () banked
 13778  01127A  518A               	movf	?___fttol& (0+255),w,b
 13779  01127C  0100               	movlb	0	; () banked
 13780  01127E  118B               	iorwf	(?___fttol+1)& (0+255),w,b
 13781  011280  0100               	movlb	0	; () banked
 13782  011282  118C               	iorwf	(?___fttol+2)& (0+255),w,b
 13783  011284  0100               	movlb	0	; () banked
 13784  011286  118D               	iorwf	(?___fttol+3)& (0+255),w,b
 13785  011288  A4D8               	btfss	status,2,c
 13786  01128A  D051               	goto	l20370
 13787                           
 13788                           ; BSR set to: 0
 13789  01128C  0101               	movlb	1	; () banked
 13790  01128E  BFBE               	btfsc	(printf@exp+1)& (0+255),7,b
 13791  011290  D04E               	goto	l20370
 13792  011292  0101               	movlb	1	; () banked
 13793  011294  51BE               	movf	(printf@exp+1)& (0+255),w,b
 13794  011296  E105               	bnz	l20356
 13795  011298  0E02               	movlw	2
 13796  01129A  0101               	movlb	1	; () banked
 13797  01129C  5DBD               	subwf	printf@exp& (0+255),w,b
 13798  01129E  A0D8               	btfss	status,0,c
 13799  0112A0  D046               	goto	l20370
 13800  0112A2                     l20356:
 13801                           
 13802                           ; BSR set to: 1
 13803                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13804  0112A2  C1B5  F099         	movff	printf@tmpval,___ftge@ff1
 13805  0112A6  C1B6  F09A         	movff	printf@tmpval+1,___ftge@ff1+1
 13806  0112AA  C1B7  F09B         	movff	printf@tmpval+2,___ftge@ff1+2
 13807  0112AE  0E70               	movlw	112
 13808  0112B0  0100               	movlb	0	; () banked
 13809  0112B2  6F9C               	movwf	___ftge@ff2& (0+255),b
 13810  0112B4  0E89               	movlw	137
 13811  0112B6  0100               	movlb	0	; () banked
 13812  0112B8  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 13813  0112BA  0E40               	movlw	64
 13814  0112BC  0100               	movlb	0	; () banked
 13815  0112BE  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 13816  0112C0  EC4B  F0CB         	call	___ftge	;wreg free
 13817  0112C4  0100               	movlb	0	; () banked
 13818  0112C6  B0D8               	btfsc	status,0,c
 13819  0112C8  D003               	goto	l20360
 13820                           
 13821                           ; BSR set to: 0
 13822                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13823  0112CA  0101               	movlb	1	; () banked
 13824  0112CC  0EF7               	movlw	247
 13825  0112CE  D002               	goto	L6
 13826  0112D0                     l20360:
 13827                           
 13828                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13829  0112D0  0101               	movlb	1	; () banked
 13830  0112D2  0EF8               	movlw	248
 13831  0112D4                     L6:
 13832  0112D4  27BD               	addwf	printf@exp& (0+255),f,b
 13833  0112D6  0EFF               	movlw	255
 13834  0112D8  23BE               	addwfc	(printf@exp+1)& (0+255),f,b
 13835                           
 13836                           ; BSR set to: 1
 13837                           ;doprnt.c: 1124: }
 13838                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13839                           
 13840                           ; BSR set to: 1
 13841  0112DA  0101               	movlb	1	; () banked
 13842  0112DC  51BD               	movf	printf@exp& (0+255),w,b
 13843  0112DE  EC32  F09F         	call	_scale
 13844  0112E2  C083  F1B5         	movff	?_scale,printf@tmpval
 13845  0112E6  C084  F1B6         	movff	?_scale+1,printf@tmpval+1
 13846  0112EA  C085  F1B7         	movff	?_scale+2,printf@tmpval+2
 13847                           
 13848                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13849  0112EE  C1C1  F060         	movff	printf@fval,__tdiv_to_l_@f1
 13850  0112F2  C1C2  F061         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 13851  0112F6  C1C3  F062         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 13852  0112FA  C1B5  F063         	movff	printf@tmpval,__tdiv_to_l_@f2
 13853  0112FE  C1B6  F064         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 13854  011302  C1B7  F065         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 13855  011306  ECCF  F0BB         	call	__tdiv_to_l_	;wreg free
 13856  01130A  C060  F1B9         	movff	?__tdiv_to_l_,printf@val
 13857  01130E  C061  F1BA         	movff	?__tdiv_to_l_+1,printf@val+1
 13858  011312  C062  F1BB         	movff	?__tdiv_to_l_+2,printf@val+2
 13859  011316  C063  F1BC         	movff	?__tdiv_to_l_+3,printf@val+3
 13860                           
 13861                           ;doprnt.c: 1129: fval = 0.0;
 13862  01131A  0E00               	movlw	0
 13863  01131C  0101               	movlb	1	; () banked
 13864  01131E  6FC1               	movwf	printf@fval& (0+255),b
 13865  011320  0E00               	movlw	0
 13866  011322  0101               	movlb	1	; () banked
 13867  011324  6FC2               	movwf	(printf@fval+1)& (0+255),b
 13868  011326  0E00               	movlw	0
 13869  011328  0101               	movlb	1	; () banked
 13870  01132A  6FC3               	movwf	(printf@fval+2)& (0+255),b
 13871                           
 13872                           ;doprnt.c: 1130: } else {
 13873  01132C  D033               	goto	l20374
 13874  01132E                     l20370:
 13875                           
 13876                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13877  01132E  C1C1  F08A         	movff	printf@fval,___fttol@f1
 13878  011332  C1C2  F08B         	movff	printf@fval+1,___fttol@f1+1
 13879  011336  C1C3  F08C         	movff	printf@fval+2,___fttol@f1+2
 13880  01133A  EC55  F0C2         	call	___fttol	;wreg free
 13881  01133E  C08A  F1B9         	movff	?___fttol,printf@val
 13882  011342  C08B  F1BA         	movff	?___fttol+1,printf@val+1
 13883  011346  C08C  F1BB         	movff	?___fttol+2,printf@val+2
 13884  01134A  C08D  F1BC         	movff	?___fttol+3,printf@val+3
 13885                           
 13886                           ;doprnt.c: 1132: fval -= (double)val;
 13887  01134E  C1C1  F0AB         	movff	printf@fval,___ftsub@f1
 13888  011352  C1C2  F0AC         	movff	printf@fval+1,___ftsub@f1+1
 13889  011356  C1C3  F0AD         	movff	printf@fval+2,___ftsub@f1+2
 13890  01135A  C1B9  F068         	movff	printf@val,___lltoft@c
 13891  01135E  C1BA  F069         	movff	printf@val+1,___lltoft@c+1
 13892  011362  C1BB  F06A         	movff	printf@val+2,___lltoft@c+2
 13893  011366  C1BC  F06B         	movff	printf@val+3,___lltoft@c+3
 13894  01136A  ECF7  F0D2         	call	___lltoft	;wreg free
 13895  01136E  C068  F0AE         	movff	?___lltoft,___ftsub@f2
 13896  011372  C069  F0AF         	movff	?___lltoft+1,___ftsub@f2+1
 13897  011376  C06A  F0B0         	movff	?___lltoft+2,___ftsub@f2+2
 13898  01137A  ECC1  F0D5         	call	___ftsub	;wreg free
 13899  01137E  C0AB  F1C1         	movff	?___ftsub,printf@fval
 13900  011382  C0AC  F1C2         	movff	?___ftsub+1,printf@fval+1
 13901  011386  C0AD  F1C3         	movff	?___ftsub+2,printf@fval+2
 13902                           
 13903                           ;doprnt.c: 1133: exp = 0;
 13904  01138A  0E00               	movlw	0
 13905  01138C  0101               	movlb	1	; () banked
 13906  01138E  6FBE               	movwf	(printf@exp+1)& (0+255),b
 13907  011390  0E00               	movlw	0
 13908  011392  6FBD               	movwf	printf@exp& (0+255),b
 13909  011394                     l20374:
 13910                           
 13911                           ; BSR set to: 1
 13912                           ;doprnt.c: 1134: }
 13913                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13914  011394  0E01               	movlw	1
 13915  011396  0101               	movlb	1	; () banked
 13916  011398  6FC6               	movwf	printf@c& (0+255),b
 13917  01139A                     l20376:
 13918                           
 13919                           ; BSR set to: 1
 13920  01139A  0E0A               	movlw	10
 13921  01139C  0101               	movlb	1	; () banked
 13922  01139E  19C6               	xorwf	printf@c& (0+255),w,b
 13923  0113A0  B4D8               	btfsc	status,2,c
 13924  0113A2  D021               	goto	l20388
 13925                           
 13926                           ; BSR set to: 1
 13927                           ;doprnt.c: 1137: if(val < dpowers[c])
 13928                           
 13929                           ; BSR set to: 1
 13930                           
 13931                           ; BSR set to: 1
 13932  0113A4  0101               	movlb	1	; () banked
 13933  0113A6  51C6               	movf	printf@c& (0+255),w,b
 13934  0113A8  0D04               	mullw	4
 13935  0113AA  0E8B               	movlw	low _dpowers
 13936  0113AC  24F3               	addwf	prodl,w,c
 13937  0113AE  6EF6               	movwf	tblptrl,c
 13938  0113B0  0EFB               	movlw	high _dpowers
 13939  0113B2  20F4               	addwfc	prodh,w,c
 13940  0113B4  6EF7               	movwf	tblptrh,c
 13941  0113B6                     	if	1	;There are 3 active tblptr bytes
 13942  0113B6  6AF8               	clrf	tblptru,c
 13943  0113B8  0E00               	movlw	low (__mediumconst shr (0+16))
 13944  0113BA  22F8               	addwfc	tblptru,f,c
 13945  0113BC                     	endif
 13946  0113BC  0009               	tblrd		*+
 13947  0113BE  50F5               	movf	tablat,w,c
 13948  0113C0  0101               	movlb	1	; () banked
 13949  0113C2  5DB9               	subwf	printf@val& (0+255),w,b
 13950  0113C4  0009               	tblrd		*+
 13951  0113C6  50F5               	movf	tablat,w,c
 13952  0113C8  0101               	movlb	1	; () banked
 13953  0113CA  59BA               	subwfb	(printf@val+1)& (0+255),w,b
 13954  0113CC  0009               	tblrd		*+
 13955  0113CE  50F5               	movf	tablat,w,c
 13956  0113D0  0101               	movlb	1	; () banked
 13957  0113D2  59BB               	subwfb	(printf@val+2)& (0+255),w,b
 13958  0113D4  0009               	tblrd		*+
 13959  0113D6  50F5               	movf	tablat,w,c
 13960  0113D8  0101               	movlb	1	; () banked
 13961  0113DA  59BC               	subwfb	(printf@val+3)& (0+255),w,b
 13962  0113DC  A0D8               	btfss	status,0,c
 13963  0113DE  D003               	goto	l20388
 13964                           
 13965                           ; BSR set to: 1
 13966                           
 13967                           ; BSR set to: 1
 13968                           
 13969                           ; BSR set to: 1
 13970                           ;doprnt.c: 1138: break;
 13971  0113E0  0101               	movlb	1	; () banked
 13972  0113E2  2BC6               	incf	printf@c& (0+255),f,b
 13973  0113E4  D7DA               	goto	l20376
 13974  0113E6                     l20388:
 13975                           
 13976                           ; BSR set to: 1
 13977                           ;doprnt.c: 1142: width -= prec + c + exp;
 13978  0113E6  C1C6  F0B6         	movff	printf@c,??_printf
 13979  0113EA  0100               	movlb	0	; () banked
 13980  0113EC  6BB7               	clrf	(??_printf+1)& (0+255),b
 13981  0113EE  BFB6               	btfsc	??_printf& (0+255),7,b
 13982  0113F0  07B7               	decf	(??_printf+1)& (0+255),f,b
 13983  0113F2  0101               	movlb	1	; () banked
 13984  0113F4  51C4               	movf	printf@prec& (0+255),w,b
 13985  0113F6  0100               	movlb	0	; () banked
 13986  0113F8  27B6               	addwf	??_printf& (0+255),f,b
 13987  0113FA  0101               	movlb	1	; () banked
 13988  0113FC  51C5               	movf	(printf@prec+1)& (0+255),w,b
 13989  0113FE  0100               	movlb	0	; () banked
 13990  011400  23B7               	addwfc	(??_printf+1)& (0+255),f,b
 13991  011402  0101               	movlb	1	; () banked
 13992  011404  51BD               	movf	printf@exp& (0+255),w,b
 13993  011406  0100               	movlb	0	; () banked
 13994  011408  27B6               	addwf	??_printf& (0+255),f,b
 13995  01140A  0101               	movlb	1	; () banked
 13996  01140C  51BE               	movf	(printf@exp+1)& (0+255),w,b
 13997  01140E  0100               	movlb	0	; () banked
 13998  011410  23B7               	addwfc	(??_printf+1)& (0+255),f,b
 13999  011412  0100               	movlb	0	; () banked
 14000  011414  51B6               	movf	??_printf& (0+255),w,b
 14001  011416  0101               	movlb	1	; () banked
 14002  011418  5FBF               	subwf	printf@width& (0+255),f,b
 14003  01141A  0100               	movlb	0	; () banked
 14004  01141C  51B7               	movf	(??_printf+1)& (0+255),w,b
 14005  01141E  0101               	movlb	1	; () banked
 14006  011420  5BC0               	subwfb	(printf@width+1)& (0+255),f,b
 14007                           
 14008                           ;doprnt.c: 1143: if(
 14009                           ;doprnt.c: 1147: prec)
 14010  011422  0101               	movlb	1	; () banked
 14011  011424  51C4               	movf	printf@prec& (0+255),w,b
 14012  011426  0101               	movlb	1	; () banked
 14013  011428  11C5               	iorwf	(printf@prec+1)& (0+255),w,b
 14014  01142A  B4D8               	btfsc	status,2,c
 14015  01142C  D004               	goto	l20392
 14016                           
 14017                           ; BSR set to: 1
 14018                           ;doprnt.c: 1148: width--;
 14019  01142E  0101               	movlb	1	; () banked
 14020  011430  07BF               	decf	printf@width& (0+255),f,b
 14021  011432  A0D8               	btfss	status,0,c
 14022  011434  07C0               	decf	(printf@width+1)& (0+255),f,b
 14023  011436                     l20392:
 14024                           
 14025                           ; BSR set to: 1
 14026                           ;doprnt.c: 1149: if(flag & 0x03)
 14027  011436  0E03               	movlw	3
 14028  011438  0101               	movlb	1	; () banked
 14029  01143A  15B3               	andwf	printf@flag& (0+255),w,b
 14030  01143C  0100               	movlb	0	; () banked
 14031  01143E  6FB6               	movwf	??_printf& (0+255),b
 14032  011440  0E00               	movlw	0
 14033  011442  0101               	movlb	1	; () banked
 14034  011444  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 14035  011446  0100               	movlb	0	; () banked
 14036  011448  6FB7               	movwf	(??_printf+1)& (0+255),b
 14037  01144A  0100               	movlb	0	; () banked
 14038  01144C  51B6               	movf	??_printf& (0+255),w,b
 14039  01144E  0100               	movlb	0	; () banked
 14040  011450  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 14041  011452  B4D8               	btfsc	status,2,c
 14042  011454  D008               	goto	l20400
 14043  011456  D003               	goto	l20398
 14044  011458                     l20396:
 14045                           
 14046                           ; BSR set to: 1
 14047                           ;doprnt.c: 1181: (putch(' ') );
 14048  011458  0E20               	movlw	32
 14049  01145A  EC76  F0D8         	call	_putch
 14050  01145E                     l20398:
 14051                           
 14052                           ;doprnt.c: 1182: width--;
 14053  01145E  0101               	movlb	1	; () banked
 14054  011460  07BF               	decf	printf@width& (0+255),f,b
 14055  011462  A0D8               	btfss	status,0,c
 14056  011464  07C0               	decf	(printf@width+1)& (0+255),f,b
 14057  011466                     l20400:
 14058  011466  0101               	movlb	1	; () banked
 14059  011468  BFC0               	btfsc	(printf@width+1)& (0+255),7,b
 14060  01146A  D007               	goto	l20402
 14061  01146C  0101               	movlb	1	; () banked
 14062  01146E  51C0               	movf	(printf@width+1)& (0+255),w,b
 14063  011470  E1F3               	bnz	l20396
 14064  011472  0101               	movlb	1	; () banked
 14065  011474  05BF               	decf	printf@width& (0+255),w,b
 14066  011476  B0D8               	btfsc	status,0,c
 14067  011478  D7EF               	goto	l20396
 14068  01147A                     l20402:
 14069                           
 14070                           ; BSR set to: 1
 14071                           ;doprnt.c: 1183: }
 14072                           ;doprnt.c: 1188: if(flag & 0x03)
 14073  01147A  0E03               	movlw	3
 14074  01147C  0101               	movlb	1	; () banked
 14075  01147E  15B3               	andwf	printf@flag& (0+255),w,b
 14076  011480  0100               	movlb	0	; () banked
 14077  011482  6FB6               	movwf	??_printf& (0+255),b
 14078  011484  0E00               	movlw	0
 14079  011486  0101               	movlb	1	; () banked
 14080  011488  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 14081  01148A  0100               	movlb	0	; () banked
 14082  01148C  6FB7               	movwf	(??_printf+1)& (0+255),b
 14083  01148E  0100               	movlb	0	; () banked
 14084  011490  51B6               	movf	??_printf& (0+255),w,b
 14085  011492  0100               	movlb	0	; () banked
 14086  011494  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 14087  011496  B4D8               	btfsc	status,2,c
 14088  011498  D04E               	goto	l20412
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;doprnt.c: 1190: (putch('-') );
 14092  01149A  0E2D               	movlw	45
 14093  01149C  EC76  F0D8         	call	_putch
 14094                           
 14095                           ;doprnt.c: 1195: }
 14096                           ;doprnt.c: 1196: while(c--) {
 14097  0114A0  D04A               	goto	l20412
 14098  0114A2                     l20406:
 14099                           
 14100                           ;doprnt.c: 1200: {
 14101                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 14102  0114A2  C1B9  F060         	movff	printf@val,___lldiv@dividend
 14103  0114A6  C1BA  F061         	movff	printf@val+1,___lldiv@dividend+1
 14104  0114AA  C1BB  F062         	movff	printf@val+2,___lldiv@dividend+2
 14105  0114AE  C1BC  F063         	movff	printf@val+3,___lldiv@dividend+3
 14106  0114B2  0101               	movlb	1	; () banked
 14107  0114B4  51C6               	movf	printf@c& (0+255),w,b
 14108  0114B6  0D04               	mullw	4
 14109  0114B8  0E8B               	movlw	low _dpowers
 14110  0114BA  24F3               	addwf	prodl,w,c
 14111  0114BC  6EF6               	movwf	tblptrl,c
 14112  0114BE  0EFB               	movlw	high _dpowers
 14113  0114C0  20F4               	addwfc	prodh,w,c
 14114  0114C2  6EF7               	movwf	tblptrh,c
 14115  0114C4                     	if	1	;There are 3 active tblptr bytes
 14116  0114C4  6AF8               	clrf	tblptru,c
 14117  0114C6  0E00               	movlw	low (__mediumconst shr (0+16))
 14118  0114C8  22F8               	addwfc	tblptru,f,c
 14119  0114CA                     	endif
 14120  0114CA  0009               	tblrd		*+
 14121  0114CC  CFF5 F064          	movff	tablat,___lldiv@divisor
 14122  0114D0  0009               	tblrd		*+
 14123  0114D2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 14124  0114D6  0009               	tblrd		*+
 14125  0114D8  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 14126  0114DC  000A               	tblrd		*-
 14127  0114DE  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 14128  0114E2  EC2E  F0CD         	call	___lldiv	;wreg free
 14129  0114E6  C060  F1B5         	movff	?___lldiv,printf@tmpval
 14130  0114EA  C061  F1B6         	movff	?___lldiv+1,printf@tmpval+1
 14131  0114EE  C062  F1B7         	movff	?___lldiv+2,printf@tmpval+2
 14132  0114F2  C063  F1B8         	movff	?___lldiv+3,printf@tmpval+3
 14133                           
 14134                           ;doprnt.c: 1202: tmpval.vd %= 10;
 14135  0114F6  C1B5  F06D         	movff	printf@tmpval,___llmod@dividend
 14136  0114FA  C1B6  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
 14137  0114FE  C1B7  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
 14138  011502  C1B8  F070         	movff	printf@tmpval+3,___llmod@dividend+3
 14139  011506  0E0A               	movlw	10
 14140  011508  0100               	movlb	0	; () banked
 14141  01150A  6F71               	movwf	___llmod@divisor& (0+255),b
 14142  01150C  0E00               	movlw	0
 14143  01150E  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 14144  011510  0E00               	movlw	0
 14145  011512  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 14146  011514  0E00               	movlw	0
 14147  011516  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 14148  011518  EC97  F0D1         	call	___llmod	;wreg free
 14149  01151C  C06D  F1B5         	movff	?___llmod,printf@tmpval
 14150  011520  C06E  F1B6         	movff	?___llmod+1,printf@tmpval+1
 14151  011524  C06F  F1B7         	movff	?___llmod+2,printf@tmpval+2
 14152  011528  C070  F1B8         	movff	?___llmod+3,printf@tmpval+3
 14153                           
 14154                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 14155  01152C  0101               	movlb	1	; () banked
 14156  01152E  51B5               	movf	printf@tmpval& (0+255),w,b
 14157  011530  0F30               	addlw	48
 14158  011532  EC76  F0D8         	call	_putch
 14159  011536                     l20412:
 14160  011536  0101               	movlb	1	; () banked
 14161  011538  07C6               	decf	printf@c& (0+255),f,b
 14162  01153A  0101               	movlb	1	; () banked
 14163  01153C  29C6               	incf	printf@c& (0+255),w,b
 14164  01153E  B4D8               	btfsc	status,2,c
 14165  011540  D008               	goto	l20418
 14166  011542  D7AF               	goto	l20406
 14167  011544                     l20414:
 14168                           
 14169                           ; BSR set to: 1
 14170                           ;doprnt.c: 1208: (putch('0') );
 14171  011544  0E30               	movlw	48
 14172  011546  EC76  F0D8         	call	_putch
 14173                           
 14174                           ;doprnt.c: 1209: exp--;
 14175  01154A  0101               	movlb	1	; () banked
 14176  01154C  07BD               	decf	printf@exp& (0+255),f,b
 14177  01154E  A0D8               	btfss	status,0,c
 14178  011550  07BE               	decf	(printf@exp+1)& (0+255),f,b
 14179  011552                     l20418:
 14180                           
 14181                           ; BSR set to: 1
 14182  011552  0101               	movlb	1	; () banked
 14183  011554  BFBE               	btfsc	(printf@exp+1)& (0+255),7,b
 14184  011556  D007               	goto	l20420
 14185  011558  0101               	movlb	1	; () banked
 14186  01155A  51BE               	movf	(printf@exp+1)& (0+255),w,b
 14187  01155C  E1F3               	bnz	l20414
 14188  01155E  0101               	movlb	1	; () banked
 14189  011560  05BD               	decf	printf@exp& (0+255),w,b
 14190  011562  B0D8               	btfsc	status,0,c
 14191  011564  D7EF               	goto	l20414
 14192  011566                     l20420:
 14193                           
 14194                           ; BSR set to: 1
 14195                           ;doprnt.c: 1210: }
 14196                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 14197  011566  0101               	movlb	1	; () banked
 14198  011568  BFC5               	btfsc	(printf@prec+1)& (0+255),7,b
 14199  01156A  D00C               	goto	l10351
 14200  01156C  0101               	movlb	1	; () banked
 14201  01156E  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14202  011570  E105               	bnz	u14240
 14203  011572  0E09               	movlw	9
 14204  011574  0101               	movlb	1	; () banked
 14205  011576  5DC4               	subwf	printf@prec& (0+255),w,b
 14206  011578  A0D8               	btfss	status,0,c
 14207  01157A  D004               	goto	l10351
 14208  01157C                     u14240:
 14209                           
 14210                           ; BSR set to: 1
 14211                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 14212  01157C  0E08               	movlw	8
 14213  01157E  0101               	movlb	1	; () banked
 14214  011580  6FC6               	movwf	printf@c& (0+255),b
 14215  011582  D002               	goto	l20424
 14216  011584                     l10351:
 14217                           
 14218                           ; BSR set to: 1
 14219                           ;doprnt.c: 1213: else
 14220                           ;doprnt.c: 1214: c = prec;
 14221  011584  C1C4  F1C6         	movff	printf@prec,printf@c
 14222  011588                     l20424:
 14223                           
 14224                           ; BSR set to: 1
 14225                           ;doprnt.c: 1215: prec -= c;
 14226  011588  0101               	movlb	1	; () banked
 14227  01158A  51C6               	movf	printf@c& (0+255),w,b
 14228  01158C  0101               	movlb	1	; () banked
 14229  01158E  5FC4               	subwf	printf@prec& (0+255),f,b
 14230  011590  0E00               	movlw	0
 14231  011592  0101               	movlb	1	; () banked
 14232  011594  BFC6               	btfsc	printf@c& (0+255),7,b
 14233  011596  0EFF               	movlw	255
 14234  011598  0101               	movlb	1	; () banked
 14235  01159A  5BC5               	subwfb	(printf@prec+1)& (0+255),f,b
 14236                           
 14237                           ; BSR set to: 1
 14238                           ;doprnt.c: 1219: if(c)
 14239  01159C  0101               	movlb	1	; () banked
 14240  01159E  51C6               	movf	printf@c& (0+255),w,b
 14241  0115A0  0101               	movlb	1	; () banked
 14242  0115A2  B4D8               	btfsc	status,2,c
 14243  0115A4  D003               	goto	l20430
 14244                           
 14245                           ; BSR set to: 1
 14246                           ;doprnt.c: 1221: (putch('.') );
 14247  0115A6  0E2E               	movlw	46
 14248  0115A8  EC76  F0D8         	call	_putch
 14249  0115AC                     l20430:
 14250                           
 14251                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14252  0115AC  0101               	movlb	1	; () banked
 14253  0115AE  51C6               	movf	printf@c& (0+255),w,b
 14254  0115B0  EC32  F09F         	call	_scale
 14255  0115B4  C083  F1AA         	movff	?_scale,_printf$8173
 14256  0115B8  C084  F1AB         	movff	?_scale+1,_printf$8173+1
 14257  0115BC  C085  F1AC         	movff	?_scale+2,_printf$8173+2
 14258                           
 14259                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14260  0115C0  C1C1  F077         	movff	printf@fval,___ftmul@f2
 14261  0115C4  C1C2  F078         	movff	printf@fval+1,___ftmul@f2+1
 14262  0115C8  C1C3  F079         	movff	printf@fval+2,___ftmul@f2+2
 14263  0115CC  C1AA  F074         	movff	_printf$8173,___ftmul@f1
 14264  0115D0  C1AB  F075         	movff	_printf$8173+1,___ftmul@f1+1
 14265  0115D4  C1AC  F076         	movff	_printf$8173+2,___ftmul@f1+2
 14266  0115D8  EC00  F0C1         	call	___ftmul	;wreg free
 14267  0115DC  C074  F08A         	movff	?___ftmul,___fttol@f1
 14268  0115E0  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
 14269  0115E4  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
 14270  0115E8  EC55  F0C2         	call	___fttol	;wreg free
 14271  0115EC  C08A  F1B9         	movff	?___fttol,printf@val
 14272  0115F0  C08B  F1BA         	movff	?___fttol+1,printf@val+1
 14273  0115F4  C08C  F1BB         	movff	?___fttol+2,printf@val+2
 14274  0115F8  C08D  F1BC         	movff	?___fttol+3,printf@val+3
 14275                           
 14276                           ;doprnt.c: 1228: while(c--) {
 14277  0115FC  D074               	goto	l20440
 14278  0115FE                     l20434:
 14279                           
 14280                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 14281  0115FE  C1B9  F060         	movff	printf@val,___lldiv@dividend
 14282  011602  C1BA  F061         	movff	printf@val+1,___lldiv@dividend+1
 14283  011606  C1BB  F062         	movff	printf@val+2,___lldiv@dividend+2
 14284  01160A  C1BC  F063         	movff	printf@val+3,___lldiv@dividend+3
 14285  01160E  0101               	movlb	1	; () banked
 14286  011610  51C6               	movf	printf@c& (0+255),w,b
 14287  011612  0D04               	mullw	4
 14288  011614  0E8B               	movlw	low _dpowers
 14289  011616  24F3               	addwf	prodl,w,c
 14290  011618  6EF6               	movwf	tblptrl,c
 14291  01161A  0EFB               	movlw	high _dpowers
 14292  01161C  20F4               	addwfc	prodh,w,c
 14293  01161E  6EF7               	movwf	tblptrh,c
 14294  011620                     	if	1	;There are 3 active tblptr bytes
 14295  011620  6AF8               	clrf	tblptru,c
 14296  011622  0E00               	movlw	low (__mediumconst shr (0+16))
 14297  011624  22F8               	addwfc	tblptru,f,c
 14298  011626                     	endif
 14299  011626  0009               	tblrd		*+
 14300  011628  CFF5 F064          	movff	tablat,___lldiv@divisor
 14301  01162C  0009               	tblrd		*+
 14302  01162E  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 14303  011632  0009               	tblrd		*+
 14304  011634  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 14305  011638  000A               	tblrd		*-
 14306  01163A  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 14307  01163E  EC2E  F0CD         	call	___lldiv	;wreg free
 14308  011642  C060  F1B5         	movff	?___lldiv,printf@tmpval
 14309  011646  C061  F1B6         	movff	?___lldiv+1,printf@tmpval+1
 14310  01164A  C062  F1B7         	movff	?___lldiv+2,printf@tmpval+2
 14311  01164E  C063  F1B8         	movff	?___lldiv+3,printf@tmpval+3
 14312                           
 14313                           ;doprnt.c: 1230: tmpval.vd %= 10;
 14314  011652  C1B5  F06D         	movff	printf@tmpval,___llmod@dividend
 14315  011656  C1B6  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
 14316  01165A  C1B7  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
 14317  01165E  C1B8  F070         	movff	printf@tmpval+3,___llmod@dividend+3
 14318  011662  0E0A               	movlw	10
 14319  011664  0100               	movlb	0	; () banked
 14320  011666  6F71               	movwf	___llmod@divisor& (0+255),b
 14321  011668  0E00               	movlw	0
 14322  01166A  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 14323  01166C  0E00               	movlw	0
 14324  01166E  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 14325  011670  0E00               	movlw	0
 14326  011672  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 14327  011674  EC97  F0D1         	call	___llmod	;wreg free
 14328  011678  C06D  F1B5         	movff	?___llmod,printf@tmpval
 14329  01167C  C06E  F1B6         	movff	?___llmod+1,printf@tmpval+1
 14330  011680  C06F  F1B7         	movff	?___llmod+2,printf@tmpval+2
 14331  011684  C070  F1B8         	movff	?___llmod+3,printf@tmpval+3
 14332                           
 14333                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 14334  011688  0101               	movlb	1	; () banked
 14335  01168A  51B5               	movf	printf@tmpval& (0+255),w,b
 14336  01168C  0F30               	addlw	48
 14337  01168E  EC76  F0D8         	call	_putch
 14338                           
 14339                           ;doprnt.c: 1232: val %= dpowers[c];
 14340  011692  C1B9  F06D         	movff	printf@val,___llmod@dividend
 14341  011696  C1BA  F06E         	movff	printf@val+1,___llmod@dividend+1
 14342  01169A  C1BB  F06F         	movff	printf@val+2,___llmod@dividend+2
 14343  01169E  C1BC  F070         	movff	printf@val+3,___llmod@dividend+3
 14344  0116A2  0101               	movlb	1	; () banked
 14345  0116A4  51C6               	movf	printf@c& (0+255),w,b
 14346  0116A6  0D04               	mullw	4
 14347  0116A8  0E8B               	movlw	low _dpowers
 14348  0116AA  24F3               	addwf	prodl,w,c
 14349  0116AC  6EF6               	movwf	tblptrl,c
 14350  0116AE  0EFB               	movlw	high _dpowers
 14351  0116B0  20F4               	addwfc	prodh,w,c
 14352  0116B2  6EF7               	movwf	tblptrh,c
 14353  0116B4                     	if	1	;There are 3 active tblptr bytes
 14354  0116B4  6AF8               	clrf	tblptru,c
 14355  0116B6  0E00               	movlw	low (__mediumconst shr (0+16))
 14356  0116B8  22F8               	addwfc	tblptru,f,c
 14357  0116BA                     	endif
 14358  0116BA  0009               	tblrd		*+
 14359  0116BC  CFF5 F071          	movff	tablat,___llmod@divisor
 14360  0116C0  0009               	tblrd		*+
 14361  0116C2  CFF5 F072          	movff	tablat,___llmod@divisor+1
 14362  0116C6  0009               	tblrd		*+
 14363  0116C8  CFF5 F073          	movff	tablat,___llmod@divisor+2
 14364  0116CC  000A               	tblrd		*-
 14365  0116CE  CFF5 F074          	movff	tablat,___llmod@divisor+3
 14366  0116D2  EC97  F0D1         	call	___llmod	;wreg free
 14367  0116D6  C06D  F1B9         	movff	?___llmod,printf@val
 14368  0116DA  C06E  F1BA         	movff	?___llmod+1,printf@val+1
 14369  0116DE  C06F  F1BB         	movff	?___llmod+2,printf@val+2
 14370  0116E2  C070  F1BC         	movff	?___llmod+3,printf@val+3
 14371  0116E6                     l20440:
 14372  0116E6  0101               	movlb	1	; () banked
 14373  0116E8  07C6               	decf	printf@c& (0+255),f,b
 14374  0116EA  0101               	movlb	1	; () banked
 14375  0116EC  29C6               	incf	printf@c& (0+255),w,b
 14376  0116EE  B4D8               	btfsc	status,2,c
 14377  0116F0  D008               	goto	l20446
 14378  0116F2  D785               	goto	l20434
 14379  0116F4                     l20442:
 14380                           
 14381                           ; BSR set to: 1
 14382                           ;doprnt.c: 1236: (putch('0') );
 14383  0116F4  0E30               	movlw	48
 14384  0116F6  EC76  F0D8         	call	_putch
 14385                           
 14386                           ;doprnt.c: 1237: prec--;
 14387  0116FA  0101               	movlb	1	; () banked
 14388  0116FC  07C4               	decf	printf@prec& (0+255),f,b
 14389  0116FE  A0D8               	btfss	status,0,c
 14390  011700  07C5               	decf	(printf@prec+1)& (0+255),f,b
 14391  011702                     l20446:
 14392                           
 14393                           ; BSR set to: 1
 14394  011702  0101               	movlb	1	; () banked
 14395  011704  51C4               	movf	printf@prec& (0+255),w,b
 14396  011706  0101               	movlb	1	; () banked
 14397  011708  11C5               	iorwf	(printf@prec+1)& (0+255),w,b
 14398  01170A  B4D8               	btfsc	status,2,c
 14399  01170C  D179               	goto	l20526
 14400  01170E  D7F2               	goto	l20442
 14401  011710                     l10317:
 14402                           
 14403                           ; BSR set to: 1
 14404                           ;doprnt.c: 1246: }
 14405                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14406  011710  0101               	movlb	1	; () banked
 14407  011712  BDB3               	btfsc	printf@flag& (0+255),6,b
 14408  011714  D023               	goto	l20458
 14409                           
 14410                           ; BSR set to: 1
 14411                           ;doprnt.c: 1253: {
 14412                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 14413  011716  C1AF  FFD9         	movff	printf@ap,fsr2l
 14414  01171A  C1B0  FFDA         	movff	printf@ap+1,fsr2h
 14415  01171E  CFDE F1B9          	movff	postinc2,printf@val
 14416  011722  CFDD F1BA          	movff	postdec2,printf@val+1
 14417  011726  0101               	movlb	1	; () banked
 14418  011728  0E00               	movlw	0
 14419  01172A  BFBA               	btfsc	(printf@val+1)& (0+255),7,b
 14420  01172C  0EFF               	movlw	-1
 14421  01172E  6FBB               	movwf	(printf@val+2)& (0+255),b
 14422  011730  6FBC               	movwf	(printf@val+3)& (0+255),b
 14423                           
 14424                           ; BSR set to: 1
 14425  011732  0E02               	movlw	2
 14426  011734  0101               	movlb	1	; () banked
 14427  011736  27AF               	addwf	printf@ap& (0+255),f,b
 14428  011738  0E00               	movlw	0
 14429  01173A  23B0               	addwfc	(printf@ap+1)& (0+255),f,b
 14430                           
 14431                           ; BSR set to: 1
 14432                           ;doprnt.c: 1261: if((long)val < 0) {
 14433  01173C  0101               	movlb	1	; () banked
 14434  01173E  AFBC               	btfss	(printf@val+3)& (0+255),7,b
 14435  011740  D021               	goto	l20462
 14436                           
 14437                           ; BSR set to: 1
 14438                           ;doprnt.c: 1262: flag |= 0x03;
 14439  011742  0E03               	movlw	3
 14440  011744  0101               	movlb	1	; () banked
 14441  011746  13B3               	iorwf	printf@flag& (0+255),f,b
 14442                           
 14443                           ; BSR set to: 1
 14444                           ;doprnt.c: 1263: val = -val;
 14445  011748  0101               	movlb	1	; () banked
 14446  01174A  1FBC               	comf	(printf@val+3)& (0+255),f,b
 14447  01174C  1FBB               	comf	(printf@val+2)& (0+255),f,b
 14448  01174E  1FBA               	comf	(printf@val+1)& (0+255),f,b
 14449  011750  6DB9               	negf	printf@val& (0+255),b
 14450  011752  0E00               	movlw	0
 14451  011754  23BA               	addwfc	(printf@val+1)& (0+255),f,b
 14452  011756  23BB               	addwfc	(printf@val+2)& (0+255),f,b
 14453  011758  23BC               	addwfc	(printf@val+3)& (0+255),f,b
 14454                           
 14455                           ; BSR set to: 1
 14456                           ;doprnt.c: 1264: }
 14457                           ;doprnt.c: 1266: }
 14458  01175A  D014               	goto	l20462
 14459  01175C                     l20458:
 14460                           
 14461                           ; BSR set to: 1
 14462                           ;doprnt.c: 1268: else
 14463                           ;doprnt.c: 1273: {
 14464                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14465  01175C  C1AF  FFD9         	movff	printf@ap,fsr2l
 14466  011760  C1B0  FFDA         	movff	printf@ap+1,fsr2h
 14467  011764  CFDE F0B6          	movff	postinc2,??_printf
 14468  011768  CFDD F0B7          	movff	postdec2,??_printf+1
 14469  01176C  C0B6  F1B9         	movff	??_printf,printf@val
 14470  011770  C0B7  F1BA         	movff	??_printf+1,printf@val+1
 14471  011774  0101               	movlb	1	; () banked
 14472  011776  6BBB               	clrf	(printf@val+2)& (0+255),b
 14473  011778  6BBC               	clrf	(printf@val+3)& (0+255),b
 14474                           
 14475                           ; BSR set to: 1
 14476  01177A  0E02               	movlw	2
 14477  01177C  0101               	movlb	1	; () banked
 14478  01177E  27AF               	addwf	printf@ap& (0+255),f,b
 14479  011780  0E00               	movlw	0
 14480  011782  23B0               	addwfc	(printf@ap+1)& (0+255),f,b
 14481  011784                     l20462:
 14482                           
 14483                           ; BSR set to: 1
 14484                           ;doprnt.c: 1287: }
 14485                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 14486  011784  0101               	movlb	1	; () banked
 14487  011786  51C4               	movf	printf@prec& (0+255),w,b
 14488  011788  0101               	movlb	1	; () banked
 14489  01178A  11C5               	iorwf	(printf@prec+1)& (0+255),w,b
 14490  01178C  A4D8               	btfss	status,2,c
 14491  01178E  D00D               	goto	l20468
 14492                           
 14493                           ; BSR set to: 1
 14494  011790  0101               	movlb	1	; () banked
 14495  011792  51B9               	movf	printf@val& (0+255),w,b
 14496  011794  0101               	movlb	1	; () banked
 14497  011796  11BA               	iorwf	(printf@val+1)& (0+255),w,b
 14498  011798  0101               	movlb	1	; () banked
 14499  01179A  11BB               	iorwf	(printf@val+2)& (0+255),w,b
 14500  01179C  0101               	movlb	1	; () banked
 14501  01179E  11BC               	iorwf	(printf@val+3)& (0+255),w,b
 14502  0117A0  A4D8               	btfss	status,2,c
 14503  0117A2  D003               	goto	l20468
 14504                           
 14505                           ; BSR set to: 1
 14506                           ;doprnt.c: 1291: prec++;
 14507  0117A4  0101               	movlb	1	; () banked
 14508  0117A6  4BC4               	infsnz	printf@prec& (0+255),f,b
 14509  0117A8  2BC5               	incf	(printf@prec+1)& (0+255),f,b
 14510  0117AA                     l20468:
 14511                           
 14512                           ; BSR set to: 1
 14513                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14514  0117AA  0E01               	movlw	1
 14515  0117AC  0101               	movlb	1	; () banked
 14516  0117AE  6FC6               	movwf	printf@c& (0+255),b
 14517  0117B0                     l20470:
 14518                           
 14519                           ; BSR set to: 1
 14520  0117B0  0E0A               	movlw	10
 14521  0117B2  0101               	movlb	1	; () banked
 14522  0117B4  19C6               	xorwf	printf@c& (0+255),w,b
 14523  0117B6  B4D8               	btfsc	status,2,c
 14524  0117B8  D021               	goto	l20482
 14525                           
 14526                           ; BSR set to: 1
 14527                           ;doprnt.c: 1306: if(val < dpowers[c])
 14528                           
 14529                           ; BSR set to: 1
 14530                           
 14531                           ; BSR set to: 1
 14532  0117BA  0101               	movlb	1	; () banked
 14533  0117BC  51C6               	movf	printf@c& (0+255),w,b
 14534  0117BE  0D04               	mullw	4
 14535  0117C0  0E8B               	movlw	low _dpowers
 14536  0117C2  24F3               	addwf	prodl,w,c
 14537  0117C4  6EF6               	movwf	tblptrl,c
 14538  0117C6  0EFB               	movlw	high _dpowers
 14539  0117C8  20F4               	addwfc	prodh,w,c
 14540  0117CA  6EF7               	movwf	tblptrh,c
 14541  0117CC                     	if	1	;There are 3 active tblptr bytes
 14542  0117CC  6AF8               	clrf	tblptru,c
 14543  0117CE  0E00               	movlw	low (__mediumconst shr (0+16))
 14544  0117D0  22F8               	addwfc	tblptru,f,c
 14545  0117D2                     	endif
 14546  0117D2  0009               	tblrd		*+
 14547  0117D4  50F5               	movf	tablat,w,c
 14548  0117D6  0101               	movlb	1	; () banked
 14549  0117D8  5DB9               	subwf	printf@val& (0+255),w,b
 14550  0117DA  0009               	tblrd		*+
 14551  0117DC  50F5               	movf	tablat,w,c
 14552  0117DE  0101               	movlb	1	; () banked
 14553  0117E0  59BA               	subwfb	(printf@val+1)& (0+255),w,b
 14554  0117E2  0009               	tblrd		*+
 14555  0117E4  50F5               	movf	tablat,w,c
 14556  0117E6  0101               	movlb	1	; () banked
 14557  0117E8  59BB               	subwfb	(printf@val+2)& (0+255),w,b
 14558  0117EA  0009               	tblrd		*+
 14559  0117EC  50F5               	movf	tablat,w,c
 14560  0117EE  0101               	movlb	1	; () banked
 14561  0117F0  59BC               	subwfb	(printf@val+3)& (0+255),w,b
 14562  0117F2  A0D8               	btfss	status,0,c
 14563  0117F4  D003               	goto	l20482
 14564                           
 14565                           ; BSR set to: 1
 14566                           
 14567                           ; BSR set to: 1
 14568                           
 14569                           ; BSR set to: 1
 14570                           ;doprnt.c: 1307: break;
 14571  0117F6  0101               	movlb	1	; () banked
 14572  0117F8  2BC6               	incf	printf@c& (0+255),f,b
 14573  0117FA  D7DA               	goto	l20470
 14574  0117FC                     l20482:
 14575                           
 14576                           ; BSR set to: 1
 14577                           ;doprnt.c: 1339: if(c < prec)
 14578  0117FC  0E80               	movlw	128
 14579  0117FE  0101               	movlb	1	; () banked
 14580  011800  BFC6               	btfsc	printf@c& (0+255),7,b
 14581  011802  0E7F               	movlw	127
 14582  011804  0100               	movlb	0	; () banked
 14583  011806  6FB6               	movwf	??_printf& (0+255),b
 14584  011808  0101               	movlb	1	; () banked
 14585  01180A  51C4               	movf	printf@prec& (0+255),w,b
 14586  01180C  0101               	movlb	1	; () banked
 14587  01180E  5DC6               	subwf	printf@c& (0+255),w,b
 14588  011810  0101               	movlb	1	; () banked
 14589  011812  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14590  011814  0A80               	xorlw	128
 14591  011816  0100               	movlb	0	; () banked
 14592  011818  59B6               	subwfb	??_printf& (0+255),w,b
 14593  01181A  B0D8               	btfsc	status,0,c
 14594  01181C  D003               	goto	l20486
 14595                           
 14596                           ; BSR set to: 0
 14597                           ;doprnt.c: 1340: c = prec;
 14598  01181E  C1C4  F1C6         	movff	printf@prec,printf@c
 14599  011822  D018               	goto	l20490
 14600  011824                     l20486:
 14601                           
 14602                           ; BSR set to: 0
 14603                           ;doprnt.c: 1341: else if(prec < c)
 14604  011824  0101               	movlb	1	; () banked
 14605  011826  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14606  011828  0A80               	xorlw	128
 14607  01182A  0100               	movlb	0	; () banked
 14608  01182C  6FB6               	movwf	??_printf& (0+255),b
 14609  01182E  0101               	movlb	1	; () banked
 14610  011830  51C6               	movf	printf@c& (0+255),w,b
 14611  011832  0101               	movlb	1	; () banked
 14612  011834  5DC4               	subwf	printf@prec& (0+255),w,b
 14613  011836  0E80               	movlw	128
 14614  011838  0101               	movlb	1	; () banked
 14615  01183A  BFC6               	btfsc	printf@c& (0+255),7,b
 14616  01183C  0E7F               	movlw	127
 14617  01183E  0100               	movlb	0	; () banked
 14618  011840  59B6               	subwfb	??_printf& (0+255),w,b
 14619  011842  B0D8               	btfsc	status,0,c
 14620  011844  D007               	goto	l20490
 14621                           
 14622                           ; BSR set to: 0
 14623                           ;doprnt.c: 1342: prec = c;
 14624  011846  0101               	movlb	1	; () banked
 14625  011848  51C6               	movf	printf@c& (0+255),w,b
 14626  01184A  0101               	movlb	1	; () banked
 14627  01184C  6FC4               	movwf	printf@prec& (0+255),b
 14628  01184E  6BC5               	clrf	(printf@prec+1)& (0+255),b
 14629  011850  BFC4               	btfsc	printf@prec& (0+255),7,b
 14630  011852  07C5               	decf	(printf@prec+1)& (0+255),f,b
 14631  011854                     l20490:
 14632                           
 14633                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14634  011854  0101               	movlb	1	; () banked
 14635  011856  51BF               	movf	printf@width& (0+255),w,b
 14636  011858  0101               	movlb	1	; () banked
 14637  01185A  11C0               	iorwf	(printf@width+1)& (0+255),w,b
 14638  01185C  B4D8               	btfsc	status,2,c
 14639  01185E  D014               	goto	l20496
 14640                           
 14641                           ; BSR set to: 1
 14642  011860  0E03               	movlw	3
 14643  011862  0101               	movlb	1	; () banked
 14644  011864  15B3               	andwf	printf@flag& (0+255),w,b
 14645  011866  0100               	movlb	0	; () banked
 14646  011868  6FB6               	movwf	??_printf& (0+255),b
 14647  01186A  0E00               	movlw	0
 14648  01186C  0101               	movlb	1	; () banked
 14649  01186E  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 14650  011870  0100               	movlb	0	; () banked
 14651  011872  6FB7               	movwf	(??_printf+1)& (0+255),b
 14652  011874  0100               	movlb	0	; () banked
 14653  011876  51B6               	movf	??_printf& (0+255),w,b
 14654  011878  0100               	movlb	0	; () banked
 14655  01187A  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 14656  01187C  B4D8               	btfsc	status,2,c
 14657  01187E  D004               	goto	l20496
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;doprnt.c: 1346: width--;
 14661  011880  0101               	movlb	1	; () banked
 14662  011882  07BF               	decf	printf@width& (0+255),f,b
 14663  011884  A0D8               	btfss	status,0,c
 14664  011886  07C0               	decf	(printf@width+1)& (0+255),f,b
 14665  011888                     l20496:
 14666                           
 14667                           ;doprnt.c: 1348: if(flag & 0x4000) {
 14668  011888  0101               	movlb	1	; () banked
 14669  01188A  ADB4               	btfss	(printf@flag+1)& (0+255),6,b
 14670  01188C  D01E               	goto	l20504
 14671                           
 14672                           ; BSR set to: 1
 14673                           ;doprnt.c: 1349: if(width > prec)
 14674  01188E  0101               	movlb	1	; () banked
 14675  011890  51BF               	movf	printf@width& (0+255),w,b
 14676  011892  0101               	movlb	1	; () banked
 14677  011894  5DC4               	subwf	printf@prec& (0+255),w,b
 14678  011896  0101               	movlb	1	; () banked
 14679  011898  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14680  01189A  0A80               	xorlw	128
 14681  01189C  0100               	movlb	0	; () banked
 14682  01189E  6FB6               	movwf	??_printf& (0+255),b
 14683  0118A0  0101               	movlb	1	; () banked
 14684  0118A2  51C0               	movf	(printf@width+1)& (0+255),w,b
 14685  0118A4  0A80               	xorlw	128
 14686  0118A6  0100               	movlb	0	; () banked
 14687  0118A8  59B6               	subwfb	??_printf& (0+255),w,b
 14688  0118AA  B0D8               	btfsc	status,0,c
 14689  0118AC  D009               	goto	l20502
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;doprnt.c: 1350: width -= prec;
 14693  0118AE  0101               	movlb	1	; () banked
 14694  0118B0  51C4               	movf	printf@prec& (0+255),w,b
 14695  0118B2  0101               	movlb	1	; () banked
 14696  0118B4  5FBF               	subwf	printf@width& (0+255),f,b
 14697  0118B6  0101               	movlb	1	; () banked
 14698  0118B8  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14699  0118BA  0101               	movlb	1	; () banked
 14700  0118BC  5BC0               	subwfb	(printf@width+1)& (0+255),f,b
 14701  0118BE  D005               	goto	l20504
 14702  0118C0                     l20502:
 14703                           
 14704                           ;doprnt.c: 1351: else
 14705                           ;doprnt.c: 1352: width = 0;
 14706  0118C0  0E00               	movlw	0
 14707  0118C2  0101               	movlb	1	; () banked
 14708  0118C4  6FC0               	movwf	(printf@width+1)& (0+255),b
 14709  0118C6  0E00               	movlw	0
 14710  0118C8  6FBF               	movwf	printf@width& (0+255),b
 14711  0118CA                     l20504:
 14712                           
 14713                           ; BSR set to: 1
 14714                           ;doprnt.c: 1353: }
 14715                           ;doprnt.c: 1381: if(width > c)
 14716  0118CA  0E80               	movlw	128
 14717  0118CC  0101               	movlb	1	; () banked
 14718  0118CE  BFC6               	btfsc	printf@c& (0+255),7,b
 14719  0118D0  0E7F               	movlw	127
 14720  0118D2  0100               	movlb	0	; () banked
 14721  0118D4  6FB6               	movwf	??_printf& (0+255),b
 14722  0118D6  0101               	movlb	1	; () banked
 14723  0118D8  51BF               	movf	printf@width& (0+255),w,b
 14724  0118DA  0101               	movlb	1	; () banked
 14725  0118DC  5DC6               	subwf	printf@c& (0+255),w,b
 14726  0118DE  0101               	movlb	1	; () banked
 14727  0118E0  51C0               	movf	(printf@width+1)& (0+255),w,b
 14728  0118E2  0A80               	xorlw	128
 14729  0118E4  0100               	movlb	0	; () banked
 14730  0118E6  59B6               	subwfb	??_printf& (0+255),w,b
 14731  0118E8  B0D8               	btfsc	status,0,c
 14732  0118EA  D00B               	goto	l20508
 14733                           
 14734                           ; BSR set to: 0
 14735                           ;doprnt.c: 1382: width -= c;
 14736  0118EC  0101               	movlb	1	; () banked
 14737  0118EE  51C6               	movf	printf@c& (0+255),w,b
 14738  0118F0  0101               	movlb	1	; () banked
 14739  0118F2  5FBF               	subwf	printf@width& (0+255),f,b
 14740  0118F4  0E00               	movlw	0
 14741  0118F6  0101               	movlb	1	; () banked
 14742  0118F8  BFC6               	btfsc	printf@c& (0+255),7,b
 14743  0118FA  0EFF               	movlw	255
 14744  0118FC  0101               	movlb	1	; () banked
 14745  0118FE  5BC0               	subwfb	(printf@width+1)& (0+255),f,b
 14746  011900  D005               	goto	l20510
 14747  011902                     l20508:
 14748                           
 14749                           ;doprnt.c: 1383: else
 14750                           ;doprnt.c: 1384: width = 0;
 14751  011902  0E00               	movlw	0
 14752  011904  0101               	movlb	1	; () banked
 14753  011906  6FC0               	movwf	(printf@width+1)& (0+255),b
 14754  011908  0E00               	movlw	0
 14755  01190A  6FBF               	movwf	printf@width& (0+255),b
 14756  01190C                     l20510:
 14757                           
 14758                           ; BSR set to: 1
 14759                           ;doprnt.c: 1422: {
 14760                           ;doprnt.c: 1424: if(width
 14761                           ;doprnt.c: 1428: )
 14762  01190C  0101               	movlb	1	; () banked
 14763  01190E  51BF               	movf	printf@width& (0+255),w,b
 14764  011910  0101               	movlb	1	; () banked
 14765  011912  11C0               	iorwf	(printf@width+1)& (0+255),w,b
 14766  011914  B4D8               	btfsc	status,2,c
 14767  011916  D00D               	goto	l20516
 14768  011918                     l20512:
 14769                           
 14770                           ; BSR set to: 1
 14771                           ;doprnt.c: 1430: (putch(' ') );
 14772  011918  0E20               	movlw	32
 14773  01191A  EC76  F0D8         	call	_putch
 14774                           
 14775                           ;doprnt.c: 1431: while(--width);
 14776  01191E  0101               	movlb	1	; () banked
 14777  011920  07BF               	decf	printf@width& (0+255),f,b
 14778  011922  A0D8               	btfss	status,0,c
 14779  011924  07C0               	decf	(printf@width+1)& (0+255),f,b
 14780  011926  0101               	movlb	1	; () banked
 14781  011928  51BF               	movf	printf@width& (0+255),w,b
 14782  01192A  0101               	movlb	1	; () banked
 14783  01192C  11C0               	iorwf	(printf@width+1)& (0+255),w,b
 14784  01192E  A4D8               	btfss	status,2,c
 14785  011930  D7F3               	goto	l20512
 14786  011932                     l20516:
 14787                           
 14788                           ; BSR set to: 1
 14789                           ;doprnt.c: 1438: if(flag & 0x03)
 14790  011932  0E03               	movlw	3
 14791  011934  0101               	movlb	1	; () banked
 14792  011936  15B3               	andwf	printf@flag& (0+255),w,b
 14793  011938  0100               	movlb	0	; () banked
 14794  01193A  6FB6               	movwf	??_printf& (0+255),b
 14795  01193C  0E00               	movlw	0
 14796  01193E  0101               	movlb	1	; () banked
 14797  011940  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 14798  011942  0100               	movlb	0	; () banked
 14799  011944  6FB7               	movwf	(??_printf+1)& (0+255),b
 14800  011946  0100               	movlb	0	; () banked
 14801  011948  51B6               	movf	??_printf& (0+255),w,b
 14802  01194A  0100               	movlb	0	; () banked
 14803  01194C  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 14804  01194E  B4D8               	btfsc	status,2,c
 14805  011950  D04C               	goto	l20524
 14806                           
 14807                           ; BSR set to: 0
 14808                           ;doprnt.c: 1439: (putch('-') );
 14809  011952  0E2D               	movlw	45
 14810  011954  EC76  F0D8         	call	_putch
 14811                           
 14812                           ;doprnt.c: 1469: }
 14813                           ;doprnt.c: 1474: while(prec--) {
 14814  011958  D048               	goto	l20524
 14815  01195A                     l20520:
 14816                           
 14817                           ;doprnt.c: 1478: {
 14818                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14819  01195A  C1C4  F0B6         	movff	printf@prec,??_printf
 14820  01195E  C1C5  F0B7         	movff	printf@prec+1,??_printf+1
 14821  011962  0100               	movlb	0	; () banked
 14822  011964  90D8               	bcf	status,0,c
 14823  011966  37B6               	rlcf	??_printf& (0+255),f,b
 14824  011968  37B7               	rlcf	(??_printf+1)& (0+255),f,b
 14825  01196A  0100               	movlb	0	; () banked
 14826  01196C  90D8               	bcf	status,0,c
 14827  01196E  37B6               	rlcf	??_printf& (0+255),f,b
 14828  011970  37B7               	rlcf	(??_printf+1)& (0+255),f,b
 14829  011972  0E8B               	movlw	low _dpowers
 14830  011974  0100               	movlb	0	; () banked
 14831  011976  25B6               	addwf	??_printf& (0+255),w,b
 14832  011978  6EF6               	movwf	tblptrl,c
 14833  01197A  0EFB               	movlw	high _dpowers
 14834  01197C  21B7               	addwfc	(??_printf+1)& (0+255),w,b
 14835  01197E  6EF7               	movwf	tblptrh,c
 14836  011980                     	if	1	;There are 3 active tblptr bytes
 14837  011980  6AF8               	clrf	tblptru,c
 14838  011982  0E00               	movlw	low (__mediumconst shr (0+16))
 14839  011984  22F8               	addwfc	tblptru,f,c
 14840  011986                     	endif
 14841  011986  0009               	tblrd		*+
 14842  011988  CFF5 F064          	movff	tablat,___lldiv@divisor
 14843  01198C  0009               	tblrd		*+
 14844  01198E  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 14845  011992  0009               	tblrd		*+
 14846  011994  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 14847  011998  000A               	tblrd		*-
 14848  01199A  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 14849  01199E  C1B9  F060         	movff	printf@val,___lldiv@dividend
 14850  0119A2  C1BA  F061         	movff	printf@val+1,___lldiv@dividend+1
 14851  0119A6  C1BB  F062         	movff	printf@val+2,___lldiv@dividend+2
 14852  0119AA  C1BC  F063         	movff	printf@val+3,___lldiv@dividend+3
 14853  0119AE  EC2E  F0CD         	call	___lldiv	;wreg free
 14854  0119B2  C060  F06D         	movff	?___lldiv,___llmod@dividend
 14855  0119B6  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
 14856  0119BA  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
 14857  0119BE  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
 14858  0119C2  0E0A               	movlw	10
 14859  0119C4  0100               	movlb	0	; () banked
 14860  0119C6  6F71               	movwf	___llmod@divisor& (0+255),b
 14861  0119C8  0E00               	movlw	0
 14862  0119CA  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 14863  0119CC  0E00               	movlw	0
 14864  0119CE  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 14865  0119D0  0E00               	movlw	0
 14866  0119D2  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 14867  0119D4  EC97  F0D1         	call	___llmod	;wreg free
 14868  0119D8  0100               	movlb	0	; () banked
 14869  0119DA  516D               	movf	?___llmod& (0+255),w,b
 14870  0119DC  0F30               	addlw	48
 14871  0119DE  0101               	movlb	1	; () banked
 14872  0119E0  6FC6               	movwf	printf@c& (0+255),b
 14873                           
 14874                           ; BSR set to: 1
 14875                           ;doprnt.c: 1523: }
 14876                           ;doprnt.c: 1524: (putch(c) );
 14877  0119E2  0101               	movlb	1	; () banked
 14878  0119E4  51C6               	movf	printf@c& (0+255),w,b
 14879  0119E6  EC76  F0D8         	call	_putch
 14880  0119EA                     l20524:
 14881  0119EA  0101               	movlb	1	; () banked
 14882  0119EC  07C4               	decf	printf@prec& (0+255),f,b
 14883  0119EE  A0D8               	btfss	status,0,c
 14884  0119F0  07C5               	decf	(printf@prec+1)& (0+255),f,b
 14885  0119F2  0101               	movlb	1	; () banked
 14886  0119F4  29C4               	incf	printf@prec& (0+255),w,b
 14887  0119F6  E1B1               	bnz	l20520
 14888  0119F8  0101               	movlb	1	; () banked
 14889  0119FA  29C5               	incf	(printf@prec+1)& (0+255),w,b
 14890  0119FC  A4D8               	btfss	status,2,c
 14891  0119FE  D7AD               	goto	l20520
 14892  011A00                     l20526:
 14893  011A00  C0B1  FFF6         	movff	printf@f,tblptrl
 14894  011A04  C0B2  FFF7         	movff	printf@f+1,tblptrh
 14895  011A08  0100               	movlb	0	; () banked
 14896  011A0A  4BB1               	infsnz	printf@f& (0+255),f,b
 14897  011A0C  2BB2               	incf	(printf@f+1)& (0+255),f,b
 14898  011A0E                     	if	0	;tblptru may be non-zero
 14899  011A0E                     	endif
 14900  011A0E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 14901  011A0E  0E00               	movlw	low (__mediumconst shr (0+16))
 14902  011A10  6EF8               	movwf	tblptru,c
 14903  011A12                     	endif
 14904  011A12  0008               	tblrd		*
 14905  011A14  CFF5 F1C6          	movff	tablat,printf@c
 14906  011A18  0101               	movlb	1	; () banked
 14907  011A1A  51C6               	movf	printf@c& (0+255),w,b
 14908  011A1C  B4D8               	btfsc	status,2,c
 14909  011A1E  0012               	return	
 14910  011A20  EFA8  F086         	goto	l20222
 14911  011A24                     __end_of_printf:
 14912                           	opt stack 0
 14913                           tblptru	equ	0xFF8
 14914                           tblptrh	equ	0xFF7
 14915                           tblptrl	equ	0xFF6
 14916                           tablat	equ	0xFF5
 14917                           prodh	equ	0xFF4
 14918                           prodl	equ	0xFF3
 14919                           intcon	equ	0xFF2
 14920                           postinc0	equ	0xFEE
 14921                           wreg	equ	0xFE8
 14922                           postdec1	equ	0xFE5
 14923                           fsr1h	equ	0xFE2
 14924                           fsr1l	equ	0xFE1
 14925                           indf2	equ	0xFDF
 14926                           postinc2	equ	0xFDE
 14927                           postdec2	equ	0xFDD
 14928                           fsr2h	equ	0xFDA
 14929                           fsr2l	equ	0xFD9
 14930                           status	equ	0xFD8
 14931                           
 14932 ;; *************** function _scale *****************
 14933 ;; Defined at:
 14934 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 14935 ;; Parameters:    Size  Location     Type
 14936 ;;  scl             1    wreg     char 
 14937 ;; Auto vars:     Size  Location     Type
 14938 ;;  scl             1   41[BANK0 ] char 
 14939 ;; Return value:  Size  Location     Type
 14940 ;;                  3   35[BANK0 ] char 
 14941 ;; Registers used:
 14942 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14943 ;; Tracked objects:
 14944 ;;		On entry : 0/0
 14945 ;;		On exit  : 0/0
 14946 ;;		Unchanged: 0/0
 14947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14948 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14949 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14951 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14952 ;;Total ram usage:        7 bytes
 14953 ;; Hardware stack levels used:    1
 14954 ;; Hardware stack levels required when called:    5
 14955 ;; This function calls:
 14956 ;;		___awdiv
 14957 ;;		___awmod
 14958 ;;		___ftmul
 14959 ;;		___wmul
 14960 ;; This function is called by:
 14961 ;;		_printf
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           	psect	text24
 14966  013E64                     __ptext24:
 14967                           	opt stack 0
 14968  013E64                     _scale:
 14969                           	opt stack 22
 14970                           
 14971                           ; BSR set to: 1
 14972                           ;incstack = 0
 14973                           ;scale@scl stored from wreg
 14974  013E64  0100               	movlb	0	; () banked
 14975  013E66  6F89               	movwf	scale@scl& (0+255),b
 14976                           
 14977                           ;doprnt.c: 428: if(scl < 0) {
 14978  013E68  0100               	movlb	0	; () banked
 14979  013E6A  AF89               	btfss	scale@scl& (0+255),7,b
 14980  013E6C  D13C               	goto	l19834
 14981                           
 14982                           ; BSR set to: 0
 14983                           ;doprnt.c: 429: scl = -scl;
 14984  013E6E  0100               	movlb	0	; () banked
 14985  013E70  6D89               	negf	scale@scl& (0+255),b
 14986                           
 14987                           ;doprnt.c: 430: if(scl>=110)
 14988  013E72  0100               	movlb	0	; () banked
 14989  013E74  5189               	movf	scale@scl& (0+255),w,b
 14990  013E76  0A80               	xorlw	128
 14991  013E78  0F12               	addlw	-238
 14992  013E7A  A0D8               	btfss	status,0,c
 14993  013E7C  D0B5               	goto	l19824
 14994                           
 14995                           ; BSR set to: 0
 14996                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14997  013E7E  0E00               	movlw	0
 14998  013E80  0100               	movlb	0	; () banked
 14999  013E82  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15000  013E84  0E03               	movlw	3
 15001  013E86  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15002  013E88  0E00               	movlw	0
 15003  013E8A  0100               	movlb	0	; () banked
 15004  013E8C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15005  013E8E  0E0A               	movlw	10
 15006  013E90  6F68               	movwf	___awdiv@divisor& (0+255),b
 15007  013E92  0E00               	movlw	0
 15008  013E94  0100               	movlb	0	; () banked
 15009  013E96  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15010  013E98  0E64               	movlw	100
 15011  013E9A  6F62               	movwf	___awmod@divisor& (0+255),b
 15012  013E9C  0100               	movlb	0	; () banked
 15013  013E9E  5189               	movf	scale@scl& (0+255),w,b
 15014  013EA0  0100               	movlb	0	; () banked
 15015  013EA2  6F60               	movwf	___awmod@dividend& (0+255),b
 15016  013EA4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15017  013EA6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15018  013EA8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15019  013EAA  ECA7  F0D0         	call	___awmod	;wreg free
 15020  013EAE  C060  F066         	movff	?___awmod,___awdiv@dividend
 15021  013EB2  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 15022  013EB6  EC70  F0CC         	call	___awdiv	;wreg free
 15023  013EBA  0E09               	movlw	9
 15024  013EBC  0100               	movlb	0	; () banked
 15025  013EBE  2566               	addwf	?___awdiv& (0+255),w,b
 15026  013EC0  0100               	movlb	0	; () banked
 15027  013EC2  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15028  013EC4  0E00               	movlw	0
 15029  013EC6  0100               	movlb	0	; () banked
 15030  013EC8  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15031  013ECA  0100               	movlb	0	; () banked
 15032  013ECC  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15033  013ECE  ECB9  F0D6         	call	___wmul	;wreg free
 15034  013ED2  0EB3               	movlw	low __npowers_
 15035  013ED4  0100               	movlb	0	; () banked
 15036  013ED6  256E               	addwf	?___wmul& (0+255),w,b
 15037  013ED8  6EF6               	movwf	tblptrl,c
 15038  013EDA  0EFB               	movlw	high __npowers_
 15039  013EDC  0100               	movlb	0	; () banked
 15040  013EDE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15041  013EE0  6EF7               	movwf	tblptrh,c
 15042  013EE2                     	if	1	;There are 3 active tblptr bytes
 15043  013EE2  6AF8               	clrf	tblptru,c
 15044  013EE4  0E00               	movlw	low (__mediumconst shr (0+16))
 15045  013EE6  22F8               	addwfc	tblptru,f,c
 15046  013EE8                     	endif
 15047  013EE8  0009               	tblrd		*+
 15048  013EEA  CFF5 F077          	movff	tablat,___ftmul@f2
 15049  013EEE  0009               	tblrd		*+
 15050  013EF0  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15051  013EF4  000A               	tblrd		*-
 15052  013EF6  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15053  013EFA  0E00               	movlw	0
 15054  013EFC  0100               	movlb	0	; () banked
 15055  013EFE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15056  013F00  0E64               	movlw	100
 15057  013F02  6F68               	movwf	___awdiv@divisor& (0+255),b
 15058  013F04  0100               	movlb	0	; () banked
 15059  013F06  5189               	movf	scale@scl& (0+255),w,b
 15060  013F08  0100               	movlb	0	; () banked
 15061  013F0A  6F66               	movwf	___awdiv@dividend& (0+255),b
 15062  013F0C  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15063  013F0E  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 15064  013F10  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 15065  013F12  EC70  F0CC         	call	___awdiv	;wreg free
 15066  013F16  0E12               	movlw	18
 15067  013F18  0100               	movlb	0	; () banked
 15068  013F1A  2566               	addwf	?___awdiv& (0+255),w,b
 15069  013F1C  0100               	movlb	0	; () banked
 15070  013F1E  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15071  013F20  0E00               	movlw	0
 15072  013F22  0100               	movlb	0	; () banked
 15073  013F24  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15074  013F26  0100               	movlb	0	; () banked
 15075  013F28  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15076  013F2A  0E00               	movlw	0
 15077  013F2C  0100               	movlb	0	; () banked
 15078  013F2E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15079  013F30  0E03               	movlw	3
 15080  013F32  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15081  013F34  ECB9  F0D6         	call	___wmul	;wreg free
 15082  013F38  0EB3               	movlw	low __npowers_
 15083  013F3A  0100               	movlb	0	; () banked
 15084  013F3C  256E               	addwf	?___wmul& (0+255),w,b
 15085  013F3E  6EF6               	movwf	tblptrl,c
 15086  013F40  0EFB               	movlw	high __npowers_
 15087  013F42  0100               	movlb	0	; () banked
 15088  013F44  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15089  013F46  6EF7               	movwf	tblptrh,c
 15090  013F48                     	if	1	;There are 3 active tblptr bytes
 15091  013F48  6AF8               	clrf	tblptru,c
 15092  013F4A  0E00               	movlw	low (__mediumconst shr (0+16))
 15093  013F4C  22F8               	addwfc	tblptru,f,c
 15094  013F4E                     	endif
 15095  013F4E  0009               	tblrd		*+
 15096  013F50  CFF5 F074          	movff	tablat,___ftmul@f1
 15097  013F54  0009               	tblrd		*+
 15098  013F56  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15099  013F5A  000A               	tblrd		*-
 15100  013F5C  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15101  013F60  EC00  F0C1         	call	___ftmul	;wreg free
 15102  013F64  C074  F086         	movff	?___ftmul,_scale$8172
 15103  013F68  C075  F087         	movff	?___ftmul+1,_scale$8172+1
 15104  013F6C  C076  F088         	movff	?___ftmul+2,_scale$8172+2
 15105                           
 15106                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15107  013F70  C086  F074         	movff	_scale$8172,___ftmul@f1
 15108  013F74  C087  F075         	movff	_scale$8172+1,___ftmul@f1+1
 15109  013F78  C088  F076         	movff	_scale$8172+2,___ftmul@f1+2
 15110  013F7C  0E00               	movlw	0
 15111  013F7E  0100               	movlb	0	; () banked
 15112  013F80  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15113  013F82  0E03               	movlw	3
 15114  013F84  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15115  013F86  0E00               	movlw	0
 15116  013F88  0100               	movlb	0	; () banked
 15117  013F8A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15118  013F8C  0E0A               	movlw	10
 15119  013F8E  6F62               	movwf	___awmod@divisor& (0+255),b
 15120  013F90  0100               	movlb	0	; () banked
 15121  013F92  5189               	movf	scale@scl& (0+255),w,b
 15122  013F94  0100               	movlb	0	; () banked
 15123  013F96  6F60               	movwf	___awmod@dividend& (0+255),b
 15124  013F98  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15125  013F9A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15126  013F9C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15127  013F9E  ECA7  F0D0         	call	___awmod	;wreg free
 15128  013FA2  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15129  013FA6  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15130  013FAA  ECB9  F0D6         	call	___wmul	;wreg free
 15131  013FAE  0EB3               	movlw	low __npowers_
 15132  013FB0  0100               	movlb	0	; () banked
 15133  013FB2  256E               	addwf	?___wmul& (0+255),w,b
 15134  013FB4  6EF6               	movwf	tblptrl,c
 15135  013FB6  0EFB               	movlw	high __npowers_
 15136  013FB8  0100               	movlb	0	; () banked
 15137  013FBA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15138  013FBC  6EF7               	movwf	tblptrh,c
 15139  013FBE                     	if	1	;There are 3 active tblptr bytes
 15140  013FBE  6AF8               	clrf	tblptru,c
 15141  013FC0  0E00               	movlw	low (__mediumconst shr (0+16))
 15142  013FC2  22F8               	addwfc	tblptru,f,c
 15143  013FC4                     	endif
 15144  013FC4  0009               	tblrd		*+
 15145  013FC6  CFF5 F077          	movff	tablat,___ftmul@f2
 15146  013FCA  0009               	tblrd		*+
 15147  013FCC  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15148  013FD0  000A               	tblrd		*-
 15149  013FD2  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15150  013FD6  EC00  F0C1         	call	___ftmul	;wreg free
 15151  013FDA  C074  F083         	movff	?___ftmul,?_scale
 15152  013FDE  C075  F084         	movff	?___ftmul+1,?_scale+1
 15153  013FE2  C076  F085         	movff	?___ftmul+2,?_scale+2
 15154  013FE6  0012               	return	
 15155  013FE8                     l19824:
 15156                           
 15157                           ;doprnt.c: 432: else if(scl > 10)
 15158  013FE8  0100               	movlb	0	; () banked
 15159  013FEA  5189               	movf	scale@scl& (0+255),w,b
 15160  013FEC  0A80               	xorlw	128
 15161  013FEE  0F75               	addlw	-139
 15162  013FF0  A0D8               	btfss	status,0,c
 15163  013FF2  D063               	goto	l19830
 15164                           
 15165                           ; BSR set to: 0
 15166                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 15167  013FF4  0E00               	movlw	0
 15168  013FF6  0100               	movlb	0	; () banked
 15169  013FF8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15170  013FFA  0E0A               	movlw	10
 15171  013FFC  6F68               	movwf	___awdiv@divisor& (0+255),b
 15172  013FFE  0100               	movlb	0	; () banked
 15173  014000  5189               	movf	scale@scl& (0+255),w,b
 15174  014002  0100               	movlb	0	; () banked
 15175  014004  6F66               	movwf	___awdiv@dividend& (0+255),b
 15176  014006  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15177  014008  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 15178  01400A  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 15179  01400C  EC70  F0CC         	call	___awdiv	;wreg free
 15180  014010  0E09               	movlw	9
 15181  014012  0100               	movlb	0	; () banked
 15182  014014  2566               	addwf	?___awdiv& (0+255),w,b
 15183  014016  0100               	movlb	0	; () banked
 15184  014018  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15185  01401A  0E00               	movlw	0
 15186  01401C  0100               	movlb	0	; () banked
 15187  01401E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15188  014020  0100               	movlb	0	; () banked
 15189  014022  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15190  014024  0E00               	movlw	0
 15191  014026  0100               	movlb	0	; () banked
 15192  014028  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15193  01402A  0E03               	movlw	3
 15194  01402C  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15195  01402E  ECB9  F0D6         	call	___wmul	;wreg free
 15196  014032  0EB3               	movlw	low __npowers_
 15197  014034  0100               	movlb	0	; () banked
 15198  014036  256E               	addwf	?___wmul& (0+255),w,b
 15199  014038  6EF6               	movwf	tblptrl,c
 15200  01403A  0EFB               	movlw	high __npowers_
 15201  01403C  0100               	movlb	0	; () banked
 15202  01403E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15203  014040  6EF7               	movwf	tblptrh,c
 15204  014042                     	if	1	;There are 3 active tblptr bytes
 15205  014042  6AF8               	clrf	tblptru,c
 15206  014044  0E00               	movlw	low (__mediumconst shr (0+16))
 15207  014046  22F8               	addwfc	tblptru,f,c
 15208  014048                     	endif
 15209  014048  0009               	tblrd		*+
 15210  01404A  CFF5 F074          	movff	tablat,___ftmul@f1
 15211  01404E  0009               	tblrd		*+
 15212  014050  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15213  014054  000A               	tblrd		*-
 15214  014056  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15215  01405A  0E00               	movlw	0
 15216  01405C  0100               	movlb	0	; () banked
 15217  01405E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15218  014060  0E03               	movlw	3
 15219  014062  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15220  014064  0E00               	movlw	0
 15221  014066  0100               	movlb	0	; () banked
 15222  014068  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15223  01406A  0E0A               	movlw	10
 15224  01406C  6F62               	movwf	___awmod@divisor& (0+255),b
 15225  01406E  0100               	movlb	0	; () banked
 15226  014070  5189               	movf	scale@scl& (0+255),w,b
 15227  014072  0100               	movlb	0	; () banked
 15228  014074  6F60               	movwf	___awmod@dividend& (0+255),b
 15229  014076  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15230  014078  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15231  01407A  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15232  01407C  ECA7  F0D0         	call	___awmod	;wreg free
 15233  014080  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15234  014084  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15235  014088  ECB9  F0D6         	call	___wmul	;wreg free
 15236  01408C  0EB3               	movlw	low __npowers_
 15237  01408E  0100               	movlb	0	; () banked
 15238  014090  256E               	addwf	?___wmul& (0+255),w,b
 15239  014092  6EF6               	movwf	tblptrl,c
 15240  014094  0EFB               	movlw	high __npowers_
 15241  014096  0100               	movlb	0	; () banked
 15242  014098  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15243  01409A  6EF7               	movwf	tblptrh,c
 15244  01409C                     	if	1	;There are 3 active tblptr bytes
 15245  01409C  6AF8               	clrf	tblptru,c
 15246  01409E  0E00               	movlw	low (__mediumconst shr (0+16))
 15247  0140A0  22F8               	addwfc	tblptru,f,c
 15248  0140A2                     	endif
 15249  0140A2  0009               	tblrd		*+
 15250  0140A4  CFF5 F077          	movff	tablat,___ftmul@f2
 15251  0140A8  0009               	tblrd		*+
 15252  0140AA  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15253  0140AE  000A               	tblrd		*-
 15254  0140B0  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15255  0140B4  EC00  F0C1         	call	___ftmul	;wreg free
 15256  0140B8  D790               	goto	L7
 15257  0140BA                     l19830:
 15258                           
 15259                           ;doprnt.c: 434: return _npowers_[scl];
 15260  0140BA  0100               	movlb	0	; () banked
 15261  0140BC  5189               	movf	scale@scl& (0+255),w,b
 15262  0140BE  0D03               	mullw	3
 15263  0140C0  0EB3               	movlw	low __npowers_
 15264  0140C2  24F3               	addwf	prodl,w,c
 15265  0140C4  6EF6               	movwf	tblptrl,c
 15266  0140C6  0EFB               	movlw	high __npowers_
 15267  0140C8  20F4               	addwfc	prodh,w,c
 15268  0140CA  6EF7               	movwf	tblptrh,c
 15269  0140CC                     	if	1	;There are 3 active tblptr bytes
 15270  0140CC  6AF8               	clrf	tblptru,c
 15271  0140CE  0E00               	movlw	low (__mediumconst shr (0+16))
 15272  0140D0  22F8               	addwfc	tblptru,f,c
 15273  0140D2                     	endif
 15274  0140D2  0009               	tblrd		*+
 15275  0140D4  CFF5 F083          	movff	tablat,?_scale
 15276  0140D8  0009               	tblrd		*+
 15277  0140DA  CFF5 F084          	movff	tablat,?_scale+1
 15278  0140DE  000A               	tblrd		*-
 15279  0140E0  CFF5 F085          	movff	tablat,?_scale+2
 15280                           
 15281                           ; BSR set to: 0
 15282  0140E4  0012               	return	
 15283  0140E6                     l19834:
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;doprnt.c: 435: }
 15287                           ;doprnt.c: 436: if(scl>=110)
 15288  0140E6  0100               	movlb	0	; () banked
 15289  0140E8  5189               	movf	scale@scl& (0+255),w,b
 15290  0140EA  0A80               	xorlw	128
 15291  0140EC  0F12               	addlw	-238
 15292  0140EE  A0D8               	btfss	status,0,c
 15293  0140F0  D0B5               	goto	l19842
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15297  0140F2  0E00               	movlw	0
 15298  0140F4  0100               	movlb	0	; () banked
 15299  0140F6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15300  0140F8  0E03               	movlw	3
 15301  0140FA  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15302  0140FC  0E00               	movlw	0
 15303  0140FE  0100               	movlb	0	; () banked
 15304  014100  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15305  014102  0E0A               	movlw	10
 15306  014104  6F68               	movwf	___awdiv@divisor& (0+255),b
 15307  014106  0E00               	movlw	0
 15308  014108  0100               	movlb	0	; () banked
 15309  01410A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15310  01410C  0E64               	movlw	100
 15311  01410E  6F62               	movwf	___awmod@divisor& (0+255),b
 15312  014110  0100               	movlb	0	; () banked
 15313  014112  5189               	movf	scale@scl& (0+255),w,b
 15314  014114  0100               	movlb	0	; () banked
 15315  014116  6F60               	movwf	___awmod@dividend& (0+255),b
 15316  014118  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15317  01411A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15318  01411C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15319  01411E  ECA7  F0D0         	call	___awmod	;wreg free
 15320  014122  C060  F066         	movff	?___awmod,___awdiv@dividend
 15321  014126  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 15322  01412A  EC70  F0CC         	call	___awdiv	;wreg free
 15323  01412E  0E09               	movlw	9
 15324  014130  0100               	movlb	0	; () banked
 15325  014132  2566               	addwf	?___awdiv& (0+255),w,b
 15326  014134  0100               	movlb	0	; () banked
 15327  014136  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15328  014138  0E00               	movlw	0
 15329  01413A  0100               	movlb	0	; () banked
 15330  01413C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15331  01413E  0100               	movlb	0	; () banked
 15332  014140  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15333  014142  ECB9  F0D6         	call	___wmul	;wreg free
 15334  014146  0EDA               	movlw	low __powers_
 15335  014148  0100               	movlb	0	; () banked
 15336  01414A  256E               	addwf	?___wmul& (0+255),w,b
 15337  01414C  6EF6               	movwf	tblptrl,c
 15338  01414E  0EFB               	movlw	high __powers_
 15339  014150  0100               	movlb	0	; () banked
 15340  014152  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15341  014154  6EF7               	movwf	tblptrh,c
 15342  014156                     	if	1	;There are 3 active tblptr bytes
 15343  014156  6AF8               	clrf	tblptru,c
 15344  014158  0E00               	movlw	low (__mediumconst shr (0+16))
 15345  01415A  22F8               	addwfc	tblptru,f,c
 15346  01415C                     	endif
 15347  01415C  0009               	tblrd		*+
 15348  01415E  CFF5 F077          	movff	tablat,___ftmul@f2
 15349  014162  0009               	tblrd		*+
 15350  014164  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15351  014168  000A               	tblrd		*-
 15352  01416A  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15353  01416E  0E00               	movlw	0
 15354  014170  0100               	movlb	0	; () banked
 15355  014172  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15356  014174  0E64               	movlw	100
 15357  014176  6F68               	movwf	___awdiv@divisor& (0+255),b
 15358  014178  0100               	movlb	0	; () banked
 15359  01417A  5189               	movf	scale@scl& (0+255),w,b
 15360  01417C  0100               	movlb	0	; () banked
 15361  01417E  6F66               	movwf	___awdiv@dividend& (0+255),b
 15362  014180  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15363  014182  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 15364  014184  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 15365  014186  EC70  F0CC         	call	___awdiv	;wreg free
 15366  01418A  0E12               	movlw	18
 15367  01418C  0100               	movlb	0	; () banked
 15368  01418E  2566               	addwf	?___awdiv& (0+255),w,b
 15369  014190  0100               	movlb	0	; () banked
 15370  014192  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15371  014194  0E00               	movlw	0
 15372  014196  0100               	movlb	0	; () banked
 15373  014198  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15374  01419A  0100               	movlb	0	; () banked
 15375  01419C  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15376  01419E  0E00               	movlw	0
 15377  0141A0  0100               	movlb	0	; () banked
 15378  0141A2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15379  0141A4  0E03               	movlw	3
 15380  0141A6  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15381  0141A8  ECB9  F0D6         	call	___wmul	;wreg free
 15382  0141AC  0EDA               	movlw	low __powers_
 15383  0141AE  0100               	movlb	0	; () banked
 15384  0141B0  256E               	addwf	?___wmul& (0+255),w,b
 15385  0141B2  6EF6               	movwf	tblptrl,c
 15386  0141B4  0EFB               	movlw	high __powers_
 15387  0141B6  0100               	movlb	0	; () banked
 15388  0141B8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15389  0141BA  6EF7               	movwf	tblptrh,c
 15390  0141BC                     	if	1	;There are 3 active tblptr bytes
 15391  0141BC  6AF8               	clrf	tblptru,c
 15392  0141BE  0E00               	movlw	low (__mediumconst shr (0+16))
 15393  0141C0  22F8               	addwfc	tblptru,f,c
 15394  0141C2                     	endif
 15395  0141C2  0009               	tblrd		*+
 15396  0141C4  CFF5 F074          	movff	tablat,___ftmul@f1
 15397  0141C8  0009               	tblrd		*+
 15398  0141CA  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15399  0141CE  000A               	tblrd		*-
 15400  0141D0  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15401  0141D4  EC00  F0C1         	call	___ftmul	;wreg free
 15402  0141D8  C074  F086         	movff	?___ftmul,_scale$8172
 15403  0141DC  C075  F087         	movff	?___ftmul+1,_scale$8172+1
 15404  0141E0  C076  F088         	movff	?___ftmul+2,_scale$8172+2
 15405                           
 15406                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15407  0141E4  C086  F074         	movff	_scale$8172,___ftmul@f1
 15408  0141E8  C087  F075         	movff	_scale$8172+1,___ftmul@f1+1
 15409  0141EC  C088  F076         	movff	_scale$8172+2,___ftmul@f1+2
 15410  0141F0  0E00               	movlw	0
 15411  0141F2  0100               	movlb	0	; () banked
 15412  0141F4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15413  0141F6  0E03               	movlw	3
 15414  0141F8  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15415  0141FA  0E00               	movlw	0
 15416  0141FC  0100               	movlb	0	; () banked
 15417  0141FE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15418  014200  0E0A               	movlw	10
 15419  014202  6F62               	movwf	___awmod@divisor& (0+255),b
 15420  014204  0100               	movlb	0	; () banked
 15421  014206  5189               	movf	scale@scl& (0+255),w,b
 15422  014208  0100               	movlb	0	; () banked
 15423  01420A  6F60               	movwf	___awmod@dividend& (0+255),b
 15424  01420C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15425  01420E  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15426  014210  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15427  014212  ECA7  F0D0         	call	___awmod	;wreg free
 15428  014216  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15429  01421A  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15430  01421E  ECB9  F0D6         	call	___wmul	;wreg free
 15431  014222  0EDA               	movlw	low __powers_
 15432  014224  0100               	movlb	0	; () banked
 15433  014226  256E               	addwf	?___wmul& (0+255),w,b
 15434  014228  6EF6               	movwf	tblptrl,c
 15435  01422A  0EFB               	movlw	high __powers_
 15436  01422C  0100               	movlb	0	; () banked
 15437  01422E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15438  014230  6EF7               	movwf	tblptrh,c
 15439  014232                     	if	1	;There are 3 active tblptr bytes
 15440  014232  6AF8               	clrf	tblptru,c
 15441  014234  0E00               	movlw	low (__mediumconst shr (0+16))
 15442  014236  22F8               	addwfc	tblptru,f,c
 15443  014238                     	endif
 15444  014238  0009               	tblrd		*+
 15445  01423A  CFF5 F077          	movff	tablat,___ftmul@f2
 15446  01423E  0009               	tblrd		*+
 15447  014240  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15448  014244  000A               	tblrd		*-
 15449  014246  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15450  01424A  EC00  F0C1         	call	___ftmul	;wreg free
 15451  01424E  C074  F083         	movff	?___ftmul,?_scale
 15452  014252  C075  F084         	movff	?___ftmul+1,?_scale+1
 15453  014256  C076  F085         	movff	?___ftmul+2,?_scale+2
 15454  01425A  0012               	return	
 15455  01425C                     l19842:
 15456                           
 15457                           ;doprnt.c: 438: else if(scl > 10)
 15458  01425C  0100               	movlb	0	; () banked
 15459  01425E  5189               	movf	scale@scl& (0+255),w,b
 15460  014260  0A80               	xorlw	128
 15461  014262  0F75               	addlw	-139
 15462  014264  A0D8               	btfss	status,0,c
 15463  014266  D063               	goto	l19848
 15464                           
 15465                           ; BSR set to: 0
 15466                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 15467  014268  0E00               	movlw	0
 15468  01426A  0100               	movlb	0	; () banked
 15469  01426C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15470  01426E  0E0A               	movlw	10
 15471  014270  6F68               	movwf	___awdiv@divisor& (0+255),b
 15472  014272  0100               	movlb	0	; () banked
 15473  014274  5189               	movf	scale@scl& (0+255),w,b
 15474  014276  0100               	movlb	0	; () banked
 15475  014278  6F66               	movwf	___awdiv@dividend& (0+255),b
 15476  01427A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15477  01427C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 15478  01427E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 15479  014280  EC70  F0CC         	call	___awdiv	;wreg free
 15480  014284  0E09               	movlw	9
 15481  014286  0100               	movlb	0	; () banked
 15482  014288  2566               	addwf	?___awdiv& (0+255),w,b
 15483  01428A  0100               	movlb	0	; () banked
 15484  01428C  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15485  01428E  0E00               	movlw	0
 15486  014290  0100               	movlb	0	; () banked
 15487  014292  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15488  014294  0100               	movlb	0	; () banked
 15489  014296  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15490  014298  0E00               	movlw	0
 15491  01429A  0100               	movlb	0	; () banked
 15492  01429C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15493  01429E  0E03               	movlw	3
 15494  0142A0  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15495  0142A2  ECB9  F0D6         	call	___wmul	;wreg free
 15496  0142A6  0EDA               	movlw	low __powers_
 15497  0142A8  0100               	movlb	0	; () banked
 15498  0142AA  256E               	addwf	?___wmul& (0+255),w,b
 15499  0142AC  6EF6               	movwf	tblptrl,c
 15500  0142AE  0EFB               	movlw	high __powers_
 15501  0142B0  0100               	movlb	0	; () banked
 15502  0142B2  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15503  0142B4  6EF7               	movwf	tblptrh,c
 15504  0142B6                     	if	1	;There are 3 active tblptr bytes
 15505  0142B6  6AF8               	clrf	tblptru,c
 15506  0142B8  0E00               	movlw	low (__mediumconst shr (0+16))
 15507  0142BA  22F8               	addwfc	tblptru,f,c
 15508  0142BC                     	endif
 15509  0142BC  0009               	tblrd		*+
 15510  0142BE  CFF5 F074          	movff	tablat,___ftmul@f1
 15511  0142C2  0009               	tblrd		*+
 15512  0142C4  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15513  0142C8  000A               	tblrd		*-
 15514  0142CA  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15515  0142CE  0E00               	movlw	0
 15516  0142D0  0100               	movlb	0	; () banked
 15517  0142D2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15518  0142D4  0E03               	movlw	3
 15519  0142D6  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15520  0142D8  0E00               	movlw	0
 15521  0142DA  0100               	movlb	0	; () banked
 15522  0142DC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15523  0142DE  0E0A               	movlw	10
 15524  0142E0  6F62               	movwf	___awmod@divisor& (0+255),b
 15525  0142E2  0100               	movlb	0	; () banked
 15526  0142E4  5189               	movf	scale@scl& (0+255),w,b
 15527  0142E6  0100               	movlb	0	; () banked
 15528  0142E8  6F60               	movwf	___awmod@dividend& (0+255),b
 15529  0142EA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15530  0142EC  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15531  0142EE  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15532  0142F0  ECA7  F0D0         	call	___awmod	;wreg free
 15533  0142F4  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15534  0142F8  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15535  0142FC  ECB9  F0D6         	call	___wmul	;wreg free
 15536  014300  0EDA               	movlw	low __powers_
 15537  014302  0100               	movlb	0	; () banked
 15538  014304  256E               	addwf	?___wmul& (0+255),w,b
 15539  014306  6EF6               	movwf	tblptrl,c
 15540  014308  0EFB               	movlw	high __powers_
 15541  01430A  0100               	movlb	0	; () banked
 15542  01430C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15543  01430E  6EF7               	movwf	tblptrh,c
 15544  014310                     	if	1	;There are 3 active tblptr bytes
 15545  014310  6AF8               	clrf	tblptru,c
 15546  014312  0E00               	movlw	low (__mediumconst shr (0+16))
 15547  014314  22F8               	addwfc	tblptru,f,c
 15548  014316                     	endif
 15549  014316  0009               	tblrd		*+
 15550  014318  CFF5 F077          	movff	tablat,___ftmul@f2
 15551  01431C  0009               	tblrd		*+
 15552  01431E  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15553  014322  000A               	tblrd		*-
 15554  014324  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15555  014328  EC00  F0C1         	call	___ftmul	;wreg free
 15556  01432C  D790               	goto	L8
 15557  01432E                     l19848:
 15558                           
 15559                           ;doprnt.c: 440: return _powers_[scl];
 15560  01432E  0100               	movlb	0	; () banked
 15561  014330  5189               	movf	scale@scl& (0+255),w,b
 15562  014332  0D03               	mullw	3
 15563  014334  0EDA               	movlw	low __powers_
 15564  014336  24F3               	addwf	prodl,w,c
 15565  014338  6EF6               	movwf	tblptrl,c
 15566  01433A  0EFB               	movlw	high __powers_
 15567  01433C  20F4               	addwfc	prodh,w,c
 15568  01433E  6EF7               	movwf	tblptrh,c
 15569  014340                     	if	1	;There are 3 active tblptr bytes
 15570  014340  6AF8               	clrf	tblptru,c
 15571  014342  0E00               	movlw	low (__mediumconst shr (0+16))
 15572  014344  22F8               	addwfc	tblptru,f,c
 15573  014346                     	endif
 15574  014346  0009               	tblrd		*+
 15575  014348  CFF5 F083          	movff	tablat,?_scale
 15576  01434C  0009               	tblrd		*+
 15577  01434E  CFF5 F084          	movff	tablat,?_scale+1
 15578  014352  000A               	tblrd		*-
 15579  014354  CFF5 F085          	movff	tablat,?_scale+2
 15580  014358  0012               	return	
 15581  01435A                     __end_of_scale:
 15582                           	opt stack 0
 15583                           tblptru	equ	0xFF8
 15584                           tblptrh	equ	0xFF7
 15585                           tblptrl	equ	0xFF6
 15586                           tablat	equ	0xFF5
 15587                           prodh	equ	0xFF4
 15588                           prodl	equ	0xFF3
 15589                           intcon	equ	0xFF2
 15590                           postinc0	equ	0xFEE
 15591                           wreg	equ	0xFE8
 15592                           postdec1	equ	0xFE5
 15593                           fsr1h	equ	0xFE2
 15594                           fsr1l	equ	0xFE1
 15595                           indf2	equ	0xFDF
 15596                           postinc2	equ	0xFDE
 15597                           postdec2	equ	0xFDD
 15598                           fsr2h	equ	0xFDA
 15599                           fsr2l	equ	0xFD9
 15600                           status	equ	0xFD8
 15601                           
 15602 ;; *************** function _putch *****************
 15603 ;; Defined at:
 15604 ;;		line 591 in file "UART.c"
 15605 ;; Parameters:    Size  Location     Type
 15606 ;;  data            1    wreg     unsigned char 
 15607 ;; Auto vars:     Size  Location     Type
 15608 ;;  data            1    0[BANK0 ] unsigned char 
 15609 ;; Return value:  Size  Location     Type
 15610 ;;                  1    wreg      void 
 15611 ;; Registers used:
 15612 ;;		wreg
 15613 ;; Tracked objects:
 15614 ;;		On entry : 0/0
 15615 ;;		On exit  : 0/0
 15616 ;;		Unchanged: 0/0
 15617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15622 ;;Total ram usage:        1 bytes
 15623 ;; Hardware stack levels used:    1
 15624 ;; Hardware stack levels required when called:    3
 15625 ;; This function calls:
 15626 ;;		Nothing
 15627 ;; This function is called by:
 15628 ;;		_printf
 15629 ;; This function uses a non-reentrant model
 15630 ;;
 15631                           
 15632                           	psect	text25
 15633  01B0EC                     __ptext25:
 15634                           	opt stack 0
 15635  01B0EC                     _putch:
 15636                           	opt stack 24
 15637                           
 15638                           ;incstack = 0
 15639                           ;putch@data stored from wreg
 15640  01B0EC  0100               	movlb	0	; () banked
 15641  01B0EE  6F60               	movwf	putch@data& (0+255),b
 15642  01B0F0                     l2453:
 15643  01B0F0  A89E               	btfss	3998,4,c	;volatile
 15644  01B0F2  D7FE               	goto	l2453
 15645                           
 15646                           ;UART.c: 595: TXREG1 = data;
 15647  01B0F4  C060  FFAD         	movff	putch@data,4013	;volatile
 15648  01B0F8  0012               	return		;funcret
 15649  01B0FA                     __end_of_putch:
 15650                           	opt stack 0
 15651                           tblptru	equ	0xFF8
 15652                           tblptrh	equ	0xFF7
 15653                           tblptrl	equ	0xFF6
 15654                           tablat	equ	0xFF5
 15655                           prodh	equ	0xFF4
 15656                           prodl	equ	0xFF3
 15657                           intcon	equ	0xFF2
 15658                           postinc0	equ	0xFEE
 15659                           wreg	equ	0xFE8
 15660                           postdec1	equ	0xFE5
 15661                           fsr1h	equ	0xFE2
 15662                           fsr1l	equ	0xFE1
 15663                           indf2	equ	0xFDF
 15664                           postinc2	equ	0xFDE
 15665                           postdec2	equ	0xFDD
 15666                           fsr2h	equ	0xFDA
 15667                           fsr2l	equ	0xFD9
 15668                           status	equ	0xFD8
 15669                           
 15670 ;; *************** function _isdigit *****************
 15671 ;; Defined at:
 15672 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
 15673 ;; Parameters:    Size  Location     Type
 15674 ;;  c               1    wreg     unsigned char 
 15675 ;; Auto vars:     Size  Location     Type
 15676 ;;  c               1    2[BANK0 ] unsigned char 
 15677 ;; Return value:  Size  Location     Type
 15678 ;;		None               void
 15679 ;; Registers used:
 15680 ;;		wreg, status,2, status,0
 15681 ;; Tracked objects:
 15682 ;;		On entry : 0/0
 15683 ;;		On exit  : 0/0
 15684 ;;		Unchanged: 0/0
 15685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15687 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15689 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15690 ;;Total ram usage:        3 bytes
 15691 ;; Hardware stack levels used:    1
 15692 ;; Hardware stack levels required when called:    3
 15693 ;; This function calls:
 15694 ;;		Nothing
 15695 ;; This function is called by:
 15696 ;;		_printf
 15697 ;; This function uses a non-reentrant model
 15698 ;;
 15699                           
 15700                           	psect	text26
 15701  01AF1E                     __ptext26:
 15702                           	opt stack 0
 15703  01AF1E                     _isdigit:
 15704                           	opt stack 24
 15705                           
 15706                           ;incstack = 0
 15707                           ;isdigit@c stored from wreg
 15708  01AF1E  0100               	movlb	0	; () banked
 15709  01AF20  6F62               	movwf	isdigit@c& (0+255),b
 15710  01AF22  0E00               	movlw	0
 15711  01AF24  0100               	movlb	0	; () banked
 15712  01AF26  6F61               	movwf	_isdigit$7638& (0+255),b
 15713                           
 15714                           ; BSR set to: 0
 15715  01AF28  0E3A               	movlw	58
 15716  01AF2A  0100               	movlb	0	; () banked
 15717  01AF2C  6162               	cpfslt	isdigit@c& (0+255),b
 15718  01AF2E  D007               	goto	l19860
 15719                           
 15720                           ; BSR set to: 0
 15721  01AF30  0E2F               	movlw	47
 15722  01AF32  0100               	movlb	0	; () banked
 15723  01AF34  6562               	cpfsgt	isdigit@c& (0+255),b
 15724  01AF36  D003               	goto	l19860
 15725                           
 15726                           ; BSR set to: 0
 15727  01AF38  0E01               	movlw	1
 15728  01AF3A  0100               	movlb	0	; () banked
 15729  01AF3C  6F61               	movwf	_isdigit$7638& (0+255),b
 15730  01AF3E                     l19860:
 15731                           
 15732                           ; BSR set to: 0
 15733  01AF3E  C061  F060         	movff	_isdigit$7638,??_isdigit
 15734  01AF42  0100               	movlb	0	; () banked
 15735  01AF44  3160               	rrcf	??_isdigit& (0+255),w,b
 15736  01AF46  0012               	return	
 15737  01AF48                     __end_of_isdigit:
 15738                           	opt stack 0
 15739                           tblptru	equ	0xFF8
 15740                           tblptrh	equ	0xFF7
 15741                           tblptrl	equ	0xFF6
 15742                           tablat	equ	0xFF5
 15743                           prodh	equ	0xFF4
 15744                           prodl	equ	0xFF3
 15745                           intcon	equ	0xFF2
 15746                           postinc0	equ	0xFEE
 15747                           wreg	equ	0xFE8
 15748                           postdec1	equ	0xFE5
 15749                           fsr1h	equ	0xFE2
 15750                           fsr1l	equ	0xFE1
 15751                           indf2	equ	0xFDF
 15752                           postinc2	equ	0xFDE
 15753                           postdec2	equ	0xFDD
 15754                           fsr2h	equ	0xFDA
 15755                           fsr2l	equ	0xFD9
 15756                           status	equ	0xFD8
 15757                           
 15758 ;; *************** function _fround *****************
 15759 ;; Defined at:
 15760 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 15761 ;; Parameters:    Size  Location     Type
 15762 ;;  prec            1    wreg     unsigned char 
 15763 ;; Auto vars:     Size  Location     Type
 15764 ;;  prec            1   44[BANK0 ] unsigned char 
 15765 ;; Return value:  Size  Location     Type
 15766 ;;                  3   35[BANK0 ] unsigned char 
 15767 ;; Registers used:
 15768 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15769 ;; Tracked objects:
 15770 ;;		On entry : 0/0
 15771 ;;		On exit  : 0/0
 15772 ;;		Unchanged: 0/0
 15773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15774 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15775 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15777 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15778 ;;Total ram usage:       10 bytes
 15779 ;; Hardware stack levels used:    1
 15780 ;; Hardware stack levels required when called:    5
 15781 ;; This function calls:
 15782 ;;		___awdiv
 15783 ;;		___awmod
 15784 ;;		___ftmul
 15785 ;;		___wmul
 15786 ;; This function is called by:
 15787 ;;		_printf
 15788 ;; This function uses a non-reentrant model
 15789 ;;
 15790                           
 15791                           	psect	text27
 15792  0158C6                     __ptext27:
 15793                           	opt stack 0
 15794  0158C6                     _fround:
 15795                           	opt stack 22
 15796                           
 15797                           ; BSR set to: 0
 15798                           ;incstack = 0
 15799                           ;fround@prec stored from wreg
 15800  0158C6  0100               	movlb	0	; () banked
 15801  0158C8  6F8C               	movwf	fround@prec& (0+255),b
 15802                           
 15803                           ;doprnt.c: 413: if(prec>=110)
 15804  0158CA  0E6D               	movlw	109
 15805  0158CC  0100               	movlb	0	; () banked
 15806  0158CE  658C               	cpfsgt	fround@prec& (0+255),b
 15807  0158D0  D0C3               	goto	l19802
 15808                           
 15809                           ; BSR set to: 0
 15810                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15811  0158D2  0E00               	movlw	0
 15812  0158D4  0100               	movlb	0	; () banked
 15813  0158D6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15814  0158D8  0E03               	movlw	3
 15815  0158DA  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15816  0158DC  0E00               	movlw	0
 15817  0158DE  0100               	movlb	0	; () banked
 15818  0158E0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15819  0158E2  0E0A               	movlw	10
 15820  0158E4  6F68               	movwf	___awdiv@divisor& (0+255),b
 15821  0158E6  0E00               	movlw	0
 15822  0158E8  0100               	movlb	0	; () banked
 15823  0158EA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15824  0158EC  0E64               	movlw	100
 15825  0158EE  6F62               	movwf	___awmod@divisor& (0+255),b
 15826  0158F0  C08C  F060         	movff	fround@prec,___awmod@dividend
 15827  0158F4  0100               	movlb	0	; () banked
 15828  0158F6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15829  0158F8  ECA7  F0D0         	call	___awmod	;wreg free
 15830  0158FC  C060  F066         	movff	?___awmod,___awdiv@dividend
 15831  015900  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 15832  015904  EC70  F0CC         	call	___awdiv	;wreg free
 15833  015908  0E09               	movlw	9
 15834  01590A  0100               	movlb	0	; () banked
 15835  01590C  2566               	addwf	?___awdiv& (0+255),w,b
 15836  01590E  0100               	movlb	0	; () banked
 15837  015910  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15838  015912  0E00               	movlw	0
 15839  015914  0100               	movlb	0	; () banked
 15840  015916  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15841  015918  0100               	movlb	0	; () banked
 15842  01591A  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15843  01591C  ECB9  F0D6         	call	___wmul	;wreg free
 15844  015920  0EB3               	movlw	low __npowers_
 15845  015922  0100               	movlb	0	; () banked
 15846  015924  256E               	addwf	?___wmul& (0+255),w,b
 15847  015926  6EF6               	movwf	tblptrl,c
 15848  015928  0EFB               	movlw	high __npowers_
 15849  01592A  0100               	movlb	0	; () banked
 15850  01592C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15851  01592E  6EF7               	movwf	tblptrh,c
 15852  015930                     	if	1	;There are 3 active tblptr bytes
 15853  015930  6AF8               	clrf	tblptru,c
 15854  015932  0E00               	movlw	low (__mediumconst shr (0+16))
 15855  015934  22F8               	addwfc	tblptru,f,c
 15856  015936                     	endif
 15857  015936  0009               	tblrd		*+
 15858  015938  CFF5 F077          	movff	tablat,___ftmul@f2
 15859  01593C  0009               	tblrd		*+
 15860  01593E  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15861  015942  000A               	tblrd		*-
 15862  015944  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15863  015948  0E00               	movlw	0
 15864  01594A  0100               	movlb	0	; () banked
 15865  01594C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15866  01594E  0E64               	movlw	100
 15867  015950  6F68               	movwf	___awdiv@divisor& (0+255),b
 15868  015952  C08C  F066         	movff	fround@prec,___awdiv@dividend
 15869  015956  0100               	movlb	0	; () banked
 15870  015958  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15871  01595A  EC70  F0CC         	call	___awdiv	;wreg free
 15872  01595E  0E12               	movlw	18
 15873  015960  0100               	movlb	0	; () banked
 15874  015962  2566               	addwf	?___awdiv& (0+255),w,b
 15875  015964  0100               	movlb	0	; () banked
 15876  015966  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15877  015968  0E00               	movlw	0
 15878  01596A  0100               	movlb	0	; () banked
 15879  01596C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15880  01596E  0100               	movlb	0	; () banked
 15881  015970  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15882  015972  0E00               	movlw	0
 15883  015974  0100               	movlb	0	; () banked
 15884  015976  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15885  015978  0E03               	movlw	3
 15886  01597A  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15887  01597C  ECB9  F0D6         	call	___wmul	;wreg free
 15888  015980  0EB3               	movlw	low __npowers_
 15889  015982  0100               	movlb	0	; () banked
 15890  015984  256E               	addwf	?___wmul& (0+255),w,b
 15891  015986  6EF6               	movwf	tblptrl,c
 15892  015988  0EFB               	movlw	high __npowers_
 15893  01598A  0100               	movlb	0	; () banked
 15894  01598C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15895  01598E  6EF7               	movwf	tblptrh,c
 15896  015990                     	if	1	;There are 3 active tblptr bytes
 15897  015990  6AF8               	clrf	tblptru,c
 15898  015992  0E00               	movlw	low (__mediumconst shr (0+16))
 15899  015994  22F8               	addwfc	tblptru,f,c
 15900  015996                     	endif
 15901  015996  0009               	tblrd		*+
 15902  015998  CFF5 F074          	movff	tablat,___ftmul@f1
 15903  01599C  0009               	tblrd		*+
 15904  01599E  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15905  0159A2  000A               	tblrd		*-
 15906  0159A4  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15907  0159A8  EC00  F0C1         	call	___ftmul	;wreg free
 15908  0159AC  C074  F089         	movff	?___ftmul,_fround$8170
 15909  0159B0  C075  F08A         	movff	?___ftmul+1,_fround$8170+1
 15910  0159B4  C076  F08B         	movff	?___ftmul+2,_fround$8170+2
 15911                           
 15912                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15913  0159B8  0E00               	movlw	0
 15914  0159BA  0100               	movlb	0	; () banked
 15915  0159BC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15916  0159BE  0E03               	movlw	3
 15917  0159C0  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15918  0159C2  0E00               	movlw	0
 15919  0159C4  0100               	movlb	0	; () banked
 15920  0159C6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15921  0159C8  0E0A               	movlw	10
 15922  0159CA  6F62               	movwf	___awmod@divisor& (0+255),b
 15923  0159CC  C08C  F060         	movff	fround@prec,___awmod@dividend
 15924  0159D0  0100               	movlb	0	; () banked
 15925  0159D2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15926  0159D4  ECA7  F0D0         	call	___awmod	;wreg free
 15927  0159D8  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15928  0159DC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15929  0159E0  ECB9  F0D6         	call	___wmul	;wreg free
 15930  0159E4  0EB3               	movlw	low __npowers_
 15931  0159E6  0100               	movlb	0	; () banked
 15932  0159E8  256E               	addwf	?___wmul& (0+255),w,b
 15933  0159EA  6EF6               	movwf	tblptrl,c
 15934  0159EC  0EFB               	movlw	high __npowers_
 15935  0159EE  0100               	movlb	0	; () banked
 15936  0159F0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15937  0159F2  6EF7               	movwf	tblptrh,c
 15938  0159F4                     	if	1	;There are 3 active tblptr bytes
 15939  0159F4  6AF8               	clrf	tblptru,c
 15940  0159F6  0E00               	movlw	low (__mediumconst shr (0+16))
 15941  0159F8  22F8               	addwfc	tblptru,f,c
 15942  0159FA                     	endif
 15943  0159FA  0009               	tblrd		*+
 15944  0159FC  CFF5 F077          	movff	tablat,___ftmul@f2
 15945  015A00  0009               	tblrd		*+
 15946  015A02  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15947  015A06  000A               	tblrd		*-
 15948  015A08  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15949  015A0C  C089  F074         	movff	_fround$8170,___ftmul@f1
 15950  015A10  C08A  F075         	movff	_fround$8170+1,___ftmul@f1+1
 15951  015A14  C08B  F076         	movff	_fround$8170+2,___ftmul@f1+2
 15952  015A18  EC00  F0C1         	call	___ftmul	;wreg free
 15953  015A1C  C074  F086         	movff	?___ftmul,_fround$8171
 15954  015A20  C075  F087         	movff	?___ftmul+1,_fround$8171+1
 15955  015A24  C076  F088         	movff	?___ftmul+2,_fround$8171+2
 15956                           
 15957                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15958  015A28  C086  F074         	movff	_fround$8171,___ftmul@f1
 15959  015A2C  C087  F075         	movff	_fround$8171+1,___ftmul@f1+1
 15960  015A30  C088  F076         	movff	_fround$8171+2,___ftmul@f1+2
 15961  015A34  0E00               	movlw	0
 15962  015A36  0100               	movlb	0	; () banked
 15963  015A38  6F77               	movwf	___ftmul@f2& (0+255),b
 15964  015A3A  0E00               	movlw	0
 15965  015A3C  0100               	movlb	0	; () banked
 15966  015A3E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 15967  015A40  0E3F               	movlw	63
 15968  015A42  0100               	movlb	0	; () banked
 15969  015A44  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 15970  015A46  EC00  F0C1         	call	___ftmul	;wreg free
 15971  015A4A  C074  F083         	movff	?___ftmul,?_fround
 15972  015A4E  C075  F084         	movff	?___ftmul+1,?_fround+1
 15973  015A52  C076  F085         	movff	?___ftmul+2,?_fround+2
 15974  015A56  0012               	return	
 15975  015A58                     l19802:
 15976                           
 15977                           ;doprnt.c: 415: else if(prec > 10)
 15978  015A58  0E0A               	movlw	10
 15979  015A5A  0100               	movlb	0	; () banked
 15980  015A5C  658C               	cpfsgt	fround@prec& (0+255),b
 15981  015A5E  D074               	goto	l19810
 15982                           
 15983                           ; BSR set to: 0
 15984                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15985  015A60  0E00               	movlw	0
 15986  015A62  0100               	movlb	0	; () banked
 15987  015A64  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15988  015A66  0E03               	movlw	3
 15989  015A68  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15990  015A6A  0E00               	movlw	0
 15991  015A6C  0100               	movlb	0	; () banked
 15992  015A6E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15993  015A70  0E0A               	movlw	10
 15994  015A72  6F62               	movwf	___awmod@divisor& (0+255),b
 15995  015A74  C08C  F060         	movff	fround@prec,___awmod@dividend
 15996  015A78  0100               	movlb	0	; () banked
 15997  015A7A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15998  015A7C  ECA7  F0D0         	call	___awmod	;wreg free
 15999  015A80  C060  F06E         	movff	?___awmod,___wmul@multiplier
 16000  015A84  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 16001  015A88  ECB9  F0D6         	call	___wmul	;wreg free
 16002  015A8C  0EB3               	movlw	low __npowers_
 16003  015A8E  0100               	movlb	0	; () banked
 16004  015A90  256E               	addwf	?___wmul& (0+255),w,b
 16005  015A92  6EF6               	movwf	tblptrl,c
 16006  015A94  0EFB               	movlw	high __npowers_
 16007  015A96  0100               	movlb	0	; () banked
 16008  015A98  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 16009  015A9A  6EF7               	movwf	tblptrh,c
 16010  015A9C                     	if	1	;There are 3 active tblptr bytes
 16011  015A9C  6AF8               	clrf	tblptru,c
 16012  015A9E  0E00               	movlw	low (__mediumconst shr (0+16))
 16013  015AA0  22F8               	addwfc	tblptru,f,c
 16014  015AA2                     	endif
 16015  015AA2  0009               	tblrd		*+
 16016  015AA4  CFF5 F077          	movff	tablat,___ftmul@f2
 16017  015AA8  0009               	tblrd		*+
 16018  015AAA  CFF5 F078          	movff	tablat,___ftmul@f2+1
 16019  015AAE  000A               	tblrd		*-
 16020  015AB0  CFF5 F079          	movff	tablat,___ftmul@f2+2
 16021  015AB4  0E00               	movlw	0
 16022  015AB6  0100               	movlb	0	; () banked
 16023  015AB8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 16024  015ABA  0E0A               	movlw	10
 16025  015ABC  6F68               	movwf	___awdiv@divisor& (0+255),b
 16026  015ABE  C08C  F066         	movff	fround@prec,___awdiv@dividend
 16027  015AC2  0100               	movlb	0	; () banked
 16028  015AC4  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 16029  015AC6  EC70  F0CC         	call	___awdiv	;wreg free
 16030  015ACA  0E09               	movlw	9
 16031  015ACC  0100               	movlb	0	; () banked
 16032  015ACE  2566               	addwf	?___awdiv& (0+255),w,b
 16033  015AD0  0100               	movlb	0	; () banked
 16034  015AD2  6F6E               	movwf	___wmul@multiplier& (0+255),b
 16035  015AD4  0E00               	movlw	0
 16036  015AD6  0100               	movlb	0	; () banked
 16037  015AD8  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 16038  015ADA  0100               	movlb	0	; () banked
 16039  015ADC  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 16040  015ADE  0E00               	movlw	0
 16041  015AE0  0100               	movlb	0	; () banked
 16042  015AE2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16043  015AE4  0E03               	movlw	3
 16044  015AE6  6F70               	movwf	___wmul@multiplicand& (0+255),b
 16045  015AE8  ECB9  F0D6         	call	___wmul	;wreg free
 16046  015AEC  0EB3               	movlw	low __npowers_
 16047  015AEE  0100               	movlb	0	; () banked
 16048  015AF0  256E               	addwf	?___wmul& (0+255),w,b
 16049  015AF2  6EF6               	movwf	tblptrl,c
 16050  015AF4  0EFB               	movlw	high __npowers_
 16051  015AF6  0100               	movlb	0	; () banked
 16052  015AF8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 16053  015AFA  6EF7               	movwf	tblptrh,c
 16054  015AFC                     	if	1	;There are 3 active tblptr bytes
 16055  015AFC  6AF8               	clrf	tblptru,c
 16056  015AFE  0E00               	movlw	low (__mediumconst shr (0+16))
 16057  015B00  22F8               	addwfc	tblptru,f,c
 16058  015B02                     	endif
 16059  015B02  0009               	tblrd		*+
 16060  015B04  CFF5 F074          	movff	tablat,___ftmul@f1
 16061  015B08  0009               	tblrd		*+
 16062  015B0A  CFF5 F075          	movff	tablat,___ftmul@f1+1
 16063  015B0E  000A               	tblrd		*-
 16064  015B10  CFF5 F076          	movff	tablat,___ftmul@f1+2
 16065  015B14  EC00  F0C1         	call	___ftmul	;wreg free
 16066  015B18  C074  F089         	movff	?___ftmul,_fround$8170
 16067  015B1C  C075  F08A         	movff	?___ftmul+1,_fround$8170+1
 16068  015B20  C076  F08B         	movff	?___ftmul+2,_fround$8170+2
 16069                           
 16070                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16071  015B24  C089  F074         	movff	_fround$8170,___ftmul@f1
 16072  015B28  C08A  F075         	movff	_fround$8170+1,___ftmul@f1+1
 16073  015B2C  C08B  F076         	movff	_fround$8170+2,___ftmul@f1+2
 16074  015B30  0E00               	movlw	0
 16075  015B32  0100               	movlb	0	; () banked
 16076  015B34  6F77               	movwf	___ftmul@f2& (0+255),b
 16077  015B36  0E00               	movlw	0
 16078  015B38  0100               	movlb	0	; () banked
 16079  015B3A  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 16080  015B3C  0E3F               	movlw	63
 16081  015B3E  0100               	movlb	0	; () banked
 16082  015B40  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 16083  015B42  EC00  F0C1         	call	___ftmul	;wreg free
 16084  015B46  D781               	goto	L9
 16085  015B48                     l19810:
 16086                           
 16087                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 16088  015B48  0100               	movlb	0	; () banked
 16089  015B4A  518C               	movf	fround@prec& (0+255),w,b
 16090  015B4C  0D03               	mullw	3
 16091  015B4E  0EB3               	movlw	low __npowers_
 16092  015B50  24F3               	addwf	prodl,w,c
 16093  015B52  6EF6               	movwf	tblptrl,c
 16094  015B54  0EFB               	movlw	high __npowers_
 16095  015B56  20F4               	addwfc	prodh,w,c
 16096  015B58  6EF7               	movwf	tblptrh,c
 16097  015B5A                     	if	1	;There are 3 active tblptr bytes
 16098  015B5A  6AF8               	clrf	tblptru,c
 16099  015B5C  0E00               	movlw	low (__mediumconst shr (0+16))
 16100  015B5E  22F8               	addwfc	tblptru,f,c
 16101  015B60                     	endif
 16102  015B60  0009               	tblrd		*+
 16103  015B62  CFF5 F074          	movff	tablat,___ftmul@f1
 16104  015B66  0009               	tblrd		*+
 16105  015B68  CFF5 F075          	movff	tablat,___ftmul@f1+1
 16106  015B6C  000A               	tblrd		*-
 16107  015B6E  CFF5 F076          	movff	tablat,___ftmul@f1+2
 16108  015B72  0E00               	movlw	0
 16109  015B74  0100               	movlb	0	; () banked
 16110  015B76  6F77               	movwf	___ftmul@f2& (0+255),b
 16111  015B78  0E00               	movlw	0
 16112  015B7A  0100               	movlb	0	; () banked
 16113  015B7C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 16114  015B7E  0E3F               	movlw	63
 16115  015B80  0100               	movlb	0	; () banked
 16116  015B82  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 16117  015B84  EC00  F0C1         	call	___ftmul	;wreg free
 16118  015B88  C074  F083         	movff	?___ftmul,?_fround
 16119  015B8C  C075  F084         	movff	?___ftmul+1,?_fround+1
 16120  015B90  C076  F085         	movff	?___ftmul+2,?_fround+2
 16121  015B94  0012               	return	
 16122  015B96                     __end_of_fround:
 16123                           	opt stack 0
 16124                           tblptru	equ	0xFF8
 16125                           tblptrh	equ	0xFF7
 16126                           tblptrl	equ	0xFF6
 16127                           tablat	equ	0xFF5
 16128                           prodh	equ	0xFF4
 16129                           prodl	equ	0xFF3
 16130                           intcon	equ	0xFF2
 16131                           postinc0	equ	0xFEE
 16132                           wreg	equ	0xFE8
 16133                           postdec1	equ	0xFE5
 16134                           fsr1h	equ	0xFE2
 16135                           fsr1l	equ	0xFE1
 16136                           indf2	equ	0xFDF
 16137                           postinc2	equ	0xFDE
 16138                           postdec2	equ	0xFDD
 16139                           fsr2h	equ	0xFDA
 16140                           fsr2l	equ	0xFD9
 16141                           status	equ	0xFD8
 16142                           
 16143 ;; *************** function ___awmod *****************
 16144 ;; Defined at:
 16145 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 16146 ;; Parameters:    Size  Location     Type
 16147 ;;  dividend        2    0[BANK0 ] int 
 16148 ;;  divisor         2    2[BANK0 ] int 
 16149 ;; Auto vars:     Size  Location     Type
 16150 ;;  sign            1    5[BANK0 ] unsigned char 
 16151 ;;  counter         1    4[BANK0 ] unsigned char 
 16152 ;; Return value:  Size  Location     Type
 16153 ;;                  2    0[BANK0 ] int 
 16154 ;; Registers used:
 16155 ;;		wreg, status,2, status,0
 16156 ;; Tracked objects:
 16157 ;;		On entry : 0/0
 16158 ;;		On exit  : 0/0
 16159 ;;		Unchanged: 0/0
 16160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16161 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16164 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16165 ;;Total ram usage:        6 bytes
 16166 ;; Hardware stack levels used:    1
 16167 ;; Hardware stack levels required when called:    3
 16168 ;; This function calls:
 16169 ;;		Nothing
 16170 ;; This function is called by:
 16171 ;;		_fround
 16172 ;;		_scale
 16173 ;; This function uses a non-reentrant model
 16174 ;;
 16175                           
 16176                           	psect	text28
 16177  01A14E                     __ptext28:
 16178                           	opt stack 0
 16179  01A14E                     ___awmod:
 16180                           	opt stack 23
 16181                           
 16182                           ;incstack = 0
 16183  01A14E  0E00               	movlw	0
 16184  01A150  0100               	movlb	0	; () banked
 16185  01A152  6F65               	movwf	___awmod@sign& (0+255),b
 16186                           
 16187                           ; BSR set to: 0
 16188  01A154  0100               	movlb	0	; () banked
 16189  01A156  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
 16190  01A158  D008               	goto	l19708
 16191                           
 16192                           ; BSR set to: 0
 16193  01A15A  0100               	movlb	0	; () banked
 16194  01A15C  6D60               	negf	___awmod@dividend& (0+255),b
 16195  01A15E  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 16196  01A160  B0D8               	btfsc	status,0,c
 16197  01A162  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 16198                           
 16199                           ; BSR set to: 0
 16200  01A164  0E01               	movlw	1
 16201  01A166  0100               	movlb	0	; () banked
 16202  01A168  6F65               	movwf	___awmod@sign& (0+255),b
 16203  01A16A                     l19708:
 16204                           
 16205                           ; BSR set to: 0
 16206  01A16A  0100               	movlb	0	; () banked
 16207  01A16C  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 16208  01A16E  D005               	goto	l19712
 16209                           
 16210                           ; BSR set to: 0
 16211  01A170  0100               	movlb	0	; () banked
 16212  01A172  6D62               	negf	___awmod@divisor& (0+255),b
 16213  01A174  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
 16214  01A176  B0D8               	btfsc	status,0,c
 16215  01A178  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
 16216  01A17A                     l19712:
 16217                           
 16218                           ; BSR set to: 0
 16219  01A17A  0100               	movlb	0	; () banked
 16220  01A17C  5162               	movf	___awmod@divisor& (0+255),w,b
 16221  01A17E  0100               	movlb	0	; () banked
 16222  01A180  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 16223  01A182  B4D8               	btfsc	status,2,c
 16224  01A184  D026               	goto	l19728
 16225                           
 16226                           ; BSR set to: 0
 16227  01A186  0E01               	movlw	1
 16228  01A188  0100               	movlb	0	; () banked
 16229  01A18A  6F64               	movwf	___awmod@counter& (0+255),b
 16230  01A18C  D006               	goto	l19718
 16231  01A18E                     l19716:
 16232                           
 16233                           ; BSR set to: 0
 16234  01A18E  0100               	movlb	0	; () banked
 16235  01A190  90D8               	bcf	status,0,c
 16236  01A192  3762               	rlcf	___awmod@divisor& (0+255),f,b
 16237  01A194  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 16238  01A196  0100               	movlb	0	; () banked
 16239  01A198  2B64               	incf	___awmod@counter& (0+255),f,b
 16240  01A19A                     l19718:
 16241                           
 16242                           ; BSR set to: 0
 16243  01A19A  0100               	movlb	0	; () banked
 16244  01A19C  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 16245  01A19E  D7F7               	goto	l19716
 16246  01A1A0                     l19720:
 16247                           
 16248                           ; BSR set to: 0
 16249  01A1A0  0100               	movlb	0	; () banked
 16250  01A1A2  5162               	movf	___awmod@divisor& (0+255),w,b
 16251  01A1A4  0100               	movlb	0	; () banked
 16252  01A1A6  5D60               	subwf	___awmod@dividend& (0+255),w,b
 16253  01A1A8  0100               	movlb	0	; () banked
 16254  01A1AA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 16255  01A1AC  0100               	movlb	0	; () banked
 16256  01A1AE  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 16257  01A1B0  A0D8               	btfss	status,0,c
 16258  01A1B2  D008               	goto	l19724
 16259                           
 16260                           ; BSR set to: 0
 16261  01A1B4  0100               	movlb	0	; () banked
 16262  01A1B6  5162               	movf	___awmod@divisor& (0+255),w,b
 16263  01A1B8  0100               	movlb	0	; () banked
 16264  01A1BA  5F60               	subwf	___awmod@dividend& (0+255),f,b
 16265  01A1BC  0100               	movlb	0	; () banked
 16266  01A1BE  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 16267  01A1C0  0100               	movlb	0	; () banked
 16268  01A1C2  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 16269  01A1C4                     l19724:
 16270                           
 16271                           ; BSR set to: 0
 16272  01A1C4  0100               	movlb	0	; () banked
 16273  01A1C6  90D8               	bcf	status,0,c
 16274  01A1C8  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 16275  01A1CA  3362               	rrcf	___awmod@divisor& (0+255),f,b
 16276                           
 16277                           ; BSR set to: 0
 16278  01A1CC  0100               	movlb	0	; () banked
 16279  01A1CE  2F64               	decfsz	___awmod@counter& (0+255),f,b
 16280  01A1D0  D7E7               	goto	l19720
 16281  01A1D2                     l19728:
 16282                           
 16283                           ; BSR set to: 0
 16284  01A1D2  0100               	movlb	0	; () banked
 16285  01A1D4  5165               	movf	___awmod@sign& (0+255),w,b
 16286  01A1D6  0100               	movlb	0	; () banked
 16287  01A1D8  B4D8               	btfsc	status,2,c
 16288  01A1DA  D005               	goto	l19732
 16289                           
 16290                           ; BSR set to: 0
 16291  01A1DC  0100               	movlb	0	; () banked
 16292  01A1DE  6D60               	negf	___awmod@dividend& (0+255),b
 16293  01A1E0  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 16294  01A1E2  B0D8               	btfsc	status,0,c
 16295  01A1E4  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 16296  01A1E6                     l19732:
 16297                           
 16298                           ; BSR set to: 0
 16299  01A1E6  C060  F060         	movff	___awmod@dividend,?___awmod
 16300  01A1EA  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
 16301  01A1EE  0012               	return	
 16302  01A1F0                     __end_of___awmod:
 16303                           	opt stack 0
 16304                           tblptru	equ	0xFF8
 16305                           tblptrh	equ	0xFF7
 16306                           tblptrl	equ	0xFF6
 16307                           tablat	equ	0xFF5
 16308                           prodh	equ	0xFF4
 16309                           prodl	equ	0xFF3
 16310                           intcon	equ	0xFF2
 16311                           postinc0	equ	0xFEE
 16312                           wreg	equ	0xFE8
 16313                           postdec1	equ	0xFE5
 16314                           fsr1h	equ	0xFE2
 16315                           fsr1l	equ	0xFE1
 16316                           indf2	equ	0xFDF
 16317                           postinc2	equ	0xFDE
 16318                           postdec2	equ	0xFDD
 16319                           fsr2h	equ	0xFDA
 16320                           fsr2l	equ	0xFD9
 16321                           status	equ	0xFD8
 16322                           
 16323 ;; *************** function ___awdiv *****************
 16324 ;; Defined at:
 16325 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 16326 ;; Parameters:    Size  Location     Type
 16327 ;;  dividend        2    6[BANK0 ] int 
 16328 ;;  divisor         2    8[BANK0 ] int 
 16329 ;; Auto vars:     Size  Location     Type
 16330 ;;  quotient        2   12[BANK0 ] int 
 16331 ;;  sign            1   11[BANK0 ] unsigned char 
 16332 ;;  counter         1   10[BANK0 ] unsigned char 
 16333 ;; Return value:  Size  Location     Type
 16334 ;;                  2    6[BANK0 ] int 
 16335 ;; Registers used:
 16336 ;;		wreg, status,2, status,0
 16337 ;; Tracked objects:
 16338 ;;		On entry : 0/0
 16339 ;;		On exit  : 0/0
 16340 ;;		Unchanged: 0/0
 16341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16342 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16343 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16345 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16346 ;;Total ram usage:        8 bytes
 16347 ;; Hardware stack levels used:    1
 16348 ;; Hardware stack levels required when called:    3
 16349 ;; This function calls:
 16350 ;;		Nothing
 16351 ;; This function is called by:
 16352 ;;		_fround
 16353 ;;		_scale
 16354 ;;		_printf
 16355 ;; This function uses a non-reentrant model
 16356 ;;
 16357                           
 16358                           	psect	text29
 16359  0198E0                     __ptext29:
 16360                           	opt stack 0
 16361  0198E0                     ___awdiv:
 16362                           	opt stack 23
 16363                           
 16364                           ; BSR set to: 0
 16365                           ;incstack = 0
 16366  0198E0  0E00               	movlw	0
 16367  0198E2  0100               	movlb	0	; () banked
 16368  0198E4  6F6B               	movwf	___awdiv@sign& (0+255),b
 16369                           
 16370                           ; BSR set to: 0
 16371  0198E6  0100               	movlb	0	; () banked
 16372  0198E8  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 16373  0198EA  D008               	goto	l19664
 16374                           
 16375                           ; BSR set to: 0
 16376  0198EC  0100               	movlb	0	; () banked
 16377  0198EE  6D68               	negf	___awdiv@divisor& (0+255),b
 16378  0198F0  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 16379  0198F2  B0D8               	btfsc	status,0,c
 16380  0198F4  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 16381                           
 16382                           ; BSR set to: 0
 16383  0198F6  0E01               	movlw	1
 16384  0198F8  0100               	movlb	0	; () banked
 16385  0198FA  6F6B               	movwf	___awdiv@sign& (0+255),b
 16386  0198FC                     l19664:
 16387                           
 16388                           ; BSR set to: 0
 16389  0198FC  0100               	movlb	0	; () banked
 16390  0198FE  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 16391  019900  D008               	goto	l19670
 16392                           
 16393                           ; BSR set to: 0
 16394  019902  0100               	movlb	0	; () banked
 16395  019904  6D66               	negf	___awdiv@dividend& (0+255),b
 16396  019906  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 16397  019908  B0D8               	btfsc	status,0,c
 16398  01990A  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 16399                           
 16400                           ; BSR set to: 0
 16401  01990C  0E01               	movlw	1
 16402  01990E  0100               	movlb	0	; () banked
 16403  019910  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 16404  019912                     l19670:
 16405                           
 16406                           ; BSR set to: 0
 16407  019912  0E00               	movlw	0
 16408  019914  0100               	movlb	0	; () banked
 16409  019916  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 16410  019918  0E00               	movlw	0
 16411  01991A  6F6C               	movwf	___awdiv@quotient& (0+255),b
 16412                           
 16413                           ; BSR set to: 0
 16414  01991C  0100               	movlb	0	; () banked
 16415  01991E  5168               	movf	___awdiv@divisor& (0+255),w,b
 16416  019920  0100               	movlb	0	; () banked
 16417  019922  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 16418  019924  B4D8               	btfsc	status,2,c
 16419  019926  D02C               	goto	l19692
 16420                           
 16421                           ; BSR set to: 0
 16422  019928  0E01               	movlw	1
 16423  01992A  0100               	movlb	0	; () banked
 16424  01992C  6F6A               	movwf	___awdiv@counter& (0+255),b
 16425  01992E  D006               	goto	l19678
 16426  019930                     l19676:
 16427                           
 16428                           ; BSR set to: 0
 16429  019930  0100               	movlb	0	; () banked
 16430  019932  90D8               	bcf	status,0,c
 16431  019934  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 16432  019936  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 16433  019938  0100               	movlb	0	; () banked
 16434  01993A  2B6A               	incf	___awdiv@counter& (0+255),f,b
 16435  01993C                     l19678:
 16436                           
 16437                           ; BSR set to: 0
 16438  01993C  0100               	movlb	0	; () banked
 16439  01993E  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 16440  019940  D7F7               	goto	l19676
 16441  019942                     l19680:
 16442                           
 16443                           ; BSR set to: 0
 16444  019942  0100               	movlb	0	; () banked
 16445  019944  90D8               	bcf	status,0,c
 16446  019946  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 16447  019948  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 16448                           
 16449                           ; BSR set to: 0
 16450  01994A  0100               	movlb	0	; () banked
 16451  01994C  5168               	movf	___awdiv@divisor& (0+255),w,b
 16452  01994E  0100               	movlb	0	; () banked
 16453  019950  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 16454  019952  0100               	movlb	0	; () banked
 16455  019954  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 16456  019956  0100               	movlb	0	; () banked
 16457  019958  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 16458  01995A  A0D8               	btfss	status,0,c
 16459  01995C  D00A               	goto	l19688
 16460                           
 16461                           ; BSR set to: 0
 16462  01995E  0100               	movlb	0	; () banked
 16463  019960  5168               	movf	___awdiv@divisor& (0+255),w,b
 16464  019962  0100               	movlb	0	; () banked
 16465  019964  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 16466  019966  0100               	movlb	0	; () banked
 16467  019968  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 16468  01996A  0100               	movlb	0	; () banked
 16469  01996C  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 16470                           
 16471                           ; BSR set to: 0
 16472  01996E  0100               	movlb	0	; () banked
 16473  019970  816C               	bsf	___awdiv@quotient& (0+255),0,b
 16474  019972                     l19688:
 16475                           
 16476                           ; BSR set to: 0
 16477  019972  0100               	movlb	0	; () banked
 16478  019974  90D8               	bcf	status,0,c
 16479  019976  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 16480  019978  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 16481                           
 16482                           ; BSR set to: 0
 16483  01997A  0100               	movlb	0	; () banked
 16484  01997C  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 16485  01997E  D7E1               	goto	l19680
 16486  019980                     l19692:
 16487                           
 16488                           ; BSR set to: 0
 16489  019980  0100               	movlb	0	; () banked
 16490  019982  516B               	movf	___awdiv@sign& (0+255),w,b
 16491  019984  0100               	movlb	0	; () banked
 16492  019986  B4D8               	btfsc	status,2,c
 16493  019988  D005               	goto	l19696
 16494                           
 16495                           ; BSR set to: 0
 16496  01998A  0100               	movlb	0	; () banked
 16497  01998C  6D6C               	negf	___awdiv@quotient& (0+255),b
 16498  01998E  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 16499  019990  B0D8               	btfsc	status,0,c
 16500  019992  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 16501  019994                     l19696:
 16502                           
 16503                           ; BSR set to: 0
 16504  019994  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 16505  019998  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 16506  01999C  0012               	return	
 16507  01999E                     __end_of___awdiv:
 16508                           	opt stack 0
 16509                           tblptru	equ	0xFF8
 16510                           tblptrh	equ	0xFF7
 16511                           tblptrl	equ	0xFF6
 16512                           tablat	equ	0xFF5
 16513                           prodh	equ	0xFF4
 16514                           prodl	equ	0xFF3
 16515                           intcon	equ	0xFF2
 16516                           postinc0	equ	0xFEE
 16517                           wreg	equ	0xFE8
 16518                           postdec1	equ	0xFE5
 16519                           fsr1h	equ	0xFE2
 16520                           fsr1l	equ	0xFE1
 16521                           indf2	equ	0xFDF
 16522                           postinc2	equ	0xFDE
 16523                           postdec2	equ	0xFDD
 16524                           fsr2h	equ	0xFDA
 16525                           fsr2l	equ	0xFD9
 16526                           status	equ	0xFD8
 16527                           
 16528 ;; *************** function __tdiv_to_l_ *****************
 16529 ;; Defined at:
 16530 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
 16531 ;; Parameters:    Size  Location     Type
 16532 ;;  f1              3    0[BANK0 ] float 
 16533 ;;  f2              3    3[BANK0 ] float 
 16534 ;; Auto vars:     Size  Location     Type
 16535 ;;  quot            4    9[BANK0 ] unsigned long 
 16536 ;;  exp1            1   14[BANK0 ] unsigned char 
 16537 ;;  cntr            1   13[BANK0 ] unsigned char 
 16538 ;; Return value:  Size  Location     Type
 16539 ;;                  4    0[BANK0 ] unsigned long 
 16540 ;; Registers used:
 16541 ;;		wreg, status,2, status,0
 16542 ;; Tracked objects:
 16543 ;;		On entry : 0/0
 16544 ;;		On exit  : 0/0
 16545 ;;		Unchanged: 0/0
 16546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16547 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16548 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16549 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16550 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16551 ;;Total ram usage:       15 bytes
 16552 ;; Hardware stack levels used:    1
 16553 ;; Hardware stack levels required when called:    3
 16554 ;; This function calls:
 16555 ;;		Nothing
 16556 ;; This function is called by:
 16557 ;;		_printf
 16558 ;; This function uses a non-reentrant model
 16559 ;;
 16560                           
 16561                           	psect	text30
 16562  01779E                     __ptext30:
 16563                           	opt stack 0
 16564  01779E                     __tdiv_to_l_:
 16565                           	opt stack 24
 16566                           
 16567                           ; BSR set to: 0
 16568                           ;incstack = 0
 16569  01779E  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 16570  0177A2  0100               	movlb	0	; () banked
 16571  0177A4  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 16572  0177A6  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 16573  0177A8  0100               	movlb	0	; () banked
 16574  0177AA  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 16575  0177AC  0100               	movlb	0	; () banked
 16576  0177AE  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
 16577  0177B0  E301               	bnc	u13311
 16578  0177B2  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 16579  0177B4                     u13311:
 16580  0177B4  0100               	movlb	0	; () banked
 16581  0177B6  5166               	movf	??__tdiv_to_l_& (0+255),w,b
 16582  0177B8  0100               	movlb	0	; () banked
 16583  0177BA  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
 16584  0177BC  0100               	movlb	0	; () banked
 16585  0177BE  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 16586  0177C0  A4D8               	btfss	status,2,c
 16587  0177C2  D00A               	goto	l19870
 16588                           
 16589                           ; BSR set to: 0
 16590  0177C4  0E00               	movlw	0
 16591  0177C6  0100               	movlb	0	; () banked
 16592  0177C8  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 16593  0177CA  0E00               	movlw	0
 16594  0177CC  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 16595  0177CE  0E00               	movlw	0
 16596  0177D0  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 16597  0177D2  0E00               	movlw	0
 16598  0177D4  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 16599                           
 16600                           ; BSR set to: 0
 16601  0177D6  0012               	return	
 16602  0177D8                     l19870:
 16603                           
 16604                           ; BSR set to: 0
 16605  0177D8  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 16606  0177DC  0100               	movlb	0	; () banked
 16607  0177DE  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 16608  0177E0  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 16609  0177E2  0100               	movlb	0	; () banked
 16610  0177E4  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 16611  0177E6  0100               	movlb	0	; () banked
 16612  0177E8  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
 16613  0177EA  E301               	bnc	u13331
 16614  0177EC  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 16615  0177EE                     u13331:
 16616  0177EE  0100               	movlb	0	; () banked
 16617  0177F0  5166               	movf	??__tdiv_to_l_& (0+255),w,b
 16618  0177F2  0100               	movlb	0	; () banked
 16619  0177F4  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 16620  0177F6  0100               	movlb	0	; () banked
 16621  0177F8  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 16622  0177FA  A4D8               	btfss	status,2,c
 16623  0177FC  D00A               	goto	l19876
 16624                           
 16625                           ; BSR set to: 0
 16626  0177FE  0E00               	movlw	0
 16627  017800  0100               	movlb	0	; () banked
 16628  017802  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 16629  017804  0E00               	movlw	0
 16630  017806  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 16631  017808  0E00               	movlw	0
 16632  01780A  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 16633  01780C  0E00               	movlw	0
 16634  01780E  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 16635                           
 16636                           ; BSR set to: 0
 16637  017810  0012               	return	
 16638  017812                     l19876:
 16639                           
 16640                           ; BSR set to: 0
 16641  017812  0100               	movlb	0	; () banked
 16642  017814  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 16643                           
 16644                           ; BSR set to: 0
 16645  017816  0EFF               	movlw	255
 16646  017818  0100               	movlb	0	; () banked
 16647  01781A  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 16648  01781C  0EFF               	movlw	255
 16649  01781E  0100               	movlb	0	; () banked
 16650  017820  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 16651  017822  0E00               	movlw	0
 16652  017824  0100               	movlb	0	; () banked
 16653  017826  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 16654  017828  0100               	movlb	0	; () banked
 16655  01782A  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 16656                           
 16657                           ; BSR set to: 0
 16658  01782C  0EFF               	movlw	255
 16659  01782E  0100               	movlb	0	; () banked
 16660  017830  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 16661  017832  0EFF               	movlw	255
 16662  017834  0100               	movlb	0	; () banked
 16663  017836  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 16664  017838  0E00               	movlw	0
 16665  01783A  0100               	movlb	0	; () banked
 16666  01783C  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 16667                           
 16668                           ; BSR set to: 0
 16669  01783E  0E00               	movlw	0
 16670  017840  0100               	movlb	0	; () banked
 16671  017842  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
 16672  017844  0E00               	movlw	0
 16673  017846  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 16674  017848  0E00               	movlw	0
 16675  01784A  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 16676  01784C  0E00               	movlw	0
 16677  01784E  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 16678                           
 16679                           ; BSR set to: 0
 16680  017850  0E7F               	movlw	127
 16681  017852  0100               	movlb	0	; () banked
 16682  017854  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 16683                           
 16684                           ; BSR set to: 0
 16685  017856  0100               	movlb	0	; () banked
 16686  017858  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 16687  01785A  0F98               	addlw	152
 16688  01785C  0100               	movlb	0	; () banked
 16689  01785E  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 16690                           
 16691                           ; BSR set to: 0
 16692  017860  0E18               	movlw	24
 16693  017862  0100               	movlb	0	; () banked
 16694  017864  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 16695  017866                     l10697:
 16696                           
 16697                           ; BSR set to: 0
 16698  017866  0100               	movlb	0	; () banked
 16699  017868  90D8               	bcf	status,0,c
 16700  01786A  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 16701  01786C  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 16702  01786E  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 16703  017870  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 16704                           
 16705                           ; BSR set to: 0
 16706  017872  0100               	movlb	0	; () banked
 16707  017874  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
 16708  017876  0100               	movlb	0	; () banked
 16709  017878  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 16710  01787A  0100               	movlb	0	; () banked
 16711  01787C  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 16712  01787E  0100               	movlb	0	; () banked
 16713  017880  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 16714  017882  0100               	movlb	0	; () banked
 16715  017884  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 16716  017886  0100               	movlb	0	; () banked
 16717  017888  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 16718  01788A  A0D8               	btfss	status,0,c
 16719  01788C  D00E               	goto	l10698
 16720                           
 16721                           ; BSR set to: 0
 16722  01788E  0100               	movlb	0	; () banked
 16723  017890  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
 16724  017892  0100               	movlb	0	; () banked
 16725  017894  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 16726  017896  0100               	movlb	0	; () banked
 16727  017898  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 16728  01789A  0100               	movlb	0	; () banked
 16729  01789C  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 16730  01789E  0100               	movlb	0	; () banked
 16731  0178A0  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 16732  0178A2  0100               	movlb	0	; () banked
 16733  0178A4  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 16734                           
 16735                           ; BSR set to: 0
 16736  0178A6  0100               	movlb	0	; () banked
 16737  0178A8  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 16738  0178AA                     l10698:
 16739                           
 16740                           ; BSR set to: 0
 16741  0178AA  0100               	movlb	0	; () banked
 16742  0178AC  90D8               	bcf	status,0,c
 16743  0178AE  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 16744  0178B0  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 16745  0178B2  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 16746                           
 16747                           ; BSR set to: 0
 16748  0178B4  0100               	movlb	0	; () banked
 16749  0178B6  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 16750  0178B8  D7D6               	goto	l10697
 16751                           
 16752                           ; BSR set to: 0
 16753                           
 16754                           ; BSR set to: 0
 16755  0178BA  0100               	movlb	0	; () banked
 16756  0178BC  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 16757  0178BE  D01A               	goto	l19910
 16758                           
 16759                           ; BSR set to: 0
 16760  0178C0  0100               	movlb	0	; () banked
 16761  0178C2  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 16762  0178C4  0A80               	xorlw	128
 16763  0178C6  0F97               	addlw	151
 16764  0178C8  B0D8               	btfsc	status,0,c
 16765  0178CA  D00A               	goto	l19906
 16766                           
 16767                           ; BSR set to: 0
 16768  0178CC  0E00               	movlw	0
 16769  0178CE  0100               	movlb	0	; () banked
 16770  0178D0  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 16771  0178D2  0E00               	movlw	0
 16772  0178D4  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 16773  0178D6  0E00               	movlw	0
 16774  0178D8  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 16775  0178DA  0E00               	movlw	0
 16776  0178DC  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 16777                           
 16778                           ; BSR set to: 0
 16779  0178DE  0012               	return	
 16780  0178E0                     l19906:
 16781                           
 16782                           ; BSR set to: 0
 16783  0178E0  0100               	movlb	0	; () banked
 16784  0178E2  90D8               	bcf	status,0,c
 16785  0178E4  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 16786  0178E6  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 16787  0178E8  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 16788  0178EA  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 16789                           
 16790                           ; BSR set to: 0
 16791  0178EC  0100               	movlb	0	; () banked
 16792  0178EE  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 16793  0178F0  D7F7               	goto	l19906
 16794                           
 16795                           ; BSR set to: 0
 16796  0178F2  D01B               	goto	l10704
 16797  0178F4                     l19910:
 16798                           
 16799                           ; BSR set to: 0
 16800  0178F4  0E17               	movlw	23
 16801  0178F6  0100               	movlb	0	; () banked
 16802  0178F8  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 16803  0178FA  D012               	goto	l19918
 16804                           
 16805                           ; BSR set to: 0
 16806  0178FC  0E00               	movlw	0
 16807  0178FE  0100               	movlb	0	; () banked
 16808  017900  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 16809  017902  0E00               	movlw	0
 16810  017904  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 16811  017906  0E00               	movlw	0
 16812  017908  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 16813  01790A  0E00               	movlw	0
 16814  01790C  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 16815                           
 16816                           ; BSR set to: 0
 16817  01790E  0012               	return	
 16818  017910                     l19916:
 16819                           
 16820                           ; BSR set to: 0
 16821  017910  0100               	movlb	0	; () banked
 16822  017912  90D8               	bcf	status,0,c
 16823  017914  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 16824  017916  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 16825  017918  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 16826  01791A  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 16827  01791C  0100               	movlb	0	; () banked
 16828  01791E  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 16829  017920                     l19918:
 16830                           
 16831                           ; BSR set to: 0
 16832  017920  0100               	movlb	0	; () banked
 16833  017922  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 16834  017924  0100               	movlb	0	; () banked
 16835  017926  A4D8               	btfss	status,2,c
 16836  017928  D7F3               	goto	l19916
 16837  01792A                     l10704:
 16838                           
 16839                           ; BSR set to: 0
 16840  01792A  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 16841  01792E  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 16842  017932  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 16843  017936  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 16844                           
 16845                           ; BSR set to: 0
 16846  01793A  0012               	return		;funcret
 16847  01793C                     __end_of__tdiv_to_l_:
 16848                           	opt stack 0
 16849                           tblptru	equ	0xFF8
 16850                           tblptrh	equ	0xFF7
 16851                           tblptrl	equ	0xFF6
 16852                           tablat	equ	0xFF5
 16853                           prodh	equ	0xFF4
 16854                           prodl	equ	0xFF3
 16855                           intcon	equ	0xFF2
 16856                           postinc0	equ	0xFEE
 16857                           wreg	equ	0xFE8
 16858                           postdec1	equ	0xFE5
 16859                           fsr1h	equ	0xFE2
 16860                           fsr1l	equ	0xFE1
 16861                           indf2	equ	0xFDF
 16862                           postinc2	equ	0xFDE
 16863                           postdec2	equ	0xFDD
 16864                           fsr2h	equ	0xFDA
 16865                           fsr2l	equ	0xFD9
 16866                           status	equ	0xFD8
 16867                           
 16868 ;; *************** function __div_to_l_ *****************
 16869 ;; Defined at:
 16870 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
 16871 ;; Parameters:    Size  Location     Type
 16872 ;;  f1              3    0[BANK0 ] unsigned long 
 16873 ;;  f2              3    3[BANK0 ] unsigned long 
 16874 ;; Auto vars:     Size  Location     Type
 16875 ;;  quot            4    6[BANK0 ] unsigned long 
 16876 ;;  exp1            1   11[BANK0 ] unsigned char 
 16877 ;;  cntr            1   10[BANK0 ] unsigned char 
 16878 ;; Return value:  Size  Location     Type
 16879 ;;                  4    0[BANK0 ] unsigned long 
 16880 ;; Registers used:
 16881 ;;		wreg, status,2, status,0
 16882 ;; Tracked objects:
 16883 ;;		On entry : 0/0
 16884 ;;		On exit  : 0/0
 16885 ;;		Unchanged: 0/0
 16886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16887 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16888 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16890 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16891 ;;Total ram usage:       12 bytes
 16892 ;; Hardware stack levels used:    1
 16893 ;; Hardware stack levels required when called:    3
 16894 ;; This function calls:
 16895 ;;		Nothing
 16896 ;; This function is called by:
 16897 ;;		_printf
 16898 ;; This function uses a non-reentrant model
 16899 ;;
 16900                           
 16901                           	psect	text31
 16902  017AC6                     __ptext31:
 16903                           	opt stack 0
 16904  017AC6                     __div_to_l_:
 16905                           	opt stack 24
 16906                           
 16907                           ; BSR set to: 0
 16908                           ;incstack = 0
 16909  017AC6  0100               	movlb	0	; () banked
 16910  017AC8  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 16911  017ACA  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 16912  017ACC  0100               	movlb	0	; () banked
 16913  017ACE  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
 16914  017AD0  0100               	movlb	0	; () banked
 16915  017AD2  516B               	movf	__div_to_l_@exp1& (0+255),w,b
 16916  017AD4  A4D8               	btfss	status,2,c
 16917  017AD6  D00A               	goto	l19926
 16918                           
 16919                           ; BSR set to: 0
 16920  017AD8  0E00               	movlw	0
 16921  017ADA  0100               	movlb	0	; () banked
 16922  017ADC  6F60               	movwf	?__div_to_l_& (0+255),b
 16923  017ADE  0E00               	movlw	0
 16924  017AE0  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 16925  017AE2  0E00               	movlw	0
 16926  017AE4  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 16927  017AE6  0E00               	movlw	0
 16928  017AE8  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 16929                           
 16930                           ; BSR set to: 0
 16931  017AEA  0012               	return	
 16932  017AEC                     l19926:
 16933                           
 16934                           ; BSR set to: 0
 16935  017AEC  0100               	movlb	0	; () banked
 16936  017AEE  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 16937  017AF0  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 16938  017AF2  0100               	movlb	0	; () banked
 16939  017AF4  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
 16940  017AF6  0100               	movlb	0	; () banked
 16941  017AF8  516A               	movf	__div_to_l_@cntr& (0+255),w,b
 16942  017AFA  A4D8               	btfss	status,2,c
 16943  017AFC  D00A               	goto	l19932
 16944                           
 16945                           ; BSR set to: 0
 16946  017AFE  0E00               	movlw	0
 16947  017B00  0100               	movlb	0	; () banked
 16948  017B02  6F60               	movwf	?__div_to_l_& (0+255),b
 16949  017B04  0E00               	movlw	0
 16950  017B06  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 16951  017B08  0E00               	movlw	0
 16952  017B0A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 16953  017B0C  0E00               	movlw	0
 16954  017B0E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 16955                           
 16956                           ; BSR set to: 0
 16957  017B10  0012               	return	
 16958  017B12                     l19932:
 16959                           
 16960                           ; BSR set to: 0
 16961  017B12  0100               	movlb	0	; () banked
 16962  017B14  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 16963                           
 16964                           ; BSR set to: 0
 16965  017B16  0EFF               	movlw	255
 16966  017B18  0100               	movlb	0	; () banked
 16967  017B1A  1760               	andwf	__div_to_l_@f1& (0+255),f,b
 16968  017B1C  0EFF               	movlw	255
 16969  017B1E  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 16970  017B20  0EFF               	movlw	255
 16971  017B22  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 16972  017B24  0E00               	movlw	0
 16973  017B26  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 16974                           
 16975                           ; BSR set to: 0
 16976  017B28  0100               	movlb	0	; () banked
 16977  017B2A  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 16978  017B2C  0EFF               	movlw	255
 16979  017B2E  0100               	movlb	0	; () banked
 16980  017B30  1763               	andwf	__div_to_l_@f2& (0+255),f,b
 16981  017B32  0EFF               	movlw	255
 16982  017B34  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 16983  017B36  0EFF               	movlw	255
 16984  017B38  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 16985  017B3A  0E00               	movlw	0
 16986  017B3C  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 16987                           
 16988                           ; BSR set to: 0
 16989  017B3E  0E00               	movlw	0
 16990  017B40  0100               	movlb	0	; () banked
 16991  017B42  6F66               	movwf	__div_to_l_@quot& (0+255),b
 16992  017B44  0E00               	movlw	0
 16993  017B46  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
 16994  017B48  0E00               	movlw	0
 16995  017B4A  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
 16996  017B4C  0E00               	movlw	0
 16997  017B4E  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
 16998                           
 16999                           ; BSR set to: 0
 17000  017B50  0E7F               	movlw	127
 17001  017B52  0100               	movlb	0	; () banked
 17002  017B54  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
 17003                           
 17004                           ; BSR set to: 0
 17005  017B56  0100               	movlb	0	; () banked
 17006  017B58  516A               	movf	__div_to_l_@cntr& (0+255),w,b
 17007  017B5A  0FA0               	addlw	160
 17008  017B5C  0100               	movlb	0	; () banked
 17009  017B5E  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
 17010                           
 17011                           ; BSR set to: 0
 17012  017B60  0E20               	movlw	32
 17013  017B62  0100               	movlb	0	; () banked
 17014  017B64  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
 17015  017B66                     l19946:
 17016                           
 17017                           ; BSR set to: 0
 17018  017B66  0100               	movlb	0	; () banked
 17019  017B68  90D8               	bcf	status,0,c
 17020  017B6A  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
 17021  017B6C  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 17022  017B6E  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 17023  017B70  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 17024                           
 17025                           ; BSR set to: 0
 17026  017B72  0100               	movlb	0	; () banked
 17027  017B74  5163               	movf	__div_to_l_@f2& (0+255),w,b
 17028  017B76  0100               	movlb	0	; () banked
 17029  017B78  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
 17030  017B7A  0100               	movlb	0	; () banked
 17031  017B7C  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 17032  017B7E  0100               	movlb	0	; () banked
 17033  017B80  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 17034  017B82  0100               	movlb	0	; () banked
 17035  017B84  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 17036  017B86  0100               	movlb	0	; () banked
 17037  017B88  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 17038  017B8A  0100               	movlb	0	; () banked
 17039  017B8C  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 17040  017B8E  0100               	movlb	0	; () banked
 17041  017B90  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 17042  017B92  A0D8               	btfss	status,0,c
 17043  017B94  D012               	goto	l19954
 17044                           
 17045                           ; BSR set to: 0
 17046  017B96  0100               	movlb	0	; () banked
 17047  017B98  5163               	movf	__div_to_l_@f2& (0+255),w,b
 17048  017B9A  0100               	movlb	0	; () banked
 17049  017B9C  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
 17050  017B9E  0100               	movlb	0	; () banked
 17051  017BA0  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 17052  017BA2  0100               	movlb	0	; () banked
 17053  017BA4  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 17054  017BA6  0100               	movlb	0	; () banked
 17055  017BA8  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 17056  017BAA  0100               	movlb	0	; () banked
 17057  017BAC  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 17058  017BAE  0100               	movlb	0	; () banked
 17059  017BB0  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 17060  017BB2  0100               	movlb	0	; () banked
 17061  017BB4  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 17062                           
 17063                           ; BSR set to: 0
 17064  017BB6  0100               	movlb	0	; () banked
 17065  017BB8  8166               	bsf	__div_to_l_@quot& (0+255),0,b
 17066  017BBA                     l19954:
 17067                           
 17068                           ; BSR set to: 0
 17069  017BBA  0100               	movlb	0	; () banked
 17070  017BBC  90D8               	bcf	status,0,c
 17071  017BBE  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
 17072  017BC0  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 17073  017BC2  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 17074  017BC4  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 17075                           
 17076                           ; BSR set to: 0
 17077  017BC6  0100               	movlb	0	; () banked
 17078  017BC8  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
 17079  017BCA  D7CD               	goto	l19946
 17080                           
 17081                           ; BSR set to: 0
 17082                           
 17083                           ; BSR set to: 0
 17084  017BCC  0100               	movlb	0	; () banked
 17085  017BCE  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
 17086  017BD0  D01A               	goto	l19970
 17087                           
 17088                           ; BSR set to: 0
 17089  017BD2  0100               	movlb	0	; () banked
 17090  017BD4  516B               	movf	__div_to_l_@exp1& (0+255),w,b
 17091  017BD6  0A80               	xorlw	128
 17092  017BD8  0F9F               	addlw	159
 17093  017BDA  B0D8               	btfsc	status,0,c
 17094  017BDC  D00A               	goto	l19966
 17095                           
 17096                           ; BSR set to: 0
 17097  017BDE  0E00               	movlw	0
 17098  017BE0  0100               	movlb	0	; () banked
 17099  017BE2  6F60               	movwf	?__div_to_l_& (0+255),b
 17100  017BE4  0E00               	movlw	0
 17101  017BE6  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 17102  017BE8  0E00               	movlw	0
 17103  017BEA  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 17104  017BEC  0E00               	movlw	0
 17105  017BEE  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 17106                           
 17107                           ; BSR set to: 0
 17108  017BF0  0012               	return	
 17109  017BF2                     l19966:
 17110                           
 17111                           ; BSR set to: 0
 17112  017BF2  0100               	movlb	0	; () banked
 17113  017BF4  90D8               	bcf	status,0,c
 17114  017BF6  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 17115  017BF8  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 17116  017BFA  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 17117  017BFC  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
 17118                           
 17119                           ; BSR set to: 0
 17120  017BFE  0100               	movlb	0	; () banked
 17121  017C00  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
 17122  017C02  D7F7               	goto	l19966
 17123                           
 17124                           ; BSR set to: 0
 17125  017C04  D01B               	goto	l10600
 17126  017C06                     l19970:
 17127                           
 17128                           ; BSR set to: 0
 17129  017C06  0E1F               	movlw	31
 17130  017C08  0100               	movlb	0	; () banked
 17131  017C0A  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
 17132  017C0C  D012               	goto	l19978
 17133                           
 17134                           ; BSR set to: 0
 17135  017C0E  0E00               	movlw	0
 17136  017C10  0100               	movlb	0	; () banked
 17137  017C12  6F60               	movwf	?__div_to_l_& (0+255),b
 17138  017C14  0E00               	movlw	0
 17139  017C16  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 17140  017C18  0E00               	movlw	0
 17141  017C1A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 17142  017C1C  0E00               	movlw	0
 17143  017C1E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 17144                           
 17145                           ; BSR set to: 0
 17146  017C20  0012               	return	
 17147  017C22                     l19976:
 17148                           
 17149                           ; BSR set to: 0
 17150  017C22  0100               	movlb	0	; () banked
 17151  017C24  90D8               	bcf	status,0,c
 17152  017C26  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
 17153  017C28  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 17154  017C2A  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 17155  017C2C  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 17156  017C2E  0100               	movlb	0	; () banked
 17157  017C30  076B               	decf	__div_to_l_@exp1& (0+255),f,b
 17158  017C32                     l19978:
 17159                           
 17160                           ; BSR set to: 0
 17161  017C32  0100               	movlb	0	; () banked
 17162  017C34  516B               	movf	__div_to_l_@exp1& (0+255),w,b
 17163  017C36  0100               	movlb	0	; () banked
 17164  017C38  A4D8               	btfss	status,2,c
 17165  017C3A  D7F3               	goto	l19976
 17166  017C3C                     l10600:
 17167                           
 17168                           ; BSR set to: 0
 17169  017C3C  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
 17170  017C40  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 17171  017C44  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 17172  017C48  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 17173                           
 17174                           ; BSR set to: 0
 17175  017C4C  0012               	return		;funcret
 17176  017C4E                     __end_of__div_to_l_:
 17177                           	opt stack 0
 17178                           tblptru	equ	0xFF8
 17179                           tblptrh	equ	0xFF7
 17180                           tblptrl	equ	0xFF6
 17181                           tablat	equ	0xFF5
 17182                           prodh	equ	0xFF4
 17183                           prodl	equ	0xFF3
 17184                           intcon	equ	0xFF2
 17185                           postinc0	equ	0xFEE
 17186                           wreg	equ	0xFE8
 17187                           postdec1	equ	0xFE5
 17188                           fsr1h	equ	0xFE2
 17189                           fsr1l	equ	0xFE1
 17190                           indf2	equ	0xFDF
 17191                           postinc2	equ	0xFDE
 17192                           postdec2	equ	0xFDD
 17193                           fsr2h	equ	0xFDA
 17194                           fsr2l	equ	0xFD9
 17195                           status	equ	0xFD8
 17196                           
 17197 ;; *************** function ___lltoft *****************
 17198 ;; Defined at:
 17199 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
 17200 ;; Parameters:    Size  Location     Type
 17201 ;;  c               4    8[BANK0 ] unsigned long 
 17202 ;; Auto vars:     Size  Location     Type
 17203 ;;  exp             1   16[BANK0 ] unsigned char 
 17204 ;; Return value:  Size  Location     Type
 17205 ;;                  3    8[BANK0 ] float 
 17206 ;; Registers used:
 17207 ;;		wreg, status,2, status,0, cstack
 17208 ;; Tracked objects:
 17209 ;;		On entry : 0/0
 17210 ;;		On exit  : 0/0
 17211 ;;		Unchanged: 0/0
 17212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17213 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17215 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17216 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17217 ;;Total ram usage:        9 bytes
 17218 ;; Hardware stack levels used:    1
 17219 ;; Hardware stack levels required when called:    4
 17220 ;; This function calls:
 17221 ;;		___ftpack
 17222 ;; This function is called by:
 17223 ;;		_printf
 17224 ;; This function uses a non-reentrant model
 17225 ;;
 17226                           
 17227                           	psect	text32
 17228  01A5EE                     __ptext32:
 17229                           	opt stack 0
 17230  01A5EE                     ___lltoft:
 17231                           	opt stack 23
 17232                           
 17233                           ; BSR set to: 0
 17234                           ;incstack = 0
 17235  01A5EE  0E8E               	movlw	142
 17236  01A5F0  0100               	movlb	0	; () banked
 17237  01A5F2  6F70               	movwf	___lltoft@exp& (0+255),b
 17238  01A5F4  D008               	goto	l20114
 17239  01A5F6                     l20112:
 17240                           
 17241                           ; BSR set to: 0
 17242  01A5F6  0100               	movlb	0	; () banked
 17243  01A5F8  90D8               	bcf	status,0,c
 17244  01A5FA  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 17245  01A5FC  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 17246  01A5FE  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
 17247  01A600  3368               	rrcf	___lltoft@c& (0+255),f,b
 17248  01A602  0100               	movlb	0	; () banked
 17249  01A604  2B70               	incf	___lltoft@exp& (0+255),f,b
 17250  01A606                     l20114:
 17251                           
 17252                           ; BSR set to: 0
 17253  01A606  0E00               	movlw	0
 17254  01A608  0100               	movlb	0	; () banked
 17255  01A60A  1568               	andwf	___lltoft@c& (0+255),w,b
 17256  01A60C  0100               	movlb	0	; () banked
 17257  01A60E  6F6C               	movwf	??___lltoft& (0+255),b
 17258  01A610  0E00               	movlw	0
 17259  01A612  0100               	movlb	0	; () banked
 17260  01A614  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
 17261  01A616  0100               	movlb	0	; () banked
 17262  01A618  6F6D               	movwf	(??___lltoft+1)& (0+255),b
 17263  01A61A  0E00               	movlw	0
 17264  01A61C  0100               	movlb	0	; () banked
 17265  01A61E  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
 17266  01A620  0100               	movlb	0	; () banked
 17267  01A622  6F6E               	movwf	(??___lltoft+2)& (0+255),b
 17268  01A624  0EFF               	movlw	255
 17269  01A626  0100               	movlb	0	; () banked
 17270  01A628  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
 17271  01A62A  0100               	movlb	0	; () banked
 17272  01A62C  6F6F               	movwf	(??___lltoft+3)& (0+255),b
 17273  01A62E  0100               	movlb	0	; () banked
 17274  01A630  516C               	movf	??___lltoft& (0+255),w,b
 17275  01A632  0100               	movlb	0	; () banked
 17276  01A634  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
 17277  01A636  0100               	movlb	0	; () banked
 17278  01A638  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
 17279  01A63A  0100               	movlb	0	; () banked
 17280  01A63C  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
 17281  01A63E  A4D8               	btfss	status,2,c
 17282  01A640  D7DA               	goto	l20112
 17283                           
 17284                           ; BSR set to: 0
 17285                           
 17286                           ; BSR set to: 0
 17287  01A642  C068  F060         	movff	___lltoft@c,___ftpack@arg
 17288  01A646  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
 17289  01A64A  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
 17290  01A64E  C070  F063         	movff	___lltoft@exp,___ftpack@exp
 17291  01A652  0E00               	movlw	0
 17292  01A654  0100               	movlb	0	; () banked
 17293  01A656  6F64               	movwf	___ftpack@sign& (0+255),b
 17294  01A658  EC4E  F0C5         	call	___ftpack	;wreg free
 17295  01A65C  C060  F068         	movff	?___ftpack,?___lltoft
 17296  01A660  C061  F069         	movff	?___ftpack+1,?___lltoft+1
 17297  01A664  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
 17298  01A668  0012               	return	
 17299  01A66A                     __end_of___lltoft:
 17300                           	opt stack 0
 17301                           tblptru	equ	0xFF8
 17302                           tblptrh	equ	0xFF7
 17303                           tblptrl	equ	0xFF6
 17304                           tablat	equ	0xFF5
 17305                           prodh	equ	0xFF4
 17306                           prodl	equ	0xFF3
 17307                           intcon	equ	0xFF2
 17308                           postinc0	equ	0xFEE
 17309                           wreg	equ	0xFE8
 17310                           postdec1	equ	0xFE5
 17311                           fsr1h	equ	0xFE2
 17312                           fsr1l	equ	0xFE1
 17313                           indf2	equ	0xFDF
 17314                           postinc2	equ	0xFDE
 17315                           postdec2	equ	0xFDD
 17316                           fsr2h	equ	0xFDA
 17317                           fsr2l	equ	0xFD9
 17318                           status	equ	0xFD8
 17319                           
 17320 ;; *************** function ___llmod *****************
 17321 ;; Defined at:
 17322 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 17323 ;; Parameters:    Size  Location     Type
 17324 ;;  dividend        4   13[BANK0 ] unsigned long 
 17325 ;;  divisor         4   17[BANK0 ] unsigned long 
 17326 ;; Auto vars:     Size  Location     Type
 17327 ;;  counter         1   21[BANK0 ] unsigned char 
 17328 ;; Return value:  Size  Location     Type
 17329 ;;                  4   13[BANK0 ] unsigned long 
 17330 ;; Registers used:
 17331 ;;		wreg, status,2, status,0
 17332 ;; Tracked objects:
 17333 ;;		On entry : 0/0
 17334 ;;		On exit  : 0/0
 17335 ;;		Unchanged: 0/0
 17336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17337 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17340 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17341 ;;Total ram usage:        9 bytes
 17342 ;; Hardware stack levels used:    1
 17343 ;; Hardware stack levels required when called:    3
 17344 ;; This function calls:
 17345 ;;		Nothing
 17346 ;; This function is called by:
 17347 ;;		_printf
 17348 ;; This function uses a non-reentrant model
 17349 ;;
 17350                           
 17351                           	psect	text33
 17352  01A32E                     __ptext33:
 17353                           	opt stack 0
 17354  01A32E                     ___llmod:
 17355                           	opt stack 24
 17356                           
 17357                           ;incstack = 0
 17358  01A32E  0100               	movlb	0	; () banked
 17359  01A330  5171               	movf	___llmod@divisor& (0+255),w,b
 17360  01A332  0100               	movlb	0	; () banked
 17361  01A334  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 17362  01A336  0100               	movlb	0	; () banked
 17363  01A338  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 17364  01A33A  0100               	movlb	0	; () banked
 17365  01A33C  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 17366  01A33E  B4D8               	btfsc	status,2,c
 17367  01A340  D03A               	goto	l10789
 17368                           
 17369                           ; BSR set to: 0
 17370  01A342  0E01               	movlw	1
 17371  01A344  0100               	movlb	0	; () banked
 17372  01A346  6F75               	movwf	___llmod@counter& (0+255),b
 17373  01A348  D008               	goto	l20100
 17374  01A34A                     l20098:
 17375                           
 17376                           ; BSR set to: 0
 17377  01A34A  0100               	movlb	0	; () banked
 17378  01A34C  90D8               	bcf	status,0,c
 17379  01A34E  3771               	rlcf	___llmod@divisor& (0+255),f,b
 17380  01A350  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 17381  01A352  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 17382  01A354  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 17383  01A356  0100               	movlb	0	; () banked
 17384  01A358  2B75               	incf	___llmod@counter& (0+255),f,b
 17385  01A35A                     l20100:
 17386                           
 17387                           ; BSR set to: 0
 17388  01A35A  0100               	movlb	0	; () banked
 17389  01A35C  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 17390  01A35E  D7F5               	goto	l20098
 17391  01A360                     l20102:
 17392                           
 17393                           ; BSR set to: 0
 17394  01A360  0100               	movlb	0	; () banked
 17395  01A362  5171               	movf	___llmod@divisor& (0+255),w,b
 17396  01A364  0100               	movlb	0	; () banked
 17397  01A366  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 17398  01A368  0100               	movlb	0	; () banked
 17399  01A36A  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 17400  01A36C  0100               	movlb	0	; () banked
 17401  01A36E  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 17402  01A370  0100               	movlb	0	; () banked
 17403  01A372  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 17404  01A374  0100               	movlb	0	; () banked
 17405  01A376  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 17406  01A378  0100               	movlb	0	; () banked
 17407  01A37A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 17408  01A37C  0100               	movlb	0	; () banked
 17409  01A37E  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 17410  01A380  A0D8               	btfss	status,0,c
 17411  01A382  D010               	goto	l20106
 17412                           
 17413                           ; BSR set to: 0
 17414  01A384  0100               	movlb	0	; () banked
 17415  01A386  5171               	movf	___llmod@divisor& (0+255),w,b
 17416  01A388  0100               	movlb	0	; () banked
 17417  01A38A  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 17418  01A38C  0100               	movlb	0	; () banked
 17419  01A38E  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 17420  01A390  0100               	movlb	0	; () banked
 17421  01A392  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 17422  01A394  0100               	movlb	0	; () banked
 17423  01A396  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 17424  01A398  0100               	movlb	0	; () banked
 17425  01A39A  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 17426  01A39C  0100               	movlb	0	; () banked
 17427  01A39E  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 17428  01A3A0  0100               	movlb	0	; () banked
 17429  01A3A2  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 17430  01A3A4                     l20106:
 17431                           
 17432                           ; BSR set to: 0
 17433  01A3A4  0100               	movlb	0	; () banked
 17434  01A3A6  90D8               	bcf	status,0,c
 17435  01A3A8  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 17436  01A3AA  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 17437  01A3AC  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 17438  01A3AE  3371               	rrcf	___llmod@divisor& (0+255),f,b
 17439                           
 17440                           ; BSR set to: 0
 17441  01A3B0  0100               	movlb	0	; () banked
 17442  01A3B2  2F75               	decfsz	___llmod@counter& (0+255),f,b
 17443  01A3B4  D7D5               	goto	l20102
 17444  01A3B6                     l10789:
 17445                           
 17446                           ; BSR set to: 0
 17447  01A3B6  C06D  F06D         	movff	___llmod@dividend,?___llmod
 17448  01A3BA  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 17449  01A3BE  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 17450  01A3C2  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 17451                           
 17452                           ; BSR set to: 0
 17453  01A3C6  0012               	return		;funcret
 17454  01A3C8                     __end_of___llmod:
 17455                           	opt stack 0
 17456                           tblptru	equ	0xFF8
 17457                           tblptrh	equ	0xFF7
 17458                           tblptrl	equ	0xFF6
 17459                           tablat	equ	0xFF5
 17460                           prodh	equ	0xFF4
 17461                           prodl	equ	0xFF3
 17462                           intcon	equ	0xFF2
 17463                           postinc0	equ	0xFEE
 17464                           wreg	equ	0xFE8
 17465                           postdec1	equ	0xFE5
 17466                           fsr1h	equ	0xFE2
 17467                           fsr1l	equ	0xFE1
 17468                           indf2	equ	0xFDF
 17469                           postinc2	equ	0xFDE
 17470                           postdec2	equ	0xFDD
 17471                           fsr2h	equ	0xFDA
 17472                           fsr2l	equ	0xFD9
 17473                           status	equ	0xFD8
 17474                           
 17475 ;; *************** function ___lldiv *****************
 17476 ;; Defined at:
 17477 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 17478 ;; Parameters:    Size  Location     Type
 17479 ;;  dividend        4    0[BANK0 ] unsigned long 
 17480 ;;  divisor         4    4[BANK0 ] unsigned long 
 17481 ;; Auto vars:     Size  Location     Type
 17482 ;;  quotient        4    8[BANK0 ] unsigned long 
 17483 ;;  counter         1   12[BANK0 ] unsigned char 
 17484 ;; Return value:  Size  Location     Type
 17485 ;;                  4    0[BANK0 ] unsigned long 
 17486 ;; Registers used:
 17487 ;;		wreg, status,2, status,0
 17488 ;; Tracked objects:
 17489 ;;		On entry : 0/0
 17490 ;;		On exit  : 0/0
 17491 ;;		Unchanged: 0/0
 17492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17493 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17494 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17496 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17497 ;;Total ram usage:       13 bytes
 17498 ;; Hardware stack levels used:    1
 17499 ;; Hardware stack levels required when called:    3
 17500 ;; This function calls:
 17501 ;;		Nothing
 17502 ;; This function is called by:
 17503 ;;		_printf
 17504 ;; This function uses a non-reentrant model
 17505 ;;
 17506                           
 17507                           	psect	text34
 17508  019A5C                     __ptext34:
 17509                           	opt stack 0
 17510  019A5C                     ___lldiv:
 17511                           	opt stack 24
 17512                           
 17513                           ; BSR set to: 0
 17514                           ;incstack = 0
 17515  019A5C  0E00               	movlw	0
 17516  019A5E  0100               	movlb	0	; () banked
 17517  019A60  6F68               	movwf	___lldiv@quotient& (0+255),b
 17518  019A62  0E00               	movlw	0
 17519  019A64  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 17520  019A66  0E00               	movlw	0
 17521  019A68  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 17522  019A6A  0E00               	movlw	0
 17523  019A6C  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 17524                           
 17525                           ; BSR set to: 0
 17526  019A6E  0100               	movlb	0	; () banked
 17527  019A70  5164               	movf	___lldiv@divisor& (0+255),w,b
 17528  019A72  0100               	movlb	0	; () banked
 17529  019A74  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 17530  019A76  0100               	movlb	0	; () banked
 17531  019A78  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 17532  019A7A  0100               	movlb	0	; () banked
 17533  019A7C  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 17534  019A7E  B4D8               	btfsc	status,2,c
 17535  019A80  D042               	goto	l10779
 17536                           
 17537                           ; BSR set to: 0
 17538  019A82  0E01               	movlw	1
 17539  019A84  0100               	movlb	0	; () banked
 17540  019A86  6F6C               	movwf	___lldiv@counter& (0+255),b
 17541  019A88  D008               	goto	l20080
 17542  019A8A                     l20078:
 17543                           
 17544                           ; BSR set to: 0
 17545  019A8A  0100               	movlb	0	; () banked
 17546  019A8C  90D8               	bcf	status,0,c
 17547  019A8E  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 17548  019A90  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 17549  019A92  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 17550  019A94  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 17551  019A96  0100               	movlb	0	; () banked
 17552  019A98  2B6C               	incf	___lldiv@counter& (0+255),f,b
 17553  019A9A                     l20080:
 17554                           
 17555                           ; BSR set to: 0
 17556  019A9A  0100               	movlb	0	; () banked
 17557  019A9C  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 17558  019A9E  D7F5               	goto	l20078
 17559  019AA0                     l20082:
 17560                           
 17561                           ; BSR set to: 0
 17562  019AA0  0100               	movlb	0	; () banked
 17563  019AA2  90D8               	bcf	status,0,c
 17564  019AA4  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 17565  019AA6  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 17566  019AA8  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 17567  019AAA  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 17568                           
 17569                           ; BSR set to: 0
 17570  019AAC  0100               	movlb	0	; () banked
 17571  019AAE  5164               	movf	___lldiv@divisor& (0+255),w,b
 17572  019AB0  0100               	movlb	0	; () banked
 17573  019AB2  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 17574  019AB4  0100               	movlb	0	; () banked
 17575  019AB6  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17576  019AB8  0100               	movlb	0	; () banked
 17577  019ABA  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 17578  019ABC  0100               	movlb	0	; () banked
 17579  019ABE  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17580  019AC0  0100               	movlb	0	; () banked
 17581  019AC2  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 17582  019AC4  0100               	movlb	0	; () banked
 17583  019AC6  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17584  019AC8  0100               	movlb	0	; () banked
 17585  019ACA  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 17586  019ACC  A0D8               	btfss	status,0,c
 17587  019ACE  D012               	goto	l20090
 17588                           
 17589                           ; BSR set to: 0
 17590  019AD0  0100               	movlb	0	; () banked
 17591  019AD2  5164               	movf	___lldiv@divisor& (0+255),w,b
 17592  019AD4  0100               	movlb	0	; () banked
 17593  019AD6  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 17594  019AD8  0100               	movlb	0	; () banked
 17595  019ADA  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17596  019ADC  0100               	movlb	0	; () banked
 17597  019ADE  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 17598  019AE0  0100               	movlb	0	; () banked
 17599  019AE2  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17600  019AE4  0100               	movlb	0	; () banked
 17601  019AE6  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 17602  019AE8  0100               	movlb	0	; () banked
 17603  019AEA  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17604  019AEC  0100               	movlb	0	; () banked
 17605  019AEE  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 17606                           
 17607                           ; BSR set to: 0
 17608  019AF0  0100               	movlb	0	; () banked
 17609  019AF2  8168               	bsf	___lldiv@quotient& (0+255),0,b
 17610  019AF4                     l20090:
 17611                           
 17612                           ; BSR set to: 0
 17613  019AF4  0100               	movlb	0	; () banked
 17614  019AF6  90D8               	bcf	status,0,c
 17615  019AF8  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 17616  019AFA  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 17617  019AFC  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 17618  019AFE  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 17619                           
 17620                           ; BSR set to: 0
 17621  019B00  0100               	movlb	0	; () banked
 17622  019B02  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 17623  019B04  D7CD               	goto	l20082
 17624  019B06                     l10779:
 17625                           
 17626                           ; BSR set to: 0
 17627  019B06  C068  F060         	movff	___lldiv@quotient,?___lldiv
 17628  019B0A  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 17629  019B0E  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 17630  019B12  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 17631                           
 17632                           ; BSR set to: 0
 17633  019B16  0012               	return		;funcret
 17634  019B18                     __end_of___lldiv:
 17635                           	opt stack 0
 17636                           tblptru	equ	0xFF8
 17637                           tblptrh	equ	0xFF7
 17638                           tblptrl	equ	0xFF6
 17639                           tablat	equ	0xFF5
 17640                           prodh	equ	0xFF4
 17641                           prodl	equ	0xFF3
 17642                           intcon	equ	0xFF2
 17643                           postinc0	equ	0xFEE
 17644                           wreg	equ	0xFE8
 17645                           postdec1	equ	0xFE5
 17646                           fsr1h	equ	0xFE2
 17647                           fsr1l	equ	0xFE1
 17648                           indf2	equ	0xFDF
 17649                           postinc2	equ	0xFDE
 17650                           postdec2	equ	0xFDD
 17651                           fsr2h	equ	0xFDA
 17652                           fsr2l	equ	0xFD9
 17653                           status	equ	0xFD8
 17654                           
 17655 ;; *************** function _RTC_GetDateTime *****************
 17656 ;; Defined at:
 17657 ;;		line 53 in file "RTC.c"
 17658 ;; Parameters:    Size  Location     Type
 17659 ;;  rtc             2    2[BANK0 ] PTR struct .
 17660 ;;		 -> rtc(7), 
 17661 ;; Auto vars:     Size  Location     Type
 17662 ;;		None
 17663 ;; Return value:  Size  Location     Type
 17664 ;;                  1    wreg      void 
 17665 ;; Registers used:
 17666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17667 ;; Tracked objects:
 17668 ;;		On entry : 0/0
 17669 ;;		On exit  : 0/0
 17670 ;;		Unchanged: 0/0
 17671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17676 ;;Total ram usage:        2 bytes
 17677 ;; Hardware stack levels used:    1
 17678 ;; Hardware stack levels required when called:    5
 17679 ;; This function calls:
 17680 ;;		_I2C_Read
 17681 ;;		_I2C_Start
 17682 ;;		_I2C_Stop
 17683 ;;		_I2C_Write
 17684 ;; This function is called by:
 17685 ;;		_UART_Data
 17686 ;; This function uses a non-reentrant model
 17687 ;;
 17688                           
 17689                           	psect	text35
 17690  019B18                     __ptext35:
 17691                           	opt stack 0
 17692  019B18                     _RTC_GetDateTime:
 17693                           	opt stack 23
 17694                           
 17695                           ;RTC.c: 55: I2C_Start();
 17696                           
 17697                           ; BSR set to: 0
 17698                           ;incstack = 0
 17699  019B18  ECCF  F0D8         	call	_I2C_Start	;wreg free
 17700                           
 17701                           ;RTC.c: 57: I2C_Write(0xD0u);
 17702  019B1C  0ED0               	movlw	208
 17703  019B1E  EC47  F0D8         	call	_I2C_Write
 17704                           
 17705                           ;RTC.c: 58: I2C_Write(0x00u);
 17706  019B22  0E00               	movlw	0
 17707  019B24  EC47  F0D8         	call	_I2C_Write
 17708                           
 17709                           ;RTC.c: 60: I2C_Stop();
 17710  019B28  ECCB  F0D8         	call	_I2C_Stop	;wreg free
 17711                           
 17712                           ;RTC.c: 62: I2C_Start();
 17713  019B2C  ECCF  F0D8         	call	_I2C_Start	;wreg free
 17714                           
 17715                           ;RTC.c: 63: I2C_Write(0xD1u);
 17716  019B30  0ED1               	movlw	209
 17717  019B32  EC47  F0D8         	call	_I2C_Write
 17718                           
 17719                           ;RTC.c: 65: rtc->sec = I2C_Read(1);
 17720  019B36  0E01               	movlw	1
 17721  019B38  ECED  F0D6         	call	_I2C_Read
 17722  019B3C  C062  FFD9         	movff	RTC_GetDateTime@rtc,fsr2l
 17723  019B40  C063  FFDA         	movff	RTC_GetDateTime@rtc+1,fsr2h
 17724  019B44  6EDF               	movwf	indf2,c
 17725                           
 17726                           ;RTC.c: 66: rtc->min = I2C_Read(1);
 17727  019B46  0100               	movlb	0	; () banked
 17728  019B48  EE20 F001          	lfsr	2,1
 17729  019B4C  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17730  019B4E  26D9               	addwf	fsr2l,f,c
 17731  019B50  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17732  019B52  22DA               	addwfc	fsr2h,f,c
 17733  019B54  0E01               	movlw	1
 17734  019B56  ECED  F0D6         	call	_I2C_Read
 17735  019B5A  6EDF               	movwf	indf2,c
 17736                           
 17737                           ;RTC.c: 67: rtc->hour= I2C_Read(1);
 17738  019B5C  0100               	movlb	0	; () banked
 17739  019B5E  EE20 F002          	lfsr	2,2
 17740  019B62  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17741  019B64  26D9               	addwf	fsr2l,f,c
 17742  019B66  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17743  019B68  22DA               	addwfc	fsr2h,f,c
 17744  019B6A  0E01               	movlw	1
 17745  019B6C  ECED  F0D6         	call	_I2C_Read
 17746  019B70  6EDF               	movwf	indf2,c
 17747                           
 17748                           ;RTC.c: 68: rtc->weekDay = I2C_Read(1);
 17749  019B72  0100               	movlb	0	; () banked
 17750  019B74  EE20 F003          	lfsr	2,3
 17751  019B78  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17752  019B7A  26D9               	addwf	fsr2l,f,c
 17753  019B7C  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17754  019B7E  22DA               	addwfc	fsr2h,f,c
 17755  019B80  0E01               	movlw	1
 17756  019B82  ECED  F0D6         	call	_I2C_Read
 17757  019B86  6EDF               	movwf	indf2,c
 17758                           
 17759                           ;RTC.c: 69: rtc->date= I2C_Read(1);
 17760  019B88  0100               	movlb	0	; () banked
 17761  019B8A  EE20 F004          	lfsr	2,4
 17762  019B8E  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17763  019B90  26D9               	addwf	fsr2l,f,c
 17764  019B92  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17765  019B94  22DA               	addwfc	fsr2h,f,c
 17766  019B96  0E01               	movlw	1
 17767  019B98  ECED  F0D6         	call	_I2C_Read
 17768  019B9C  6EDF               	movwf	indf2,c
 17769                           
 17770                           ;RTC.c: 70: rtc->month=I2C_Read(1);
 17771  019B9E  0100               	movlb	0	; () banked
 17772  019BA0  EE20 F005          	lfsr	2,5
 17773  019BA4  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17774  019BA6  26D9               	addwf	fsr2l,f,c
 17775  019BA8  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17776  019BAA  22DA               	addwfc	fsr2h,f,c
 17777  019BAC  0E01               	movlw	1
 17778  019BAE  ECED  F0D6         	call	_I2C_Read
 17779  019BB2  6EDF               	movwf	indf2,c
 17780                           
 17781                           ;RTC.c: 71: rtc->year =I2C_Read(0);
 17782  019BB4  0100               	movlb	0	; () banked
 17783  019BB6  EE20 F006          	lfsr	2,6
 17784  019BBA  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17785  019BBC  26D9               	addwf	fsr2l,f,c
 17786  019BBE  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17787  019BC0  22DA               	addwfc	fsr2h,f,c
 17788  019BC2  0E00               	movlw	0
 17789  019BC4  ECED  F0D6         	call	_I2C_Read
 17790  019BC8  6EDF               	movwf	indf2,c
 17791                           
 17792                           ;RTC.c: 73: I2C_Stop();
 17793  019BCA  ECCB  F0D8         	call	_I2C_Stop	;wreg free
 17794  019BCE  0012               	return		;funcret
 17795  019BD0                     __end_of_RTC_GetDateTime:
 17796                           	opt stack 0
 17797                           tblptru	equ	0xFF8
 17798                           tblptrh	equ	0xFF7
 17799                           tblptrl	equ	0xFF6
 17800                           tablat	equ	0xFF5
 17801                           prodh	equ	0xFF4
 17802                           prodl	equ	0xFF3
 17803                           intcon	equ	0xFF2
 17804                           postinc0	equ	0xFEE
 17805                           wreg	equ	0xFE8
 17806                           postdec1	equ	0xFE5
 17807                           fsr1h	equ	0xFE2
 17808                           fsr1l	equ	0xFE1
 17809                           indf2	equ	0xFDF
 17810                           postinc2	equ	0xFDE
 17811                           postdec2	equ	0xFDD
 17812                           fsr2h	equ	0xFDA
 17813                           fsr2l	equ	0xFD9
 17814                           status	equ	0xFD8
 17815                           
 17816 ;; *************** function _I2C_Read *****************
 17817 ;; Defined at:
 17818 ;;		line 89 in file "RTC.c"
 17819 ;; Parameters:    Size  Location     Type
 17820 ;;  v_ackOption_    1    wreg     unsigned char 
 17821 ;; Auto vars:     Size  Location     Type
 17822 ;;  v_ackOption_    1    0[BANK0 ] unsigned char 
 17823 ;;  v_i2cData_u8    1    1[BANK0 ] unsigned char 
 17824 ;; Return value:  Size  Location     Type
 17825 ;;                  1    wreg      unsigned char 
 17826 ;; Registers used:
 17827 ;;		wreg, status,2, status,0, cstack
 17828 ;; Tracked objects:
 17829 ;;		On entry : 0/0
 17830 ;;		On exit  : 0/0
 17831 ;;		Unchanged: 0/0
 17832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17834 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17837 ;;Total ram usage:        2 bytes
 17838 ;; Hardware stack levels used:    1
 17839 ;; Hardware stack levels required when called:    4
 17840 ;; This function calls:
 17841 ;;		_i2c_Ack
 17842 ;;		_i2c_NoAck
 17843 ;;		_i2c_WaitForIdle
 17844 ;; This function is called by:
 17845 ;;		_RTC_GetDateTime
 17846 ;; This function uses a non-reentrant model
 17847 ;;
 17848                           
 17849                           	psect	text36
 17850  01ADDA                     __ptext36:
 17851                           	opt stack 0
 17852  01ADDA                     _I2C_Read:
 17853                           	opt stack 23
 17854                           
 17855                           ;incstack = 0
 17856                           ;I2C_Read@v_ackOption_u8 stored from wreg
 17857  01ADDA  0100               	movlb	0	; () banked
 17858  01ADDC  6F60               	movwf	I2C_Read@v_ackOption_u8& (0+255),b
 17859                           
 17860                           ;RTC.c: 91: uint8_t v_i2cData_u8=0x00;
 17861  01ADDE  0E00               	movlw	0
 17862  01ADE0  0100               	movlb	0	; () banked
 17863  01ADE2  6F61               	movwf	I2C_Read@v_i2cData_u8& (0+255),b
 17864                           
 17865                           ; BSR set to: 0
 17866                           ;RTC.c: 93: SSP1CON2bits.RCEN = 1;
 17867  01ADE4  86C5               	bsf	4037,3,c	;volatile
 17868  01ADE6                     l1008:
 17869  01ADE6  A0C7               	btfss	4039,0,c	;volatile
 17870  01ADE8  D7FE               	goto	l1008
 17871                           
 17872                           ;RTC.c: 95: v_i2cData_u8 = SSP1BUF;
 17873  01ADEA  CFC9 F061          	movff	4041,I2C_Read@v_i2cData_u8	;volatile
 17874                           
 17875                           ;RTC.c: 96: i2c_WaitForIdle();
 17876  01ADEE  EC50  F0D8         	call	_i2c_WaitForIdle	;wreg free
 17877                           
 17878                           ;RTC.c: 98: if(v_ackOption_u8==1)
 17879  01ADF2  0100               	movlb	0	; () banked
 17880  01ADF4  0560               	decf	I2C_Read@v_ackOption_u8& (0+255),w,b
 17881  01ADF6  A4D8               	btfss	status,2,c
 17882  01ADF8  D003               	goto	l20214
 17883                           
 17884                           ; BSR set to: 0
 17885                           ;RTC.c: 99: {
 17886                           ;RTC.c: 100: i2c_Ack();
 17887  01ADFA  ECA8  F0D8         	call	_i2c_Ack	;wreg free
 17888                           
 17889                           ;RTC.c: 101: }
 17890  01ADFE  D002               	goto	l20216
 17891  01AE00                     l20214:
 17892                           
 17893                           ;RTC.c: 102: else
 17894                           ;RTC.c: 103: {
 17895                           ;RTC.c: 104: i2c_NoAck();
 17896  01AE00  ECA3  F0D8         	call	_i2c_NoAck	;wreg free
 17897  01AE04                     l20216:
 17898                           
 17899                           ;RTC.c: 105: }
 17900                           ;RTC.c: 107: return v_i2cData_u8;
 17901  01AE04  0100               	movlb	0	; () banked
 17902  01AE06  5161               	movf	I2C_Read@v_i2cData_u8& (0+255),w,b
 17903  01AE08  0012               	return	
 17904  01AE0A                     __end_of_I2C_Read:
 17905                           	opt stack 0
 17906                           tblptru	equ	0xFF8
 17907                           tblptrh	equ	0xFF7
 17908                           tblptrl	equ	0xFF6
 17909                           tablat	equ	0xFF5
 17910                           prodh	equ	0xFF4
 17911                           prodl	equ	0xFF3
 17912                           intcon	equ	0xFF2
 17913                           postinc0	equ	0xFEE
 17914                           wreg	equ	0xFE8
 17915                           postdec1	equ	0xFE5
 17916                           fsr1h	equ	0xFE2
 17917                           fsr1l	equ	0xFE1
 17918                           indf2	equ	0xFDF
 17919                           postinc2	equ	0xFDE
 17920                           postdec2	equ	0xFDD
 17921                           fsr2h	equ	0xFDA
 17922                           fsr2l	equ	0xFD9
 17923                           status	equ	0xFD8
 17924                           
 17925 ;; *************** function _i2c_NoAck *****************
 17926 ;; Defined at:
 17927 ;;		line 122 in file "RTC.c"
 17928 ;; Parameters:    Size  Location     Type
 17929 ;;		None
 17930 ;; Auto vars:     Size  Location     Type
 17931 ;;		None
 17932 ;; Return value:  Size  Location     Type
 17933 ;;                  1    wreg      void 
 17934 ;; Registers used:
 17935 ;;		None
 17936 ;; Tracked objects:
 17937 ;;		On entry : 0/0
 17938 ;;		On exit  : 0/0
 17939 ;;		Unchanged: 0/0
 17940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17945 ;;Total ram usage:        0 bytes
 17946 ;; Hardware stack levels used:    1
 17947 ;; Hardware stack levels required when called:    3
 17948 ;; This function calls:
 17949 ;;		Nothing
 17950 ;; This function is called by:
 17951 ;;		_I2C_Read
 17952 ;; This function uses a non-reentrant model
 17953 ;;
 17954                           
 17955                           	psect	text37
 17956  01B146                     __ptext37:
 17957                           	opt stack 0
 17958  01B146                     _i2c_NoAck:
 17959                           	opt stack 23
 17960                           
 17961                           ;RTC.c: 124: SSP1CON2bits.ACKDT = 1;
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;incstack = 0
 17965  01B146  8AC5               	bsf	4037,5,c	;volatile
 17966                           
 17967                           ;RTC.c: 125: SSP1CON2bits.ACKEN = 1;
 17968  01B148  88C5               	bsf	4037,4,c	;volatile
 17969  01B14A                     l1028:
 17970  01B14A  A8C5               	btfss	4037,4,c	;volatile
 17971  01B14C  0012               	return	
 17972  01B14E  D7FD               	goto	l1028
 17973  01B150                     __end_of_i2c_NoAck:
 17974                           	opt stack 0
 17975                           tblptru	equ	0xFF8
 17976                           tblptrh	equ	0xFF7
 17977                           tblptrl	equ	0xFF6
 17978                           tablat	equ	0xFF5
 17979                           prodh	equ	0xFF4
 17980                           prodl	equ	0xFF3
 17981                           intcon	equ	0xFF2
 17982                           postinc0	equ	0xFEE
 17983                           wreg	equ	0xFE8
 17984                           postdec1	equ	0xFE5
 17985                           fsr1h	equ	0xFE2
 17986                           fsr1l	equ	0xFE1
 17987                           indf2	equ	0xFDF
 17988                           postinc2	equ	0xFDE
 17989                           postdec2	equ	0xFDD
 17990                           fsr2h	equ	0xFDA
 17991                           fsr2l	equ	0xFD9
 17992                           status	equ	0xFD8
 17993                           
 17994 ;; *************** function _i2c_Ack *****************
 17995 ;; Defined at:
 17996 ;;		line 128 in file "RTC.c"
 17997 ;; Parameters:    Size  Location     Type
 17998 ;;		None
 17999 ;; Auto vars:     Size  Location     Type
 18000 ;;		None
 18001 ;; Return value:  Size  Location     Type
 18002 ;;                  1    wreg      void 
 18003 ;; Registers used:
 18004 ;;		None
 18005 ;; Tracked objects:
 18006 ;;		On entry : 0/0
 18007 ;;		On exit  : 0/0
 18008 ;;		Unchanged: 0/0
 18009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18014 ;;Total ram usage:        0 bytes
 18015 ;; Hardware stack levels used:    1
 18016 ;; Hardware stack levels required when called:    3
 18017 ;; This function calls:
 18018 ;;		Nothing
 18019 ;; This function is called by:
 18020 ;;		_I2C_Read
 18021 ;; This function uses a non-reentrant model
 18022 ;;
 18023                           
 18024                           	psect	text38
 18025  01B150                     __ptext38:
 18026                           	opt stack 0
 18027  01B150                     _i2c_Ack:
 18028                           	opt stack 23
 18029                           
 18030                           ;RTC.c: 130: SSP1CON2bits.ACKDT = 0;
 18031                           
 18032                           ;incstack = 0
 18033  01B150  9AC5               	bcf	4037,5,c	;volatile
 18034                           
 18035                           ;RTC.c: 131: SSP1CON2bits.ACKEN = 1;
 18036  01B152  88C5               	bsf	4037,4,c	;volatile
 18037  01B154                     l1034:
 18038  01B154  A8C5               	btfss	4037,4,c	;volatile
 18039  01B156  0012               	return	
 18040  01B158  D7FD               	goto	l1034
 18041  01B15A                     __end_of_i2c_Ack:
 18042                           	opt stack 0
 18043                           tblptru	equ	0xFF8
 18044                           tblptrh	equ	0xFF7
 18045                           tblptrl	equ	0xFF6
 18046                           tablat	equ	0xFF5
 18047                           prodh	equ	0xFF4
 18048                           prodl	equ	0xFF3
 18049                           intcon	equ	0xFF2
 18050                           postinc0	equ	0xFEE
 18051                           wreg	equ	0xFE8
 18052                           postdec1	equ	0xFE5
 18053                           fsr1h	equ	0xFE2
 18054                           fsr1l	equ	0xFE1
 18055                           indf2	equ	0xFDF
 18056                           postinc2	equ	0xFDE
 18057                           postdec2	equ	0xFDD
 18058                           fsr2h	equ	0xFDA
 18059                           fsr2l	equ	0xFD9
 18060                           status	equ	0xFD8
 18061                           
 18062 ;; *************** function _BCDtoI *****************
 18063 ;; Defined at:
 18064 ;;		line 13 in file "RTC.c"
 18065 ;; Parameters:    Size  Location     Type
 18066 ;;  BCD             2   20[BANK0 ] unsigned int 
 18067 ;; Auto vars:     Size  Location     Type
 18068 ;;  result          2   25[BANK0 ] unsigned int 
 18069 ;; Return value:  Size  Location     Type
 18070 ;;                  2   20[BANK0 ] unsigned int 
 18071 ;; Registers used:
 18072 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18073 ;; Tracked objects:
 18074 ;;		On entry : 0/0
 18075 ;;		On exit  : 0/0
 18076 ;;		Unchanged: 0/0
 18077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18078 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18080 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18081 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18082 ;;Total ram usage:        7 bytes
 18083 ;; Hardware stack levels used:    1
 18084 ;; Hardware stack levels required when called:    4
 18085 ;; This function calls:
 18086 ;;		___wmul
 18087 ;; This function is called by:
 18088 ;;		_UART_Data
 18089 ;; This function uses a non-reentrant model
 18090 ;;
 18091                           
 18092                           	psect	text39
 18093  019428                     __ptext39:
 18094                           	opt stack 0
 18095  019428                     _BCDtoI:
 18096                           	opt stack 24
 18097                           
 18098                           ;RTC.c: 15: unsigned int result;
 18099                           ;RTC.c: 16: result=(BCD>>12)*1000;
 18100                           
 18101                           ;incstack = 0
 18102  019428  0100               	movlb	0	; () banked
 18103  01942A  3975               	swapf	(BCDtoI@BCD+1)& (0+255),w,b
 18104  01942C  0B0F               	andlw	15
 18105  01942E  0100               	movlb	0	; () banked
 18106  019430  6F6E               	movwf	___wmul@multiplier& (0+255),b
 18107  019432  6B6F               	clrf	(___wmul@multiplier+1)& (0+255),b
 18108  019434  0E03               	movlw	3
 18109  019436  0100               	movlb	0	; () banked
 18110  019438  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18111  01943A  0EE8               	movlw	232
 18112  01943C  6F70               	movwf	___wmul@multiplicand& (0+255),b
 18113  01943E  ECB9  F0D6         	call	___wmul	;wreg free
 18114  019442  C06E  F079         	movff	?___wmul,BCDtoI@result
 18115  019446  C06F  F07A         	movff	?___wmul+1,BCDtoI@result+1
 18116                           
 18117                           ;RTC.c: 17: result+=((BCD>>8)&0x0f)*100;
 18118  01944A  C074  F076         	movff	BCDtoI@BCD,??_BCDtoI
 18119  01944E  C075  F077         	movff	BCDtoI@BCD+1,??_BCDtoI+1
 18120  019452  C077  F076         	movff	??_BCDtoI+1,??_BCDtoI
 18121  019456  0100               	movlb	0	; () banked
 18122  019458  6B77               	clrf	(??_BCDtoI+1)& (0+255),b
 18123  01945A  0E0F               	movlw	15
 18124  01945C  0100               	movlb	0	; () banked
 18125  01945E  1576               	andwf	??_BCDtoI& (0+255),w,b
 18126  019460  0100               	movlb	0	; () banked
 18127  019462  6F6E               	movwf	___wmul@multiplier& (0+255),b
 18128  019464  0100               	movlb	0	; () banked
 18129  019466  6B6F               	clrf	(___wmul@multiplier+1)& (0+255),b
 18130  019468  0E00               	movlw	0
 18131  01946A  0100               	movlb	0	; () banked
 18132  01946C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18133  01946E  0E64               	movlw	100
 18134  019470  6F70               	movwf	___wmul@multiplicand& (0+255),b
 18135  019472  ECB9  F0D6         	call	___wmul	;wreg free
 18136  019476  0100               	movlb	0	; () banked
 18137  019478  516E               	movf	?___wmul& (0+255),w,b
 18138  01947A  0100               	movlb	0	; () banked
 18139  01947C  2779               	addwf	BCDtoI@result& (0+255),f,b
 18140  01947E  0100               	movlb	0	; () banked
 18141  019480  516F               	movf	(?___wmul+1)& (0+255),w,b
 18142  019482  0100               	movlb	0	; () banked
 18143  019484  237A               	addwfc	(BCDtoI@result+1)& (0+255),f,b
 18144                           
 18145                           ;RTC.c: 18: result+=((BCD>>4)&0x0f)*10;
 18146  019486  C074  F076         	movff	BCDtoI@BCD,??_BCDtoI
 18147  01948A  C075  F077         	movff	BCDtoI@BCD+1,??_BCDtoI+1
 18148  01948E  0E04               	movlw	4
 18149  019490  0100               	movlb	0	; () banked
 18150  019492  6F78               	movwf	(??_BCDtoI+2)& (0+255),b
 18151  019494                     u14735:
 18152  019494  0100               	movlb	0	; () banked
 18153  019496  90D8               	bcf	status,0,c
 18154  019498  3377               	rrcf	(??_BCDtoI+1)& (0+255),f,b
 18155  01949A  3376               	rrcf	??_BCDtoI& (0+255),f,b
 18156  01949C  0100               	movlb	0	; () banked
 18157  01949E  2F78               	decfsz	(??_BCDtoI+2)& (0+255),f,b
 18158  0194A0  D7F9               	goto	u14735
 18159  0194A2  0E0F               	movlw	15
 18160  0194A4  0100               	movlb	0	; () banked
 18161  0194A6  1576               	andwf	??_BCDtoI& (0+255),w,b
 18162  0194A8  0100               	movlb	0	; () banked
 18163  0194AA  6F6E               	movwf	___wmul@multiplier& (0+255),b
 18164  0194AC  0100               	movlb	0	; () banked
 18165  0194AE  6B6F               	clrf	(___wmul@multiplier+1)& (0+255),b
 18166  0194B0  0E00               	movlw	0
 18167  0194B2  0100               	movlb	0	; () banked
 18168  0194B4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18169  0194B6  0E0A               	movlw	10
 18170  0194B8  6F70               	movwf	___wmul@multiplicand& (0+255),b
 18171  0194BA  ECB9  F0D6         	call	___wmul	;wreg free
 18172  0194BE  0100               	movlb	0	; () banked
 18173  0194C0  516E               	movf	?___wmul& (0+255),w,b
 18174  0194C2  0100               	movlb	0	; () banked
 18175  0194C4  2779               	addwf	BCDtoI@result& (0+255),f,b
 18176  0194C6  0100               	movlb	0	; () banked
 18177  0194C8  516F               	movf	(?___wmul+1)& (0+255),w,b
 18178  0194CA  0100               	movlb	0	; () banked
 18179  0194CC  237A               	addwfc	(BCDtoI@result+1)& (0+255),f,b
 18180                           
 18181                           ; BSR set to: 0
 18182                           ;RTC.c: 19: result+=((BCD)&0x0f);
 18183  0194CE  0E0F               	movlw	15
 18184  0194D0  0100               	movlb	0	; () banked
 18185  0194D2  1574               	andwf	BCDtoI@BCD& (0+255),w,b
 18186  0194D4  0100               	movlb	0	; () banked
 18187  0194D6  6F76               	movwf	??_BCDtoI& (0+255),b
 18188  0194D8  0E00               	movlw	0
 18189  0194DA  0100               	movlb	0	; () banked
 18190  0194DC  1575               	andwf	(BCDtoI@BCD+1)& (0+255),w,b
 18191  0194DE  0100               	movlb	0	; () banked
 18192  0194E0  6F77               	movwf	(??_BCDtoI+1)& (0+255),b
 18193  0194E2  0100               	movlb	0	; () banked
 18194  0194E4  5176               	movf	??_BCDtoI& (0+255),w,b
 18195  0194E6  0100               	movlb	0	; () banked
 18196  0194E8  2779               	addwf	BCDtoI@result& (0+255),f,b
 18197  0194EA  0100               	movlb	0	; () banked
 18198  0194EC  5177               	movf	(??_BCDtoI+1)& (0+255),w,b
 18199  0194EE  0100               	movlb	0	; () banked
 18200  0194F0  237A               	addwfc	(BCDtoI@result+1)& (0+255),f,b
 18201                           
 18202                           ; BSR set to: 0
 18203                           ;RTC.c: 20: return result;
 18204  0194F2  C079  F074         	movff	BCDtoI@result,?_BCDtoI
 18205  0194F6  C07A  F075         	movff	BCDtoI@result+1,?_BCDtoI+1
 18206  0194FA  0012               	return	
 18207  0194FC                     __end_of_BCDtoI:
 18208                           	opt stack 0
 18209                           tblptru	equ	0xFF8
 18210                           tblptrh	equ	0xFF7
 18211                           tblptrl	equ	0xFF6
 18212                           tablat	equ	0xFF5
 18213                           prodh	equ	0xFF4
 18214                           prodl	equ	0xFF3
 18215                           intcon	equ	0xFF2
 18216                           postinc0	equ	0xFEE
 18217                           wreg	equ	0xFE8
 18218                           postdec1	equ	0xFE5
 18219                           fsr1h	equ	0xFE2
 18220                           fsr1l	equ	0xFE1
 18221                           indf2	equ	0xFDF
 18222                           postinc2	equ	0xFDE
 18223                           postdec2	equ	0xFDD
 18224                           fsr2h	equ	0xFDA
 18225                           fsr2l	equ	0xFD9
 18226                           status	equ	0xFD8
 18227                           
 18228 ;; *************** function _Turbine_Start_up_1_Second *****************
 18229 ;; Defined at:
 18230 ;;		line 87 in file "OneSecond_Function.c"
 18231 ;; Parameters:    Size  Location     Type
 18232 ;;		None
 18233 ;; Auto vars:     Size  Location     Type
 18234 ;;		None
 18235 ;; Return value:  Size  Location     Type
 18236 ;;                  1    wreg      void 
 18237 ;; Registers used:
 18238 ;;		wreg, status,2, status,0, cstack
 18239 ;; Tracked objects:
 18240 ;;		On entry : 0/0
 18241 ;;		On exit  : 0/0
 18242 ;;		Unchanged: 0/0
 18243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18248 ;;Total ram usage:        0 bytes
 18249 ;; Hardware stack levels used:    1
 18250 ;; Hardware stack levels required when called:    4
 18251 ;; This function calls:
 18252 ;;		_Error_Scan_start_up
 18253 ;;		_VFD_Data_Kill
 18254 ;; This function is called by:
 18255 ;;		_Timer0_OneSecond_Function
 18256 ;; This function uses a non-reentrant model
 18257 ;;
 18258                           
 18259                           	psect	text40
 18260  01B15A                     __ptext40:
 18261                           	opt stack 0
 18262  01B15A                     _Turbine_Start_up_1_Second:
 18263                           	opt stack 25
 18264                           
 18265                           ;OneSecond_Function.c: 89: Error_Scan_start_up();
 18266                           
 18267                           ; BSR set to: 0
 18268                           ;incstack = 0
 18269  01B15A  EC53  F0C7         	call	_Error_Scan_start_up	;wreg free
 18270                           
 18271                           ;OneSecond_Function.c: 90: VFD_Data_Kill();
 18272  01B15E  EC4C  F0D7         	call	_VFD_Data_Kill	;wreg free
 18273  01B162  0012               	return		;funcret
 18274  01B164                     __end_of_Turbine_Start_up_1_Second:
 18275                           	opt stack 0
 18276                           tblptru	equ	0xFF8
 18277                           tblptrh	equ	0xFF7
 18278                           tblptrl	equ	0xFF6
 18279                           tablat	equ	0xFF5
 18280                           prodh	equ	0xFF4
 18281                           prodl	equ	0xFF3
 18282                           intcon	equ	0xFF2
 18283                           postinc0	equ	0xFEE
 18284                           wreg	equ	0xFE8
 18285                           postdec1	equ	0xFE5
 18286                           fsr1h	equ	0xFE2
 18287                           fsr1l	equ	0xFE1
 18288                           indf2	equ	0xFDF
 18289                           postinc2	equ	0xFDE
 18290                           postdec2	equ	0xFDD
 18291                           fsr2h	equ	0xFDA
 18292                           fsr2l	equ	0xFD9
 18293                           status	equ	0xFD8
 18294                           
 18295 ;; *************** function _Error_Scan_start_up *****************
 18296 ;; Defined at:
 18297 ;;		line 26 in file "ERROR_HANDLING.c"
 18298 ;; Parameters:    Size  Location     Type
 18299 ;;		None
 18300 ;; Auto vars:     Size  Location     Type
 18301 ;;		None
 18302 ;; Return value:  Size  Location     Type
 18303 ;;                  1    wreg      void 
 18304 ;; Registers used:
 18305 ;;		wreg, status,2, status,0
 18306 ;; Tracked objects:
 18307 ;;		On entry : 0/0
 18308 ;;		On exit  : 0/0
 18309 ;;		Unchanged: 0/0
 18310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18315 ;;Total ram usage:        0 bytes
 18316 ;; Hardware stack levels used:    1
 18317 ;; Hardware stack levels required when called:    3
 18318 ;; This function calls:
 18319 ;;		Nothing
 18320 ;; This function is called by:
 18321 ;;		_Turbine_Start_up_1_Second
 18322 ;; This function uses a non-reentrant model
 18323 ;;
 18324                           
 18325                           	psect	text41
 18326  018EA6                     __ptext41:
 18327                           	opt stack 0
 18328  018EA6                     _Error_Scan_start_up:
 18329                           	opt stack 25
 18330                           
 18331                           ;ERROR_HANDLING.c: 28: if(EEPROM_Error_Flag == 1 || Feedback_Error == 1 || Grid_Over_cur
      +                          rent == 1 || VFD_communication_Error_Flag == 1 || Start_Stop_Flag == 1 || Grid_Und_volta
      +                          ge==1 || Wind_Cut_In_Flag ==0 || Grid_Phase_Sequence_Error == 1 || Grid_Frequency_Error 
      +                          == 1 || W
 18332                           
 18333                           ;incstack = 0
 18334  018EA6  0417               	decf	_EEPROM_Error_Flag,w,c
 18335  018EA8  B4D8               	btfsc	status,2,c
 18336  018EAA  D026               	goto	l20992
 18337  018EAC  0101               	movlb	1	; () banked
 18338  018EAE  0556               	decf	_Feedback_Error& (0+255),w,b
 18339  018EB0  B4D8               	btfsc	status,2,c
 18340  018EB2  D022               	goto	l20992
 18341                           
 18342                           ; BSR set to: 1
 18343  018EB4  041C               	decf	_Grid_Over_current,w,c
 18344  018EB6  B4D8               	btfsc	status,2,c
 18345  018EB8  D01F               	goto	l20992
 18346                           
 18347                           ; BSR set to: 1
 18348  018EBA  0100               	movlb	0	; () banked
 18349  018EBC  05F1               	decf	_VFD_communication_Error_Flag& (0+255),w,b
 18350  018EBE  B4D8               	btfsc	status,2,c
 18351  018EC0  D01B               	goto	l20992
 18352                           
 18353                           ; BSR set to: 0
 18354  018EC2  041F               	decf	_Start_Stop_Flag,w,c
 18355  018EC4  B4D8               	btfsc	status,2,c
 18356  018EC6  D018               	goto	l20992
 18357                           
 18358                           ; BSR set to: 0
 18359  018EC8  0100               	movlb	0	; () banked
 18360  018ECA  05E7               	decf	_Grid_Und_voltage& (0+255),w,b
 18361  018ECC  B4D8               	btfsc	status,2,c
 18362  018ECE  D014               	goto	l20992
 18363                           
 18364                           ; BSR set to: 0
 18365  018ED0  0101               	movlb	1	; () banked
 18366  018ED2  5199               	movf	_Wind_Cut_In_Flag& (0+255),w,b
 18367  018ED4  B4D8               	btfsc	status,2,c
 18368  018ED6  D010               	goto	l20992
 18369                           
 18370                           ; BSR set to: 1
 18371  018ED8  0100               	movlb	0	; () banked
 18372  018EDA  05E6               	decf	_Grid_Phase_Sequence_Error& (0+255),w,b
 18373  018EDC  B4D8               	btfsc	status,2,c
 18374  018EDE  D00C               	goto	l20992
 18375                           
 18376                           ; BSR set to: 0
 18377  018EE0  0100               	movlb	0	; () banked
 18378  018EE2  05E4               	decf	_Grid_Frequency_Error& (0+255),w,b
 18379  018EE4  B4D8               	btfsc	status,2,c
 18380  018EE6  D008               	goto	l20992
 18381                           
 18382                           ; BSR set to: 0
 18383  018EE8  0100               	movlb	0	; () banked
 18384  018EEA  05F2               	decf	_Wind_Cut_Out_Flag& (0+255),w,b
 18385  018EEC  B4D8               	btfsc	status,2,c
 18386  018EEE  D004               	goto	l20992
 18387                           
 18388                           ; BSR set to: 0
 18389  018EF0  0100               	movlb	0	; () banked
 18390  018EF2  05E5               	decf	_Grid_Ovr_voltage& (0+255),w,b
 18391  018EF4  A4D8               	btfss	status,2,c
 18392  018EF6  D009               	goto	l6105
 18393  018EF8                     l20992:
 18394                           
 18395                           ;ERROR_HANDLING.c: 29: {
 18396                           ;ERROR_HANDLING.c: 30: Start_up_Error = 1;
 18397  018EF8  0E01               	movlw	1
 18398  018EFA  0101               	movlb	1	; () banked
 18399  018EFC  6FC8               	movwf	_Start_up_Error& (0+255),b
 18400                           
 18401                           ;ERROR_HANDLING.c: 31: Initial_Delay_Second = 0;
 18402  018EFE  0E00               	movlw	0
 18403  018F00  0101               	movlb	1	; () banked
 18404  018F02  6F2B               	movwf	(_Initial_Delay_Second+1)& (0+255),b
 18405  018F04  0E00               	movlw	0
 18406  018F06  6F2A               	movwf	_Initial_Delay_Second& (0+255),b
 18407                           
 18408                           ; BSR set to: 1
 18409                           ;ERROR_HANDLING.c: 32: RA5 = 1;
 18410  018F08  8A80               	bsf	3968,5,c	;volatile
 18411  018F0A                     l6105:
 18412                           
 18413                           ;ERROR_HANDLING.c: 33: }
 18414                           ;ERROR_HANDLING.c: 34: if(EEPROM_Error_Flag == 0 && Feedback_Error == 0 && Gen_EP_Err_Fl
      +                          ag == 0 && Pitch_EP_Err_Flag == 0 && Grid_Over_current == 0 && VFD_communication_Error_F
      +                          lag == 0 && Start_Stop_Flag == 0 && Grid_Und_voltage == 0 && Wind_Cut_In_Flag == 1 && Gr
      +                          id_Phase_
 18415  018F0A  5017               	movf	_EEPROM_Error_Flag,w,c
 18416  018F0C  A4D8               	btfss	status,2,c
 18417  018F0E  0012               	return	
 18418  018F10  0101               	movlb	1	; () banked
 18419  018F12  5156               	movf	_Feedback_Error& (0+255),w,b
 18420  018F14  0101               	movlb	1	; () banked
 18421  018F16  A4D8               	btfss	status,2,c
 18422  018F18  0012               	return	
 18423                           
 18424                           ; BSR set to: 1
 18425  018F1A  0100               	movlb	0	; () banked
 18426  018F1C  51E3               	movf	_Gen_EP_Err_Flag& (0+255),w,b
 18427  018F1E  A4D8               	btfss	status,2,c
 18428  018F20  0012               	return	
 18429                           
 18430                           ; BSR set to: 0
 18431  018F22  0100               	movlb	0	; () banked
 18432  018F24  51E9               	movf	_Pitch_EP_Err_Flag& (0+255),w,b
 18433  018F26  A4D8               	btfss	status,2,c
 18434  018F28  0012               	return	
 18435                           
 18436                           ; BSR set to: 0
 18437  018F2A  501C               	movf	_Grid_Over_current,w,c
 18438  018F2C  A4D8               	btfss	status,2,c
 18439  018F2E  0012               	return	
 18440                           
 18441                           ; BSR set to: 0
 18442  018F30  0100               	movlb	0	; () banked
 18443  018F32  51F1               	movf	_VFD_communication_Error_Flag& (0+255),w,b
 18444  018F34  A4D8               	btfss	status,2,c
 18445  018F36  0012               	return	
 18446                           
 18447                           ; BSR set to: 0
 18448  018F38  501F               	movf	_Start_Stop_Flag,w,c
 18449  018F3A  A4D8               	btfss	status,2,c
 18450  018F3C  0012               	return	
 18451                           
 18452                           ; BSR set to: 0
 18453  018F3E  0100               	movlb	0	; () banked
 18454  018F40  51E7               	movf	_Grid_Und_voltage& (0+255),w,b
 18455  018F42  A4D8               	btfss	status,2,c
 18456  018F44  0012               	return	
 18457                           
 18458                           ; BSR set to: 0
 18459  018F46  0101               	movlb	1	; () banked
 18460  018F48  0599               	decf	_Wind_Cut_In_Flag& (0+255),w,b
 18461  018F4A  A4D8               	btfss	status,2,c
 18462  018F4C  0012               	return	
 18463                           
 18464                           ; BSR set to: 1
 18465  018F4E  0100               	movlb	0	; () banked
 18466  018F50  51E6               	movf	_Grid_Phase_Sequence_Error& (0+255),w,b
 18467  018F52  A4D8               	btfss	status,2,c
 18468  018F54  0012               	return	
 18469                           
 18470                           ; BSR set to: 0
 18471  018F56  0100               	movlb	0	; () banked
 18472  018F58  51E4               	movf	_Grid_Frequency_Error& (0+255),w,b
 18473  018F5A  A4D8               	btfss	status,2,c
 18474  018F5C  0012               	return	
 18475                           
 18476                           ; BSR set to: 0
 18477  018F5E  0100               	movlb	0	; () banked
 18478  018F60  51F2               	movf	_Wind_Cut_Out_Flag& (0+255),w,b
 18479  018F62  A4D8               	btfss	status,2,c
 18480  018F64  0012               	return	
 18481                           
 18482                           ; BSR set to: 0
 18483  018F66  0100               	movlb	0	; () banked
 18484  018F68  51E5               	movf	_Grid_Ovr_voltage& (0+255),w,b
 18485  018F6A  A4D8               	btfss	status,2,c
 18486  018F6C  0012               	return	
 18487                           
 18488                           ; BSR set to: 0
 18489                           ;ERROR_HANDLING.c: 35: {
 18490                           ;ERROR_HANDLING.c: 36: Initial_Delay_Second++;
 18491  018F6E  0101               	movlb	1	; () banked
 18492  018F70  4B2A               	infsnz	_Initial_Delay_Second& (0+255),f,b
 18493  018F72  2B2B               	incf	(_Initial_Delay_Second+1)& (0+255),f,b
 18494                           
 18495                           ; BSR set to: 1
 18496                           ;ERROR_HANDLING.c: 37: RA5 = 0;
 18497  018F74  9A80               	bcf	3968,5,c	;volatile
 18498                           
 18499                           ; BSR set to: 1
 18500                           ;ERROR_HANDLING.c: 38: Errors = NO_ERROR;
 18501  018F76  0E00               	movlw	0
 18502  018F78  6E1B               	movwf	_Errors,c
 18503                           
 18504                           ; BSR set to: 1
 18505                           ;ERROR_HANDLING.c: 39: if(Initial_Delay_Second == (120))
 18506  018F7A  0E78               	movlw	120
 18507  018F7C  0101               	movlb	1	; () banked
 18508  018F7E  192A               	xorwf	_Initial_Delay_Second& (0+255),w,b
 18509  018F80  0101               	movlb	1	; () banked
 18510  018F82  112B               	iorwf	(_Initial_Delay_Second+1)& (0+255),w,b
 18511  018F84  A4D8               	btfss	status,2,c
 18512  018F86  0012               	return	
 18513                           
 18514                           ; BSR set to: 1
 18515                           ;ERROR_HANDLING.c: 40: {
 18516                           ;ERROR_HANDLING.c: 41: Initial_Delay_Second = 0;
 18517  018F88  0E00               	movlw	0
 18518  018F8A  0101               	movlb	1	; () banked
 18519  018F8C  6F2B               	movwf	(_Initial_Delay_Second+1)& (0+255),b
 18520  018F8E  0E00               	movlw	0
 18521  018F90  6F2A               	movwf	_Initial_Delay_Second& (0+255),b
 18522                           
 18523                           ;ERROR_HANDLING.c: 42: Start_up_Error = 0;
 18524  018F92  0E00               	movlw	0
 18525  018F94  0101               	movlb	1	; () banked
 18526  018F96  6FC8               	movwf	_Start_up_Error& (0+255),b
 18527                           
 18528                           ; BSR set to: 1
 18529  018F98  0012               	return	
 18530  018F9A                     __end_of_Error_Scan_start_up:
 18531                           	opt stack 0
 18532                           tblptru	equ	0xFF8
 18533                           tblptrh	equ	0xFF7
 18534                           tblptrl	equ	0xFF6
 18535                           tablat	equ	0xFF5
 18536                           prodh	equ	0xFF4
 18537                           prodl	equ	0xFF3
 18538                           intcon	equ	0xFF2
 18539                           postinc0	equ	0xFEE
 18540                           wreg	equ	0xFE8
 18541                           postdec1	equ	0xFE5
 18542                           fsr1h	equ	0xFE2
 18543                           fsr1l	equ	0xFE1
 18544                           indf2	equ	0xFDF
 18545                           postinc2	equ	0xFDE
 18546                           postdec2	equ	0xFDD
 18547                           fsr2h	equ	0xFDA
 18548                           fsr2l	equ	0xFD9
 18549                           status	equ	0xFD8
 18550                           
 18551 ;; *************** function _Turbine_Ramp_up_1_Second *****************
 18552 ;; Defined at:
 18553 ;;		line 92 in file "OneSecond_Function.c"
 18554 ;; Parameters:    Size  Location     Type
 18555 ;;		None
 18556 ;; Auto vars:     Size  Location     Type
 18557 ;;		None
 18558 ;; Return value:  Size  Location     Type
 18559 ;;                  1    wreg      void 
 18560 ;; Registers used:
 18561 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18562 ;; Tracked objects:
 18563 ;;		On entry : 0/0
 18564 ;;		On exit  : 0/0
 18565 ;;		Unchanged: 0/0
 18566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18571 ;;Total ram usage:        0 bytes
 18572 ;; Hardware stack levels used:    1
 18573 ;; Hardware stack levels required when called:    7
 18574 ;; This function calls:
 18575 ;;		_Error_Scan_Ramp_up
 18576 ;;		_Five_Sec_Delay
 18577 ;;		_One_Sec_Delay
 18578 ;;		_Two_Sec_Delay
 18579 ;; This function is called by:
 18580 ;;		_Timer0_OneSecond_Function
 18581 ;; This function uses a non-reentrant model
 18582 ;;
 18583                           
 18584                           	psect	text42
 18585  01B07C                     __ptext42:
 18586                           	opt stack 0
 18587  01B07C                     _Turbine_Ramp_up_1_Second:
 18588                           	opt stack 22
 18589                           
 18590                           ;OneSecond_Function.c: 94: Error_Scan_Ramp_up();
 18591                           
 18592                           ;incstack = 0
 18593  01B07C  ECE8  F0CD         	call	_Error_Scan_Ramp_up	;wreg free
 18594                           
 18595                           ;OneSecond_Function.c: 95: One_Sec_Delay();
 18596  01B080  ECB9  F0D7         	call	_One_Sec_Delay	;wreg free
 18597                           
 18598                           ;OneSecond_Function.c: 96: Two_Sec_Delay();
 18599  01B084  ECA4  F0D7         	call	_Two_Sec_Delay	;wreg free
 18600                           
 18601                           ;OneSecond_Function.c: 97: Five_Sec_Delay();
 18602  01B088  EC63  F0D7         	call	_Five_Sec_Delay	;wreg free
 18603  01B08C  0012               	return		;funcret
 18604  01B08E                     __end_of_Turbine_Ramp_up_1_Second:
 18605                           	opt stack 0
 18606                           tblptru	equ	0xFF8
 18607                           tblptrh	equ	0xFF7
 18608                           tblptrl	equ	0xFF6
 18609                           tablat	equ	0xFF5
 18610                           prodh	equ	0xFF4
 18611                           prodl	equ	0xFF3
 18612                           intcon	equ	0xFF2
 18613                           postinc0	equ	0xFEE
 18614                           wreg	equ	0xFE8
 18615                           postdec1	equ	0xFE5
 18616                           fsr1h	equ	0xFE2
 18617                           fsr1l	equ	0xFE1
 18618                           indf2	equ	0xFDF
 18619                           postinc2	equ	0xFDE
 18620                           postdec2	equ	0xFDD
 18621                           fsr2h	equ	0xFDA
 18622                           fsr2l	equ	0xFD9
 18623                           status	equ	0xFD8
 18624                           
 18625 ;; *************** function _Two_Sec_Delay *****************
 18626 ;; Defined at:
 18627 ;;		line 113 in file "OneSecond_Function.c"
 18628 ;; Parameters:    Size  Location     Type
 18629 ;;		None
 18630 ;; Auto vars:     Size  Location     Type
 18631 ;;		None
 18632 ;; Return value:  Size  Location     Type
 18633 ;;                  1    wreg      void 
 18634 ;; Registers used:
 18635 ;;		wreg, status,2, status,0
 18636 ;; Tracked objects:
 18637 ;;		On entry : 0/0
 18638 ;;		On exit  : 0/0
 18639 ;;		Unchanged: 0/0
 18640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18645 ;;Total ram usage:        0 bytes
 18646 ;; Hardware stack levels used:    1
 18647 ;; Hardware stack levels required when called:    3
 18648 ;; This function calls:
 18649 ;;		Nothing
 18650 ;; This function is called by:
 18651 ;;		_Timer0_OneSecond_Function
 18652 ;;		_Turbine_Ramp_up_1_Second
 18653 ;; This function uses a non-reentrant model
 18654 ;;
 18655                           
 18656                           	psect	text43
 18657  01AF48                     __ptext43:
 18658                           	opt stack 0
 18659  01AF48                     _Two_Sec_Delay:
 18660                           	opt stack 26
 18661                           
 18662                           ;OneSecond_Function.c: 115: if(Two_Sec_Delay_vab)
 18663                           
 18664                           ;incstack = 0
 18665  01AF48  0101               	movlb	1	; () banked
 18666  01AF4A  518C               	movf	_Two_Sec_Delay_vab& (0+255),w,b
 18667  01AF4C  B4D8               	btfsc	status,2,c
 18668  01AF4E  0012               	return	
 18669                           
 18670                           ; BSR set to: 1
 18671                           ;OneSecond_Function.c: 116: {
 18672                           ;OneSecond_Function.c: 117: Two_Delay_counter++;
 18673  01AF50  0101               	movlb	1	; () banked
 18674  01AF52  2B8B               	incf	_Two_Delay_counter& (0+255),f,b
 18675                           
 18676                           ; BSR set to: 1
 18677                           ;OneSecond_Function.c: 118: if(Two_Delay_counter == 2)
 18678  01AF54  0E02               	movlw	2
 18679  01AF56  0101               	movlb	1	; () banked
 18680  01AF58  198B               	xorwf	_Two_Delay_counter& (0+255),w,b
 18681  01AF5A  A4D8               	btfss	status,2,c
 18682  01AF5C  0012               	return	
 18683                           
 18684                           ; BSR set to: 1
 18685                           ;OneSecond_Function.c: 119: {
 18686                           ;OneSecond_Function.c: 120: Two_Delay_counter = 0;
 18687  01AF5E  0E00               	movlw	0
 18688  01AF60  0101               	movlb	1	; () banked
 18689  01AF62  6F8B               	movwf	_Two_Delay_counter& (0+255),b
 18690                           
 18691                           ;OneSecond_Function.c: 121: Two_Sec_Delay_vab = 0;
 18692  01AF64  0E00               	movlw	0
 18693  01AF66  0101               	movlb	1	; () banked
 18694  01AF68  6F8C               	movwf	_Two_Sec_Delay_vab& (0+255),b
 18695                           
 18696                           ;OneSecond_Function.c: 122: Two_sec_Delay_Flag = 1;
 18697  01AF6A  0E01               	movlw	1
 18698  01AF6C  0101               	movlb	1	; () banked
 18699  01AF6E  6F8D               	movwf	_Two_sec_Delay_Flag& (0+255),b
 18700                           
 18701                           ; BSR set to: 1
 18702  01AF70  0012               	return	
 18703  01AF72                     __end_of_Two_Sec_Delay:
 18704                           	opt stack 0
 18705                           tblptru	equ	0xFF8
 18706                           tblptrh	equ	0xFF7
 18707                           tblptrl	equ	0xFF6
 18708                           tablat	equ	0xFF5
 18709                           prodh	equ	0xFF4
 18710                           prodl	equ	0xFF3
 18711                           intcon	equ	0xFF2
 18712                           postinc0	equ	0xFEE
 18713                           wreg	equ	0xFE8
 18714                           postdec1	equ	0xFE5
 18715                           fsr1h	equ	0xFE2
 18716                           fsr1l	equ	0xFE1
 18717                           indf2	equ	0xFDF
 18718                           postinc2	equ	0xFDE
 18719                           postdec2	equ	0xFDD
 18720                           fsr2h	equ	0xFDA
 18721                           fsr2l	equ	0xFD9
 18722                           status	equ	0xFD8
 18723                           
 18724 ;; *************** function _One_Sec_Delay *****************
 18725 ;; Defined at:
 18726 ;;		line 99 in file "OneSecond_Function.c"
 18727 ;; Parameters:    Size  Location     Type
 18728 ;;		None
 18729 ;; Auto vars:     Size  Location     Type
 18730 ;;		None
 18731 ;; Return value:  Size  Location     Type
 18732 ;;                  1    wreg      void 
 18733 ;; Registers used:
 18734 ;;		wreg, status,2, status,0
 18735 ;; Tracked objects:
 18736 ;;		On entry : 0/0
 18737 ;;		On exit  : 0/0
 18738 ;;		Unchanged: 0/0
 18739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18744 ;;Total ram usage:        0 bytes
 18745 ;; Hardware stack levels used:    1
 18746 ;; Hardware stack levels required when called:    3
 18747 ;; This function calls:
 18748 ;;		Nothing
 18749 ;; This function is called by:
 18750 ;;		_Turbine_Ramp_up_1_Second
 18751 ;; This function uses a non-reentrant model
 18752 ;;
 18753                           
 18754                           	psect	text44
 18755  01AF72                     __ptext44:
 18756                           	opt stack 0
 18757  01AF72                     _One_Sec_Delay:
 18758                           	opt stack 25
 18759                           
 18760                           ;OneSecond_Function.c: 101: if(One_Sec_Delay_vab)
 18761                           
 18762                           ; BSR set to: 1
 18763                           ;incstack = 0
 18764  01AF72  0101               	movlb	1	; () banked
 18765  01AF74  5172               	movf	_One_Sec_Delay_vab& (0+255),w,b
 18766  01AF76  0101               	movlb	1	; () banked
 18767  01AF78  B4D8               	btfsc	status,2,c
 18768  01AF7A  0012               	return	
 18769                           
 18770                           ; BSR set to: 1
 18771                           ;OneSecond_Function.c: 102: {
 18772                           ;OneSecond_Function.c: 103: Delay_counter++;
 18773  01AF7C  0101               	movlb	1	; () banked
 18774  01AF7E  2B51               	incf	_Delay_counter& (0+255),f,b
 18775                           
 18776                           ; BSR set to: 1
 18777                           ;OneSecond_Function.c: 104: if(Delay_counter == 1)
 18778  01AF80  0101               	movlb	1	; () banked
 18779  01AF82  0551               	decf	_Delay_counter& (0+255),w,b
 18780  01AF84  A4D8               	btfss	status,2,c
 18781  01AF86  0012               	return	
 18782                           
 18783                           ; BSR set to: 1
 18784                           ;OneSecond_Function.c: 105: {
 18785                           ;OneSecond_Function.c: 106: Delay_counter = 0;
 18786  01AF88  0E00               	movlw	0
 18787  01AF8A  0101               	movlb	1	; () banked
 18788  01AF8C  6F51               	movwf	_Delay_counter& (0+255),b
 18789                           
 18790                           ;OneSecond_Function.c: 107: One_Sec_Delay_vab = 0;
 18791  01AF8E  0E00               	movlw	0
 18792  01AF90  0101               	movlb	1	; () banked
 18793  01AF92  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 18794                           
 18795                           ;OneSecond_Function.c: 108: One_sec_Delay_Flag = 1;
 18796  01AF94  0E01               	movlw	1
 18797  01AF96  0101               	movlb	1	; () banked
 18798  01AF98  6F74               	movwf	_One_sec_Delay_Flag& (0+255),b
 18799                           
 18800                           ; BSR set to: 1
 18801  01AF9A  0012               	return	
 18802  01AF9C                     __end_of_One_Sec_Delay:
 18803                           	opt stack 0
 18804                           tblptru	equ	0xFF8
 18805                           tblptrh	equ	0xFF7
 18806                           tblptrl	equ	0xFF6
 18807                           tablat	equ	0xFF5
 18808                           prodh	equ	0xFF4
 18809                           prodl	equ	0xFF3
 18810                           intcon	equ	0xFF2
 18811                           postinc0	equ	0xFEE
 18812                           wreg	equ	0xFE8
 18813                           postdec1	equ	0xFE5
 18814                           fsr1h	equ	0xFE2
 18815                           fsr1l	equ	0xFE1
 18816                           indf2	equ	0xFDF
 18817                           postinc2	equ	0xFDE
 18818                           postdec2	equ	0xFDD
 18819                           fsr2h	equ	0xFDA
 18820                           fsr2l	equ	0xFD9
 18821                           status	equ	0xFD8
 18822                           
 18823 ;; *************** function _Five_Sec_Delay *****************
 18824 ;; Defined at:
 18825 ;;		line 126 in file "OneSecond_Function.c"
 18826 ;; Parameters:    Size  Location     Type
 18827 ;;		None
 18828 ;; Auto vars:     Size  Location     Type
 18829 ;;		None
 18830 ;; Return value:  Size  Location     Type
 18831 ;;                  1    wreg      void 
 18832 ;; Registers used:
 18833 ;;		wreg, status,2, status,0
 18834 ;; Tracked objects:
 18835 ;;		On entry : 0/0
 18836 ;;		On exit  : 0/0
 18837 ;;		Unchanged: 0/0
 18838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18843 ;;Total ram usage:        0 bytes
 18844 ;; Hardware stack levels used:    1
 18845 ;; Hardware stack levels required when called:    3
 18846 ;; This function calls:
 18847 ;;		Nothing
 18848 ;; This function is called by:
 18849 ;;		_Turbine_Ramp_up_1_Second
 18850 ;; This function uses a non-reentrant model
 18851 ;;
 18852                           
 18853                           	psect	text45
 18854  01AEC6                     __ptext45:
 18855                           	opt stack 0
 18856  01AEC6                     _Five_Sec_Delay:
 18857                           	opt stack 25
 18858                           
 18859                           ;OneSecond_Function.c: 128: if(Five_Sec_Delay_vab)
 18860                           
 18861                           ; BSR set to: 1
 18862                           ;incstack = 0
 18863  01AEC6  0101               	movlb	1	; () banked
 18864  01AEC8  5158               	movf	_Five_Sec_Delay_vab& (0+255),w,b
 18865  01AECA  0101               	movlb	1	; () banked
 18866  01AECC  B4D8               	btfsc	status,2,c
 18867  01AECE  0012               	return	
 18868                           
 18869                           ; BSR set to: 1
 18870                           ;OneSecond_Function.c: 129: {
 18871                           ;OneSecond_Function.c: 130: Five_Delay_counter++;
 18872  01AED0  0101               	movlb	1	; () banked
 18873  01AED2  2B57               	incf	_Five_Delay_counter& (0+255),f,b
 18874                           
 18875                           ; BSR set to: 1
 18876                           ;OneSecond_Function.c: 131: if(Five_Delay_counter == 5)
 18877  01AED4  0E05               	movlw	5
 18878  01AED6  0101               	movlb	1	; () banked
 18879  01AED8  1957               	xorwf	_Five_Delay_counter& (0+255),w,b
 18880  01AEDA  A4D8               	btfss	status,2,c
 18881  01AEDC  0012               	return	
 18882                           
 18883                           ; BSR set to: 1
 18884                           ;OneSecond_Function.c: 132: {
 18885                           ;OneSecond_Function.c: 133: Five_Delay_counter = 0;
 18886  01AEDE  0E00               	movlw	0
 18887  01AEE0  0101               	movlb	1	; () banked
 18888  01AEE2  6F57               	movwf	_Five_Delay_counter& (0+255),b
 18889                           
 18890                           ;OneSecond_Function.c: 134: Five_Delay_counter = 0;
 18891  01AEE4  0E00               	movlw	0
 18892  01AEE6  0101               	movlb	1	; () banked
 18893  01AEE8  6F57               	movwf	_Five_Delay_counter& (0+255),b
 18894                           
 18895                           ;OneSecond_Function.c: 135: Five_sec_Delay_Flag = 1;
 18896  01AEEA  0E01               	movlw	1
 18897  01AEEC  0102               	movlb	2	; () banked
 18898  01AEEE  6FB8               	movwf	_Five_sec_Delay_Flag& (0+255),b
 18899                           
 18900                           ; BSR set to: 2
 18901  01AEF0  0012               	return	
 18902  01AEF2                     __end_of_Five_Sec_Delay:
 18903                           	opt stack 0
 18904                           tblptru	equ	0xFF8
 18905                           tblptrh	equ	0xFF7
 18906                           tblptrl	equ	0xFF6
 18907                           tablat	equ	0xFF5
 18908                           prodh	equ	0xFF4
 18909                           prodl	equ	0xFF3
 18910                           intcon	equ	0xFF2
 18911                           postinc0	equ	0xFEE
 18912                           wreg	equ	0xFE8
 18913                           postdec1	equ	0xFE5
 18914                           fsr1h	equ	0xFE2
 18915                           fsr1l	equ	0xFE1
 18916                           indf2	equ	0xFDF
 18917                           postinc2	equ	0xFDE
 18918                           postdec2	equ	0xFDD
 18919                           fsr2h	equ	0xFDA
 18920                           fsr2l	equ	0xFD9
 18921                           status	equ	0xFD8
 18922                           
 18923 ;; *************** function _Error_Scan_Ramp_up *****************
 18924 ;; Defined at:
 18925 ;;		line 46 in file "ERROR_HANDLING.c"
 18926 ;; Parameters:    Size  Location     Type
 18927 ;;		None
 18928 ;; Auto vars:     Size  Location     Type
 18929 ;;		None
 18930 ;; Return value:  Size  Location     Type
 18931 ;;                  2  2507[None  ] int 
 18932 ;; Registers used:
 18933 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18934 ;; Tracked objects:
 18935 ;;		On entry : 0/0
 18936 ;;		On exit  : 0/0
 18937 ;;		Unchanged: 0/0
 18938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18943 ;;Total ram usage:        0 bytes
 18944 ;; Hardware stack levels used:    1
 18945 ;; Hardware stack levels required when called:    6
 18946 ;; This function calls:
 18947 ;;		_EEPROM_Error_Stop
 18948 ;; This function is called by:
 18949 ;;		_Turbine_Ramp_up_1_Second
 18950 ;; This function uses a non-reentrant model
 18951 ;;
 18952                           
 18953                           	psect	text46
 18954  019BD0                     __ptext46:
 18955                           	opt stack 0
 18956  019BD0                     _Error_Scan_Ramp_up:
 18957                           	opt stack 22
 18958                           
 18959                           ;ERROR_HANDLING.c: 48: if(EEPROM_Error_Flag == 1 || VFD_communication_Error_Flag == 1 ||
      +                           Start_Stop_Flag == 1 || Pitch_FB_Error_Flag == 1 || VFD_DC_EXTREM_LOW_Error == 1 || VFD
      +                          _SHORT_CIRCUIT_fLAG == 1 || Turbine_Over_Speed_Flag == 1 || VFD__Run_Time_Error == 1 || 
      +                          VFD_DC_Bu
 18960                           
 18961                           ;incstack = 0
 18962  019BD0  0417               	decf	_EEPROM_Error_Flag,w,c
 18963  019BD2  B4D8               	btfsc	status,2,c
 18964  019BD4  D038               	goto	l21060
 18965  019BD6  0100               	movlb	0	; () banked
 18966  019BD8  05F1               	decf	_VFD_communication_Error_Flag& (0+255),w,b
 18967  019BDA  B4D8               	btfsc	status,2,c
 18968  019BDC  D034               	goto	l21060
 18969                           
 18970                           ; BSR set to: 0
 18971  019BDE  041F               	decf	_Start_Stop_Flag,w,c
 18972  019BE0  B4D8               	btfsc	status,2,c
 18973  019BE2  D031               	goto	l21060
 18974                           
 18975                           ; BSR set to: 0
 18976  019BE4  0100               	movlb	0	; () banked
 18977  019BE6  05EA               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 18978  019BE8  B4D8               	btfsc	status,2,c
 18979  019BEA  D02D               	goto	l21060
 18980                           
 18981                           ; BSR set to: 0
 18982  019BEC  0101               	movlb	1	; () banked
 18983  019BEE  0591               	decf	_VFD_DC_EXTREM_LOW_Error& (0+255),w,b
 18984  019BF0  B4D8               	btfsc	status,2,c
 18985  019BF2  D029               	goto	l21060
 18986                           
 18987                           ; BSR set to: 1
 18988  019BF4  0102               	movlb	2	; () banked
 18989  019BF6  05A6               	decf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),w,b
 18990  019BF8  0102               	movlb	2	; () banked
 18991  019BFA  11A7               	iorwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),w,b
 18992  019BFC  B4D8               	btfsc	status,2,c
 18993  019BFE  D023               	goto	l21060
 18994                           
 18995                           ; BSR set to: 2
 18996  019C00  0100               	movlb	0	; () banked
 18997  019C02  05EF               	decf	_Turbine_Over_Speed_Flag& (0+255),w,b
 18998  019C04  B4D8               	btfsc	status,2,c
 18999  019C06  D01F               	goto	l21060
 19000                           
 19001                           ; BSR set to: 0
 19002  019C08  0101               	movlb	1	; () banked
 19003  019C0A  0596               	decf	_VFD__Run_Time_Error& (0+255),w,b
 19004  019C0C  B4D8               	btfsc	status,2,c
 19005  019C0E  D01B               	goto	l21060
 19006                           
 19007                           ; BSR set to: 1
 19008  019C10  0101               	movlb	1	; () banked
 19009  019C12  0590               	decf	_VFD_DC_Bus_Low_Error& (0+255),w,b
 19010  019C14  B4D8               	btfsc	status,2,c
 19011  019C16  D017               	goto	l21060
 19012                           
 19013                           ; BSR set to: 1
 19014  019C18  0101               	movlb	1	; () banked
 19015  019C1A  058F               	decf	_VFD_DC_Bus_High_Error& (0+255),w,b
 19016  019C1C  B4D8               	btfsc	status,2,c
 19017  019C1E  D013               	goto	l21060
 19018                           
 19019                           ; BSR set to: 1
 19020  019C20  0101               	movlb	1	; () banked
 19021  019C22  0592               	decf	_VFD_Error_Flag& (0+255),w,b
 19022  019C24  B4D8               	btfsc	status,2,c
 19023  019C26  D00F               	goto	l21060
 19024                           
 19025                           ; BSR set to: 1
 19026  019C28  0101               	movlb	1	; () banked
 19027  019C2A  058E               	decf	_VFD_DC_Bus_Current_Error& (0+255),w,b
 19028  019C2C  B4D8               	btfsc	status,2,c
 19029  019C2E  D00B               	goto	l21060
 19030                           
 19031                           ; BSR set to: 1
 19032  019C30  0101               	movlb	1	; () banked
 19033  019C32  0570               	decf	_Motor_Slip_Error_Flag& (0+255),w,b
 19034  019C34  B4D8               	btfsc	status,2,c
 19035  019C36  D007               	goto	l21060
 19036                           
 19037                           ; BSR set to: 1
 19038  019C38  0101               	movlb	1	; () banked
 19039  019C3A  0579               	decf	_Rotor_Slip_Error_Flag& (0+255),w,b
 19040  019C3C  B4D8               	btfsc	status,2,c
 19041  019C3E  D003               	goto	l21060
 19042                           
 19043                           ; BSR set to: 1
 19044  019C40  041C               	decf	_Grid_Over_current,w,c
 19045  019C42  A4D8               	btfss	status,2,c
 19046  019C44  0012               	return	
 19047  019C46                     l21060:
 19048                           
 19049                           ;ERROR_HANDLING.c: 49: {
 19050                           ;ERROR_HANDLING.c: 50: VFD_RAMP = VFD_Stop;
 19051  019C46  0E04               	movlw	4
 19052  019C48  0101               	movlb	1	; () banked
 19053  019C4A  6F95               	movwf	_VFD_RAMP& (0+255),b
 19054                           
 19055                           ; BSR set to: 1
 19056                           ;ERROR_HANDLING.c: 52: if(VFD__Run_Time_Error == 1 || VFD_DC_EXTREM_LOW_Error == 1 || Mo
      +                          tor_Slip_Error_Flag == 1 || Rotor_Slip_Error_Flag == 1 || Pitch_FB_Error_Flag == 1 || VF
      +                          D_SHORT_CIRCUIT_fLAG == 1)
 19057  019C4C  0101               	movlb	1	; () banked
 19058  019C4E  0596               	decf	_VFD__Run_Time_Error& (0+255),w,b
 19059  019C50  B4D8               	btfsc	status,2,c
 19060  019C52  D016               	goto	l21074
 19061                           
 19062                           ; BSR set to: 1
 19063  019C54  0101               	movlb	1	; () banked
 19064  019C56  0591               	decf	_VFD_DC_EXTREM_LOW_Error& (0+255),w,b
 19065  019C58  B4D8               	btfsc	status,2,c
 19066  019C5A  D012               	goto	l21074
 19067                           
 19068                           ; BSR set to: 1
 19069  019C5C  0101               	movlb	1	; () banked
 19070  019C5E  0570               	decf	_Motor_Slip_Error_Flag& (0+255),w,b
 19071  019C60  B4D8               	btfsc	status,2,c
 19072  019C62  D00E               	goto	l21074
 19073                           
 19074                           ; BSR set to: 1
 19075  019C64  0101               	movlb	1	; () banked
 19076  019C66  0579               	decf	_Rotor_Slip_Error_Flag& (0+255),w,b
 19077  019C68  B4D8               	btfsc	status,2,c
 19078  019C6A  D00A               	goto	l21074
 19079                           
 19080                           ; BSR set to: 1
 19081  019C6C  0100               	movlb	0	; () banked
 19082  019C6E  05EA               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 19083  019C70  B4D8               	btfsc	status,2,c
 19084  019C72  D006               	goto	l21074
 19085                           
 19086                           ; BSR set to: 0
 19087  019C74  0102               	movlb	2	; () banked
 19088  019C76  05A6               	decf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),w,b
 19089  019C78  0102               	movlb	2	; () banked
 19090  019C7A  11A7               	iorwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),w,b
 19091  019C7C  A4D8               	btfss	status,2,c
 19092  019C7E  0012               	return	
 19093  019C80                     l21074:
 19094                           
 19095                           ;ERROR_HANDLING.c: 53: {
 19096                           ;ERROR_HANDLING.c: 54: EEPROM_Error_Stop();
 19097  019C80  ECCC  F0AA         	call	_EEPROM_Error_Stop	;wreg free
 19098  019C84  0012               	return	
 19099  019C86                     __end_of_Error_Scan_Ramp_up:
 19100                           	opt stack 0
 19101                           tblptru	equ	0xFF8
 19102                           tblptrh	equ	0xFF7
 19103                           tblptrl	equ	0xFF6
 19104                           tablat	equ	0xFF5
 19105                           prodh	equ	0xFF4
 19106                           prodl	equ	0xFF3
 19107                           intcon	equ	0xFF2
 19108                           postinc0	equ	0xFEE
 19109                           wreg	equ	0xFE8
 19110                           postdec1	equ	0xFE5
 19111                           fsr1h	equ	0xFE2
 19112                           fsr1l	equ	0xFE1
 19113                           indf2	equ	0xFDF
 19114                           postinc2	equ	0xFDE
 19115                           postdec2	equ	0xFDD
 19116                           fsr2h	equ	0xFDA
 19117                           fsr2l	equ	0xFD9
 19118                           status	equ	0xFD8
 19119                           
 19120 ;; *************** function _Last_Five_Error *****************
 19121 ;; Defined at:
 19122 ;;		line 140 in file "ERROR_HANDLING.c"
 19123 ;; Parameters:    Size  Location     Type
 19124 ;;		None
 19125 ;; Auto vars:     Size  Location     Type
 19126 ;;		None
 19127 ;; Return value:  Size  Location     Type
 19128 ;;                  1    wreg      void 
 19129 ;; Registers used:
 19130 ;;		wreg, status,2, status,0
 19131 ;; Tracked objects:
 19132 ;;		On entry : 0/0
 19133 ;;		On exit  : 0/0
 19134 ;;		Unchanged: 0/0
 19135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19140 ;;Total ram usage:        0 bytes
 19141 ;; Hardware stack levels used:    1
 19142 ;; Hardware stack levels required when called:    3
 19143 ;; This function calls:
 19144 ;;		Nothing
 19145 ;; This function is called by:
 19146 ;;		_Timer0_OneSecond_Function
 19147 ;; This function uses a non-reentrant model
 19148 ;;
 19149                           
 19150                           	psect	text47
 19151  01AFEA                     __ptext47:
 19152                           	opt stack 0
 19153  01AFEA                     _Last_Five_Error:
 19154                           	opt stack 26
 19155                           
 19156                           ;ERROR_HANDLING.c: 143: if(Errors != Errors1)
 19157                           
 19158                           ;incstack = 0
 19159  01AFEA  0100               	movlb	0	; () banked
 19160  01AFEC  51E1               	movf	_Errors1& (0+255),w,b
 19161  01AFEE  181B               	xorwf	_Errors,w,c
 19162  01AFF0  B4D8               	btfsc	status,2,c
 19163  01AFF2  0012               	return	
 19164                           
 19165                           ; BSR set to: 0
 19166                           ;ERROR_HANDLING.c: 144: {
 19167                           ;ERROR_HANDLING.c: 145: Errors5 = Errors4;
 19168  01AFF4  C154  F155         	movff	_Errors4,_Errors5
 19169                           
 19170                           ;ERROR_HANDLING.c: 146: Errors4 = Errors3;
 19171  01AFF8  C153  F154         	movff	_Errors3,_Errors4
 19172                           
 19173                           ;ERROR_HANDLING.c: 147: Errors3 = Errors2;
 19174  01AFFC  C152  F153         	movff	_Errors2,_Errors3
 19175                           
 19176                           ;ERROR_HANDLING.c: 148: Errors2 = Errors1;
 19177  01B000  C0E1  F152         	movff	_Errors1,_Errors2
 19178                           
 19179                           ;ERROR_HANDLING.c: 149: Errors1 = Errors;
 19180  01B004  C01B  F0E1         	movff	_Errors,_Errors1
 19181  01B008  0012               	return	
 19182  01B00A                     __end_of_Last_Five_Error:
 19183                           	opt stack 0
 19184                           tblptru	equ	0xFF8
 19185                           tblptrh	equ	0xFF7
 19186                           tblptrl	equ	0xFF6
 19187                           tablat	equ	0xFF5
 19188                           prodh	equ	0xFF4
 19189                           prodl	equ	0xFF3
 19190                           intcon	equ	0xFF2
 19191                           postinc0	equ	0xFEE
 19192                           wreg	equ	0xFE8
 19193                           postdec1	equ	0xFE5
 19194                           fsr1h	equ	0xFE2
 19195                           fsr1l	equ	0xFE1
 19196                           indf2	equ	0xFDF
 19197                           postinc2	equ	0xFDE
 19198                           postdec2	equ	0xFDD
 19199                           fsr2h	equ	0xFDA
 19200                           fsr2l	equ	0xFD9
 19201                           status	equ	0xFD8
 19202                           
 19203 ;; *************** function _Error_Scan_Running *****************
 19204 ;; Defined at:
 19205 ;;		line 59 in file "ERROR_HANDLING.c"
 19206 ;; Parameters:    Size  Location     Type
 19207 ;;		None
 19208 ;; Auto vars:     Size  Location     Type
 19209 ;;		None
 19210 ;; Return value:  Size  Location     Type
 19211 ;;                  2  2489[None  ] int 
 19212 ;; Registers used:
 19213 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19214 ;; Tracked objects:
 19215 ;;		On entry : 0/0
 19216 ;;		On exit  : 0/0
 19217 ;;		Unchanged: 0/0
 19218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19223 ;;Total ram usage:        0 bytes
 19224 ;; Hardware stack levels used:    1
 19225 ;; Hardware stack levels required when called:    6
 19226 ;; This function calls:
 19227 ;;		_EEPROM_Error_Stop
 19228 ;;		_Stopping_state_function
 19229 ;; This function is called by:
 19230 ;;		_Timer0_OneSecond_Function
 19231 ;; This function uses a non-reentrant model
 19232 ;;
 19233                           
 19234                           	psect	text48
 19235  019E9C                     __ptext48:
 19236                           	opt stack 0
 19237  019E9C                     _Error_Scan_Running:
 19238                           	opt stack 23
 19239                           
 19240                           ;ERROR_HANDLING.c: 61: if(EEPROM_Error_Flag == 1 || VFD_communication_Error_Flag == 1 ||
      +                           Start_Stop_Flag == 1 || Generator_One_Feedback_Error == 1 || Pitch_FB_Error_Flag == 1 |
      +                          | Tur_OverLoaded_Error == 1 || KW_Minimum_Error == 1 || KW_Maximum_Error == 1 || Turbine
      +                          _Under_Sp
 19241                           
 19242                           ; BSR set to: 0
 19243                           ;incstack = 0
 19244  019E9C  0417               	decf	_EEPROM_Error_Flag,w,c
 19245  019E9E  B4D8               	btfsc	status,2,c
 19246  019EA0  D042               	goto	l22042
 19247  019EA2  0100               	movlb	0	; () banked
 19248  019EA4  05F1               	decf	_VFD_communication_Error_Flag& (0+255),w,b
 19249  019EA6  B4D8               	btfsc	status,2,c
 19250  019EA8  D03E               	goto	l22042
 19251                           
 19252                           ; BSR set to: 0
 19253  019EAA  041F               	decf	_Start_Stop_Flag,w,c
 19254  019EAC  B4D8               	btfsc	status,2,c
 19255  019EAE  D03B               	goto	l22042
 19256                           
 19257                           ; BSR set to: 0
 19258  019EB0  0101               	movlb	1	; () banked
 19259  019EB2  0564               	decf	_Generator_One_Feedback_Error& (0+255),w,b
 19260  019EB4  B4D8               	btfsc	status,2,c
 19261  019EB6  D037               	goto	l22042
 19262                           
 19263                           ; BSR set to: 1
 19264  019EB8  0100               	movlb	0	; () banked
 19265  019EBA  05EA               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 19266  019EBC  B4D8               	btfsc	status,2,c
 19267  019EBE  D033               	goto	l22042
 19268                           
 19269                           ; BSR set to: 0
 19270  019EC0  0101               	movlb	1	; () banked
 19271  019EC2  0588               	decf	_Tur_OverLoaded_Error& (0+255),w,b
 19272  019EC4  B4D8               	btfsc	status,2,c
 19273  019EC6  D02F               	goto	l22042
 19274                           
 19275                           ; BSR set to: 1
 19276  019EC8  0101               	movlb	1	; () banked
 19277  019ECA  056B               	decf	_KW_Minimum_Error& (0+255),w,b
 19278  019ECC  B4D8               	btfsc	status,2,c
 19279  019ECE  D02B               	goto	l22042
 19280                           
 19281                           ; BSR set to: 1
 19282  019ED0  0101               	movlb	1	; () banked
 19283  019ED2  056A               	decf	_KW_Maximum_Error& (0+255),w,b
 19284  019ED4  B4D8               	btfsc	status,2,c
 19285  019ED6  D027               	goto	l22042
 19286                           
 19287                           ; BSR set to: 1
 19288  019ED8  0101               	movlb	1	; () banked
 19289  019EDA  058A               	decf	_Turbine_Under_Speed_Flag& (0+255),w,b
 19290  019EDC  B4D8               	btfsc	status,2,c
 19291  019EDE  D023               	goto	l22042
 19292                           
 19293                           ; BSR set to: 1
 19294  019EE0  0100               	movlb	0	; () banked
 19295  019EE2  05EF               	decf	_Turbine_Over_Speed_Flag& (0+255),w,b
 19296  019EE4  B4D8               	btfsc	status,2,c
 19297  019EE6  D01F               	goto	l22042
 19298                           
 19299                           ; BSR set to: 0
 19300  019EE8  041C               	decf	_Grid_Over_current,w,c
 19301  019EEA  B4D8               	btfsc	status,2,c
 19302  019EEC  D01C               	goto	l22042
 19303                           
 19304                           ; BSR set to: 0
 19305  019EEE  0101               	movlb	1	; () banked
 19306  019EF0  0565               	decf	_Generator_Over_Speed& (0+255),w,b
 19307  019EF2  B4D8               	btfsc	status,2,c
 19308  019EF4  D018               	goto	l22042
 19309                           
 19310                           ; BSR set to: 1
 19311  019EF6  0100               	movlb	0	; () banked
 19312  019EF8  05EF               	decf	_Turbine_Over_Speed_Flag& (0+255),w,b
 19313  019EFA  B4D8               	btfsc	status,2,c
 19314  019EFC  D014               	goto	l22042
 19315                           
 19316                           ; BSR set to: 0
 19317  019EFE  0100               	movlb	0	; () banked
 19318  019F00  05E7               	decf	_Grid_Und_voltage& (0+255),w,b
 19319  019F02  B4D8               	btfsc	status,2,c
 19320  019F04  D010               	goto	l22042
 19321                           
 19322                           ; BSR set to: 0
 19323  019F06  0100               	movlb	0	; () banked
 19324  019F08  05F2               	decf	_Wind_Cut_Out_Flag& (0+255),w,b
 19325  019F0A  A4D8               	btfss	status,2,c
 19326  019F0C  D004               	goto	l22038
 19327                           
 19328                           ; BSR set to: 0
 19329  019F0E  0100               	movlb	0	; () banked
 19330  019F10  51E6               	movf	_Grid_Phase_Sequence_Error& (0+255),w,b
 19331  019F12  B4D8               	btfsc	status,2,c
 19332  019F14  D008               	goto	l22042
 19333  019F16                     l22038:
 19334                           
 19335                           ; BSR set to: 0
 19336  019F16  0100               	movlb	0	; () banked
 19337  019F18  05E4               	decf	_Grid_Frequency_Error& (0+255),w,b
 19338  019F1A  B4D8               	btfsc	status,2,c
 19339  019F1C  D004               	goto	l22042
 19340                           
 19341                           ; BSR set to: 0
 19342  019F1E  0100               	movlb	0	; () banked
 19343  019F20  05E5               	decf	_Grid_Ovr_voltage& (0+255),w,b
 19344  019F22  A4D8               	btfss	status,2,c
 19345  019F24  0012               	return	
 19346  019F26                     l22042:
 19347                           
 19348                           ;ERROR_HANDLING.c: 62: {
 19349                           ;ERROR_HANDLING.c: 63: Turbine_state = STOPPING_STATE;
 19350  019F26  0E03               	movlw	3
 19351  019F28  0100               	movlb	0	; () banked
 19352  019F2A  6FF0               	movwf	_Turbine_state& (0+255),b
 19353                           
 19354                           ; BSR set to: 0
 19355                           ;ERROR_HANDLING.c: 65: if(Generator_One_Feedback_Error == 1 || Pitch_FB_Error_Flag == 1 
      +                          || Tur_OverLoaded_Error == 1)
 19356  019F2C  0101               	movlb	1	; () banked
 19357  019F2E  0564               	decf	_Generator_One_Feedback_Error& (0+255),w,b
 19358  019F30  B4D8               	btfsc	status,2,c
 19359  019F32  D007               	goto	l22050
 19360                           
 19361                           ; BSR set to: 1
 19362  019F34  0100               	movlb	0	; () banked
 19363  019F36  05EA               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 19364  019F38  B4D8               	btfsc	status,2,c
 19365  019F3A  D003               	goto	l22050
 19366                           
 19367                           ; BSR set to: 0
 19368  019F3C  0101               	movlb	1	; () banked
 19369  019F3E  0588               	decf	_Tur_OverLoaded_Error& (0+255),w,b
 19370  019F40  B4D8               	btfsc	status,2,c
 19371  019F42                     l22050:
 19372                           
 19373                           ;ERROR_HANDLING.c: 66: {
 19374                           ;ERROR_HANDLING.c: 67: EEPROM_Error_Stop();
 19375  019F42  ECCC  F0AA         	call	_EEPROM_Error_Stop	;wreg free
 19376                           
 19377                           ;ERROR_HANDLING.c: 68: }
 19378                           ;ERROR_HANDLING.c: 70: Stopping_state_function();
 19379  019F46  EC54  F0D0         	call	_Stopping_state_function	;wreg free
 19380  019F4A  0012               	return	
 19381  019F4C                     __end_of_Error_Scan_Running:
 19382                           	opt stack 0
 19383                           tblptru	equ	0xFF8
 19384                           tblptrh	equ	0xFF7
 19385                           tblptrl	equ	0xFF6
 19386                           tablat	equ	0xFF5
 19387                           prodh	equ	0xFF4
 19388                           prodl	equ	0xFF3
 19389                           intcon	equ	0xFF2
 19390                           postinc0	equ	0xFEE
 19391                           wreg	equ	0xFE8
 19392                           postdec1	equ	0xFE5
 19393                           fsr1h	equ	0xFE2
 19394                           fsr1l	equ	0xFE1
 19395                           indf2	equ	0xFDF
 19396                           postinc2	equ	0xFDE
 19397                           postdec2	equ	0xFDD
 19398                           fsr2h	equ	0xFDA
 19399                           fsr2l	equ	0xFD9
 19400                           status	equ	0xFD8
 19401                           
 19402 ;; *************** function _Stopping_state_function *****************
 19403 ;; Defined at:
 19404 ;;		line 40 in file "state.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;		None
 19407 ;; Auto vars:     Size  Location     Type
 19408 ;;		None
 19409 ;; Return value:  Size  Location     Type
 19410 ;;                  1    wreg      void 
 19411 ;; Registers used:
 19412 ;;		wreg, status,2, status,0, cstack
 19413 ;; Tracked objects:
 19414 ;;		On entry : 0/0
 19415 ;;		On exit  : 0/0
 19416 ;;		Unchanged: 0/0
 19417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19422 ;;Total ram usage:        0 bytes
 19423 ;; Hardware stack levels used:    1
 19424 ;; Hardware stack levels required when called:    5
 19425 ;; This function calls:
 19426 ;;		_Error_Flag_Kill
 19427 ;;		_Start_Stop
 19428 ;;		_Turbine_Pitching
 19429 ;;		_VFD_Data_Kill
 19430 ;;		___ftge
 19431 ;; This function is called by:
 19432 ;;		_Timer0_OneSecond_Function
 19433 ;;		_Error_Scan_Running
 19434 ;; This function uses a non-reentrant model
 19435 ;;
 19436                           
 19437                           	psect	text49
 19438  01A0A8                     __ptext49:
 19439                           	opt stack 0
 19440  01A0A8                     _Stopping_state_function:
 19441                           	opt stack 24
 19442                           
 19443                           ;state.c: 42: Desired_Frequency = 0;
 19444                           
 19445                           ;incstack = 0
 19446  01A0A8  0E00               	movlw	0
 19447  01A0AA  6E16               	movwf	_Desired_Frequency,c
 19448                           
 19449                           ;state.c: 43: Start_up_Error = 2;
 19450  01A0AC  0E02               	movlw	2
 19451  01A0AE  0101               	movlb	1	; () banked
 19452  01A0B0  6FC8               	movwf	_Start_up_Error& (0+255),b
 19453                           
 19454                           ;state.c: 44: Initial_Delay_Second = 0;
 19455  01A0B2  0E00               	movlw	0
 19456  01A0B4  0101               	movlb	1	; () banked
 19457  01A0B6  6F2B               	movwf	(_Initial_Delay_Second+1)& (0+255),b
 19458  01A0B8  0E00               	movlw	0
 19459  01A0BA  6F2A               	movwf	_Initial_Delay_Second& (0+255),b
 19460                           
 19461                           ;state.c: 45: VFD_RAMP = VFD_IN;
 19462  01A0BC  0E00               	movlw	0
 19463  01A0BE  0101               	movlb	1	; () banked
 19464  01A0C0  6F95               	movwf	_VFD_RAMP& (0+255),b
 19465                           
 19466                           ; BSR set to: 1
 19467                           ;state.c: 46: RA5 = 1;
 19468  01A0C2  8A80               	bsf	3968,5,c	;volatile
 19469                           
 19470                           ; BSR set to: 1
 19471                           ;state.c: 47: if(Turbine_RPM == 0 && Generator_RPM_FLT <= 60)
 19472  01A0C4  500A               	movf	_Turbine_RPM,w,c
 19473  01A0C6  100B               	iorwf	_Turbine_RPM+1,w,c
 19474  01A0C8  100C               	iorwf	_Turbine_RPM+2,w,c
 19475  01A0CA  A4D8               	btfss	status,2,c
 19476  01A0CC  D038               	goto	l20962
 19477                           
 19478                           ; BSR set to: 1
 19479  01A0CE  0E00               	movlw	0
 19480  01A0D0  0100               	movlb	0	; () banked
 19481  01A0D2  6F99               	movwf	___ftge@ff1& (0+255),b
 19482  01A0D4  0E70               	movlw	112
 19483  01A0D6  0100               	movlb	0	; () banked
 19484  01A0D8  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 19485  01A0DA  0E42               	movlw	66
 19486  01A0DC  0100               	movlb	0	; () banked
 19487  01A0DE  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 19488  01A0E0  C004  F09C         	movff	_Generator_RPM_FLT,___ftge@ff2
 19489  01A0E4  C005  F09D         	movff	_Generator_RPM_FLT+1,___ftge@ff2+1
 19490  01A0E8  C006  F09E         	movff	_Generator_RPM_FLT+2,___ftge@ff2+2
 19491  01A0EC  EC4B  F0CB         	call	___ftge	;wreg free
 19492  01A0F0  0100               	movlb	0	; () banked
 19493  01A0F2  A0D8               	btfss	status,0,c
 19494  01A0F4  D024               	goto	l20962
 19495                           
 19496                           ; BSR set to: 0
 19497                           ;state.c: 48: {
 19498                           ;state.c: 49: Stopping_Counter++;
 19499  01A0F6  0101               	movlb	1	; () banked
 19500  01A0F8  2B7E               	incf	_Stopping_Counter& (0+255),f,b
 19501                           
 19502                           ; BSR set to: 1
 19503                           ;state.c: 50: if(Stopping_Counter >= 8)
 19504  01A0FA  0E07               	movlw	7
 19505  01A0FC  0101               	movlb	1	; () banked
 19506  01A0FE  657E               	cpfsgt	_Stopping_Counter& (0+255),b
 19507  01A100  D01E               	goto	l20962
 19508                           
 19509                           ; BSR set to: 1
 19510                           ;state.c: 51: {
 19511                           ;state.c: 52: Stopping_Counter = 0;
 19512  01A102  0E00               	movlw	0
 19513  01A104  0101               	movlb	1	; () banked
 19514  01A106  6F7E               	movwf	_Stopping_Counter& (0+255),b
 19515                           
 19516                           ;state.c: 53: Turbine_state = STARTUP_STATE;
 19517  01A108  0E00               	movlw	0
 19518  01A10A  0100               	movlb	0	; () banked
 19519  01A10C  6FF0               	movwf	_Turbine_state& (0+255),b
 19520                           
 19521                           ;state.c: 54: Turbine_Restore_Error = 0;
 19522  01A10E  0E00               	movlw	0
 19523  01A110  0101               	movlb	1	; () banked
 19524  01A112  6F89               	movwf	_Turbine_Restore_Error& (0+255),b
 19525                           
 19526                           ;state.c: 55: Errors = 0; Errors1 = 0; Errors2 = 0; Errors3 = 0; Errors4 = 0; Errors = 0
      +                          ;
 19527  01A114  0E00               	movlw	0
 19528  01A116  6E1B               	movwf	_Errors,c
 19529  01A118  0E00               	movlw	0
 19530  01A11A  0100               	movlb	0	; () banked
 19531  01A11C  6FE1               	movwf	_Errors1& (0+255),b
 19532  01A11E  0E00               	movlw	0
 19533  01A120  0101               	movlb	1	; () banked
 19534  01A122  6F52               	movwf	_Errors2& (0+255),b
 19535  01A124  0E00               	movlw	0
 19536  01A126  0101               	movlb	1	; () banked
 19537  01A128  6F53               	movwf	_Errors3& (0+255),b
 19538  01A12A  0E00               	movlw	0
 19539  01A12C  0101               	movlb	1	; () banked
 19540  01A12E  6F54               	movwf	_Errors4& (0+255),b
 19541  01A130  0E00               	movlw	0
 19542  01A132  6E1B               	movwf	_Errors,c
 19543                           
 19544                           ; BSR set to: 1
 19545                           ;state.c: 56: RA5 = 0;
 19546  01A134  9A80               	bcf	3968,5,c	;volatile
 19547                           
 19548                           ; BSR set to: 1
 19549                           ;state.c: 57: Error_Flag_Kill();
 19550  01A136  ECE6  F0CA         	call	_Error_Flag_Kill	;wreg free
 19551                           
 19552                           ;state.c: 58: VFD_Data_Kill();
 19553  01A13A  EC4C  F0D7         	call	_VFD_Data_Kill	;wreg free
 19554  01A13E                     l20962:
 19555                           
 19556                           ;state.c: 59: }
 19557                           ;state.c: 61: }
 19558                           ;state.c: 62: Start_Stop();
 19559  01A13E  ECCF  F0CC         	call	_Start_Stop	;wreg free
 19560                           
 19561                           ;state.c: 63: Turbine_Pitching();
 19562  01A142  ECE1  F0D8         	call	_Turbine_Pitching	;wreg free
 19563                           
 19564                           ;state.c: 64: (RD2 = 0);
 19565  01A146  9483               	bcf	3971,2,c	;volatile
 19566                           
 19567                           ;state.c: 65: VFD_Error_No = 0;
 19568  01A148  0E00               	movlw	0
 19569  01A14A  6E20               	movwf	_VFD_Error_No,c
 19570  01A14C  0012               	return		;funcret
 19571  01A14E                     __end_of_Stopping_state_function:
 19572                           	opt stack 0
 19573                           tblptru	equ	0xFF8
 19574                           tblptrh	equ	0xFF7
 19575                           tblptrl	equ	0xFF6
 19576                           tablat	equ	0xFF5
 19577                           prodh	equ	0xFF4
 19578                           prodl	equ	0xFF3
 19579                           intcon	equ	0xFF2
 19580                           postinc0	equ	0xFEE
 19581                           wreg	equ	0xFE8
 19582                           postdec1	equ	0xFE5
 19583                           fsr1h	equ	0xFE2
 19584                           fsr1l	equ	0xFE1
 19585                           indf2	equ	0xFDF
 19586                           postinc2	equ	0xFDE
 19587                           postdec2	equ	0xFDD
 19588                           fsr2h	equ	0xFDA
 19589                           fsr2l	equ	0xFD9
 19590                           status	equ	0xFD8
 19591                           
 19592 ;; *************** function _Error_Flag_Kill *****************
 19593 ;; Defined at:
 19594 ;;		line 140 in file "RAMP_UP.c"
 19595 ;; Parameters:    Size  Location     Type
 19596 ;;		None
 19597 ;; Auto vars:     Size  Location     Type
 19598 ;;		None
 19599 ;; Return value:  Size  Location     Type
 19600 ;;                  1    wreg      void 
 19601 ;; Registers used:
 19602 ;;		wreg, status,2
 19603 ;; Tracked objects:
 19604 ;;		On entry : 0/0
 19605 ;;		On exit  : 0/0
 19606 ;;		Unchanged: 0/0
 19607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19612 ;;Total ram usage:        0 bytes
 19613 ;; Hardware stack levels used:    1
 19614 ;; Hardware stack levels required when called:    3
 19615 ;; This function calls:
 19616 ;;		Nothing
 19617 ;; This function is called by:
 19618 ;;		_Stopping_state_function
 19619 ;; This function uses a non-reentrant model
 19620 ;;
 19621                           
 19622                           	psect	text50
 19623  0195CC                     __ptext50:
 19624                           	opt stack 0
 19625  0195CC                     _Error_Flag_Kill:
 19626                           	opt stack 25
 19627                           
 19628                           ;RAMP_UP.c: 142: Two_Sec_Delay_vab = 0;
 19629                           
 19630                           ;incstack = 0
 19631  0195CC  0E00               	movlw	0
 19632  0195CE  0101               	movlb	1	; () banked
 19633  0195D0  6F8C               	movwf	_Two_Sec_Delay_vab& (0+255),b
 19634                           
 19635                           ;RAMP_UP.c: 143: Pitch_FB_Error_Flag = 0;
 19636  0195D2  0E00               	movlw	0
 19637  0195D4  0100               	movlb	0	; () banked
 19638  0195D6  6FEA               	movwf	_Pitch_FB_Error_Flag& (0+255),b
 19639                           
 19640                           ;RAMP_UP.c: 144: VFD_DC_EXTREM_LOW_Error = 0;
 19641  0195D8  0E00               	movlw	0
 19642  0195DA  0101               	movlb	1	; () banked
 19643  0195DC  6F91               	movwf	_VFD_DC_EXTREM_LOW_Error& (0+255),b
 19644                           
 19645                           ;RAMP_UP.c: 145: VFD_SHORT_CIRCUIT_fLAG = 0;
 19646  0195DE  0E00               	movlw	0
 19647  0195E0  0102               	movlb	2	; () banked
 19648  0195E2  6FA7               	movwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),b
 19649  0195E4  0E00               	movlw	0
 19650  0195E6  6FA6               	movwf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),b
 19651                           
 19652                           ;RAMP_UP.c: 146: Turbine_Over_Speed_Flag = 0;
 19653  0195E8  0E00               	movlw	0
 19654  0195EA  0100               	movlb	0	; () banked
 19655  0195EC  6FEF               	movwf	_Turbine_Over_Speed_Flag& (0+255),b
 19656                           
 19657                           ;RAMP_UP.c: 147: VFD__Run_Time_Error = 0 ;
 19658  0195EE  0E00               	movlw	0
 19659  0195F0  0101               	movlb	1	; () banked
 19660  0195F2  6F96               	movwf	_VFD__Run_Time_Error& (0+255),b
 19661                           
 19662                           ;RAMP_UP.c: 148: VFD_DC_Bus_Low_Error = 0;
 19663  0195F4  0E00               	movlw	0
 19664  0195F6  0101               	movlb	1	; () banked
 19665  0195F8  6F90               	movwf	_VFD_DC_Bus_Low_Error& (0+255),b
 19666                           
 19667                           ;RAMP_UP.c: 149: VFD_DC_Bus_High_Error = 0;
 19668  0195FA  0E00               	movlw	0
 19669  0195FC  0101               	movlb	1	; () banked
 19670  0195FE  6F8F               	movwf	_VFD_DC_Bus_High_Error& (0+255),b
 19671                           
 19672                           ;RAMP_UP.c: 150: VFD_Error_Flag = 0;
 19673  019600  0E00               	movlw	0
 19674  019602  0101               	movlb	1	; () banked
 19675  019604  6F92               	movwf	_VFD_Error_Flag& (0+255),b
 19676                           
 19677                           ;RAMP_UP.c: 151: VFD_DC_Bus_Current_Error = 0;
 19678  019606  0E00               	movlw	0
 19679  019608  0101               	movlb	1	; () banked
 19680  01960A  6F8E               	movwf	_VFD_DC_Bus_Current_Error& (0+255),b
 19681                           
 19682                           ;RAMP_UP.c: 152: Grid_Over_current = 0;
 19683  01960C  0E00               	movlw	0
 19684  01960E  6E1C               	movwf	_Grid_Over_current,c
 19685                           
 19686                           ;RAMP_UP.c: 153: Generator_One_Feedback_Error = 0;
 19687  019610  0E00               	movlw	0
 19688  019612  0101               	movlb	1	; () banked
 19689  019614  6F64               	movwf	_Generator_One_Feedback_Error& (0+255),b
 19690                           
 19691                           ;RAMP_UP.c: 154: Tur_OverLoaded_Error = 0;
 19692  019616  0E00               	movlw	0
 19693  019618  0101               	movlb	1	; () banked
 19694  01961A  6F88               	movwf	_Tur_OverLoaded_Error& (0+255),b
 19695                           
 19696                           ;RAMP_UP.c: 155: KW_Minimum_Error = 0;
 19697  01961C  0E00               	movlw	0
 19698  01961E  0101               	movlb	1	; () banked
 19699  019620  6F6B               	movwf	_KW_Minimum_Error& (0+255),b
 19700                           
 19701                           ;RAMP_UP.c: 156: KW_Maximum_Error = 0;
 19702  019622  0E00               	movlw	0
 19703  019624  0101               	movlb	1	; () banked
 19704  019626  6F6A               	movwf	_KW_Maximum_Error& (0+255),b
 19705                           
 19706                           ;RAMP_UP.c: 157: Turbine_Under_Speed_Flag = 0;
 19707  019628  0E00               	movlw	0
 19708  01962A  0101               	movlb	1	; () banked
 19709  01962C  6F8A               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 19710                           
 19711                           ;RAMP_UP.c: 158: Generator_Over_Speed = 0;
 19712  01962E  0E00               	movlw	0
 19713  019630  0101               	movlb	1	; () banked
 19714  019632  6F65               	movwf	_Generator_Over_Speed& (0+255),b
 19715                           
 19716                           ;RAMP_UP.c: 159: Grid_Und_voltage = 0;
 19717  019634  0E00               	movlw	0
 19718  019636  0100               	movlb	0	; () banked
 19719  019638  6FE7               	movwf	_Grid_Und_voltage& (0+255),b
 19720                           
 19721                           ;RAMP_UP.c: 160: Grid_Ovr_voltage = 0;
 19722  01963A  0E00               	movlw	0
 19723  01963C  0100               	movlb	0	; () banked
 19724  01963E  6FE5               	movwf	_Grid_Ovr_voltage& (0+255),b
 19725                           
 19726                           ;RAMP_UP.c: 161: Wind_Cut_In_Flag = 0;
 19727  019640  0E00               	movlw	0
 19728  019642  0101               	movlb	1	; () banked
 19729  019644  6F99               	movwf	_Wind_Cut_In_Flag& (0+255),b
 19730                           
 19731                           ;RAMP_UP.c: 162: Grid_Frequency_Error = 0;
 19732  019646  0E00               	movlw	0
 19733  019648  0100               	movlb	0	; () banked
 19734  01964A  6FE4               	movwf	_Grid_Frequency_Error& (0+255),b
 19735                           
 19736                           ;RAMP_UP.c: 163: Wind_Cut_Out_Flag = 0;
 19737  01964C  0E00               	movlw	0
 19738  01964E  0100               	movlb	0	; () banked
 19739  019650  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 19740                           
 19741                           ;RAMP_UP.c: 164: Motor_slip = 0;
 19742  019652  0E00               	movlw	0
 19743  019654  0100               	movlb	0	; () banked
 19744  019656  6FCA               	movwf	_Motor_slip& (0+255),b
 19745  019658  0E00               	movlw	0
 19746  01965A  0100               	movlb	0	; () banked
 19747  01965C  6FCB               	movwf	(_Motor_slip+1)& (0+255),b
 19748  01965E  0E00               	movlw	0
 19749  019660  0100               	movlb	0	; () banked
 19750  019662  6FCC               	movwf	(_Motor_slip+2)& (0+255),b
 19751                           
 19752                           ;RAMP_UP.c: 165: Rotor_slip = 0;
 19753  019664  0E00               	movlw	0
 19754  019666  0100               	movlb	0	; () banked
 19755  019668  6FD3               	movwf	_Rotor_slip& (0+255),b
 19756  01966A  0E00               	movlw	0
 19757  01966C  0100               	movlb	0	; () banked
 19758  01966E  6FD4               	movwf	(_Rotor_slip+1)& (0+255),b
 19759  019670  0E00               	movlw	0
 19760  019672  0100               	movlb	0	; () banked
 19761  019674  6FD5               	movwf	(_Rotor_slip+2)& (0+255),b
 19762                           
 19763                           ;RAMP_UP.c: 166: Data_1[1] = 0;
 19764  019676  0E00               	movlw	0
 19765  019678  0105               	movlb	5	; () banked
 19766  01967A  6F03               	movwf	(_Data_1+3)& (0+255),b
 19767  01967C  0E00               	movlw	0
 19768  01967E  6F02               	movwf	(_Data_1+2)& (0+255),b
 19769                           
 19770                           ;RAMP_UP.c: 167: Data_1[7] = 0;
 19771  019680  0E00               	movlw	0
 19772  019682  0105               	movlb	5	; () banked
 19773  019684  6F0F               	movwf	(_Data_1+15)& (0+255),b
 19774  019686  0E00               	movlw	0
 19775  019688  6F0E               	movwf	(_Data_1+14)& (0+255),b
 19776                           
 19777                           ;RAMP_UP.c: 168: Data_1[9] = 0;
 19778  01968A  0E00               	movlw	0
 19779  01968C  0105               	movlb	5	; () banked
 19780  01968E  6F13               	movwf	(_Data_1+19)& (0+255),b
 19781  019690  0E00               	movlw	0
 19782  019692  6F12               	movwf	(_Data_1+18)& (0+255),b
 19783                           
 19784                           ; BSR set to: 5
 19785  019694  0012               	return		;funcret
 19786  019696                     __end_of_Error_Flag_Kill:
 19787                           	opt stack 0
 19788                           tblptru	equ	0xFF8
 19789                           tblptrh	equ	0xFF7
 19790                           tblptrl	equ	0xFF6
 19791                           tablat	equ	0xFF5
 19792                           prodh	equ	0xFF4
 19793                           prodl	equ	0xFF3
 19794                           intcon	equ	0xFF2
 19795                           postinc0	equ	0xFEE
 19796                           wreg	equ	0xFE8
 19797                           postdec1	equ	0xFE5
 19798                           fsr1h	equ	0xFE2
 19799                           fsr1l	equ	0xFE1
 19800                           indf2	equ	0xFDF
 19801                           postinc2	equ	0xFDE
 19802                           postdec2	equ	0xFDD
 19803                           fsr2h	equ	0xFDA
 19804                           fsr2l	equ	0xFD9
 19805                           status	equ	0xFD8
 19806                           
 19807 ;; *************** function _EEPROM_Error_Stop *****************
 19808 ;; Defined at:
 19809 ;;		line 92 in file "EEPROM.c"
 19810 ;; Parameters:    Size  Location     Type
 19811 ;;		None
 19812 ;; Auto vars:     Size  Location     Type
 19813 ;;		None
 19814 ;; Return value:  Size  Location     Type
 19815 ;;                  2   34[None  ] int 
 19816 ;; Registers used:
 19817 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19818 ;; Tracked objects:
 19819 ;;		On entry : 0/0
 19820 ;;		On exit  : 0/0
 19821 ;;		Unchanged: 0/0
 19822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19825 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19826 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19827 ;;Total ram usage:        2 bytes
 19828 ;; Hardware stack levels used:    1
 19829 ;; Hardware stack levels required when called:    5
 19830 ;; This function calls:
 19831 ;;		_Last_3_EEPROM_ERROR_Trigger
 19832 ;;		_int_eeprom_read
 19833 ;;		_int_eeprom_write
 19834 ;; This function is called by:
 19835 ;;		_main
 19836 ;;		_Error_Scan_Ramp_up
 19837 ;;		_Error_Scan_Running
 19838 ;; This function uses a non-reentrant model
 19839 ;;
 19840                           
 19841                           	psect	text51
 19842  015598                     __ptext51:
 19843                           	opt stack 0
 19844  015598                     _EEPROM_Error_Stop:
 19845                           	opt stack 22
 19846                           
 19847                           ;EEPROM.c: 94: if(One_Time_Flag == 0)
 19848                           
 19849                           ; BSR set to: 5
 19850                           ;incstack = 0
 19851  015598  0101               	movlb	1	; () banked
 19852  01559A  5173               	movf	_One_Time_Flag& (0+255),w,b
 19853  01559C  0101               	movlb	1	; () banked
 19854  01559E  A4D8               	btfss	status,2,c
 19855  0155A0  D093               	goto	l20154
 19856                           
 19857                           ; BSR set to: 1
 19858                           ;EEPROM.c: 95: {
 19859                           ;EEPROM.c: 96: GiMinutes_3 = int_eeprom_read((0x13));
 19860  0155A2  0E00               	movlw	0
 19861  0155A4  0100               	movlb	0	; () banked
 19862  0155A6  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19863  0155A8  0E13               	movlw	19
 19864  0155AA  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19865  0155AC  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 19866  0155B0  C060  F0DD         	movff	?_int_eeprom_read,_GiMinutes_3
 19867  0155B4  C061  F0DE         	movff	?_int_eeprom_read+1,_GiMinutes_3+1
 19868                           
 19869                           ;EEPROM.c: 97: GiMinutes_2 = int_eeprom_read((0x12));
 19870  0155B8  0E00               	movlw	0
 19871  0155BA  0100               	movlb	0	; () banked
 19872  0155BC  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19873  0155BE  0E12               	movlw	18
 19874  0155C0  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19875  0155C2  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 19876  0155C6  C060  F013         	movff	?_int_eeprom_read,_GiMinutes_2
 19877  0155CA  C061  F014         	movff	?_int_eeprom_read+1,_GiMinutes_2+1
 19878                           
 19879                           ;EEPROM.c: 98: GiMinutes_1 = int_eeprom_read((0x11));
 19880  0155CE  0E00               	movlw	0
 19881  0155D0  0100               	movlb	0	; () banked
 19882  0155D2  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19883  0155D4  0E11               	movlw	17
 19884  0155D6  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19885  0155D8  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 19886  0155DC  C060  F0DB         	movff	?_int_eeprom_read,_GiMinutes_1
 19887  0155E0  C061  F0DC         	movff	?_int_eeprom_read+1,_GiMinutes_1+1
 19888                           
 19889                           ;EEPROM.c: 100: GiHours_3 = int_eeprom_read((0x16));
 19890  0155E4  0E00               	movlw	0
 19891  0155E6  0100               	movlb	0	; () banked
 19892  0155E8  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19893  0155EA  0E16               	movlw	22
 19894  0155EC  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19895  0155EE  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 19896  0155F2  C060  F128         	movff	?_int_eeprom_read,_GiHours_3
 19897  0155F6  C061  F129         	movff	?_int_eeprom_read+1,_GiHours_3+1
 19898                           
 19899                           ;EEPROM.c: 101: GiHours_2 = int_eeprom_read((0x15));
 19900  0155FA  0E00               	movlw	0
 19901  0155FC  0100               	movlb	0	; () banked
 19902  0155FE  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19903  015600  0E15               	movlw	21
 19904  015602  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19905  015604  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 19906  015608  C060  F0D9         	movff	?_int_eeprom_read,_GiHours_2
 19907  01560C  C061  F0DA         	movff	?_int_eeprom_read+1,_GiHours_2+1
 19908                           
 19909                           ;EEPROM.c: 102: GiHours_1 = int_eeprom_read((0x14));
 19910  015610  0E00               	movlw	0
 19911  015612  0100               	movlb	0	; () banked
 19912  015614  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19913  015616  0E14               	movlw	20
 19914  015618  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19915  01561A  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 19916  01561E  C060  F126         	movff	?_int_eeprom_read,_GiHours_1
 19917  015622  C061  F127         	movff	?_int_eeprom_read+1,_GiHours_1+1
 19918                           
 19919                           ;EEPROM.c: 104: EP_Errors3 = int_eeprom_read((0x19));
 19920  015626  0E00               	movlw	0
 19921  015628  0100               	movlb	0	; () banked
 19922  01562A  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19923  01562C  0E19               	movlw	25
 19924  01562E  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19925  015630  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 19926  015634  0100               	movlb	0	; () banked
 19927  015636  5160               	movf	?_int_eeprom_read& (0+255),w,b
 19928  015638  6E1A               	movwf	_EP_Errors3,c
 19929                           
 19930                           ;EEPROM.c: 105: EP_Errors2 = int_eeprom_read((0x18));
 19931  01563A  0E00               	movlw	0
 19932  01563C  0100               	movlb	0	; () banked
 19933  01563E  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19934  015640  0E18               	movlw	24
 19935  015642  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19936  015644  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 19937  015648  0100               	movlb	0	; () banked
 19938  01564A  5160               	movf	?_int_eeprom_read& (0+255),w,b
 19939  01564C  6E19               	movwf	_EP_Errors2,c
 19940                           
 19941                           ;EEPROM.c: 106: EP_Errors1 = int_eeprom_read((0x17));
 19942  01564E  0E00               	movlw	0
 19943  015650  0100               	movlb	0	; () banked
 19944  015652  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19945  015654  0E17               	movlw	23
 19946  015656  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19947  015658  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 19948  01565C  0100               	movlb	0	; () banked
 19949  01565E  5160               	movf	?_int_eeprom_read& (0+255),w,b
 19950  015660  6E18               	movwf	_EP_Errors1,c
 19951                           
 19952                           ; BSR set to: 0
 19953                           ;EEPROM.c: 107: if(EP_Errors3 > 30 || EP_Errors2 > 30 || EP_Errors1 > 30)
 19954  015662  0E1F               	movlw	31
 19955  015664  601A               	cpfslt	_EP_Errors3,c
 19956  015666  D006               	goto	l20146
 19957                           
 19958                           ; BSR set to: 0
 19959  015668  0E1F               	movlw	31
 19960  01566A  6019               	cpfslt	_EP_Errors2,c
 19961  01566C  D003               	goto	l20146
 19962                           
 19963                           ; BSR set to: 0
 19964  01566E  0E1E               	movlw	30
 19965  015670  6418               	cpfsgt	_EP_Errors1,c
 19966  015672  D02A               	goto	l20154
 19967  015674                     l20146:
 19968                           
 19969                           ; BSR set to: 0
 19970                           ;EEPROM.c: 108: {
 19971                           ;EEPROM.c: 109: EP_Errors3 = 0; EP_Errors2 = 0; EP_Errors1 = 0;
 19972  015674  0E00               	movlw	0
 19973  015676  6E1A               	movwf	_EP_Errors3,c
 19974  015678  0E00               	movlw	0
 19975  01567A  6E19               	movwf	_EP_Errors2,c
 19976  01567C  0E00               	movlw	0
 19977  01567E  6E18               	movwf	_EP_Errors1,c
 19978                           
 19979                           ; BSR set to: 0
 19980                           ;EEPROM.c: 110: int_eeprom_write((0x19),0);
 19981  015680  0E00               	movlw	0
 19982  015682  0100               	movlb	0	; () banked
 19983  015684  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19984  015686  0E19               	movlw	25
 19985  015688  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19986  01568A  0E00               	movlw	0
 19987  01568C  0100               	movlb	0	; () banked
 19988  01568E  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 19989  015690  0E00               	movlw	0
 19990  015692  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 19991  015694  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 19992                           
 19993                           ;EEPROM.c: 111: int_eeprom_write((0x18),0);
 19994  015698  0E00               	movlw	0
 19995  01569A  0100               	movlb	0	; () banked
 19996  01569C  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19997  01569E  0E18               	movlw	24
 19998  0156A0  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19999  0156A2  0E00               	movlw	0
 20000  0156A4  0100               	movlb	0	; () banked
 20001  0156A6  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 20002  0156A8  0E00               	movlw	0
 20003  0156AA  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 20004  0156AC  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20005                           
 20006                           ;EEPROM.c: 112: int_eeprom_write((0x17),0);
 20007  0156B0  0E00               	movlw	0
 20008  0156B2  0100               	movlb	0	; () banked
 20009  0156B4  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20010  0156B6  0E17               	movlw	23
 20011  0156B8  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20012  0156BA  0E00               	movlw	0
 20013  0156BC  0100               	movlb	0	; () banked
 20014  0156BE  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 20015  0156C0  0E00               	movlw	0
 20016  0156C2  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 20017  0156C4  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20018  0156C8                     l20154:
 20019                           
 20020                           ;EEPROM.c: 113: }
 20021                           ;EEPROM.c: 114: }
 20022                           ;EEPROM.c: 115: if(One_Time_Flag == 1)
 20023  0156C8  0101               	movlb	1	; () banked
 20024  0156CA  0573               	decf	_One_Time_Flag& (0+255),w,b
 20025  0156CC  A4D8               	btfss	status,2,c
 20026  0156CE  D081               	goto	l20172
 20027                           
 20028                           ; BSR set to: 1
 20029                           ;EEPROM.c: 116: {
 20030                           ;EEPROM.c: 117: EP_Errors3 = EP_Errors2;
 20031  0156D0  C019  F01A         	movff	_EP_Errors2,_EP_Errors3
 20032                           
 20033                           ;EEPROM.c: 118: EP_Errors2 = EP_Errors1;
 20034  0156D4  C018  F019         	movff	_EP_Errors1,_EP_Errors2
 20035                           
 20036                           ;EEPROM.c: 119: EP_Errors1 = Errors;
 20037  0156D8  C01B  F018         	movff	_Errors,_EP_Errors1
 20038                           
 20039                           ; BSR set to: 1
 20040                           ;EEPROM.c: 121: int_eeprom_write((0x19),EP_Errors3);
 20041  0156DC  0E00               	movlw	0
 20042  0156DE  0100               	movlb	0	; () banked
 20043  0156E0  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20044  0156E2  0E19               	movlw	25
 20045  0156E4  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20046  0156E6  C01A  F062         	movff	_EP_Errors3,int_eeprom_write@dat
 20047  0156EA  0100               	movlb	0	; () banked
 20048  0156EC  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 20049  0156EE  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20050                           
 20051                           ;EEPROM.c: 122: int_eeprom_write((0x18),EP_Errors2);
 20052  0156F2  0E00               	movlw	0
 20053  0156F4  0100               	movlb	0	; () banked
 20054  0156F6  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20055  0156F8  0E18               	movlw	24
 20056  0156FA  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20057  0156FC  C019  F062         	movff	_EP_Errors2,int_eeprom_write@dat
 20058  015700  0100               	movlb	0	; () banked
 20059  015702  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 20060  015704  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20061                           
 20062                           ;EEPROM.c: 123: int_eeprom_write((0x17),EP_Errors1);
 20063  015708  0E00               	movlw	0
 20064  01570A  0100               	movlb	0	; () banked
 20065  01570C  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20066  01570E  0E17               	movlw	23
 20067  015710  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20068  015712  C018  F062         	movff	_EP_Errors1,int_eeprom_write@dat
 20069  015716  0100               	movlb	0	; () banked
 20070  015718  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 20071  01571A  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20072                           
 20073                           ;EEPROM.c: 125: GiMinutes_3 = GiMinutes_2;
 20074  01571E  C013  F0DD         	movff	_GiMinutes_2,_GiMinutes_3
 20075  015722  C014  F0DE         	movff	_GiMinutes_2+1,_GiMinutes_3+1
 20076                           
 20077                           ;EEPROM.c: 126: GiMinutes_2 = GiMinutes_1;
 20078  015726  C0DB  F013         	movff	_GiMinutes_1,_GiMinutes_2
 20079  01572A  C0DC  F014         	movff	_GiMinutes_1+1,_GiMinutes_2+1
 20080                           
 20081                           ;EEPROM.c: 127: GiMinutes_1 = GiMinutes;
 20082  01572E  C28E  F0DB         	movff	_GiMinutes,_GiMinutes_1
 20083  015732  C28F  F0DC         	movff	_GiMinutes+1,_GiMinutes_1+1
 20084                           
 20085                           ;EEPROM.c: 129: int_eeprom_write((0x13),GiMinutes_3);
 20086  015736  0E00               	movlw	0
 20087  015738  0100               	movlb	0	; () banked
 20088  01573A  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20089  01573C  0E13               	movlw	19
 20090  01573E  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20091  015740  C0DD  F062         	movff	_GiMinutes_3,int_eeprom_write@dat
 20092  015744  C0DE  F063         	movff	_GiMinutes_3+1,int_eeprom_write@dat+1
 20093  015748  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20094                           
 20095                           ;EEPROM.c: 130: int_eeprom_write((0x12),GiMinutes_2);
 20096  01574C  0E00               	movlw	0
 20097  01574E  0100               	movlb	0	; () banked
 20098  015750  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20099  015752  0E12               	movlw	18
 20100  015754  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20101  015756  C013  F062         	movff	_GiMinutes_2,int_eeprom_write@dat
 20102  01575A  C014  F063         	movff	_GiMinutes_2+1,int_eeprom_write@dat+1
 20103  01575E  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20104                           
 20105                           ;EEPROM.c: 131: int_eeprom_write((0x11),GiMinutes_1);
 20106  015762  0E00               	movlw	0
 20107  015764  0100               	movlb	0	; () banked
 20108  015766  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20109  015768  0E11               	movlw	17
 20110  01576A  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20111  01576C  C0DB  F062         	movff	_GiMinutes_1,int_eeprom_write@dat
 20112  015770  C0DC  F063         	movff	_GiMinutes_1+1,int_eeprom_write@dat+1
 20113  015774  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20114                           
 20115                           ;EEPROM.c: 133: GiHours_3 = GiHours_2;
 20116  015778  C0D9  F128         	movff	_GiHours_2,_GiHours_3
 20117  01577C  C0DA  F129         	movff	_GiHours_2+1,_GiHours_3+1
 20118                           
 20119                           ;EEPROM.c: 134: GiHours_2 = GiHours_1;
 20120  015780  C126  F0D9         	movff	_GiHours_1,_GiHours_2
 20121  015784  C127  F0DA         	movff	_GiHours_1+1,_GiHours_2+1
 20122                           
 20123                           ;EEPROM.c: 135: GiHours_1 = GiHours;
 20124  015788  C28C  F126         	movff	_GiHours,_GiHours_1
 20125  01578C  C28D  F127         	movff	_GiHours+1,_GiHours_1+1
 20126                           
 20127                           ;EEPROM.c: 137: int_eeprom_write((0x16),GiHours_3);
 20128  015790  0E00               	movlw	0
 20129  015792  0100               	movlb	0	; () banked
 20130  015794  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20131  015796  0E16               	movlw	22
 20132  015798  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20133  01579A  C128  F062         	movff	_GiHours_3,int_eeprom_write@dat
 20134  01579E  C129  F063         	movff	_GiHours_3+1,int_eeprom_write@dat+1
 20135  0157A2  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20136                           
 20137                           ;EEPROM.c: 138: int_eeprom_write((0x15),GiHours_2);
 20138  0157A6  0E00               	movlw	0
 20139  0157A8  0100               	movlb	0	; () banked
 20140  0157AA  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20141  0157AC  0E15               	movlw	21
 20142  0157AE  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20143  0157B0  C0D9  F062         	movff	_GiHours_2,int_eeprom_write@dat
 20144  0157B4  C0DA  F063         	movff	_GiHours_2+1,int_eeprom_write@dat+1
 20145  0157B8  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20146                           
 20147                           ;EEPROM.c: 139: int_eeprom_write((0x14),GiHours_1);
 20148  0157BC  0E00               	movlw	0
 20149  0157BE  0100               	movlb	0	; () banked
 20150  0157C0  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20151  0157C2  0E14               	movlw	20
 20152  0157C4  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20153  0157C6  C126  F062         	movff	_GiHours_1,int_eeprom_write@dat
 20154  0157CA  C127  F063         	movff	_GiHours_1+1,int_eeprom_write@dat+1
 20155  0157CE  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20156  0157D2                     l20172:
 20157                           
 20158                           ;EEPROM.c: 140: }
 20159                           ;EEPROM.c: 142: if(EP_Errors3 != 0)
 20160  0157D2  501A               	movf	_EP_Errors3,w,c
 20161  0157D4  B4D8               	btfsc	status,2,c
 20162  0157D6  D031               	goto	l20180
 20163                           
 20164                           ;EEPROM.c: 143: {
 20165                           ;EEPROM.c: 145: Hours_1 = GiHours_2 - GiHours_3;
 20166  0157D8  C128  F064         	movff	_GiHours_3,??_EEPROM_Error_Stop
 20167  0157DC  C129  F065         	movff	_GiHours_3+1,??_EEPROM_Error_Stop+1
 20168  0157E0  0100               	movlb	0	; () banked
 20169  0157E2  1F64               	comf	??_EEPROM_Error_Stop& (0+255),f,b
 20170  0157E4  1F65               	comf	(??_EEPROM_Error_Stop+1)& (0+255),f,b
 20171  0157E6  4B64               	infsnz	??_EEPROM_Error_Stop& (0+255),f,b
 20172  0157E8  2B65               	incf	(??_EEPROM_Error_Stop+1)& (0+255),f,b
 20173  0157EA  0100               	movlb	0	; () banked
 20174  0157EC  51D9               	movf	_GiHours_2& (0+255),w,b
 20175  0157EE  0100               	movlb	0	; () banked
 20176  0157F0  2564               	addwf	??_EEPROM_Error_Stop& (0+255),w,b
 20177  0157F2  0102               	movlb	2	; () banked
 20178  0157F4  6FF5               	movwf	_Hours_1& (0+255),b
 20179  0157F6  0100               	movlb	0	; () banked
 20180  0157F8  51DA               	movf	(_GiHours_2+1)& (0+255),w,b
 20181  0157FA  0100               	movlb	0	; () banked
 20182  0157FC  2165               	addwfc	(??_EEPROM_Error_Stop+1)& (0+255),w,b
 20183  0157FE  0102               	movlb	2	; () banked
 20184  015800  6FF6               	movwf	(_Hours_1+1)& (0+255),b
 20185                           
 20186                           ;EEPROM.c: 146: if(Hours_1 > 0)
 20187  015802  0102               	movlb	2	; () banked
 20188  015804  BFF6               	btfsc	(_Hours_1+1)& (0+255),7,b
 20189  015806  D013               	goto	l20178
 20190  015808  0102               	movlb	2	; () banked
 20191  01580A  51F6               	movf	(_Hours_1+1)& (0+255),w,b
 20192  01580C  E104               	bnz	u13770
 20193  01580E  0102               	movlb	2	; () banked
 20194  015810  05F5               	decf	_Hours_1& (0+255),w,b
 20195  015812  A0D8               	btfss	status,0,c
 20196  015814  D00C               	goto	l20178
 20197  015816                     u13770:
 20198                           
 20199                           ; BSR set to: 2
 20200                           ;EEPROM.c: 147: {
 20201                           ;EEPROM.c: 148: Minutes = (60 * Hours_1) + (GiMinutes_2 - GiMinutes_3);
 20202  015816  0100               	movlb	0	; () banked
 20203  015818  51DD               	movf	_GiMinutes_3& (0+255),w,b
 20204  01581A  0800               	sublw	0
 20205  01581C  0100               	movlb	0	; () banked
 20206  01581E  6F64               	movwf	??_EEPROM_Error_Stop& (0+255),b
 20207  015820  0102               	movlb	2	; () banked
 20208  015822  51F5               	movf	_Hours_1& (0+255),w,b
 20209  015824  0D3C               	mullw	60
 20210  015826  50F3               	movf	prodl,w,c
 20211  015828  0100               	movlb	0	; () banked
 20212  01582A  2564               	addwf	??_EEPROM_Error_Stop& (0+255),w,b
 20213  01582C  D003               	goto	L10
 20214  01582E                     l20178:
 20215                           
 20216                           ;EEPROM.c: 150: else
 20217                           ;EEPROM.c: 151: {
 20218                           ;EEPROM.c: 152: Minutes = GiMinutes_2 - GiMinutes_3;
 20219  01582E  0100               	movlb	0	; () banked
 20220  015830  51DD               	movf	_GiMinutes_3& (0+255),w,b
 20221  015832  0800               	sublw	0
 20222  015834                     L10:
 20223  015834  2413               	addwf	_GiMinutes_2,w,c
 20224  015836  0101               	movlb	1	; () banked
 20225  015838  6F6E               	movwf	_Minutes& (0+255),b
 20226  01583A                     l20180:
 20227                           
 20228                           ;EEPROM.c: 153: }
 20229                           ;EEPROM.c: 154: }
 20230                           ;EEPROM.c: 156: if(EP_Errors2 != 0)
 20231  01583A  5019               	movf	_EP_Errors2,w,c
 20232  01583C  B4D8               	btfsc	status,2,c
 20233  01583E  D030               	goto	l10222
 20234                           
 20235                           ;EEPROM.c: 157: {
 20236                           ;EEPROM.c: 158: Hours_2 = GiHours_1 - GiHours_2;
 20237  015840  C0D9  F064         	movff	_GiHours_2,??_EEPROM_Error_Stop
 20238  015844  C0DA  F065         	movff	_GiHours_2+1,??_EEPROM_Error_Stop+1
 20239  015848  0100               	movlb	0	; () banked
 20240  01584A  1F64               	comf	??_EEPROM_Error_Stop& (0+255),f,b
 20241  01584C  1F65               	comf	(??_EEPROM_Error_Stop+1)& (0+255),f,b
 20242  01584E  4B64               	infsnz	??_EEPROM_Error_Stop& (0+255),f,b
 20243  015850  2B65               	incf	(??_EEPROM_Error_Stop+1)& (0+255),f,b
 20244  015852  0101               	movlb	1	; () banked
 20245  015854  5126               	movf	_GiHours_1& (0+255),w,b
 20246  015856  0100               	movlb	0	; () banked
 20247  015858  2564               	addwf	??_EEPROM_Error_Stop& (0+255),w,b
 20248  01585A  0102               	movlb	2	; () banked
 20249  01585C  6FF7               	movwf	_Hours_2& (0+255),b
 20250  01585E  0101               	movlb	1	; () banked
 20251  015860  5127               	movf	(_GiHours_1+1)& (0+255),w,b
 20252  015862  0100               	movlb	0	; () banked
 20253  015864  2165               	addwfc	(??_EEPROM_Error_Stop+1)& (0+255),w,b
 20254  015866  0102               	movlb	2	; () banked
 20255  015868  6FF8               	movwf	(_Hours_2+1)& (0+255),b
 20256                           
 20257                           ;EEPROM.c: 159: if(Hours_2 > 0)
 20258  01586A  0102               	movlb	2	; () banked
 20259  01586C  BFF8               	btfsc	(_Hours_2+1)& (0+255),7,b
 20260  01586E  D012               	goto	l20186
 20261  015870  0102               	movlb	2	; () banked
 20262  015872  51F8               	movf	(_Hours_2+1)& (0+255),w,b
 20263  015874  E104               	bnz	u13790
 20264  015876  0102               	movlb	2	; () banked
 20265  015878  05F7               	decf	_Hours_2& (0+255),w,b
 20266  01587A  A0D8               	btfss	status,0,c
 20267  01587C  D00B               	goto	l20186
 20268  01587E                     u13790:
 20269                           
 20270                           ; BSR set to: 2
 20271                           ;EEPROM.c: 160: {
 20272                           ;EEPROM.c: 161: Minutes_1 = (60 * Hours_2) + (GiMinutes_1 - GiMinutes_2);
 20273  01587E  5013               	movf	_GiMinutes_2,w,c
 20274  015880  0800               	sublw	0
 20275  015882  0100               	movlb	0	; () banked
 20276  015884  6F64               	movwf	??_EEPROM_Error_Stop& (0+255),b
 20277  015886  0102               	movlb	2	; () banked
 20278  015888  51F7               	movf	_Hours_2& (0+255),w,b
 20279  01588A  0D3C               	mullw	60
 20280  01588C  50F3               	movf	prodl,w,c
 20281  01588E  0100               	movlb	0	; () banked
 20282  015890  2564               	addwf	??_EEPROM_Error_Stop& (0+255),w,b
 20283  015892  D002               	goto	L11
 20284  015894                     l20186:
 20285                           
 20286                           ;EEPROM.c: 163: else
 20287                           ;EEPROM.c: 164: {
 20288                           ;EEPROM.c: 165: Minutes_1 = GiMinutes_1 - GiMinutes_2;
 20289  015894  5013               	movf	_GiMinutes_2,w,c
 20290  015896  0800               	sublw	0
 20291  015898                     L11:
 20292  015898  0100               	movlb	0	; () banked
 20293  01589A  25DB               	addwf	_GiMinutes_1& (0+255),w,b
 20294  01589C  0101               	movlb	1	; () banked
 20295  01589E  6F6F               	movwf	_Minutes_1& (0+255),b
 20296  0158A0                     l10222:
 20297                           
 20298                           ;EEPROM.c: 166: }
 20299                           ;EEPROM.c: 167: }
 20300                           ;EEPROM.c: 168: Total_Min = Minutes_1 + Minutes;
 20301  0158A0  0101               	movlb	1	; () banked
 20302  0158A2  516F               	movf	_Minutes_1& (0+255),w,b
 20303  0158A4  0101               	movlb	1	; () banked
 20304  0158A6  256E               	addwf	_Minutes& (0+255),w,b
 20305  0158A8  0101               	movlb	1	; () banked
 20306  0158AA  6F87               	movwf	_Total_Min& (0+255),b
 20307                           
 20308                           ; BSR set to: 1
 20309                           ;EEPROM.c: 170: if(Minutes_1 != 0 && Minutes != 0)
 20310  0158AC  0101               	movlb	1	; () banked
 20311  0158AE  516F               	movf	_Minutes_1& (0+255),w,b
 20312  0158B0  B4D8               	btfsc	status,2,c
 20313  0158B2  D005               	goto	l20194
 20314                           
 20315                           ; BSR set to: 1
 20316  0158B4  0101               	movlb	1	; () banked
 20317  0158B6  516E               	movf	_Minutes& (0+255),w,b
 20318  0158B8  A4D8               	btfss	status,2,c
 20319                           
 20320                           ; BSR set to: 1
 20321                           ;EEPROM.c: 171: {
 20322                           ;EEPROM.c: 172: Last_3_EEPROM_ERROR_Trigger();
 20323  0158BA  ECC1  F0C8         	call	_Last_3_EEPROM_ERROR_Trigger	;wreg free
 20324  0158BE                     l20194:
 20325                           
 20326                           ;EEPROM.c: 173: }
 20327                           ;EEPROM.c: 177: One_Time_Flag = 1;
 20328  0158BE  0E01               	movlw	1
 20329  0158C0  0101               	movlb	1	; () banked
 20330  0158C2  6F73               	movwf	_One_Time_Flag& (0+255),b
 20331                           
 20332                           ; BSR set to: 1
 20333  0158C4  0012               	return		;funcret
 20334  0158C6                     __end_of_EEPROM_Error_Stop:
 20335                           	opt stack 0
 20336                           tblptru	equ	0xFF8
 20337                           tblptrh	equ	0xFF7
 20338                           tblptrl	equ	0xFF6
 20339                           tablat	equ	0xFF5
 20340                           prodh	equ	0xFF4
 20341                           prodl	equ	0xFF3
 20342                           intcon	equ	0xFF2
 20343                           postinc0	equ	0xFEE
 20344                           wreg	equ	0xFE8
 20345                           postdec1	equ	0xFE5
 20346                           fsr1h	equ	0xFE2
 20347                           fsr1l	equ	0xFE1
 20348                           indf2	equ	0xFDF
 20349                           postinc2	equ	0xFDE
 20350                           postdec2	equ	0xFDD
 20351                           fsr2h	equ	0xFDA
 20352                           fsr2l	equ	0xFD9
 20353                           status	equ	0xFD8
 20354                           
 20355 ;; *************** function _Last_3_EEPROM_ERROR_Trigger *****************
 20356 ;; Defined at:
 20357 ;;		line 179 in file "EEPROM.c"
 20358 ;; Parameters:    Size  Location     Type
 20359 ;;		None
 20360 ;; Auto vars:     Size  Location     Type
 20361 ;;		None
 20362 ;; Return value:  Size  Location     Type
 20363 ;;                  1    wreg      void 
 20364 ;; Registers used:
 20365 ;;		wreg, status,2, status,0, cstack
 20366 ;; Tracked objects:
 20367 ;;		On entry : 0/0
 20368 ;;		On exit  : 0/0
 20369 ;;		Unchanged: 0/0
 20370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20375 ;;Total ram usage:        0 bytes
 20376 ;; Hardware stack levels used:    1
 20377 ;; Hardware stack levels required when called:    4
 20378 ;; This function calls:
 20379 ;;		_int_eeprom_write
 20380 ;; This function is called by:
 20381 ;;		_EEPROM_Error_Stop
 20382 ;; This function uses a non-reentrant model
 20383 ;;
 20384                           
 20385                           	psect	text52
 20386  019182                     __ptext52:
 20387                           	opt stack 0
 20388  019182                     _Last_3_EEPROM_ERROR_Trigger:
 20389                           	opt stack 22
 20390                           
 20391                           ;EEPROM.c: 181: if(Total_Min > (15))
 20392                           
 20393                           ; BSR set to: 1
 20394                           ;incstack = 0
 20395  019182  0E0F               	movlw	15
 20396  019184  0101               	movlb	1	; () banked
 20397  019186  6587               	cpfsgt	_Total_Min& (0+255),b
 20398  019188  D063               	goto	l19786
 20399                           
 20400                           ; BSR set to: 1
 20401                           ;EEPROM.c: 182: {
 20402                           ;EEPROM.c: 183: EP_Errors3 = 0; GiMinutes_3 = 0; GiHours_3 = 0;
 20403  01918A  0E00               	movlw	0
 20404  01918C  6E1A               	movwf	_EP_Errors3,c
 20405  01918E  0E00               	movlw	0
 20406  019190  0100               	movlb	0	; () banked
 20407  019192  6FDE               	movwf	(_GiMinutes_3+1)& (0+255),b
 20408  019194  0E00               	movlw	0
 20409  019196  6FDD               	movwf	_GiMinutes_3& (0+255),b
 20410  019198  0E00               	movlw	0
 20411  01919A  0101               	movlb	1	; () banked
 20412  01919C  6F29               	movwf	(_GiHours_3+1)& (0+255),b
 20413  01919E  0E00               	movlw	0
 20414  0191A0  6F28               	movwf	_GiHours_3& (0+255),b
 20415                           
 20416                           ; BSR set to: 1
 20417                           ;EEPROM.c: 184: int_eeprom_write((0x19),EP_Errors3);
 20418  0191A2  0E00               	movlw	0
 20419  0191A4  0100               	movlb	0	; () banked
 20420  0191A6  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20421  0191A8  0E19               	movlw	25
 20422  0191AA  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20423  0191AC  C01A  F062         	movff	_EP_Errors3,int_eeprom_write@dat
 20424  0191B0  0100               	movlb	0	; () banked
 20425  0191B2  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 20426  0191B4  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20427                           
 20428                           ;EEPROM.c: 185: int_eeprom_write((0x13),GiMinutes_3);
 20429  0191B8  0E00               	movlw	0
 20430  0191BA  0100               	movlb	0	; () banked
 20431  0191BC  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20432  0191BE  0E13               	movlw	19
 20433  0191C0  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20434  0191C2  C0DD  F062         	movff	_GiMinutes_3,int_eeprom_write@dat
 20435  0191C6  C0DE  F063         	movff	_GiMinutes_3+1,int_eeprom_write@dat+1
 20436  0191CA  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20437                           
 20438                           ;EEPROM.c: 186: int_eeprom_write((0x16),GiHours_3);
 20439  0191CE  0E00               	movlw	0
 20440  0191D0  0100               	movlb	0	; () banked
 20441  0191D2  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20442  0191D4  0E16               	movlw	22
 20443  0191D6  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20444  0191D8  C128  F062         	movff	_GiHours_3,int_eeprom_write@dat
 20445  0191DC  C129  F063         	movff	_GiHours_3+1,int_eeprom_write@dat+1
 20446  0191E0  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20447                           
 20448                           ;EEPROM.c: 188: EP_Errors2 = 0; GiMinutes_2 = 0; GiHours_2 = 0;
 20449  0191E4  0E00               	movlw	0
 20450  0191E6  6E19               	movwf	_EP_Errors2,c
 20451  0191E8  0E00               	movlw	0
 20452  0191EA  6E14               	movwf	_GiMinutes_2+1,c
 20453  0191EC  0E00               	movlw	0
 20454  0191EE  6E13               	movwf	_GiMinutes_2,c
 20455  0191F0  0E00               	movlw	0
 20456  0191F2  0100               	movlb	0	; () banked
 20457  0191F4  6FDA               	movwf	(_GiHours_2+1)& (0+255),b
 20458  0191F6  0E00               	movlw	0
 20459  0191F8  6FD9               	movwf	_GiHours_2& (0+255),b
 20460                           
 20461                           ;EEPROM.c: 189: int_eeprom_write((0x18),EP_Errors2);
 20462  0191FA  0E00               	movlw	0
 20463  0191FC  0100               	movlb	0	; () banked
 20464  0191FE  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20465  019200  0E18               	movlw	24
 20466  019202  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20467  019204  C019  F062         	movff	_EP_Errors2,int_eeprom_write@dat
 20468  019208  0100               	movlb	0	; () banked
 20469  01920A  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 20470  01920C  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20471                           
 20472                           ;EEPROM.c: 190: int_eeprom_write((0x12),GiMinutes_2);
 20473  019210  0E00               	movlw	0
 20474  019212  0100               	movlb	0	; () banked
 20475  019214  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20476  019216  0E12               	movlw	18
 20477  019218  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20478  01921A  C013  F062         	movff	_GiMinutes_2,int_eeprom_write@dat
 20479  01921E  C014  F063         	movff	_GiMinutes_2+1,int_eeprom_write@dat+1
 20480  019222  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20481                           
 20482                           ;EEPROM.c: 191: int_eeprom_write((0x15),GiHours_2);
 20483  019226  0E00               	movlw	0
 20484  019228  0100               	movlb	0	; () banked
 20485  01922A  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20486  01922C  0E15               	movlw	21
 20487  01922E  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20488  019230  C0D9  F062         	movff	_GiHours_2,int_eeprom_write@dat
 20489  019234  C0DA  F063         	movff	_GiHours_2+1,int_eeprom_write@dat+1
 20490  019238  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20491                           
 20492                           ;EEPROM.c: 193: Total_Min = 0; Minutes_1 = 0; Minutes = 0;
 20493  01923C  0E00               	movlw	0
 20494  01923E  0101               	movlb	1	; () banked
 20495  019240  6F87               	movwf	_Total_Min& (0+255),b
 20496                           
 20497                           ; BSR set to: 1
 20498  019242  0E00               	movlw	0
 20499  019244  0101               	movlb	1	; () banked
 20500  019246  6F6F               	movwf	_Minutes_1& (0+255),b
 20501                           
 20502                           ; BSR set to: 1
 20503  019248  0E00               	movlw	0
 20504  01924A  0101               	movlb	1	; () banked
 20505  01924C  6F6E               	movwf	_Minutes& (0+255),b
 20506                           
 20507                           ;EEPROM.c: 194: }
 20508  01924E  0012               	return	
 20509  019250                     l19786:
 20510                           
 20511                           ; BSR set to: 1
 20512                           ;EEPROM.c: 195: else
 20513                           ;EEPROM.c: 196: {
 20514                           ;EEPROM.c: 197: EEPROM_Error_Flag = 1;
 20515  019250  0E01               	movlw	1
 20516  019252  6E17               	movwf	_EEPROM_Error_Flag,c
 20517                           
 20518                           ; BSR set to: 1
 20519                           ;EEPROM.c: 198: Errors = EP_Errors1;
 20520  019254  C018  F01B         	movff	_EP_Errors1,_Errors
 20521                           
 20522                           ; BSR set to: 1
 20523                           ;EEPROM.c: 199: int_eeprom_write((0x20),EEPROM_Error_Flag);
 20524  019258  0E00               	movlw	0
 20525  01925A  0100               	movlb	0	; () banked
 20526  01925C  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20527  01925E  0E20               	movlw	32
 20528  019260  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20529  019262  C017  F062         	movff	_EEPROM_Error_Flag,int_eeprom_write@dat
 20530  019266  0100               	movlb	0	; () banked
 20531  019268  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 20532  01926A  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 20533  01926E  0012               	return	
 20534  019270                     __end_of_Last_3_EEPROM_ERROR_Trigger:
 20535                           	opt stack 0
 20536                           tblptru	equ	0xFF8
 20537                           tblptrh	equ	0xFF7
 20538                           tblptrl	equ	0xFF6
 20539                           tablat	equ	0xFF5
 20540                           prodh	equ	0xFF4
 20541                           prodl	equ	0xFF3
 20542                           intcon	equ	0xFF2
 20543                           postinc0	equ	0xFEE
 20544                           wreg	equ	0xFE8
 20545                           postdec1	equ	0xFE5
 20546                           fsr1h	equ	0xFE2
 20547                           fsr1l	equ	0xFE1
 20548                           indf2	equ	0xFDF
 20549                           postinc2	equ	0xFDE
 20550                           postdec2	equ	0xFDD
 20551                           fsr2h	equ	0xFDA
 20552                           fsr2l	equ	0xFD9
 20553                           status	equ	0xFD8
 20554                           
 20555 ;; *************** function _Error_Checking_One_Second *****************
 20556 ;; Defined at:
 20557 ;;		line 78 in file "ERROR_HANDLING.c"
 20558 ;; Parameters:    Size  Location     Type
 20559 ;;		None
 20560 ;; Auto vars:     Size  Location     Type
 20561 ;;		None
 20562 ;; Return value:  Size  Location     Type
 20563 ;;                  1    wreg      void 
 20564 ;; Registers used:
 20565 ;;		wreg, status,2, status,0, cstack
 20566 ;; Tracked objects:
 20567 ;;		On entry : 0/0
 20568 ;;		On exit  : 0/0
 20569 ;;		Unchanged: 0/0
 20570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20575 ;;Total ram usage:        0 bytes
 20576 ;; Hardware stack levels used:    1
 20577 ;; Hardware stack levels required when called:    6
 20578 ;; This function calls:
 20579 ;;		_Communication_Error
 20580 ;;		_DC_Bus_Voltage
 20581 ;;		_Generator_One_Feedback
 20582 ;;		_Generator_RPM
 20583 ;;		_Grid_Frequency
 20584 ;;		_Grid_Maximum_Power
 20585 ;;		_Grid_Minimum_Power
 20586 ;;		_Grid_OV
 20587 ;;		_Grid_Over_Current
 20588 ;;		_Grid_Phase_Sequence
 20589 ;;		_Grid_UV
 20590 ;;		_Motor_Slip_Cal
 20591 ;;		_Pitch_Feedback
 20592 ;;		_Pitch_PS_ON_Function
 20593 ;;		_Ramp_Up_Slip
 20594 ;;		_Ramp_Up_Slip_Error_Trigger
 20595 ;;		_Rotor_Slip_Cal
 20596 ;;		_Start_Stop
 20597 ;;		_Turbine_OverLoaded_Error
 20598 ;;		_Turbine_Over_Speed
 20599 ;;		_Turbine_Restore_Check
 20600 ;;		_Turbine_Under_speed
 20601 ;;		_VFD_PS_ON_Function
 20602 ;;		_VFD_Run_Time_Error
 20603 ;;		_Wind_Speed_Error_Trigger
 20604 ;; This function is called by:
 20605 ;;		_Timer0_OneSecond_Function
 20606 ;; This function uses a non-reentrant model
 20607 ;;
 20608                           
 20609                           	psect	text53
 20610  0194FC                     __ptext53:
 20611                           	opt stack 0
 20612  0194FC                     _Error_Checking_One_Second:
 20613                           	opt stack 23
 20614                           
 20615                           ;ERROR_HANDLING.c: 80: if(Turbine_state == STARTUP_STATE)
 20616                           
 20617                           ;incstack = 0
 20618  0194FC  0100               	movlb	0	; () banked
 20619  0194FE  51F0               	movf	_Turbine_state& (0+255),w,b
 20620  019500  A4D8               	btfss	status,2,c
 20621  019502  D018               	goto	l21978
 20622                           
 20623                           ; BSR set to: 0
 20624                           ;ERROR_HANDLING.c: 81: {
 20625                           ;ERROR_HANDLING.c: 82: Wind_Speed_Error_Trigger();
 20626  019504  EC32  F0C4         	call	_Wind_Speed_Error_Trigger	;wreg free
 20627                           
 20628                           ;ERROR_HANDLING.c: 83: VFD_PS_ON_Function();
 20629  019508  EC72  F0D3         	call	_VFD_PS_ON_Function	;wreg free
 20630                           
 20631                           ;ERROR_HANDLING.c: 84: Pitch_PS_ON_Function();
 20632  01950C  EC9E  F0D6         	call	_Pitch_PS_ON_Function	;wreg free
 20633                           
 20634                           ;ERROR_HANDLING.c: 85: Grid_UV();
 20635  019510  ECE5  F0BE         	call	_Grid_UV	;wreg free
 20636                           
 20637                           ;ERROR_HANDLING.c: 86: Grid_OV();
 20638  019514  EC99  F0BF         	call	_Grid_OV	;wreg free
 20639                           
 20640                           ;ERROR_HANDLING.c: 87: Grid_Frequency();
 20641  019518  EC74  F0D2         	call	_Grid_Frequency	;wreg free
 20642                           
 20643                           ;ERROR_HANDLING.c: 88: DC_Bus_Voltage();
 20644  01951C  EC38  F0C9         	call	_DC_Bus_Voltage	;wreg free
 20645                           
 20646                           ;ERROR_HANDLING.c: 89: Grid_Phase_Sequence();
 20647  019520  EC05  F0D8         	call	_Grid_Phase_Sequence	;wreg free
 20648                           
 20649                           ;ERROR_HANDLING.c: 90: Turbine_Restore_Check();
 20650  019524  EC9C  F0CE         	call	_Turbine_Restore_Check	;wreg free
 20651                           
 20652                           ;ERROR_HANDLING.c: 91: Start_Stop();
 20653  019528  ECCF  F0CC         	call	_Start_Stop	;wreg free
 20654                           
 20655                           ;ERROR_HANDLING.c: 92: Communication_Error();
 20656  01952C  EC4F  F0D4         	call	_Communication_Error	;wreg free
 20657                           
 20658                           ;ERROR_HANDLING.c: 93: Grid_Over_Current();
 20659  019530  ECF7  F0C2         	call	_Grid_Over_Current	;wreg free
 20660  019534                     l21978:
 20661                           
 20662                           ;ERROR_HANDLING.c: 94: }
 20663                           ;ERROR_HANDLING.c: 95: if(Turbine_state == RUNNING_STATE)
 20664  019534  0E02               	movlw	2
 20665  019536  0100               	movlb	0	; () banked
 20666  019538  19F0               	xorwf	_Turbine_state& (0+255),w,b
 20667  01953A  A4D8               	btfss	status,2,c
 20668  01953C  D028               	goto	l21986
 20669                           
 20670                           ; BSR set to: 0
 20671                           ;ERROR_HANDLING.c: 96: {
 20672                           ;ERROR_HANDLING.c: 97: VFD_PS_ON_Function();
 20673  01953E  EC72  F0D3         	call	_VFD_PS_ON_Function	;wreg free
 20674                           
 20675                           ;ERROR_HANDLING.c: 98: Wind_Speed_Error_Trigger();
 20676  019542  EC32  F0C4         	call	_Wind_Speed_Error_Trigger	;wreg free
 20677                           
 20678                           ;ERROR_HANDLING.c: 99: Turbine_Under_speed();
 20679  019546  ECB5  F0D4         	call	_Turbine_Under_speed	;wreg free
 20680                           
 20681                           ;ERROR_HANDLING.c: 100: Generator_RPM();
 20682  01954A  EC97  F0D5         	call	_Generator_RPM	;wreg free
 20683                           
 20684                           ;ERROR_HANDLING.c: 101: Rotor_Slip_Cal();
 20685  01954E  ECF5  F0CE         	call	_Rotor_Slip_Cal	;wreg free
 20686                           
 20687                           ;ERROR_HANDLING.c: 102: Motor_Slip_Cal();
 20688  019552  ECD4  F0C5         	call	_Motor_Slip_Cal	;wreg free
 20689                           
 20690                           ;ERROR_HANDLING.c: 103: Pitch_Feedback();
 20691  019556  ECE5  F0D3         	call	_Pitch_Feedback	;wreg free
 20692                           
 20693                           ;ERROR_HANDLING.c: 104: Generator_One_Feedback();
 20694  01955A  EC1A  F0D4         	call	_Generator_One_Feedback	;wreg free
 20695                           
 20696                           ;ERROR_HANDLING.c: 105: Start_Stop();
 20697  01955E  ECCF  F0CC         	call	_Start_Stop	;wreg free
 20698                           
 20699                           ;ERROR_HANDLING.c: 106: Communication_Error();
 20700  019562  EC4F  F0D4         	call	_Communication_Error	;wreg free
 20701                           
 20702                           ;ERROR_HANDLING.c: 107: Turbine_Over_Speed();
 20703  019566  EC6D  F0D5         	call	_Turbine_Over_Speed	;wreg free
 20704                           
 20705                           ;ERROR_HANDLING.c: 110: if(Five_Second_flag)
 20706  01956A  0101               	movlb	1	; () banked
 20707  01956C  5159               	movf	_Five_Second_flag& (0+255),w,b
 20708  01956E  B4D8               	btfsc	status,2,c
 20709  019570  D00E               	goto	l21986
 20710                           
 20711                           ; BSR set to: 1
 20712                           ;ERROR_HANDLING.c: 111: {
 20713                           ;ERROR_HANDLING.c: 112: Turbine_OverLoaded_Error();
 20714  019572  ECE3  F0D4         	call	_Turbine_OverLoaded_Error	;wreg free
 20715                           
 20716                           ;ERROR_HANDLING.c: 113: Grid_Over_Current();
 20717  019576  ECF7  F0C2         	call	_Grid_Over_Current	;wreg free
 20718                           
 20719                           ;ERROR_HANDLING.c: 114: Grid_UV();
 20720  01957A  ECE5  F0BE         	call	_Grid_UV	;wreg free
 20721                           
 20722                           ;ERROR_HANDLING.c: 115: Grid_OV();
 20723  01957E  EC99  F0BF         	call	_Grid_OV	;wreg free
 20724                           
 20725                           ;ERROR_HANDLING.c: 116: Grid_Frequency();
 20726  019582  EC74  F0D2         	call	_Grid_Frequency	;wreg free
 20727                           
 20728                           ;ERROR_HANDLING.c: 117: Grid_Minimum_Power();
 20729  019586  EC11  F0D5         	call	_Grid_Minimum_Power	;wreg free
 20730                           
 20731                           ;ERROR_HANDLING.c: 118: Grid_Maximum_Power();
 20732  01958A  EC3F  F0D5         	call	_Grid_Maximum_Power	;wreg free
 20733  01958E                     l21986:
 20734                           
 20735                           ;ERROR_HANDLING.c: 119: }
 20736                           ;ERROR_HANDLING.c: 121: }
 20737                           ;ERROR_HANDLING.c: 122: if(Turbine_state == RAMPUP_STATE)
 20738  01958E  0100               	movlb	0	; () banked
 20739  019590  05F0               	decf	_Turbine_state& (0+255),w,b
 20740  019592  A4D8               	btfss	status,2,c
 20741  019594  0012               	return	
 20742                           
 20743                           ; BSR set to: 0
 20744                           ;ERROR_HANDLING.c: 123: {
 20745                           ;ERROR_HANDLING.c: 124: DC_Bus_Voltage();
 20746  019596  EC38  F0C9         	call	_DC_Bus_Voltage	;wreg free
 20747                           
 20748                           ;ERROR_HANDLING.c: 125: Rotor_Slip_Cal();
 20749  01959A  ECF5  F0CE         	call	_Rotor_Slip_Cal	;wreg free
 20750                           
 20751                           ;ERROR_HANDLING.c: 126: Motor_Slip_Cal();
 20752  01959E  ECD4  F0C5         	call	_Motor_Slip_Cal	;wreg free
 20753                           
 20754                           ;ERROR_HANDLING.c: 127: Ramp_Up_Slip();
 20755  0195A2  ECA6  F0CF         	call	_Ramp_Up_Slip	;wreg free
 20756                           
 20757                           ;ERROR_HANDLING.c: 128: Pitch_Feedback();
 20758  0195A6  ECE5  F0D3         	call	_Pitch_Feedback	;wreg free
 20759                           
 20760                           ;ERROR_HANDLING.c: 129: if(Ten_Sec_RampUp_Flag)
 20761  0195AA  0101               	movlb	1	; () banked
 20762  0195AC  5183               	movf	_Ten_Sec_RampUp_Flag& (0+255),w,b
 20763  0195AE  B4D8               	btfsc	status,2,c
 20764  0195B0  D008               	goto	l6140
 20765                           
 20766                           ; BSR set to: 1
 20767                           ;ERROR_HANDLING.c: 130: {
 20768                           ;ERROR_HANDLING.c: 131: Ramp_Up_Slip_Error_Trigger();
 20769  0195B2  EC97  F0C3         	call	_Ramp_Up_Slip_Error_Trigger	;wreg free
 20770                           
 20771                           ;ERROR_HANDLING.c: 132: VFD_Run_Time_Error();
 20772  0195B6  ECE7  F0D5         	call	_VFD_Run_Time_Error	;wreg free
 20773                           
 20774                           ;ERROR_HANDLING.c: 133: Turbine_Over_Speed();
 20775  0195BA  EC6D  F0D5         	call	_Turbine_Over_Speed	;wreg free
 20776                           
 20777                           ;ERROR_HANDLING.c: 134: Grid_Over_Current();
 20778  0195BE  ECF7  F0C2         	call	_Grid_Over_Current	;wreg free
 20779  0195C2                     l6140:
 20780                           
 20781                           ;ERROR_HANDLING.c: 135: }
 20782                           ;ERROR_HANDLING.c: 136: Start_Stop();
 20783  0195C2  ECCF  F0CC         	call	_Start_Stop	;wreg free
 20784                           
 20785                           ;ERROR_HANDLING.c: 137: Communication_Error();
 20786  0195C6  EC4F  F0D4         	call	_Communication_Error	;wreg free
 20787  0195CA  0012               	return	
 20788  0195CC                     __end_of_Error_Checking_One_Second:
 20789                           	opt stack 0
 20790                           tblptru	equ	0xFF8
 20791                           tblptrh	equ	0xFF7
 20792                           tblptrl	equ	0xFF6
 20793                           tablat	equ	0xFF5
 20794                           prodh	equ	0xFF4
 20795                           prodl	equ	0xFF3
 20796                           intcon	equ	0xFF2
 20797                           postinc0	equ	0xFEE
 20798                           wreg	equ	0xFE8
 20799                           postdec1	equ	0xFE5
 20800                           fsr1h	equ	0xFE2
 20801                           fsr1l	equ	0xFE1
 20802                           indf2	equ	0xFDF
 20803                           postinc2	equ	0xFDE
 20804                           postdec2	equ	0xFDD
 20805                           fsr2h	equ	0xFDA
 20806                           fsr2l	equ	0xFD9
 20807                           status	equ	0xFD8
 20808                           
 20809 ;; *************** function _Wind_Speed_Error_Trigger *****************
 20810 ;; Defined at:
 20811 ;;		line 166 in file "ERROR_HANDLING.c"
 20812 ;; Parameters:    Size  Location     Type
 20813 ;;		None
 20814 ;; Auto vars:     Size  Location     Type
 20815 ;;		None
 20816 ;; Return value:  Size  Location     Type
 20817 ;;                  1    wreg      void 
 20818 ;; Registers used:
 20819 ;;		wreg, status,2, status,0, cstack
 20820 ;; Tracked objects:
 20821 ;;		On entry : 0/0
 20822 ;;		On exit  : 0/0
 20823 ;;		Unchanged: 0/0
 20824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20829 ;;Total ram usage:        0 bytes
 20830 ;; Hardware stack levels used:    1
 20831 ;; Hardware stack levels required when called:    4
 20832 ;; This function calls:
 20833 ;;		___ftge
 20834 ;; This function is called by:
 20835 ;;		_Error_Checking_One_Second
 20836 ;; This function uses a non-reentrant model
 20837 ;;
 20838                           
 20839                           	psect	text54
 20840  018864                     __ptext54:
 20841                           	opt stack 0
 20842  018864                     _Wind_Speed_Error_Trigger:
 20843                           	opt stack 24
 20844                           
 20845                           ;ERROR_HANDLING.c: 168: if(Turbine_state == STARTUP_STATE)
 20846                           
 20847                           ;incstack = 0
 20848  018864  0100               	movlb	0	; () banked
 20849  018866  51F0               	movf	_Turbine_state& (0+255),w,b
 20850  018868  A4D8               	btfss	status,2,c
 20851  01886A  D00D               	goto	l6155
 20852                           
 20853                           ; BSR set to: 0
 20854                           ;ERROR_HANDLING.c: 169: {
 20855                           ;ERROR_HANDLING.c: 170: if(Wind_Speed_Avg >= (0))
 20856  01886C  BE0F               	btfsc	_Wind_Speed_Avg+2,7,c
 20857  01886E  D004               	goto	l21098
 20858                           
 20859                           ; BSR set to: 0
 20860                           ;ERROR_HANDLING.c: 171: {
 20861                           ;ERROR_HANDLING.c: 172: Wind_Cut_In_Flag = 1;
 20862  018870  0E01               	movlw	1
 20863  018872  0101               	movlb	1	; () banked
 20864  018874  6F99               	movwf	_Wind_Cut_In_Flag& (0+255),b
 20865                           
 20866                           ;ERROR_HANDLING.c: 173: }
 20867  018876  D007               	goto	l6155
 20868  018878                     l21098:
 20869                           
 20870                           ;ERROR_HANDLING.c: 174: else if(Wind_Speed_Avg < (0))
 20871  018878  AE0F               	btfss	_Wind_Speed_Avg+2,7,c
 20872  01887A  D005               	goto	l6155
 20873                           
 20874                           ;ERROR_HANDLING.c: 175: {
 20875                           ;ERROR_HANDLING.c: 176: Wind_Cut_In_Flag = 0;
 20876  01887C  0E00               	movlw	0
 20877  01887E  0101               	movlb	1	; () banked
 20878  018880  6F99               	movwf	_Wind_Cut_In_Flag& (0+255),b
 20879                           
 20880                           ;ERROR_HANDLING.c: 177: Errors = WS_MIN_MAX;
 20881  018882  0E01               	movlw	1
 20882  018884  6E1B               	movwf	_Errors,c
 20883  018886                     l6155:
 20884                           
 20885                           ;ERROR_HANDLING.c: 178: }
 20886                           ;ERROR_HANDLING.c: 179: }
 20887                           ;ERROR_HANDLING.c: 181: if(Turbine_state == STARTUP_STATE)
 20888  018886  0100               	movlb	0	; () banked
 20889  018888  51F0               	movf	_Turbine_state& (0+255),w,b
 20890  01888A  A4D8               	btfss	status,2,c
 20891  01888C  D03E               	goto	l21114
 20892                           
 20893                           ; BSR set to: 0
 20894                           ;ERROR_HANDLING.c: 182: {
 20895                           ;ERROR_HANDLING.c: 183: if(Wind_Speed_Avg >= (15))
 20896  01888E  C00D  F099         	movff	_Wind_Speed_Avg,___ftge@ff1
 20897  018892  C00E  F09A         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20898  018896  C00F  F09B         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20899  01889A  0E00               	movlw	0
 20900  01889C  0100               	movlb	0	; () banked
 20901  01889E  6F9C               	movwf	___ftge@ff2& (0+255),b
 20902  0188A0  0E70               	movlw	112
 20903  0188A2  0100               	movlb	0	; () banked
 20904  0188A4  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 20905  0188A6  0E41               	movlw	65
 20906  0188A8  0100               	movlb	0	; () banked
 20907  0188AA  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 20908  0188AC  EC4B  F0CB         	call	___ftge	;wreg free
 20909  0188B0  0100               	movlb	0	; () banked
 20910  0188B2  A0D8               	btfss	status,0,c
 20911  0188B4  D010               	goto	l21110
 20912                           
 20913                           ; BSR set to: 0
 20914                           ;ERROR_HANDLING.c: 184: {
 20915                           ;ERROR_HANDLING.c: 185: Wind_Cut_Out_Counter++;
 20916  0188B6  0101               	movlb	1	; () banked
 20917  0188B8  2B9A               	incf	_Wind_Cut_Out_Counter& (0+255),f,b
 20918                           
 20919                           ; BSR set to: 1
 20920                           ;ERROR_HANDLING.c: 186: if(Wind_Cut_Out_Counter >= 1)
 20921  0188BA  0101               	movlb	1	; () banked
 20922  0188BC  519A               	movf	_Wind_Cut_Out_Counter& (0+255),w,b
 20923  0188BE  0101               	movlb	1	; () banked
 20924  0188C0  B4D8               	btfsc	status,2,c
 20925  0188C2  D023               	goto	l21114
 20926                           
 20927                           ; BSR set to: 1
 20928                           ;ERROR_HANDLING.c: 187: {
 20929                           ;ERROR_HANDLING.c: 188: Wind_Cut_Out_Flag = 1;
 20930  0188C4  0E01               	movlw	1
 20931  0188C6  0100               	movlb	0	; () banked
 20932  0188C8  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20933                           
 20934                           ;ERROR_HANDLING.c: 189: Wind_Cut_Out_Counter = 0;
 20935  0188CA  0E00               	movlw	0
 20936  0188CC  0101               	movlb	1	; () banked
 20937  0188CE  6F9A               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20938                           
 20939                           ;ERROR_HANDLING.c: 190: Errors = WS_MIN_MAX;
 20940  0188D0  0E01               	movlw	1
 20941  0188D2  6E1B               	movwf	_Errors,c
 20942                           
 20943                           ; BSR set to: 1
 20944                           ;ERROR_HANDLING.c: 191: }
 20945                           ;ERROR_HANDLING.c: 192: }
 20946  0188D4  D01A               	goto	l21114
 20947  0188D6                     l21110:
 20948                           
 20949                           ;ERROR_HANDLING.c: 193: else if(Wind_Speed_Avg < (15))
 20950  0188D6  C00D  F099         	movff	_Wind_Speed_Avg,___ftge@ff1
 20951  0188DA  C00E  F09A         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20952  0188DE  C00F  F09B         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20953  0188E2  0E00               	movlw	0
 20954  0188E4  0100               	movlb	0	; () banked
 20955  0188E6  6F9C               	movwf	___ftge@ff2& (0+255),b
 20956  0188E8  0E70               	movlw	112
 20957  0188EA  0100               	movlb	0	; () banked
 20958  0188EC  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 20959  0188EE  0E41               	movlw	65
 20960  0188F0  0100               	movlb	0	; () banked
 20961  0188F2  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 20962  0188F4  EC4B  F0CB         	call	___ftge	;wreg free
 20963  0188F8  0100               	movlb	0	; () banked
 20964  0188FA  B0D8               	btfsc	status,0,c
 20965  0188FC  D006               	goto	l21114
 20966                           
 20967                           ; BSR set to: 0
 20968                           ;ERROR_HANDLING.c: 194: {
 20969                           ;ERROR_HANDLING.c: 195: Wind_Cut_Out_Flag = 0;
 20970  0188FE  0E00               	movlw	0
 20971  018900  0100               	movlb	0	; () banked
 20972  018902  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20973                           
 20974                           ;ERROR_HANDLING.c: 196: Wind_Cut_Out_Counter = 0;
 20975  018904  0E00               	movlw	0
 20976  018906  0101               	movlb	1	; () banked
 20977  018908  6F9A               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20978  01890A                     l21114:
 20979                           
 20980                           ;ERROR_HANDLING.c: 197: }
 20981                           ;ERROR_HANDLING.c: 198: }
 20982                           ;ERROR_HANDLING.c: 199: if(Turbine_state == RUNNING_STATE)
 20983  01890A  0E02               	movlw	2
 20984  01890C  0100               	movlb	0	; () banked
 20985  01890E  19F0               	xorwf	_Turbine_state& (0+255),w,b
 20986  018910  A4D8               	btfss	status,2,c
 20987  018912  0012               	return	
 20988                           
 20989                           ; BSR set to: 0
 20990                           ;ERROR_HANDLING.c: 200: {
 20991                           ;ERROR_HANDLING.c: 201: if(Wind_Speed_Avg >= (15))
 20992  018914  C00D  F099         	movff	_Wind_Speed_Avg,___ftge@ff1
 20993  018918  C00E  F09A         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20994  01891C  C00F  F09B         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20995  018920  0E00               	movlw	0
 20996  018922  0100               	movlb	0	; () banked
 20997  018924  6F9C               	movwf	___ftge@ff2& (0+255),b
 20998  018926  0E70               	movlw	112
 20999  018928  0100               	movlb	0	; () banked
 21000  01892A  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 21001  01892C  0E41               	movlw	65
 21002  01892E  0100               	movlb	0	; () banked
 21003  018930  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 21004  018932  EC4B  F0CB         	call	___ftge	;wreg free
 21005  018936  0100               	movlb	0	; () banked
 21006  018938  A0D8               	btfss	status,0,c
 21007  01893A  D00F               	goto	l21124
 21008                           
 21009                           ; BSR set to: 0
 21010                           ;ERROR_HANDLING.c: 202: {
 21011                           ;ERROR_HANDLING.c: 203: Wind_Cut_Out_Counter++;
 21012  01893C  0101               	movlb	1	; () banked
 21013  01893E  2B9A               	incf	_Wind_Cut_Out_Counter& (0+255),f,b
 21014                           
 21015                           ; BSR set to: 1
 21016                           ;ERROR_HANDLING.c: 204: if(Wind_Cut_Out_Counter >= 10)
 21017  018940  0E09               	movlw	9
 21018  018942  0101               	movlb	1	; () banked
 21019  018944  659A               	cpfsgt	_Wind_Cut_Out_Counter& (0+255),b
 21020  018946  0012               	return	
 21021                           
 21022                           ; BSR set to: 1
 21023                           ;ERROR_HANDLING.c: 205: {
 21024                           ;ERROR_HANDLING.c: 206: Wind_Cut_Out_Flag = 1;
 21025  018948  0E01               	movlw	1
 21026  01894A  0100               	movlb	0	; () banked
 21027  01894C  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 21028                           
 21029                           ;ERROR_HANDLING.c: 207: Wind_Cut_Out_Counter = 0;
 21030  01894E  0E00               	movlw	0
 21031  018950  0101               	movlb	1	; () banked
 21032  018952  6F9A               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 21033                           
 21034                           ;ERROR_HANDLING.c: 208: Errors = WS_MIN_MAX;
 21035  018954  0E01               	movlw	1
 21036  018956  6E1B               	movwf	_Errors,c
 21037                           
 21038                           ; BSR set to: 1
 21039                           ;ERROR_HANDLING.c: 209: }
 21040                           ;ERROR_HANDLING.c: 210: }
 21041  018958  0012               	return	
 21042  01895A                     l21124:
 21043                           
 21044                           ;ERROR_HANDLING.c: 211: else if(Wind_Speed_Avg < (15))
 21045  01895A  C00D  F099         	movff	_Wind_Speed_Avg,___ftge@ff1
 21046  01895E  C00E  F09A         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 21047  018962  C00F  F09B         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 21048  018966  0E00               	movlw	0
 21049  018968  0100               	movlb	0	; () banked
 21050  01896A  6F9C               	movwf	___ftge@ff2& (0+255),b
 21051  01896C  0E70               	movlw	112
 21052  01896E  0100               	movlb	0	; () banked
 21053  018970  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 21054  018972  0E41               	movlw	65
 21055  018974  0100               	movlb	0	; () banked
 21056  018976  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 21057  018978  EC4B  F0CB         	call	___ftge	;wreg free
 21058  01897C  0100               	movlb	0	; () banked
 21059  01897E  B0D8               	btfsc	status,0,c
 21060  018980  0012               	return	
 21061                           
 21062                           ; BSR set to: 0
 21063                           ;ERROR_HANDLING.c: 212: {
 21064                           ;ERROR_HANDLING.c: 213: Wind_Cut_Out_Flag = 0;
 21065  018982  0E00               	movlw	0
 21066  018984  0100               	movlb	0	; () banked
 21067  018986  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 21068                           
 21069                           ;ERROR_HANDLING.c: 214: Wind_Cut_Out_Counter = 0;
 21070  018988  0E00               	movlw	0
 21071  01898A  0101               	movlb	1	; () banked
 21072  01898C  6F9A               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 21073                           
 21074                           ; BSR set to: 1
 21075                           
 21076                           ; BSR set to: 1
 21077  01898E  0012               	return	
 21078  018990                     __end_of_Wind_Speed_Error_Trigger:
 21079                           	opt stack 0
 21080                           tblptru	equ	0xFF8
 21081                           tblptrh	equ	0xFF7
 21082                           tblptrl	equ	0xFF6
 21083                           tablat	equ	0xFF5
 21084                           prodh	equ	0xFF4
 21085                           prodl	equ	0xFF3
 21086                           intcon	equ	0xFF2
 21087                           postinc0	equ	0xFEE
 21088                           wreg	equ	0xFE8
 21089                           postdec1	equ	0xFE5
 21090                           fsr1h	equ	0xFE2
 21091                           fsr1l	equ	0xFE1
 21092                           indf2	equ	0xFDF
 21093                           postinc2	equ	0xFDE
 21094                           postdec2	equ	0xFDD
 21095                           fsr2h	equ	0xFDA
 21096                           fsr2l	equ	0xFD9
 21097                           status	equ	0xFD8
 21098                           
 21099 ;; *************** function _VFD_Run_Time_Error *****************
 21100 ;; Defined at:
 21101 ;;		line 613 in file "ERROR_HANDLING.c"
 21102 ;; Parameters:    Size  Location     Type
 21103 ;;		None
 21104 ;; Auto vars:     Size  Location     Type
 21105 ;;		None
 21106 ;; Return value:  Size  Location     Type
 21107 ;;                  1    wreg      void 
 21108 ;; Registers used:
 21109 ;;		wreg, status,2, status,0
 21110 ;; Tracked objects:
 21111 ;;		On entry : 0/0
 21112 ;;		On exit  : 0/0
 21113 ;;		Unchanged: 0/0
 21114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21119 ;;Total ram usage:        0 bytes
 21120 ;; Hardware stack levels used:    1
 21121 ;; Hardware stack levels required when called:    3
 21122 ;; This function calls:
 21123 ;;		Nothing
 21124 ;; This function is called by:
 21125 ;;		_Error_Checking_One_Second
 21126 ;; This function uses a non-reentrant model
 21127 ;;
 21128                           
 21129                           	psect	text55
 21130  01ABCE                     __ptext55:
 21131                           	opt stack 0
 21132  01ABCE                     _VFD_Run_Time_Error:
 21133                           	opt stack 25
 21134                           
 21135                           ;ERROR_HANDLING.c: 615: VFD_Run_Time_Counter++;
 21136                           
 21137                           ;incstack = 0
 21138  01ABCE  0101               	movlb	1	; () banked
 21139  01ABD0  4B40               	infsnz	_VFD_Run_Time_Counter& (0+255),f,b
 21140  01ABD2  2B41               	incf	(_VFD_Run_Time_Counter+1)& (0+255),f,b
 21141                           
 21142                           ; BSR set to: 1
 21143                           ;ERROR_HANDLING.c: 616: if(VFD_Run_Time_Counter >= (300))
 21144  01ABD4  0E2C               	movlw	44
 21145  01ABD6  0101               	movlb	1	; () banked
 21146  01ABD8  5D40               	subwf	_VFD_Run_Time_Counter& (0+255),w,b
 21147  01ABDA  0E01               	movlw	1
 21148  01ABDC  0101               	movlb	1	; () banked
 21149  01ABDE  5941               	subwfb	(_VFD_Run_Time_Counter+1)& (0+255),w,b
 21150  01ABE0  A0D8               	btfss	status,0,c
 21151  01ABE2  D00B               	goto	l21522
 21152                           
 21153                           ; BSR set to: 1
 21154                           ;ERROR_HANDLING.c: 617: {
 21155                           ;ERROR_HANDLING.c: 618: VFD_Run_Time_Counter = 0;
 21156  01ABE4  0E00               	movlw	0
 21157  01ABE6  0101               	movlb	1	; () banked
 21158  01ABE8  6F41               	movwf	(_VFD_Run_Time_Counter+1)& (0+255),b
 21159  01ABEA  0E00               	movlw	0
 21160  01ABEC  6F40               	movwf	_VFD_Run_Time_Counter& (0+255),b
 21161                           
 21162                           ;ERROR_HANDLING.c: 619: VFD__Run_Time_Error = 1;
 21163  01ABEE  0E01               	movlw	1
 21164  01ABF0  0101               	movlb	1	; () banked
 21165  01ABF2  6F96               	movwf	_VFD__Run_Time_Error& (0+255),b
 21166                           
 21167                           ;ERROR_HANDLING.c: 620: Errors = VFD_RUN_TIME;
 21168  01ABF4  0E04               	movlw	4
 21169  01ABF6  6E1B               	movwf	_Errors,c
 21170                           
 21171                           ;ERROR_HANDLING.c: 621: }
 21172  01ABF8  0012               	return	
 21173  01ABFA                     l21522:
 21174                           
 21175                           ; BSR set to: 1
 21176                           ;ERROR_HANDLING.c: 622: else if(VFD_Run_Time_Counter < (300))
 21177  01ABFA  0E2C               	movlw	44
 21178  01ABFC  0101               	movlb	1	; () banked
 21179  01ABFE  5D40               	subwf	_VFD_Run_Time_Counter& (0+255),w,b
 21180  01AC00  0E01               	movlw	1
 21181  01AC02  0101               	movlb	1	; () banked
 21182  01AC04  5941               	subwfb	(_VFD_Run_Time_Counter+1)& (0+255),w,b
 21183  01AC06  B0D8               	btfsc	status,0,c
 21184  01AC08  0012               	return	
 21185                           
 21186                           ; BSR set to: 1
 21187                           ;ERROR_HANDLING.c: 623: {
 21188                           ;ERROR_HANDLING.c: 624: VFD__Run_Time_Error = 0;
 21189  01AC0A  0E00               	movlw	0
 21190  01AC0C  0101               	movlb	1	; () banked
 21191  01AC0E  6F96               	movwf	_VFD__Run_Time_Error& (0+255),b
 21192                           
 21193                           ; BSR set to: 1
 21194  01AC10  0012               	return	
 21195  01AC12                     __end_of_VFD_Run_Time_Error:
 21196                           	opt stack 0
 21197                           tblptru	equ	0xFF8
 21198                           tblptrh	equ	0xFF7
 21199                           tblptrl	equ	0xFF6
 21200                           tablat	equ	0xFF5
 21201                           prodh	equ	0xFF4
 21202                           prodl	equ	0xFF3
 21203                           intcon	equ	0xFF2
 21204                           postinc0	equ	0xFEE
 21205                           wreg	equ	0xFE8
 21206                           postdec1	equ	0xFE5
 21207                           fsr1h	equ	0xFE2
 21208                           fsr1l	equ	0xFE1
 21209                           indf2	equ	0xFDF
 21210                           postinc2	equ	0xFDE
 21211                           postdec2	equ	0xFDD
 21212                           fsr2h	equ	0xFDA
 21213                           fsr2l	equ	0xFD9
 21214                           status	equ	0xFD8
 21215                           
 21216 ;; *************** function _VFD_PS_ON_Function *****************
 21217 ;; Defined at:
 21218 ;;		line 114 in file "RAMP_UP.c"
 21219 ;; Parameters:    Size  Location     Type
 21220 ;;		None
 21221 ;; Auto vars:     Size  Location     Type
 21222 ;;		None
 21223 ;; Return value:  Size  Location     Type
 21224 ;;                  1    wreg      void 
 21225 ;; Registers used:
 21226 ;;		wreg, status,2, status,0
 21227 ;; Tracked objects:
 21228 ;;		On entry : 0/0
 21229 ;;		On exit  : 0/0
 21230 ;;		Unchanged: 0/0
 21231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21236 ;;Total ram usage:        0 bytes
 21237 ;; Hardware stack levels used:    1
 21238 ;; Hardware stack levels required when called:    3
 21239 ;; This function calls:
 21240 ;;		Nothing
 21241 ;; This function is called by:
 21242 ;;		_Error_Checking_One_Second
 21243 ;; This function uses a non-reentrant model
 21244 ;;
 21245                           
 21246                           	psect	text56
 21247  01A6E4                     __ptext56:
 21248                           	opt stack 0
 21249  01A6E4                     _VFD_PS_ON_Function:
 21250                           	opt stack 25
 21251                           
 21252                           ;RAMP_UP.c: 116: if( (Initial_Delay_Second >= ((120) - 20)) && (Turbine_state == STARTUP
      +                          _STATE) )
 21253                           
 21254                           ; BSR set to: 1
 21255                           ;incstack = 0
 21256  01A6E4  0101               	movlb	1	; () banked
 21257  01A6E6  512B               	movf	(_Initial_Delay_Second+1)& (0+255),w,b
 21258  01A6E8  E105               	bnz	u15400
 21259  01A6EA  0E64               	movlw	100
 21260  01A6EC  0101               	movlb	1	; () banked
 21261  01A6EE  5D2A               	subwf	_Initial_Delay_Second& (0+255),w,b
 21262  01A6F0  A0D8               	btfss	status,0,c
 21263  01A6F2  D007               	goto	l21136
 21264  01A6F4                     u15400:
 21265                           
 21266                           ; BSR set to: 1
 21267  01A6F4  0100               	movlb	0	; () banked
 21268  01A6F6  51F0               	movf	_Turbine_state& (0+255),w,b
 21269  01A6F8  A4D8               	btfss	status,2,c
 21270  01A6FA  D003               	goto	l21136
 21271                           
 21272                           ; BSR set to: 0
 21273                           ;RAMP_UP.c: 117: {
 21274                           ;RAMP_UP.c: 118: (RB4 = 1); VFD_ON_Flag = 1;
 21275  01A6FC  8881               	bsf	3969,4,c	;volatile
 21276                           
 21277                           ; BSR set to: 0
 21278  01A6FE  0E01               	movlw	1
 21279  01A700  D016               	goto	L12
 21280  01A702                     l21136:
 21281                           
 21282                           ;RAMP_UP.c: 120: else if( (Initial_Delay_Second < ((120) - 20)) && (Turbine_state == STA
      +                          RTUP_STATE) && (VFD_Bus_Voltage < 50) )
 21283  01A702  0101               	movlb	1	; () banked
 21284  01A704  512B               	movf	(_Initial_Delay_Second+1)& (0+255),w,b
 21285  01A706  E115               	bnz	l21146
 21286  01A708  0E64               	movlw	100
 21287  01A70A  0101               	movlb	1	; () banked
 21288  01A70C  5D2A               	subwf	_Initial_Delay_Second& (0+255),w,b
 21289  01A70E  B0D8               	btfsc	status,0,c
 21290  01A710  D010               	goto	l21146
 21291                           
 21292                           ; BSR set to: 1
 21293  01A712  0100               	movlb	0	; () banked
 21294  01A714  51F0               	movf	_Turbine_state& (0+255),w,b
 21295  01A716  A4D8               	btfss	status,2,c
 21296  01A718  D00C               	goto	l21146
 21297                           
 21298                           ; BSR set to: 0
 21299  01A71A  0101               	movlb	1	; () banked
 21300  01A71C  513F               	movf	(_VFD_Bus_Voltage+1)& (0+255),w,b
 21301  01A71E  E109               	bnz	l21146
 21302  01A720  0E32               	movlw	50
 21303  01A722  0101               	movlb	1	; () banked
 21304  01A724  5D3E               	subwf	_VFD_Bus_Voltage& (0+255),w,b
 21305  01A726  B0D8               	btfsc	status,0,c
 21306  01A728  D004               	goto	l21146
 21307                           
 21308                           ; BSR set to: 1
 21309                           ;RAMP_UP.c: 121: {
 21310                           ;RAMP_UP.c: 122: (RB4 = 0); VFD_ON_Flag = 0;
 21311  01A72A  9881               	bcf	3969,4,c	;volatile
 21312                           
 21313                           ; BSR set to: 1
 21314  01A72C  0E00               	movlw	0
 21315  01A72E                     L12:
 21316  01A72E  0101               	movlb	1	; () banked
 21317  01A730  6F93               	movwf	_VFD_ON_Flag& (0+255),b
 21318  01A732                     l21146:
 21319                           
 21320                           ;RAMP_UP.c: 123: }
 21321                           ;RAMP_UP.c: 125: if( (VFD_Bus_Voltage < 50) && (Turbine_state == RUNNING_STATE) )
 21322  01A732  0101               	movlb	1	; () banked
 21323  01A734  513F               	movf	(_VFD_Bus_Voltage+1)& (0+255),w,b
 21324  01A736  E10F               	bnz	l7036
 21325  01A738  0E32               	movlw	50
 21326  01A73A  0101               	movlb	1	; () banked
 21327  01A73C  5D3E               	subwf	_VFD_Bus_Voltage& (0+255),w,b
 21328  01A73E  B0D8               	btfsc	status,0,c
 21329  01A740  0012               	return	
 21330                           
 21331                           ; BSR set to: 1
 21332  01A742  0E02               	movlw	2
 21333  01A744  0100               	movlb	0	; () banked
 21334  01A746  19F0               	xorwf	_Turbine_state& (0+255),w,b
 21335  01A748  A4D8               	btfss	status,2,c
 21336  01A74A  0012               	return	
 21337                           
 21338                           ; BSR set to: 0
 21339                           ;RAMP_UP.c: 126: {
 21340                           ;RAMP_UP.c: 127: (RB4 = 0); VFD_ON_Flag = 0;
 21341  01A74C  9881               	bcf	3969,4,c	;volatile
 21342                           
 21343                           ; BSR set to: 0
 21344  01A74E  0E00               	movlw	0
 21345  01A750  0101               	movlb	1	; () banked
 21346  01A752  6F93               	movwf	_VFD_ON_Flag& (0+255),b
 21347  01A754  0012               	return	
 21348  01A756                     l7036:
 21349  01A756  0012               	return		;funcret
 21350  01A758                     __end_of_VFD_PS_ON_Function:
 21351                           	opt stack 0
 21352                           tblptru	equ	0xFF8
 21353                           tblptrh	equ	0xFF7
 21354                           tblptrl	equ	0xFF6
 21355                           tablat	equ	0xFF5
 21356                           prodh	equ	0xFF4
 21357                           prodl	equ	0xFF3
 21358                           intcon	equ	0xFF2
 21359                           postinc0	equ	0xFEE
 21360                           wreg	equ	0xFE8
 21361                           postdec1	equ	0xFE5
 21362                           fsr1h	equ	0xFE2
 21363                           fsr1l	equ	0xFE1
 21364                           indf2	equ	0xFDF
 21365                           postinc2	equ	0xFDE
 21366                           postdec2	equ	0xFDD
 21367                           fsr2h	equ	0xFDA
 21368                           fsr2l	equ	0xFD9
 21369                           status	equ	0xFD8
 21370                           
 21371 ;; *************** function _Turbine_Under_speed *****************
 21372 ;; Defined at:
 21373 ;;		line 337 in file "ERROR_HANDLING.c"
 21374 ;; Parameters:    Size  Location     Type
 21375 ;;		None
 21376 ;; Auto vars:     Size  Location     Type
 21377 ;;		None
 21378 ;; Return value:  Size  Location     Type
 21379 ;;                  1    wreg      void 
 21380 ;; Registers used:
 21381 ;;		wreg, status,2, status,0, cstack
 21382 ;; Tracked objects:
 21383 ;;		On entry : 0/0
 21384 ;;		On exit  : 0/0
 21385 ;;		Unchanged: 0/0
 21386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21391 ;;Total ram usage:        0 bytes
 21392 ;; Hardware stack levels used:    1
 21393 ;; Hardware stack levels required when called:    4
 21394 ;; This function calls:
 21395 ;;		___ftge
 21396 ;; This function is called by:
 21397 ;;		_Error_Checking_One_Second
 21398 ;; This function uses a non-reentrant model
 21399 ;;
 21400                           
 21401                           	psect	text57
 21402  01A96A                     __ptext57:
 21403                           	opt stack 0
 21404  01A96A                     _Turbine_Under_speed:
 21405                           	opt stack 24
 21406                           
 21407                           ;ERROR_HANDLING.c: 339: if(Turbine_RPM < (47))
 21408                           
 21409                           ;incstack = 0
 21410  01A96A  C00A  F099         	movff	_Turbine_RPM,___ftge@ff1
 21411  01A96E  C00B  F09A         	movff	_Turbine_RPM+1,___ftge@ff1+1
 21412  01A972  C00C  F09B         	movff	_Turbine_RPM+2,___ftge@ff1+2
 21413  01A976  0E00               	movlw	0
 21414  01A978  0100               	movlb	0	; () banked
 21415  01A97A  6F9C               	movwf	___ftge@ff2& (0+255),b
 21416  01A97C  0E3C               	movlw	60
 21417  01A97E  0100               	movlb	0	; () banked
 21418  01A980  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 21419  01A982  0E42               	movlw	66
 21420  01A984  0100               	movlb	0	; () banked
 21421  01A986  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 21422  01A988  EC4B  F0CB         	call	___ftge	;wreg free
 21423  01A98C  0100               	movlb	0	; () banked
 21424  01A98E  B0D8               	btfsc	status,0,c
 21425  01A990  D013               	goto	l21362
 21426                           
 21427                           ; BSR set to: 0
 21428                           ;ERROR_HANDLING.c: 340: {
 21429                           ;ERROR_HANDLING.c: 341: TRPM_Under_Speed_Counter++;
 21430  01A992  0101               	movlb	1	; () banked
 21431  01A994  2B80               	incf	_TRPM_Under_Speed_Counter& (0+255),f,b
 21432                           
 21433                           ; BSR set to: 1
 21434                           ;ERROR_HANDLING.c: 342: if(TRPM_Under_Speed_Counter >= 10)
 21435  01A996  0E09               	movlw	9
 21436  01A998  0101               	movlb	1	; () banked
 21437  01A99A  6580               	cpfsgt	_TRPM_Under_Speed_Counter& (0+255),b
 21438  01A99C  D009               	goto	l21360
 21439                           
 21440                           ; BSR set to: 1
 21441                           ;ERROR_HANDLING.c: 343: {
 21442                           ;ERROR_HANDLING.c: 344: TRPM_Under_Speed_Counter = 0;
 21443  01A99E  0E00               	movlw	0
 21444  01A9A0  0101               	movlb	1	; () banked
 21445  01A9A2  6F80               	movwf	_TRPM_Under_Speed_Counter& (0+255),b
 21446                           
 21447                           ;ERROR_HANDLING.c: 345: Turbine_Under_Speed_Flag = 1;
 21448  01A9A4  0E01               	movlw	1
 21449  01A9A6  0101               	movlb	1	; () banked
 21450  01A9A8  6F8A               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 21451                           
 21452                           ;ERROR_HANDLING.c: 346: Errors = TURBINE_US_OS;
 21453  01A9AA  0E0A               	movlw	10
 21454  01A9AC  6E1B               	movwf	_Errors,c
 21455                           
 21456                           ;ERROR_HANDLING.c: 347: }
 21457  01A9AE  0012               	return	
 21458  01A9B0                     l21360:
 21459                           
 21460                           ; BSR set to: 1
 21461                           ;ERROR_HANDLING.c: 348: else
 21462                           ;ERROR_HANDLING.c: 349: {
 21463                           ;ERROR_HANDLING.c: 350: Turbine_Under_Speed_Flag = 0;
 21464  01A9B0  0E00               	movlw	0
 21465  01A9B2  0101               	movlb	1	; () banked
 21466  01A9B4  6F8A               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 21467                           
 21468                           ; BSR set to: 1
 21469                           ;ERROR_HANDLING.c: 351: }
 21470                           ;ERROR_HANDLING.c: 352: }
 21471  01A9B6  0012               	return	
 21472  01A9B8                     l21362:
 21473                           
 21474                           ;ERROR_HANDLING.c: 353: else
 21475                           ;ERROR_HANDLING.c: 354: {
 21476                           ;ERROR_HANDLING.c: 355: TRPM_Under_Speed_Counter = 0;
 21477  01A9B8  0E00               	movlw	0
 21478  01A9BA  0101               	movlb	1	; () banked
 21479  01A9BC  6F80               	movwf	_TRPM_Under_Speed_Counter& (0+255),b
 21480                           
 21481                           ;ERROR_HANDLING.c: 356: Turbine_Under_Speed_Flag = 0;
 21482  01A9BE  0E00               	movlw	0
 21483  01A9C0  0101               	movlb	1	; () banked
 21484  01A9C2  6F8A               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 21485  01A9C4  0012               	return	
 21486  01A9C6                     __end_of_Turbine_Under_speed:
 21487                           	opt stack 0
 21488                           tblptru	equ	0xFF8
 21489                           tblptrh	equ	0xFF7
 21490                           tblptrl	equ	0xFF6
 21491                           tablat	equ	0xFF5
 21492                           prodh	equ	0xFF4
 21493                           prodl	equ	0xFF3
 21494                           intcon	equ	0xFF2
 21495                           postinc0	equ	0xFEE
 21496                           wreg	equ	0xFE8
 21497                           postdec1	equ	0xFE5
 21498                           fsr1h	equ	0xFE2
 21499                           fsr1l	equ	0xFE1
 21500                           indf2	equ	0xFDF
 21501                           postinc2	equ	0xFDE
 21502                           postdec2	equ	0xFDD
 21503                           fsr2h	equ	0xFDA
 21504                           fsr2l	equ	0xFD9
 21505                           status	equ	0xFD8
 21506                           
 21507 ;; *************** function _Turbine_Restore_Check *****************
 21508 ;; Defined at:
 21509 ;;		line 153 in file "ERROR_HANDLING.c"
 21510 ;; Parameters:    Size  Location     Type
 21511 ;;		None
 21512 ;; Auto vars:     Size  Location     Type
 21513 ;;		None
 21514 ;; Return value:  Size  Location     Type
 21515 ;;                  1    wreg      void 
 21516 ;; Registers used:
 21517 ;;		wreg, status,2, status,0, cstack
 21518 ;; Tracked objects:
 21519 ;;		On entry : 0/0
 21520 ;;		On exit  : 0/0
 21521 ;;		Unchanged: 0/0
 21522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21527 ;;Total ram usage:        0 bytes
 21528 ;; Hardware stack levels used:    1
 21529 ;; Hardware stack levels required when called:    4
 21530 ;; This function calls:
 21531 ;;		___ftge
 21532 ;; This function is called by:
 21533 ;;		_Error_Checking_One_Second
 21534 ;; This function uses a non-reentrant model
 21535 ;;
 21536                           
 21537                           	psect	text58
 21538  019D38                     __ptext58:
 21539                           	opt stack 0
 21540  019D38                     _Turbine_Restore_Check:
 21541                           	opt stack 24
 21542                           
 21543                           ;ERROR_HANDLING.c: 155: if(Turbine_RPM > 5 || Generator_RPM_FLT > 100)
 21544                           
 21545                           ; BSR set to: 1
 21546                           ;incstack = 0
 21547  019D38  0E00               	movlw	0
 21548  019D3A  0100               	movlb	0	; () banked
 21549  019D3C  6F99               	movwf	___ftge@ff1& (0+255),b
 21550  019D3E  0EA0               	movlw	160
 21551  019D40  0100               	movlb	0	; () banked
 21552  019D42  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21553  019D44  0E40               	movlw	64
 21554  019D46  0100               	movlb	0	; () banked
 21555  019D48  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21556  019D4A  C00A  F09C         	movff	_Turbine_RPM,___ftge@ff2
 21557  019D4E  C00B  F09D         	movff	_Turbine_RPM+1,___ftge@ff2+1
 21558  019D52  C00C  F09E         	movff	_Turbine_RPM+2,___ftge@ff2+2
 21559  019D56  EC4B  F0CB         	call	___ftge	;wreg free
 21560  019D5A  0100               	movlb	0	; () banked
 21561  019D5C  A0D8               	btfss	status,0,c
 21562  019D5E  D014               	goto	l21300
 21563                           
 21564                           ; BSR set to: 0
 21565  019D60  0E00               	movlw	0
 21566  019D62  0100               	movlb	0	; () banked
 21567  019D64  6F99               	movwf	___ftge@ff1& (0+255),b
 21568  019D66  0EC8               	movlw	200
 21569  019D68  0100               	movlb	0	; () banked
 21570  019D6A  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21571  019D6C  0E42               	movlw	66
 21572  019D6E  0100               	movlb	0	; () banked
 21573  019D70  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21574  019D72  C004  F09C         	movff	_Generator_RPM_FLT,___ftge@ff2
 21575  019D76  C005  F09D         	movff	_Generator_RPM_FLT+1,___ftge@ff2+1
 21576  019D7A  C006  F09E         	movff	_Generator_RPM_FLT+2,___ftge@ff2+2
 21577  019D7E  EC4B  F0CB         	call	___ftge	;wreg free
 21578  019D82  0100               	movlb	0	; () banked
 21579  019D84  B0D8               	btfsc	status,0,c
 21580  019D86  D005               	goto	l21302
 21581  019D88                     l21300:
 21582                           
 21583                           ; BSR set to: 0
 21584                           ;ERROR_HANDLING.c: 156: {
 21585                           ;ERROR_HANDLING.c: 157: Turbine_Restore_Error = 1;
 21586  019D88  0E01               	movlw	1
 21587  019D8A  0101               	movlb	1	; () banked
 21588  019D8C  6F89               	movwf	_Turbine_Restore_Error& (0+255),b
 21589                           
 21590                           ;ERROR_HANDLING.c: 158: Errors = TURBINE_NR;
 21591  019D8E  0E17               	movlw	23
 21592  019D90  6E1B               	movwf	_Errors,c
 21593  019D92                     l21302:
 21594                           
 21595                           ;ERROR_HANDLING.c: 159: }
 21596                           ;ERROR_HANDLING.c: 160: if(Turbine_RPM <= 5 && Generator_RPM_FLT <= 100)
 21597  019D92  0E00               	movlw	0
 21598  019D94  0100               	movlb	0	; () banked
 21599  019D96  6F99               	movwf	___ftge@ff1& (0+255),b
 21600  019D98  0EA0               	movlw	160
 21601  019D9A  0100               	movlb	0	; () banked
 21602  019D9C  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21603  019D9E  0E40               	movlw	64
 21604  019DA0  0100               	movlb	0	; () banked
 21605  019DA2  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21606  019DA4  C00A  F09C         	movff	_Turbine_RPM,___ftge@ff2
 21607  019DA8  C00B  F09D         	movff	_Turbine_RPM+1,___ftge@ff2+1
 21608  019DAC  C00C  F09E         	movff	_Turbine_RPM+2,___ftge@ff2+2
 21609  019DB0  EC4B  F0CB         	call	___ftge	;wreg free
 21610  019DB4  0100               	movlb	0	; () banked
 21611  019DB6  A0D8               	btfss	status,0,c
 21612  019DB8  0012               	return	
 21613                           
 21614                           ; BSR set to: 0
 21615  019DBA  0E00               	movlw	0
 21616  019DBC  0100               	movlb	0	; () banked
 21617  019DBE  6F99               	movwf	___ftge@ff1& (0+255),b
 21618  019DC0  0EC8               	movlw	200
 21619  019DC2  0100               	movlb	0	; () banked
 21620  019DC4  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21621  019DC6  0E42               	movlw	66
 21622  019DC8  0100               	movlb	0	; () banked
 21623  019DCA  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21624  019DCC  C004  F09C         	movff	_Generator_RPM_FLT,___ftge@ff2
 21625  019DD0  C005  F09D         	movff	_Generator_RPM_FLT+1,___ftge@ff2+1
 21626  019DD4  C006  F09E         	movff	_Generator_RPM_FLT+2,___ftge@ff2+2
 21627  019DD8  EC4B  F0CB         	call	___ftge	;wreg free
 21628  019DDC  0100               	movlb	0	; () banked
 21629  019DDE  A0D8               	btfss	status,0,c
 21630  019DE0  0012               	return	
 21631                           
 21632                           ; BSR set to: 0
 21633                           ;ERROR_HANDLING.c: 161: {
 21634                           ;ERROR_HANDLING.c: 162: Turbine_Restore_Error = 0;
 21635  019DE2  0E00               	movlw	0
 21636  019DE4  0101               	movlb	1	; () banked
 21637  019DE6  6F89               	movwf	_Turbine_Restore_Error& (0+255),b
 21638  019DE8  0012               	return	
 21639  019DEA                     __end_of_Turbine_Restore_Check:
 21640                           	opt stack 0
 21641                           tblptru	equ	0xFF8
 21642                           tblptrh	equ	0xFF7
 21643                           tblptrl	equ	0xFF6
 21644                           tablat	equ	0xFF5
 21645                           prodh	equ	0xFF4
 21646                           prodl	equ	0xFF3
 21647                           intcon	equ	0xFF2
 21648                           postinc0	equ	0xFEE
 21649                           wreg	equ	0xFE8
 21650                           postdec1	equ	0xFE5
 21651                           fsr1h	equ	0xFE2
 21652                           fsr1l	equ	0xFE1
 21653                           indf2	equ	0xFDF
 21654                           postinc2	equ	0xFDE
 21655                           postdec2	equ	0xFDD
 21656                           fsr2h	equ	0xFDA
 21657                           fsr2l	equ	0xFD9
 21658                           status	equ	0xFD8
 21659                           
 21660 ;; *************** function _Turbine_Over_Speed *****************
 21661 ;; Defined at:
 21662 ;;		line 318 in file "ERROR_HANDLING.c"
 21663 ;; Parameters:    Size  Location     Type
 21664 ;;		None
 21665 ;; Auto vars:     Size  Location     Type
 21666 ;;		None
 21667 ;; Return value:  Size  Location     Type
 21668 ;;                  1    wreg      void 
 21669 ;; Registers used:
 21670 ;;		wreg, status,2, status,0, cstack
 21671 ;; Tracked objects:
 21672 ;;		On entry : 0/0
 21673 ;;		On exit  : 0/0
 21674 ;;		Unchanged: 0/0
 21675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21680 ;;Total ram usage:        0 bytes
 21681 ;; Hardware stack levels used:    1
 21682 ;; Hardware stack levels required when called:    4
 21683 ;; This function calls:
 21684 ;;		___ftge
 21685 ;; This function is called by:
 21686 ;;		_Error_Checking_One_Second
 21687 ;; This function uses a non-reentrant model
 21688 ;;
 21689                           
 21690                           	psect	text59
 21691  01AADA                     __ptext59:
 21692                           	opt stack 0
 21693  01AADA                     _Turbine_Over_Speed:
 21694                           	opt stack 24
 21695                           
 21696                           ;ERROR_HANDLING.c: 320: if(Turbine_RPM >= (63))
 21697                           
 21698                           ;incstack = 0
 21699  01AADA  C00A  F099         	movff	_Turbine_RPM,___ftge@ff1
 21700  01AADE  C00B  F09A         	movff	_Turbine_RPM+1,___ftge@ff1+1
 21701  01AAE2  C00C  F09B         	movff	_Turbine_RPM+2,___ftge@ff1+2
 21702  01AAE6  0E00               	movlw	0
 21703  01AAE8  0100               	movlb	0	; () banked
 21704  01AAEA  6F9C               	movwf	___ftge@ff2& (0+255),b
 21705  01AAEC  0E7C               	movlw	124
 21706  01AAEE  0100               	movlb	0	; () banked
 21707  01AAF0  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 21708  01AAF2  0E42               	movlw	66
 21709  01AAF4  0100               	movlb	0	; () banked
 21710  01AAF6  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 21711  01AAF8  EC4B  F0CB         	call	___ftge	;wreg free
 21712  01AAFC  0100               	movlb	0	; () banked
 21713  01AAFE  A0D8               	btfss	status,0,c
 21714  01AB00  D00F               	goto	l21434
 21715                           
 21716                           ; BSR set to: 0
 21717                           ;ERROR_HANDLING.c: 321: {
 21718                           ;ERROR_HANDLING.c: 322: TRPM_OverSpeed_Counter++;
 21719  01AB02  0101               	movlb	1	; () banked
 21720  01AB04  2B7F               	incf	_TRPM_OverSpeed_Counter& (0+255),f,b
 21721                           
 21722                           ; BSR set to: 1
 21723                           ;ERROR_HANDLING.c: 323: if(TRPM_OverSpeed_Counter >= 2)
 21724  01AB06  0E01               	movlw	1
 21725  01AB08  0101               	movlb	1	; () banked
 21726  01AB0A  657F               	cpfsgt	_TRPM_OverSpeed_Counter& (0+255),b
 21727  01AB0C  0012               	return	
 21728                           
 21729                           ; BSR set to: 1
 21730                           ;ERROR_HANDLING.c: 324: {
 21731                           ;ERROR_HANDLING.c: 325: TRPM_OverSpeed_Counter = 0;
 21732  01AB0E  0E00               	movlw	0
 21733  01AB10  0101               	movlb	1	; () banked
 21734  01AB12  6F7F               	movwf	_TRPM_OverSpeed_Counter& (0+255),b
 21735                           
 21736                           ;ERROR_HANDLING.c: 326: Turbine_Over_Speed_Flag = 1;
 21737  01AB14  0E01               	movlw	1
 21738  01AB16  0100               	movlb	0	; () banked
 21739  01AB18  6FEF               	movwf	_Turbine_Over_Speed_Flag& (0+255),b
 21740                           
 21741                           ;ERROR_HANDLING.c: 327: Errors = TURBINE_US_OS;
 21742  01AB1A  0E0A               	movlw	10
 21743  01AB1C  6E1B               	movwf	_Errors,c
 21744                           
 21745                           ; BSR set to: 0
 21746                           ;ERROR_HANDLING.c: 328: }
 21747                           ;ERROR_HANDLING.c: 330: }
 21748  01AB1E  0012               	return	
 21749  01AB20                     l21434:
 21750                           
 21751                           ; BSR set to: 0
 21752                           ;ERROR_HANDLING.c: 331: else
 21753                           ;ERROR_HANDLING.c: 332: {
 21754                           ;ERROR_HANDLING.c: 333: Turbine_Over_Speed_Flag = 0;
 21755  01AB20  0E00               	movlw	0
 21756  01AB22  0100               	movlb	0	; () banked
 21757  01AB24  6FEF               	movwf	_Turbine_Over_Speed_Flag& (0+255),b
 21758                           
 21759                           ;ERROR_HANDLING.c: 334: TRPM_OverSpeed_Counter = 0;
 21760  01AB26  0E00               	movlw	0
 21761  01AB28  0101               	movlb	1	; () banked
 21762  01AB2A  6F7F               	movwf	_TRPM_OverSpeed_Counter& (0+255),b
 21763  01AB2C  0012               	return	
 21764  01AB2E                     __end_of_Turbine_Over_Speed:
 21765                           	opt stack 0
 21766                           tblptru	equ	0xFF8
 21767                           tblptrh	equ	0xFF7
 21768                           tblptrl	equ	0xFF6
 21769                           tablat	equ	0xFF5
 21770                           prodh	equ	0xFF4
 21771                           prodl	equ	0xFF3
 21772                           intcon	equ	0xFF2
 21773                           postinc0	equ	0xFEE
 21774                           wreg	equ	0xFE8
 21775                           postdec1	equ	0xFE5
 21776                           fsr1h	equ	0xFE2
 21777                           fsr1l	equ	0xFE1
 21778                           indf2	equ	0xFDF
 21779                           postinc2	equ	0xFDE
 21780                           postdec2	equ	0xFDD
 21781                           fsr2h	equ	0xFDA
 21782                           fsr2l	equ	0xFD9
 21783                           status	equ	0xFD8
 21784                           
 21785 ;; *************** function _Turbine_OverLoaded_Error *****************
 21786 ;; Defined at:
 21787 ;;		line 481 in file "ERROR_HANDLING.c"
 21788 ;; Parameters:    Size  Location     Type
 21789 ;;		None
 21790 ;; Auto vars:     Size  Location     Type
 21791 ;;		None
 21792 ;; Return value:  Size  Location     Type
 21793 ;;                  1    wreg      void 
 21794 ;; Registers used:
 21795 ;;		wreg, status,2, status,0, cstack
 21796 ;; Tracked objects:
 21797 ;;		On entry : 0/0
 21798 ;;		On exit  : 0/0
 21799 ;;		Unchanged: 0/0
 21800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21805 ;;Total ram usage:        0 bytes
 21806 ;; Hardware stack levels used:    1
 21807 ;; Hardware stack levels required when called:    4
 21808 ;; This function calls:
 21809 ;;		___ftge
 21810 ;; This function is called by:
 21811 ;;		_Error_Checking_One_Second
 21812 ;; This function uses a non-reentrant model
 21813 ;;
 21814                           
 21815                           	psect	text60
 21816  01A9C6                     __ptext60:
 21817                           	opt stack 0
 21818  01A9C6                     _Turbine_OverLoaded_Error:
 21819                           	opt stack 24
 21820                           
 21821                           ;ERROR_HANDLING.c: 483: if(KW <= (-5.0))
 21822                           
 21823                           ;incstack = 0
 21824  01A9C6  0E00               	movlw	0
 21825  01A9C8  0100               	movlb	0	; () banked
 21826  01A9CA  6F99               	movwf	___ftge@ff1& (0+255),b
 21827  01A9CC  0EA0               	movlw	160
 21828  01A9CE  0100               	movlb	0	; () banked
 21829  01A9D0  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21830  01A9D2  0EC0               	movlw	192
 21831  01A9D4  0100               	movlb	0	; () banked
 21832  01A9D6  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21833  01A9D8  C022  F09C         	movff	_KW,___ftge@ff2
 21834  01A9DC  C023  F09D         	movff	_KW+1,___ftge@ff2+1
 21835  01A9E0  C024  F09E         	movff	_KW+2,___ftge@ff2+2
 21836  01A9E4  EC4B  F0CB         	call	___ftge	;wreg free
 21837  01A9E8  0100               	movlb	0	; () banked
 21838  01A9EA  A0D8               	btfss	status,0,c
 21839  01A9EC  D013               	goto	l21446
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;ERROR_HANDLING.c: 484: {
 21843                           ;ERROR_HANDLING.c: 485: T_Overload_counter++;
 21844  01A9EE  0101               	movlb	1	; () banked
 21845  01A9F0  2B81               	incf	_T_Overload_counter& (0+255),f,b
 21846                           
 21847                           ; BSR set to: 1
 21848                           ;ERROR_HANDLING.c: 486: if(T_Overload_counter >=3 )
 21849  01A9F2  0E02               	movlw	2
 21850  01A9F4  0101               	movlb	1	; () banked
 21851  01A9F6  6581               	cpfsgt	_T_Overload_counter& (0+255),b
 21852  01A9F8  D009               	goto	l21444
 21853                           
 21854                           ; BSR set to: 1
 21855                           ;ERROR_HANDLING.c: 487: {
 21856                           ;ERROR_HANDLING.c: 488: T_Overload_counter = 0;
 21857  01A9FA  0E00               	movlw	0
 21858  01A9FC  0101               	movlb	1	; () banked
 21859  01A9FE  6F81               	movwf	_T_Overload_counter& (0+255),b
 21860                           
 21861                           ;ERROR_HANDLING.c: 489: Tur_OverLoaded_Error = 1;
 21862  01AA00  0E01               	movlw	1
 21863  01AA02  0101               	movlb	1	; () banked
 21864  01AA04  6F88               	movwf	_Tur_OverLoaded_Error& (0+255),b
 21865                           
 21866                           ;ERROR_HANDLING.c: 490: Errors = TURBINE_OL;
 21867  01AA06  0E12               	movlw	18
 21868  01AA08  6E1B               	movwf	_Errors,c
 21869                           
 21870                           ;ERROR_HANDLING.c: 491: }
 21871  01AA0A  0012               	return	
 21872  01AA0C                     l21444:
 21873                           
 21874                           ; BSR set to: 1
 21875                           ;ERROR_HANDLING.c: 492: else
 21876                           ;ERROR_HANDLING.c: 493: {
 21877                           ;ERROR_HANDLING.c: 494: Tur_OverLoaded_Error = 0;
 21878  01AA0C  0E00               	movlw	0
 21879  01AA0E  0101               	movlb	1	; () banked
 21880  01AA10  6F88               	movwf	_Tur_OverLoaded_Error& (0+255),b
 21881                           
 21882                           ; BSR set to: 1
 21883                           ;ERROR_HANDLING.c: 495: }
 21884                           ;ERROR_HANDLING.c: 496: }
 21885  01AA12  0012               	return	
 21886  01AA14                     l21446:
 21887                           
 21888                           ;ERROR_HANDLING.c: 497: else
 21889                           ;ERROR_HANDLING.c: 498: {
 21890                           ;ERROR_HANDLING.c: 499: Tur_OverLoaded_Error = 0;
 21891  01AA14  0E00               	movlw	0
 21892  01AA16  0101               	movlb	1	; () banked
 21893  01AA18  6F88               	movwf	_Tur_OverLoaded_Error& (0+255),b
 21894                           
 21895                           ;ERROR_HANDLING.c: 500: T_Overload_counter = 0;
 21896  01AA1A  0E00               	movlw	0
 21897  01AA1C  0101               	movlb	1	; () banked
 21898  01AA1E  6F81               	movwf	_T_Overload_counter& (0+255),b
 21899  01AA20  0012               	return	
 21900  01AA22                     __end_of_Turbine_OverLoaded_Error:
 21901                           	opt stack 0
 21902                           tblptru	equ	0xFF8
 21903                           tblptrh	equ	0xFF7
 21904                           tblptrl	equ	0xFF6
 21905                           tablat	equ	0xFF5
 21906                           prodh	equ	0xFF4
 21907                           prodl	equ	0xFF3
 21908                           intcon	equ	0xFF2
 21909                           postinc0	equ	0xFEE
 21910                           wreg	equ	0xFE8
 21911                           postdec1	equ	0xFE5
 21912                           fsr1h	equ	0xFE2
 21913                           fsr1l	equ	0xFE1
 21914                           indf2	equ	0xFDF
 21915                           postinc2	equ	0xFDE
 21916                           postdec2	equ	0xFDD
 21917                           fsr2h	equ	0xFDA
 21918                           fsr2l	equ	0xFD9
 21919                           status	equ	0xFD8
 21920                           
 21921 ;; *************** function _Start_Stop *****************
 21922 ;; Defined at:
 21923 ;;		line 679 in file "ERROR_HANDLING.c"
 21924 ;; Parameters:    Size  Location     Type
 21925 ;;		None
 21926 ;; Auto vars:     Size  Location     Type
 21927 ;;		None
 21928 ;; Return value:  Size  Location     Type
 21929 ;;                  1    wreg      void 
 21930 ;; Registers used:
 21931 ;;		wreg, status,2, status,0, cstack
 21932 ;; Tracked objects:
 21933 ;;		On entry : 0/0
 21934 ;;		On exit  : 0/0
 21935 ;;		Unchanged: 0/0
 21936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21941 ;;Total ram usage:        0 bytes
 21942 ;; Hardware stack levels used:    1
 21943 ;; Hardware stack levels required when called:    4
 21944 ;; This function calls:
 21945 ;;		_int_eeprom_write
 21946 ;; This function is called by:
 21947 ;;		_Stopping_state_function
 21948 ;;		_Error_Checking_One_Second
 21949 ;; This function uses a non-reentrant model
 21950 ;;
 21951                           
 21952                           	psect	text61
 21953  01999E                     __ptext61:
 21954                           	opt stack 0
 21955  01999E                     _Start_Stop:
 21956                           	opt stack 24
 21957                           
 21958                           ;ERROR_HANDLING.c: 681: if(RE1 == 1)
 21959                           
 21960                           ; BSR set to: 1
 21961                           ;incstack = 0
 21962  01999E  A284               	btfss	3972,1,c	;volatile
 21963  0199A0  D00C               	goto	l20552
 21964                           
 21965                           ;ERROR_HANDLING.c: 682: {
 21966                           ;ERROR_HANDLING.c: 683: Key_Counter++;
 21967  0199A2  0101               	movlb	1	; () banked
 21968  0199A4  2B6C               	incf	_Key_Counter& (0+255),f,b
 21969                           
 21970                           ; BSR set to: 1
 21971                           ;ERROR_HANDLING.c: 684: if(Key_Counter >= 3)
 21972  0199A6  0E02               	movlw	2
 21973  0199A8  0101               	movlb	1	; () banked
 21974  0199AA  656C               	cpfsgt	_Key_Counter& (0+255),b
 21975  0199AC  D006               	goto	l20552
 21976                           
 21977                           ; BSR set to: 1
 21978                           ;ERROR_HANDLING.c: 685: {
 21979                           ;ERROR_HANDLING.c: 686: Key_Flag = 1;
 21980  0199AE  0E01               	movlw	1
 21981  0199B0  0101               	movlb	1	; () banked
 21982  0199B2  6F6D               	movwf	_Key_Flag& (0+255),b
 21983                           
 21984                           ;ERROR_HANDLING.c: 687: Key_Counter = 0;
 21985  0199B4  0E00               	movlw	0
 21986  0199B6  0101               	movlb	1	; () banked
 21987  0199B8  6F6C               	movwf	_Key_Counter& (0+255),b
 21988  0199BA                     l20552:
 21989                           
 21990                           ;ERROR_HANDLING.c: 688: }
 21991                           ;ERROR_HANDLING.c: 689: }
 21992                           ;ERROR_HANDLING.c: 690: if(RE1 == 0 && Start_Stop_Flag == 0 && Key_Flag == 1)
 21993  0199BA  B284               	btfsc	3972,1,c	;volatile
 21994  0199BC  D01F               	goto	l6330
 21995  0199BE  501F               	movf	_Start_Stop_Flag,w,c
 21996  0199C0  A4D8               	btfss	status,2,c
 21997  0199C2  D01C               	goto	l6330
 21998  0199C4  0101               	movlb	1	; () banked
 21999  0199C6  056D               	decf	_Key_Flag& (0+255),w,b
 22000  0199C8  A4D8               	btfss	status,2,c
 22001  0199CA  D018               	goto	l6330
 22002                           
 22003                           ; BSR set to: 1
 22004                           ;ERROR_HANDLING.c: 691: {
 22005                           ;ERROR_HANDLING.c: 692: S_S_Counter++;
 22006  0199CC  0101               	movlb	1	; () banked
 22007  0199CE  2B7A               	incf	_S_S_Counter& (0+255),f,b
 22008                           
 22009                           ; BSR set to: 1
 22010                           ;ERROR_HANDLING.c: 693: if(S_S_Counter >= 2)
 22011  0199D0  0E01               	movlw	1
 22012  0199D2  0101               	movlb	1	; () banked
 22013  0199D4  657A               	cpfsgt	_S_S_Counter& (0+255),b
 22014  0199D6  D035               	goto	l20582
 22015                           
 22016                           ; BSR set to: 1
 22017                           ;ERROR_HANDLING.c: 694: {
 22018                           ;ERROR_HANDLING.c: 695: S_S_Counter = 0;
 22019  0199D8  0E00               	movlw	0
 22020  0199DA  0101               	movlb	1	; () banked
 22021  0199DC  6F7A               	movwf	_S_S_Counter& (0+255),b
 22022                           
 22023                           ;ERROR_HANDLING.c: 696: Start_Stop_Flag = 1;
 22024  0199DE  0E01               	movlw	1
 22025  0199E0  6E1F               	movwf	_Start_Stop_Flag,c
 22026                           
 22027                           ; BSR set to: 1
 22028                           ;ERROR_HANDLING.c: 697: int_eeprom_write((0x21),1);
 22029  0199E2  0E00               	movlw	0
 22030  0199E4  0100               	movlb	0	; () banked
 22031  0199E6  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 22032  0199E8  0E21               	movlw	33
 22033  0199EA  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 22034  0199EC  0E00               	movlw	0
 22035  0199EE  0100               	movlb	0	; () banked
 22036  0199F0  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 22037  0199F2  0E01               	movlw	1
 22038  0199F4  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 22039  0199F6  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 22040  0199FA  D020               	goto	l20580
 22041  0199FC                     l6330:
 22042                           
 22043                           ;ERROR_HANDLING.c: 702: else if(RE1 == 0 && Start_Stop_Flag == 1 && Key_Flag == 1)
 22044  0199FC  B284               	btfsc	3972,1,c	;volatile
 22045  0199FE  D021               	goto	l20582
 22046  019A00  041F               	decf	_Start_Stop_Flag,w,c
 22047  019A02  A4D8               	btfss	status,2,c
 22048  019A04  D01E               	goto	l20582
 22049  019A06  0101               	movlb	1	; () banked
 22050  019A08  056D               	decf	_Key_Flag& (0+255),w,b
 22051  019A0A  A4D8               	btfss	status,2,c
 22052  019A0C  D01A               	goto	l20582
 22053                           
 22054                           ; BSR set to: 1
 22055                           ;ERROR_HANDLING.c: 703: {
 22056                           ;ERROR_HANDLING.c: 704: S_S_Counter++;
 22057  019A0E  0101               	movlb	1	; () banked
 22058  019A10  2B7A               	incf	_S_S_Counter& (0+255),f,b
 22059                           
 22060                           ; BSR set to: 1
 22061                           ;ERROR_HANDLING.c: 705: if(S_S_Counter >= 2)
 22062  019A12  0E01               	movlw	1
 22063  019A14  0101               	movlb	1	; () banked
 22064  019A16  657A               	cpfsgt	_S_S_Counter& (0+255),b
 22065  019A18  D014               	goto	l20582
 22066                           
 22067                           ; BSR set to: 1
 22068                           ;ERROR_HANDLING.c: 706: {
 22069                           ;ERROR_HANDLING.c: 707: S_S_Counter = 0;
 22070  019A1A  0E00               	movlw	0
 22071  019A1C  0101               	movlb	1	; () banked
 22072  019A1E  6F7A               	movwf	_S_S_Counter& (0+255),b
 22073                           
 22074                           ;ERROR_HANDLING.c: 708: Start_Stop_Flag = 0;
 22075  019A20  0E00               	movlw	0
 22076  019A22  6E1F               	movwf	_Start_Stop_Flag,c
 22077                           
 22078                           ; BSR set to: 1
 22079                           ;ERROR_HANDLING.c: 709: int_eeprom_write((0x21),0);
 22080  019A24  0E00               	movlw	0
 22081  019A26  0100               	movlb	0	; () banked
 22082  019A28  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 22083  019A2A  0E21               	movlw	33
 22084  019A2C  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 22085  019A2E  0E00               	movlw	0
 22086  019A30  0100               	movlb	0	; () banked
 22087  019A32  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 22088  019A34  0E00               	movlw	0
 22089  019A36  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 22090  019A38  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 22091  019A3C                     l20580:
 22092                           
 22093                           ;ERROR_HANDLING.c: 710: Key_Flag = 0;
 22094  019A3C  0E00               	movlw	0
 22095  019A3E  0101               	movlb	1	; () banked
 22096  019A40  6F6D               	movwf	_Key_Flag& (0+255),b
 22097  019A42                     l20582:
 22098                           
 22099                           ;ERROR_HANDLING.c: 711: }
 22100                           ;ERROR_HANDLING.c: 713: }
 22101                           ;ERROR_HANDLING.c: 716: if(Start_Stop_Flag == 1)
 22102  019A42  041F               	decf	_Start_Stop_Flag,w,c
 22103  019A44  A4D8               	btfss	status,2,c
 22104  019A46  D008               	goto	l6335
 22105                           
 22106                           ;ERROR_HANDLING.c: 717: {
 22107                           ;ERROR_HANDLING.c: 718: RE7 = ~RE7;
 22108  019A48  BE84               	btfsc	3972,7,c	;volatile
 22109  019A4A  D002               	goto	u14610
 22110  019A4C  8E84               	bsf	3972,7,c	;volatile
 22111  019A4E  D001               	goto	l20586
 22112  019A50                     u14610:
 22113  019A50  9E84               	bcf	3972,7,c	;volatile
 22114  019A52                     l20586:
 22115                           
 22116                           ;ERROR_HANDLING.c: 719: Errors = MANUAL_STOP;
 22117  019A52  0E13               	movlw	19
 22118  019A54  6E1B               	movwf	_Errors,c
 22119                           
 22120                           ;ERROR_HANDLING.c: 720: }
 22121  019A56  0012               	return	
 22122  019A58                     l6335:
 22123                           
 22124                           ;ERROR_HANDLING.c: 721: else
 22125                           ;ERROR_HANDLING.c: 722: {
 22126                           ;ERROR_HANDLING.c: 723: RE7 = 1;
 22127  019A58  8E84               	bsf	3972,7,c	;volatile
 22128  019A5A  0012               	return	
 22129  019A5C                     __end_of_Start_Stop:
 22130                           	opt stack 0
 22131                           tblptru	equ	0xFF8
 22132                           tblptrh	equ	0xFF7
 22133                           tblptrl	equ	0xFF6
 22134                           tablat	equ	0xFF5
 22135                           prodh	equ	0xFF4
 22136                           prodl	equ	0xFF3
 22137                           intcon	equ	0xFF2
 22138                           postinc0	equ	0xFEE
 22139                           wreg	equ	0xFE8
 22140                           postdec1	equ	0xFE5
 22141                           fsr1h	equ	0xFE2
 22142                           fsr1l	equ	0xFE1
 22143                           indf2	equ	0xFDF
 22144                           postinc2	equ	0xFDE
 22145                           postdec2	equ	0xFDD
 22146                           fsr2h	equ	0xFDA
 22147                           fsr2l	equ	0xFD9
 22148                           status	equ	0xFD8
 22149                           
 22150 ;; *************** function _Rotor_Slip_Cal *****************
 22151 ;; Defined at:
 22152 ;;		line 17 in file "SLIP_CALCULATIONS.c"
 22153 ;; Parameters:    Size  Location     Type
 22154 ;;		None
 22155 ;; Auto vars:     Size  Location     Type
 22156 ;;		None
 22157 ;; Return value:  Size  Location     Type
 22158 ;;                  1    wreg      void 
 22159 ;; Registers used:
 22160 ;;		wreg, status,2, status,0, cstack
 22161 ;; Tracked objects:
 22162 ;;		On entry : 0/0
 22163 ;;		On exit  : 0/0
 22164 ;;		Unchanged: 0/0
 22165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22170 ;;Total ram usage:        0 bytes
 22171 ;; Hardware stack levels used:    1
 22172 ;; Hardware stack levels required when called:    5
 22173 ;; This function calls:
 22174 ;;		___ftadd
 22175 ;;		___ftdiv
 22176 ;;		___ftmul
 22177 ;;		___ftneg
 22178 ;; This function is called by:
 22179 ;;		_Error_Checking_One_Second
 22180 ;; This function uses a non-reentrant model
 22181 ;;
 22182                           
 22183                           	psect	text62
 22184  019DEA                     __ptext62:
 22185                           	opt stack 0
 22186  019DEA                     _Rotor_Slip_Cal:
 22187                           	opt stack 23
 22188                           
 22189                           ;SLIP_CALCULATIONS.c: 19: Temp = (Generator_RPM_FLT / (17.54));
 22190                           
 22191                           ;incstack = 0
 22192  019DEA  C004  F0A5         	movff	_Generator_RPM_FLT,___ftdiv@f1
 22193  019DEE  C005  F0A6         	movff	_Generator_RPM_FLT+1,___ftdiv@f1+1
 22194  019DF2  C006  F0A7         	movff	_Generator_RPM_FLT+2,___ftdiv@f1+2
 22195  019DF6  0E52               	movlw	82
 22196  019DF8  0100               	movlb	0	; () banked
 22197  019DFA  6FA8               	movwf	___ftdiv@f2& (0+255),b
 22198  019DFC  0E8C               	movlw	140
 22199  019DFE  0100               	movlb	0	; () banked
 22200  019E00  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 22201  019E02  0E41               	movlw	65
 22202  019E04  0100               	movlb	0	; () banked
 22203  019E06  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 22204  019E08  ECAF  F0C1         	call	___ftdiv	;wreg free
 22205  019E0C  C0A5  F221         	movff	?___ftdiv,_Temp
 22206  019E10  C0A6  F222         	movff	?___ftdiv+1,_Temp+1
 22207  019E14  C0A7  F223         	movff	?___ftdiv+2,_Temp+2
 22208                           
 22209                           ;SLIP_CALCULATIONS.c: 20: Rotor_slip_1 = (Turbine_RPM - Temp) / Temp;
 22210  019E18  C00A  F090         	movff	_Turbine_RPM,___ftadd@f2
 22211  019E1C  C00B  F091         	movff	_Turbine_RPM+1,___ftadd@f2+1
 22212  019E20  C00C  F092         	movff	_Turbine_RPM+2,___ftadd@f2+2
 22213  019E24  C221  F083         	movff	_Temp,___ftneg@f1
 22214  019E28  C222  F084         	movff	_Temp+1,___ftneg@f1+1
 22215  019E2C  C223  F085         	movff	_Temp+2,___ftneg@f1+2
 22216  019E30  EC1D  F0D7         	call	___ftneg	;wreg free
 22217  019E34  C083  F08D         	movff	?___ftneg,___ftadd@f1
 22218  019E38  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 22219  019E3C  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 22220  019E40  ECBE  F0B2         	call	___ftadd	;wreg free
 22221  019E44  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 22222  019E48  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 22223  019E4C  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 22224  019E50  C221  F0A8         	movff	_Temp,___ftdiv@f2
 22225  019E54  C222  F0A9         	movff	_Temp+1,___ftdiv@f2+1
 22226  019E58  C223  F0AA         	movff	_Temp+2,___ftdiv@f2+2
 22227  019E5C  ECAF  F0C1         	call	___ftdiv	;wreg free
 22228  019E60  C0A5  F59D         	movff	?___ftdiv,_Rotor_slip_1
 22229  019E64  C0A6  F59E         	movff	?___ftdiv+1,_Rotor_slip_1+1
 22230  019E68  C0A7  F59F         	movff	?___ftdiv+2,_Rotor_slip_1+2
 22231                           
 22232                           ;SLIP_CALCULATIONS.c: 21: Rotor_slip = Rotor_slip_1 * 100;
 22233  019E6C  C59D  F074         	movff	_Rotor_slip_1,___ftmul@f1
 22234  019E70  C59E  F075         	movff	_Rotor_slip_1+1,___ftmul@f1+1
 22235  019E74  C59F  F076         	movff	_Rotor_slip_1+2,___ftmul@f1+2
 22236  019E78  0E00               	movlw	0
 22237  019E7A  0100               	movlb	0	; () banked
 22238  019E7C  6F77               	movwf	___ftmul@f2& (0+255),b
 22239  019E7E  0EC8               	movlw	200
 22240  019E80  0100               	movlb	0	; () banked
 22241  019E82  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 22242  019E84  0E42               	movlw	66
 22243  019E86  0100               	movlb	0	; () banked
 22244  019E88  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 22245  019E8A  EC00  F0C1         	call	___ftmul	;wreg free
 22246  019E8E  C074  F0D3         	movff	?___ftmul,_Rotor_slip
 22247  019E92  C075  F0D4         	movff	?___ftmul+1,_Rotor_slip+1
 22248  019E96  C076  F0D5         	movff	?___ftmul+2,_Rotor_slip+2
 22249  019E9A  0012               	return		;funcret
 22250  019E9C                     __end_of_Rotor_Slip_Cal:
 22251                           	opt stack 0
 22252                           tblptru	equ	0xFF8
 22253                           tblptrh	equ	0xFF7
 22254                           tblptrl	equ	0xFF6
 22255                           tablat	equ	0xFF5
 22256                           prodh	equ	0xFF4
 22257                           prodl	equ	0xFF3
 22258                           intcon	equ	0xFF2
 22259                           postinc0	equ	0xFEE
 22260                           wreg	equ	0xFE8
 22261                           postdec1	equ	0xFE5
 22262                           fsr1h	equ	0xFE2
 22263                           fsr1l	equ	0xFE1
 22264                           indf2	equ	0xFDF
 22265                           postinc2	equ	0xFDE
 22266                           postdec2	equ	0xFDD
 22267                           fsr2h	equ	0xFDA
 22268                           fsr2l	equ	0xFD9
 22269                           status	equ	0xFD8
 22270                           
 22271 ;; *************** function _Ramp_Up_Slip_Error_Trigger *****************
 22272 ;; Defined at:
 22273 ;;		line 52 in file "SLIP_CALCULATIONS.c"
 22274 ;; Parameters:    Size  Location     Type
 22275 ;;		None
 22276 ;; Auto vars:     Size  Location     Type
 22277 ;;		None
 22278 ;; Return value:  Size  Location     Type
 22279 ;;                  2  5160[None  ] int 
 22280 ;; Registers used:
 22281 ;;		wreg, status,2, status,0, cstack
 22282 ;; Tracked objects:
 22283 ;;		On entry : 0/0
 22284 ;;		On exit  : 0/0
 22285 ;;		Unchanged: 0/0
 22286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22291 ;;Total ram usage:        0 bytes
 22292 ;; Hardware stack levels used:    1
 22293 ;; Hardware stack levels required when called:    4
 22294 ;; This function calls:
 22295 ;;		___ftge
 22296 ;; This function is called by:
 22297 ;;		_Error_Checking_One_Second
 22298 ;; This function uses a non-reentrant model
 22299 ;;
 22300                           
 22301                           	psect	text63
 22302  01872E                     __ptext63:
 22303                           	opt stack 0
 22304  01872E                     _Ramp_Up_Slip_Error_Trigger:
 22305                           	opt stack 24
 22306                           
 22307                           ;SLIP_CALCULATIONS.c: 54: if(Rotor_slip < (-9.0))
 22308                           
 22309                           ;incstack = 0
 22310  01872E  C0D3  F099         	movff	_Rotor_slip,___ftge@ff1
 22311  018732  C0D4  F09A         	movff	_Rotor_slip+1,___ftge@ff1+1
 22312  018736  C0D5  F09B         	movff	_Rotor_slip+2,___ftge@ff1+2
 22313  01873A  0E00               	movlw	0
 22314  01873C  0100               	movlb	0	; () banked
 22315  01873E  6F9C               	movwf	___ftge@ff2& (0+255),b
 22316  018740  0E10               	movlw	16
 22317  018742  0100               	movlb	0	; () banked
 22318  018744  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22319  018746  0EC1               	movlw	193
 22320  018748  0100               	movlb	0	; () banked
 22321  01874A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22322  01874C  EC4B  F0CB         	call	___ftge	;wreg free
 22323  018750  0100               	movlb	0	; () banked
 22324  018752  B0D8               	btfsc	status,0,c
 22325  018754  D002               	goto	l21488
 22326                           
 22327                           ; BSR set to: 0
 22328                           ;SLIP_CALCULATIONS.c: 55: {
 22329                           ;SLIP_CALCULATIONS.c: 56: Slip_Error_Counter++;
 22330  018756  0101               	movlb	1	; () banked
 22331  018758  2B7B               	incf	_Slip_Error_Counter& (0+255),f,b
 22332  01875A                     l21488:
 22333                           
 22334                           ;SLIP_CALCULATIONS.c: 57: }
 22335                           ;SLIP_CALCULATIONS.c: 58: if(Rotor_slip >= (-9.0))
 22336  01875A  C0D3  F099         	movff	_Rotor_slip,___ftge@ff1
 22337  01875E  C0D4  F09A         	movff	_Rotor_slip+1,___ftge@ff1+1
 22338  018762  C0D5  F09B         	movff	_Rotor_slip+2,___ftge@ff1+2
 22339  018766  0E00               	movlw	0
 22340  018768  0100               	movlb	0	; () banked
 22341  01876A  6F9C               	movwf	___ftge@ff2& (0+255),b
 22342  01876C  0E10               	movlw	16
 22343  01876E  0100               	movlb	0	; () banked
 22344  018770  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22345  018772  0EC1               	movlw	193
 22346  018774  0100               	movlb	0	; () banked
 22347  018776  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22348  018778  EC4B  F0CB         	call	___ftge	;wreg free
 22349  01877C  0100               	movlb	0	; () banked
 22350  01877E  A0D8               	btfss	status,0,c
 22351  018780  D003               	goto	l21492
 22352                           
 22353                           ; BSR set to: 0
 22354                           ;SLIP_CALCULATIONS.c: 59: {
 22355                           ;SLIP_CALCULATIONS.c: 60: Slip_Error_Counter = 0;
 22356  018782  0E00               	movlw	0
 22357  018784  0101               	movlb	1	; () banked
 22358  018786  6F7B               	movwf	_Slip_Error_Counter& (0+255),b
 22359  018788                     l21492:
 22360                           
 22361                           ;SLIP_CALCULATIONS.c: 61: }
 22362                           ;SLIP_CALCULATIONS.c: 62: if(Slip_Error_Counter >= (60))
 22363  018788  0E3B               	movlw	59
 22364  01878A  0101               	movlb	1	; () banked
 22365  01878C  657B               	cpfsgt	_Slip_Error_Counter& (0+255),b
 22366  01878E  D01C               	goto	l21500
 22367                           
 22368                           ; BSR set to: 1
 22369                           ;SLIP_CALCULATIONS.c: 63: {
 22370                           ;SLIP_CALCULATIONS.c: 64: Slip_Error_Counter = 0;
 22371  018790  0E00               	movlw	0
 22372  018792  0101               	movlb	1	; () banked
 22373  018794  6F7B               	movwf	_Slip_Error_Counter& (0+255),b
 22374                           
 22375                           ;SLIP_CALCULATIONS.c: 65: Rotor_Slip_Error_Flag = 1;
 22376  018796  0E01               	movlw	1
 22377  018798  0101               	movlb	1	; () banked
 22378  01879A  6F79               	movwf	_Rotor_Slip_Error_Flag& (0+255),b
 22379                           
 22380                           ; BSR set to: 1
 22381                           ;SLIP_CALCULATIONS.c: 66: if(Rotor_slip < (-9.0))
 22382  01879C  C0D3  F099         	movff	_Rotor_slip,___ftge@ff1
 22383  0187A0  C0D4  F09A         	movff	_Rotor_slip+1,___ftge@ff1+1
 22384  0187A4  C0D5  F09B         	movff	_Rotor_slip+2,___ftge@ff1+2
 22385  0187A8  0E00               	movlw	0
 22386  0187AA  0100               	movlb	0	; () banked
 22387  0187AC  6F9C               	movwf	___ftge@ff2& (0+255),b
 22388  0187AE  0E10               	movlw	16
 22389  0187B0  0100               	movlb	0	; () banked
 22390  0187B2  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22391  0187B4  0EC1               	movlw	193
 22392  0187B6  0100               	movlb	0	; () banked
 22393  0187B8  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22394  0187BA  EC4B  F0CB         	call	___ftge	;wreg free
 22395  0187BE  0100               	movlb	0	; () banked
 22396  0187C0  B0D8               	btfsc	status,0,c
 22397  0187C2  D002               	goto	l21500
 22398                           
 22399                           ; BSR set to: 0
 22400                           ;SLIP_CALCULATIONS.c: 67: {
 22401                           ;SLIP_CALCULATIONS.c: 68: Errors = ROTOR_SLIP;
 22402  0187C4  0E11               	movlw	17
 22403  0187C6  6E1B               	movwf	_Errors,c
 22404  0187C8                     l21500:
 22405                           
 22406                           ;SLIP_CALCULATIONS.c: 69: }
 22407                           ;SLIP_CALCULATIONS.c: 70: }
 22408                           ;SLIP_CALCULATIONS.c: 73: if(Motor_slip < (-8.0))
 22409  0187C8  C0CA  F099         	movff	_Motor_slip,___ftge@ff1
 22410  0187CC  C0CB  F09A         	movff	_Motor_slip+1,___ftge@ff1+1
 22411  0187D0  C0CC  F09B         	movff	_Motor_slip+2,___ftge@ff1+2
 22412  0187D4  0E00               	movlw	0
 22413  0187D6  0100               	movlb	0	; () banked
 22414  0187D8  6F9C               	movwf	___ftge@ff2& (0+255),b
 22415  0187DA  0E00               	movlw	0
 22416  0187DC  0100               	movlb	0	; () banked
 22417  0187DE  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22418  0187E0  0EC1               	movlw	193
 22419  0187E2  0100               	movlb	0	; () banked
 22420  0187E4  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22421  0187E6  EC4B  F0CB         	call	___ftge	;wreg free
 22422  0187EA  0100               	movlb	0	; () banked
 22423  0187EC  B0D8               	btfsc	status,0,c
 22424  0187EE  D002               	goto	l21504
 22425                           
 22426                           ; BSR set to: 0
 22427                           ;SLIP_CALCULATIONS.c: 74: {
 22428                           ;SLIP_CALCULATIONS.c: 75: Slip_Error_Counter_1++;
 22429  0187F0  0101               	movlb	1	; () banked
 22430  0187F2  2B7C               	incf	_Slip_Error_Counter_1& (0+255),f,b
 22431  0187F4                     l21504:
 22432                           
 22433                           ;SLIP_CALCULATIONS.c: 76: }
 22434                           ;SLIP_CALCULATIONS.c: 77: if(Motor_slip >= (-8.0))
 22435  0187F4  C0CA  F099         	movff	_Motor_slip,___ftge@ff1
 22436  0187F8  C0CB  F09A         	movff	_Motor_slip+1,___ftge@ff1+1
 22437  0187FC  C0CC  F09B         	movff	_Motor_slip+2,___ftge@ff1+2
 22438  018800  0E00               	movlw	0
 22439  018802  0100               	movlb	0	; () banked
 22440  018804  6F9C               	movwf	___ftge@ff2& (0+255),b
 22441  018806  0E00               	movlw	0
 22442  018808  0100               	movlb	0	; () banked
 22443  01880A  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22444  01880C  0EC1               	movlw	193
 22445  01880E  0100               	movlb	0	; () banked
 22446  018810  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22447  018812  EC4B  F0CB         	call	___ftge	;wreg free
 22448  018816  0100               	movlb	0	; () banked
 22449  018818  A0D8               	btfss	status,0,c
 22450  01881A  D003               	goto	l21508
 22451                           
 22452                           ; BSR set to: 0
 22453                           ;SLIP_CALCULATIONS.c: 78: {
 22454                           ;SLIP_CALCULATIONS.c: 79: Slip_Error_Counter_1 = 0;
 22455  01881C  0E00               	movlw	0
 22456  01881E  0101               	movlb	1	; () banked
 22457  018820  6F7C               	movwf	_Slip_Error_Counter_1& (0+255),b
 22458  018822                     l21508:
 22459                           
 22460                           ;SLIP_CALCULATIONS.c: 80: }
 22461                           ;SLIP_CALCULATIONS.c: 81: if(Slip_Error_Counter_1 >= (60))
 22462  018822  0E3B               	movlw	59
 22463  018824  0101               	movlb	1	; () banked
 22464  018826  657C               	cpfsgt	_Slip_Error_Counter_1& (0+255),b
 22465  018828  0012               	return	
 22466                           
 22467                           ; BSR set to: 1
 22468                           ;SLIP_CALCULATIONS.c: 82: {
 22469                           ;SLIP_CALCULATIONS.c: 83: Slip_Error_Counter_1 = 0;
 22470  01882A  0E00               	movlw	0
 22471  01882C  0101               	movlb	1	; () banked
 22472  01882E  6F7C               	movwf	_Slip_Error_Counter_1& (0+255),b
 22473                           
 22474                           ;SLIP_CALCULATIONS.c: 84: Motor_Slip_Error_Flag = 1;
 22475  018830  0E01               	movlw	1
 22476  018832  0101               	movlb	1	; () banked
 22477  018834  6F70               	movwf	_Motor_Slip_Error_Flag& (0+255),b
 22478                           
 22479                           ; BSR set to: 1
 22480                           ;SLIP_CALCULATIONS.c: 85: if(Motor_slip < (-8.0))
 22481  018836  C0CA  F099         	movff	_Motor_slip,___ftge@ff1
 22482  01883A  C0CB  F09A         	movff	_Motor_slip+1,___ftge@ff1+1
 22483  01883E  C0CC  F09B         	movff	_Motor_slip+2,___ftge@ff1+2
 22484  018842  0E00               	movlw	0
 22485  018844  0100               	movlb	0	; () banked
 22486  018846  6F9C               	movwf	___ftge@ff2& (0+255),b
 22487  018848  0E00               	movlw	0
 22488  01884A  0100               	movlb	0	; () banked
 22489  01884C  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22490  01884E  0EC1               	movlw	193
 22491  018850  0100               	movlb	0	; () banked
 22492  018852  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22493  018854  EC4B  F0CB         	call	___ftge	;wreg free
 22494  018858  0100               	movlb	0	; () banked
 22495  01885A  B0D8               	btfsc	status,0,c
 22496  01885C  0012               	return	
 22497                           
 22498                           ; BSR set to: 0
 22499                           ;SLIP_CALCULATIONS.c: 86: {
 22500                           ;SLIP_CALCULATIONS.c: 87: Errors = MOTOR_SLIP;
 22501  01885E  0E10               	movlw	16
 22502  018860  6E1B               	movwf	_Errors,c
 22503                           
 22504                           ; BSR set to: 0
 22505  018862  0012               	return	
 22506  018864                     __end_of_Ramp_Up_Slip_Error_Trigger:
 22507                           	opt stack 0
 22508                           tblptru	equ	0xFF8
 22509                           tblptrh	equ	0xFF7
 22510                           tblptrl	equ	0xFF6
 22511                           tablat	equ	0xFF5
 22512                           prodh	equ	0xFF4
 22513                           prodl	equ	0xFF3
 22514                           intcon	equ	0xFF2
 22515                           postinc0	equ	0xFEE
 22516                           wreg	equ	0xFE8
 22517                           postdec1	equ	0xFE5
 22518                           fsr1h	equ	0xFE2
 22519                           fsr1l	equ	0xFE1
 22520                           indf2	equ	0xFDF
 22521                           postinc2	equ	0xFDE
 22522                           postdec2	equ	0xFDD
 22523                           fsr2h	equ	0xFDA
 22524                           fsr2l	equ	0xFD9
 22525                           status	equ	0xFD8
 22526                           
 22527 ;; *************** function _Ramp_Up_Slip *****************
 22528 ;; Defined at:
 22529 ;;		line 40 in file "SLIP_CALCULATIONS.c"
 22530 ;; Parameters:    Size  Location     Type
 22531 ;;		None
 22532 ;; Auto vars:     Size  Location     Type
 22533 ;;		None
 22534 ;; Return value:  Size  Location     Type
 22535 ;;                  2  5158[None  ] int 
 22536 ;; Registers used:
 22537 ;;		wreg, status,2, status,0, cstack
 22538 ;; Tracked objects:
 22539 ;;		On entry : 0/0
 22540 ;;		On exit  : 0/0
 22541 ;;		Unchanged: 0/0
 22542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22547 ;;Total ram usage:        0 bytes
 22548 ;; Hardware stack levels used:    1
 22549 ;; Hardware stack levels required when called:    4
 22550 ;; This function calls:
 22551 ;;		___ftge
 22552 ;; This function is called by:
 22553 ;;		_Error_Checking_One_Second
 22554 ;; This function uses a non-reentrant model
 22555 ;;
 22556                           
 22557                           	psect	text64
 22558  019F4C                     __ptext64:
 22559                           	opt stack 0
 22560  019F4C                     _Ramp_Up_Slip:
 22561                           	opt stack 24
 22562                           
 22563                           ;SLIP_CALCULATIONS.c: 42: if(Rotor_slip > (-9.0) && Motor_slip > (-8.0))
 22564                           
 22565                           ;incstack = 0
 22566  019F4C  0E00               	movlw	0
 22567  019F4E  0100               	movlb	0	; () banked
 22568  019F50  6F99               	movwf	___ftge@ff1& (0+255),b
 22569  019F52  0E10               	movlw	16
 22570  019F54  0100               	movlb	0	; () banked
 22571  019F56  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 22572  019F58  0EC1               	movlw	193
 22573  019F5A  0100               	movlb	0	; () banked
 22574  019F5C  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 22575  019F5E  C0D3  F09C         	movff	_Rotor_slip,___ftge@ff2
 22576  019F62  C0D4  F09D         	movff	_Rotor_slip+1,___ftge@ff2+1
 22577  019F66  C0D5  F09E         	movff	_Rotor_slip+2,___ftge@ff2+2
 22578  019F6A  EC4B  F0CB         	call	___ftge	;wreg free
 22579  019F6E  0100               	movlb	0	; () banked
 22580  019F70  B0D8               	btfsc	status,0,c
 22581  019F72  D017               	goto	l21478
 22582                           
 22583                           ; BSR set to: 0
 22584  019F74  0E00               	movlw	0
 22585  019F76  0100               	movlb	0	; () banked
 22586  019F78  6F99               	movwf	___ftge@ff1& (0+255),b
 22587  019F7A  0E00               	movlw	0
 22588  019F7C  0100               	movlb	0	; () banked
 22589  019F7E  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 22590  019F80  0EC1               	movlw	193
 22591  019F82  0100               	movlb	0	; () banked
 22592  019F84  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 22593  019F86  C0CA  F09C         	movff	_Motor_slip,___ftge@ff2
 22594  019F8A  C0CB  F09D         	movff	_Motor_slip+1,___ftge@ff2+1
 22595  019F8E  C0CC  F09E         	movff	_Motor_slip+2,___ftge@ff2+2
 22596  019F92  EC4B  F0CB         	call	___ftge	;wreg free
 22597  019F96  0100               	movlb	0	; () banked
 22598  019F98  B0D8               	btfsc	status,0,c
 22599  019F9A  D003               	goto	l21478
 22600                           
 22601                           ; BSR set to: 0
 22602                           ;SLIP_CALCULATIONS.c: 43: {
 22603                           ;SLIP_CALCULATIONS.c: 44: Slip_Flag = 1;
 22604  019F9C  0E01               	movlw	1
 22605  019F9E  0101               	movlb	1	; () banked
 22606  019FA0  6F7D               	movwf	_Slip_Flag& (0+255),b
 22607  019FA2                     l21478:
 22608                           
 22609                           ;SLIP_CALCULATIONS.c: 45: }
 22610                           ;SLIP_CALCULATIONS.c: 46: if(Rotor_slip <= (-9.0) || Motor_slip <= (-8.0))
 22611  019FA2  0E00               	movlw	0
 22612  019FA4  0100               	movlb	0	; () banked
 22613  019FA6  6F99               	movwf	___ftge@ff1& (0+255),b
 22614  019FA8  0E10               	movlw	16
 22615  019FAA  0100               	movlb	0	; () banked
 22616  019FAC  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 22617  019FAE  0EC1               	movlw	193
 22618  019FB0  0100               	movlb	0	; () banked
 22619  019FB2  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 22620  019FB4  C0D3  F09C         	movff	_Rotor_slip,___ftge@ff2
 22621  019FB8  C0D4  F09D         	movff	_Rotor_slip+1,___ftge@ff2+1
 22622  019FBC  C0D5  F09E         	movff	_Rotor_slip+2,___ftge@ff2+2
 22623  019FC0  EC4B  F0CB         	call	___ftge	;wreg free
 22624  019FC4  0100               	movlb	0	; () banked
 22625  019FC6  B0D8               	btfsc	status,0,c
 22626  019FC8  D014               	goto	l21482
 22627                           
 22628                           ; BSR set to: 0
 22629  019FCA  0E00               	movlw	0
 22630  019FCC  0100               	movlb	0	; () banked
 22631  019FCE  6F99               	movwf	___ftge@ff1& (0+255),b
 22632  019FD0  0E00               	movlw	0
 22633  019FD2  0100               	movlb	0	; () banked
 22634  019FD4  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 22635  019FD6  0EC1               	movlw	193
 22636  019FD8  0100               	movlb	0	; () banked
 22637  019FDA  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 22638  019FDC  C0CA  F09C         	movff	_Motor_slip,___ftge@ff2
 22639  019FE0  C0CB  F09D         	movff	_Motor_slip+1,___ftge@ff2+1
 22640  019FE4  C0CC  F09E         	movff	_Motor_slip+2,___ftge@ff2+2
 22641  019FE8  EC4B  F0CB         	call	___ftge	;wreg free
 22642  019FEC  0100               	movlb	0	; () banked
 22643  019FEE  A0D8               	btfss	status,0,c
 22644  019FF0  0012               	return	
 22645  019FF2                     l21482:
 22646                           
 22647                           ; BSR set to: 0
 22648                           ;SLIP_CALCULATIONS.c: 47: {
 22649                           ;SLIP_CALCULATIONS.c: 48: Slip_Flag = 0;
 22650  019FF2  0E00               	movlw	0
 22651  019FF4  0101               	movlb	1	; () banked
 22652  019FF6  6F7D               	movwf	_Slip_Flag& (0+255),b
 22653  019FF8  0012               	return	
 22654  019FFA                     __end_of_Ramp_Up_Slip:
 22655                           	opt stack 0
 22656                           tblptru	equ	0xFF8
 22657                           tblptrh	equ	0xFF7
 22658                           tblptrl	equ	0xFF6
 22659                           tablat	equ	0xFF5
 22660                           prodh	equ	0xFF4
 22661                           prodl	equ	0xFF3
 22662                           intcon	equ	0xFF2
 22663                           postinc0	equ	0xFEE
 22664                           wreg	equ	0xFE8
 22665                           postdec1	equ	0xFE5
 22666                           fsr1h	equ	0xFE2
 22667                           fsr1l	equ	0xFE1
 22668                           indf2	equ	0xFDF
 22669                           postinc2	equ	0xFDE
 22670                           postdec2	equ	0xFDD
 22671                           fsr2h	equ	0xFDA
 22672                           fsr2l	equ	0xFD9
 22673                           status	equ	0xFD8
 22674                           
 22675 ;; *************** function _Pitch_PS_ON_Function *****************
 22676 ;; Defined at:
 22677 ;;		line 45 in file "PITCHING.c"
 22678 ;; Parameters:    Size  Location     Type
 22679 ;;		None
 22680 ;; Auto vars:     Size  Location     Type
 22681 ;;		None
 22682 ;; Return value:  Size  Location     Type
 22683 ;;                  2  5118[None  ] int 
 22684 ;; Registers used:
 22685 ;;		wreg, status,2, status,0
 22686 ;; Tracked objects:
 22687 ;;		On entry : 0/0
 22688 ;;		On exit  : 0/0
 22689 ;;		Unchanged: 0/0
 22690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22695 ;;Total ram usage:        0 bytes
 22696 ;; Hardware stack levels used:    1
 22697 ;; Hardware stack levels required when called:    3
 22698 ;; This function calls:
 22699 ;;		Nothing
 22700 ;; This function is called by:
 22701 ;;		_Error_Checking_One_Second
 22702 ;; This function uses a non-reentrant model
 22703 ;;
 22704                           
 22705                           	psect	text65
 22706  01AD3C                     __ptext65:
 22707                           	opt stack 0
 22708  01AD3C                     _Pitch_PS_ON_Function:
 22709                           	opt stack 25
 22710                           
 22711                           ;PITCHING.c: 47: if(Wind_Speed_Avg >= (0))
 22712                           
 22713                           ;incstack = 0
 22714  01AD3C  BE0F               	btfsc	_Wind_Speed_Avg+2,7,c
 22715  01AD3E  D007               	goto	l21160
 22716                           
 22717                           ;PITCHING.c: 48: {
 22718                           ;PITCHING.c: 49: (RB5 = 1);
 22719  01AD40  8A81               	bsf	3969,5,c	;volatile
 22720                           
 22721                           ;PITCHING.c: 50: Pitch_Ps_Counter = 0;
 22722  01AD42  0E00               	movlw	0
 22723  01AD44  0103               	movlb	3	; () banked
 22724  01AD46  6FEA               	movwf	(_Pitch_Ps_Counter+1)& (0+255),b
 22725  01AD48  0E00               	movlw	0
 22726  01AD4A  6FE9               	movwf	_Pitch_Ps_Counter& (0+255),b
 22727                           
 22728                           ;PITCHING.c: 51: }
 22729  01AD4C  0012               	return	
 22730  01AD4E                     l21160:
 22731                           
 22732                           ;PITCHING.c: 52: else
 22733                           ;PITCHING.c: 53: {
 22734                           ;PITCHING.c: 54: Pitch_Ps_Counter++;
 22735  01AD4E  0103               	movlb	3	; () banked
 22736  01AD50  4BE9               	infsnz	_Pitch_Ps_Counter& (0+255),f,b
 22737  01AD52  2BEA               	incf	(_Pitch_Ps_Counter+1)& (0+255),f,b
 22738                           
 22739                           ; BSR set to: 3
 22740                           ;PITCHING.c: 55: if(Pitch_Ps_Counter > (80))
 22741  01AD54  0103               	movlb	3	; () banked
 22742  01AD56  51EA               	movf	(_Pitch_Ps_Counter+1)& (0+255),w,b
 22743  01AD58  E105               	bnz	u15480
 22744  01AD5A  0E51               	movlw	81
 22745  01AD5C  0103               	movlb	3	; () banked
 22746  01AD5E  5DE9               	subwf	_Pitch_Ps_Counter& (0+255),w,b
 22747  01AD60  A0D8               	btfss	status,0,c
 22748  01AD62  0012               	return	
 22749  01AD64                     u15480:
 22750                           
 22751                           ; BSR set to: 3
 22752                           ;PITCHING.c: 56: {
 22753                           ;PITCHING.c: 57: Pitch_Ps_Counter = 0;
 22754  01AD64  0E00               	movlw	0
 22755  01AD66  0103               	movlb	3	; () banked
 22756  01AD68  6FEA               	movwf	(_Pitch_Ps_Counter+1)& (0+255),b
 22757  01AD6A  0E00               	movlw	0
 22758  01AD6C  6FE9               	movwf	_Pitch_Ps_Counter& (0+255),b
 22759                           
 22760                           ; BSR set to: 3
 22761                           ;PITCHING.c: 58: (RB5 = 0);
 22762  01AD6E  9A81               	bcf	3969,5,c	;volatile
 22763                           
 22764                           ; BSR set to: 3
 22765  01AD70  0012               	return	
 22766  01AD72                     __end_of_Pitch_PS_ON_Function:
 22767                           	opt stack 0
 22768                           tblptru	equ	0xFF8
 22769                           tblptrh	equ	0xFF7
 22770                           tblptrl	equ	0xFF6
 22771                           tablat	equ	0xFF5
 22772                           prodh	equ	0xFF4
 22773                           prodl	equ	0xFF3
 22774                           intcon	equ	0xFF2
 22775                           postinc0	equ	0xFEE
 22776                           wreg	equ	0xFE8
 22777                           postdec1	equ	0xFE5
 22778                           fsr1h	equ	0xFE2
 22779                           fsr1l	equ	0xFE1
 22780                           indf2	equ	0xFDF
 22781                           postinc2	equ	0xFDE
 22782                           postdec2	equ	0xFDD
 22783                           fsr2h	equ	0xFDA
 22784                           fsr2l	equ	0xFD9
 22785                           status	equ	0xFD8
 22786                           
 22787 ;; *************** function _Pitch_Feedback *****************
 22788 ;; Defined at:
 22789 ;;		line 627 in file "ERROR_HANDLING.c"
 22790 ;; Parameters:    Size  Location     Type
 22791 ;;		None
 22792 ;; Auto vars:     Size  Location     Type
 22793 ;;		None
 22794 ;; Return value:  Size  Location     Type
 22795 ;;                  1    wreg      void 
 22796 ;; Registers used:
 22797 ;;		wreg, status,2, status,0, cstack
 22798 ;; Tracked objects:
 22799 ;;		On entry : 0/0
 22800 ;;		On exit  : 0/0
 22801 ;;		Unchanged: 0/0
 22802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22807 ;;Total ram usage:        0 bytes
 22808 ;; Hardware stack levels used:    1
 22809 ;; Hardware stack levels required when called:    4
 22810 ;; This function calls:
 22811 ;;		_int_eeprom_write
 22812 ;; This function is called by:
 22813 ;;		_Error_Checking_One_Second
 22814 ;; This function uses a non-reentrant model
 22815 ;;
 22816                           
 22817                           	psect	text66
 22818  01A7CA                     __ptext66:
 22819                           	opt stack 0
 22820  01A7CA                     _Pitch_Feedback:
 22821                           	opt stack 24
 22822                           
 22823                           ;ERROR_HANDLING.c: 629: if(RB1 == 0 && RB0 == 1)
 22824                           
 22825                           ; BSR set to: 3
 22826                           ;incstack = 0
 22827  01A7CA  A281               	btfss	3969,1,c	;volatile
 22828  01A7CC  A081               	btfss	3969,0,c	;volatile
 22829  01A7CE  D01B               	goto	l6309
 22830                           
 22831                           ;ERROR_HANDLING.c: 630: {
 22832                           ;ERROR_HANDLING.c: 631: Pitch_FB_Error_counter++;
 22833  01A7D0  0101               	movlb	1	; () banked
 22834  01A7D2  2B76               	incf	_Pitch_FB_Error_counter& (0+255),f,b
 22835                           
 22836                           ; BSR set to: 1
 22837                           ;ERROR_HANDLING.c: 632: if(Pitch_FB_Error_counter >= 5)
 22838  01A7D4  0E04               	movlw	4
 22839  01A7D6  0101               	movlb	1	; () banked
 22840  01A7D8  6576               	cpfsgt	_Pitch_FB_Error_counter& (0+255),b
 22841  01A7DA  0012               	return	
 22842                           
 22843                           ; BSR set to: 1
 22844                           ;ERROR_HANDLING.c: 633: {
 22845                           ;ERROR_HANDLING.c: 634: Pitch_FB_Error_counter = 0;
 22846  01A7DC  0E00               	movlw	0
 22847  01A7DE  0101               	movlb	1	; () banked
 22848  01A7E0  6F76               	movwf	_Pitch_FB_Error_counter& (0+255),b
 22849                           
 22850                           ;ERROR_HANDLING.c: 635: Pitch_FB_Error_Flag = 1;
 22851  01A7E2  0E01               	movlw	1
 22852  01A7E4  0100               	movlb	0	; () banked
 22853  01A7E6  6FEA               	movwf	_Pitch_FB_Error_Flag& (0+255),b
 22854                           
 22855                           ;ERROR_HANDLING.c: 636: Errors = PITCH_FB;
 22856  01A7E8  0E15               	movlw	21
 22857  01A7EA  6E1B               	movwf	_Errors,c
 22858                           
 22859                           ; BSR set to: 0
 22860                           ;ERROR_HANDLING.c: 637: int_eeprom_write((0x02),1);
 22861  01A7EC  0E00               	movlw	0
 22862  01A7EE  0100               	movlb	0	; () banked
 22863  01A7F0  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 22864  01A7F2  0E02               	movlw	2
 22865  01A7F4  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 22866  01A7F6  0E00               	movlw	0
 22867  01A7F8  0100               	movlb	0	; () banked
 22868  01A7FA  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 22869  01A7FC  0E01               	movlw	1
 22870  01A7FE  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 22871  01A800  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 22872                           
 22873                           ;ERROR_HANDLING.c: 638: }
 22874                           ;ERROR_HANDLING.c: 639: }
 22875  01A804  0012               	return	
 22876  01A806                     l6309:
 22877                           
 22878                           ;ERROR_HANDLING.c: 640: else if(RB1 == 1 && RB0 == 1)
 22879  01A806  A281               	btfss	3969,1,c	;volatile
 22880  01A808  0012               	return	
 22881  01A80A  A081               	btfss	3969,0,c	;volatile
 22882  01A80C  0012               	return	
 22883                           
 22884                           ;ERROR_HANDLING.c: 641: {
 22885                           ;ERROR_HANDLING.c: 642: Pitch_FB_Error_counter = 0;
 22886  01A80E  0E00               	movlw	0
 22887  01A810  0101               	movlb	1	; () banked
 22888  01A812  6F76               	movwf	_Pitch_FB_Error_counter& (0+255),b
 22889                           
 22890                           ;ERROR_HANDLING.c: 643: Pitch_FB_Error_Flag = 0;
 22891  01A814  0E00               	movlw	0
 22892  01A816  0100               	movlb	0	; () banked
 22893  01A818  6FEA               	movwf	_Pitch_FB_Error_Flag& (0+255),b
 22894                           
 22895                           ; BSR set to: 0
 22896                           ;ERROR_HANDLING.c: 644: int_eeprom_write((0x02),0);
 22897  01A81A  0E00               	movlw	0
 22898  01A81C  0100               	movlb	0	; () banked
 22899  01A81E  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 22900  01A820  0E02               	movlw	2
 22901  01A822  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 22902  01A824  0E00               	movlw	0
 22903  01A826  0100               	movlb	0	; () banked
 22904  01A828  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 22905  01A82A  0E00               	movlw	0
 22906  01A82C  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 22907  01A82E  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 22908  01A832  0012               	return	
 22909  01A834                     __end_of_Pitch_Feedback:
 22910                           	opt stack 0
 22911                           tblptru	equ	0xFF8
 22912                           tblptrh	equ	0xFF7
 22913                           tblptrl	equ	0xFF6
 22914                           tablat	equ	0xFF5
 22915                           prodh	equ	0xFF4
 22916                           prodl	equ	0xFF3
 22917                           intcon	equ	0xFF2
 22918                           postinc0	equ	0xFEE
 22919                           wreg	equ	0xFE8
 22920                           postdec1	equ	0xFE5
 22921                           fsr1h	equ	0xFE2
 22922                           fsr1l	equ	0xFE1
 22923                           indf2	equ	0xFDF
 22924                           postinc2	equ	0xFDE
 22925                           postdec2	equ	0xFDD
 22926                           fsr2h	equ	0xFDA
 22927                           fsr2l	equ	0xFD9
 22928                           status	equ	0xFD8
 22929                           
 22930 ;; *************** function _Motor_Slip_Cal *****************
 22931 ;; Defined at:
 22932 ;;		line 24 in file "SLIP_CALCULATIONS.c"
 22933 ;; Parameters:    Size  Location     Type
 22934 ;;		None
 22935 ;; Auto vars:     Size  Location     Type
 22936 ;;		None
 22937 ;; Return value:  Size  Location     Type
 22938 ;;                  1    wreg      void 
 22939 ;; Registers used:
 22940 ;;		wreg, status,2, status,0, cstack
 22941 ;; Tracked objects:
 22942 ;;		On entry : 0/0
 22943 ;;		On exit  : 0/0
 22944 ;;		Unchanged: 0/0
 22945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22950 ;;Total ram usage:        0 bytes
 22951 ;; Hardware stack levels used:    1
 22952 ;; Hardware stack levels required when called:    5
 22953 ;; This function calls:
 22954 ;;		___ftadd
 22955 ;;		___ftdiv
 22956 ;;		___ftmul
 22957 ;;		___ftneg
 22958 ;;		___lbtoft
 22959 ;; This function is called by:
 22960 ;;		_Error_Checking_One_Second
 22961 ;; This function uses a non-reentrant model
 22962 ;;
 22963                           
 22964                           	psect	text67
 22965  018BA8                     __ptext67:
 22966                           	opt stack 0
 22967  018BA8                     _Motor_Slip_Cal:
 22968                           	opt stack 23
 22969                           
 22970                           ;SLIP_CALCULATIONS.c: 26: if(Turbine_state == RAMPUP_STATE)
 22971                           
 22972                           ;incstack = 0
 22973  018BA8  0100               	movlb	0	; () banked
 22974  018BAA  05F0               	decf	_Turbine_state& (0+255),w,b
 22975  018BAC  A4D8               	btfss	status,2,c
 22976  018BAE  D009               	goto	l21380
 22977                           
 22978                           ; BSR set to: 0
 22979                           ;SLIP_CALCULATIONS.c: 27: {
 22980                           ;SLIP_CALCULATIONS.c: 28: Mot_Frequency = Desired_Frequency;
 22981  018BB0  5016               	movf	_Desired_Frequency,w,c
 22982  018BB2  EC35  F0D7         	call	___lbtoft
 22983  018BB6  C068  F5F9         	movff	?___lbtoft,_Mot_Frequency
 22984  018BBA  C069  F5FA         	movff	?___lbtoft+1,_Mot_Frequency+1
 22985  018BBE  C06A  F5FB         	movff	?___lbtoft+2,_Mot_Frequency+2
 22986  018BC2                     l21380:
 22987                           
 22988                           ;SLIP_CALCULATIONS.c: 29: }
 22989                           ;SLIP_CALCULATIONS.c: 30: if(Turbine_state == RUNNING_STATE)
 22990  018BC2  0E02               	movlw	2
 22991  018BC4  0100               	movlb	0	; () banked
 22992  018BC6  19F0               	xorwf	_Turbine_state& (0+255),w,b
 22993  018BC8  A4D8               	btfss	status,2,c
 22994  018BCA  D009               	goto	l21384
 22995                           
 22996                           ; BSR set to: 0
 22997                           ;SLIP_CALCULATIONS.c: 31: {
 22998                           ;SLIP_CALCULATIONS.c: 32: Mot_Frequency = 50;
 22999  018BCC  0E00               	movlw	0
 23000  018BCE  0105               	movlb	5	; () banked
 23001  018BD0  6FF9               	movwf	_Mot_Frequency& (0+255),b
 23002  018BD2  0E48               	movlw	72
 23003  018BD4  0105               	movlb	5	; () banked
 23004  018BD6  6FFA               	movwf	(_Mot_Frequency+1)& (0+255),b
 23005  018BD8  0E42               	movlw	66
 23006  018BDA  0105               	movlb	5	; () banked
 23007  018BDC  6FFB               	movwf	(_Mot_Frequency+2)& (0+255),b
 23008  018BDE                     l21384:
 23009                           
 23010                           ;SLIP_CALCULATIONS.c: 33: }
 23011                           ;SLIP_CALCULATIONS.c: 34: Gen_Theory = 120 * Mot_Frequency / (6);
 23012  018BDE  0E00               	movlw	0
 23013  018BE0  0100               	movlb	0	; () banked
 23014  018BE2  6F77               	movwf	___ftmul@f2& (0+255),b
 23015  018BE4  0EF0               	movlw	240
 23016  018BE6  0100               	movlb	0	; () banked
 23017  018BE8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 23018  018BEA  0E42               	movlw	66
 23019  018BEC  0100               	movlb	0	; () banked
 23020  018BEE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 23021  018BF0  C5F9  F074         	movff	_Mot_Frequency,___ftmul@f1
 23022  018BF4  C5FA  F075         	movff	_Mot_Frequency+1,___ftmul@f1+1
 23023  018BF8  C5FB  F076         	movff	_Mot_Frequency+2,___ftmul@f1+2
 23024  018BFC  EC00  F0C1         	call	___ftmul	;wreg free
 23025  018C00  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 23026  018C04  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 23027  018C08  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 23028  018C0C  0E00               	movlw	0
 23029  018C0E  0100               	movlb	0	; () banked
 23030  018C10  6FA8               	movwf	___ftdiv@f2& (0+255),b
 23031  018C12  0EC0               	movlw	192
 23032  018C14  0100               	movlb	0	; () banked
 23033  018C16  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 23034  018C18  0E40               	movlw	64
 23035  018C1A  0100               	movlb	0	; () banked
 23036  018C1C  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 23037  018C1E  ECAF  F0C1         	call	___ftdiv	;wreg free
 23038  018C22  C0A5  F215         	movff	?___ftdiv,_Gen_Theory
 23039  018C26  C0A6  F216         	movff	?___ftdiv+1,_Gen_Theory+1
 23040  018C2A  C0A7  F217         	movff	?___ftdiv+2,_Gen_Theory+2
 23041                           
 23042                           ;SLIP_CALCULATIONS.c: 36: Motor_slip_1 = (Generator_RPM_FLT - Gen_Theory)/Gen_Theory;
 23043  018C2E  C004  F090         	movff	_Generator_RPM_FLT,___ftadd@f2
 23044  018C32  C005  F091         	movff	_Generator_RPM_FLT+1,___ftadd@f2+1
 23045  018C36  C006  F092         	movff	_Generator_RPM_FLT+2,___ftadd@f2+2
 23046  018C3A  C215  F083         	movff	_Gen_Theory,___ftneg@f1
 23047  018C3E  C216  F084         	movff	_Gen_Theory+1,___ftneg@f1+1
 23048  018C42  C217  F085         	movff	_Gen_Theory+2,___ftneg@f1+2
 23049  018C46  EC1D  F0D7         	call	___ftneg	;wreg free
 23050  018C4A  C083  F08D         	movff	?___ftneg,___ftadd@f1
 23051  018C4E  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 23052  018C52  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 23053  018C56  ECBE  F0B2         	call	___ftadd	;wreg free
 23054  018C5A  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 23055  018C5E  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 23056  018C62  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 23057  018C66  C215  F0A8         	movff	_Gen_Theory,___ftdiv@f2
 23058  018C6A  C216  F0A9         	movff	_Gen_Theory+1,___ftdiv@f2+1
 23059  018C6E  C217  F0AA         	movff	_Gen_Theory+2,___ftdiv@f2+2
 23060  018C72  ECAF  F0C1         	call	___ftdiv	;wreg free
 23061  018C76  C0A5  F588         	movff	?___ftdiv,_Motor_slip_1
 23062  018C7A  C0A6  F589         	movff	?___ftdiv+1,_Motor_slip_1+1
 23063  018C7E  C0A7  F58A         	movff	?___ftdiv+2,_Motor_slip_1+2
 23064                           
 23065                           ;SLIP_CALCULATIONS.c: 37: Motor_slip = Motor_slip_1 * 100;
 23066  018C82  C588  F074         	movff	_Motor_slip_1,___ftmul@f1
 23067  018C86  C589  F075         	movff	_Motor_slip_1+1,___ftmul@f1+1
 23068  018C8A  C58A  F076         	movff	_Motor_slip_1+2,___ftmul@f1+2
 23069  018C8E  0E00               	movlw	0
 23070  018C90  0100               	movlb	0	; () banked
 23071  018C92  6F77               	movwf	___ftmul@f2& (0+255),b
 23072  018C94  0EC8               	movlw	200
 23073  018C96  0100               	movlb	0	; () banked
 23074  018C98  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 23075  018C9A  0E42               	movlw	66
 23076  018C9C  0100               	movlb	0	; () banked
 23077  018C9E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 23078  018CA0  EC00  F0C1         	call	___ftmul	;wreg free
 23079  018CA4  C074  F0CA         	movff	?___ftmul,_Motor_slip
 23080  018CA8  C075  F0CB         	movff	?___ftmul+1,_Motor_slip+1
 23081  018CAC  C076  F0CC         	movff	?___ftmul+2,_Motor_slip+2
 23082  018CB0  0012               	return		;funcret
 23083  018CB2                     __end_of_Motor_Slip_Cal:
 23084                           	opt stack 0
 23085                           tblptru	equ	0xFF8
 23086                           tblptrh	equ	0xFF7
 23087                           tblptrl	equ	0xFF6
 23088                           tablat	equ	0xFF5
 23089                           prodh	equ	0xFF4
 23090                           prodl	equ	0xFF3
 23091                           intcon	equ	0xFF2
 23092                           postinc0	equ	0xFEE
 23093                           wreg	equ	0xFE8
 23094                           postdec1	equ	0xFE5
 23095                           fsr1h	equ	0xFE2
 23096                           fsr1l	equ	0xFE1
 23097                           indf2	equ	0xFDF
 23098                           postinc2	equ	0xFDE
 23099                           postdec2	equ	0xFDD
 23100                           fsr2h	equ	0xFDA
 23101                           fsr2l	equ	0xFD9
 23102                           status	equ	0xFD8
 23103                           
 23104 ;; *************** function ___lbtoft *****************
 23105 ;; Defined at:
 23106 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbtoft.c"
 23107 ;; Parameters:    Size  Location     Type
 23108 ;;  c               1    wreg     unsigned char 
 23109 ;; Auto vars:     Size  Location     Type
 23110 ;;  c               1   11[BANK0 ] unsigned char 
 23111 ;; Return value:  Size  Location     Type
 23112 ;;                  3    8[BANK0 ] float 
 23113 ;; Registers used:
 23114 ;;		wreg, status,2, status,0, cstack
 23115 ;; Tracked objects:
 23116 ;;		On entry : 0/0
 23117 ;;		On exit  : 0/0
 23118 ;;		Unchanged: 0/0
 23119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23120 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23123 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23124 ;;Total ram usage:        4 bytes
 23125 ;; Hardware stack levels used:    1
 23126 ;; Hardware stack levels required when called:    4
 23127 ;; This function calls:
 23128 ;;		___ftpack
 23129 ;; This function is called by:
 23130 ;;		_Motor_Slip_Cal
 23131 ;; This function uses a non-reentrant model
 23132 ;;
 23133                           
 23134                           	psect	text68
 23135  01AE6A                     __ptext68:
 23136                           	opt stack 0
 23137  01AE6A                     ___lbtoft:
 23138                           	opt stack 23
 23139                           
 23140                           ;incstack = 0
 23141                           ;___lbtoft@c stored from wreg
 23142  01AE6A  0100               	movlb	0	; () banked
 23143  01AE6C  6F6B               	movwf	___lbtoft@c& (0+255),b
 23144  01AE6E  0100               	movlb	0	; () banked
 23145  01AE70  516B               	movf	___lbtoft@c& (0+255),w,b
 23146  01AE72  0100               	movlb	0	; () banked
 23147  01AE74  6F60               	movwf	___ftpack@arg& (0+255),b
 23148  01AE76  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
 23149  01AE78  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 23150  01AE7A  0E8E               	movlw	142
 23151  01AE7C  0100               	movlb	0	; () banked
 23152  01AE7E  6F63               	movwf	___ftpack@exp& (0+255),b
 23153  01AE80  0E00               	movlw	0
 23154  01AE82  0100               	movlb	0	; () banked
 23155  01AE84  6F64               	movwf	___ftpack@sign& (0+255),b
 23156  01AE86  EC4E  F0C5         	call	___ftpack	;wreg free
 23157  01AE8A  C060  F068         	movff	?___ftpack,?___lbtoft
 23158  01AE8E  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
 23159  01AE92  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
 23160  01AE96  0012               	return	
 23161  01AE98                     __end_of___lbtoft:
 23162                           	opt stack 0
 23163                           tblptru	equ	0xFF8
 23164                           tblptrh	equ	0xFF7
 23165                           tblptrl	equ	0xFF6
 23166                           tablat	equ	0xFF5
 23167                           prodh	equ	0xFF4
 23168                           prodl	equ	0xFF3
 23169                           intcon	equ	0xFF2
 23170                           postinc0	equ	0xFEE
 23171                           wreg	equ	0xFE8
 23172                           postdec1	equ	0xFE5
 23173                           fsr1h	equ	0xFE2
 23174                           fsr1l	equ	0xFE1
 23175                           indf2	equ	0xFDF
 23176                           postinc2	equ	0xFDE
 23177                           postdec2	equ	0xFDD
 23178                           fsr2h	equ	0xFDA
 23179                           fsr2l	equ	0xFD9
 23180                           status	equ	0xFD8
 23181                           
 23182 ;; *************** function _Grid_UV *****************
 23183 ;; Defined at:
 23184 ;;		line 221 in file "ERROR_HANDLING.c"
 23185 ;; Parameters:    Size  Location     Type
 23186 ;;		None
 23187 ;; Auto vars:     Size  Location     Type
 23188 ;;		None
 23189 ;; Return value:  Size  Location     Type
 23190 ;;                  1    wreg      void 
 23191 ;; Registers used:
 23192 ;;		wreg, status,2, status,0, cstack
 23193 ;; Tracked objects:
 23194 ;;		On entry : 0/0
 23195 ;;		On exit  : 0/0
 23196 ;;		Unchanged: 0/0
 23197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23202 ;;Total ram usage:        0 bytes
 23203 ;; Hardware stack levels used:    1
 23204 ;; Hardware stack levels required when called:    4
 23205 ;; This function calls:
 23206 ;;		___ftge
 23207 ;; This function is called by:
 23208 ;;		_Error_Checking_One_Second
 23209 ;; This function uses a non-reentrant model
 23210 ;;
 23211                           
 23212                           	psect	text69
 23213  017DCA                     __ptext69:
 23214                           	opt stack 0
 23215  017DCA                     _Grid_UV:
 23216                           	opt stack 24
 23217                           
 23218                           ;ERROR_HANDLING.c: 223: if(Turbine_state == STARTUP_STATE)
 23219                           
 23220                           ;incstack = 0
 23221  017DCA  0100               	movlb	0	; () banked
 23222  017DCC  51F0               	movf	_Turbine_state& (0+255),w,b
 23223  017DCE  A4D8               	btfss	status,2,c
 23224  017DD0  D055               	goto	l21186
 23225                           
 23226                           ; BSR set to: 0
 23227                           ;ERROR_HANDLING.c: 224: {
 23228                           ;ERROR_HANDLING.c: 225: if(R_Volt <= (370) || Y_Volt <= (370) || B_Volt <= (370))
 23229  017DD2  0E00               	movlw	0
 23230  017DD4  0100               	movlb	0	; () banked
 23231  017DD6  6F99               	movwf	___ftge@ff1& (0+255),b
 23232  017DD8  0EB9               	movlw	185
 23233  017DDA  0100               	movlb	0	; () banked
 23234  017DDC  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23235  017DDE  0E43               	movlw	67
 23236  017DE0  0100               	movlb	0	; () banked
 23237  017DE2  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23238  017DE4  C007  F09C         	movff	_R_Volt,___ftge@ff2
 23239  017DE8  C008  F09D         	movff	_R_Volt+1,___ftge@ff2+1
 23240  017DEC  C009  F09E         	movff	_R_Volt+2,___ftge@ff2+2
 23241  017DF0  EC4B  F0CB         	call	___ftge	;wreg free
 23242  017DF4  0100               	movlb	0	; () banked
 23243  017DF6  B0D8               	btfsc	status,0,c
 23244  017DF8  D028               	goto	l21176
 23245                           
 23246                           ; BSR set to: 0
 23247  017DFA  0E00               	movlw	0
 23248  017DFC  0100               	movlb	0	; () banked
 23249  017DFE  6F99               	movwf	___ftge@ff1& (0+255),b
 23250  017E00  0EB9               	movlw	185
 23251  017E02  0100               	movlb	0	; () banked
 23252  017E04  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23253  017E06  0E43               	movlw	67
 23254  017E08  0100               	movlb	0	; () banked
 23255  017E0A  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23256  017E0C  C010  F09C         	movff	_Y_Volt,___ftge@ff2
 23257  017E10  C011  F09D         	movff	_Y_Volt+1,___ftge@ff2+1
 23258  017E14  C012  F09E         	movff	_Y_Volt+2,___ftge@ff2+2
 23259  017E18  EC4B  F0CB         	call	___ftge	;wreg free
 23260  017E1C  0100               	movlb	0	; () banked
 23261  017E1E  B0D8               	btfsc	status,0,c
 23262  017E20  D014               	goto	l21176
 23263                           
 23264                           ; BSR set to: 0
 23265  017E22  0E00               	movlw	0
 23266  017E24  0100               	movlb	0	; () banked
 23267  017E26  6F99               	movwf	___ftge@ff1& (0+255),b
 23268  017E28  0EB9               	movlw	185
 23269  017E2A  0100               	movlb	0	; () banked
 23270  017E2C  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23271  017E2E  0E43               	movlw	67
 23272  017E30  0100               	movlb	0	; () banked
 23273  017E32  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23274  017E34  C001  F09C         	movff	_B_Volt,___ftge@ff2
 23275  017E38  C002  F09D         	movff	_B_Volt+1,___ftge@ff2+1
 23276  017E3C  C003  F09E         	movff	_B_Volt+2,___ftge@ff2+2
 23277  017E40  EC4B  F0CB         	call	___ftge	;wreg free
 23278  017E44  0100               	movlb	0	; () banked
 23279  017E46  A0D8               	btfss	status,0,c
 23280  017E48  D013               	goto	l21184
 23281  017E4A                     l21176:
 23282                           
 23283                           ; BSR set to: 0
 23284                           ;ERROR_HANDLING.c: 226: {
 23285                           ;ERROR_HANDLING.c: 227: Grid_UV_Counter++;
 23286  017E4A  0101               	movlb	1	; () banked
 23287  017E4C  2B67               	incf	_Grid_UV_Counter& (0+255),f,b
 23288                           
 23289                           ; BSR set to: 1
 23290                           ;ERROR_HANDLING.c: 228: if(Grid_UV_Counter >= 2)
 23291  017E4E  0E01               	movlw	1
 23292  017E50  0101               	movlb	1	; () banked
 23293  017E52  6567               	cpfsgt	_Grid_UV_Counter& (0+255),b
 23294  017E54  D009               	goto	l21182
 23295                           
 23296                           ; BSR set to: 1
 23297                           ;ERROR_HANDLING.c: 229: {
 23298                           ;ERROR_HANDLING.c: 230: Grid_UV_Counter = 0;
 23299  017E56  0E00               	movlw	0
 23300  017E58  0101               	movlb	1	; () banked
 23301  017E5A  6F67               	movwf	_Grid_UV_Counter& (0+255),b
 23302                           
 23303                           ;ERROR_HANDLING.c: 231: Grid_Und_voltage = 1;
 23304  017E5C  0E01               	movlw	1
 23305  017E5E  0100               	movlb	0	; () banked
 23306  017E60  6FE7               	movwf	_Grid_Und_voltage& (0+255),b
 23307                           
 23308                           ;ERROR_HANDLING.c: 232: Errors = VOLT_LOW;
 23309  017E62  0E02               	movlw	2
 23310  017E64  6E1B               	movwf	_Errors,c
 23311                           
 23312                           ;ERROR_HANDLING.c: 233: }
 23313  017E66  D00A               	goto	l21186
 23314  017E68                     l21182:
 23315                           
 23316                           ;ERROR_HANDLING.c: 234: else
 23317                           ;ERROR_HANDLING.c: 235: {
 23318                           ;ERROR_HANDLING.c: 236: Grid_Und_voltage = 0;
 23319  017E68  0E00               	movlw	0
 23320  017E6A  0100               	movlb	0	; () banked
 23321  017E6C  6FE7               	movwf	_Grid_Und_voltage& (0+255),b
 23322                           
 23323                           ; BSR set to: 0
 23324                           ;ERROR_HANDLING.c: 237: }
 23325                           ;ERROR_HANDLING.c: 238: }
 23326  017E6E  D006               	goto	l21186
 23327  017E70                     l21184:
 23328                           
 23329                           ; BSR set to: 0
 23330                           ;ERROR_HANDLING.c: 239: else
 23331                           ;ERROR_HANDLING.c: 240: {
 23332                           ;ERROR_HANDLING.c: 241: Grid_Und_voltage = 0;
 23333  017E70  0E00               	movlw	0
 23334  017E72  0100               	movlb	0	; () banked
 23335  017E74  6FE7               	movwf	_Grid_Und_voltage& (0+255),b
 23336                           
 23337                           ;ERROR_HANDLING.c: 242: Grid_UV_Counter = 0;
 23338  017E76  0E00               	movlw	0
 23339  017E78  0101               	movlb	1	; () banked
 23340  017E7A  6F67               	movwf	_Grid_UV_Counter& (0+255),b
 23341  017E7C                     l21186:
 23342                           
 23343                           ;ERROR_HANDLING.c: 243: }
 23344                           ;ERROR_HANDLING.c: 244: }
 23345                           ;ERROR_HANDLING.c: 245: if(Turbine_state == RUNNING_STATE)
 23346  017E7C  0E02               	movlw	2
 23347  017E7E  0100               	movlb	0	; () banked
 23348  017E80  19F0               	xorwf	_Turbine_state& (0+255),w,b
 23349  017E82  A4D8               	btfss	status,2,c
 23350  017E84  0012               	return	
 23351                           
 23352                           ; BSR set to: 0
 23353                           ;ERROR_HANDLING.c: 246: {
 23354                           ;ERROR_HANDLING.c: 247: if(R_Volt <= (370) || Y_Volt <= (370) || B_Volt <= (370))
 23355  017E86  0E00               	movlw	0
 23356  017E88  0100               	movlb	0	; () banked
 23357  017E8A  6F99               	movwf	___ftge@ff1& (0+255),b
 23358  017E8C  0EB9               	movlw	185
 23359  017E8E  0100               	movlb	0	; () banked
 23360  017E90  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23361  017E92  0E43               	movlw	67
 23362  017E94  0100               	movlb	0	; () banked
 23363  017E96  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23364  017E98  C007  F09C         	movff	_R_Volt,___ftge@ff2
 23365  017E9C  C008  F09D         	movff	_R_Volt+1,___ftge@ff2+1
 23366  017EA0  C009  F09E         	movff	_R_Volt+2,___ftge@ff2+2
 23367  017EA4  EC4B  F0CB         	call	___ftge	;wreg free
 23368  017EA8  0100               	movlb	0	; () banked
 23369  017EAA  B0D8               	btfsc	status,0,c
 23370  017EAC  D028               	goto	l21194
 23371                           
 23372                           ; BSR set to: 0
 23373  017EAE  0E00               	movlw	0
 23374  017EB0  0100               	movlb	0	; () banked
 23375  017EB2  6F99               	movwf	___ftge@ff1& (0+255),b
 23376  017EB4  0EB9               	movlw	185
 23377  017EB6  0100               	movlb	0	; () banked
 23378  017EB8  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23379  017EBA  0E43               	movlw	67
 23380  017EBC  0100               	movlb	0	; () banked
 23381  017EBE  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23382  017EC0  C010  F09C         	movff	_Y_Volt,___ftge@ff2
 23383  017EC4  C011  F09D         	movff	_Y_Volt+1,___ftge@ff2+1
 23384  017EC8  C012  F09E         	movff	_Y_Volt+2,___ftge@ff2+2
 23385  017ECC  EC4B  F0CB         	call	___ftge	;wreg free
 23386  017ED0  0100               	movlb	0	; () banked
 23387  017ED2  B0D8               	btfsc	status,0,c
 23388  017ED4  D014               	goto	l21194
 23389                           
 23390                           ; BSR set to: 0
 23391  017ED6  0E00               	movlw	0
 23392  017ED8  0100               	movlb	0	; () banked
 23393  017EDA  6F99               	movwf	___ftge@ff1& (0+255),b
 23394  017EDC  0EB9               	movlw	185
 23395  017EDE  0100               	movlb	0	; () banked
 23396  017EE0  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23397  017EE2  0E43               	movlw	67
 23398  017EE4  0100               	movlb	0	; () banked
 23399  017EE6  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23400  017EE8  C001  F09C         	movff	_B_Volt,___ftge@ff2
 23401  017EEC  C002  F09D         	movff	_B_Volt+1,___ftge@ff2+1
 23402  017EF0  C003  F09E         	movff	_B_Volt+2,___ftge@ff2+2
 23403  017EF4  EC4B  F0CB         	call	___ftge	;wreg free
 23404  017EF8  0100               	movlb	0	; () banked
 23405  017EFA  A0D8               	btfss	status,0,c
 23406  017EFC  D013               	goto	l21202
 23407  017EFE                     l21194:
 23408                           
 23409                           ; BSR set to: 0
 23410                           ;ERROR_HANDLING.c: 248: {
 23411                           ;ERROR_HANDLING.c: 249: Grid_UV_Counter++;
 23412  017EFE  0101               	movlb	1	; () banked
 23413  017F00  2B67               	incf	_Grid_UV_Counter& (0+255),f,b
 23414                           
 23415                           ; BSR set to: 1
 23416                           ;ERROR_HANDLING.c: 250: if(Grid_UV_Counter >= 10)
 23417  017F02  0E09               	movlw	9
 23418  017F04  0101               	movlb	1	; () banked
 23419  017F06  6567               	cpfsgt	_Grid_UV_Counter& (0+255),b
 23420  017F08  D009               	goto	l21200
 23421                           
 23422                           ; BSR set to: 1
 23423                           ;ERROR_HANDLING.c: 251: {
 23424                           ;ERROR_HANDLING.c: 252: Grid_UV_Counter = 0;
 23425  017F0A  0E00               	movlw	0
 23426  017F0C  0101               	movlb	1	; () banked
 23427  017F0E  6F67               	movwf	_Grid_UV_Counter& (0+255),b
 23428                           
 23429                           ;ERROR_HANDLING.c: 253: Grid_Und_voltage = 1;
 23430  017F10  0E01               	movlw	1
 23431  017F12  0100               	movlb	0	; () banked
 23432  017F14  6FE7               	movwf	_Grid_Und_voltage& (0+255),b
 23433                           
 23434                           ;ERROR_HANDLING.c: 254: Errors = VOLT_LOW;
 23435  017F16  0E02               	movlw	2
 23436  017F18  6E1B               	movwf	_Errors,c
 23437                           
 23438                           ;ERROR_HANDLING.c: 255: }
 23439  017F1A  0012               	return	
 23440  017F1C                     l21200:
 23441                           
 23442                           ;ERROR_HANDLING.c: 256: else
 23443                           ;ERROR_HANDLING.c: 257: {
 23444                           ;ERROR_HANDLING.c: 258: Grid_Und_voltage = 0;
 23445  017F1C  0E00               	movlw	0
 23446  017F1E  0100               	movlb	0	; () banked
 23447  017F20  6FE7               	movwf	_Grid_Und_voltage& (0+255),b
 23448                           
 23449                           ; BSR set to: 0
 23450                           ;ERROR_HANDLING.c: 259: }
 23451                           ;ERROR_HANDLING.c: 260: }
 23452  017F22  0012               	return	
 23453  017F24                     l21202:
 23454                           
 23455                           ; BSR set to: 0
 23456                           ;ERROR_HANDLING.c: 261: else
 23457                           ;ERROR_HANDLING.c: 262: {
 23458                           ;ERROR_HANDLING.c: 263: Grid_Und_voltage = 0;
 23459  017F24  0E00               	movlw	0
 23460  017F26  0100               	movlb	0	; () banked
 23461  017F28  6FE7               	movwf	_Grid_Und_voltage& (0+255),b
 23462                           
 23463                           ;ERROR_HANDLING.c: 264: Grid_UV_Counter = 0;
 23464  017F2A  0E00               	movlw	0
 23465  017F2C  0101               	movlb	1	; () banked
 23466  017F2E  6F67               	movwf	_Grid_UV_Counter& (0+255),b
 23467                           
 23468                           ; BSR set to: 1
 23469  017F30  0012               	return	
 23470  017F32                     __end_of_Grid_UV:
 23471                           	opt stack 0
 23472                           tblptru	equ	0xFF8
 23473                           tblptrh	equ	0xFF7
 23474                           tblptrl	equ	0xFF6
 23475                           tablat	equ	0xFF5
 23476                           prodh	equ	0xFF4
 23477                           prodl	equ	0xFF3
 23478                           intcon	equ	0xFF2
 23479                           postinc0	equ	0xFEE
 23480                           wreg	equ	0xFE8
 23481                           postdec1	equ	0xFE5
 23482                           fsr1h	equ	0xFE2
 23483                           fsr1l	equ	0xFE1
 23484                           indf2	equ	0xFDF
 23485                           postinc2	equ	0xFDE
 23486                           postdec2	equ	0xFDD
 23487                           fsr2h	equ	0xFDA
 23488                           fsr2l	equ	0xFD9
 23489                           status	equ	0xFD8
 23490                           
 23491 ;; *************** function _Grid_Phase_Sequence *****************
 23492 ;; Defined at:
 23493 ;;		line 503 in file "ERROR_HANDLING.c"
 23494 ;; Parameters:    Size  Location     Type
 23495 ;;		None
 23496 ;; Auto vars:     Size  Location     Type
 23497 ;;		None
 23498 ;; Return value:  Size  Location     Type
 23499 ;;                  1    wreg      void 
 23500 ;; Registers used:
 23501 ;;		wreg, status,2, status,0
 23502 ;; Tracked objects:
 23503 ;;		On entry : 0/0
 23504 ;;		On exit  : 0/0
 23505 ;;		Unchanged: 0/0
 23506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23511 ;;Total ram usage:        0 bytes
 23512 ;; Hardware stack levels used:    1
 23513 ;; Hardware stack levels required when called:    3
 23514 ;; This function calls:
 23515 ;;		Nothing
 23516 ;; This function is called by:
 23517 ;;		_Error_Checking_One_Second
 23518 ;; This function uses a non-reentrant model
 23519 ;;
 23520                           
 23521                           	psect	text70
 23522  01B00A                     __ptext70:
 23523                           	opt stack 0
 23524  01B00A                     _Grid_Phase_Sequence:
 23525                           	opt stack 25
 23526                           
 23527                           ;ERROR_HANDLING.c: 505: if(Phase_Sequence_Ok == 1)
 23528                           
 23529                           ;incstack = 0
 23530  01B00A  041E               	decf	_Phase_Sequence_Ok,w,c
 23531  01B00C  A4D8               	btfss	status,2,c
 23532  01B00E  D004               	goto	l21292
 23533                           
 23534                           ;ERROR_HANDLING.c: 506: {
 23535                           ;ERROR_HANDLING.c: 507: Grid_Phase_Sequence_Error = 0;
 23536  01B010  0E00               	movlw	0
 23537  01B012  0100               	movlb	0	; () banked
 23538  01B014  6FE6               	movwf	_Grid_Phase_Sequence_Error& (0+255),b
 23539                           
 23540                           ;ERROR_HANDLING.c: 508: }
 23541  01B016  0012               	return	
 23542  01B018                     l21292:
 23543                           
 23544                           ;ERROR_HANDLING.c: 509: else if(Phase_Sequence_Ok == 0)
 23545  01B018  501E               	movf	_Phase_Sequence_Ok,w,c
 23546  01B01A  A4D8               	btfss	status,2,c
 23547  01B01C  0012               	return	
 23548                           
 23549                           ;ERROR_HANDLING.c: 510: {
 23550                           ;ERROR_HANDLING.c: 511: Grid_Phase_Sequence_Error = 1;
 23551  01B01E  0E01               	movlw	1
 23552  01B020  0100               	movlb	0	; () banked
 23553  01B022  6FE6               	movwf	_Grid_Phase_Sequence_Error& (0+255),b
 23554                           
 23555                           ;ERROR_HANDLING.c: 512: Errors = PHASE_SEQ;
 23556  01B024  0E0D               	movlw	13
 23557  01B026  6E1B               	movwf	_Errors,c
 23558                           
 23559                           ; BSR set to: 0
 23560  01B028  0012               	return	
 23561  01B02A                     __end_of_Grid_Phase_Sequence:
 23562                           	opt stack 0
 23563                           tblptru	equ	0xFF8
 23564                           tblptrh	equ	0xFF7
 23565                           tblptrl	equ	0xFF6
 23566                           tablat	equ	0xFF5
 23567                           prodh	equ	0xFF4
 23568                           prodl	equ	0xFF3
 23569                           intcon	equ	0xFF2
 23570                           postinc0	equ	0xFEE
 23571                           wreg	equ	0xFE8
 23572                           postdec1	equ	0xFE5
 23573                           fsr1h	equ	0xFE2
 23574                           fsr1l	equ	0xFE1
 23575                           indf2	equ	0xFDF
 23576                           postinc2	equ	0xFDE
 23577                           postdec2	equ	0xFDD
 23578                           fsr2h	equ	0xFDA
 23579                           fsr2l	equ	0xFD9
 23580                           status	equ	0xFD8
 23581                           
 23582 ;; *************** function _Grid_Over_Current *****************
 23583 ;; Defined at:
 23584 ;;		line 382 in file "ERROR_HANDLING.c"
 23585 ;; Parameters:    Size  Location     Type
 23586 ;;		None
 23587 ;; Auto vars:     Size  Location     Type
 23588 ;;		None
 23589 ;; Return value:  Size  Location     Type
 23590 ;;                  1    wreg      void 
 23591 ;; Registers used:
 23592 ;;		wreg, status,2, status,0, cstack
 23593 ;; Tracked objects:
 23594 ;;		On entry : 0/0
 23595 ;;		On exit  : 0/0
 23596 ;;		Unchanged: 0/0
 23597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23602 ;;Total ram usage:        0 bytes
 23603 ;; Hardware stack levels used:    1
 23604 ;; Hardware stack levels required when called:    4
 23605 ;; This function calls:
 23606 ;;		___ftge
 23607 ;; This function is called by:
 23608 ;;		_Error_Checking_One_Second
 23609 ;; This function uses a non-reentrant model
 23610 ;;
 23611                           
 23612                           	psect	text71
 23613  0185EE                     __ptext71:
 23614                           	opt stack 0
 23615  0185EE                     _Grid_Over_Current:
 23616                           	opt stack 24
 23617                           
 23618                           ;ERROR_HANDLING.c: 384: if( (Turbine_state == RAMPUP_STATE) || (Turbine_state == RUNNING
      +                          _STATE) )
 23619                           
 23620                           ;incstack = 0
 23621  0185EE  0100               	movlb	0	; () banked
 23622  0185F0  05F0               	decf	_Turbine_state& (0+255),w,b
 23623  0185F2  B4D8               	btfsc	status,2,c
 23624  0185F4  D005               	goto	l21328
 23625                           
 23626                           ; BSR set to: 0
 23627  0185F6  0E02               	movlw	2
 23628  0185F8  0100               	movlb	0	; () banked
 23629  0185FA  19F0               	xorwf	_Turbine_state& (0+255),w,b
 23630  0185FC  A4D8               	btfss	status,2,c
 23631  0185FE  D04F               	goto	l6228
 23632  018600                     l21328:
 23633                           
 23634                           ; BSR set to: 0
 23635                           ;ERROR_HANDLING.c: 385: {
 23636                           ;ERROR_HANDLING.c: 386: if(R_Curr >= (12) || Y_Curr >= (12) || B_Curr >= (12))
 23637  018600  C0CD  F099         	movff	_R_Curr,___ftge@ff1
 23638  018604  C0CE  F09A         	movff	_R_Curr+1,___ftge@ff1+1
 23639  018608  C0CF  F09B         	movff	_R_Curr+2,___ftge@ff1+2
 23640  01860C  0E00               	movlw	0
 23641  01860E  0100               	movlb	0	; () banked
 23642  018610  6F9C               	movwf	___ftge@ff2& (0+255),b
 23643  018612  0E40               	movlw	64
 23644  018614  0100               	movlb	0	; () banked
 23645  018616  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23646  018618  0E41               	movlw	65
 23647  01861A  0100               	movlb	0	; () banked
 23648  01861C  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23649  01861E  EC4B  F0CB         	call	___ftge	;wreg free
 23650  018622  0100               	movlb	0	; () banked
 23651  018624  B0D8               	btfsc	status,0,c
 23652  018626  D028               	goto	l21334
 23653                           
 23654                           ; BSR set to: 0
 23655  018628  C0D6  F099         	movff	_Y_Curr,___ftge@ff1
 23656  01862C  C0D7  F09A         	movff	_Y_Curr+1,___ftge@ff1+1
 23657  018630  C0D8  F09B         	movff	_Y_Curr+2,___ftge@ff1+2
 23658  018634  0E00               	movlw	0
 23659  018636  0100               	movlb	0	; () banked
 23660  018638  6F9C               	movwf	___ftge@ff2& (0+255),b
 23661  01863A  0E40               	movlw	64
 23662  01863C  0100               	movlb	0	; () banked
 23663  01863E  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23664  018640  0E41               	movlw	65
 23665  018642  0100               	movlb	0	; () banked
 23666  018644  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23667  018646  EC4B  F0CB         	call	___ftge	;wreg free
 23668  01864A  0100               	movlb	0	; () banked
 23669  01864C  B0D8               	btfsc	status,0,c
 23670  01864E  D014               	goto	l21334
 23671                           
 23672                           ; BSR set to: 0
 23673  018650  C0C4  F099         	movff	_B_Curr,___ftge@ff1
 23674  018654  C0C5  F09A         	movff	_B_Curr+1,___ftge@ff1+1
 23675  018658  C0C6  F09B         	movff	_B_Curr+2,___ftge@ff1+2
 23676  01865C  0E00               	movlw	0
 23677  01865E  0100               	movlb	0	; () banked
 23678  018660  6F9C               	movwf	___ftge@ff2& (0+255),b
 23679  018662  0E40               	movlw	64
 23680  018664  0100               	movlb	0	; () banked
 23681  018666  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23682  018668  0E41               	movlw	65
 23683  01866A  0100               	movlb	0	; () banked
 23684  01866C  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23685  01866E  EC4B  F0CB         	call	___ftge	;wreg free
 23686  018672  0100               	movlb	0	; () banked
 23687  018674  A0D8               	btfss	status,0,c
 23688  018676  D00E               	goto	l21340
 23689  018678                     l21334:
 23690                           
 23691                           ; BSR set to: 0
 23692                           ;ERROR_HANDLING.c: 387: {
 23693                           ;ERROR_HANDLING.c: 388: OV_Counter++;
 23694  018678  0101               	movlb	1	; () banked
 23695  01867A  2B71               	incf	_OV_Counter& (0+255),f,b
 23696                           
 23697                           ; BSR set to: 1
 23698                           ;ERROR_HANDLING.c: 389: if(OV_Counter == 1)
 23699  01867C  0101               	movlb	1	; () banked
 23700  01867E  0571               	decf	_OV_Counter& (0+255),w,b
 23701  018680  A4D8               	btfss	status,2,c
 23702  018682  D00D               	goto	l6228
 23703                           
 23704                           ; BSR set to: 1
 23705                           ;ERROR_HANDLING.c: 390: {
 23706                           ;ERROR_HANDLING.c: 391: OV_Counter = 0;
 23707  018684  0E00               	movlw	0
 23708  018686  0101               	movlb	1	; () banked
 23709  018688  6F71               	movwf	_OV_Counter& (0+255),b
 23710                           
 23711                           ;ERROR_HANDLING.c: 392: Grid_Over_current = 1;
 23712  01868A  0E01               	movlw	1
 23713  01868C  6E1C               	movwf	_Grid_Over_current,c
 23714                           
 23715                           ;ERROR_HANDLING.c: 393: Errors = CURRENT_H;
 23716  01868E  0E09               	movlw	9
 23717  018690  6E1B               	movwf	_Errors,c
 23718                           
 23719                           ; BSR set to: 1
 23720                           ;ERROR_HANDLING.c: 394: }
 23721                           ;ERROR_HANDLING.c: 396: }
 23722  018692  D005               	goto	l6228
 23723  018694                     l21340:
 23724                           
 23725                           ;ERROR_HANDLING.c: 397: else
 23726                           ;ERROR_HANDLING.c: 398: {
 23727                           ;ERROR_HANDLING.c: 399: Grid_Over_current = 0;
 23728  018694  0E00               	movlw	0
 23729  018696  6E1C               	movwf	_Grid_Over_current,c
 23730                           
 23731                           ;ERROR_HANDLING.c: 400: OV_Counter = 0;
 23732  018698  0E00               	movlw	0
 23733  01869A  0101               	movlb	1	; () banked
 23734  01869C  6F71               	movwf	_OV_Counter& (0+255),b
 23735  01869E                     l6228:
 23736                           
 23737                           ;ERROR_HANDLING.c: 401: }
 23738                           ;ERROR_HANDLING.c: 402: }
 23739                           ;ERROR_HANDLING.c: 403: if(Turbine_state == STARTUP_STATE)
 23740  01869E  0100               	movlb	0	; () banked
 23741  0186A0  51F0               	movf	_Turbine_state& (0+255),w,b
 23742  0186A2  A4D8               	btfss	status,2,c
 23743  0186A4  0012               	return	
 23744                           
 23745                           ; BSR set to: 0
 23746                           ;ERROR_HANDLING.c: 404: {
 23747                           ;ERROR_HANDLING.c: 405: if(R_Curr >= 0.5 || Y_Curr >= 0.5 || B_Curr >= 0.5)
 23748  0186A6  C0CD  F099         	movff	_R_Curr,___ftge@ff1
 23749  0186AA  C0CE  F09A         	movff	_R_Curr+1,___ftge@ff1+1
 23750  0186AE  C0CF  F09B         	movff	_R_Curr+2,___ftge@ff1+2
 23751  0186B2  0E00               	movlw	0
 23752  0186B4  0100               	movlb	0	; () banked
 23753  0186B6  6F9C               	movwf	___ftge@ff2& (0+255),b
 23754  0186B8  0E00               	movlw	0
 23755  0186BA  0100               	movlb	0	; () banked
 23756  0186BC  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23757  0186BE  0E3F               	movlw	63
 23758  0186C0  0100               	movlb	0	; () banked
 23759  0186C2  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23760  0186C4  EC4B  F0CB         	call	___ftge	;wreg free
 23761  0186C8  0100               	movlb	0	; () banked
 23762  0186CA  B0D8               	btfsc	status,0,c
 23763  0186CC  D028               	goto	l21348
 23764                           
 23765                           ; BSR set to: 0
 23766  0186CE  C0D6  F099         	movff	_Y_Curr,___ftge@ff1
 23767  0186D2  C0D7  F09A         	movff	_Y_Curr+1,___ftge@ff1+1
 23768  0186D6  C0D8  F09B         	movff	_Y_Curr+2,___ftge@ff1+2
 23769  0186DA  0E00               	movlw	0
 23770  0186DC  0100               	movlb	0	; () banked
 23771  0186DE  6F9C               	movwf	___ftge@ff2& (0+255),b
 23772  0186E0  0E00               	movlw	0
 23773  0186E2  0100               	movlb	0	; () banked
 23774  0186E4  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23775  0186E6  0E3F               	movlw	63
 23776  0186E8  0100               	movlb	0	; () banked
 23777  0186EA  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23778  0186EC  EC4B  F0CB         	call	___ftge	;wreg free
 23779  0186F0  0100               	movlb	0	; () banked
 23780  0186F2  B0D8               	btfsc	status,0,c
 23781  0186F4  D014               	goto	l21348
 23782                           
 23783                           ; BSR set to: 0
 23784  0186F6  C0C4  F099         	movff	_B_Curr,___ftge@ff1
 23785  0186FA  C0C5  F09A         	movff	_B_Curr+1,___ftge@ff1+1
 23786  0186FE  C0C6  F09B         	movff	_B_Curr+2,___ftge@ff1+2
 23787  018702  0E00               	movlw	0
 23788  018704  0100               	movlb	0	; () banked
 23789  018706  6F9C               	movwf	___ftge@ff2& (0+255),b
 23790  018708  0E00               	movlw	0
 23791  01870A  0100               	movlb	0	; () banked
 23792  01870C  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23793  01870E  0E3F               	movlw	63
 23794  018710  0100               	movlb	0	; () banked
 23795  018712  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23796  018714  EC4B  F0CB         	call	___ftge	;wreg free
 23797  018718  0100               	movlb	0	; () banked
 23798  01871A  A0D8               	btfss	status,0,c
 23799  01871C  D005               	goto	l21350
 23800  01871E                     l21348:
 23801                           
 23802                           ; BSR set to: 0
 23803                           ;ERROR_HANDLING.c: 406: {
 23804                           ;ERROR_HANDLING.c: 407: Grid_Over_current = 1;
 23805  01871E  0E01               	movlw	1
 23806  018720  6E1C               	movwf	_Grid_Over_current,c
 23807                           
 23808                           ;ERROR_HANDLING.c: 408: Errors = MEAURE_ERR;
 23809  018722  0E16               	movlw	22
 23810  018724  6E1B               	movwf	_Errors,c
 23811                           
 23812                           ;ERROR_HANDLING.c: 409: }
 23813  018726  0012               	return	
 23814  018728                     l21350:
 23815                           
 23816                           ; BSR set to: 0
 23817                           ;ERROR_HANDLING.c: 410: else
 23818                           ;ERROR_HANDLING.c: 411: {
 23819                           ;ERROR_HANDLING.c: 412: Grid_Over_current = 0;
 23820  018728  0E00               	movlw	0
 23821  01872A  6E1C               	movwf	_Grid_Over_current,c
 23822                           
 23823                           ; BSR set to: 0
 23824  01872C  0012               	return	
 23825  01872E                     __end_of_Grid_Over_Current:
 23826                           	opt stack 0
 23827                           tblptru	equ	0xFF8
 23828                           tblptrh	equ	0xFF7
 23829                           tblptrl	equ	0xFF6
 23830                           tablat	equ	0xFF5
 23831                           prodh	equ	0xFF4
 23832                           prodl	equ	0xFF3
 23833                           intcon	equ	0xFF2
 23834                           postinc0	equ	0xFEE
 23835                           wreg	equ	0xFE8
 23836                           postdec1	equ	0xFE5
 23837                           fsr1h	equ	0xFE2
 23838                           fsr1l	equ	0xFE1
 23839                           indf2	equ	0xFDF
 23840                           postinc2	equ	0xFDE
 23841                           postdec2	equ	0xFDD
 23842                           fsr2h	equ	0xFDA
 23843                           fsr2l	equ	0xFD9
 23844                           status	equ	0xFD8
 23845                           
 23846 ;; *************** function _Grid_OV *****************
 23847 ;; Defined at:
 23848 ;;		line 269 in file "ERROR_HANDLING.c"
 23849 ;; Parameters:    Size  Location     Type
 23850 ;;		None
 23851 ;; Auto vars:     Size  Location     Type
 23852 ;;		None
 23853 ;; Return value:  Size  Location     Type
 23854 ;;                  1    wreg      void 
 23855 ;; Registers used:
 23856 ;;		wreg, status,2, status,0, cstack
 23857 ;; Tracked objects:
 23858 ;;		On entry : 0/0
 23859 ;;		On exit  : 0/0
 23860 ;;		Unchanged: 0/0
 23861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23866 ;;Total ram usage:        0 bytes
 23867 ;; Hardware stack levels used:    1
 23868 ;; Hardware stack levels required when called:    4
 23869 ;; This function calls:
 23870 ;;		___ftge
 23871 ;; This function is called by:
 23872 ;;		_Error_Checking_One_Second
 23873 ;; This function uses a non-reentrant model
 23874 ;;
 23875                           
 23876                           	psect	text72
 23877  017F32                     __ptext72:
 23878                           	opt stack 0
 23879  017F32                     _Grid_OV:
 23880                           	opt stack 24
 23881                           
 23882                           ;ERROR_HANDLING.c: 271: if(Turbine_state == STARTUP_STATE)
 23883                           
 23884                           ; BSR set to: 0
 23885                           ;incstack = 0
 23886  017F32  0100               	movlb	0	; () banked
 23887  017F34  51F0               	movf	_Turbine_state& (0+255),w,b
 23888  017F36  A4D8               	btfss	status,2,c
 23889  017F38  D055               	goto	l21222
 23890                           
 23891                           ; BSR set to: 0
 23892                           ;ERROR_HANDLING.c: 272: {
 23893                           ;ERROR_HANDLING.c: 273: if(R_Volt >= (450) || Y_Volt >= (450) || B_Volt >= (450))
 23894  017F3A  C007  F099         	movff	_R_Volt,___ftge@ff1
 23895  017F3E  C008  F09A         	movff	_R_Volt+1,___ftge@ff1+1
 23896  017F42  C009  F09B         	movff	_R_Volt+2,___ftge@ff1+2
 23897  017F46  0E00               	movlw	0
 23898  017F48  0100               	movlb	0	; () banked
 23899  017F4A  6F9C               	movwf	___ftge@ff2& (0+255),b
 23900  017F4C  0EE1               	movlw	225
 23901  017F4E  0100               	movlb	0	; () banked
 23902  017F50  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23903  017F52  0E43               	movlw	67
 23904  017F54  0100               	movlb	0	; () banked
 23905  017F56  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23906  017F58  EC4B  F0CB         	call	___ftge	;wreg free
 23907  017F5C  0100               	movlb	0	; () banked
 23908  017F5E  B0D8               	btfsc	status,0,c
 23909  017F60  D028               	goto	l21212
 23910                           
 23911                           ; BSR set to: 0
 23912  017F62  C010  F099         	movff	_Y_Volt,___ftge@ff1
 23913  017F66  C011  F09A         	movff	_Y_Volt+1,___ftge@ff1+1
 23914  017F6A  C012  F09B         	movff	_Y_Volt+2,___ftge@ff1+2
 23915  017F6E  0E00               	movlw	0
 23916  017F70  0100               	movlb	0	; () banked
 23917  017F72  6F9C               	movwf	___ftge@ff2& (0+255),b
 23918  017F74  0EE1               	movlw	225
 23919  017F76  0100               	movlb	0	; () banked
 23920  017F78  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23921  017F7A  0E43               	movlw	67
 23922  017F7C  0100               	movlb	0	; () banked
 23923  017F7E  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23924  017F80  EC4B  F0CB         	call	___ftge	;wreg free
 23925  017F84  0100               	movlb	0	; () banked
 23926  017F86  B0D8               	btfsc	status,0,c
 23927  017F88  D014               	goto	l21212
 23928                           
 23929                           ; BSR set to: 0
 23930  017F8A  C001  F099         	movff	_B_Volt,___ftge@ff1
 23931  017F8E  C002  F09A         	movff	_B_Volt+1,___ftge@ff1+1
 23932  017F92  C003  F09B         	movff	_B_Volt+2,___ftge@ff1+2
 23933  017F96  0E00               	movlw	0
 23934  017F98  0100               	movlb	0	; () banked
 23935  017F9A  6F9C               	movwf	___ftge@ff2& (0+255),b
 23936  017F9C  0EE1               	movlw	225
 23937  017F9E  0100               	movlb	0	; () banked
 23938  017FA0  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23939  017FA2  0E43               	movlw	67
 23940  017FA4  0100               	movlb	0	; () banked
 23941  017FA6  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23942  017FA8  EC4B  F0CB         	call	___ftge	;wreg free
 23943  017FAC  0100               	movlb	0	; () banked
 23944  017FAE  A0D8               	btfss	status,0,c
 23945  017FB0  D013               	goto	l21220
 23946  017FB2                     l21212:
 23947                           
 23948                           ; BSR set to: 0
 23949                           ;ERROR_HANDLING.c: 274: {
 23950                           ;ERROR_HANDLING.c: 275: Grid_Ov_Counter++;
 23951  017FB2  0101               	movlb	1	; () banked
 23952  017FB4  2B66               	incf	_Grid_Ov_Counter& (0+255),f,b
 23953                           
 23954                           ; BSR set to: 1
 23955                           ;ERROR_HANDLING.c: 276: if(Grid_Ov_Counter >= 2)
 23956  017FB6  0E01               	movlw	1
 23957  017FB8  0101               	movlb	1	; () banked
 23958  017FBA  6566               	cpfsgt	_Grid_Ov_Counter& (0+255),b
 23959  017FBC  D009               	goto	l21218
 23960                           
 23961                           ; BSR set to: 1
 23962                           ;ERROR_HANDLING.c: 277: {
 23963                           ;ERROR_HANDLING.c: 278: Grid_Ov_Counter = 0;
 23964  017FBE  0E00               	movlw	0
 23965  017FC0  0101               	movlb	1	; () banked
 23966  017FC2  6F66               	movwf	_Grid_Ov_Counter& (0+255),b
 23967                           
 23968                           ;ERROR_HANDLING.c: 279: Grid_Ovr_voltage = 1;
 23969  017FC4  0E01               	movlw	1
 23970  017FC6  0100               	movlb	0	; () banked
 23971  017FC8  6FE5               	movwf	_Grid_Ovr_voltage& (0+255),b
 23972                           
 23973                           ;ERROR_HANDLING.c: 280: Errors = VOLT_HIGH;
 23974  017FCA  0E18               	movlw	24
 23975  017FCC  6E1B               	movwf	_Errors,c
 23976                           
 23977                           ;ERROR_HANDLING.c: 281: }
 23978  017FCE  D00A               	goto	l21222
 23979  017FD0                     l21218:
 23980                           
 23981                           ;ERROR_HANDLING.c: 282: else
 23982                           ;ERROR_HANDLING.c: 283: {
 23983                           ;ERROR_HANDLING.c: 284: Grid_Ovr_voltage = 0;
 23984  017FD0  0E00               	movlw	0
 23985  017FD2  0100               	movlb	0	; () banked
 23986  017FD4  6FE5               	movwf	_Grid_Ovr_voltage& (0+255),b
 23987                           
 23988                           ; BSR set to: 0
 23989                           ;ERROR_HANDLING.c: 285: }
 23990                           ;ERROR_HANDLING.c: 286: }
 23991  017FD6  D006               	goto	l21222
 23992  017FD8                     l21220:
 23993                           
 23994                           ; BSR set to: 0
 23995                           ;ERROR_HANDLING.c: 287: else
 23996                           ;ERROR_HANDLING.c: 288: {
 23997                           ;ERROR_HANDLING.c: 289: Grid_Ovr_voltage = 0;
 23998  017FD8  0E00               	movlw	0
 23999  017FDA  0100               	movlb	0	; () banked
 24000  017FDC  6FE5               	movwf	_Grid_Ovr_voltage& (0+255),b
 24001                           
 24002                           ;ERROR_HANDLING.c: 290: Grid_Ov_Counter = 0;
 24003  017FDE  0E00               	movlw	0
 24004  017FE0  0101               	movlb	1	; () banked
 24005  017FE2  6F66               	movwf	_Grid_Ov_Counter& (0+255),b
 24006  017FE4                     l21222:
 24007                           
 24008                           ;ERROR_HANDLING.c: 291: }
 24009                           ;ERROR_HANDLING.c: 292: }
 24010                           ;ERROR_HANDLING.c: 293: if(Turbine_state == RUNNING_STATE)
 24011  017FE4  0E02               	movlw	2
 24012  017FE6  0100               	movlb	0	; () banked
 24013  017FE8  19F0               	xorwf	_Turbine_state& (0+255),w,b
 24014  017FEA  A4D8               	btfss	status,2,c
 24015  017FEC  0012               	return	
 24016                           
 24017                           ; BSR set to: 0
 24018                           ;ERROR_HANDLING.c: 294: {
 24019                           ;ERROR_HANDLING.c: 295: if(R_Volt >= (450) || Y_Volt >= (450) || B_Volt >= (450))
 24020  017FEE  C007  F099         	movff	_R_Volt,___ftge@ff1
 24021  017FF2  C008  F09A         	movff	_R_Volt+1,___ftge@ff1+1
 24022  017FF6  C009  F09B         	movff	_R_Volt+2,___ftge@ff1+2
 24023  017FFA  0E00               	movlw	0
 24024  017FFC  0100               	movlb	0	; () banked
 24025  017FFE  6F9C               	movwf	___ftge@ff2& (0+255),b
 24026  018000  0EE1               	movlw	225
 24027  018002  0100               	movlb	0	; () banked
 24028  018004  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 24029  018006  0E43               	movlw	67
 24030  018008  0100               	movlb	0	; () banked
 24031  01800A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 24032  01800C  EC4B  F0CB         	call	___ftge	;wreg free
 24033  018010  0100               	movlb	0	; () banked
 24034  018012  B0D8               	btfsc	status,0,c
 24035  018014  D028               	goto	l21230
 24036                           
 24037                           ; BSR set to: 0
 24038  018016  C010  F099         	movff	_Y_Volt,___ftge@ff1
 24039  01801A  C011  F09A         	movff	_Y_Volt+1,___ftge@ff1+1
 24040  01801E  C012  F09B         	movff	_Y_Volt+2,___ftge@ff1+2
 24041  018022  0E00               	movlw	0
 24042  018024  0100               	movlb	0	; () banked
 24043  018026  6F9C               	movwf	___ftge@ff2& (0+255),b
 24044  018028  0EE1               	movlw	225
 24045  01802A  0100               	movlb	0	; () banked
 24046  01802C  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 24047  01802E  0E43               	movlw	67
 24048  018030  0100               	movlb	0	; () banked
 24049  018032  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 24050  018034  EC4B  F0CB         	call	___ftge	;wreg free
 24051  018038  0100               	movlb	0	; () banked
 24052  01803A  B0D8               	btfsc	status,0,c
 24053  01803C  D014               	goto	l21230
 24054                           
 24055                           ; BSR set to: 0
 24056  01803E  C001  F099         	movff	_B_Volt,___ftge@ff1
 24057  018042  C002  F09A         	movff	_B_Volt+1,___ftge@ff1+1
 24058  018046  C003  F09B         	movff	_B_Volt+2,___ftge@ff1+2
 24059  01804A  0E00               	movlw	0
 24060  01804C  0100               	movlb	0	; () banked
 24061  01804E  6F9C               	movwf	___ftge@ff2& (0+255),b
 24062  018050  0EE1               	movlw	225
 24063  018052  0100               	movlb	0	; () banked
 24064  018054  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 24065  018056  0E43               	movlw	67
 24066  018058  0100               	movlb	0	; () banked
 24067  01805A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 24068  01805C  EC4B  F0CB         	call	___ftge	;wreg free
 24069  018060  0100               	movlb	0	; () banked
 24070  018062  A0D8               	btfss	status,0,c
 24071  018064  D013               	goto	l21238
 24072  018066                     l21230:
 24073                           
 24074                           ; BSR set to: 0
 24075                           ;ERROR_HANDLING.c: 296: {
 24076                           ;ERROR_HANDLING.c: 297: Grid_Ov_Counter++;
 24077  018066  0101               	movlb	1	; () banked
 24078  018068  2B66               	incf	_Grid_Ov_Counter& (0+255),f,b
 24079                           
 24080                           ; BSR set to: 1
 24081                           ;ERROR_HANDLING.c: 298: if(Grid_Ov_Counter >= 10)
 24082  01806A  0E09               	movlw	9
 24083  01806C  0101               	movlb	1	; () banked
 24084  01806E  6566               	cpfsgt	_Grid_Ov_Counter& (0+255),b
 24085  018070  D009               	goto	l21236
 24086                           
 24087                           ; BSR set to: 1
 24088                           ;ERROR_HANDLING.c: 299: {
 24089                           ;ERROR_HANDLING.c: 300: Grid_Ov_Counter = 0;
 24090  018072  0E00               	movlw	0
 24091  018074  0101               	movlb	1	; () banked
 24092  018076  6F66               	movwf	_Grid_Ov_Counter& (0+255),b
 24093                           
 24094                           ;ERROR_HANDLING.c: 301: Grid_Ovr_voltage = 1;
 24095  018078  0E01               	movlw	1
 24096  01807A  0100               	movlb	0	; () banked
 24097  01807C  6FE5               	movwf	_Grid_Ovr_voltage& (0+255),b
 24098                           
 24099                           ;ERROR_HANDLING.c: 302: Errors = VOLT_HIGH;
 24100  01807E  0E18               	movlw	24
 24101  018080  6E1B               	movwf	_Errors,c
 24102                           
 24103                           ;ERROR_HANDLING.c: 303: }
 24104  018082  0012               	return	
 24105  018084                     l21236:
 24106                           
 24107                           ;ERROR_HANDLING.c: 304: else
 24108                           ;ERROR_HANDLING.c: 305: {
 24109                           ;ERROR_HANDLING.c: 306: Grid_Ovr_voltage = 0;
 24110  018084  0E00               	movlw	0
 24111  018086  0100               	movlb	0	; () banked
 24112  018088  6FE5               	movwf	_Grid_Ovr_voltage& (0+255),b
 24113                           
 24114                           ; BSR set to: 0
 24115                           ;ERROR_HANDLING.c: 307: }
 24116                           ;ERROR_HANDLING.c: 308: }
 24117  01808A  0012               	return	
 24118  01808C                     l21238:
 24119                           
 24120                           ; BSR set to: 0
 24121                           ;ERROR_HANDLING.c: 309: else
 24122                           ;ERROR_HANDLING.c: 310: {
 24123                           ;ERROR_HANDLING.c: 311: Grid_Ovr_voltage = 0;
 24124  01808C  0E00               	movlw	0
 24125  01808E  0100               	movlb	0	; () banked
 24126  018090  6FE5               	movwf	_Grid_Ovr_voltage& (0+255),b
 24127                           
 24128                           ;ERROR_HANDLING.c: 312: Grid_Ov_Counter = 0;
 24129  018092  0E00               	movlw	0
 24130  018094  0101               	movlb	1	; () banked
 24131  018096  6F66               	movwf	_Grid_Ov_Counter& (0+255),b
 24132                           
 24133                           ; BSR set to: 1
 24134  018098  0012               	return	
 24135  01809A                     __end_of_Grid_OV:
 24136                           	opt stack 0
 24137                           tblptru	equ	0xFF8
 24138                           tblptrh	equ	0xFF7
 24139                           tblptrl	equ	0xFF6
 24140                           tablat	equ	0xFF5
 24141                           prodh	equ	0xFF4
 24142                           prodl	equ	0xFF3
 24143                           intcon	equ	0xFF2
 24144                           postinc0	equ	0xFEE
 24145                           wreg	equ	0xFE8
 24146                           postdec1	equ	0xFE5
 24147                           fsr1h	equ	0xFE2
 24148                           fsr1l	equ	0xFE1
 24149                           indf2	equ	0xFDF
 24150                           postinc2	equ	0xFDE
 24151                           postdec2	equ	0xFDD
 24152                           fsr2h	equ	0xFDA
 24153                           fsr2l	equ	0xFD9
 24154                           status	equ	0xFD8
 24155                           
 24156 ;; *************** function _Grid_Minimum_Power *****************
 24157 ;; Defined at:
 24158 ;;		line 437 in file "ERROR_HANDLING.c"
 24159 ;; Parameters:    Size  Location     Type
 24160 ;;		None
 24161 ;; Auto vars:     Size  Location     Type
 24162 ;;		None
 24163 ;; Return value:  Size  Location     Type
 24164 ;;                  1    wreg      void 
 24165 ;; Registers used:
 24166 ;;		wreg, status,2, status,0, cstack
 24167 ;; Tracked objects:
 24168 ;;		On entry : 0/0
 24169 ;;		On exit  : 0/0
 24170 ;;		Unchanged: 0/0
 24171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24176 ;;Total ram usage:        0 bytes
 24177 ;; Hardware stack levels used:    1
 24178 ;; Hardware stack levels required when called:    4
 24179 ;; This function calls:
 24180 ;;		___ftge
 24181 ;; This function is called by:
 24182 ;;		_Error_Checking_One_Second
 24183 ;; This function uses a non-reentrant model
 24184 ;;
 24185                           
 24186                           	psect	text73
 24187  01AA22                     __ptext73:
 24188                           	opt stack 0
 24189  01AA22                     _Grid_Minimum_Power:
 24190                           	opt stack 24
 24191                           
 24192                           ;ERROR_HANDLING.c: 439: if(KW <= (-5.0))
 24193                           
 24194                           ;incstack = 0
 24195  01AA22  0E00               	movlw	0
 24196  01AA24  0100               	movlb	0	; () banked
 24197  01AA26  6F99               	movwf	___ftge@ff1& (0+255),b
 24198  01AA28  0EA0               	movlw	160
 24199  01AA2A  0100               	movlb	0	; () banked
 24200  01AA2C  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 24201  01AA2E  0EC0               	movlw	192
 24202  01AA30  0100               	movlb	0	; () banked
 24203  01AA32  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 24204  01AA34  C022  F09C         	movff	_KW,___ftge@ff2
 24205  01AA38  C023  F09D         	movff	_KW+1,___ftge@ff2+1
 24206  01AA3C  C024  F09E         	movff	_KW+2,___ftge@ff2+2
 24207  01AA40  EC4B  F0CB         	call	___ftge	;wreg free
 24208  01AA44  0100               	movlb	0	; () banked
 24209  01AA46  A0D8               	btfss	status,0,c
 24210  01AA48  D013               	goto	l21458
 24211                           
 24212                           ; BSR set to: 0
 24213                           ;ERROR_HANDLING.c: 440: {
 24214                           ;ERROR_HANDLING.c: 441: KW_Counter_Max++;
 24215  01AA4A  0101               	movlb	1	; () banked
 24216  01AA4C  2B69               	incf	_KW_Counter_Max& (0+255),f,b
 24217                           
 24218                           ; BSR set to: 1
 24219                           ;ERROR_HANDLING.c: 442: if(KW_Counter_Max >= 60)
 24220  01AA4E  0E3B               	movlw	59
 24221  01AA50  0101               	movlb	1	; () banked
 24222  01AA52  6569               	cpfsgt	_KW_Counter_Max& (0+255),b
 24223  01AA54  D009               	goto	l21456
 24224                           
 24225                           ; BSR set to: 1
 24226                           ;ERROR_HANDLING.c: 443: {
 24227                           ;ERROR_HANDLING.c: 444: KW_Counter_Max = 0;
 24228  01AA56  0E00               	movlw	0
 24229  01AA58  0101               	movlb	1	; () banked
 24230  01AA5A  6F69               	movwf	_KW_Counter_Max& (0+255),b
 24231                           
 24232                           ;ERROR_HANDLING.c: 445: KW_Minimum_Error = 1;
 24233  01AA5C  0E01               	movlw	1
 24234  01AA5E  0101               	movlb	1	; () banked
 24235  01AA60  6F6B               	movwf	_KW_Minimum_Error& (0+255),b
 24236                           
 24237                           ;ERROR_HANDLING.c: 446: Errors = POWER_MIN;
 24238  01AA62  0E0F               	movlw	15
 24239  01AA64  6E1B               	movwf	_Errors,c
 24240                           
 24241                           ;ERROR_HANDLING.c: 447: }
 24242  01AA66  0012               	return	
 24243  01AA68                     l21456:
 24244                           
 24245                           ; BSR set to: 1
 24246                           ;ERROR_HANDLING.c: 448: else
 24247                           ;ERROR_HANDLING.c: 449: {
 24248                           ;ERROR_HANDLING.c: 450: KW_Minimum_Error = 0;
 24249  01AA68  0E00               	movlw	0
 24250  01AA6A  0101               	movlb	1	; () banked
 24251  01AA6C  6F6B               	movwf	_KW_Minimum_Error& (0+255),b
 24252                           
 24253                           ; BSR set to: 1
 24254                           ;ERROR_HANDLING.c: 451: }
 24255                           ;ERROR_HANDLING.c: 452: }
 24256  01AA6E  0012               	return	
 24257  01AA70                     l21458:
 24258                           
 24259                           ;ERROR_HANDLING.c: 453: else
 24260                           ;ERROR_HANDLING.c: 454: {
 24261                           ;ERROR_HANDLING.c: 455: KW_Minimum_Error =0;
 24262  01AA70  0E00               	movlw	0
 24263  01AA72  0101               	movlb	1	; () banked
 24264  01AA74  6F6B               	movwf	_KW_Minimum_Error& (0+255),b
 24265                           
 24266                           ;ERROR_HANDLING.c: 456: KW_Counter_Max = 0;
 24267  01AA76  0E00               	movlw	0
 24268  01AA78  0101               	movlb	1	; () banked
 24269  01AA7A  6F69               	movwf	_KW_Counter_Max& (0+255),b
 24270  01AA7C  0012               	return	
 24271  01AA7E                     __end_of_Grid_Minimum_Power:
 24272                           	opt stack 0
 24273                           tblptru	equ	0xFF8
 24274                           tblptrh	equ	0xFF7
 24275                           tblptrl	equ	0xFF6
 24276                           tablat	equ	0xFF5
 24277                           prodh	equ	0xFF4
 24278                           prodl	equ	0xFF3
 24279                           intcon	equ	0xFF2
 24280                           postinc0	equ	0xFEE
 24281                           wreg	equ	0xFE8
 24282                           postdec1	equ	0xFE5
 24283                           fsr1h	equ	0xFE2
 24284                           fsr1l	equ	0xFE1
 24285                           indf2	equ	0xFDF
 24286                           postinc2	equ	0xFDE
 24287                           postdec2	equ	0xFDD
 24288                           fsr2h	equ	0xFDA
 24289                           fsr2l	equ	0xFD9
 24290                           status	equ	0xFD8
 24291                           
 24292 ;; *************** function _Grid_Maximum_Power *****************
 24293 ;; Defined at:
 24294 ;;		line 459 in file "ERROR_HANDLING.c"
 24295 ;; Parameters:    Size  Location     Type
 24296 ;;		None
 24297 ;; Auto vars:     Size  Location     Type
 24298 ;;		None
 24299 ;; Return value:  Size  Location     Type
 24300 ;;                  1    wreg      void 
 24301 ;; Registers used:
 24302 ;;		wreg, status,2, status,0, cstack
 24303 ;; Tracked objects:
 24304 ;;		On entry : 0/0
 24305 ;;		On exit  : 0/0
 24306 ;;		Unchanged: 0/0
 24307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24312 ;;Total ram usage:        0 bytes
 24313 ;; Hardware stack levels used:    1
 24314 ;; Hardware stack levels required when called:    4
 24315 ;; This function calls:
 24316 ;;		___ftge
 24317 ;; This function is called by:
 24318 ;;		_Error_Checking_One_Second
 24319 ;; This function uses a non-reentrant model
 24320 ;;
 24321                           
 24322                           	psect	text74
 24323  01AA7E                     __ptext74:
 24324                           	opt stack 0
 24325  01AA7E                     _Grid_Maximum_Power:
 24326                           	opt stack 24
 24327                           
 24328                           ;ERROR_HANDLING.c: 461: if(KW >= (6.0))
 24329                           
 24330                           ; BSR set to: 1
 24331                           ;incstack = 0
 24332  01AA7E  C022  F099         	movff	_KW,___ftge@ff1
 24333  01AA82  C023  F09A         	movff	_KW+1,___ftge@ff1+1
 24334  01AA86  C024  F09B         	movff	_KW+2,___ftge@ff1+2
 24335  01AA8A  0E00               	movlw	0
 24336  01AA8C  0100               	movlb	0	; () banked
 24337  01AA8E  6F9C               	movwf	___ftge@ff2& (0+255),b
 24338  01AA90  0EC0               	movlw	192
 24339  01AA92  0100               	movlb	0	; () banked
 24340  01AA94  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 24341  01AA96  0E40               	movlw	64
 24342  01AA98  0100               	movlb	0	; () banked
 24343  01AA9A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 24344  01AA9C  EC4B  F0CB         	call	___ftge	;wreg free
 24345  01AAA0  0100               	movlb	0	; () banked
 24346  01AAA2  A0D8               	btfss	status,0,c
 24347  01AAA4  D013               	goto	l21470
 24348                           
 24349                           ; BSR set to: 0
 24350                           ;ERROR_HANDLING.c: 462: {
 24351                           ;ERROR_HANDLING.c: 463: KW_Counter++;
 24352  01AAA6  0101               	movlb	1	; () banked
 24353  01AAA8  2B68               	incf	_KW_Counter& (0+255),f,b
 24354                           
 24355                           ; BSR set to: 1
 24356                           ;ERROR_HANDLING.c: 464: if(KW_Counter >= 30)
 24357  01AAAA  0E1D               	movlw	29
 24358  01AAAC  0101               	movlb	1	; () banked
 24359  01AAAE  6568               	cpfsgt	_KW_Counter& (0+255),b
 24360  01AAB0  D009               	goto	l21468
 24361                           
 24362                           ; BSR set to: 1
 24363                           ;ERROR_HANDLING.c: 465: {
 24364                           ;ERROR_HANDLING.c: 466: KW_Counter = 0;
 24365  01AAB2  0E00               	movlw	0
 24366  01AAB4  0101               	movlb	1	; () banked
 24367  01AAB6  6F68               	movwf	_KW_Counter& (0+255),b
 24368                           
 24369                           ;ERROR_HANDLING.c: 467: KW_Maximum_Error = 1;
 24370  01AAB8  0E01               	movlw	1
 24371  01AABA  0101               	movlb	1	; () banked
 24372  01AABC  6F6A               	movwf	_KW_Maximum_Error& (0+255),b
 24373                           
 24374                           ;ERROR_HANDLING.c: 468: Errors = POWER_MAX;
 24375  01AABE  0E0E               	movlw	14
 24376  01AAC0  6E1B               	movwf	_Errors,c
 24377                           
 24378                           ;ERROR_HANDLING.c: 469: }
 24379  01AAC2  0012               	return	
 24380  01AAC4                     l21468:
 24381                           
 24382                           ; BSR set to: 1
 24383                           ;ERROR_HANDLING.c: 470: else
 24384                           ;ERROR_HANDLING.c: 471: {
 24385                           ;ERROR_HANDLING.c: 472: KW_Maximum_Error =0;
 24386  01AAC4  0E00               	movlw	0
 24387  01AAC6  0101               	movlb	1	; () banked
 24388  01AAC8  6F6A               	movwf	_KW_Maximum_Error& (0+255),b
 24389                           
 24390                           ; BSR set to: 1
 24391                           ;ERROR_HANDLING.c: 473: }
 24392                           ;ERROR_HANDLING.c: 474: }
 24393  01AACA  0012               	return	
 24394  01AACC                     l21470:
 24395                           
 24396                           ;ERROR_HANDLING.c: 475: else
 24397                           ;ERROR_HANDLING.c: 476: {
 24398                           ;ERROR_HANDLING.c: 477: KW_Counter = 0;
 24399  01AACC  0E00               	movlw	0
 24400  01AACE  0101               	movlb	1	; () banked
 24401  01AAD0  6F68               	movwf	_KW_Counter& (0+255),b
 24402                           
 24403                           ;ERROR_HANDLING.c: 478: KW_Maximum_Error = 0;
 24404  01AAD2  0E00               	movlw	0
 24405  01AAD4  0101               	movlb	1	; () banked
 24406  01AAD6  6F6A               	movwf	_KW_Maximum_Error& (0+255),b
 24407  01AAD8  0012               	return	
 24408  01AADA                     __end_of_Grid_Maximum_Power:
 24409                           	opt stack 0
 24410                           tblptru	equ	0xFF8
 24411                           tblptrh	equ	0xFF7
 24412                           tblptrl	equ	0xFF6
 24413                           tablat	equ	0xFF5
 24414                           prodh	equ	0xFF4
 24415                           prodl	equ	0xFF3
 24416                           intcon	equ	0xFF2
 24417                           postinc0	equ	0xFEE
 24418                           wreg	equ	0xFE8
 24419                           postdec1	equ	0xFE5
 24420                           fsr1h	equ	0xFE2
 24421                           fsr1l	equ	0xFE1
 24422                           indf2	equ	0xFDF
 24423                           postinc2	equ	0xFDE
 24424                           postdec2	equ	0xFDD
 24425                           fsr2h	equ	0xFDA
 24426                           fsr2l	equ	0xFD9
 24427                           status	equ	0xFD8
 24428                           
 24429 ;; *************** function _Grid_Frequency *****************
 24430 ;; Defined at:
 24431 ;;		line 359 in file "ERROR_HANDLING.c"
 24432 ;; Parameters:    Size  Location     Type
 24433 ;;		None
 24434 ;; Auto vars:     Size  Location     Type
 24435 ;;		None
 24436 ;; Return value:  Size  Location     Type
 24437 ;;                  1    wreg      void 
 24438 ;; Registers used:
 24439 ;;		wreg, status,2, status,0, cstack
 24440 ;; Tracked objects:
 24441 ;;		On entry : 0/0
 24442 ;;		On exit  : 0/0
 24443 ;;		Unchanged: 0/0
 24444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24449 ;;Total ram usage:        0 bytes
 24450 ;; Hardware stack levels used:    1
 24451 ;; Hardware stack levels required when called:    4
 24452 ;; This function calls:
 24453 ;;		___ftge
 24454 ;; This function is called by:
 24455 ;;		_Error_Checking_One_Second
 24456 ;; This function uses a non-reentrant model
 24457 ;;
 24458                           
 24459                           	psect	text75
 24460  01A4E8                     __ptext75:
 24461                           	opt stack 0
 24462  01A4E8                     _Grid_Frequency:
 24463                           	opt stack 24
 24464                           
 24465                           ;ERROR_HANDLING.c: 361: if(Frequency <= 47.5 || Frequency >=52.5)
 24466                           
 24467                           ; BSR set to: 1
 24468                           ;incstack = 0
 24469  01A4E8  0E00               	movlw	0
 24470  01A4EA  0100               	movlb	0	; () banked
 24471  01A4EC  6F99               	movwf	___ftge@ff1& (0+255),b
 24472  01A4EE  0E3E               	movlw	62
 24473  01A4F0  0100               	movlb	0	; () banked
 24474  01A4F2  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 24475  01A4F4  0E42               	movlw	66
 24476  01A4F6  0100               	movlb	0	; () banked
 24477  01A4F8  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 24478  01A4FA  C0C7  F09C         	movff	_Frequency,___ftge@ff2
 24479  01A4FE  C0C8  F09D         	movff	_Frequency+1,___ftge@ff2+1
 24480  01A502  C0C9  F09E         	movff	_Frequency+2,___ftge@ff2+2
 24481  01A506  EC4B  F0CB         	call	___ftge	;wreg free
 24482  01A50A  0100               	movlb	0	; () banked
 24483  01A50C  B0D8               	btfsc	status,0,c
 24484  01A50E  D014               	goto	l21244
 24485                           
 24486                           ; BSR set to: 0
 24487  01A510  C0C7  F099         	movff	_Frequency,___ftge@ff1
 24488  01A514  C0C8  F09A         	movff	_Frequency+1,___ftge@ff1+1
 24489  01A518  C0C9  F09B         	movff	_Frequency+2,___ftge@ff1+2
 24490  01A51C  0E00               	movlw	0
 24491  01A51E  0100               	movlb	0	; () banked
 24492  01A520  6F9C               	movwf	___ftge@ff2& (0+255),b
 24493  01A522  0E52               	movlw	82
 24494  01A524  0100               	movlb	0	; () banked
 24495  01A526  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 24496  01A528  0E42               	movlw	66
 24497  01A52A  0100               	movlb	0	; () banked
 24498  01A52C  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 24499  01A52E  EC4B  F0CB         	call	___ftge	;wreg free
 24500  01A532  0100               	movlb	0	; () banked
 24501  01A534  A0D8               	btfss	status,0,c
 24502  01A536  D013               	goto	l21252
 24503  01A538                     l21244:
 24504                           
 24505                           ; BSR set to: 0
 24506                           ;ERROR_HANDLING.c: 362: {
 24507                           ;ERROR_HANDLING.c: 363: Frequency_Error_counter++;
 24508  01A538  0101               	movlb	1	; () banked
 24509  01A53A  2B5B               	incf	_Frequency_Error_counter& (0+255),f,b
 24510                           
 24511                           ; BSR set to: 1
 24512                           ;ERROR_HANDLING.c: 364: if(Frequency_Error_counter >= 5)
 24513  01A53C  0E04               	movlw	4
 24514  01A53E  0101               	movlb	1	; () banked
 24515  01A540  655B               	cpfsgt	_Frequency_Error_counter& (0+255),b
 24516  01A542  D009               	goto	l21250
 24517                           
 24518                           ; BSR set to: 1
 24519                           ;ERROR_HANDLING.c: 365: {
 24520                           ;ERROR_HANDLING.c: 366: Frequency_Error_counter = 0;
 24521  01A544  0E00               	movlw	0
 24522  01A546  0101               	movlb	1	; () banked
 24523  01A548  6F5B               	movwf	_Frequency_Error_counter& (0+255),b
 24524                           
 24525                           ;ERROR_HANDLING.c: 367: Grid_Frequency_Error = 1;
 24526  01A54A  0E01               	movlw	1
 24527  01A54C  0100               	movlb	0	; () banked
 24528  01A54E  6FE4               	movwf	_Grid_Frequency_Error& (0+255),b
 24529                           
 24530                           ;ERROR_HANDLING.c: 368: Errors = FREQ;
 24531  01A550  0E0C               	movlw	12
 24532  01A552  6E1B               	movwf	_Errors,c
 24533                           
 24534                           ;ERROR_HANDLING.c: 369: }
 24535  01A554  0012               	return	
 24536  01A556                     l21250:
 24537                           
 24538                           ;ERROR_HANDLING.c: 370: else
 24539                           ;ERROR_HANDLING.c: 371: {
 24540                           ;ERROR_HANDLING.c: 372: Grid_Frequency_Error = 0;
 24541  01A556  0E00               	movlw	0
 24542  01A558  0100               	movlb	0	; () banked
 24543  01A55A  6FE4               	movwf	_Grid_Frequency_Error& (0+255),b
 24544                           
 24545                           ; BSR set to: 0
 24546                           ;ERROR_HANDLING.c: 373: }
 24547                           ;ERROR_HANDLING.c: 374: }
 24548  01A55C  0012               	return	
 24549  01A55E                     l21252:
 24550                           
 24551                           ; BSR set to: 0
 24552                           ;ERROR_HANDLING.c: 375: else
 24553                           ;ERROR_HANDLING.c: 376: {
 24554                           ;ERROR_HANDLING.c: 377: Frequency_Error_counter = 0;
 24555  01A55E  0E00               	movlw	0
 24556  01A560  0101               	movlb	1	; () banked
 24557  01A562  6F5B               	movwf	_Frequency_Error_counter& (0+255),b
 24558                           
 24559                           ;ERROR_HANDLING.c: 378: Grid_Frequency_Error = 0;
 24560  01A564  0E00               	movlw	0
 24561  01A566  0100               	movlb	0	; () banked
 24562  01A568  6FE4               	movwf	_Grid_Frequency_Error& (0+255),b
 24563  01A56A  0012               	return	
 24564  01A56C                     __end_of_Grid_Frequency:
 24565                           	opt stack 0
 24566                           tblptru	equ	0xFF8
 24567                           tblptrh	equ	0xFF7
 24568                           tblptrl	equ	0xFF6
 24569                           tablat	equ	0xFF5
 24570                           prodh	equ	0xFF4
 24571                           prodl	equ	0xFF3
 24572                           intcon	equ	0xFF2
 24573                           postinc0	equ	0xFEE
 24574                           wreg	equ	0xFE8
 24575                           postdec1	equ	0xFE5
 24576                           fsr1h	equ	0xFE2
 24577                           fsr1l	equ	0xFE1
 24578                           indf2	equ	0xFDF
 24579                           postinc2	equ	0xFDE
 24580                           postdec2	equ	0xFDD
 24581                           fsr2h	equ	0xFDA
 24582                           fsr2l	equ	0xFD9
 24583                           status	equ	0xFD8
 24584                           
 24585 ;; *************** function _Generator_RPM *****************
 24586 ;; Defined at:
 24587 ;;		line 418 in file "ERROR_HANDLING.c"
 24588 ;; Parameters:    Size  Location     Type
 24589 ;;		None
 24590 ;; Auto vars:     Size  Location     Type
 24591 ;;		None
 24592 ;; Return value:  Size  Location     Type
 24593 ;;                  1    wreg      void 
 24594 ;; Registers used:
 24595 ;;		wreg, status,2, status,0, cstack
 24596 ;; Tracked objects:
 24597 ;;		On entry : 0/0
 24598 ;;		On exit  : 0/0
 24599 ;;		Unchanged: 0/0
 24600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24605 ;;Total ram usage:        0 bytes
 24606 ;; Hardware stack levels used:    1
 24607 ;; Hardware stack levels required when called:    4
 24608 ;; This function calls:
 24609 ;;		___ftge
 24610 ;; This function is called by:
 24611 ;;		_Error_Checking_One_Second
 24612 ;; This function uses a non-reentrant model
 24613 ;;
 24614                           
 24615                           	psect	text76
 24616  01AB2E                     __ptext76:
 24617                           	opt stack 0
 24618  01AB2E                     _Generator_RPM:
 24619                           	opt stack 24
 24620                           
 24621                           ;ERROR_HANDLING.c: 420: if(Generator_RPM_FLT >= (1060))
 24622                           
 24623                           ; BSR set to: 0
 24624                           ;incstack = 0
 24625  01AB2E  C004  F099         	movff	_Generator_RPM_FLT,___ftge@ff1
 24626  01AB32  C005  F09A         	movff	_Generator_RPM_FLT+1,___ftge@ff1+1
 24627  01AB36  C006  F09B         	movff	_Generator_RPM_FLT+2,___ftge@ff1+2
 24628  01AB3A  0E80               	movlw	128
 24629  01AB3C  0100               	movlb	0	; () banked
 24630  01AB3E  6F9C               	movwf	___ftge@ff2& (0+255),b
 24631  01AB40  0E84               	movlw	132
 24632  01AB42  0100               	movlb	0	; () banked
 24633  01AB44  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 24634  01AB46  0E44               	movlw	68
 24635  01AB48  0100               	movlb	0	; () banked
 24636  01AB4A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 24637  01AB4C  EC4B  F0CB         	call	___ftge	;wreg free
 24638  01AB50  0100               	movlb	0	; () banked
 24639  01AB52  A0D8               	btfss	status,0,c
 24640  01AB54  D00F               	goto	l21372
 24641                           
 24642                           ; BSR set to: 0
 24643                           ;ERROR_HANDLING.c: 421: {
 24644                           ;ERROR_HANDLING.c: 422: G_RPM_Counter++;
 24645  01AB56  0101               	movlb	1	; () banked
 24646  01AB58  2B5C               	incf	_G_RPM_Counter& (0+255),f,b
 24647                           
 24648                           ; BSR set to: 1
 24649                           ;ERROR_HANDLING.c: 423: if(G_RPM_Counter >= 10)
 24650  01AB5A  0E09               	movlw	9
 24651  01AB5C  0101               	movlb	1	; () banked
 24652  01AB5E  655C               	cpfsgt	_G_RPM_Counter& (0+255),b
 24653  01AB60  0012               	return	
 24654                           
 24655                           ; BSR set to: 1
 24656                           ;ERROR_HANDLING.c: 424: {
 24657                           ;ERROR_HANDLING.c: 425: G_RPM_Counter = 0;
 24658  01AB62  0E00               	movlw	0
 24659  01AB64  0101               	movlb	1	; () banked
 24660  01AB66  6F5C               	movwf	_G_RPM_Counter& (0+255),b
 24661                           
 24662                           ;ERROR_HANDLING.c: 426: Generator_Over_Speed = 1;
 24663  01AB68  0E01               	movlw	1
 24664  01AB6A  0101               	movlb	1	; () banked
 24665  01AB6C  6F65               	movwf	_Generator_Over_Speed& (0+255),b
 24666                           
 24667                           ;ERROR_HANDLING.c: 427: Errors = GEN_OS;
 24668  01AB6E  0E0B               	movlw	11
 24669  01AB70  6E1B               	movwf	_Errors,c
 24670                           
 24671                           ; BSR set to: 1
 24672                           ;ERROR_HANDLING.c: 428: }
 24673                           ;ERROR_HANDLING.c: 429: }
 24674  01AB72  0012               	return	
 24675  01AB74                     l21372:
 24676                           
 24677                           ;ERROR_HANDLING.c: 430: else
 24678                           ;ERROR_HANDLING.c: 431: {
 24679                           ;ERROR_HANDLING.c: 432: G_RPM_Counter = 0;
 24680  01AB74  0E00               	movlw	0
 24681  01AB76  0101               	movlb	1	; () banked
 24682  01AB78  6F5C               	movwf	_G_RPM_Counter& (0+255),b
 24683                           
 24684                           ;ERROR_HANDLING.c: 433: Generator_Over_Speed = 0;
 24685  01AB7A  0E00               	movlw	0
 24686  01AB7C  0101               	movlb	1	; () banked
 24687  01AB7E  6F65               	movwf	_Generator_Over_Speed& (0+255),b
 24688  01AB80  0012               	return	
 24689  01AB82                     __end_of_Generator_RPM:
 24690                           	opt stack 0
 24691                           tblptru	equ	0xFF8
 24692                           tblptrh	equ	0xFF7
 24693                           tblptrl	equ	0xFF6
 24694                           tablat	equ	0xFF5
 24695                           prodh	equ	0xFF4
 24696                           prodl	equ	0xFF3
 24697                           intcon	equ	0xFF2
 24698                           postinc0	equ	0xFEE
 24699                           wreg	equ	0xFE8
 24700                           postdec1	equ	0xFE5
 24701                           fsr1h	equ	0xFE2
 24702                           fsr1l	equ	0xFE1
 24703                           indf2	equ	0xFDF
 24704                           postinc2	equ	0xFDE
 24705                           postdec2	equ	0xFDD
 24706                           fsr2h	equ	0xFDA
 24707                           fsr2l	equ	0xFD9
 24708                           status	equ	0xFD8
 24709                           
 24710 ;; *************** function _Generator_One_Feedback *****************
 24711 ;; Defined at:
 24712 ;;		line 647 in file "ERROR_HANDLING.c"
 24713 ;; Parameters:    Size  Location     Type
 24714 ;;		None
 24715 ;; Auto vars:     Size  Location     Type
 24716 ;;		None
 24717 ;; Return value:  Size  Location     Type
 24718 ;;                  1    wreg      void 
 24719 ;; Registers used:
 24720 ;;		wreg, status,2, status,0, cstack
 24721 ;; Tracked objects:
 24722 ;;		On entry : 0/0
 24723 ;;		On exit  : 0/0
 24724 ;;		Unchanged: 0/0
 24725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24730 ;;Total ram usage:        0 bytes
 24731 ;; Hardware stack levels used:    1
 24732 ;; Hardware stack levels required when called:    4
 24733 ;; This function calls:
 24734 ;;		_int_eeprom_write
 24735 ;; This function is called by:
 24736 ;;		_Error_Checking_One_Second
 24737 ;; This function uses a non-reentrant model
 24738 ;;
 24739                           
 24740                           	psect	text77
 24741  01A834                     __ptext77:
 24742                           	opt stack 0
 24743  01A834                     _Generator_One_Feedback:
 24744                           	opt stack 24
 24745                           
 24746                           ;ERROR_HANDLING.c: 649: if(RB2 == 0 && RD2 == 1 )
 24747                           
 24748                           ; BSR set to: 1
 24749                           ;incstack = 0
 24750  01A834  A481               	btfss	3969,2,c	;volatile
 24751  01A836  A483               	btfss	3971,2,c	;volatile
 24752  01A838  D013               	goto	l6316
 24753                           
 24754                           ;ERROR_HANDLING.c: 650: {
 24755                           ;ERROR_HANDLING.c: 651: Generator_One_Feedback_Error = 0;
 24756  01A83A  0E00               	movlw	0
 24757  01A83C  0101               	movlb	1	; () banked
 24758  01A83E  6F64               	movwf	_Generator_One_Feedback_Error& (0+255),b
 24759                           
 24760                           ;ERROR_HANDLING.c: 652: Generator_One_Counter = 0;
 24761  01A840  0E00               	movlw	0
 24762  01A842  0101               	movlb	1	; () banked
 24763  01A844  6F63               	movwf	_Generator_One_Counter& (0+255),b
 24764                           
 24765                           ; BSR set to: 1
 24766                           ;ERROR_HANDLING.c: 653: int_eeprom_write((0x01),0);
 24767  01A846  0E00               	movlw	0
 24768  01A848  0100               	movlb	0	; () banked
 24769  01A84A  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 24770  01A84C  0E01               	movlw	1
 24771  01A84E  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 24772  01A850  0E00               	movlw	0
 24773  01A852  0100               	movlb	0	; () banked
 24774  01A854  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 24775  01A856  0E00               	movlw	0
 24776  01A858  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 24777  01A85A  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 24778                           
 24779                           ;ERROR_HANDLING.c: 654: }
 24780  01A85E  0012               	return	
 24781  01A860                     l6316:
 24782                           
 24783                           ;ERROR_HANDLING.c: 655: else if(RB2 == 1 && RD2 == 1)
 24784  01A860  A481               	btfss	3969,2,c	;volatile
 24785  01A862  0012               	return	
 24786  01A864  A483               	btfss	3971,2,c	;volatile
 24787  01A866  0012               	return	
 24788                           
 24789                           ;ERROR_HANDLING.c: 656: {
 24790                           ;ERROR_HANDLING.c: 657: Generator_One_Counter++;
 24791  01A868  0101               	movlb	1	; () banked
 24792  01A86A  2B63               	incf	_Generator_One_Counter& (0+255),f,b
 24793                           
 24794                           ; BSR set to: 1
 24795                           ;ERROR_HANDLING.c: 658: if(Generator_One_Counter > 2)
 24796  01A86C  0E02               	movlw	2
 24797  01A86E  0101               	movlb	1	; () banked
 24798  01A870  6563               	cpfsgt	_Generator_One_Counter& (0+255),b
 24799  01A872  0012               	return	
 24800                           
 24801                           ; BSR set to: 1
 24802                           ;ERROR_HANDLING.c: 659: {
 24803                           ;ERROR_HANDLING.c: 660: Generator_One_Counter = 0;
 24804  01A874  0E00               	movlw	0
 24805  01A876  0101               	movlb	1	; () banked
 24806  01A878  6F63               	movwf	_Generator_One_Counter& (0+255),b
 24807                           
 24808                           ;ERROR_HANDLING.c: 661: Generator_One_Feedback_Error = 1;
 24809  01A87A  0E01               	movlw	1
 24810  01A87C  0101               	movlb	1	; () banked
 24811  01A87E  6F64               	movwf	_Generator_One_Feedback_Error& (0+255),b
 24812                           
 24813                           ;ERROR_HANDLING.c: 662: Errors = GEN_FB;
 24814  01A880  0E14               	movlw	20
 24815  01A882  6E1B               	movwf	_Errors,c
 24816                           
 24817                           ; BSR set to: 1
 24818                           ;ERROR_HANDLING.c: 663: int_eeprom_write((0x01),1);
 24819  01A884  0E00               	movlw	0
 24820  01A886  0100               	movlb	0	; () banked
 24821  01A888  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 24822  01A88A  0E01               	movlw	1
 24823  01A88C  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 24824  01A88E  0E00               	movlw	0
 24825  01A890  0100               	movlb	0	; () banked
 24826  01A892  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 24827  01A894  0E01               	movlw	1
 24828  01A896  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 24829  01A898  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 24830  01A89C  0012               	return	
 24831  01A89E                     __end_of_Generator_One_Feedback:
 24832                           	opt stack 0
 24833                           tblptru	equ	0xFF8
 24834                           tblptrh	equ	0xFF7
 24835                           tblptrl	equ	0xFF6
 24836                           tablat	equ	0xFF5
 24837                           prodh	equ	0xFF4
 24838                           prodl	equ	0xFF3
 24839                           intcon	equ	0xFF2
 24840                           postinc0	equ	0xFEE
 24841                           wreg	equ	0xFE8
 24842                           postdec1	equ	0xFE5
 24843                           fsr1h	equ	0xFE2
 24844                           fsr1l	equ	0xFE1
 24845                           indf2	equ	0xFDF
 24846                           postinc2	equ	0xFDE
 24847                           postdec2	equ	0xFDD
 24848                           fsr2h	equ	0xFDA
 24849                           fsr2l	equ	0xFD9
 24850                           status	equ	0xFD8
 24851                           
 24852 ;; *************** function _DC_Bus_Voltage *****************
 24853 ;; Defined at:
 24854 ;;		line 515 in file "ERROR_HANDLING.c"
 24855 ;; Parameters:    Size  Location     Type
 24856 ;;		None
 24857 ;; Auto vars:     Size  Location     Type
 24858 ;;		None
 24859 ;; Return value:  Size  Location     Type
 24860 ;;                  1    wreg      void 
 24861 ;; Registers used:
 24862 ;;		wreg, status,2, status,0
 24863 ;; Tracked objects:
 24864 ;;		On entry : 0/0
 24865 ;;		On exit  : 0/0
 24866 ;;		Unchanged: 0/0
 24867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24872 ;;Total ram usage:        0 bytes
 24873 ;; Hardware stack levels used:    1
 24874 ;; Hardware stack levels required when called:    3
 24875 ;; This function calls:
 24876 ;;		Nothing
 24877 ;; This function is called by:
 24878 ;;		_Error_Checking_One_Second
 24879 ;; This function uses a non-reentrant model
 24880 ;;
 24881                           
 24882                           	psect	text78
 24883  019270                     __ptext78:
 24884                           	opt stack 0
 24885  019270                     _DC_Bus_Voltage:
 24886                           	opt stack 25
 24887                           
 24888                           ;ERROR_HANDLING.c: 517: if(VFD_Error_No == 3)
 24889                           
 24890                           ;incstack = 0
 24891  019270  0E03               	movlw	3
 24892  019272  1820               	xorwf	_VFD_Error_No,w,c
 24893  019274  A4D8               	btfss	status,2,c
 24894  019276  D012               	goto	l21262
 24895                           
 24896                           ;ERROR_HANDLING.c: 518: {
 24897                           ;ERROR_HANDLING.c: 519: DC_BUS_Low_Counter++;
 24898  019278  0101               	movlb	1	; () banked
 24899  01927A  2B4F               	incf	_DC_BUS_Low_Counter& (0+255),f,b
 24900                           
 24901                           ; BSR set to: 1
 24902                           ;ERROR_HANDLING.c: 520: if(DC_BUS_Low_Counter >= 1)
 24903  01927C  0101               	movlb	1	; () banked
 24904  01927E  514F               	movf	_DC_BUS_Low_Counter& (0+255),w,b
 24905  019280  0101               	movlb	1	; () banked
 24906  019282  B4D8               	btfsc	status,2,c
 24907  019284  D00B               	goto	l21262
 24908                           
 24909                           ; BSR set to: 1
 24910                           ;ERROR_HANDLING.c: 521: {
 24911                           ;ERROR_HANDLING.c: 522: DC_BUS_Low_Counter = 0;
 24912  019286  0E00               	movlw	0
 24913  019288  0101               	movlb	1	; () banked
 24914  01928A  6F4F               	movwf	_DC_BUS_Low_Counter& (0+255),b
 24915                           
 24916                           ;ERROR_HANDLING.c: 523: Errors = DCB_L_H;
 24917  01928C  0E03               	movlw	3
 24918  01928E  6E1B               	movwf	_Errors,c
 24919                           
 24920                           ;ERROR_HANDLING.c: 524: VFD_DC_Bus_Low_Error = 1;
 24921  019290  0E01               	movlw	1
 24922  019292  0101               	movlb	1	; () banked
 24923  019294  6F90               	movwf	_VFD_DC_Bus_Low_Error& (0+255),b
 24924                           
 24925                           ;ERROR_HANDLING.c: 525: DC_Bus_Voltage_Flag = 0;
 24926  019296  0E00               	movlw	0
 24927  019298  0101               	movlb	1	; () banked
 24928  01929A  6F50               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24929  01929C                     l21262:
 24930                           
 24931                           ;ERROR_HANDLING.c: 526: }
 24932                           ;ERROR_HANDLING.c: 527: }
 24933                           ;ERROR_HANDLING.c: 528: if(VFD_Error_No == 7)
 24934  01929C  0E07               	movlw	7
 24935  01929E  1820               	xorwf	_VFD_Error_No,w,c
 24936  0192A0  A4D8               	btfss	status,2,c
 24937  0192A2  D008               	goto	l21266
 24938                           
 24939                           ;ERROR_HANDLING.c: 529: {
 24940                           ;ERROR_HANDLING.c: 530: Errors = DC_EXT_LOW;
 24941  0192A4  0E07               	movlw	7
 24942  0192A6  6E1B               	movwf	_Errors,c
 24943                           
 24944                           ;ERROR_HANDLING.c: 531: VFD_DC_EXTREM_LOW_Error = 1;
 24945  0192A8  0E01               	movlw	1
 24946  0192AA  0101               	movlb	1	; () banked
 24947  0192AC  6F91               	movwf	_VFD_DC_EXTREM_LOW_Error& (0+255),b
 24948                           
 24949                           ;ERROR_HANDLING.c: 532: DC_Bus_Voltage_Flag = 0;
 24950  0192AE  0E00               	movlw	0
 24951  0192B0  0101               	movlb	1	; () banked
 24952  0192B2  6F50               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24953  0192B4                     l21266:
 24954                           
 24955                           ;ERROR_HANDLING.c: 533: }
 24956                           ;ERROR_HANDLING.c: 534: if(VFD_Error_No == 3)
 24957  0192B4  0E03               	movlw	3
 24958  0192B6  1820               	xorwf	_VFD_Error_No,w,c
 24959  0192B8  A4D8               	btfss	status,2,c
 24960  0192BA  D012               	goto	l21274
 24961                           
 24962                           ;ERROR_HANDLING.c: 535: {
 24963                           ;ERROR_HANDLING.c: 536: DC_BUS_High_Counter++;
 24964  0192BC  0101               	movlb	1	; () banked
 24965  0192BE  2B4E               	incf	_DC_BUS_High_Counter& (0+255),f,b
 24966                           
 24967                           ; BSR set to: 1
 24968                           ;ERROR_HANDLING.c: 537: if(DC_BUS_High_Counter >= 1)
 24969  0192C0  0101               	movlb	1	; () banked
 24970  0192C2  514E               	movf	_DC_BUS_High_Counter& (0+255),w,b
 24971  0192C4  0101               	movlb	1	; () banked
 24972  0192C6  B4D8               	btfsc	status,2,c
 24973  0192C8  D00B               	goto	l21274
 24974                           
 24975                           ; BSR set to: 1
 24976                           ;ERROR_HANDLING.c: 538: {
 24977                           ;ERROR_HANDLING.c: 539: DC_BUS_High_Counter = 0;
 24978  0192CA  0E00               	movlw	0
 24979  0192CC  0101               	movlb	1	; () banked
 24980  0192CE  6F4E               	movwf	_DC_BUS_High_Counter& (0+255),b
 24981                           
 24982                           ;ERROR_HANDLING.c: 540: Errors = DCB_L_H;
 24983  0192D0  0E03               	movlw	3
 24984  0192D2  6E1B               	movwf	_Errors,c
 24985                           
 24986                           ;ERROR_HANDLING.c: 541: VFD_DC_Bus_High_Error = 1;
 24987  0192D4  0E01               	movlw	1
 24988  0192D6  0101               	movlb	1	; () banked
 24989  0192D8  6F8F               	movwf	_VFD_DC_Bus_High_Error& (0+255),b
 24990                           
 24991                           ;ERROR_HANDLING.c: 542: DC_Bus_Voltage_Flag = 0;
 24992  0192DA  0E00               	movlw	0
 24993  0192DC  0101               	movlb	1	; () banked
 24994  0192DE  6F50               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24995  0192E0                     l21274:
 24996                           
 24997                           ;ERROR_HANDLING.c: 543: }
 24998                           ;ERROR_HANDLING.c: 544: }
 24999                           ;ERROR_HANDLING.c: 545: if(VFD_Error_No == 8)
 25000  0192E0  0E08               	movlw	8
 25001  0192E2  1820               	xorwf	_VFD_Error_No,w,c
 25002  0192E4  A4D8               	btfss	status,2,c
 25003  0192E6  D012               	goto	l21282
 25004                           
 25005                           ;ERROR_HANDLING.c: 546: {
 25006                           ;ERROR_HANDLING.c: 547: DC_BUS_Current_Counter++;
 25007  0192E8  0101               	movlb	1	; () banked
 25008  0192EA  2B4D               	incf	_DC_BUS_Current_Counter& (0+255),f,b
 25009                           
 25010                           ; BSR set to: 1
 25011                           ;ERROR_HANDLING.c: 548: if(DC_BUS_Current_Counter >= 1)
 25012  0192EC  0101               	movlb	1	; () banked
 25013  0192EE  514D               	movf	_DC_BUS_Current_Counter& (0+255),w,b
 25014  0192F0  0101               	movlb	1	; () banked
 25015  0192F2  B4D8               	btfsc	status,2,c
 25016  0192F4  D00B               	goto	l21282
 25017                           
 25018                           ; BSR set to: 1
 25019                           ;ERROR_HANDLING.c: 549: {
 25020                           ;ERROR_HANDLING.c: 550: DC_BUS_Current_Counter = 0;
 25021  0192F6  0E00               	movlw	0
 25022  0192F8  0101               	movlb	1	; () banked
 25023  0192FA  6F4D               	movwf	_DC_BUS_Current_Counter& (0+255),b
 25024                           
 25025                           ;ERROR_HANDLING.c: 551: Errors = VFD_OC;
 25026  0192FC  0E08               	movlw	8
 25027  0192FE  6E1B               	movwf	_Errors,c
 25028                           
 25029                           ;ERROR_HANDLING.c: 552: VFD_DC_Bus_Current_Error = 1;
 25030  019300  0E01               	movlw	1
 25031  019302  0101               	movlb	1	; () banked
 25032  019304  6F8E               	movwf	_VFD_DC_Bus_Current_Error& (0+255),b
 25033                           
 25034                           ;ERROR_HANDLING.c: 553: DC_Bus_Voltage_Flag = 0;
 25035  019306  0E00               	movlw	0
 25036  019308  0101               	movlb	1	; () banked
 25037  01930A  6F50               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 25038  01930C                     l21282:
 25039                           
 25040                           ;ERROR_HANDLING.c: 554: }
 25041                           ;ERROR_HANDLING.c: 555: }
 25042                           ;ERROR_HANDLING.c: 556: if(VFD_Error_No == 6)
 25043  01930C  0E06               	movlw	6
 25044  01930E  1820               	xorwf	_VFD_Error_No,w,c
 25045  019310  A4D8               	btfss	status,2,c
 25046  019312  D00A               	goto	l6284
 25047                           
 25048                           ;ERROR_HANDLING.c: 557: {
 25049                           ;ERROR_HANDLING.c: 558: Errors = VFD_SHORT_CIRCUIT;
 25050  019314  0E06               	movlw	6
 25051  019316  6E1B               	movwf	_Errors,c
 25052                           
 25053                           ;ERROR_HANDLING.c: 559: VFD_SHORT_CIRCUIT_fLAG = 1;
 25054  019318  0E00               	movlw	0
 25055  01931A  0102               	movlb	2	; () banked
 25056  01931C  6FA7               	movwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),b
 25057  01931E  0E01               	movlw	1
 25058  019320  6FA6               	movwf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),b
 25059                           
 25060                           ;ERROR_HANDLING.c: 560: DC_Bus_Voltage_Flag = 0;
 25061  019322  0E00               	movlw	0
 25062  019324  0101               	movlb	1	; () banked
 25063  019326  6F50               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 25064  019328                     l6284:
 25065                           
 25066                           ;ERROR_HANDLING.c: 561: }
 25067                           ;ERROR_HANDLING.c: 562: if(VFD_Error_No == 0)
 25068  019328  5020               	movf	_VFD_Error_No,w,c
 25069  01932A  A4D8               	btfss	status,2,c
 25070  01932C  0012               	return	
 25071                           
 25072                           ;ERROR_HANDLING.c: 563: {
 25073                           ;ERROR_HANDLING.c: 564: VFD_DC_Bus_High_Error = 0;
 25074  01932E  0E00               	movlw	0
 25075  019330  0101               	movlb	1	; () banked
 25076  019332  6F8F               	movwf	_VFD_DC_Bus_High_Error& (0+255),b
 25077                           
 25078                           ;ERROR_HANDLING.c: 565: VFD_DC_Bus_Low_Error = 0;
 25079  019334  0E00               	movlw	0
 25080  019336  0101               	movlb	1	; () banked
 25081  019338  6F90               	movwf	_VFD_DC_Bus_Low_Error& (0+255),b
 25082                           
 25083                           ;ERROR_HANDLING.c: 566: VFD_SHORT_CIRCUIT_fLAG = 0;
 25084  01933A  0E00               	movlw	0
 25085  01933C  0102               	movlb	2	; () banked
 25086  01933E  6FA7               	movwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),b
 25087  019340  0E00               	movlw	0
 25088  019342  6FA6               	movwf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),b
 25089                           
 25090                           ;ERROR_HANDLING.c: 567: VFD_DC_Bus_Current_Error = 0;
 25091  019344  0E00               	movlw	0
 25092  019346  0101               	movlb	1	; () banked
 25093  019348  6F8E               	movwf	_VFD_DC_Bus_Current_Error& (0+255),b
 25094                           
 25095                           ;ERROR_HANDLING.c: 568: DC_Bus_Voltage_Flag = 1;
 25096  01934A  0E01               	movlw	1
 25097  01934C  0101               	movlb	1	; () banked
 25098  01934E  6F50               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 25099  019350  0012               	return	
 25100  019352                     __end_of_DC_Bus_Voltage:
 25101                           	opt stack 0
 25102                           tblptru	equ	0xFF8
 25103                           tblptrh	equ	0xFF7
 25104                           tblptrl	equ	0xFF6
 25105                           tablat	equ	0xFF5
 25106                           prodh	equ	0xFF4
 25107                           prodl	equ	0xFF3
 25108                           intcon	equ	0xFF2
 25109                           postinc0	equ	0xFEE
 25110                           wreg	equ	0xFE8
 25111                           postdec1	equ	0xFE5
 25112                           fsr1h	equ	0xFE2
 25113                           fsr1l	equ	0xFE1
 25114                           indf2	equ	0xFDF
 25115                           postinc2	equ	0xFDE
 25116                           postdec2	equ	0xFDD
 25117                           fsr2h	equ	0xFDA
 25118                           fsr2l	equ	0xFD9
 25119                           status	equ	0xFD8
 25120                           
 25121 ;; *************** function _Communication_Error *****************
 25122 ;; Defined at:
 25123 ;;		line 81 in file "RS485_COMMUNICATION.c"
 25124 ;; Parameters:    Size  Location     Type
 25125 ;;		None
 25126 ;; Auto vars:     Size  Location     Type
 25127 ;;		None
 25128 ;; Return value:  Size  Location     Type
 25129 ;;                  1    wreg      void 
 25130 ;; Registers used:
 25131 ;;		wreg, status,2, status,0
 25132 ;; Tracked objects:
 25133 ;;		On entry : 0/0
 25134 ;;		On exit  : 0/0
 25135 ;;		Unchanged: 0/0
 25136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25139 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25141 ;;Total ram usage:        2 bytes
 25142 ;; Hardware stack levels used:    1
 25143 ;; Hardware stack levels required when called:    3
 25144 ;; This function calls:
 25145 ;;		Nothing
 25146 ;; This function is called by:
 25147 ;;		_Error_Checking_One_Second
 25148 ;; This function uses a non-reentrant model
 25149 ;;
 25150                           
 25151                           	psect	text79
 25152  01A89E                     __ptext79:
 25153                           	opt stack 0
 25154  01A89E                     _Communication_Error:
 25155                           	opt stack 25
 25156                           
 25157                           ;RS485_COMMUNICATION.c: 83: if(VFD_ON_Flag == 1)
 25158                           
 25159                           ;incstack = 0
 25160  01A89E  0101               	movlb	1	; () banked
 25161  01A8A0  0593               	decf	_VFD_ON_Flag& (0+255),w,b
 25162  01A8A2  A4D8               	btfss	status,2,c
 25163  01A8A4  D02A               	goto	l21322
 25164                           
 25165                           ; BSR set to: 1
 25166                           ;RS485_COMMUNICATION.c: 84: {
 25167                           ;RS485_COMMUNICATION.c: 85: if(Communication_OTP != Data_1[9])
 25168  01A8A6  5015               	movf	_Communication_OTP,w,c
 25169  01A8A8  0100               	movlb	0	; () banked
 25170  01A8AA  6F60               	movwf	??_Communication_Error& (0+255),b
 25171  01A8AC  6B61               	clrf	(??_Communication_Error+1)& (0+255),b
 25172  01A8AE  0105               	movlb	5	; () banked
 25173  01A8B0  5112               	movf	(_Data_1+18)& (0+255),w,b
 25174  01A8B2  0100               	movlb	0	; () banked
 25175  01A8B4  1960               	xorwf	??_Communication_Error& (0+255),w,b
 25176  01A8B6  E106               	bnz	u15880
 25177  01A8B8  0105               	movlb	5	; () banked
 25178  01A8BA  5113               	movf	(_Data_1+19)& (0+255),w,b
 25179  01A8BC  0100               	movlb	0	; () banked
 25180  01A8BE  1961               	xorwf	(??_Communication_Error+1)& (0+255),w,b
 25181  01A8C0  B4D8               	btfsc	status,2,c
 25182  01A8C2  D014               	goto	l21320
 25183  01A8C4                     u15880:
 25184                           
 25185                           ; BSR set to: 0
 25186                           ;RS485_COMMUNICATION.c: 86: {
 25187                           ;RS485_COMMUNICATION.c: 87: VFD_communication_Error_Counter++;
 25188  01A8C4  0101               	movlb	1	; () banked
 25189  01A8C6  2B97               	incf	_VFD_communication_Error_Counter& (0+255),f,b
 25190                           
 25191                           ; BSR set to: 1
 25192                           ;RS485_COMMUNICATION.c: 88: if(VFD_communication_Error_Counter == 10)
 25193  01A8C8  0E0A               	movlw	10
 25194  01A8CA  0101               	movlb	1	; () banked
 25195  01A8CC  1997               	xorwf	_VFD_communication_Error_Counter& (0+255),w,b
 25196  01A8CE  A4D8               	btfss	status,2,c
 25197  01A8D0  D009               	goto	l21318
 25198                           
 25199                           ; BSR set to: 1
 25200                           ;RS485_COMMUNICATION.c: 89: {
 25201                           ;RS485_COMMUNICATION.c: 90: VFD_communication_Error_Counter = 0;
 25202  01A8D2  0E00               	movlw	0
 25203  01A8D4  0101               	movlb	1	; () banked
 25204  01A8D6  6F97               	movwf	_VFD_communication_Error_Counter& (0+255),b
 25205                           
 25206                           ;RS485_COMMUNICATION.c: 91: VFD_communication_Error_Flag = 1;
 25207  01A8D8  0E01               	movlw	1
 25208  01A8DA  0100               	movlb	0	; () banked
 25209  01A8DC  6FF1               	movwf	_VFD_communication_Error_Flag& (0+255),b
 25210                           
 25211                           ;RS485_COMMUNICATION.c: 92: Errors = VFD_COMMU_ERR;
 25212  01A8DE  0E05               	movlw	5
 25213  01A8E0  6E1B               	movwf	_Errors,c
 25214                           
 25215                           ;RS485_COMMUNICATION.c: 93: }
 25216  01A8E2  0012               	return	
 25217  01A8E4                     l21318:
 25218                           
 25219                           ;RS485_COMMUNICATION.c: 94: else
 25220                           ;RS485_COMMUNICATION.c: 95: {
 25221                           ;RS485_COMMUNICATION.c: 96: VFD_communication_Error_Flag = 0;
 25222  01A8E4  0E00               	movlw	0
 25223  01A8E6  0100               	movlb	0	; () banked
 25224  01A8E8  6FF1               	movwf	_VFD_communication_Error_Flag& (0+255),b
 25225                           
 25226                           ; BSR set to: 0
 25227                           ;RS485_COMMUNICATION.c: 97: }
 25228                           ;RS485_COMMUNICATION.c: 98: }
 25229  01A8EA  0012               	return	
 25230  01A8EC                     l21320:
 25231                           
 25232                           ; BSR set to: 0
 25233                           ;RS485_COMMUNICATION.c: 99: else
 25234                           ;RS485_COMMUNICATION.c: 100: {
 25235                           ;RS485_COMMUNICATION.c: 101: VFD_communication_Error_Flag = 0;
 25236  01A8EC  0E00               	movlw	0
 25237  01A8EE  0100               	movlb	0	; () banked
 25238  01A8F0  6FF1               	movwf	_VFD_communication_Error_Flag& (0+255),b
 25239                           
 25240                           ;RS485_COMMUNICATION.c: 102: VFD_communication_Error_Counter = 0;
 25241  01A8F2  0E00               	movlw	0
 25242  01A8F4  0101               	movlb	1	; () banked
 25243  01A8F6  6F97               	movwf	_VFD_communication_Error_Counter& (0+255),b
 25244                           
 25245                           ; BSR set to: 1
 25246                           ;RS485_COMMUNICATION.c: 103: }
 25247                           ;RS485_COMMUNICATION.c: 104: }
 25248  01A8F8  0012               	return	
 25249  01A8FA                     l21322:
 25250                           
 25251                           ; BSR set to: 1
 25252                           ;RS485_COMMUNICATION.c: 105: else
 25253                           ;RS485_COMMUNICATION.c: 106: {
 25254                           ;RS485_COMMUNICATION.c: 107: VFD_communication_Error_Counter = 0;
 25255  01A8FA  0E00               	movlw	0
 25256  01A8FC  0101               	movlb	1	; () banked
 25257  01A8FE  6F97               	movwf	_VFD_communication_Error_Counter& (0+255),b
 25258                           
 25259                           ;RS485_COMMUNICATION.c: 108: VFD_communication_Error_Flag = 0;
 25260  01A900  0E00               	movlw	0
 25261  01A902  0100               	movlb	0	; () banked
 25262  01A904  6FF1               	movwf	_VFD_communication_Error_Flag& (0+255),b
 25263  01A906  0012               	return	
 25264  01A908                     __end_of_Communication_Error:
 25265                           	opt stack 0
 25266                           tblptru	equ	0xFF8
 25267                           tblptrh	equ	0xFF7
 25268                           tblptrl	equ	0xFF6
 25269                           tablat	equ	0xFF5
 25270                           prodh	equ	0xFF4
 25271                           prodl	equ	0xFF3
 25272                           intcon	equ	0xFF2
 25273                           postinc0	equ	0xFEE
 25274                           wreg	equ	0xFE8
 25275                           postdec1	equ	0xFE5
 25276                           fsr1h	equ	0xFE2
 25277                           fsr1l	equ	0xFE1
 25278                           indf2	equ	0xFDF
 25279                           postinc2	equ	0xFDE
 25280                           postdec2	equ	0xFDD
 25281                           fsr2h	equ	0xFDA
 25282                           fsr2l	equ	0xFD9
 25283                           status	equ	0xFD8
 25284                           
 25285 ;; *************** function _EEPROM_Error_Monitor *****************
 25286 ;; Defined at:
 25287 ;;		line 15 in file "EEPROM.c"
 25288 ;; Parameters:    Size  Location     Type
 25289 ;;		None
 25290 ;; Auto vars:     Size  Location     Type
 25291 ;;		None
 25292 ;; Return value:  Size  Location     Type
 25293 ;;                  1    wreg      void 
 25294 ;; Registers used:
 25295 ;;		wreg, status,2, status,0, cstack
 25296 ;; Tracked objects:
 25297 ;;		On entry : 0/0
 25298 ;;		On exit  : 0/0
 25299 ;;		Unchanged: 0/0
 25300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25305 ;;Total ram usage:        0 bytes
 25306 ;; Hardware stack levels used:    1
 25307 ;; Hardware stack levels required when called:    4
 25308 ;; This function calls:
 25309 ;;		_int_eeprom_read
 25310 ;;		_int_eeprom_write
 25311 ;; This function is called by:
 25312 ;;		_Timer0_OneSecond_Function
 25313 ;; This function uses a non-reentrant model
 25314 ;;
 25315                           
 25316                           	psect	text80
 25317  015E2E                     __ptext80:
 25318                           	opt stack 0
 25319  015E2E                     _EEPROM_Error_Monitor:
 25320                           	opt stack 25
 25321                           
 25322                           ;EEPROM.c: 17: Gen_EP_Err_Flag = int_eeprom_read((0x01));
 25323                           
 25324                           ;incstack = 0
 25325  015E2E  0E00               	movlw	0
 25326  015E30  0100               	movlb	0	; () banked
 25327  015E32  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 25328  015E34  0E01               	movlw	1
 25329  015E36  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 25330  015E38  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 25331  015E3C  0100               	movlb	0	; () banked
 25332  015E3E  5160               	movf	?_int_eeprom_read& (0+255),w,b
 25333  015E40  0100               	movlb	0	; () banked
 25334  015E42  6FE3               	movwf	_Gen_EP_Err_Flag& (0+255),b
 25335                           
 25336                           ;EEPROM.c: 18: Pitch_EP_Err_Flag = int_eeprom_read((0x02));
 25337  015E44  0E00               	movlw	0
 25338  015E46  0100               	movlb	0	; () banked
 25339  015E48  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 25340  015E4A  0E02               	movlw	2
 25341  015E4C  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 25342  015E4E  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 25343  015E52  0100               	movlb	0	; () banked
 25344  015E54  5160               	movf	?_int_eeprom_read& (0+255),w,b
 25345  015E56  0100               	movlb	0	; () banked
 25346  015E58  6FE9               	movwf	_Pitch_EP_Err_Flag& (0+255),b
 25347                           
 25348                           ;EEPROM.c: 19: EEPROM_Error_Flag = int_eeprom_read((0x20));
 25349  015E5A  0E00               	movlw	0
 25350  015E5C  0100               	movlb	0	; () banked
 25351  015E5E  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 25352  015E60  0E20               	movlw	32
 25353  015E62  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 25354  015E64  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 25355  015E68  0100               	movlb	0	; () banked
 25356  015E6A  5160               	movf	?_int_eeprom_read& (0+255),w,b
 25357  015E6C  6E17               	movwf	_EEPROM_Error_Flag,c
 25358                           
 25359                           ;EEPROM.c: 20: Start_Stop_Flag = int_eeprom_read((0x21));
 25360  015E6E  0E00               	movlw	0
 25361  015E70  0100               	movlb	0	; () banked
 25362  015E72  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 25363  015E74  0E21               	movlw	33
 25364  015E76  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 25365  015E78  EC79  F0D7         	call	_int_eeprom_read	;wreg free
 25366  015E7C  0100               	movlb	0	; () banked
 25367  015E7E  5160               	movf	?_int_eeprom_read& (0+255),w,b
 25368  015E80  6E1F               	movwf	_Start_Stop_Flag,c
 25369                           
 25370                           ; BSR set to: 0
 25371                           ;EEPROM.c: 23: if(Start_Stop_Flag != 1)
 25372  015E82  041F               	decf	_Start_Stop_Flag,w,c
 25373  015E84  B4D8               	btfsc	status,2,c
 25374  015E86  D00E               	goto	l22104
 25375                           
 25376                           ; BSR set to: 0
 25377                           ;EEPROM.c: 24: {
 25378                           ;EEPROM.c: 25: Start_Stop_Flag = 0;
 25379  015E88  0E00               	movlw	0
 25380  015E8A  6E1F               	movwf	_Start_Stop_Flag,c
 25381                           
 25382                           ; BSR set to: 0
 25383                           ;EEPROM.c: 26: int_eeprom_write((0x21),0);
 25384  015E8C  0E00               	movlw	0
 25385  015E8E  0100               	movlb	0	; () banked
 25386  015E90  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25387  015E92  0E21               	movlw	33
 25388  015E94  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25389  015E96  0E00               	movlw	0
 25390  015E98  0100               	movlb	0	; () banked
 25391  015E9A  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25392  015E9C  0E00               	movlw	0
 25393  015E9E  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25394  015EA0  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25395  015EA4                     l22104:
 25396                           
 25397                           ;EEPROM.c: 27: }
 25398                           ;EEPROM.c: 28: if(Pitch_EP_Err_Flag == 1)
 25399  015EA4  0100               	movlb	0	; () banked
 25400  015EA6  05E9               	decf	_Pitch_EP_Err_Flag& (0+255),w,b
 25401  015EA8  A4D8               	btfss	status,2,c
 25402  015EAA  D006               	goto	l22108
 25403                           
 25404                           ; BSR set to: 0
 25405                           ;EEPROM.c: 29: {
 25406                           ;EEPROM.c: 30: Feedback_Error = 1;
 25407  015EAC  0E01               	movlw	1
 25408  015EAE  0101               	movlb	1	; () banked
 25409  015EB0  6F56               	movwf	_Feedback_Error& (0+255),b
 25410                           
 25411                           ;EEPROM.c: 31: Errors = PITCH_FB;
 25412  015EB2  0E15               	movlw	21
 25413  015EB4  6E1B               	movwf	_Errors,c
 25414                           
 25415                           ;EEPROM.c: 32: }
 25416  015EB6  D00C               	goto	l22110
 25417  015EB8                     l22108:
 25418                           
 25419                           ;EEPROM.c: 33: else
 25420                           ;EEPROM.c: 34: {
 25421                           ;EEPROM.c: 35: int_eeprom_write((0x02),0);
 25422  015EB8  0E00               	movlw	0
 25423  015EBA  0100               	movlb	0	; () banked
 25424  015EBC  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25425  015EBE  0E02               	movlw	2
 25426  015EC0  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25427  015EC2  0E00               	movlw	0
 25428  015EC4  0100               	movlb	0	; () banked
 25429  015EC6  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25430  015EC8  0E00               	movlw	0
 25431  015ECA  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25432  015ECC  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25433  015ED0                     l22110:
 25434                           
 25435                           ;EEPROM.c: 36: }
 25436                           ;EEPROM.c: 38: if(Gen_EP_Err_Flag == 1)
 25437  015ED0  0100               	movlb	0	; () banked
 25438  015ED2  05E3               	decf	_Gen_EP_Err_Flag& (0+255),w,b
 25439  015ED4  A4D8               	btfss	status,2,c
 25440  015ED6  D006               	goto	l22114
 25441                           
 25442                           ; BSR set to: 0
 25443                           ;EEPROM.c: 39: {
 25444                           ;EEPROM.c: 40: Feedback_Error = 1;
 25445  015ED8  0E01               	movlw	1
 25446  015EDA  0101               	movlb	1	; () banked
 25447  015EDC  6F56               	movwf	_Feedback_Error& (0+255),b
 25448                           
 25449                           ;EEPROM.c: 41: Errors = GEN_FB;
 25450  015EDE  0E14               	movlw	20
 25451  015EE0  6E1B               	movwf	_Errors,c
 25452                           
 25453                           ;EEPROM.c: 42: }
 25454  015EE2  D00C               	goto	l22116
 25455  015EE4                     l22114:
 25456                           
 25457                           ;EEPROM.c: 43: else
 25458                           ;EEPROM.c: 44: {
 25459                           ;EEPROM.c: 45: int_eeprom_write((0x01),0);
 25460  015EE4  0E00               	movlw	0
 25461  015EE6  0100               	movlb	0	; () banked
 25462  015EE8  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25463  015EEA  0E01               	movlw	1
 25464  015EEC  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25465  015EEE  0E00               	movlw	0
 25466  015EF0  0100               	movlb	0	; () banked
 25467  015EF2  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25468  015EF4  0E00               	movlw	0
 25469  015EF6  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25470  015EF8  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25471  015EFC                     l22116:
 25472                           
 25473                           ;EEPROM.c: 46: }
 25474                           ;EEPROM.c: 48: if(EEPROM_Error_Flag == 1)
 25475  015EFC  0417               	decf	_EEPROM_Error_Flag,w,c
 25476  015EFE  A4D8               	btfss	status,2,c
 25477  015F00  D003               	goto	l22120
 25478                           
 25479                           ;EEPROM.c: 49: {
 25480                           ;EEPROM.c: 50: Errors = EP_Errors1;
 25481  015F02  C018  F01B         	movff	_EP_Errors1,_Errors
 25482                           
 25483                           ;EEPROM.c: 51: }
 25484  015F06  D00C               	goto	l22122
 25485  015F08                     l22120:
 25486                           
 25487                           ;EEPROM.c: 52: else
 25488                           ;EEPROM.c: 53: {
 25489                           ;EEPROM.c: 54: int_eeprom_write((0x20),0);
 25490  015F08  0E00               	movlw	0
 25491  015F0A  0100               	movlb	0	; () banked
 25492  015F0C  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25493  015F0E  0E20               	movlw	32
 25494  015F10  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25495  015F12  0E00               	movlw	0
 25496  015F14  0100               	movlb	0	; () banked
 25497  015F16  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25498  015F18  0E00               	movlw	0
 25499  015F1A  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25500  015F1C  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25501  015F20                     l22122:
 25502                           
 25503                           ;EEPROM.c: 55: }
 25504                           ;EEPROM.c: 57: if(RC0 == 0)
 25505  015F20  B082               	btfsc	3970,0,c	;volatile
 25506  015F22  0012               	return	
 25507                           
 25508                           ;EEPROM.c: 58: {
 25509                           ;EEPROM.c: 59: Feedback_Error = 0;
 25510  015F24  0E00               	movlw	0
 25511  015F26  0101               	movlb	1	; () banked
 25512  015F28  6F56               	movwf	_Feedback_Error& (0+255),b
 25513                           
 25514                           ;EEPROM.c: 61: EEPROM_Error_Flag = 0;
 25515  015F2A  0E00               	movlw	0
 25516  015F2C  6E17               	movwf	_EEPROM_Error_Flag,c
 25517                           
 25518                           ; BSR set to: 1
 25519                           ;EEPROM.c: 62: int_eeprom_write((0x20),EEPROM_Error_Flag);
 25520  015F2E  0E00               	movlw	0
 25521  015F30  0100               	movlb	0	; () banked
 25522  015F32  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25523  015F34  0E20               	movlw	32
 25524  015F36  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25525  015F38  C017  F062         	movff	_EEPROM_Error_Flag,int_eeprom_write@dat
 25526  015F3C  0100               	movlb	0	; () banked
 25527  015F3E  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25528  015F40  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25529                           
 25530                           ;EEPROM.c: 64: Total_Min = 0; Minutes_1 = 0; Minutes = 0;
 25531  015F44  0E00               	movlw	0
 25532  015F46  0101               	movlb	1	; () banked
 25533  015F48  6F87               	movwf	_Total_Min& (0+255),b
 25534                           
 25535                           ; BSR set to: 1
 25536  015F4A  0E00               	movlw	0
 25537  015F4C  0101               	movlb	1	; () banked
 25538  015F4E  6F6F               	movwf	_Minutes_1& (0+255),b
 25539                           
 25540                           ; BSR set to: 1
 25541  015F50  0E00               	movlw	0
 25542  015F52  0101               	movlb	1	; () banked
 25543  015F54  6F6E               	movwf	_Minutes& (0+255),b
 25544                           
 25545                           ; BSR set to: 1
 25546                           ;EEPROM.c: 66: Pitch_EP_Err_Flag = 0;
 25547  015F56  0E00               	movlw	0
 25548  015F58  0100               	movlb	0	; () banked
 25549  015F5A  6FE9               	movwf	_Pitch_EP_Err_Flag& (0+255),b
 25550                           
 25551                           ; BSR set to: 0
 25552                           ;EEPROM.c: 67: int_eeprom_write((0x02),0);
 25553  015F5C  0E00               	movlw	0
 25554  015F5E  0100               	movlb	0	; () banked
 25555  015F60  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25556  015F62  0E02               	movlw	2
 25557  015F64  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25558  015F66  0E00               	movlw	0
 25559  015F68  0100               	movlb	0	; () banked
 25560  015F6A  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25561  015F6C  0E00               	movlw	0
 25562  015F6E  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25563  015F70  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25564                           
 25565                           ;EEPROM.c: 69: Gen_EP_Err_Flag = 0;
 25566  015F74  0E00               	movlw	0
 25567  015F76  0100               	movlb	0	; () banked
 25568  015F78  6FE3               	movwf	_Gen_EP_Err_Flag& (0+255),b
 25569                           
 25570                           ; BSR set to: 0
 25571                           ;EEPROM.c: 70: int_eeprom_write((0x01),0);
 25572  015F7A  0E00               	movlw	0
 25573  015F7C  0100               	movlb	0	; () banked
 25574  015F7E  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25575  015F80  0E01               	movlw	1
 25576  015F82  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25577  015F84  0E00               	movlw	0
 25578  015F86  0100               	movlb	0	; () banked
 25579  015F88  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25580  015F8A  0E00               	movlw	0
 25581  015F8C  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25582  015F8E  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25583                           
 25584                           ;EEPROM.c: 73: EP_Errors3 = 0; EP_Errors2 = 0; EP_Errors1 = 0;
 25585  015F92  0E00               	movlw	0
 25586  015F94  6E1A               	movwf	_EP_Errors3,c
 25587  015F96  0E00               	movlw	0
 25588  015F98  6E19               	movwf	_EP_Errors2,c
 25589  015F9A  0E00               	movlw	0
 25590  015F9C  6E18               	movwf	_EP_Errors1,c
 25591                           
 25592                           ;EEPROM.c: 75: int_eeprom_write((0x19),EP_Errors3);
 25593  015F9E  0E00               	movlw	0
 25594  015FA0  0100               	movlb	0	; () banked
 25595  015FA2  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25596  015FA4  0E19               	movlw	25
 25597  015FA6  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25598  015FA8  C01A  F062         	movff	_EP_Errors3,int_eeprom_write@dat
 25599  015FAC  0100               	movlb	0	; () banked
 25600  015FAE  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25601  015FB0  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25602                           
 25603                           ;EEPROM.c: 76: int_eeprom_write((0x18),EP_Errors2);
 25604  015FB4  0E00               	movlw	0
 25605  015FB6  0100               	movlb	0	; () banked
 25606  015FB8  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25607  015FBA  0E18               	movlw	24
 25608  015FBC  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25609  015FBE  C019  F062         	movff	_EP_Errors2,int_eeprom_write@dat
 25610  015FC2  0100               	movlb	0	; () banked
 25611  015FC4  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25612  015FC6  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25613                           
 25614                           ;EEPROM.c: 77: int_eeprom_write((0x17),EP_Errors1);
 25615  015FCA  0E00               	movlw	0
 25616  015FCC  0100               	movlb	0	; () banked
 25617  015FCE  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25618  015FD0  0E17               	movlw	23
 25619  015FD2  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25620  015FD4  C018  F062         	movff	_EP_Errors1,int_eeprom_write@dat
 25621  015FD8  0100               	movlb	0	; () banked
 25622  015FDA  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25623  015FDC  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25624                           
 25625                           ;EEPROM.c: 79: GiMinutes_3 = 0; GiMinutes_2 = 0; GiMinutes_1 = 0;
 25626  015FE0  0E00               	movlw	0
 25627  015FE2  0100               	movlb	0	; () banked
 25628  015FE4  6FDE               	movwf	(_GiMinutes_3+1)& (0+255),b
 25629  015FE6  0E00               	movlw	0
 25630  015FE8  6FDD               	movwf	_GiMinutes_3& (0+255),b
 25631                           
 25632                           ; BSR set to: 0
 25633  015FEA  0E00               	movlw	0
 25634  015FEC  6E14               	movwf	_GiMinutes_2+1,c
 25635  015FEE  0E00               	movlw	0
 25636  015FF0  6E13               	movwf	_GiMinutes_2,c
 25637                           
 25638                           ; BSR set to: 0
 25639  015FF2  0E00               	movlw	0
 25640  015FF4  0100               	movlb	0	; () banked
 25641  015FF6  6FDC               	movwf	(_GiMinutes_1+1)& (0+255),b
 25642  015FF8  0E00               	movlw	0
 25643  015FFA  6FDB               	movwf	_GiMinutes_1& (0+255),b
 25644                           
 25645                           ; BSR set to: 0
 25646                           ;EEPROM.c: 81: int_eeprom_write((0x13),GiMinutes_3);
 25647  015FFC  0E00               	movlw	0
 25648  015FFE  0100               	movlb	0	; () banked
 25649  016000  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25650  016002  0E13               	movlw	19
 25651  016004  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25652  016006  C0DD  F062         	movff	_GiMinutes_3,int_eeprom_write@dat
 25653  01600A  C0DE  F063         	movff	_GiMinutes_3+1,int_eeprom_write@dat+1
 25654  01600E  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25655                           
 25656                           ;EEPROM.c: 82: int_eeprom_write((0x12),GiMinutes_2);
 25657  016012  0E00               	movlw	0
 25658  016014  0100               	movlb	0	; () banked
 25659  016016  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25660  016018  0E12               	movlw	18
 25661  01601A  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25662  01601C  C013  F062         	movff	_GiMinutes_2,int_eeprom_write@dat
 25663  016020  C014  F063         	movff	_GiMinutes_2+1,int_eeprom_write@dat+1
 25664  016024  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25665                           
 25666                           ;EEPROM.c: 83: int_eeprom_write((0x11),GiMinutes_1);
 25667  016028  0E00               	movlw	0
 25668  01602A  0100               	movlb	0	; () banked
 25669  01602C  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25670  01602E  0E11               	movlw	17
 25671  016030  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25672  016032  C0DB  F062         	movff	_GiMinutes_1,int_eeprom_write@dat
 25673  016036  C0DC  F063         	movff	_GiMinutes_1+1,int_eeprom_write@dat+1
 25674  01603A  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25675                           
 25676                           ;EEPROM.c: 85: GiHours_3 = 0; GiHours_2 = 0; GiHours_1 = 0;
 25677  01603E  0E00               	movlw	0
 25678  016040  0101               	movlb	1	; () banked
 25679  016042  6F29               	movwf	(_GiHours_3+1)& (0+255),b
 25680  016044  0E00               	movlw	0
 25681  016046  6F28               	movwf	_GiHours_3& (0+255),b
 25682  016048  0E00               	movlw	0
 25683  01604A  0100               	movlb	0	; () banked
 25684  01604C  6FDA               	movwf	(_GiHours_2+1)& (0+255),b
 25685  01604E  0E00               	movlw	0
 25686  016050  6FD9               	movwf	_GiHours_2& (0+255),b
 25687  016052  0E00               	movlw	0
 25688  016054  0101               	movlb	1	; () banked
 25689  016056  6F27               	movwf	(_GiHours_1+1)& (0+255),b
 25690  016058  0E00               	movlw	0
 25691  01605A  6F26               	movwf	_GiHours_1& (0+255),b
 25692                           
 25693                           ; BSR set to: 1
 25694                           ;EEPROM.c: 87: int_eeprom_write((0x16),GiHours_3);
 25695  01605C  0E00               	movlw	0
 25696  01605E  0100               	movlb	0	; () banked
 25697  016060  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25698  016062  0E16               	movlw	22
 25699  016064  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25700  016066  C128  F062         	movff	_GiHours_3,int_eeprom_write@dat
 25701  01606A  C129  F063         	movff	_GiHours_3+1,int_eeprom_write@dat+1
 25702  01606E  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25703                           
 25704                           ;EEPROM.c: 88: int_eeprom_write((0x15),GiHours_2);
 25705  016072  0E00               	movlw	0
 25706  016074  0100               	movlb	0	; () banked
 25707  016076  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25708  016078  0E15               	movlw	21
 25709  01607A  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25710  01607C  C0D9  F062         	movff	_GiHours_2,int_eeprom_write@dat
 25711  016080  C0DA  F063         	movff	_GiHours_2+1,int_eeprom_write@dat+1
 25712  016084  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25713                           
 25714                           ;EEPROM.c: 89: int_eeprom_write((0x14),GiHours_1);
 25715  016088  0E00               	movlw	0
 25716  01608A  0100               	movlb	0	; () banked
 25717  01608C  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25718  01608E  0E14               	movlw	20
 25719  016090  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25720  016092  C126  F062         	movff	_GiHours_1,int_eeprom_write@dat
 25721  016096  C127  F063         	movff	_GiHours_1+1,int_eeprom_write@dat+1
 25722  01609A  ECD4  F0D6         	call	_int_eeprom_write	;wreg free
 25723  01609E  0012               	return	
 25724  0160A0                     __end_of_EEPROM_Error_Monitor:
 25725                           	opt stack 0
 25726                           tblptru	equ	0xFF8
 25727                           tblptrh	equ	0xFF7
 25728                           tblptrl	equ	0xFF6
 25729                           tablat	equ	0xFF5
 25730                           prodh	equ	0xFF4
 25731                           prodl	equ	0xFF3
 25732                           intcon	equ	0xFF2
 25733                           postinc0	equ	0xFEE
 25734                           wreg	equ	0xFE8
 25735                           postdec1	equ	0xFE5
 25736                           fsr1h	equ	0xFE2
 25737                           fsr1l	equ	0xFE1
 25738                           indf2	equ	0xFDF
 25739                           postinc2	equ	0xFDE
 25740                           postdec2	equ	0xFDD
 25741                           fsr2h	equ	0xFDA
 25742                           fsr2l	equ	0xFD9
 25743                           status	equ	0xFD8
 25744                           
 25745 ;; *************** function _int_eeprom_write *****************
 25746 ;; Defined at:
 25747 ;;		line 217 in file "EEPROM.c"
 25748 ;; Parameters:    Size  Location     Type
 25749 ;;  adr             2    0[BANK0 ] unsigned int 
 25750 ;;  dat             2    2[BANK0 ] unsigned int 
 25751 ;; Auto vars:     Size  Location     Type
 25752 ;;		None
 25753 ;; Return value:  Size  Location     Type
 25754 ;;                  2    0[BANK0 ] unsigned int 
 25755 ;; Registers used:
 25756 ;;		wreg, status,2
 25757 ;; Tracked objects:
 25758 ;;		On entry : 0/0
 25759 ;;		On exit  : 0/0
 25760 ;;		Unchanged: 0/0
 25761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25762 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25765 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25766 ;;Total ram usage:        4 bytes
 25767 ;; Hardware stack levels used:    1
 25768 ;; Hardware stack levels required when called:    3
 25769 ;; This function calls:
 25770 ;;		Nothing
 25771 ;; This function is called by:
 25772 ;;		_Pitch_Feedback
 25773 ;;		_Generator_One_Feedback
 25774 ;;		_Start_Stop
 25775 ;;		_EEPROM_Error_Monitor
 25776 ;;		_EEPROM_Error_Stop
 25777 ;;		_Last_3_EEPROM_ERROR_Trigger
 25778 ;; This function uses a non-reentrant model
 25779 ;;
 25780                           
 25781                           	psect	text81
 25782  01ADA8                     __ptext81:
 25783                           	opt stack 0
 25784  01ADA8                     _int_eeprom_write:
 25785                           	opt stack 23
 25786                           
 25787                           ;EEPROM.c: 219: EEADR = adr;
 25788                           
 25789                           ;incstack = 0
 25790  01ADA8  C060  FF62         	movff	int_eeprom_write@adr,3938	;volatile
 25791                           
 25792                           ;EEPROM.c: 220: EEDATA = dat;
 25793  01ADAC  C062  FF61         	movff	int_eeprom_write@dat,3937	;volatile
 25794                           
 25795                           ;EEPROM.c: 221: EECON1bits.EEPGD = 0;
 25796  01ADB0  9E7F               	bcf	3967,7,c	;volatile
 25797                           
 25798                           ;EEPROM.c: 222: EECON1bits.CFGS = 0;
 25799  01ADB2  9C7F               	bcf	3967,6,c	;volatile
 25800                           
 25801                           ;EEPROM.c: 223: INTCONbits.GIE = 0;
 25802  01ADB4  9EF2               	bcf	intcon,7,c	;volatile
 25803                           
 25804                           ;EEPROM.c: 224: EECON1bits.WREN = 1;
 25805  01ADB6  847F               	bsf	3967,2,c	;volatile
 25806                           
 25807                           ;EEPROM.c: 226: EECON2 = 0x55;
 25808  01ADB8  0E55               	movlw	85
 25809  01ADBA  6E7E               	movwf	3966,c	;volatile
 25810                           
 25811                           ;EEPROM.c: 227: EECON2 = 0xAA;
 25812  01ADBC  0EAA               	movlw	170
 25813  01ADBE  6E7E               	movwf	3966,c	;volatile
 25814                           
 25815                           ;EEPROM.c: 228: EECON1bits.WR = 1;
 25816  01ADC0  827F               	bsf	3967,1,c	;volatile
 25817  01ADC2                     l10240:
 25818  01ADC2  B27F               	btfsc	3967,1,c	;volatile
 25819  01ADC4  D7FE               	goto	l10240
 25820                           
 25821                           ;EEPROM.c: 230: EECON1bits.WREN = 0;
 25822  01ADC6  947F               	bcf	3967,2,c	;volatile
 25823                           
 25824                           ;EEPROM.c: 231: INTCONbits.GIE = 1;
 25825  01ADC8  8EF2               	bsf	intcon,7,c	;volatile
 25826                           
 25827                           ;EEPROM.c: 232: EECON1bits.RD = 1;
 25828  01ADCA  807F               	bsf	3967,0,c	;volatile
 25829  01ADCC                     l10243:
 25830  01ADCC  B07F               	btfsc	3967,0,c	;volatile
 25831  01ADCE  D7FE               	goto	l10243
 25832                           
 25833                           ;EEPROM.c: 234: dat = EEDATA;
 25834  01ADD0  CF61 F062          	movff	3937,int_eeprom_write@dat	;volatile
 25835  01ADD4  0100               	movlb	0	; () banked
 25836  01ADD6  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25837                           
 25838                           ; BSR set to: 0
 25839                           
 25840                           ;EEPROM.c: 235: return dat;
 25841                           ;	Return value of _int_eeprom_write is never used
 25842  01ADD8  0012               	return		;funcret
 25843  01ADDA                     __end_of_int_eeprom_write:
 25844                           	opt stack 0
 25845                           tblptru	equ	0xFF8
 25846                           tblptrh	equ	0xFF7
 25847                           tblptrl	equ	0xFF6
 25848                           tablat	equ	0xFF5
 25849                           prodh	equ	0xFF4
 25850                           prodl	equ	0xFF3
 25851                           intcon	equ	0xFF2
 25852                           postinc0	equ	0xFEE
 25853                           wreg	equ	0xFE8
 25854                           postdec1	equ	0xFE5
 25855                           fsr1h	equ	0xFE2
 25856                           fsr1l	equ	0xFE1
 25857                           indf2	equ	0xFDF
 25858                           postinc2	equ	0xFDE
 25859                           postdec2	equ	0xFDD
 25860                           fsr2h	equ	0xFDA
 25861                           fsr2l	equ	0xFD9
 25862                           status	equ	0xFD8
 25863                           
 25864 ;; *************** function _int_eeprom_read *****************
 25865 ;; Defined at:
 25866 ;;		line 202 in file "EEPROM.c"
 25867 ;; Parameters:    Size  Location     Type
 25868 ;;  adr             2    0[BANK0 ] unsigned int 
 25869 ;; Auto vars:     Size  Location     Type
 25870 ;;  temp            2    2[BANK0 ] unsigned int 
 25871 ;; Return value:  Size  Location     Type
 25872 ;;                  2    0[BANK0 ] unsigned int 
 25873 ;; Registers used:
 25874 ;;		wreg, status,2
 25875 ;; Tracked objects:
 25876 ;;		On entry : 0/0
 25877 ;;		On exit  : 0/0
 25878 ;;		Unchanged: 0/0
 25879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25880 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25881 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25883 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25884 ;;Total ram usage:        4 bytes
 25885 ;; Hardware stack levels used:    1
 25886 ;; Hardware stack levels required when called:    3
 25887 ;; This function calls:
 25888 ;;		Nothing
 25889 ;; This function is called by:
 25890 ;;		_EEPROM_Error_Monitor
 25891 ;;		_EEPROM_Error_Stop
 25892 ;; This function uses a non-reentrant model
 25893 ;;
 25894                           
 25895                           	psect	text82
 25896  01AEF2                     __ptext82:
 25897                           	opt stack 0
 25898  01AEF2                     _int_eeprom_read:
 25899                           	opt stack 23
 25900                           
 25901                           ;EEPROM.c: 204: unsigned int temp = 0;
 25902                           
 25903                           ; BSR set to: 0
 25904                           ;incstack = 0
 25905  01AEF2  0E00               	movlw	0
 25906  01AEF4  0100               	movlb	0	; () banked
 25907  01AEF6  6F63               	movwf	(int_eeprom_read@temp+1)& (0+255),b
 25908  01AEF8  0E00               	movlw	0
 25909  01AEFA  6F62               	movwf	int_eeprom_read@temp& (0+255),b
 25910                           
 25911                           ; BSR set to: 0
 25912                           ;EEPROM.c: 205: INTCONbits.GIE = 0;
 25913  01AEFC  9EF2               	bcf	intcon,7,c	;volatile
 25914                           
 25915                           ; BSR set to: 0
 25916                           ;EEPROM.c: 206: EECON1bits.EEPGD = 0;
 25917  01AEFE  9E7F               	bcf	3967,7,c	;volatile
 25918                           
 25919                           ; BSR set to: 0
 25920                           ;EEPROM.c: 207: EEADR = adr;
 25921  01AF00  C060  FF62         	movff	int_eeprom_read@adr,3938	;volatile
 25922                           
 25923                           ; BSR set to: 0
 25924                           ;EEPROM.c: 209: EECON1bits.RD = 1;
 25925  01AF04  807F               	bsf	3967,0,c	;volatile
 25926  01AF06                     l10234:
 25927  01AF06  B07F               	btfsc	3967,0,c	;volatile
 25928  01AF08  D7FE               	goto	l10234
 25929                           
 25930                           ;EEPROM.c: 211: temp = EEDATA;
 25931  01AF0A  CF61 F062          	movff	3937,int_eeprom_read@temp	;volatile
 25932  01AF0E  0100               	movlb	0	; () banked
 25933  01AF10  6B63               	clrf	(int_eeprom_read@temp+1)& (0+255),b
 25934                           
 25935                           ;EEPROM.c: 213: INTCONbits.GIE = 1;
 25936  01AF12  8EF2               	bsf	intcon,7,c	;volatile
 25937                           
 25938                           ;EEPROM.c: 214: return (temp);
 25939  01AF14  C062  F060         	movff	int_eeprom_read@temp,?_int_eeprom_read
 25940  01AF18  C063  F061         	movff	int_eeprom_read@temp+1,?_int_eeprom_read+1
 25941                           
 25942                           ; BSR set to: 0
 25943  01AF1C  0012               	return		;funcret
 25944  01AF1E                     __end_of_int_eeprom_read:
 25945                           	opt stack 0
 25946                           tblptru	equ	0xFF8
 25947                           tblptrh	equ	0xFF7
 25948                           tblptrl	equ	0xFF6
 25949                           tablat	equ	0xFF5
 25950                           prodh	equ	0xFF4
 25951                           prodl	equ	0xFF3
 25952                           intcon	equ	0xFF2
 25953                           postinc0	equ	0xFEE
 25954                           wreg	equ	0xFE8
 25955                           postdec1	equ	0xFE5
 25956                           fsr1h	equ	0xFE2
 25957                           fsr1l	equ	0xFE1
 25958                           indf2	equ	0xFDF
 25959                           postinc2	equ	0xFDE
 25960                           postdec2	equ	0xFDD
 25961                           fsr2h	equ	0xFDA
 25962                           fsr2l	equ	0xFD9
 25963                           status	equ	0xFD8
 25964                           
 25965 ;; *************** function _Temp_Read *****************
 25966 ;; Defined at:
 25967 ;;		line 123 in file "Power_Meter.c"
 25968 ;; Parameters:    Size  Location     Type
 25969 ;;		None
 25970 ;; Auto vars:     Size  Location     Type
 25971 ;;		None
 25972 ;; Return value:  Size  Location     Type
 25973 ;;                  1    wreg      void 
 25974 ;; Registers used:
 25975 ;;		wreg, status,2, status,0, cstack
 25976 ;; Tracked objects:
 25977 ;;		On entry : 0/0
 25978 ;;		On exit  : 0/0
 25979 ;;		Unchanged: 0/0
 25980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25982 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25984 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25985 ;;Total ram usage:       12 bytes
 25986 ;; Hardware stack levels used:    1
 25987 ;; Hardware stack levels required when called:    5
 25988 ;; This function calls:
 25989 ;;		_Read_Adc
 25990 ;;		___ftadd
 25991 ;;		___ftdiv
 25992 ;;		___ftmul
 25993 ;;		___lwtoft
 25994 ;; This function is called by:
 25995 ;;		_main
 25996 ;; This function uses a non-reentrant model
 25997 ;;
 25998                           
 25999                           	psect	text83
 26000  017C4E                     __ptext83:
 26001                           	opt stack 0
 26002  017C4E                     _Temp_Read:
 26003                           	opt stack 25
 26004                           
 26005                           ;Power_Meter.c: 125: Temp_Sensor = Read_Adc(0);
 26006                           
 26007                           ; BSR set to: 0
 26008                           ;incstack = 0
 26009  017C4E  0E00               	movlw	0
 26010  017C50  EC09  F0D6         	call	_Read_Adc
 26011  017C54  C060  F3ED         	movff	?_Read_Adc,_Temp_Sensor
 26012  017C58  C061  F3EE         	movff	?_Read_Adc+1,_Temp_Sensor+1
 26013                           
 26014                           ;Power_Meter.c: 126: Temprature = (Temp_Sensor * 0.118925);
 26015  017C5C  C3ED  F068         	movff	_Temp_Sensor,___lwtoft@c
 26016  017C60  C3EE  F069         	movff	_Temp_Sensor+1,___lwtoft@c+1
 26017  017C64  ECCE  F0D7         	call	___lwtoft	;wreg free
 26018  017C68  C068  F074         	movff	?___lwtoft,___ftmul@f1
 26019  017C6C  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
 26020  017C70  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
 26021  017C74  0E8F               	movlw	143
 26022  017C76  0100               	movlb	0	; () banked
 26023  017C78  6F77               	movwf	___ftmul@f2& (0+255),b
 26024  017C7A  0EF3               	movlw	243
 26025  017C7C  0100               	movlb	0	; () banked
 26026  017C7E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 26027  017C80  0E3D               	movlw	61
 26028  017C82  0100               	movlb	0	; () banked
 26029  017C84  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 26030  017C86  EC00  F0C1         	call	___ftmul	;wreg free
 26031  017C8A  C074  F224         	movff	?___ftmul,_Temprature
 26032  017C8E  C075  F225         	movff	?___ftmul+1,_Temprature+1
 26033  017C92  C076  F226         	movff	?___ftmul+2,_Temprature+2
 26034                           
 26035                           ;Power_Meter.c: 129: Temp_Arr[5] = Temp_Arr[4];
 26036  017C96  C3C0  F3C3         	movff	_Temp_Arr+12,_Temp_Arr+15
 26037  017C9A  C3C1  F3C4         	movff	_Temp_Arr+13,_Temp_Arr+16
 26038  017C9E  C3C2  F3C5         	movff	_Temp_Arr+14,_Temp_Arr+17
 26039                           
 26040                           ;Power_Meter.c: 130: Temp_Arr[4] = Temp_Arr[3];
 26041  017CA2  C3BD  F3C0         	movff	_Temp_Arr+9,_Temp_Arr+12
 26042  017CA6  C3BE  F3C1         	movff	_Temp_Arr+10,_Temp_Arr+13
 26043  017CAA  C3BF  F3C2         	movff	_Temp_Arr+11,_Temp_Arr+14
 26044                           
 26045                           ;Power_Meter.c: 131: Temp_Arr[3] = Temp_Arr[2];
 26046  017CAE  C3BA  F3BD         	movff	_Temp_Arr+6,_Temp_Arr+9
 26047  017CB2  C3BB  F3BE         	movff	_Temp_Arr+7,_Temp_Arr+10
 26048  017CB6  C3BC  F3BF         	movff	_Temp_Arr+8,_Temp_Arr+11
 26049                           
 26050                           ;Power_Meter.c: 132: Temp_Arr[2] = Temp_Arr[1];
 26051  017CBA  C3B7  F3BA         	movff	_Temp_Arr+3,_Temp_Arr+6
 26052  017CBE  C3B8  F3BB         	movff	_Temp_Arr+4,_Temp_Arr+7
 26053  017CC2  C3B9  F3BC         	movff	_Temp_Arr+5,_Temp_Arr+8
 26054                           
 26055                           ;Power_Meter.c: 133: Temp_Arr[1] = Temp_Arr[0];
 26056  017CC6  C3B4  F3B7         	movff	_Temp_Arr,_Temp_Arr+3
 26057  017CCA  C3B5  F3B8         	movff	_Temp_Arr+1,_Temp_Arr+4
 26058  017CCE  C3B6  F3B9         	movff	_Temp_Arr+2,_Temp_Arr+5
 26059                           
 26060                           ;Power_Meter.c: 134: Temp_Arr[0] = Temprature;
 26061  017CD2  C224  F3B4         	movff	_Temprature,_Temp_Arr
 26062  017CD6  C225  F3B5         	movff	_Temprature+1,_Temp_Arr+1
 26063  017CDA  C226  F3B6         	movff	_Temprature+2,_Temp_Arr+2
 26064                           
 26065                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 26066  017CDE  C3BA  F090         	movff	_Temp_Arr+6,___ftadd@f2
 26067  017CE2  C3BB  F091         	movff	_Temp_Arr+7,___ftadd@f2+1
 26068  017CE6  C3BC  F092         	movff	_Temp_Arr+8,___ftadd@f2+2
 26069  017CEA  C3B7  F08D         	movff	_Temp_Arr+3,___ftadd@f1
 26070  017CEE  C3B8  F08E         	movff	_Temp_Arr+4,___ftadd@f1+1
 26071  017CF2  C3B9  F08F         	movff	_Temp_Arr+5,___ftadd@f1+2
 26072  017CF6  ECBE  F0B2         	call	___ftadd	;wreg free
 26073  017CFA  C08D  F0B4         	movff	?___ftadd,_Temp_Read$8073
 26074  017CFE  C08E  F0B5         	movff	?___ftadd+1,_Temp_Read$8073+1
 26075  017D02  C08F  F0B6         	movff	?___ftadd+2,_Temp_Read$8073+2
 26076                           
 26077                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 26078  017D06  C3BD  F090         	movff	_Temp_Arr+9,___ftadd@f2
 26079  017D0A  C3BE  F091         	movff	_Temp_Arr+10,___ftadd@f2+1
 26080  017D0E  C3BF  F092         	movff	_Temp_Arr+11,___ftadd@f2+2
 26081  017D12  C0B4  F08D         	movff	_Temp_Read$8073,___ftadd@f1
 26082  017D16  C0B5  F08E         	movff	_Temp_Read$8073+1,___ftadd@f1+1
 26083  017D1A  C0B6  F08F         	movff	_Temp_Read$8073+2,___ftadd@f1+2
 26084  017D1E  ECBE  F0B2         	call	___ftadd	;wreg free
 26085  017D22  C08D  F0B7         	movff	?___ftadd,_Temp_Read$8074
 26086  017D26  C08E  F0B8         	movff	?___ftadd+1,_Temp_Read$8074+1
 26087  017D2A  C08F  F0B9         	movff	?___ftadd+2,_Temp_Read$8074+2
 26088                           
 26089                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 26090  017D2E  C3C0  F090         	movff	_Temp_Arr+12,___ftadd@f2
 26091  017D32  C3C1  F091         	movff	_Temp_Arr+13,___ftadd@f2+1
 26092  017D36  C3C2  F092         	movff	_Temp_Arr+14,___ftadd@f2+2
 26093  017D3A  C0B7  F08D         	movff	_Temp_Read$8074,___ftadd@f1
 26094  017D3E  C0B8  F08E         	movff	_Temp_Read$8074+1,___ftadd@f1+1
 26095  017D42  C0B9  F08F         	movff	_Temp_Read$8074+2,___ftadd@f1+2
 26096  017D46  ECBE  F0B2         	call	___ftadd	;wreg free
 26097  017D4A  C08D  F0BA         	movff	?___ftadd,_Temp_Read$8075
 26098  017D4E  C08E  F0BB         	movff	?___ftadd+1,_Temp_Read$8075+1
 26099  017D52  C08F  F0BC         	movff	?___ftadd+2,_Temp_Read$8075+2
 26100                           
 26101                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 26102  017D56  C3C3  F090         	movff	_Temp_Arr+15,___ftadd@f2
 26103  017D5A  C3C4  F091         	movff	_Temp_Arr+16,___ftadd@f2+1
 26104  017D5E  C3C5  F092         	movff	_Temp_Arr+17,___ftadd@f2+2
 26105  017D62  C0BA  F08D         	movff	_Temp_Read$8075,___ftadd@f1
 26106  017D66  C0BB  F08E         	movff	_Temp_Read$8075+1,___ftadd@f1+1
 26107  017D6A  C0BC  F08F         	movff	_Temp_Read$8075+2,___ftadd@f1+2
 26108  017D6E  ECBE  F0B2         	call	___ftadd	;wreg free
 26109  017D72  C08D  F0BD         	movff	?___ftadd,_Temp_Read$8076
 26110  017D76  C08E  F0BE         	movff	?___ftadd+1,_Temp_Read$8076+1
 26111  017D7A  C08F  F0BF         	movff	?___ftadd+2,_Temp_Read$8076+2
 26112                           
 26113                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 26114  017D7E  C3B4  F090         	movff	_Temp_Arr,___ftadd@f2
 26115  017D82  C3B5  F091         	movff	_Temp_Arr+1,___ftadd@f2+1
 26116  017D86  C3B6  F092         	movff	_Temp_Arr+2,___ftadd@f2+2
 26117  017D8A  C0BD  F08D         	movff	_Temp_Read$8076,___ftadd@f1
 26118  017D8E  C0BE  F08E         	movff	_Temp_Read$8076+1,___ftadd@f1+1
 26119  017D92  C0BF  F08F         	movff	_Temp_Read$8076+2,___ftadd@f1+2
 26120  017D96  ECBE  F0B2         	call	___ftadd	;wreg free
 26121  017D9A  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 26122  017D9E  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 26123  017DA2  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 26124  017DA6  0E00               	movlw	0
 26125  017DA8  0100               	movlb	0	; () banked
 26126  017DAA  6FA8               	movwf	___ftdiv@f2& (0+255),b
 26127  017DAC  0EC0               	movlw	192
 26128  017DAE  0100               	movlb	0	; () banked
 26129  017DB0  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 26130  017DB2  0E40               	movlw	64
 26131  017DB4  0100               	movlb	0	; () banked
 26132  017DB6  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 26133  017DB8  ECAF  F0C1         	call	___ftdiv	;wreg free
 26134  017DBC  C0A5  F66F         	movff	?___ftdiv,_Temperature_Avg
 26135  017DC0  C0A6  F670         	movff	?___ftdiv+1,_Temperature_Avg+1
 26136  017DC4  C0A7  F671         	movff	?___ftdiv+2,_Temperature_Avg+2
 26137  017DC8  0012               	return		;funcret
 26138  017DCA                     __end_of_Temp_Read:
 26139                           	opt stack 0
 26140                           tblptru	equ	0xFF8
 26141                           tblptrh	equ	0xFF7
 26142                           tblptrl	equ	0xFF6
 26143                           tablat	equ	0xFF5
 26144                           prodh	equ	0xFF4
 26145                           prodl	equ	0xFF3
 26146                           intcon	equ	0xFF2
 26147                           postinc0	equ	0xFEE
 26148                           wreg	equ	0xFE8
 26149                           postdec1	equ	0xFE5
 26150                           fsr1h	equ	0xFE2
 26151                           fsr1l	equ	0xFE1
 26152                           indf2	equ	0xFDF
 26153                           postinc2	equ	0xFDE
 26154                           postdec2	equ	0xFDD
 26155                           fsr2h	equ	0xFDA
 26156                           fsr2l	equ	0xFD9
 26157                           status	equ	0xFD8
 26158                           
 26159 ;; *************** function _Rampup_state_function *****************
 26160 ;; Defined at:
 26161 ;;		line 30 in file "state.c"
 26162 ;; Parameters:    Size  Location     Type
 26163 ;;		None
 26164 ;; Auto vars:     Size  Location     Type
 26165 ;;		None
 26166 ;; Return value:  Size  Location     Type
 26167 ;;                  1    wreg      void 
 26168 ;; Registers used:
 26169 ;;		wreg, status,2, status,0, cstack
 26170 ;; Tracked objects:
 26171 ;;		On entry : 0/0
 26172 ;;		On exit  : 0/0
 26173 ;;		Unchanged: 0/0
 26174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26179 ;;Total ram usage:        0 bytes
 26180 ;; Hardware stack levels used:    1
 26181 ;; Hardware stack levels required when called:    7
 26182 ;; This function calls:
 26183 ;;		_RAMP_UP
 26184 ;; This function is called by:
 26185 ;;		_main
 26186 ;; This function uses a non-reentrant model
 26187 ;;
 26188                           
 26189                           	psect	text84
 26190  01B1B6                     __ptext84:
 26191                           	opt stack 0
 26192  01B1B6                     _Rampup_state_function:
 26193                           	opt stack 23
 26194                           
 26195                           ;state.c: 32: RAMP_UP();
 26196                           
 26197                           ;incstack = 0
 26198  01B1B6  ECCD  F0C7         	call	_RAMP_UP	;wreg free
 26199  01B1BA  0012               	return		;funcret
 26200  01B1BC                     __end_of_Rampup_state_function:
 26201                           	opt stack 0
 26202                           tblptru	equ	0xFF8
 26203                           tblptrh	equ	0xFF7
 26204                           tblptrl	equ	0xFF6
 26205                           tablat	equ	0xFF5
 26206                           prodh	equ	0xFF4
 26207                           prodl	equ	0xFF3
 26208                           intcon	equ	0xFF2
 26209                           postinc0	equ	0xFEE
 26210                           wreg	equ	0xFE8
 26211                           postdec1	equ	0xFE5
 26212                           fsr1h	equ	0xFE2
 26213                           fsr1l	equ	0xFE1
 26214                           indf2	equ	0xFDF
 26215                           postinc2	equ	0xFDE
 26216                           postdec2	equ	0xFDD
 26217                           fsr2h	equ	0xFDA
 26218                           fsr2l	equ	0xFD9
 26219                           status	equ	0xFD8
 26220                           
 26221 ;; *************** function _RAMP_UP *****************
 26222 ;; Defined at:
 26223 ;;		line 22 in file "RAMP_UP.c"
 26224 ;; Parameters:    Size  Location     Type
 26225 ;;		None
 26226 ;; Auto vars:     Size  Location     Type
 26227 ;;		None
 26228 ;; Return value:  Size  Location     Type
 26229 ;;                  1    wreg      void 
 26230 ;; Registers used:
 26231 ;;		wreg, status,2, status,0, cstack
 26232 ;; Tracked objects:
 26233 ;;		On entry : 0/0
 26234 ;;		On exit  : 0/0
 26235 ;;		Unchanged: 0/0
 26236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26240 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26241 ;;Total ram usage:        1 bytes
 26242 ;; Hardware stack levels used:    1
 26243 ;; Hardware stack levels required when called:    6
 26244 ;; This function calls:
 26245 ;;		_Pitch_Release
 26246 ;;		_Turbine_Pitching
 26247 ;;		_VFD_Data_Kill
 26248 ;;		_VFD_Freq_Step_up
 26249 ;; This function is called by:
 26250 ;;		_Rampup_state_function
 26251 ;; This function uses a non-reentrant model
 26252 ;;
 26253                           
 26254                           	psect	text85
 26255  018F9A                     __ptext85:
 26256                           	opt stack 0
 26257  018F9A                     _RAMP_UP:
 26258                           	opt stack 23
 26259                           
 26260                           ;RAMP_UP.c: 24: switch (VFD_RAMP)
 26261                           
 26262                           ;incstack = 0
 26263  018F9A  D067               	goto	l22210
 26264  018F9C                     l7013:
 26265                           
 26266                           ; BSR set to: 1
 26267                           ;RAMP_UP.c: 27: (RD0 = 1);
 26268  018F9C  8083               	bsf	3971,0,c	;volatile
 26269                           
 26270                           ; BSR set to: 1
 26271                           ;RAMP_UP.c: 28: VFD_On_Off = 0;
 26272  018F9E  0E00               	movlw	0
 26273  018FA0  0101               	movlb	1	; () banked
 26274  018FA2  6F94               	movwf	_VFD_On_Off& (0+255),b
 26275                           
 26276                           ;RAMP_UP.c: 29: One_Sec_Delay_vab = 1;
 26277  018FA4  0E01               	movlw	1
 26278  018FA6  0101               	movlb	1	; () banked
 26279  018FA8  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 26280                           
 26281                           ;RAMP_UP.c: 30: if(One_sec_Delay_Flag)
 26282  018FAA  0101               	movlb	1	; () banked
 26283  018FAC  5174               	movf	_One_sec_Delay_Flag& (0+255),w,b
 26284  018FAE  B4D8               	btfsc	status,2,c
 26285  018FB0  0012               	return	
 26286                           
 26287                           ; BSR set to: 1
 26288                           ;RAMP_UP.c: 31: {
 26289                           ;RAMP_UP.c: 32: VFD_RAMP = VFD_OUT;
 26290  018FB2  0E01               	movlw	1
 26291  018FB4  0101               	movlb	1	; () banked
 26292  018FB6  6F95               	movwf	_VFD_RAMP& (0+255),b
 26293                           
 26294                           ;RAMP_UP.c: 33: One_Sec_Delay_vab = 0;
 26295  018FB8  0E00               	movlw	0
 26296  018FBA  0101               	movlb	1	; () banked
 26297  018FBC  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 26298                           
 26299                           ;RAMP_UP.c: 34: One_sec_Delay_Flag = 0;
 26300  018FBE  0E00               	movlw	0
 26301  018FC0  0101               	movlb	1	; () banked
 26302  018FC2  6F74               	movwf	_One_sec_Delay_Flag& (0+255),b
 26303                           
 26304                           ; BSR set to: 1
 26305                           ;RAMP_UP.c: 35: }
 26306                           ;RAMP_UP.c: 36: break;
 26307  018FC4  0012               	return	
 26308  018FC6                     l7016:
 26309                           
 26310                           ; BSR set to: 1
 26311                           ;RAMP_UP.c: 39: (RD1 = 1);
 26312  018FC6  8283               	bsf	3971,1,c	;volatile
 26313                           
 26314                           ; BSR set to: 1
 26315                           ;RAMP_UP.c: 40: if(DC_Bus_Voltage_Flag)
 26316  018FC8  0101               	movlb	1	; () banked
 26317  018FCA  5150               	movf	_DC_Bus_Voltage_Flag& (0+255),w,b
 26318  018FCC  B4D8               	btfsc	status,2,c
 26319  018FCE  D006               	goto	l7017
 26320                           
 26321                           ; BSR set to: 1
 26322                           ;RAMP_UP.c: 41: {
 26323                           ;RAMP_UP.c: 42: DC_Bus_Voltage_Flag = 0;
 26324  018FD0  0E00               	movlw	0
 26325  018FD2  0101               	movlb	1	; () banked
 26326  018FD4  6F50               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 26327                           
 26328                           ;RAMP_UP.c: 43: VFD_RAMP = VFD_Frequency_Step_up;
 26329  018FD6  0E02               	movlw	2
 26330  018FD8  0101               	movlb	1	; () banked
 26331  018FDA  6F95               	movwf	_VFD_RAMP& (0+255),b
 26332  018FDC                     l7017:
 26333                           
 26334                           ; BSR set to: 1
 26335                           ;RAMP_UP.c: 44: }
 26336                           ;RAMP_UP.c: 45: Desired_Frequency = (8);
 26337  018FDC  0E08               	movlw	8
 26338  018FDE  6E16               	movwf	_Desired_Frequency,c
 26339                           
 26340                           ;RAMP_UP.c: 46: break;
 26341  018FE0  0012               	return	
 26342  018FE2                     l22174:
 26343                           
 26344                           ; BSR set to: 1
 26345                           ;RAMP_UP.c: 49: VFD_On_Off = 1;
 26346  018FE2  0E01               	movlw	1
 26347  018FE4  0101               	movlb	1	; () banked
 26348  018FE6  6F94               	movwf	_VFD_On_Off& (0+255),b
 26349                           
 26350                           ;RAMP_UP.c: 50: if(DC_Bus_Voltage_Flag)
 26351  018FE8  0101               	movlb	1	; () banked
 26352  018FEA  5150               	movf	_DC_Bus_Voltage_Flag& (0+255),w,b
 26353  018FEC  B4D8               	btfsc	status,2,c
 26354  018FEE  D00C               	goto	l22182
 26355                           
 26356                           ; BSR set to: 1
 26357                           ;RAMP_UP.c: 51: {
 26358                           ;RAMP_UP.c: 52: DC_Bus_Voltage_Flag = 0;
 26359  018FF0  0E00               	movlw	0
 26360  018FF2  0101               	movlb	1	; () banked
 26361  018FF4  6F50               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 26362                           
 26363                           ;RAMP_UP.c: 61: if(Slip_Flag)
 26364  018FF6  0101               	movlb	1	; () banked
 26365  018FF8  517D               	movf	_Slip_Flag& (0+255),w,b
 26366  018FFA  B4D8               	btfsc	status,2,c
 26367  018FFC  D005               	goto	l22182
 26368                           
 26369                           ; BSR set to: 1
 26370                           ;RAMP_UP.c: 62: {
 26371                           ;RAMP_UP.c: 63: Slip_Flag = 0;
 26372  018FFE  0E00               	movlw	0
 26373  019000  0101               	movlb	1	; () banked
 26374  019002  6F7D               	movwf	_Slip_Flag& (0+255),b
 26375                           
 26376                           ; BSR set to: 1
 26377                           ;RAMP_UP.c: 64: VFD_Freq_Step_up();
 26378  019004  ECD8  F0C6         	call	_VFD_Freq_Step_up	;wreg free
 26379  019008                     l22182:
 26380                           
 26381                           ;RAMP_UP.c: 65: }
 26382                           ;RAMP_UP.c: 66: }
 26383                           ;RAMP_UP.c: 67: Pitch_Release();
 26384  019008  EC49  F0D6         	call	_Pitch_Release	;wreg free
 26385                           
 26386                           ;RAMP_UP.c: 68: break;
 26387  01900C  0012               	return	
 26388  01900E                     l7021:
 26389                           
 26390                           ; BSR set to: 1
 26391                           ;RAMP_UP.c: 71: (RD0 = 0);
 26392  01900E  9083               	bcf	3971,0,c	;volatile
 26393                           
 26394                           ; BSR set to: 1
 26395                           ;RAMP_UP.c: 72: VFD_On_Off = 0;
 26396  019010  0E00               	movlw	0
 26397  019012  0101               	movlb	1	; () banked
 26398  019014  6F94               	movwf	_VFD_On_Off& (0+255),b
 26399                           
 26400                           ;RAMP_UP.c: 73: One_Sec_Delay_vab = 1;
 26401  019016  0E01               	movlw	1
 26402  019018  0101               	movlb	1	; () banked
 26403  01901A  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 26404                           
 26405                           ;RAMP_UP.c: 74: if(One_sec_Delay_Flag)
 26406  01901C  0101               	movlb	1	; () banked
 26407  01901E  5174               	movf	_One_sec_Delay_Flag& (0+255),w,b
 26408  019020  B4D8               	btfsc	status,2,c
 26409  019022  0012               	return	
 26410                           
 26411                           ; BSR set to: 1
 26412                           ;RAMP_UP.c: 75: {
 26413                           ;RAMP_UP.c: 76: One_sec_Delay_Flag = 0;
 26414  019024  0E00               	movlw	0
 26415  019026  0101               	movlb	1	; () banked
 26416  019028  6F74               	movwf	_One_sec_Delay_Flag& (0+255),b
 26417                           
 26418                           ;RAMP_UP.c: 77: One_Sec_Delay_vab = 0;
 26419  01902A  0E00               	movlw	0
 26420  01902C  0101               	movlb	1	; () banked
 26421  01902E  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 26422                           
 26423                           ; BSR set to: 1
 26424                           ;RAMP_UP.c: 78: (RD1 = 0);
 26425  019030  9283               	bcf	3971,1,c	;volatile
 26426                           
 26427                           ; BSR set to: 1
 26428                           ;RAMP_UP.c: 79: _delay((unsigned long)((50)*(8000000/4000.0)));
 26429  019032  0E82               	movlw	130
 26430  019034  0100               	movlb	0	; () banked
 26431  019036  6FB4               	movwf	??_RAMP_UP& (0+255),b
 26432  019038  0EDE               	movlw	222
 26433  01903A                     u18027:
 26434  01903A  2EE8               	decfsz	wreg,f,c
 26435  01903C  D7FE               	goto	u18027
 26436  01903E  2FB4               	decfsz	??_RAMP_UP& (0+255),f,b
 26437  019040  D7FC               	goto	u18027
 26438                           
 26439                           ;RAMP_UP.c: 80: (RD2 = 1);
 26440  019042  8483               	bsf	3971,2,c	;volatile
 26441                           
 26442                           ;RAMP_UP.c: 81: Turbine_state = RUNNING_STATE;
 26443  019044  0E02               	movlw	2
 26444  019046  0100               	movlb	0	; () banked
 26445  019048  6FF0               	movwf	_Turbine_state& (0+255),b
 26446                           
 26447                           ; BSR set to: 0
 26448                           ;RAMP_UP.c: 82: VFD_Data_Kill();
 26449  01904A  EC4C  F0D7         	call	_VFD_Data_Kill	;wreg free
 26450                           
 26451                           ;RAMP_UP.c: 83: }
 26452                           ;RAMP_UP.c: 84: break;
 26453  01904E  0012               	return	
 26454  019050                     l22198:
 26455                           
 26456                           ;RAMP_UP.c: 87: VFD_On_Off = 0;
 26457  019050  0E00               	movlw	0
 26458  019052  0101               	movlb	1	; () banked
 26459  019054  6F94               	movwf	_VFD_On_Off& (0+255),b
 26460                           
 26461                           ;RAMP_UP.c: 88: Desired_Frequency = 0;
 26462  019056  0E00               	movlw	0
 26463  019058  6E16               	movwf	_Desired_Frequency,c
 26464                           
 26465                           ; BSR set to: 1
 26466                           ;RAMP_UP.c: 89: Turbine_Pitching();
 26467  01905A  ECE1  F0D8         	call	_Turbine_Pitching	;wreg free
 26468                           
 26469                           ;RAMP_UP.c: 90: (RD0 = 0);
 26470  01905E  9083               	bcf	3971,0,c	;volatile
 26471                           
 26472                           ;RAMP_UP.c: 91: (RD1 = 0);
 26473  019060  9283               	bcf	3971,1,c	;volatile
 26474                           
 26475                           ;RAMP_UP.c: 92: Turbine_state = STOPPING_STATE;
 26476  019062  0E03               	movlw	3
 26477  019064  0100               	movlb	0	; () banked
 26478  019066  6FF0               	movwf	_Turbine_state& (0+255),b
 26479                           
 26480                           ; BSR set to: 0
 26481                           ;RAMP_UP.c: 94: }
 26482                           
 26483                           ;RAMP_UP.c: 93: break;
 26484  019068  0012               	return	
 26485  01906A                     l22210:
 26486  01906A  0101               	movlb	1	; () banked
 26487  01906C  5195               	movf	_VFD_RAMP& (0+255),w,b
 26488                           
 26489                           ; Switch size 1, requested type "space"
 26490                           ; Number of cases is 5, Range of values is 0 to 4
 26491                           ; switch strategies available:
 26492                           ; Name         Instructions Cycles
 26493                           ; simple_byte           16     9 (average)
 26494                           ;	Chosen strategy is simple_byte
 26495  01906E  0A00               	xorlw	0	; case 0
 26496  019070  B4D8               	btfsc	status,2,c
 26497  019072  D794               	goto	l7013
 26498  019074  0A01               	xorlw	1	; case 1
 26499  019076  B4D8               	btfsc	status,2,c
 26500  019078  D7A6               	goto	l7016
 26501  01907A  0A03               	xorlw	3	; case 2
 26502  01907C  B4D8               	btfsc	status,2,c
 26503  01907E  D7B1               	goto	l22174
 26504  019080  0A01               	xorlw	1	; case 3
 26505  019082  B4D8               	btfsc	status,2,c
 26506  019084  D7C4               	goto	l7021
 26507  019086  0A07               	xorlw	7	; case 4
 26508  019088  A4D8               	btfss	status,2,c
 26509  01908A  0012               	return	
 26510  01908C  D7E1               	goto	l22198
 26511  01908E                     __end_of_RAMP_UP:
 26512                           	opt stack 0
 26513                           tblptru	equ	0xFF8
 26514                           tblptrh	equ	0xFF7
 26515                           tblptrl	equ	0xFF6
 26516                           tablat	equ	0xFF5
 26517                           prodh	equ	0xFF4
 26518                           prodl	equ	0xFF3
 26519                           intcon	equ	0xFF2
 26520                           postinc0	equ	0xFEE
 26521                           wreg	equ	0xFE8
 26522                           postdec1	equ	0xFE5
 26523                           fsr1h	equ	0xFE2
 26524                           fsr1l	equ	0xFE1
 26525                           indf2	equ	0xFDF
 26526                           postinc2	equ	0xFDE
 26527                           postdec2	equ	0xFDD
 26528                           fsr2h	equ	0xFDA
 26529                           fsr2l	equ	0xFD9
 26530                           status	equ	0xFD8
 26531                           
 26532 ;; *************** function _VFD_Freq_Step_up *****************
 26533 ;; Defined at:
 26534 ;;		line 96 in file "RAMP_UP.c"
 26535 ;; Parameters:    Size  Location     Type
 26536 ;;		None
 26537 ;; Auto vars:     Size  Location     Type
 26538 ;;		None
 26539 ;; Return value:  Size  Location     Type
 26540 ;;                  1    wreg      void 
 26541 ;; Registers used:
 26542 ;;		wreg, status,2, status,0, cstack
 26543 ;; Tracked objects:
 26544 ;;		On entry : 0/0
 26545 ;;		On exit  : 0/0
 26546 ;;		Unchanged: 0/0
 26547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26552 ;;Total ram usage:        0 bytes
 26553 ;; Hardware stack levels used:    1
 26554 ;; Hardware stack levels required when called:    5
 26555 ;; This function calls:
 26556 ;;		___ftdiv
 26557 ;;		___ftge
 26558 ;;		___ftmul
 26559 ;; This function is called by:
 26560 ;;		_RAMP_UP
 26561 ;; This function uses a non-reentrant model
 26562 ;;
 26563                           
 26564                           	psect	text86
 26565  018DB0                     __ptext86:
 26566                           	opt stack 0
 26567  018DB0                     _VFD_Freq_Step_up:
 26568                           	opt stack 23
 26569                           
 26570                           ;RAMP_UP.c: 98: if(Desired_Frequency < 50)
 26571                           
 26572                           ;incstack = 0
 26573  018DB0  0E32               	movlw	50
 26574  018DB2  6016               	cpfslt	_Desired_Frequency,c
 26575  018DB4  D001               	goto	l21530
 26576                           
 26577                           ;RAMP_UP.c: 99: {
 26578                           ;RAMP_UP.c: 100: Desired_Frequency++;
 26579  018DB6  2A16               	incf	_Desired_Frequency,f,c
 26580  018DB8                     l21530:
 26581                           
 26582                           ;RAMP_UP.c: 101: }
 26583                           ;RAMP_UP.c: 102: GENERATOR_RPM_THEORY = (120*50)/(6) ;
 26584  018DB8  0E00               	movlw	0
 26585  018DBA  0102               	movlb	2	; () banked
 26586  018DBC  6F12               	movwf	_GENERATOR_RPM_THEORY& (0+255),b
 26587  018DBE  0E7A               	movlw	122
 26588  018DC0  0102               	movlb	2	; () banked
 26589  018DC2  6F13               	movwf	(_GENERATOR_RPM_THEORY+1)& (0+255),b
 26590  018DC4  0E44               	movlw	68
 26591  018DC6  0102               	movlb	2	; () banked
 26592  018DC8  6F14               	movwf	(_GENERATOR_RPM_THEORY+2)& (0+255),b
 26593                           
 26594                           ; BSR set to: 2
 26595                           ;RAMP_UP.c: 103: TURBINE_RPM_THEORY = GENERATOR_RPM_THEORY / (17.54) ;
 26596  018DCA  C212  F0A5         	movff	_GENERATOR_RPM_THEORY,___ftdiv@f1
 26597  018DCE  C213  F0A6         	movff	_GENERATOR_RPM_THEORY+1,___ftdiv@f1+1
 26598  018DD2  C214  F0A7         	movff	_GENERATOR_RPM_THEORY+2,___ftdiv@f1+2
 26599  018DD6  0E52               	movlw	82
 26600  018DD8  0100               	movlb	0	; () banked
 26601  018DDA  6FA8               	movwf	___ftdiv@f2& (0+255),b
 26602  018DDC  0E8C               	movlw	140
 26603  018DDE  0100               	movlb	0	; () banked
 26604  018DE0  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 26605  018DE2  0E41               	movlw	65
 26606  018DE4  0100               	movlb	0	; () banked
 26607  018DE6  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 26608  018DE8  ECAF  F0C1         	call	___ftdiv	;wreg free
 26609  018DEC  C0A5  F4B7         	movff	?___ftdiv,_TURBINE_RPM_THEORY
 26610  018DF0  C0A6  F4B8         	movff	?___ftdiv+1,_TURBINE_RPM_THEORY+1
 26611  018DF4  C0A7  F4B9         	movff	?___ftdiv+2,_TURBINE_RPM_THEORY+2
 26612                           
 26613                           ;RAMP_UP.c: 104: RAMP_UP_TURBINE_CUT_IN_RPM = (TURBINE_RPM_THEORY * 0.92) ;
 26614  018DF8  C4B7  F074         	movff	_TURBINE_RPM_THEORY,___ftmul@f1
 26615  018DFC  C4B8  F075         	movff	_TURBINE_RPM_THEORY+1,___ftmul@f1+1
 26616  018E00  C4B9  F076         	movff	_TURBINE_RPM_THEORY+2,___ftmul@f1+2
 26617  018E04  0E85               	movlw	133
 26618  018E06  0100               	movlb	0	; () banked
 26619  018E08  6F77               	movwf	___ftmul@f2& (0+255),b
 26620  018E0A  0E6B               	movlw	107
 26621  018E0C  0100               	movlb	0	; () banked
 26622  018E0E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 26623  018E10  0E3F               	movlw	63
 26624  018E12  0100               	movlb	0	; () banked
 26625  018E14  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 26626  018E16  EC00  F0C1         	call	___ftmul	;wreg free
 26627  018E1A  C074  F4B4         	movff	?___ftmul,_RAMP_UP_TURBINE_CUT_IN_RPM
 26628  018E1E  C075  F4B5         	movff	?___ftmul+1,_RAMP_UP_TURBINE_CUT_IN_RPM+1
 26629  018E22  C076  F4B6         	movff	?___ftmul+2,_RAMP_UP_TURBINE_CUT_IN_RPM+2
 26630                           
 26631                           ;RAMP_UP.c: 105: RAMP_UP_GENERATOR_CUT_IN_RPM = (GENERATOR_RPM_THEORY * 0.90) ;
 26632  018E26  C212  F074         	movff	_GENERATOR_RPM_THEORY,___ftmul@f1
 26633  018E2A  C213  F075         	movff	_GENERATOR_RPM_THEORY+1,___ftmul@f1+1
 26634  018E2E  C214  F076         	movff	_GENERATOR_RPM_THEORY+2,___ftmul@f1+2
 26635  018E32  0E66               	movlw	102
 26636  018E34  0100               	movlb	0	; () banked
 26637  018E36  6F77               	movwf	___ftmul@f2& (0+255),b
 26638  018E38  0E66               	movlw	102
 26639  018E3A  0100               	movlb	0	; () banked
 26640  018E3C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 26641  018E3E  0E3F               	movlw	63
 26642  018E40  0100               	movlb	0	; () banked
 26643  018E42  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 26644  018E44  EC00  F0C1         	call	___ftmul	;wreg free
 26645  018E48  C074  F4B1         	movff	?___ftmul,_RAMP_UP_GENERATOR_CUT_IN_RPM
 26646  018E4C  C075  F4B2         	movff	?___ftmul+1,_RAMP_UP_GENERATOR_CUT_IN_RPM+1
 26647  018E50  C076  F4B3         	movff	?___ftmul+2,_RAMP_UP_GENERATOR_CUT_IN_RPM+2
 26648                           
 26649                           ;RAMP_UP.c: 107: if( (Turbine_RPM >= RAMP_UP_TURBINE_CUT_IN_RPM) && (Generator_RPM_FLT >
      +                          = RAMP_UP_GENERATOR_CUT_IN_RPM) )
 26650  018E54  C00A  F099         	movff	_Turbine_RPM,___ftge@ff1
 26651  018E58  C00B  F09A         	movff	_Turbine_RPM+1,___ftge@ff1+1
 26652  018E5C  C00C  F09B         	movff	_Turbine_RPM+2,___ftge@ff1+2
 26653  018E60  C4B4  F09C         	movff	_RAMP_UP_TURBINE_CUT_IN_RPM,___ftge@ff2
 26654  018E64  C4B5  F09D         	movff	_RAMP_UP_TURBINE_CUT_IN_RPM+1,___ftge@ff2+1
 26655  018E68  C4B6  F09E         	movff	_RAMP_UP_TURBINE_CUT_IN_RPM+2,___ftge@ff2+2
 26656  018E6C  EC4B  F0CB         	call	___ftge	;wreg free
 26657  018E70  0100               	movlb	0	; () banked
 26658  018E72  A0D8               	btfss	status,0,c
 26659  018E74  0012               	return	
 26660                           
 26661                           ; BSR set to: 0
 26662  018E76  C004  F099         	movff	_Generator_RPM_FLT,___ftge@ff1
 26663  018E7A  C005  F09A         	movff	_Generator_RPM_FLT+1,___ftge@ff1+1
 26664  018E7E  C006  F09B         	movff	_Generator_RPM_FLT+2,___ftge@ff1+2
 26665  018E82  C4B1  F09C         	movff	_RAMP_UP_GENERATOR_CUT_IN_RPM,___ftge@ff2
 26666  018E86  C4B2  F09D         	movff	_RAMP_UP_GENERATOR_CUT_IN_RPM+1,___ftge@ff2+1
 26667  018E8A  C4B3  F09E         	movff	_RAMP_UP_GENERATOR_CUT_IN_RPM+2,___ftge@ff2+2
 26668  018E8E  EC4B  F0CB         	call	___ftge	;wreg free
 26669  018E92  0100               	movlb	0	; () banked
 26670  018E94  A0D8               	btfss	status,0,c
 26671  018E96  0012               	return	
 26672                           
 26673                           ; BSR set to: 0
 26674                           ;RAMP_UP.c: 108: {
 26675                           ;RAMP_UP.c: 109: VFD_On_Off = 0;
 26676  018E98  0E00               	movlw	0
 26677  018E9A  0101               	movlb	1	; () banked
 26678  018E9C  6F94               	movwf	_VFD_On_Off& (0+255),b
 26679                           
 26680                           ;RAMP_UP.c: 110: VFD_RAMP = GRID_Connect;
 26681  018E9E  0E03               	movlw	3
 26682  018EA0  0101               	movlb	1	; () banked
 26683  018EA2  6F95               	movwf	_VFD_RAMP& (0+255),b
 26684  018EA4  0012               	return	
 26685  018EA6                     __end_of_VFD_Freq_Step_up:
 26686                           	opt stack 0
 26687                           tblptru	equ	0xFF8
 26688                           tblptrh	equ	0xFF7
 26689                           tblptrl	equ	0xFF6
 26690                           tablat	equ	0xFF5
 26691                           prodh	equ	0xFF4
 26692                           prodl	equ	0xFF3
 26693                           intcon	equ	0xFF2
 26694                           postinc0	equ	0xFEE
 26695                           wreg	equ	0xFE8
 26696                           postdec1	equ	0xFE5
 26697                           fsr1h	equ	0xFE2
 26698                           fsr1l	equ	0xFE1
 26699                           indf2	equ	0xFDF
 26700                           postinc2	equ	0xFDE
 26701                           postdec2	equ	0xFDD
 26702                           fsr2h	equ	0xFDA
 26703                           fsr2l	equ	0xFD9
 26704                           status	equ	0xFD8
 26705                           
 26706 ;; *************** function _VFD_Data_Kill *****************
 26707 ;; Defined at:
 26708 ;;		line 130 in file "RAMP_UP.c"
 26709 ;; Parameters:    Size  Location     Type
 26710 ;;		None
 26711 ;; Auto vars:     Size  Location     Type
 26712 ;;		None
 26713 ;; Return value:  Size  Location     Type
 26714 ;;                  1    wreg      void 
 26715 ;; Registers used:
 26716 ;;		wreg, status,2
 26717 ;; Tracked objects:
 26718 ;;		On entry : 0/0
 26719 ;;		On exit  : 0/0
 26720 ;;		Unchanged: 0/0
 26721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26726 ;;Total ram usage:        0 bytes
 26727 ;; Hardware stack levels used:    1
 26728 ;; Hardware stack levels required when called:    3
 26729 ;; This function calls:
 26730 ;;		Nothing
 26731 ;; This function is called by:
 26732 ;;		_Turbine_Start_up_1_Second
 26733 ;;		_Stopping_state_function
 26734 ;;		_RAMP_UP
 26735 ;; This function uses a non-reentrant model
 26736 ;;
 26737                           
 26738                           	psect	text87
 26739  01AE98                     __ptext87:
 26740                           	opt stack 0
 26741  01AE98                     _VFD_Data_Kill:
 26742                           	opt stack 25
 26743                           
 26744                           ;RAMP_UP.c: 132: VFD_Frequency = 0;
 26745                           
 26746                           ;incstack = 0
 26747  01AE98  0E00               	movlw	0
 26748  01AE9A  0102               	movlb	2	; () banked
 26749  01AE9C  6FDE               	movwf	_VFD_Frequency& (0+255),b
 26750                           
 26751                           ;RAMP_UP.c: 133: Desired_Frequency = 0;
 26752  01AE9E  0E00               	movlw	0
 26753  01AEA0  6E16               	movwf	_Desired_Frequency,c
 26754                           
 26755                           ;RAMP_UP.c: 134: VFD_Run_Time_Counter = 0;
 26756  01AEA2  0E00               	movlw	0
 26757  01AEA4  0101               	movlb	1	; () banked
 26758  01AEA6  6F41               	movwf	(_VFD_Run_Time_Counter+1)& (0+255),b
 26759  01AEA8  0E00               	movlw	0
 26760  01AEAA  6F40               	movwf	_VFD_Run_Time_Counter& (0+255),b
 26761                           
 26762                           ;RAMP_UP.c: 135: Rotor_Slip_Error_Flag = 0;
 26763  01AEAC  0E00               	movlw	0
 26764  01AEAE  0101               	movlb	1	; () banked
 26765  01AEB0  6F79               	movwf	_Rotor_Slip_Error_Flag& (0+255),b
 26766                           
 26767                           ;RAMP_UP.c: 136: Motor_Slip_Error_Flag = 0;
 26768  01AEB2  0E00               	movlw	0
 26769  01AEB4  0101               	movlb	1	; () banked
 26770  01AEB6  6F70               	movwf	_Motor_Slip_Error_Flag& (0+255),b
 26771                           
 26772                           ;RAMP_UP.c: 137: Slip_Error_Counter = 0;
 26773  01AEB8  0E00               	movlw	0
 26774  01AEBA  0101               	movlb	1	; () banked
 26775  01AEBC  6F7B               	movwf	_Slip_Error_Counter& (0+255),b
 26776                           
 26777                           ;RAMP_UP.c: 138: Slip_Error_Counter_1 = 0;
 26778  01AEBE  0E00               	movlw	0
 26779  01AEC0  0101               	movlb	1	; () banked
 26780  01AEC2  6F7C               	movwf	_Slip_Error_Counter_1& (0+255),b
 26781                           
 26782                           ; BSR set to: 1
 26783  01AEC4  0012               	return		;funcret
 26784  01AEC6                     __end_of_VFD_Data_Kill:
 26785                           	opt stack 0
 26786                           tblptru	equ	0xFF8
 26787                           tblptrh	equ	0xFF7
 26788                           tblptrl	equ	0xFF6
 26789                           tablat	equ	0xFF5
 26790                           prodh	equ	0xFF4
 26791                           prodl	equ	0xFF3
 26792                           intcon	equ	0xFF2
 26793                           postinc0	equ	0xFEE
 26794                           wreg	equ	0xFE8
 26795                           postdec1	equ	0xFE5
 26796                           fsr1h	equ	0xFE2
 26797                           fsr1l	equ	0xFE1
 26798                           indf2	equ	0xFDF
 26799                           postinc2	equ	0xFDE
 26800                           postdec2	equ	0xFDD
 26801                           fsr2h	equ	0xFDA
 26802                           fsr2l	equ	0xFD9
 26803                           status	equ	0xFD8
 26804                           
 26805 ;; *************** function _Turbine_Pitching *****************
 26806 ;; Defined at:
 26807 ;;		line 40 in file "PITCHING.c"
 26808 ;; Parameters:    Size  Location     Type
 26809 ;;		None
 26810 ;; Auto vars:     Size  Location     Type
 26811 ;;		None
 26812 ;; Return value:  Size  Location     Type
 26813 ;;                  1    wreg      void 
 26814 ;; Registers used:
 26815 ;;		None
 26816 ;; Tracked objects:
 26817 ;;		On entry : 0/0
 26818 ;;		On exit  : 0/0
 26819 ;;		Unchanged: 0/0
 26820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26825 ;;Total ram usage:        0 bytes
 26826 ;; Hardware stack levels used:    1
 26827 ;; Hardware stack levels required when called:    3
 26828 ;; This function calls:
 26829 ;;		Nothing
 26830 ;; This function is called by:
 26831 ;;		_Stopping_state_function
 26832 ;;		_RAMP_UP
 26833 ;; This function uses a non-reentrant model
 26834 ;;
 26835                           
 26836                           	psect	text88
 26837  01B1C2                     __ptext88:
 26838                           	opt stack 0
 26839  01B1C2                     _Turbine_Pitching:
 26840                           	opt stack 25
 26841                           
 26842                           ;PITCHING.c: 42: (RB0 = 0);
 26843                           
 26844                           ; BSR set to: 1
 26845                           ;incstack = 0
 26846  01B1C2  9081               	bcf	3969,0,c	;volatile
 26847  01B1C4  0012               	return		;funcret
 26848  01B1C6                     __end_of_Turbine_Pitching:
 26849                           	opt stack 0
 26850                           tblptru	equ	0xFF8
 26851                           tblptrh	equ	0xFF7
 26852                           tblptrl	equ	0xFF6
 26853                           tablat	equ	0xFF5
 26854                           prodh	equ	0xFF4
 26855                           prodl	equ	0xFF3
 26856                           intcon	equ	0xFF2
 26857                           postinc0	equ	0xFEE
 26858                           wreg	equ	0xFE8
 26859                           postdec1	equ	0xFE5
 26860                           fsr1h	equ	0xFE2
 26861                           fsr1l	equ	0xFE1
 26862                           indf2	equ	0xFDF
 26863                           postinc2	equ	0xFDE
 26864                           postdec2	equ	0xFDD
 26865                           fsr2h	equ	0xFDA
 26866                           fsr2l	equ	0xFD9
 26867                           status	equ	0xFD8
 26868                           
 26869 ;; *************** function _Pitch_Release *****************
 26870 ;; Defined at:
 26871 ;;		line 22 in file "PITCHING.c"
 26872 ;; Parameters:    Size  Location     Type
 26873 ;;		None
 26874 ;; Auto vars:     Size  Location     Type
 26875 ;;		None
 26876 ;; Return value:  Size  Location     Type
 26877 ;;                  2  6345[None  ] int 
 26878 ;; Registers used:
 26879 ;;		wreg, status,2, status,0
 26880 ;; Tracked objects:
 26881 ;;		On entry : 0/0
 26882 ;;		On exit  : 0/0
 26883 ;;		Unchanged: 0/0
 26884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26889 ;;Total ram usage:        0 bytes
 26890 ;; Hardware stack levels used:    1
 26891 ;; Hardware stack levels required when called:    3
 26892 ;; This function calls:
 26893 ;;		Nothing
 26894 ;; This function is called by:
 26895 ;;		_RAMP_UP
 26896 ;; This function uses a non-reentrant model
 26897 ;;
 26898                           
 26899                           	psect	text89
 26900  01AC92                     __ptext89:
 26901                           	opt stack 0
 26902  01AC92                     _Pitch_Release:
 26903                           	opt stack 25
 26904                           
 26905                           ;PITCHING.c: 24: if(Turbine_state == RAMPUP_STATE)
 26906                           
 26907                           ;incstack = 0
 26908  01AC92  0100               	movlb	0	; () banked
 26909  01AC94  05F0               	decf	_Turbine_state& (0+255),w,b
 26910  01AC96  A4D8               	btfss	status,2,c
 26911  01AC98  0012               	return	
 26912                           
 26913                           ; BSR set to: 0
 26914                           ;PITCHING.c: 25: {
 26915                           ;PITCHING.c: 26: if(Pitching_FlAG == 1)
 26916  01AC9A  0102               	movlb	2	; () banked
 26917  01AC9C  0596               	decf	_Pitching_FlAG& (0+255),w,b
 26918  01AC9E  0102               	movlb	2	; () banked
 26919  01ACA0  1197               	iorwf	(_Pitching_FlAG+1)& (0+255),w,b
 26920  01ACA2  A4D8               	btfss	status,2,c
 26921  01ACA4  0012               	return	
 26922                           
 26923                           ; BSR set to: 2
 26924                           ;PITCHING.c: 27: {
 26925                           ;PITCHING.c: 28: Two_Sec_Delay_vab = 1;
 26926  01ACA6  0E01               	movlw	1
 26927  01ACA8  0101               	movlb	1	; () banked
 26928  01ACAA  6F8C               	movwf	_Two_Sec_Delay_vab& (0+255),b
 26929                           
 26930                           ;PITCHING.c: 29: if(Two_sec_Delay_Flag)
 26931  01ACAC  0101               	movlb	1	; () banked
 26932  01ACAE  518D               	movf	_Two_sec_Delay_Flag& (0+255),w,b
 26933  01ACB0  B4D8               	btfsc	status,2,c
 26934  01ACB2  0012               	return	
 26935                           
 26936                           ; BSR set to: 1
 26937                           ;PITCHING.c: 30: {
 26938                           ;PITCHING.c: 31: Two_Sec_Delay_vab = 0;
 26939  01ACB4  0E00               	movlw	0
 26940  01ACB6  0101               	movlb	1	; () banked
 26941  01ACB8  6F8C               	movwf	_Two_Sec_Delay_vab& (0+255),b
 26942                           
 26943                           ;PITCHING.c: 32: Two_sec_Delay_Flag = 0;
 26944  01ACBA  0E00               	movlw	0
 26945  01ACBC  0101               	movlb	1	; () banked
 26946  01ACBE  6F8D               	movwf	_Two_sec_Delay_Flag& (0+255),b
 26947                           
 26948                           ; BSR set to: 1
 26949                           ;PITCHING.c: 33: (RB0 = 1);
 26950  01ACC0  8081               	bsf	3969,0,c	;volatile
 26951                           
 26952                           ;PITCHING.c: 34: Pitching_FlAG = 0;
 26953  01ACC2  0E00               	movlw	0
 26954  01ACC4  0102               	movlb	2	; () banked
 26955  01ACC6  6F97               	movwf	(_Pitching_FlAG+1)& (0+255),b
 26956  01ACC8  0E00               	movlw	0
 26957  01ACCA  6F96               	movwf	_Pitching_FlAG& (0+255),b
 26958                           
 26959                           ; BSR set to: 2
 26960                           
 26961                           ; BSR set to: 2
 26962  01ACCC  0012               	return	
 26963  01ACCE                     __end_of_Pitch_Release:
 26964                           	opt stack 0
 26965                           tblptru	equ	0xFF8
 26966                           tblptrh	equ	0xFF7
 26967                           tblptrl	equ	0xFF6
 26968                           tablat	equ	0xFF5
 26969                           prodh	equ	0xFF4
 26970                           prodl	equ	0xFF3
 26971                           intcon	equ	0xFF2
 26972                           postinc0	equ	0xFEE
 26973                           wreg	equ	0xFE8
 26974                           postdec1	equ	0xFE5
 26975                           fsr1h	equ	0xFE2
 26976                           fsr1l	equ	0xFE1
 26977                           indf2	equ	0xFDF
 26978                           postinc2	equ	0xFDE
 26979                           postdec2	equ	0xFDD
 26980                           fsr2h	equ	0xFDA
 26981                           fsr2l	equ	0xFD9
 26982                           status	equ	0xFD8
 26983                           
 26984 ;; *************** function _R_PF_Calc *****************
 26985 ;; Defined at:
 26986 ;;		line 349 in file "Power_Meter.c"
 26987 ;; Parameters:    Size  Location     Type
 26988 ;;		None
 26989 ;; Auto vars:     Size  Location     Type
 26990 ;;		None
 26991 ;; Return value:  Size  Location     Type
 26992 ;;                  1    wreg      void 
 26993 ;; Registers used:
 26994 ;;		wreg, status,2, status,0, cstack
 26995 ;; Tracked objects:
 26996 ;;		On entry : 0/0
 26997 ;;		On exit  : 0/0
 26998 ;;		Unchanged: 0/0
 26999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27001 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27003 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27004 ;;Total ram usage:        3 bytes
 27005 ;; Hardware stack levels used:    1
 27006 ;; Hardware stack levels required when called:    5
 27007 ;; This function calls:
 27008 ;;		___ftadd
 27009 ;;		___ftdiv
 27010 ;;		___ftge
 27011 ;;		___ftmul
 27012 ;;		___ftneg
 27013 ;; This function is called by:
 27014 ;;		_main
 27015 ;; This function uses a non-reentrant model
 27016 ;;
 27017                           
 27018                           	psect	text90
 27019  016C58                     __ptext90:
 27020                           	opt stack 0
 27021  016C58                     _R_PF_Calc:
 27022                           	opt stack 25
 27023                           
 27024                           ;Power_Meter.c: 351: if(Rcurr_V_New < Rcurr_V_Old)
 27025                           
 27026                           ;incstack = 0
 27027  016C58  C0FA  F099         	movff	_Rcurr_V_New,___ftge@ff1
 27028  016C5C  C0FB  F09A         	movff	_Rcurr_V_New+1,___ftge@ff1+1
 27029  016C60  C0FC  F09B         	movff	_Rcurr_V_New+2,___ftge@ff1+2
 27030  016C64  C21E  F09C         	movff	_Rcurr_V_Old,___ftge@ff2
 27031  016C68  C21F  F09D         	movff	_Rcurr_V_Old+1,___ftge@ff2+1
 27032  016C6C  C220  F09E         	movff	_Rcurr_V_Old+2,___ftge@ff2+2
 27033  016C70  EC4B  F0CB         	call	___ftge	;wreg free
 27034  016C74  0100               	movlb	0	; () banked
 27035  016C76  B0D8               	btfsc	status,0,c
 27036  016C78  D02E               	goto	l22530
 27037                           
 27038                           ; BSR set to: 0
 27039                           ;Power_Meter.c: 352: {
 27040                           ;Power_Meter.c: 353: R_V_Gap = ((Rcurr_V_New - Rcurr_V_Old + 1) + 65536);
 27041  016C7A  C0FA  F090         	movff	_Rcurr_V_New,___ftadd@f2
 27042  016C7E  C0FB  F091         	movff	_Rcurr_V_New+1,___ftadd@f2+1
 27043  016C82  C0FC  F092         	movff	_Rcurr_V_New+2,___ftadd@f2+2
 27044  016C86  C21E  F083         	movff	_Rcurr_V_Old,___ftneg@f1
 27045  016C8A  C21F  F084         	movff	_Rcurr_V_Old+1,___ftneg@f1+1
 27046  016C8E  C220  F085         	movff	_Rcurr_V_Old+2,___ftneg@f1+2
 27047  016C92  EC1D  F0D7         	call	___ftneg	;wreg free
 27048  016C96  C083  F08D         	movff	?___ftneg,___ftadd@f1
 27049  016C9A  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 27050  016C9E  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 27051  016CA2  ECBE  F0B2         	call	___ftadd	;wreg free
 27052  016CA6  C08D  F0B4         	movff	?___ftadd,_R_PF_Calc$8079
 27053  016CAA  C08E  F0B5         	movff	?___ftadd+1,_R_PF_Calc$8079+1
 27054  016CAE  C08F  F0B6         	movff	?___ftadd+2,_R_PF_Calc$8079+2
 27055                           
 27056                           ;Power_Meter.c: 352: {
 27057                           ;Power_Meter.c: 353: R_V_Gap = ((Rcurr_V_New - Rcurr_V_Old + 1) + 65536);
 27058  016CB2  C0B4  F08D         	movff	_R_PF_Calc$8079,___ftadd@f1
 27059  016CB6  C0B5  F08E         	movff	_R_PF_Calc$8079+1,___ftadd@f1+1
 27060  016CBA  C0B6  F08F         	movff	_R_PF_Calc$8079+2,___ftadd@f1+2
 27061  016CBE  0E01               	movlw	1
 27062  016CC0  0100               	movlb	0	; () banked
 27063  016CC2  6F90               	movwf	___ftadd@f2& (0+255),b
 27064  016CC4  0E80               	movlw	128
 27065  016CC6  0100               	movlb	0	; () banked
 27066  016CC8  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 27067  016CCA  0E47               	movlw	71
 27068  016CCC  0100               	movlb	0	; () banked
 27069  016CCE  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 27070  016CD0  ECBE  F0B2         	call	___ftadd	;wreg free
 27071  016CD4  D088               	goto	L13
 27072  016CD6                     l22530:
 27073                           
 27074                           ;Power_Meter.c: 356: else if((Rcurr_New + 100) < Rcurr_V_New)
 27075  016CD6  0E00               	movlw	0
 27076  016CD8  0100               	movlb	0	; () banked
 27077  016CDA  6F90               	movwf	___ftadd@f2& (0+255),b
 27078  016CDC  0EC8               	movlw	200
 27079  016CDE  0100               	movlb	0	; () banked
 27080  016CE0  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 27081  016CE2  0E42               	movlw	66
 27082  016CE4  0100               	movlb	0	; () banked
 27083  016CE6  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 27084  016CE8  C1A1  F08D         	movff	_Rcurr_New,___ftadd@f1
 27085  016CEC  C1A2  F08E         	movff	_Rcurr_New+1,___ftadd@f1+1
 27086  016CF0  C1A3  F08F         	movff	_Rcurr_New+2,___ftadd@f1+2
 27087  016CF4  ECBE  F0B2         	call	___ftadd	;wreg free
 27088  016CF8  C08D  F099         	movff	?___ftadd,___ftge@ff1
 27089  016CFC  C08E  F09A         	movff	?___ftadd+1,___ftge@ff1+1
 27090  016D00  C08F  F09B         	movff	?___ftadd+2,___ftge@ff1+2
 27091  016D04  C0FA  F09C         	movff	_Rcurr_V_New,___ftge@ff2
 27092  016D08  C0FB  F09D         	movff	_Rcurr_V_New+1,___ftge@ff2+1
 27093  016D0C  C0FC  F09E         	movff	_Rcurr_V_New+2,___ftge@ff2+2
 27094  016D10  EC4B  F0CB         	call	___ftge	;wreg free
 27095  016D14  0100               	movlb	0	; () banked
 27096  016D16  B0D8               	btfsc	status,0,c
 27097  016D18  D034               	goto	l22534
 27098                           
 27099                           ; BSR set to: 0
 27100                           ;Power_Meter.c: 357: {
 27101                           ;Power_Meter.c: 358: R_C_Gap = ((Rcurr_New - Rcurr_V_New + 1) + 65536);
 27102  016D1A  C1A1  F090         	movff	_Rcurr_New,___ftadd@f2
 27103  016D1E  C1A2  F091         	movff	_Rcurr_New+1,___ftadd@f2+1
 27104  016D22  C1A3  F092         	movff	_Rcurr_New+2,___ftadd@f2+2
 27105  016D26  C0FA  F083         	movff	_Rcurr_V_New,___ftneg@f1
 27106  016D2A  C0FB  F084         	movff	_Rcurr_V_New+1,___ftneg@f1+1
 27107  016D2E  C0FC  F085         	movff	_Rcurr_V_New+2,___ftneg@f1+2
 27108  016D32  EC1D  F0D7         	call	___ftneg	;wreg free
 27109  016D36  C083  F08D         	movff	?___ftneg,___ftadd@f1
 27110  016D3A  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 27111  016D3E  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 27112  016D42  ECBE  F0B2         	call	___ftadd	;wreg free
 27113  016D46  C08D  F0B4         	movff	?___ftadd,_R_PF_Calc$8079
 27114  016D4A  C08E  F0B5         	movff	?___ftadd+1,_R_PF_Calc$8079+1
 27115  016D4E  C08F  F0B6         	movff	?___ftadd+2,_R_PF_Calc$8079+2
 27116                           
 27117                           ;Power_Meter.c: 357: {
 27118                           ;Power_Meter.c: 358: R_C_Gap = ((Rcurr_New - Rcurr_V_New + 1) + 65536);
 27119  016D52  C0B4  F08D         	movff	_R_PF_Calc$8079,___ftadd@f1
 27120  016D56  C0B5  F08E         	movff	_R_PF_Calc$8079+1,___ftadd@f1+1
 27121  016D5A  C0B6  F08F         	movff	_R_PF_Calc$8079+2,___ftadd@f1+2
 27122  016D5E  0E01               	movlw	1
 27123  016D60  0100               	movlb	0	; () banked
 27124  016D62  6F90               	movwf	___ftadd@f2& (0+255),b
 27125  016D64  0E80               	movlw	128
 27126  016D66  0100               	movlb	0	; () banked
 27127  016D68  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 27128  016D6A  0E47               	movlw	71
 27129  016D6C  0100               	movlb	0	; () banked
 27130  016D6E  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 27131  016D70  ECBE  F0B2         	call	___ftadd	;wreg free
 27132  016D74  C08D  F58B         	movff	?___ftadd,_R_C_Gap
 27133  016D78  C08E  F58C         	movff	?___ftadd+1,_R_C_Gap+1
 27134  016D7C  C08F  F58D         	movff	?___ftadd+2,_R_C_Gap+2
 27135                           
 27136                           ;Power_Meter.c: 359: }
 27137  016D80  D038               	goto	l9253
 27138  016D82                     l22534:
 27139                           
 27140                           ;Power_Meter.c: 361: else
 27141                           ;Power_Meter.c: 362: {
 27142                           ;Power_Meter.c: 363: R_C_Gap = (Rcurr_New - Rcurr_V_New);
 27143  016D82  C0FA  F083         	movff	_Rcurr_V_New,___ftneg@f1
 27144  016D86  C0FB  F084         	movff	_Rcurr_V_New+1,___ftneg@f1+1
 27145  016D8A  C0FC  F085         	movff	_Rcurr_V_New+2,___ftneg@f1+2
 27146  016D8E  EC1D  F0D7         	call	___ftneg	;wreg free
 27147  016D92  C083  F08D         	movff	?___ftneg,___ftadd@f1
 27148  016D96  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 27149  016D9A  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 27150  016D9E  C1A1  F090         	movff	_Rcurr_New,___ftadd@f2
 27151  016DA2  C1A2  F091         	movff	_Rcurr_New+1,___ftadd@f2+1
 27152  016DA6  C1A3  F092         	movff	_Rcurr_New+2,___ftadd@f2+2
 27153  016DAA  ECBE  F0B2         	call	___ftadd	;wreg free
 27154  016DAE  C08D  F58B         	movff	?___ftadd,_R_C_Gap
 27155  016DB2  C08E  F58C         	movff	?___ftadd+1,_R_C_Gap+1
 27156  016DB6  C08F  F58D         	movff	?___ftadd+2,_R_C_Gap+2
 27157                           
 27158                           ;Power_Meter.c: 364: R_V_Gap = (Rcurr_V_New - Rcurr_V_Old);
 27159  016DBA  C21E  F083         	movff	_Rcurr_V_Old,___ftneg@f1
 27160  016DBE  C21F  F084         	movff	_Rcurr_V_Old+1,___ftneg@f1+1
 27161  016DC2  C220  F085         	movff	_Rcurr_V_Old+2,___ftneg@f1+2
 27162  016DC6  EC1D  F0D7         	call	___ftneg	;wreg free
 27163  016DCA  C083  F08D         	movff	?___ftneg,___ftadd@f1
 27164  016DCE  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 27165  016DD2  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 27166  016DD6  C0FA  F090         	movff	_Rcurr_V_New,___ftadd@f2
 27167  016DDA  C0FB  F091         	movff	_Rcurr_V_New+1,___ftadd@f2+1
 27168  016DDE  C0FC  F092         	movff	_Rcurr_V_New+2,___ftadd@f2+2
 27169  016DE2  ECBE  F0B2         	call	___ftadd	;wreg free
 27170  016DE6                     L13:
 27171  016DE6  C08D  F59A         	movff	?___ftadd,_R_V_Gap
 27172  016DEA  C08E  F59B         	movff	?___ftadd+1,_R_V_Gap+1
 27173  016DEE  C08F  F59C         	movff	?___ftadd+2,_R_V_Gap+2
 27174  016DF2                     l9253:
 27175                           
 27176                           ;Power_Meter.c: 365: }
 27177                           ;Power_Meter.c: 367: R_Gap_Ratio = (R_C_Gap / R_V_Gap);
 27178  016DF2  C58B  F0A5         	movff	_R_C_Gap,___ftdiv@f1
 27179  016DF6  C58C  F0A6         	movff	_R_C_Gap+1,___ftdiv@f1+1
 27180  016DFA  C58D  F0A7         	movff	_R_C_Gap+2,___ftdiv@f1+2
 27181  016DFE  C59A  F0A8         	movff	_R_V_Gap,___ftdiv@f2
 27182  016E02  C59B  F0A9         	movff	_R_V_Gap+1,___ftdiv@f2+1
 27183  016E06  C59C  F0AA         	movff	_R_V_Gap+2,___ftdiv@f2+2
 27184  016E0A  ECAF  F0C1         	call	___ftdiv	;wreg free
 27185  016E0E  C0A5  F10F         	movff	?___ftdiv,_R_Gap_Ratio
 27186  016E12  C0A6  F110         	movff	?___ftdiv+1,_R_Gap_Ratio+1
 27187  016E16  C0A7  F111         	movff	?___ftdiv+2,_R_Gap_Ratio+2
 27188                           
 27189                           ;Power_Meter.c: 368: R_Deg = R_Gap_Ratio * 360;
 27190  016E1A  C10F  F074         	movff	_R_Gap_Ratio,___ftmul@f1
 27191  016E1E  C110  F075         	movff	_R_Gap_Ratio+1,___ftmul@f1+1
 27192  016E22  C111  F076         	movff	_R_Gap_Ratio+2,___ftmul@f1+2
 27193  016E26  0E00               	movlw	0
 27194  016E28  0100               	movlb	0	; () banked
 27195  016E2A  6F77               	movwf	___ftmul@f2& (0+255),b
 27196  016E2C  0EB4               	movlw	180
 27197  016E2E  0100               	movlb	0	; () banked
 27198  016E30  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 27199  016E32  0E43               	movlw	67
 27200  016E34  0100               	movlb	0	; () banked
 27201  016E36  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 27202  016E38  EC00  F0C1         	call	___ftmul	;wreg free
 27203  016E3C  C074  F669         	movff	?___ftmul,_R_Deg
 27204  016E40  C075  F66A         	movff	?___ftmul+1,_R_Deg+1
 27205  016E44  C076  F66B         	movff	?___ftmul+2,_R_Deg+2
 27206                           
 27207                           ;Power_Meter.c: 370: RGR_Arr_1[4] = RGR_Arr_1[3];
 27208  016E48  C3CF  F3D2         	movff	_RGR_Arr_1+9,_RGR_Arr_1+12
 27209  016E4C  C3D0  F3D3         	movff	_RGR_Arr_1+10,_RGR_Arr_1+13
 27210  016E50  C3D1  F3D4         	movff	_RGR_Arr_1+11,_RGR_Arr_1+14
 27211                           
 27212                           ;Power_Meter.c: 371: RGR_Arr_1[3] = RGR_Arr_1[2];
 27213  016E54  C3CC  F3CF         	movff	_RGR_Arr_1+6,_RGR_Arr_1+9
 27214  016E58  C3CD  F3D0         	movff	_RGR_Arr_1+7,_RGR_Arr_1+10
 27215  016E5C  C3CE  F3D1         	movff	_RGR_Arr_1+8,_RGR_Arr_1+11
 27216                           
 27217                           ;Power_Meter.c: 372: RGR_Arr_1[2] = RGR_Arr_1[1];
 27218  016E60  C3C9  F3CC         	movff	_RGR_Arr_1+3,_RGR_Arr_1+6
 27219  016E64  C3CA  F3CD         	movff	_RGR_Arr_1+4,_RGR_Arr_1+7
 27220  016E68  C3CB  F3CE         	movff	_RGR_Arr_1+5,_RGR_Arr_1+8
 27221                           
 27222                           ;Power_Meter.c: 373: RGR_Arr_1[1] = RGR_Arr_1[0];
 27223  016E6C  C3C6  F3C9         	movff	_RGR_Arr_1,_RGR_Arr_1+3
 27224  016E70  C3C7  F3CA         	movff	_RGR_Arr_1+1,_RGR_Arr_1+4
 27225  016E74  C3C8  F3CB         	movff	_RGR_Arr_1+2,_RGR_Arr_1+5
 27226                           
 27227                           ;Power_Meter.c: 374: RGR_Arr_1[0] = R_Gap_Ratio;
 27228  016E78  C10F  F3C6         	movff	_R_Gap_Ratio,_RGR_Arr_1
 27229  016E7C  C110  F3C7         	movff	_R_Gap_Ratio+1,_RGR_Arr_1+1
 27230  016E80  C111  F3C8         	movff	_R_Gap_Ratio+2,_RGR_Arr_1+2
 27231  016E84  0012               	return		;funcret
 27232  016E86                     __end_of_R_PF_Calc:
 27233                           	opt stack 0
 27234                           tblptru	equ	0xFF8
 27235                           tblptrh	equ	0xFF7
 27236                           tblptrl	equ	0xFF6
 27237                           tablat	equ	0xFF5
 27238                           prodh	equ	0xFF4
 27239                           prodl	equ	0xFF3
 27240                           intcon	equ	0xFF2
 27241                           postinc0	equ	0xFEE
 27242                           wreg	equ	0xFE8
 27243                           postdec1	equ	0xFE5
 27244                           fsr1h	equ	0xFE2
 27245                           fsr1l	equ	0xFE1
 27246                           indf2	equ	0xFDF
 27247                           postinc2	equ	0xFDE
 27248                           postdec2	equ	0xFDD
 27249                           fsr2h	equ	0xFDA
 27250                           fsr2l	equ	0xFD9
 27251                           status	equ	0xFD8
 27252                           
 27253 ;; *************** function _R_PF_Avg *****************
 27254 ;; Defined at:
 27255 ;;		line 378 in file "Power_Meter.c"
 27256 ;; Parameters:    Size  Location     Type
 27257 ;;		None
 27258 ;; Auto vars:     Size  Location     Type
 27259 ;;		None
 27260 ;; Return value:  Size  Location     Type
 27261 ;;                  1    wreg      void 
 27262 ;; Registers used:
 27263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27264 ;; Tracked objects:
 27265 ;;		On entry : 0/0
 27266 ;;		On exit  : 0/0
 27267 ;;		Unchanged: 0/0
 27268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27270 ;;      Locals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 27271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27272 ;;      Totals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 27273 ;;Total ram usage:       84 bytes
 27274 ;; Hardware stack levels used:    1
 27275 ;; Hardware stack levels required when called:    8
 27276 ;; This function calls:
 27277 ;;		___ftadd
 27278 ;;		___ftdiv
 27279 ;;		___ftge
 27280 ;;		___ftmul
 27281 ;;		_cos
 27282 ;; This function is called by:
 27283 ;;		_main
 27284 ;; This function uses a non-reentrant model
 27285 ;;
 27286                           
 27287                           	psect	text91
 27288  0121FA                     __ptext91:
 27289                           	opt stack 0
 27290  0121FA                     _R_PF_Avg:
 27291                           	opt stack 22
 27292                           
 27293                           ;Power_Meter.c: 380: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 27294                           
 27295                           ;incstack = 0
 27296  0121FA  C3CF  F090         	movff	_RGR_Arr_1+9,___ftadd@f2
 27297  0121FE  C3D0  F091         	movff	_RGR_Arr_1+10,___ftadd@f2+1
 27298  012202  C3D1  F092         	movff	_RGR_Arr_1+11,___ftadd@f2+2
 27299  012206  C3D2  F08D         	movff	_RGR_Arr_1+12,___ftadd@f1
 27300  01220A  C3D3  F08E         	movff	_RGR_Arr_1+13,___ftadd@f1+1
 27301  01220E  C3D4  F08F         	movff	_RGR_Arr_1+14,___ftadd@f1+2
 27302  012212  ECBE  F0B2         	call	___ftadd	;wreg free
 27303  012216  C08D  F6C3         	movff	?___ftadd,_R_PF_Avg$8080
 27304  01221A  C08E  F6C4         	movff	?___ftadd+1,_R_PF_Avg$8080+1
 27305  01221E  C08F  F6C5         	movff	?___ftadd+2,_R_PF_Avg$8080+2
 27306                           
 27307                           ;Power_Meter.c: 380: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 27308  012222  C3CC  F090         	movff	_RGR_Arr_1+6,___ftadd@f2
 27309  012226  C3CD  F091         	movff	_RGR_Arr_1+7,___ftadd@f2+1
 27310  01222A  C3CE  F092         	movff	_RGR_Arr_1+8,___ftadd@f2+2
 27311  01222E  C6C3  F08D         	movff	_R_PF_Avg$8080,___ftadd@f1
 27312  012232  C6C4  F08E         	movff	_R_PF_Avg$8080+1,___ftadd@f1+1
 27313  012236  C6C5  F08F         	movff	_R_PF_Avg$8080+2,___ftadd@f1+2
 27314  01223A  ECBE  F0B2         	call	___ftadd	;wreg free
 27315  01223E  C08D  F6C6         	movff	?___ftadd,_R_PF_Avg$8081
 27316  012242  C08E  F6C7         	movff	?___ftadd+1,_R_PF_Avg$8081+1
 27317  012246  C08F  F6C8         	movff	?___ftadd+2,_R_PF_Avg$8081+2
 27318                           
 27319                           ;Power_Meter.c: 380: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 27320  01224A  C3C9  F090         	movff	_RGR_Arr_1+3,___ftadd@f2
 27321  01224E  C3CA  F091         	movff	_RGR_Arr_1+4,___ftadd@f2+1
 27322  012252  C3CB  F092         	movff	_RGR_Arr_1+5,___ftadd@f2+2
 27323  012256  C6C6  F08D         	movff	_R_PF_Avg$8081,___ftadd@f1
 27324  01225A  C6C7  F08E         	movff	_R_PF_Avg$8081+1,___ftadd@f1+1
 27325  01225E  C6C8  F08F         	movff	_R_PF_Avg$8081+2,___ftadd@f1+2
 27326  012262  ECBE  F0B2         	call	___ftadd	;wreg free
 27327  012266  C08D  F6C9         	movff	?___ftadd,_R_PF_Avg$8082
 27328  01226A  C08E  F6CA         	movff	?___ftadd+1,_R_PF_Avg$8082+1
 27329  01226E  C08F  F6CB         	movff	?___ftadd+2,_R_PF_Avg$8082+2
 27330                           
 27331                           ;Power_Meter.c: 380: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 27332  012272  C3C6  F090         	movff	_RGR_Arr_1,___ftadd@f2
 27333  012276  C3C7  F091         	movff	_RGR_Arr_1+1,___ftadd@f2+1
 27334  01227A  C3C8  F092         	movff	_RGR_Arr_1+2,___ftadd@f2+2
 27335  01227E  C6C9  F08D         	movff	_R_PF_Avg$8082,___ftadd@f1
 27336  012282  C6CA  F08E         	movff	_R_PF_Avg$8082+1,___ftadd@f1+1
 27337  012286  C6CB  F08F         	movff	_R_PF_Avg$8082+2,___ftadd@f1+2
 27338  01228A  ECBE  F0B2         	call	___ftadd	;wreg free
 27339  01228E  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 27340  012292  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 27341  012296  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 27342  01229A  0E00               	movlw	0
 27343  01229C  0100               	movlb	0	; () banked
 27344  01229E  6FA8               	movwf	___ftdiv@f2& (0+255),b
 27345  0122A0  0EA0               	movlw	160
 27346  0122A2  0100               	movlb	0	; () banked
 27347  0122A4  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 27348  0122A6  0E40               	movlw	64
 27349  0122A8  0100               	movlb	0	; () banked
 27350  0122AA  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 27351  0122AC  ECAF  F0C1         	call	___ftdiv	;wreg free
 27352  0122B0  C0A5  F21B         	movff	?___ftdiv,_RGR_Avg_1
 27353  0122B4  C0A6  F21C         	movff	?___ftdiv+1,_RGR_Avg_1+1
 27354  0122B8  C0A7  F21D         	movff	?___ftdiv+2,_RGR_Avg_1+2
 27355                           
 27356                           ;Power_Meter.c: 383: RGR_Arr[29] = RGR_Arr[28];
 27357  0122BC  C354  F357         	movff	_RGR_Arr+84,_RGR_Arr+87
 27358  0122C0  C355  F358         	movff	_RGR_Arr+85,_RGR_Arr+88
 27359  0122C4  C356  F359         	movff	_RGR_Arr+86,_RGR_Arr+89
 27360                           
 27361                           ;Power_Meter.c: 384: RGR_Arr[28] = RGR_Arr[27];
 27362  0122C8  C351  F354         	movff	_RGR_Arr+81,_RGR_Arr+84
 27363  0122CC  C352  F355         	movff	_RGR_Arr+82,_RGR_Arr+85
 27364  0122D0  C353  F356         	movff	_RGR_Arr+83,_RGR_Arr+86
 27365                           
 27366                           ;Power_Meter.c: 385: RGR_Arr[27] = RGR_Arr[26];
 27367  0122D4  C34E  F351         	movff	_RGR_Arr+78,_RGR_Arr+81
 27368  0122D8  C34F  F352         	movff	_RGR_Arr+79,_RGR_Arr+82
 27369  0122DC  C350  F353         	movff	_RGR_Arr+80,_RGR_Arr+83
 27370                           
 27371                           ;Power_Meter.c: 386: RGR_Arr[26] = RGR_Arr[25];
 27372  0122E0  C34B  F34E         	movff	_RGR_Arr+75,_RGR_Arr+78
 27373  0122E4  C34C  F34F         	movff	_RGR_Arr+76,_RGR_Arr+79
 27374  0122E8  C34D  F350         	movff	_RGR_Arr+77,_RGR_Arr+80
 27375                           
 27376                           ;Power_Meter.c: 387: RGR_Arr[25] = RGR_Arr[24];
 27377  0122EC  C348  F34B         	movff	_RGR_Arr+72,_RGR_Arr+75
 27378  0122F0  C349  F34C         	movff	_RGR_Arr+73,_RGR_Arr+76
 27379  0122F4  C34A  F34D         	movff	_RGR_Arr+74,_RGR_Arr+77
 27380                           
 27381                           ;Power_Meter.c: 388: RGR_Arr[24] = RGR_Arr[23];
 27382  0122F8  C345  F348         	movff	_RGR_Arr+69,_RGR_Arr+72
 27383  0122FC  C346  F349         	movff	_RGR_Arr+70,_RGR_Arr+73
 27384  012300  C347  F34A         	movff	_RGR_Arr+71,_RGR_Arr+74
 27385                           
 27386                           ;Power_Meter.c: 389: RGR_Arr[23] = RGR_Arr[22];
 27387  012304  C342  F345         	movff	_RGR_Arr+66,_RGR_Arr+69
 27388  012308  C343  F346         	movff	_RGR_Arr+67,_RGR_Arr+70
 27389  01230C  C344  F347         	movff	_RGR_Arr+68,_RGR_Arr+71
 27390                           
 27391                           ;Power_Meter.c: 390: RGR_Arr[22] = RGR_Arr[21];
 27392  012310  C33F  F342         	movff	_RGR_Arr+63,_RGR_Arr+66
 27393  012314  C340  F343         	movff	_RGR_Arr+64,_RGR_Arr+67
 27394  012318  C341  F344         	movff	_RGR_Arr+65,_RGR_Arr+68
 27395                           
 27396                           ;Power_Meter.c: 391: RGR_Arr[21] = RGR_Arr[20];
 27397  01231C  C33C  F33F         	movff	_RGR_Arr+60,_RGR_Arr+63
 27398  012320  C33D  F340         	movff	_RGR_Arr+61,_RGR_Arr+64
 27399  012324  C33E  F341         	movff	_RGR_Arr+62,_RGR_Arr+65
 27400                           
 27401                           ;Power_Meter.c: 392: RGR_Arr[20] = RGR_Arr[19];
 27402  012328  C339  F33C         	movff	_RGR_Arr+57,_RGR_Arr+60
 27403  01232C  C33A  F33D         	movff	_RGR_Arr+58,_RGR_Arr+61
 27404  012330  C33B  F33E         	movff	_RGR_Arr+59,_RGR_Arr+62
 27405                           
 27406                           ;Power_Meter.c: 393: RGR_Arr[19] = RGR_Arr[18];
 27407  012334  C336  F339         	movff	_RGR_Arr+54,_RGR_Arr+57
 27408  012338  C337  F33A         	movff	_RGR_Arr+55,_RGR_Arr+58
 27409  01233C  C338  F33B         	movff	_RGR_Arr+56,_RGR_Arr+59
 27410                           
 27411                           ;Power_Meter.c: 394: RGR_Arr[18] = RGR_Arr[17];
 27412  012340  C333  F336         	movff	_RGR_Arr+51,_RGR_Arr+54
 27413  012344  C334  F337         	movff	_RGR_Arr+52,_RGR_Arr+55
 27414  012348  C335  F338         	movff	_RGR_Arr+53,_RGR_Arr+56
 27415                           
 27416                           ;Power_Meter.c: 395: RGR_Arr[17] = RGR_Arr[16];
 27417  01234C  C330  F333         	movff	_RGR_Arr+48,_RGR_Arr+51
 27418  012350  C331  F334         	movff	_RGR_Arr+49,_RGR_Arr+52
 27419  012354  C332  F335         	movff	_RGR_Arr+50,_RGR_Arr+53
 27420                           
 27421                           ;Power_Meter.c: 396: RGR_Arr[16] = RGR_Arr[15];
 27422  012358  C32D  F330         	movff	_RGR_Arr+45,_RGR_Arr+48
 27423  01235C  C32E  F331         	movff	_RGR_Arr+46,_RGR_Arr+49
 27424  012360  C32F  F332         	movff	_RGR_Arr+47,_RGR_Arr+50
 27425                           
 27426                           ;Power_Meter.c: 397: RGR_Arr[15] = RGR_Arr[14];
 27427  012364  C32A  F32D         	movff	_RGR_Arr+42,_RGR_Arr+45
 27428  012368  C32B  F32E         	movff	_RGR_Arr+43,_RGR_Arr+46
 27429  01236C  C32C  F32F         	movff	_RGR_Arr+44,_RGR_Arr+47
 27430                           
 27431                           ;Power_Meter.c: 398: RGR_Arr[14] = RGR_Arr[13];
 27432  012370  C327  F32A         	movff	_RGR_Arr+39,_RGR_Arr+42
 27433  012374  C328  F32B         	movff	_RGR_Arr+40,_RGR_Arr+43
 27434  012378  C329  F32C         	movff	_RGR_Arr+41,_RGR_Arr+44
 27435                           
 27436                           ;Power_Meter.c: 399: RGR_Arr[13] = RGR_Arr[12];
 27437  01237C  C324  F327         	movff	_RGR_Arr+36,_RGR_Arr+39
 27438  012380  C325  F328         	movff	_RGR_Arr+37,_RGR_Arr+40
 27439  012384  C326  F329         	movff	_RGR_Arr+38,_RGR_Arr+41
 27440                           
 27441                           ;Power_Meter.c: 400: RGR_Arr[12] = RGR_Arr[11];
 27442  012388  C321  F324         	movff	_RGR_Arr+33,_RGR_Arr+36
 27443  01238C  C322  F325         	movff	_RGR_Arr+34,_RGR_Arr+37
 27444  012390  C323  F326         	movff	_RGR_Arr+35,_RGR_Arr+38
 27445                           
 27446                           ;Power_Meter.c: 401: RGR_Arr[11] = RGR_Arr[10];
 27447  012394  C31E  F321         	movff	_RGR_Arr+30,_RGR_Arr+33
 27448  012398  C31F  F322         	movff	_RGR_Arr+31,_RGR_Arr+34
 27449  01239C  C320  F323         	movff	_RGR_Arr+32,_RGR_Arr+35
 27450                           
 27451                           ;Power_Meter.c: 402: RGR_Arr[10] = RGR_Arr[9];
 27452  0123A0  C31B  F31E         	movff	_RGR_Arr+27,_RGR_Arr+30
 27453  0123A4  C31C  F31F         	movff	_RGR_Arr+28,_RGR_Arr+31
 27454  0123A8  C31D  F320         	movff	_RGR_Arr+29,_RGR_Arr+32
 27455                           
 27456                           ;Power_Meter.c: 403: RGR_Arr[9] = RGR_Arr[8];
 27457  0123AC  C318  F31B         	movff	_RGR_Arr+24,_RGR_Arr+27
 27458  0123B0  C319  F31C         	movff	_RGR_Arr+25,_RGR_Arr+28
 27459  0123B4  C31A  F31D         	movff	_RGR_Arr+26,_RGR_Arr+29
 27460                           
 27461                           ;Power_Meter.c: 404: RGR_Arr[8] = RGR_Arr[7];
 27462  0123B8  C315  F318         	movff	_RGR_Arr+21,_RGR_Arr+24
 27463  0123BC  C316  F319         	movff	_RGR_Arr+22,_RGR_Arr+25
 27464  0123C0  C317  F31A         	movff	_RGR_Arr+23,_RGR_Arr+26
 27465                           
 27466                           ;Power_Meter.c: 405: RGR_Arr[7] = RGR_Arr[6];
 27467  0123C4  C312  F315         	movff	_RGR_Arr+18,_RGR_Arr+21
 27468  0123C8  C313  F316         	movff	_RGR_Arr+19,_RGR_Arr+22
 27469  0123CC  C314  F317         	movff	_RGR_Arr+20,_RGR_Arr+23
 27470                           
 27471                           ;Power_Meter.c: 406: RGR_Arr[6] = RGR_Arr[5];
 27472  0123D0  C30F  F312         	movff	_RGR_Arr+15,_RGR_Arr+18
 27473  0123D4  C310  F313         	movff	_RGR_Arr+16,_RGR_Arr+19
 27474  0123D8  C311  F314         	movff	_RGR_Arr+17,_RGR_Arr+20
 27475                           
 27476                           ;Power_Meter.c: 407: RGR_Arr[5] = RGR_Arr[4];
 27477  0123DC  C30C  F30F         	movff	_RGR_Arr+12,_RGR_Arr+15
 27478  0123E0  C30D  F310         	movff	_RGR_Arr+13,_RGR_Arr+16
 27479  0123E4  C30E  F311         	movff	_RGR_Arr+14,_RGR_Arr+17
 27480                           
 27481                           ;Power_Meter.c: 408: RGR_Arr[4] = RGR_Arr[3];
 27482  0123E8  C309  F30C         	movff	_RGR_Arr+9,_RGR_Arr+12
 27483  0123EC  C30A  F30D         	movff	_RGR_Arr+10,_RGR_Arr+13
 27484  0123F0  C30B  F30E         	movff	_RGR_Arr+11,_RGR_Arr+14
 27485                           
 27486                           ;Power_Meter.c: 409: RGR_Arr[3] = RGR_Arr[2];
 27487  0123F4  C306  F309         	movff	_RGR_Arr+6,_RGR_Arr+9
 27488  0123F8  C307  F30A         	movff	_RGR_Arr+7,_RGR_Arr+10
 27489  0123FC  C308  F30B         	movff	_RGR_Arr+8,_RGR_Arr+11
 27490                           
 27491                           ;Power_Meter.c: 410: RGR_Arr[2] = RGR_Arr[1];
 27492  012400  C303  F306         	movff	_RGR_Arr+3,_RGR_Arr+6
 27493  012404  C304  F307         	movff	_RGR_Arr+4,_RGR_Arr+7
 27494  012408  C305  F308         	movff	_RGR_Arr+5,_RGR_Arr+8
 27495                           
 27496                           ;Power_Meter.c: 411: RGR_Arr[1] = RGR_Arr[0];
 27497  01240C  C300  F303         	movff	_RGR_Arr,_RGR_Arr+3
 27498  012410  C301  F304         	movff	_RGR_Arr+1,_RGR_Arr+4
 27499  012414  C302  F305         	movff	_RGR_Arr+2,_RGR_Arr+5
 27500                           
 27501                           ;Power_Meter.c: 414: if( (RGR_Avg_1 > (R_Gap_Ratio * 0.8)) && (RGR_Avg_1 < (R_Gap_Ratio 
      +                          * 1.2)) )
 27502  012418  0ECD               	movlw	205
 27503  01241A  0100               	movlb	0	; () banked
 27504  01241C  6F77               	movwf	___ftmul@f2& (0+255),b
 27505  01241E  0E4C               	movlw	76
 27506  012420  0100               	movlb	0	; () banked
 27507  012422  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 27508  012424  0E3F               	movlw	63
 27509  012426  0100               	movlb	0	; () banked
 27510  012428  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 27511  01242A  C10F  F074         	movff	_R_Gap_Ratio,___ftmul@f1
 27512  01242E  C110  F075         	movff	_R_Gap_Ratio+1,___ftmul@f1+1
 27513  012432  C111  F076         	movff	_R_Gap_Ratio+2,___ftmul@f1+2
 27514  012436  EC00  F0C1         	call	___ftmul	;wreg free
 27515  01243A  C074  F099         	movff	?___ftmul,___ftge@ff1
 27516  01243E  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
 27517  012442  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
 27518  012446  C21B  F09C         	movff	_RGR_Avg_1,___ftge@ff2
 27519  01244A  C21C  F09D         	movff	_RGR_Avg_1+1,___ftge@ff2+1
 27520  01244E  C21D  F09E         	movff	_RGR_Avg_1+2,___ftge@ff2+2
 27521  012452  EC4B  F0CB         	call	___ftge	;wreg free
 27522  012456  0100               	movlb	0	; () banked
 27523  012458  B0D8               	btfsc	status,0,c
 27524  01245A  D028               	goto	l22610
 27525                           
 27526                           ; BSR set to: 0
 27527  01245C  C21B  F099         	movff	_RGR_Avg_1,___ftge@ff1
 27528  012460  C21C  F09A         	movff	_RGR_Avg_1+1,___ftge@ff1+1
 27529  012464  C21D  F09B         	movff	_RGR_Avg_1+2,___ftge@ff1+2
 27530  012468  0E9A               	movlw	154
 27531  01246A  0100               	movlb	0	; () banked
 27532  01246C  6F77               	movwf	___ftmul@f2& (0+255),b
 27533  01246E  0E99               	movlw	153
 27534  012470  0100               	movlb	0	; () banked
 27535  012472  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 27536  012474  0E3F               	movlw	63
 27537  012476  0100               	movlb	0	; () banked
 27538  012478  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 27539  01247A  C10F  F074         	movff	_R_Gap_Ratio,___ftmul@f1
 27540  01247E  C110  F075         	movff	_R_Gap_Ratio+1,___ftmul@f1+1
 27541  012482  C111  F076         	movff	_R_Gap_Ratio+2,___ftmul@f1+2
 27542  012486  EC00  F0C1         	call	___ftmul	;wreg free
 27543  01248A  C074  F09C         	movff	?___ftmul,___ftge@ff2
 27544  01248E  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
 27545  012492  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
 27546  012496  EC4B  F0CB         	call	___ftge	;wreg free
 27547  01249A  0100               	movlb	0	; () banked
 27548  01249C  B0D8               	btfsc	status,0,c
 27549  01249E  D006               	goto	l22610
 27550                           
 27551                           ; BSR set to: 0
 27552                           ;Power_Meter.c: 415: {
 27553                           ;Power_Meter.c: 416: RGR_Arr[0] = R_Gap_Ratio;
 27554  0124A0  C10F  F300         	movff	_R_Gap_Ratio,_RGR_Arr
 27555  0124A4  C110  F301         	movff	_R_Gap_Ratio+1,_RGR_Arr+1
 27556  0124A8  C111  F302         	movff	_R_Gap_Ratio+2,_RGR_Arr+2
 27557  0124AC                     l22610:
 27558                           
 27559                           ; BSR set to: 0
 27560                           ;Power_Meter.c: 417: }
 27561                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27562                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27563                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27564                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27565  0124AC  C354  F090         	movff	_RGR_Arr+84,___ftadd@f2
 27566  0124B0  C355  F091         	movff	_RGR_Arr+85,___ftadd@f2+1
 27567  0124B4  C356  F092         	movff	_RGR_Arr+86,___ftadd@f2+2
 27568  0124B8  C357  F08D         	movff	_RGR_Arr+87,___ftadd@f1
 27569  0124BC  C358  F08E         	movff	_RGR_Arr+88,___ftadd@f1+1
 27570  0124C0  C359  F08F         	movff	_RGR_Arr+89,___ftadd@f1+2
 27571  0124C4  ECBE  F0B2         	call	___ftadd	;wreg free
 27572  0124C8  C08D  F6C3         	movff	?___ftadd,_R_PF_Avg$8080
 27573  0124CC  C08E  F6C4         	movff	?___ftadd+1,_R_PF_Avg$8080+1
 27574  0124D0  C08F  F6C5         	movff	?___ftadd+2,_R_PF_Avg$8080+2
 27575                           
 27576                           ;Power_Meter.c: 417: }
 27577                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27578                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27579                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27580                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27581  0124D4  C351  F090         	movff	_RGR_Arr+81,___ftadd@f2
 27582  0124D8  C352  F091         	movff	_RGR_Arr+82,___ftadd@f2+1
 27583  0124DC  C353  F092         	movff	_RGR_Arr+83,___ftadd@f2+2
 27584  0124E0  C6C3  F08D         	movff	_R_PF_Avg$8080,___ftadd@f1
 27585  0124E4  C6C4  F08E         	movff	_R_PF_Avg$8080+1,___ftadd@f1+1
 27586  0124E8  C6C5  F08F         	movff	_R_PF_Avg$8080+2,___ftadd@f1+2
 27587  0124EC  ECBE  F0B2         	call	___ftadd	;wreg free
 27588  0124F0  C08D  F6C6         	movff	?___ftadd,_R_PF_Avg$8081
 27589  0124F4  C08E  F6C7         	movff	?___ftadd+1,_R_PF_Avg$8081+1
 27590  0124F8  C08F  F6C8         	movff	?___ftadd+2,_R_PF_Avg$8081+2
 27591                           
 27592                           ;Power_Meter.c: 417: }
 27593                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27594                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27595                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27596                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27597  0124FC  C34E  F090         	movff	_RGR_Arr+78,___ftadd@f2
 27598  012500  C34F  F091         	movff	_RGR_Arr+79,___ftadd@f2+1
 27599  012504  C350  F092         	movff	_RGR_Arr+80,___ftadd@f2+2
 27600  012508  C6C6  F08D         	movff	_R_PF_Avg$8081,___ftadd@f1
 27601  01250C  C6C7  F08E         	movff	_R_PF_Avg$8081+1,___ftadd@f1+1
 27602  012510  C6C8  F08F         	movff	_R_PF_Avg$8081+2,___ftadd@f1+2
 27603  012514  ECBE  F0B2         	call	___ftadd	;wreg free
 27604  012518  C08D  F6C9         	movff	?___ftadd,_R_PF_Avg$8082
 27605  01251C  C08E  F6CA         	movff	?___ftadd+1,_R_PF_Avg$8082+1
 27606  012520  C08F  F6CB         	movff	?___ftadd+2,_R_PF_Avg$8082+2
 27607                           
 27608                           ;Power_Meter.c: 417: }
 27609                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27610                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27611                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27612                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27613  012524  C34B  F090         	movff	_RGR_Arr+75,___ftadd@f2
 27614  012528  C34C  F091         	movff	_RGR_Arr+76,___ftadd@f2+1
 27615  01252C  C34D  F092         	movff	_RGR_Arr+77,___ftadd@f2+2
 27616  012530  C6C9  F08D         	movff	_R_PF_Avg$8082,___ftadd@f1
 27617  012534  C6CA  F08E         	movff	_R_PF_Avg$8082+1,___ftadd@f1+1
 27618  012538  C6CB  F08F         	movff	_R_PF_Avg$8082+2,___ftadd@f1+2
 27619  01253C  ECBE  F0B2         	call	___ftadd	;wreg free
 27620  012540  C08D  F678         	movff	?___ftadd,_R_PF_Avg$8083
 27621  012544  C08E  F679         	movff	?___ftadd+1,_R_PF_Avg$8083+1
 27622  012548  C08F  F67A         	movff	?___ftadd+2,_R_PF_Avg$8083+2
 27623                           
 27624                           ;Power_Meter.c: 417: }
 27625                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27626                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27627                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27628                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27629  01254C  C348  F090         	movff	_RGR_Arr+72,___ftadd@f2
 27630  012550  C349  F091         	movff	_RGR_Arr+73,___ftadd@f2+1
 27631  012554  C34A  F092         	movff	_RGR_Arr+74,___ftadd@f2+2
 27632  012558  C678  F08D         	movff	_R_PF_Avg$8083,___ftadd@f1
 27633  01255C  C679  F08E         	movff	_R_PF_Avg$8083+1,___ftadd@f1+1
 27634  012560  C67A  F08F         	movff	_R_PF_Avg$8083+2,___ftadd@f1+2
 27635  012564  ECBE  F0B2         	call	___ftadd	;wreg free
 27636  012568  C08D  F67B         	movff	?___ftadd,_R_PF_Avg$8084
 27637  01256C  C08E  F67C         	movff	?___ftadd+1,_R_PF_Avg$8084+1
 27638  012570  C08F  F67D         	movff	?___ftadd+2,_R_PF_Avg$8084+2
 27639                           
 27640                           ;Power_Meter.c: 417: }
 27641                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27642                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27643                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27644                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27645  012574  C345  F090         	movff	_RGR_Arr+69,___ftadd@f2
 27646  012578  C346  F091         	movff	_RGR_Arr+70,___ftadd@f2+1
 27647  01257C  C347  F092         	movff	_RGR_Arr+71,___ftadd@f2+2
 27648  012580  C67B  F08D         	movff	_R_PF_Avg$8084,___ftadd@f1
 27649  012584  C67C  F08E         	movff	_R_PF_Avg$8084+1,___ftadd@f1+1
 27650  012588  C67D  F08F         	movff	_R_PF_Avg$8084+2,___ftadd@f1+2
 27651  01258C  ECBE  F0B2         	call	___ftadd	;wreg free
 27652  012590  C08D  F67E         	movff	?___ftadd,_R_PF_Avg$8085
 27653  012594  C08E  F67F         	movff	?___ftadd+1,_R_PF_Avg$8085+1
 27654  012598  C08F  F680         	movff	?___ftadd+2,_R_PF_Avg$8085+2
 27655                           
 27656                           ;Power_Meter.c: 417: }
 27657                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27658                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27659                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27660                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27661  01259C  C342  F090         	movff	_RGR_Arr+66,___ftadd@f2
 27662  0125A0  C343  F091         	movff	_RGR_Arr+67,___ftadd@f2+1
 27663  0125A4  C344  F092         	movff	_RGR_Arr+68,___ftadd@f2+2
 27664  0125A8  C67E  F08D         	movff	_R_PF_Avg$8085,___ftadd@f1
 27665  0125AC  C67F  F08E         	movff	_R_PF_Avg$8085+1,___ftadd@f1+1
 27666  0125B0  C680  F08F         	movff	_R_PF_Avg$8085+2,___ftadd@f1+2
 27667  0125B4  ECBE  F0B2         	call	___ftadd	;wreg free
 27668  0125B8  C08D  F681         	movff	?___ftadd,_R_PF_Avg$8086
 27669  0125BC  C08E  F682         	movff	?___ftadd+1,_R_PF_Avg$8086+1
 27670  0125C0  C08F  F683         	movff	?___ftadd+2,_R_PF_Avg$8086+2
 27671                           
 27672                           ;Power_Meter.c: 417: }
 27673                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27674                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27675                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27676                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27677  0125C4  C33F  F090         	movff	_RGR_Arr+63,___ftadd@f2
 27678  0125C8  C340  F091         	movff	_RGR_Arr+64,___ftadd@f2+1
 27679  0125CC  C341  F092         	movff	_RGR_Arr+65,___ftadd@f2+2
 27680  0125D0  C681  F08D         	movff	_R_PF_Avg$8086,___ftadd@f1
 27681  0125D4  C682  F08E         	movff	_R_PF_Avg$8086+1,___ftadd@f1+1
 27682  0125D8  C683  F08F         	movff	_R_PF_Avg$8086+2,___ftadd@f1+2
 27683  0125DC  ECBE  F0B2         	call	___ftadd	;wreg free
 27684  0125E0  C08D  F684         	movff	?___ftadd,_R_PF_Avg$8087
 27685  0125E4  C08E  F685         	movff	?___ftadd+1,_R_PF_Avg$8087+1
 27686  0125E8  C08F  F686         	movff	?___ftadd+2,_R_PF_Avg$8087+2
 27687                           
 27688                           ;Power_Meter.c: 417: }
 27689                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27690                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27691                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27692                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27693  0125EC  C33C  F090         	movff	_RGR_Arr+60,___ftadd@f2
 27694  0125F0  C33D  F091         	movff	_RGR_Arr+61,___ftadd@f2+1
 27695  0125F4  C33E  F092         	movff	_RGR_Arr+62,___ftadd@f2+2
 27696  0125F8  C684  F08D         	movff	_R_PF_Avg$8087,___ftadd@f1
 27697  0125FC  C685  F08E         	movff	_R_PF_Avg$8087+1,___ftadd@f1+1
 27698  012600  C686  F08F         	movff	_R_PF_Avg$8087+2,___ftadd@f1+2
 27699  012604  ECBE  F0B2         	call	___ftadd	;wreg free
 27700  012608  C08D  F687         	movff	?___ftadd,_R_PF_Avg$8088
 27701  01260C  C08E  F688         	movff	?___ftadd+1,_R_PF_Avg$8088+1
 27702  012610  C08F  F689         	movff	?___ftadd+2,_R_PF_Avg$8088+2
 27703                           
 27704                           ;Power_Meter.c: 417: }
 27705                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27706                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27707                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27708                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27709  012614  C339  F090         	movff	_RGR_Arr+57,___ftadd@f2
 27710  012618  C33A  F091         	movff	_RGR_Arr+58,___ftadd@f2+1
 27711  01261C  C33B  F092         	movff	_RGR_Arr+59,___ftadd@f2+2
 27712  012620  C687  F08D         	movff	_R_PF_Avg$8088,___ftadd@f1
 27713  012624  C688  F08E         	movff	_R_PF_Avg$8088+1,___ftadd@f1+1
 27714  012628  C689  F08F         	movff	_R_PF_Avg$8088+2,___ftadd@f1+2
 27715  01262C  ECBE  F0B2         	call	___ftadd	;wreg free
 27716  012630  C08D  F68A         	movff	?___ftadd,_R_PF_Avg$8089
 27717  012634  C08E  F68B         	movff	?___ftadd+1,_R_PF_Avg$8089+1
 27718  012638  C08F  F68C         	movff	?___ftadd+2,_R_PF_Avg$8089+2
 27719                           
 27720                           ;Power_Meter.c: 417: }
 27721                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27722                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27723                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27724                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27725  01263C  C336  F090         	movff	_RGR_Arr+54,___ftadd@f2
 27726  012640  C337  F091         	movff	_RGR_Arr+55,___ftadd@f2+1
 27727  012644  C338  F092         	movff	_RGR_Arr+56,___ftadd@f2+2
 27728  012648  C68A  F08D         	movff	_R_PF_Avg$8089,___ftadd@f1
 27729  01264C  C68B  F08E         	movff	_R_PF_Avg$8089+1,___ftadd@f1+1
 27730  012650  C68C  F08F         	movff	_R_PF_Avg$8089+2,___ftadd@f1+2
 27731  012654  ECBE  F0B2         	call	___ftadd	;wreg free
 27732  012658  C08D  F68D         	movff	?___ftadd,_R_PF_Avg$8090
 27733  01265C  C08E  F68E         	movff	?___ftadd+1,_R_PF_Avg$8090+1
 27734  012660  C08F  F68F         	movff	?___ftadd+2,_R_PF_Avg$8090+2
 27735                           
 27736                           ;Power_Meter.c: 417: }
 27737                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27738                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27739                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27740                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27741  012664  C333  F090         	movff	_RGR_Arr+51,___ftadd@f2
 27742  012668  C334  F091         	movff	_RGR_Arr+52,___ftadd@f2+1
 27743  01266C  C335  F092         	movff	_RGR_Arr+53,___ftadd@f2+2
 27744  012670  C68D  F08D         	movff	_R_PF_Avg$8090,___ftadd@f1
 27745  012674  C68E  F08E         	movff	_R_PF_Avg$8090+1,___ftadd@f1+1
 27746  012678  C68F  F08F         	movff	_R_PF_Avg$8090+2,___ftadd@f1+2
 27747  01267C  ECBE  F0B2         	call	___ftadd	;wreg free
 27748  012680  C08D  F690         	movff	?___ftadd,_R_PF_Avg$8091
 27749  012684  C08E  F691         	movff	?___ftadd+1,_R_PF_Avg$8091+1
 27750  012688  C08F  F692         	movff	?___ftadd+2,_R_PF_Avg$8091+2
 27751                           
 27752                           ;Power_Meter.c: 417: }
 27753                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27754                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27755                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27756                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27757  01268C  C330  F090         	movff	_RGR_Arr+48,___ftadd@f2
 27758  012690  C331  F091         	movff	_RGR_Arr+49,___ftadd@f2+1
 27759  012694  C332  F092         	movff	_RGR_Arr+50,___ftadd@f2+2
 27760  012698  C690  F08D         	movff	_R_PF_Avg$8091,___ftadd@f1
 27761  01269C  C691  F08E         	movff	_R_PF_Avg$8091+1,___ftadd@f1+1
 27762  0126A0  C692  F08F         	movff	_R_PF_Avg$8091+2,___ftadd@f1+2
 27763  0126A4  ECBE  F0B2         	call	___ftadd	;wreg free
 27764  0126A8  C08D  F693         	movff	?___ftadd,_R_PF_Avg$8092
 27765  0126AC  C08E  F694         	movff	?___ftadd+1,_R_PF_Avg$8092+1
 27766  0126B0  C08F  F695         	movff	?___ftadd+2,_R_PF_Avg$8092+2
 27767                           
 27768                           ;Power_Meter.c: 417: }
 27769                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27770                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27771                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27772                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27773  0126B4  C32D  F090         	movff	_RGR_Arr+45,___ftadd@f2
 27774  0126B8  C32E  F091         	movff	_RGR_Arr+46,___ftadd@f2+1
 27775  0126BC  C32F  F092         	movff	_RGR_Arr+47,___ftadd@f2+2
 27776  0126C0  C693  F08D         	movff	_R_PF_Avg$8092,___ftadd@f1
 27777  0126C4  C694  F08E         	movff	_R_PF_Avg$8092+1,___ftadd@f1+1
 27778  0126C8  C695  F08F         	movff	_R_PF_Avg$8092+2,___ftadd@f1+2
 27779  0126CC  ECBE  F0B2         	call	___ftadd	;wreg free
 27780  0126D0  C08D  F696         	movff	?___ftadd,_R_PF_Avg$8093
 27781  0126D4  C08E  F697         	movff	?___ftadd+1,_R_PF_Avg$8093+1
 27782  0126D8  C08F  F698         	movff	?___ftadd+2,_R_PF_Avg$8093+2
 27783                           
 27784                           ;Power_Meter.c: 417: }
 27785                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27786                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27787                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27788                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27789  0126DC  C32A  F090         	movff	_RGR_Arr+42,___ftadd@f2
 27790  0126E0  C32B  F091         	movff	_RGR_Arr+43,___ftadd@f2+1
 27791  0126E4  C32C  F092         	movff	_RGR_Arr+44,___ftadd@f2+2
 27792  0126E8  C696  F08D         	movff	_R_PF_Avg$8093,___ftadd@f1
 27793  0126EC  C697  F08E         	movff	_R_PF_Avg$8093+1,___ftadd@f1+1
 27794  0126F0  C698  F08F         	movff	_R_PF_Avg$8093+2,___ftadd@f1+2
 27795  0126F4  ECBE  F0B2         	call	___ftadd	;wreg free
 27796  0126F8  C08D  F699         	movff	?___ftadd,_R_PF_Avg$8094
 27797  0126FC  C08E  F69A         	movff	?___ftadd+1,_R_PF_Avg$8094+1
 27798  012700  C08F  F69B         	movff	?___ftadd+2,_R_PF_Avg$8094+2
 27799                           
 27800                           ;Power_Meter.c: 417: }
 27801                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27802                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27803                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27804                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27805  012704  C327  F090         	movff	_RGR_Arr+39,___ftadd@f2
 27806  012708  C328  F091         	movff	_RGR_Arr+40,___ftadd@f2+1
 27807  01270C  C329  F092         	movff	_RGR_Arr+41,___ftadd@f2+2
 27808  012710  C699  F08D         	movff	_R_PF_Avg$8094,___ftadd@f1
 27809  012714  C69A  F08E         	movff	_R_PF_Avg$8094+1,___ftadd@f1+1
 27810  012718  C69B  F08F         	movff	_R_PF_Avg$8094+2,___ftadd@f1+2
 27811  01271C  ECBE  F0B2         	call	___ftadd	;wreg free
 27812  012720  C08D  F69C         	movff	?___ftadd,_R_PF_Avg$8095
 27813  012724  C08E  F69D         	movff	?___ftadd+1,_R_PF_Avg$8095+1
 27814  012728  C08F  F69E         	movff	?___ftadd+2,_R_PF_Avg$8095+2
 27815                           
 27816                           ;Power_Meter.c: 417: }
 27817                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27818                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27819                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27820                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27821  01272C  C324  F090         	movff	_RGR_Arr+36,___ftadd@f2
 27822  012730  C325  F091         	movff	_RGR_Arr+37,___ftadd@f2+1
 27823  012734  C326  F092         	movff	_RGR_Arr+38,___ftadd@f2+2
 27824  012738  C69C  F08D         	movff	_R_PF_Avg$8095,___ftadd@f1
 27825  01273C  C69D  F08E         	movff	_R_PF_Avg$8095+1,___ftadd@f1+1
 27826  012740  C69E  F08F         	movff	_R_PF_Avg$8095+2,___ftadd@f1+2
 27827  012744  ECBE  F0B2         	call	___ftadd	;wreg free
 27828  012748  C08D  F69F         	movff	?___ftadd,_R_PF_Avg$8096
 27829  01274C  C08E  F6A0         	movff	?___ftadd+1,_R_PF_Avg$8096+1
 27830  012750  C08F  F6A1         	movff	?___ftadd+2,_R_PF_Avg$8096+2
 27831                           
 27832                           ;Power_Meter.c: 417: }
 27833                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27834                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27835                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27836                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27837  012754  C321  F090         	movff	_RGR_Arr+33,___ftadd@f2
 27838  012758  C322  F091         	movff	_RGR_Arr+34,___ftadd@f2+1
 27839  01275C  C323  F092         	movff	_RGR_Arr+35,___ftadd@f2+2
 27840  012760  C69F  F08D         	movff	_R_PF_Avg$8096,___ftadd@f1
 27841  012764  C6A0  F08E         	movff	_R_PF_Avg$8096+1,___ftadd@f1+1
 27842  012768  C6A1  F08F         	movff	_R_PF_Avg$8096+2,___ftadd@f1+2
 27843  01276C  ECBE  F0B2         	call	___ftadd	;wreg free
 27844  012770  C08D  F6A2         	movff	?___ftadd,_R_PF_Avg$8097
 27845  012774  C08E  F6A3         	movff	?___ftadd+1,_R_PF_Avg$8097+1
 27846  012778  C08F  F6A4         	movff	?___ftadd+2,_R_PF_Avg$8097+2
 27847                           
 27848                           ;Power_Meter.c: 417: }
 27849                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27850                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27851                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27852                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27853  01277C  C31E  F090         	movff	_RGR_Arr+30,___ftadd@f2
 27854  012780  C31F  F091         	movff	_RGR_Arr+31,___ftadd@f2+1
 27855  012784  C320  F092         	movff	_RGR_Arr+32,___ftadd@f2+2
 27856  012788  C6A2  F08D         	movff	_R_PF_Avg$8097,___ftadd@f1
 27857  01278C  C6A3  F08E         	movff	_R_PF_Avg$8097+1,___ftadd@f1+1
 27858  012790  C6A4  F08F         	movff	_R_PF_Avg$8097+2,___ftadd@f1+2
 27859  012794  ECBE  F0B2         	call	___ftadd	;wreg free
 27860  012798  C08D  F6A5         	movff	?___ftadd,_R_PF_Avg$8098
 27861  01279C  C08E  F6A6         	movff	?___ftadd+1,_R_PF_Avg$8098+1
 27862  0127A0  C08F  F6A7         	movff	?___ftadd+2,_R_PF_Avg$8098+2
 27863                           
 27864                           ;Power_Meter.c: 417: }
 27865                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27866                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27867                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27868                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27869  0127A4  C31B  F090         	movff	_RGR_Arr+27,___ftadd@f2
 27870  0127A8  C31C  F091         	movff	_RGR_Arr+28,___ftadd@f2+1
 27871  0127AC  C31D  F092         	movff	_RGR_Arr+29,___ftadd@f2+2
 27872  0127B0  C6A5  F08D         	movff	_R_PF_Avg$8098,___ftadd@f1
 27873  0127B4  C6A6  F08E         	movff	_R_PF_Avg$8098+1,___ftadd@f1+1
 27874  0127B8  C6A7  F08F         	movff	_R_PF_Avg$8098+2,___ftadd@f1+2
 27875  0127BC  ECBE  F0B2         	call	___ftadd	;wreg free
 27876  0127C0  C08D  F6A8         	movff	?___ftadd,_R_PF_Avg$8099
 27877  0127C4  C08E  F6A9         	movff	?___ftadd+1,_R_PF_Avg$8099+1
 27878  0127C8  C08F  F6AA         	movff	?___ftadd+2,_R_PF_Avg$8099+2
 27879                           
 27880                           ;Power_Meter.c: 417: }
 27881                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27882                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27883                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27884                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27885  0127CC  C318  F090         	movff	_RGR_Arr+24,___ftadd@f2
 27886  0127D0  C319  F091         	movff	_RGR_Arr+25,___ftadd@f2+1
 27887  0127D4  C31A  F092         	movff	_RGR_Arr+26,___ftadd@f2+2
 27888  0127D8  C6A8  F08D         	movff	_R_PF_Avg$8099,___ftadd@f1
 27889  0127DC  C6A9  F08E         	movff	_R_PF_Avg$8099+1,___ftadd@f1+1
 27890  0127E0  C6AA  F08F         	movff	_R_PF_Avg$8099+2,___ftadd@f1+2
 27891  0127E4  ECBE  F0B2         	call	___ftadd	;wreg free
 27892  0127E8  C08D  F6AB         	movff	?___ftadd,_R_PF_Avg$8100
 27893  0127EC  C08E  F6AC         	movff	?___ftadd+1,_R_PF_Avg$8100+1
 27894  0127F0  C08F  F6AD         	movff	?___ftadd+2,_R_PF_Avg$8100+2
 27895                           
 27896                           ;Power_Meter.c: 417: }
 27897                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27898                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27899                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27900                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27901  0127F4  C315  F090         	movff	_RGR_Arr+21,___ftadd@f2
 27902  0127F8  C316  F091         	movff	_RGR_Arr+22,___ftadd@f2+1
 27903  0127FC  C317  F092         	movff	_RGR_Arr+23,___ftadd@f2+2
 27904  012800  C6AB  F08D         	movff	_R_PF_Avg$8100,___ftadd@f1
 27905  012804  C6AC  F08E         	movff	_R_PF_Avg$8100+1,___ftadd@f1+1
 27906  012808  C6AD  F08F         	movff	_R_PF_Avg$8100+2,___ftadd@f1+2
 27907  01280C  ECBE  F0B2         	call	___ftadd	;wreg free
 27908  012810  C08D  F6AE         	movff	?___ftadd,_R_PF_Avg$8101
 27909  012814  C08E  F6AF         	movff	?___ftadd+1,_R_PF_Avg$8101+1
 27910  012818  C08F  F6B0         	movff	?___ftadd+2,_R_PF_Avg$8101+2
 27911                           
 27912                           ;Power_Meter.c: 417: }
 27913                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27914                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27915                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27916                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27917  01281C  C312  F090         	movff	_RGR_Arr+18,___ftadd@f2
 27918  012820  C313  F091         	movff	_RGR_Arr+19,___ftadd@f2+1
 27919  012824  C314  F092         	movff	_RGR_Arr+20,___ftadd@f2+2
 27920  012828  C6AE  F08D         	movff	_R_PF_Avg$8101,___ftadd@f1
 27921  01282C  C6AF  F08E         	movff	_R_PF_Avg$8101+1,___ftadd@f1+1
 27922  012830  C6B0  F08F         	movff	_R_PF_Avg$8101+2,___ftadd@f1+2
 27923  012834  ECBE  F0B2         	call	___ftadd	;wreg free
 27924  012838  C08D  F6B1         	movff	?___ftadd,_R_PF_Avg$8102
 27925  01283C  C08E  F6B2         	movff	?___ftadd+1,_R_PF_Avg$8102+1
 27926  012840  C08F  F6B3         	movff	?___ftadd+2,_R_PF_Avg$8102+2
 27927                           
 27928                           ;Power_Meter.c: 417: }
 27929                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27930                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27931                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27932                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27933  012844  C30F  F090         	movff	_RGR_Arr+15,___ftadd@f2
 27934  012848  C310  F091         	movff	_RGR_Arr+16,___ftadd@f2+1
 27935  01284C  C311  F092         	movff	_RGR_Arr+17,___ftadd@f2+2
 27936  012850  C6B1  F08D         	movff	_R_PF_Avg$8102,___ftadd@f1
 27937  012854  C6B2  F08E         	movff	_R_PF_Avg$8102+1,___ftadd@f1+1
 27938  012858  C6B3  F08F         	movff	_R_PF_Avg$8102+2,___ftadd@f1+2
 27939  01285C  ECBE  F0B2         	call	___ftadd	;wreg free
 27940  012860  C08D  F6B4         	movff	?___ftadd,_R_PF_Avg$8103
 27941  012864  C08E  F6B5         	movff	?___ftadd+1,_R_PF_Avg$8103+1
 27942  012868  C08F  F6B6         	movff	?___ftadd+2,_R_PF_Avg$8103+2
 27943                           
 27944                           ;Power_Meter.c: 417: }
 27945                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27946                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27947                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27948                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27949  01286C  C30C  F090         	movff	_RGR_Arr+12,___ftadd@f2
 27950  012870  C30D  F091         	movff	_RGR_Arr+13,___ftadd@f2+1
 27951  012874  C30E  F092         	movff	_RGR_Arr+14,___ftadd@f2+2
 27952  012878  C6B4  F08D         	movff	_R_PF_Avg$8103,___ftadd@f1
 27953  01287C  C6B5  F08E         	movff	_R_PF_Avg$8103+1,___ftadd@f1+1
 27954  012880  C6B6  F08F         	movff	_R_PF_Avg$8103+2,___ftadd@f1+2
 27955  012884  ECBE  F0B2         	call	___ftadd	;wreg free
 27956  012888  C08D  F6B7         	movff	?___ftadd,_R_PF_Avg$8104
 27957  01288C  C08E  F6B8         	movff	?___ftadd+1,_R_PF_Avg$8104+1
 27958  012890  C08F  F6B9         	movff	?___ftadd+2,_R_PF_Avg$8104+2
 27959                           
 27960                           ;Power_Meter.c: 417: }
 27961                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27962                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27963                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27964                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27965  012894  C309  F090         	movff	_RGR_Arr+9,___ftadd@f2
 27966  012898  C30A  F091         	movff	_RGR_Arr+10,___ftadd@f2+1
 27967  01289C  C30B  F092         	movff	_RGR_Arr+11,___ftadd@f2+2
 27968  0128A0  C6B7  F08D         	movff	_R_PF_Avg$8104,___ftadd@f1
 27969  0128A4  C6B8  F08E         	movff	_R_PF_Avg$8104+1,___ftadd@f1+1
 27970  0128A8  C6B9  F08F         	movff	_R_PF_Avg$8104+2,___ftadd@f1+2
 27971  0128AC  ECBE  F0B2         	call	___ftadd	;wreg free
 27972  0128B0  C08D  F6BA         	movff	?___ftadd,_R_PF_Avg$8105
 27973  0128B4  C08E  F6BB         	movff	?___ftadd+1,_R_PF_Avg$8105+1
 27974  0128B8  C08F  F6BC         	movff	?___ftadd+2,_R_PF_Avg$8105+2
 27975                           
 27976                           ;Power_Meter.c: 417: }
 27977                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27978                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27979                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27980                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27981  0128BC  C306  F090         	movff	_RGR_Arr+6,___ftadd@f2
 27982  0128C0  C307  F091         	movff	_RGR_Arr+7,___ftadd@f2+1
 27983  0128C4  C308  F092         	movff	_RGR_Arr+8,___ftadd@f2+2
 27984  0128C8  C6BA  F08D         	movff	_R_PF_Avg$8105,___ftadd@f1
 27985  0128CC  C6BB  F08E         	movff	_R_PF_Avg$8105+1,___ftadd@f1+1
 27986  0128D0  C6BC  F08F         	movff	_R_PF_Avg$8105+2,___ftadd@f1+2
 27987  0128D4  ECBE  F0B2         	call	___ftadd	;wreg free
 27988  0128D8  C08D  F6BD         	movff	?___ftadd,_R_PF_Avg$8106
 27989  0128DC  C08E  F6BE         	movff	?___ftadd+1,_R_PF_Avg$8106+1
 27990  0128E0  C08F  F6BF         	movff	?___ftadd+2,_R_PF_Avg$8106+2
 27991                           
 27992                           ;Power_Meter.c: 417: }
 27993                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27994                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27995                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27996                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27997  0128E4  C303  F090         	movff	_RGR_Arr+3,___ftadd@f2
 27998  0128E8  C304  F091         	movff	_RGR_Arr+4,___ftadd@f2+1
 27999  0128EC  C305  F092         	movff	_RGR_Arr+5,___ftadd@f2+2
 28000  0128F0  C6BD  F08D         	movff	_R_PF_Avg$8106,___ftadd@f1
 28001  0128F4  C6BE  F08E         	movff	_R_PF_Avg$8106+1,___ftadd@f1+1
 28002  0128F8  C6BF  F08F         	movff	_R_PF_Avg$8106+2,___ftadd@f1+2
 28003  0128FC  ECBE  F0B2         	call	___ftadd	;wreg free
 28004  012900  C08D  F6C0         	movff	?___ftadd,_R_PF_Avg$8107
 28005  012904  C08E  F6C1         	movff	?___ftadd+1,_R_PF_Avg$8107+1
 28006  012908  C08F  F6C2         	movff	?___ftadd+2,_R_PF_Avg$8107+2
 28007                           
 28008                           ;Power_Meter.c: 417: }
 28009                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 28010                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 28011                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 28012                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 28013  01290C  C6C0  F08D         	movff	_R_PF_Avg$8107,___ftadd@f1
 28014  012910  C6C1  F08E         	movff	_R_PF_Avg$8107+1,___ftadd@f1+1
 28015  012914  C6C2  F08F         	movff	_R_PF_Avg$8107+2,___ftadd@f1+2
 28016  012918  C300  F090         	movff	_RGR_Arr,___ftadd@f2
 28017  01291C  C301  F091         	movff	_RGR_Arr+1,___ftadd@f2+1
 28018  012920  C302  F092         	movff	_RGR_Arr+2,___ftadd@f2+2
 28019  012924  ECBE  F0B2         	call	___ftadd	;wreg free
 28020  012928  C08D  F2EA         	movff	?___ftadd,_RGR_Avg
 28021  01292C  C08E  F2EB         	movff	?___ftadd+1,_RGR_Avg+1
 28022  012930  C08F  F2EC         	movff	?___ftadd+2,_RGR_Avg+2
 28023                           
 28024                           ;Power_Meter.c: 424: RGR_Avg = (RGR_Avg / 30);
 28025  012934  C2EA  F0A5         	movff	_RGR_Avg,___ftdiv@f1
 28026  012938  C2EB  F0A6         	movff	_RGR_Avg+1,___ftdiv@f1+1
 28027  01293C  C2EC  F0A7         	movff	_RGR_Avg+2,___ftdiv@f1+2
 28028  012940  0E00               	movlw	0
 28029  012942  0100               	movlb	0	; () banked
 28030  012944  6FA8               	movwf	___ftdiv@f2& (0+255),b
 28031  012946  0EF0               	movlw	240
 28032  012948  0100               	movlb	0	; () banked
 28033  01294A  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 28034  01294C  0E41               	movlw	65
 28035  01294E  0100               	movlb	0	; () banked
 28036  012950  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 28037  012952  ECAF  F0C1         	call	___ftdiv	;wreg free
 28038  012956  C0A5  F2EA         	movff	?___ftdiv,_RGR_Avg
 28039  01295A  C0A6  F2EB         	movff	?___ftdiv+1,_RGR_Avg+1
 28040  01295E  C0A7  F2EC         	movff	?___ftdiv+2,_RGR_Avg+2
 28041                           
 28042                           ;Power_Meter.c: 425: R_Rad = ((RGR_Avg * 2 * 3.1412) - (0.575959));
 28043  012962  0E09               	movlw	9
 28044  012964  0100               	movlb	0	; () banked
 28045  012966  6F77               	movwf	___ftmul@f2& (0+255),b
 28046  012968  0EC9               	movlw	201
 28047  01296A  0100               	movlb	0	; () banked
 28048  01296C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 28049  01296E  0E40               	movlw	64
 28050  012970  0100               	movlb	0	; () banked
 28051  012972  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 28052  012974  C2EA  F074         	movff	_RGR_Avg,___ftmul@f1
 28053  012978  C2EB  F075         	movff	_RGR_Avg+1,___ftmul@f1+1
 28054  01297C  C2EC  F076         	movff	_RGR_Avg+2,___ftmul@f1+2
 28055  012980  EC00  F0C1         	call	___ftmul	;wreg free
 28056  012984  C074  F08D         	movff	?___ftmul,___ftadd@f1
 28057  012988  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 28058  01298C  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 28059  012990  0E72               	movlw	114
 28060  012992  0100               	movlb	0	; () banked
 28061  012994  6F90               	movwf	___ftadd@f2& (0+255),b
 28062  012996  0E13               	movlw	19
 28063  012998  0100               	movlb	0	; () banked
 28064  01299A  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 28065  01299C  0EBF               	movlw	191
 28066  01299E  0100               	movlb	0	; () banked
 28067  0129A0  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 28068  0129A2  ECBE  F0B2         	call	___ftadd	;wreg free
 28069  0129A6  C08D  F597         	movff	?___ftadd,_R_Rad
 28070  0129AA  C08E  F598         	movff	?___ftadd+1,_R_Rad+1
 28071  0129AE  C08F  F599         	movff	?___ftadd+2,_R_Rad+2
 28072                           
 28073                           ;Power_Meter.c: 426: R_Power_Factor = (cos(R_Rad));
 28074  0129B2  C597  F0C1         	movff	_R_Rad,cos@f
 28075  0129B6  C598  F0C2         	movff	_R_Rad+1,cos@f+1
 28076  0129BA  C599  F0C3         	movff	_R_Rad+2,cos@f+2
 28077  0129BE  EC10  F0CC         	call	_cos	;wreg free
 28078  0129C2  C0C1  F594         	movff	?_cos,_R_Power_Factor
 28079  0129C6  C0C2  F595         	movff	?_cos+1,_R_Power_Factor+1
 28080  0129CA  C0C3  F596         	movff	?_cos+2,_R_Power_Factor+2
 28081  0129CE  0012               	return		;funcret
 28082  0129D0                     __end_of_R_PF_Avg:
 28083                           	opt stack 0
 28084                           tblptru	equ	0xFF8
 28085                           tblptrh	equ	0xFF7
 28086                           tblptrl	equ	0xFF6
 28087                           tablat	equ	0xFF5
 28088                           prodh	equ	0xFF4
 28089                           prodl	equ	0xFF3
 28090                           intcon	equ	0xFF2
 28091                           postinc0	equ	0xFEE
 28092                           wreg	equ	0xFE8
 28093                           postdec1	equ	0xFE5
 28094                           fsr1h	equ	0xFE2
 28095                           fsr1l	equ	0xFE1
 28096                           indf2	equ	0xFDF
 28097                           postinc2	equ	0xFDE
 28098                           postdec2	equ	0xFDD
 28099                           fsr2h	equ	0xFDA
 28100                           fsr2l	equ	0xFD9
 28101                           status	equ	0xFD8
 28102                           
 28103 ;; *************** function _RTC_Init *****************
 28104 ;; Defined at:
 28105 ;;		line 22 in file "RTC.c"
 28106 ;; Parameters:    Size  Location     Type
 28107 ;;		None
 28108 ;; Auto vars:     Size  Location     Type
 28109 ;;		None
 28110 ;; Return value:  Size  Location     Type
 28111 ;;                  1    wreg      void 
 28112 ;; Registers used:
 28113 ;;		wreg, status,2, status,0, cstack
 28114 ;; Tracked objects:
 28115 ;;		On entry : 0/0
 28116 ;;		On exit  : 0/0
 28117 ;;		Unchanged: 0/0
 28118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28123 ;;Total ram usage:        0 bytes
 28124 ;; Hardware stack levels used:    1
 28125 ;; Hardware stack levels required when called:    5
 28126 ;; This function calls:
 28127 ;;		_I2C_Init
 28128 ;;		_I2C_Start
 28129 ;;		_I2C_Stop
 28130 ;;		_I2C_Write
 28131 ;; This function is called by:
 28132 ;;		_main
 28133 ;; This function uses a non-reentrant model
 28134 ;;
 28135                           
 28136                           	psect	text92
 28137  01B02A                     __ptext92:
 28138                           	opt stack 0
 28139  01B02A                     _RTC_Init:
 28140                           	opt stack 25
 28141                           
 28142                           ;RTC.c: 24: I2C_Init();
 28143                           
 28144                           ;incstack = 0
 28145  01B02A  EC59  F0D8         	call	_I2C_Init	;wreg free
 28146                           
 28147                           ;RTC.c: 25: I2C_Start();
 28148  01B02E  ECCF  F0D8         	call	_I2C_Start	;wreg free
 28149                           
 28150                           ;RTC.c: 27: I2C_Write(0xD0u);
 28151  01B032  0ED0               	movlw	208
 28152  01B034  EC47  F0D8         	call	_I2C_Write
 28153                           
 28154                           ;RTC.c: 28: I2C_Write(0x07u);
 28155  01B038  0E07               	movlw	7
 28156  01B03A  EC47  F0D8         	call	_I2C_Write
 28157                           
 28158                           ;RTC.c: 30: I2C_Write(0x00);
 28159  01B03E  0E00               	movlw	0
 28160  01B040  EC47  F0D8         	call	_I2C_Write
 28161                           
 28162                           ;RTC.c: 32: I2C_Stop();
 28163  01B044  ECCB  F0D8         	call	_I2C_Stop	;wreg free
 28164  01B048  0012               	return		;funcret
 28165  01B04A                     __end_of_RTC_Init:
 28166                           	opt stack 0
 28167                           tblptru	equ	0xFF8
 28168                           tblptrh	equ	0xFF7
 28169                           tblptrl	equ	0xFF6
 28170                           tablat	equ	0xFF5
 28171                           prodh	equ	0xFF4
 28172                           prodl	equ	0xFF3
 28173                           intcon	equ	0xFF2
 28174                           postinc0	equ	0xFEE
 28175                           wreg	equ	0xFE8
 28176                           postdec1	equ	0xFE5
 28177                           fsr1h	equ	0xFE2
 28178                           fsr1l	equ	0xFE1
 28179                           indf2	equ	0xFDF
 28180                           postinc2	equ	0xFDE
 28181                           postdec2	equ	0xFDD
 28182                           fsr2h	equ	0xFDA
 28183                           fsr2l	equ	0xFD9
 28184                           status	equ	0xFD8
 28185                           
 28186 ;; *************** function _I2C_Write *****************
 28187 ;; Defined at:
 28188 ;;		line 109 in file "RTC.c"
 28189 ;; Parameters:    Size  Location     Type
 28190 ;;  v_i2cData_u8    1    wreg     unsigned char 
 28191 ;; Auto vars:     Size  Location     Type
 28192 ;;  v_i2cData_u8    1    0[BANK0 ] unsigned char 
 28193 ;; Return value:  Size  Location     Type
 28194 ;;                  1    wreg      void 
 28195 ;; Registers used:
 28196 ;;		wreg, cstack
 28197 ;; Tracked objects:
 28198 ;;		On entry : 0/0
 28199 ;;		On exit  : 0/0
 28200 ;;		Unchanged: 0/0
 28201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28205 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28206 ;;Total ram usage:        1 bytes
 28207 ;; Hardware stack levels used:    1
 28208 ;; Hardware stack levels required when called:    4
 28209 ;; This function calls:
 28210 ;;		_i2c_WaitForIdle
 28211 ;; This function is called by:
 28212 ;;		_RTC_Init
 28213 ;;		_RTC_GetDateTime
 28214 ;;		_RTC_SetDateTime
 28215 ;; This function uses a non-reentrant model
 28216 ;;
 28217                           
 28218                           	psect	text93
 28219  01B08E                     __ptext93:
 28220                           	opt stack 0
 28221  01B08E                     _I2C_Write:
 28222                           	opt stack 23
 28223                           
 28224                           ;incstack = 0
 28225                           ;I2C_Write@v_i2cData_u8 stored from wreg
 28226  01B08E  0100               	movlb	0	; () banked
 28227  01B090  6F60               	movwf	I2C_Write@v_i2cData_u8& (0+255),b
 28228                           
 28229                           ;RTC.c: 113: SSP1BUF = v_i2cData_u8;
 28230  01B092  C060  FFC9         	movff	I2C_Write@v_i2cData_u8,4041	;volatile
 28231  01B096                     l1016:
 28232  01B096  B0C7               	btfsc	4039,0,c	;volatile
 28233  01B098  D7FE               	goto	l1016
 28234                           
 28235                           ;RTC.c: 115: i2c_WaitForIdle();
 28236  01B09A  EC50  F0D8         	call	_i2c_WaitForIdle	;wreg free
 28237  01B09E  0012               	return		;funcret
 28238  01B0A0                     __end_of_I2C_Write:
 28239                           	opt stack 0
 28240                           tblptru	equ	0xFF8
 28241                           tblptrh	equ	0xFF7
 28242                           tblptrl	equ	0xFF6
 28243                           tablat	equ	0xFF5
 28244                           prodh	equ	0xFF4
 28245                           prodl	equ	0xFF3
 28246                           intcon	equ	0xFF2
 28247                           postinc0	equ	0xFEE
 28248                           wreg	equ	0xFE8
 28249                           postdec1	equ	0xFE5
 28250                           fsr1h	equ	0xFE2
 28251                           fsr1l	equ	0xFE1
 28252                           indf2	equ	0xFDF
 28253                           postinc2	equ	0xFDE
 28254                           postdec2	equ	0xFDD
 28255                           fsr2h	equ	0xFDA
 28256                           fsr2l	equ	0xFD9
 28257                           status	equ	0xFD8
 28258                           
 28259 ;; *************** function _i2c_WaitForIdle *****************
 28260 ;; Defined at:
 28261 ;;		line 117 in file "RTC.c"
 28262 ;; Parameters:    Size  Location     Type
 28263 ;;		None
 28264 ;; Auto vars:     Size  Location     Type
 28265 ;;		None
 28266 ;; Return value:  Size  Location     Type
 28267 ;;                  1    wreg      void 
 28268 ;; Registers used:
 28269 ;;		None
 28270 ;; Tracked objects:
 28271 ;;		On entry : 0/0
 28272 ;;		On exit  : 0/0
 28273 ;;		Unchanged: 0/0
 28274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28279 ;;Total ram usage:        0 bytes
 28280 ;; Hardware stack levels used:    1
 28281 ;; Hardware stack levels required when called:    3
 28282 ;; This function calls:
 28283 ;;		Nothing
 28284 ;; This function is called by:
 28285 ;;		_I2C_Read
 28286 ;;		_I2C_Write
 28287 ;; This function uses a non-reentrant model
 28288 ;;
 28289                           
 28290                           	psect	text94
 28291  01B0A0                     __ptext94:
 28292                           	opt stack 0
 28293  01B0A0                     _i2c_WaitForIdle:
 28294                           	opt stack 23
 28295  01B0A0                     l1022:
 28296  01B0A0  A0C5               	btfss	4037,0,c	;volatile
 28297  01B0A2  B2C5               	btfsc	4037,1,c	;volatile
 28298  01B0A4  D7FD               	goto	l1022
 28299  01B0A6  A4C5               	btfss	4037,2,c	;volatile
 28300  01B0A8  B6C5               	btfsc	4037,3,c	;volatile
 28301  01B0AA  D7FA               	goto	l1022
 28302  01B0AC  A4C7               	btfss	4039,2,c	;volatile
 28303  01B0AE  0012               	return	
 28304  01B0B0  D7F7               	goto	l1022
 28305  01B0B2                     __end_of_i2c_WaitForIdle:
 28306                           	opt stack 0
 28307                           tblptru	equ	0xFF8
 28308                           tblptrh	equ	0xFF7
 28309                           tblptrl	equ	0xFF6
 28310                           tablat	equ	0xFF5
 28311                           prodh	equ	0xFF4
 28312                           prodl	equ	0xFF3
 28313                           intcon	equ	0xFF2
 28314                           postinc0	equ	0xFEE
 28315                           wreg	equ	0xFE8
 28316                           postdec1	equ	0xFE5
 28317                           fsr1h	equ	0xFE2
 28318                           fsr1l	equ	0xFE1
 28319                           indf2	equ	0xFDF
 28320                           postinc2	equ	0xFDE
 28321                           postdec2	equ	0xFDD
 28322                           fsr2h	equ	0xFDA
 28323                           fsr2l	equ	0xFD9
 28324                           status	equ	0xFD8
 28325                           
 28326 ;; *************** function _I2C_Stop *****************
 28327 ;; Defined at:
 28328 ;;		line 140 in file "RTC.c"
 28329 ;; Parameters:    Size  Location     Type
 28330 ;;		None
 28331 ;; Auto vars:     Size  Location     Type
 28332 ;;		None
 28333 ;; Return value:  Size  Location     Type
 28334 ;;                  1    wreg      void 
 28335 ;; Registers used:
 28336 ;;		None
 28337 ;; Tracked objects:
 28338 ;;		On entry : 0/0
 28339 ;;		On exit  : 0/0
 28340 ;;		Unchanged: 0/0
 28341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28346 ;;Total ram usage:        0 bytes
 28347 ;; Hardware stack levels used:    1
 28348 ;; Hardware stack levels required when called:    3
 28349 ;; This function calls:
 28350 ;;		Nothing
 28351 ;; This function is called by:
 28352 ;;		_RTC_Init
 28353 ;;		_RTC_GetDateTime
 28354 ;;		_RTC_SetDateTime
 28355 ;; This function uses a non-reentrant model
 28356 ;;
 28357                           
 28358                           	psect	text95
 28359  01B196                     __ptext95:
 28360                           	opt stack 0
 28361  01B196                     _I2C_Stop:
 28362                           	opt stack 24
 28363                           
 28364                           ;RTC.c: 142: SSP1CON2bits.PEN = 1;
 28365                           
 28366                           ;incstack = 0
 28367  01B196  84C5               	bsf	4037,2,c	;volatile
 28368  01B198                     l1046:
 28369  01B198  A4C5               	btfss	4037,2,c	;volatile
 28370  01B19A  0012               	return	
 28371  01B19C  D7FD               	goto	l1046
 28372  01B19E                     __end_of_I2C_Stop:
 28373                           	opt stack 0
 28374                           tblptru	equ	0xFF8
 28375                           tblptrh	equ	0xFF7
 28376                           tblptrl	equ	0xFF6
 28377                           tablat	equ	0xFF5
 28378                           prodh	equ	0xFF4
 28379                           prodl	equ	0xFF3
 28380                           intcon	equ	0xFF2
 28381                           postinc0	equ	0xFEE
 28382                           wreg	equ	0xFE8
 28383                           postdec1	equ	0xFE5
 28384                           fsr1h	equ	0xFE2
 28385                           fsr1l	equ	0xFE1
 28386                           indf2	equ	0xFDF
 28387                           postinc2	equ	0xFDE
 28388                           postdec2	equ	0xFDD
 28389                           fsr2h	equ	0xFDA
 28390                           fsr2l	equ	0xFD9
 28391                           status	equ	0xFD8
 28392                           
 28393 ;; *************** function _I2C_Start *****************
 28394 ;; Defined at:
 28395 ;;		line 134 in file "RTC.c"
 28396 ;; Parameters:    Size  Location     Type
 28397 ;;		None
 28398 ;; Auto vars:     Size  Location     Type
 28399 ;;		None
 28400 ;; Return value:  Size  Location     Type
 28401 ;;                  1    wreg      void 
 28402 ;; Registers used:
 28403 ;;		None
 28404 ;; Tracked objects:
 28405 ;;		On entry : 0/0
 28406 ;;		On exit  : 0/0
 28407 ;;		Unchanged: 0/0
 28408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28413 ;;Total ram usage:        0 bytes
 28414 ;; Hardware stack levels used:    1
 28415 ;; Hardware stack levels required when called:    3
 28416 ;; This function calls:
 28417 ;;		Nothing
 28418 ;; This function is called by:
 28419 ;;		_RTC_Init
 28420 ;;		_RTC_GetDateTime
 28421 ;;		_RTC_SetDateTime
 28422 ;; This function uses a non-reentrant model
 28423 ;;
 28424                           
 28425                           	psect	text96
 28426  01B19E                     __ptext96:
 28427                           	opt stack 0
 28428  01B19E                     _I2C_Start:
 28429                           	opt stack 24
 28430                           
 28431                           ;RTC.c: 136: SSP1CON2bits.SEN = 1;
 28432                           
 28433                           ;incstack = 0
 28434  01B19E  80C5               	bsf	4037,0,c	;volatile
 28435  01B1A0                     l1040:
 28436  01B1A0  A0C5               	btfss	4037,0,c	;volatile
 28437  01B1A2  0012               	return	
 28438  01B1A4  D7FD               	goto	l1040
 28439  01B1A6                     __end_of_I2C_Start:
 28440                           	opt stack 0
 28441                           tblptru	equ	0xFF8
 28442                           tblptrh	equ	0xFF7
 28443                           tblptrl	equ	0xFF6
 28444                           tablat	equ	0xFF5
 28445                           prodh	equ	0xFF4
 28446                           prodl	equ	0xFF3
 28447                           intcon	equ	0xFF2
 28448                           postinc0	equ	0xFEE
 28449                           wreg	equ	0xFE8
 28450                           postdec1	equ	0xFE5
 28451                           fsr1h	equ	0xFE2
 28452                           fsr1l	equ	0xFE1
 28453                           indf2	equ	0xFDF
 28454                           postinc2	equ	0xFDE
 28455                           postdec2	equ	0xFDD
 28456                           fsr2h	equ	0xFDA
 28457                           fsr2l	equ	0xFD9
 28458                           status	equ	0xFD8
 28459                           
 28460 ;; *************** function _I2C_Init *****************
 28461 ;; Defined at:
 28462 ;;		line 75 in file "RTC.c"
 28463 ;; Parameters:    Size  Location     Type
 28464 ;;		None
 28465 ;; Auto vars:     Size  Location     Type
 28466 ;;		None
 28467 ;; Return value:  Size  Location     Type
 28468 ;;                  1    wreg      void 
 28469 ;; Registers used:
 28470 ;;		wreg, status,2, status,0
 28471 ;; Tracked objects:
 28472 ;;		On entry : 0/0
 28473 ;;		On exit  : 0/0
 28474 ;;		Unchanged: 0/0
 28475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28480 ;;Total ram usage:        0 bytes
 28481 ;; Hardware stack levels used:    1
 28482 ;; Hardware stack levels required when called:    3
 28483 ;; This function calls:
 28484 ;;		Nothing
 28485 ;; This function is called by:
 28486 ;;		_RTC_Init
 28487 ;; This function uses a non-reentrant model
 28488 ;;
 28489                           
 28490                           	psect	text97
 28491  01B0B2                     __ptext97:
 28492                           	opt stack 0
 28493  01B0B2                     _I2C_Init:
 28494                           	opt stack 26
 28495                           
 28496                           ;RTC.c: 77: TRISC3 = 1;
 28497                           
 28498                           ;incstack = 0
 28499  01B0B2  8694               	bsf	3988,3,c	;volatile
 28500                           
 28501                           ;RTC.c: 78: TRISC4 = 1;
 28502  01B0B4  8894               	bsf	3988,4,c	;volatile
 28503                           
 28504                           ;RTC.c: 80: SSP1STAT |= 0x80;
 28505  01B0B6  8EC7               	bsf	4039,7,c	;volatile
 28506                           
 28507                           ;RTC.c: 81: SSP1CON1 = 0x28;
 28508  01B0B8  0E28               	movlw	40
 28509  01B0BA  6EC6               	movwf	4038,c	;volatile
 28510                           
 28511                           ;RTC.c: 82: SSP1ADD = 24;
 28512  01B0BC  0E18               	movlw	24
 28513  01B0BE  6EC8               	movwf	4040,c	;volatile
 28514  01B0C0  0012               	return		;funcret
 28515  01B0C2                     __end_of_I2C_Init:
 28516                           	opt stack 0
 28517                           tblptru	equ	0xFF8
 28518                           tblptrh	equ	0xFF7
 28519                           tblptrl	equ	0xFF6
 28520                           tablat	equ	0xFF5
 28521                           prodh	equ	0xFF4
 28522                           prodl	equ	0xFF3
 28523                           intcon	equ	0xFF2
 28524                           postinc0	equ	0xFEE
 28525                           wreg	equ	0xFE8
 28526                           postdec1	equ	0xFE5
 28527                           fsr1h	equ	0xFE2
 28528                           fsr1l	equ	0xFE1
 28529                           indf2	equ	0xFDF
 28530                           postinc2	equ	0xFDE
 28531                           postdec2	equ	0xFDD
 28532                           fsr2h	equ	0xFDA
 28533                           fsr2l	equ	0xFD9
 28534                           status	equ	0xFD8
 28535                           
 28536 ;; *************** function _RS485_Data_communication *****************
 28537 ;; Defined at:
 28538 ;;		line 25 in file "RS485_COMMUNICATION.c"
 28539 ;; Parameters:    Size  Location     Type
 28540 ;;		None
 28541 ;; Auto vars:     Size  Location     Type
 28542 ;;		None
 28543 ;; Return value:  Size  Location     Type
 28544 ;;                  2   80[None  ] int 
 28545 ;; Registers used:
 28546 ;;		wreg, status,2, status,0, cstack
 28547 ;; Tracked objects:
 28548 ;;		On entry : 0/0
 28549 ;;		On exit  : 0/0
 28550 ;;		Unchanged: 0/0
 28551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28555 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28556 ;;Total ram usage:        1 bytes
 28557 ;; Hardware stack levels used:    1
 28558 ;; Hardware stack levels required when called:    4
 28559 ;; This function calls:
 28560 ;;		_usart2_init
 28561 ;;		_usart_str_2
 28562 ;; This function is called by:
 28563 ;;		_main
 28564 ;; This function uses a non-reentrant model
 28565 ;;
 28566                           
 28567                           	psect	text98
 28568  01A1F0                     __ptext98:
 28569                           	opt stack 0
 28570  01A1F0                     _RS485_Data_communication:
 28571                           	opt stack 26
 28572                           
 28573                           ;RS485_COMMUNICATION.c: 27: if(Serial_No == 8)
 28574                           
 28575                           ;incstack = 0
 28576  01A1F0  0E08               	movlw	8
 28577  01A1F2  0100               	movlb	0	; () banked
 28578  01A1F4  19DF               	xorwf	_Serial_No& (0+255),w,b
 28579  01A1F6  0100               	movlb	0	; () banked
 28580  01A1F8  11E0               	iorwf	(_Serial_No+1)& (0+255),w,b
 28581  01A1FA  B4D8               	btfsc	status,2,c
 28582                           
 28583                           ; BSR set to: 0
 28584                           ;RS485_COMMUNICATION.c: 28: {
 28585                           ;RS485_COMMUNICATION.c: 29: usart2_init();
 28586  01A1FC  EC05  F0D7         	call	_usart2_init	;wreg free
 28587                           
 28588                           ;RS485_COMMUNICATION.c: 30: }
 28589                           ;RS485_COMMUNICATION.c: 31: if(Timer0_Falg2 == 1 && Serial_No > 8)
 28590  01A200  0101               	movlb	1	; () banked
 28591  01A202  0584               	decf	_Timer0_Falg2& (0+255),w,b
 28592  01A204  A4D8               	btfss	status,2,c
 28593  01A206  0012               	return	
 28594                           
 28595                           ; BSR set to: 1
 28596  01A208  0100               	movlb	0	; () banked
 28597  01A20A  51E0               	movf	(_Serial_No+1)& (0+255),w,b
 28598  01A20C  E105               	bnz	u17840
 28599  01A20E  0E09               	movlw	9
 28600  01A210  0100               	movlb	0	; () banked
 28601  01A212  5DDF               	subwf	_Serial_No& (0+255),w,b
 28602  01A214  A0D8               	btfss	status,0,c
 28603  01A216  0012               	return	
 28604  01A218                     u17840:
 28605                           
 28606                           ; BSR set to: 0
 28607                           ;RS485_COMMUNICATION.c: 32: {
 28608                           ;RS485_COMMUNICATION.c: 33: Timer0_Falg2 = 0;
 28609  01A218  0E00               	movlw	0
 28610  01A21A  0101               	movlb	1	; () banked
 28611  01A21C  6F84               	movwf	_Timer0_Falg2& (0+255),b
 28612                           
 28613                           ; BSR set to: 1
 28614                           ;RS485_COMMUNICATION.c: 34: Communication_OTP++;
 28615  01A21E  2A15               	incf	_Communication_OTP,f,c
 28616                           
 28617                           ; BSR set to: 1
 28618                           ;RS485_COMMUNICATION.c: 35: if(Communication_OTP == 0 || Communication_OTP == 255)
 28619  01A220  5015               	movf	_Communication_OTP,w,c
 28620  01A222  B4D8               	btfsc	status,2,c
 28621  01A224  D003               	goto	l23066
 28622                           
 28623                           ; BSR set to: 1
 28624  01A226  2815               	incf	_Communication_OTP,w,c
 28625  01A228  A4D8               	btfss	status,2,c
 28626  01A22A  D002               	goto	l23068
 28627  01A22C                     l23066:
 28628                           
 28629                           ; BSR set to: 1
 28630                           ;RS485_COMMUNICATION.c: 36: {
 28631                           ;RS485_COMMUNICATION.c: 37: Communication_OTP = 1;
 28632  01A22C  0E01               	movlw	1
 28633  01A22E  6E15               	movwf	_Communication_OTP,c
 28634  01A230                     l23068:
 28635                           
 28636                           ; BSR set to: 1
 28637                           ;RS485_COMMUNICATION.c: 38: }
 28638                           ;RS485_COMMUNICATION.c: 39: RE0 = 1;
 28639  01A230  8084               	bsf	3972,0,c	;volatile
 28640                           
 28641                           ;RS485_COMMUNICATION.c: 40: RS485_Data_Flag = 1;
 28642  01A232  0E01               	movlw	1
 28643  01A234  0101               	movlb	1	; () banked
 28644  01A236  6F77               	movwf	_RS485_Data_Flag& (0+255),b
 28645                           
 28646                           ;RS485_COMMUNICATION.c: 41: counter_1 = 0;
 28647  01A238  0E00               	movlw	0
 28648  01A23A  0100               	movlb	0	; () banked
 28649  01A23C  6FF3               	movwf	_counter_1& (0+255),b
 28650                           
 28651                           ;RS485_COMMUNICATION.c: 42: Data_1[0] = 0;
 28652  01A23E  0E00               	movlw	0
 28653  01A240  0105               	movlb	5	; () banked
 28654  01A242  6F01               	movwf	(_Data_1+1)& (0+255),b
 28655  01A244  0E00               	movlw	0
 28656  01A246  6F00               	movwf	_Data_1& (0+255),b
 28657                           
 28658                           ; BSR set to: 5
 28659                           ;RS485_COMMUNICATION.c: 44: _delay((unsigned long)((15)*(8000000/4000.0)));
 28660  01A248  0E27               	movlw	39
 28661  01A24A  0100               	movlb	0	; () banked
 28662  01A24C  6F61               	movwf	??_RS485_Data_communication& (0+255),b
 28663  01A24E  0EF5               	movlw	245
 28664  01A250                     u18037:
 28665  01A250  2EE8               	decfsz	wreg,f,c
 28666  01A252  D7FE               	goto	u18037
 28667  01A254  2F61               	decfsz	??_RS485_Data_communication& (0+255),f,b
 28668  01A256  D7FC               	goto	u18037
 28669  01A258  F000               	nop	
 28670                           
 28671                           ;RS485_COMMUNICATION.c: 45: usart_str_2(0x07);
 28672  01A25A  0E07               	movlw	7
 28673  01A25C  EC7D  F0D8         	call	_usart_str_2
 28674                           
 28675                           ;RS485_COMMUNICATION.c: 46: usart_str_2(VFD_On_Off);
 28676  01A260  0101               	movlb	1	; () banked
 28677  01A262  5194               	movf	_VFD_On_Off& (0+255),w,b
 28678  01A264  EC7D  F0D8         	call	_usart_str_2
 28679                           
 28680                           ;RS485_COMMUNICATION.c: 47: usart_str_2(Desired_Frequency);
 28681  01A268  5016               	movf	_Desired_Frequency,w,c
 28682  01A26A  EC7D  F0D8         	call	_usart_str_2
 28683                           
 28684                           ;RS485_COMMUNICATION.c: 48: usart_str_2(0x30);
 28685  01A26E  0E30               	movlw	48
 28686  01A270  EC7D  F0D8         	call	_usart_str_2
 28687                           
 28688                           ;RS485_COMMUNICATION.c: 49: usart_str_2(Communication_OTP);
 28689  01A274  5015               	movf	_Communication_OTP,w,c
 28690  01A276  EC7D  F0D8         	call	_usart_str_2
 28691                           
 28692                           ;RS485_COMMUNICATION.c: 50: _delay((unsigned long)((15)*(8000000/4000.0)));
 28693  01A27A  0E27               	movlw	39
 28694  01A27C  0100               	movlb	0	; () banked
 28695  01A27E  6F61               	movwf	??_RS485_Data_communication& (0+255),b
 28696  01A280  0EF5               	movlw	245
 28697  01A282                     u18047:
 28698  01A282  2EE8               	decfsz	wreg,f,c
 28699  01A284  D7FE               	goto	u18047
 28700  01A286  2F61               	decfsz	??_RS485_Data_communication& (0+255),f,b
 28701  01A288  D7FC               	goto	u18047
 28702  01A28A  F000               	nop	
 28703                           
 28704                           ;RS485_COMMUNICATION.c: 51: RE0 = 0;
 28705  01A28C  9084               	bcf	3972,0,c	;volatile
 28706  01A28E  0012               	return	
 28707  01A290                     __end_of_RS485_Data_communication:
 28708                           	opt stack 0
 28709                           tblptru	equ	0xFF8
 28710                           tblptrh	equ	0xFF7
 28711                           tblptrl	equ	0xFF6
 28712                           tablat	equ	0xFF5
 28713                           prodh	equ	0xFF4
 28714                           prodl	equ	0xFF3
 28715                           intcon	equ	0xFF2
 28716                           postinc0	equ	0xFEE
 28717                           wreg	equ	0xFE8
 28718                           postdec1	equ	0xFE5
 28719                           fsr1h	equ	0xFE2
 28720                           fsr1l	equ	0xFE1
 28721                           indf2	equ	0xFDF
 28722                           postinc2	equ	0xFDE
 28723                           postdec2	equ	0xFDD
 28724                           fsr2h	equ	0xFDA
 28725                           fsr2l	equ	0xFD9
 28726                           status	equ	0xFD8
 28727                           
 28728 ;; *************** function _usart_str_2 *****************
 28729 ;; Defined at:
 28730 ;;		line 604 in file "UART.c"
 28731 ;; Parameters:    Size  Location     Type
 28732 ;;  str             1    wreg     const unsigned char 
 28733 ;; Auto vars:     Size  Location     Type
 28734 ;;  str             1    0[BANK0 ] const unsigned char 
 28735 ;; Return value:  Size  Location     Type
 28736 ;;                  1    wreg      void 
 28737 ;; Registers used:
 28738 ;;		wreg
 28739 ;; Tracked objects:
 28740 ;;		On entry : 0/0
 28741 ;;		On exit  : 0/0
 28742 ;;		Unchanged: 0/0
 28743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28747 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28748 ;;Total ram usage:        1 bytes
 28749 ;; Hardware stack levels used:    1
 28750 ;; Hardware stack levels required when called:    3
 28751 ;; This function calls:
 28752 ;;		Nothing
 28753 ;; This function is called by:
 28754 ;;		_RS485_Data_communication
 28755 ;; This function uses a non-reentrant model
 28756 ;;
 28757                           
 28758                           	psect	text99
 28759  01B0FA                     __ptext99:
 28760                           	opt stack 0
 28761  01B0FA                     _usart_str_2:
 28762                           	opt stack 26
 28763                           
 28764                           ;incstack = 0
 28765                           ;usart_str_2@str stored from wreg
 28766  01B0FA  0100               	movlb	0	; () banked
 28767  01B0FC  6F60               	movwf	usart_str_2@str& (0+255),b
 28768  01B0FE                     l2465:
 28769  01B0FE  A8A4               	btfss	4004,4,c	;volatile
 28770  01B100  D7FE               	goto	l2465
 28771                           
 28772                           ;UART.c: 607: TXREG2=(str);
 28773  01B102  C060  FF1C         	movff	usart_str_2@str,3868	;volatile
 28774  01B106  0012               	return		;funcret
 28775  01B108                     __end_of_usart_str_2:
 28776                           	opt stack 0
 28777                           tblptru	equ	0xFF8
 28778                           tblptrh	equ	0xFF7
 28779                           tblptrl	equ	0xFF6
 28780                           tablat	equ	0xFF5
 28781                           prodh	equ	0xFF4
 28782                           prodl	equ	0xFF3
 28783                           intcon	equ	0xFF2
 28784                           postinc0	equ	0xFEE
 28785                           wreg	equ	0xFE8
 28786                           postdec1	equ	0xFE5
 28787                           fsr1h	equ	0xFE2
 28788                           fsr1l	equ	0xFE1
 28789                           indf2	equ	0xFDF
 28790                           postinc2	equ	0xFDE
 28791                           postdec2	equ	0xFDD
 28792                           fsr2h	equ	0xFDA
 28793                           fsr2l	equ	0xFD9
 28794                           status	equ	0xFD8
 28795                           
 28796 ;; *************** function _usart2_init *****************
 28797 ;; Defined at:
 28798 ;;		line 559 in file "UART.c"
 28799 ;; Parameters:    Size  Location     Type
 28800 ;;		None
 28801 ;; Auto vars:     Size  Location     Type
 28802 ;;		None
 28803 ;; Return value:  Size  Location     Type
 28804 ;;                  1    wreg      void 
 28805 ;; Registers used:
 28806 ;;		wreg, status,2
 28807 ;; Tracked objects:
 28808 ;;		On entry : 0/0
 28809 ;;		On exit  : 0/0
 28810 ;;		Unchanged: 0/0
 28811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28816 ;;Total ram usage:        0 bytes
 28817 ;; Hardware stack levels used:    1
 28818 ;; Hardware stack levels required when called:    3
 28819 ;; This function calls:
 28820 ;;		Nothing
 28821 ;; This function is called by:
 28822 ;;		_RS485_Data_communication
 28823 ;; This function uses a non-reentrant model
 28824 ;;
 28825                           
 28826                           	psect	text100
 28827  01AE0A                     __ptext100:
 28828                           	opt stack 0
 28829  01AE0A                     _usart2_init:
 28830                           	opt stack 26
 28831                           
 28832                           ;UART.c: 562: ANSEL18 = 0;
 28833                           
 28834                           ;incstack = 0
 28835  01AE0A  010F               	movlb	15	; () banked
 28836  01AE0C  9523               	bcf	35,2,b	;volatile
 28837                           
 28838                           ;UART.c: 563: ANSEL19 = 0;
 28839  01AE0E  010F               	movlb	15	; () banked
 28840  01AE10  9723               	bcf	35,3,b	;volatile
 28841                           
 28842                           ;UART.c: 564: TRISGbits.TRISG2 = 1;
 28843  01AE12  8498               	bsf	3992,2,c	;volatile
 28844                           
 28845                           ;UART.c: 565: TRISGbits.TRISG1 = 0;
 28846  01AE14  9298               	bcf	3992,1,c	;volatile
 28847                           
 28848                           ;UART.c: 566: TXSTA2bits.SYNC = 0;
 28849  01AE16  010F               	movlb	15	; () banked
 28850  01AE18  9921               	bcf	33,4,b	;volatile
 28851                           
 28852                           ;UART.c: 567: TXSTA2bits.BRGH = 1;
 28853  01AE1A  010F               	movlb	15	; () banked
 28854  01AE1C  8521               	bsf	33,2,b	;volatile
 28855                           
 28856                           ;UART.c: 568: BAUDCON2bits.BRG16 = 0;
 28857  01AE1E  010F               	movlb	15	; () banked
 28858  01AE20  9720               	bcf	32,3,b	;volatile
 28859                           
 28860                           ;UART.c: 569: TXSTA2bits.TXEN = 1;
 28861  01AE22  010F               	movlb	15	; () banked
 28862  01AE24  8B21               	bsf	33,5,b	;volatile
 28863                           
 28864                           ;UART.c: 570: RCSTA2bits.CREN = 1;
 28865  01AE26  010F               	movlb	15	; () banked
 28866  01AE28  8922               	bsf	34,4,b	;volatile
 28867                           
 28868                           ;UART.c: 571: RCSTA2bits.SPEN = 1;
 28869  01AE2A  010F               	movlb	15	; () banked
 28870  01AE2C  8F22               	bsf	34,7,b	;volatile
 28871                           
 28872                           ; BSR set to: 15
 28873                           ;UART.c: 572: SPBRG2=51;
 28874  01AE2E  0E33               	movlw	51
 28875  01AE30  010F               	movlb	15	; () banked
 28876  01AE32  6F1E               	movwf	30,b	;volatile
 28877                           
 28878                           ; BSR set to: 15
 28879                           ;UART.c: 574: PIR3bits.RC2IF = 0;
 28880  01AE34  9AA4               	bcf	4004,5,c	;volatile
 28881                           
 28882                           ; BSR set to: 15
 28883                           ;UART.c: 575: PIE3bits.RC2IE = 1;
 28884  01AE36  8AA3               	bsf	4003,5,c	;volatile
 28885                           
 28886                           ; BSR set to: 15
 28887  01AE38  0012               	return		;funcret
 28888  01AE3A                     __end_of_usart2_init:
 28889                           	opt stack 0
 28890                           tblptru	equ	0xFF8
 28891                           tblptrh	equ	0xFF7
 28892                           tblptrl	equ	0xFF6
 28893                           tablat	equ	0xFF5
 28894                           prodh	equ	0xFF4
 28895                           prodl	equ	0xFF3
 28896                           intcon	equ	0xFF2
 28897                           postinc0	equ	0xFEE
 28898                           wreg	equ	0xFE8
 28899                           postdec1	equ	0xFE5
 28900                           fsr1h	equ	0xFE2
 28901                           fsr1l	equ	0xFE1
 28902                           indf2	equ	0xFDF
 28903                           postinc2	equ	0xFDE
 28904                           postdec2	equ	0xFDD
 28905                           fsr2h	equ	0xFDA
 28906                           fsr2l	equ	0xFD9
 28907                           status	equ	0xFD8
 28908                           
 28909 ;; *************** function _RPM_Data_Kill *****************
 28910 ;; Defined at:
 28911 ;;		line 269 in file "RPM_Measurement.c"
 28912 ;; Parameters:    Size  Location     Type
 28913 ;;		None
 28914 ;; Auto vars:     Size  Location     Type
 28915 ;;		None
 28916 ;; Return value:  Size  Location     Type
 28917 ;;                  1    wreg      void 
 28918 ;; Registers used:
 28919 ;;		wreg, status,2, status,0
 28920 ;; Tracked objects:
 28921 ;;		On entry : 0/0
 28922 ;;		On exit  : 0/0
 28923 ;;		Unchanged: 0/0
 28924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28929 ;;Total ram usage:        0 bytes
 28930 ;; Hardware stack levels used:    1
 28931 ;; Hardware stack levels required when called:    3
 28932 ;; This function calls:
 28933 ;;		Nothing
 28934 ;; This function is called by:
 28935 ;;		_main
 28936 ;; This function uses a non-reentrant model
 28937 ;;
 28938                           
 28939                           	psect	text101
 28940  01793C                     __ptext101:
 28941                           	opt stack 0
 28942  01793C                     _RPM_Data_Kill:
 28943                           	opt stack 27
 28944                           
 28945                           ;RPM_Measurement.c: 273: if(Timer1_OF_counter_Turbine > 50)
 28946                           
 28947                           ; BSR set to: 15
 28948                           ;incstack = 0
 28949  01793C  0103               	movlb	3	; () banked
 28950  01793E  51F4               	movf	(_Timer1_OF_counter_Turbine+1)& (0+255),w,b
 28951  017940  E105               	bnz	u17630
 28952  017942  0E33               	movlw	51
 28953  017944  0103               	movlb	3	; () banked
 28954  017946  5DF3               	subwf	_Timer1_OF_counter_Turbine& (0+255),w,b
 28955  017948  A0D8               	btfss	status,0,c
 28956  01794A  D042               	goto	l22968
 28957  01794C                     u17630:
 28958                           
 28959                           ; BSR set to: 3
 28960                           ;RPM_Measurement.c: 274: {
 28961                           ;RPM_Measurement.c: 275: Timer1_OF_counter_Turbine = 0;
 28962  01794C  0E00               	movlw	0
 28963  01794E  0103               	movlb	3	; () banked
 28964  017950  6FF4               	movwf	(_Timer1_OF_counter_Turbine+1)& (0+255),b
 28965  017952  0E00               	movlw	0
 28966  017954  6FF3               	movwf	_Timer1_OF_counter_Turbine& (0+255),b
 28967                           
 28968                           ;RPM_Measurement.c: 276: Turbine_RPM = 0;
 28969  017956  0E00               	movlw	0
 28970  017958  6E0A               	movwf	_Turbine_RPM,c
 28971  01795A  0E00               	movlw	0
 28972  01795C  6E0B               	movwf	_Turbine_RPM+1,c
 28973  01795E  0E00               	movlw	0
 28974  017960  6E0C               	movwf	_Turbine_RPM+2,c
 28975                           
 28976                           ;RPM_Measurement.c: 277: RPM_PWM = 0;
 28977  017962  0E00               	movlw	0
 28978  017964  0102               	movlb	2	; () banked
 28979  017966  6FFA               	movwf	(_RPM_PWM+1)& (0+255),b
 28980  017968  0E00               	movlw	0
 28981  01796A  6FF9               	movwf	_RPM_PWM& (0+255),b
 28982                           
 28983                           ;RPM_Measurement.c: 278: RPM_Time = 0;
 28984  01796C  0E00               	movlw	0
 28985  01796E  0101               	movlb	1	; () banked
 28986  017970  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
 28987  017972  0E00               	movlw	0
 28988  017974  6F2C               	movwf	_RPM_Time& (0+255),b
 28989                           
 28990                           ;RPM_Measurement.c: 279: TRPM_Frequency = 0;
 28991  017976  0E00               	movlw	0
 28992  017978  0104               	movlb	4	; () banked
 28993  01797A  6FEA               	movwf	_TRPM_Frequency& (0+255),b
 28994  01797C  0E00               	movlw	0
 28995  01797E  0104               	movlb	4	; () banked
 28996  017980  6FEB               	movwf	(_TRPM_Frequency+1)& (0+255),b
 28997  017982  0E00               	movlw	0
 28998  017984  0104               	movlb	4	; () banked
 28999  017986  6FEC               	movwf	(_TRPM_Frequency+2)& (0+255),b
 29000                           
 29001                           ;RPM_Measurement.c: 280: TRPM_Time = 0;
 29002  017988  0E00               	movlw	0
 29003  01798A  0104               	movlb	4	; () banked
 29004  01798C  6FED               	movwf	_TRPM_Time& (0+255),b
 29005  01798E  0E00               	movlw	0
 29006  017990  0104               	movlb	4	; () banked
 29007  017992  6FEE               	movwf	(_TRPM_Time+1)& (0+255),b
 29008  017994  0E00               	movlw	0
 29009  017996  0104               	movlb	4	; () banked
 29010  017998  6FEF               	movwf	(_TRPM_Time+2)& (0+255),b
 29011                           
 29012                           ;RPM_Measurement.c: 281: Turb_RPM = 0; Turbine_RPM_Old = 0; Turbine_RPM_New = 0;
 29013  01799A  0E00               	movlw	0
 29014  01799C  0104               	movlb	4	; () banked
 29015  01799E  6FBA               	movwf	_Turb_RPM& (0+255),b
 29016  0179A0  0E00               	movlw	0
 29017  0179A2  0104               	movlb	4	; () banked
 29018  0179A4  6FBB               	movwf	(_Turb_RPM+1)& (0+255),b
 29019  0179A6  0E00               	movlw	0
 29020  0179A8  0104               	movlb	4	; () banked
 29021  0179AA  6FBC               	movwf	(_Turb_RPM+2)& (0+255),b
 29022  0179AC  0E00               	movlw	0
 29023  0179AE  0101               	movlb	1	; () banked
 29024  0179B0  6F18               	movwf	_Turbine_RPM_Old& (0+255),b
 29025  0179B2  0E00               	movlw	0
 29026  0179B4  0101               	movlb	1	; () banked
 29027  0179B6  6F19               	movwf	(_Turbine_RPM_Old+1)& (0+255),b
 29028  0179B8  0E00               	movlw	0
 29029  0179BA  0101               	movlb	1	; () banked
 29030  0179BC  6F1A               	movwf	(_Turbine_RPM_Old+2)& (0+255),b
 29031  0179BE  0E00               	movlw	0
 29032  0179C0  0101               	movlb	1	; () banked
 29033  0179C2  6F15               	movwf	_Turbine_RPM_New& (0+255),b
 29034  0179C4  0E00               	movlw	0
 29035  0179C6  0101               	movlb	1	; () banked
 29036  0179C8  6F16               	movwf	(_Turbine_RPM_New+1)& (0+255),b
 29037  0179CA  0E00               	movlw	0
 29038  0179CC  0101               	movlb	1	; () banked
 29039  0179CE  6F17               	movwf	(_Turbine_RPM_New+2)& (0+255),b
 29040  0179D0                     l22968:
 29041                           
 29042                           ;RPM_Measurement.c: 282: }
 29043                           ;RPM_Measurement.c: 283: if(Timer1_OF_counter_Generator > 10)
 29044  0179D0  0103               	movlb	3	; () banked
 29045  0179D2  51F2               	movf	(_Timer1_OF_counter_Generator+1)& (0+255),w,b
 29046  0179D4  E105               	bnz	u17640
 29047  0179D6  0E0B               	movlw	11
 29048  0179D8  0103               	movlb	3	; () banked
 29049  0179DA  5DF1               	subwf	_Timer1_OF_counter_Generator& (0+255),w,b
 29050  0179DC  A0D8               	btfss	status,0,c
 29051  0179DE  D01E               	goto	l22972
 29052  0179E0                     u17640:
 29053                           
 29054                           ; BSR set to: 3
 29055                           ;RPM_Measurement.c: 284: {
 29056                           ;RPM_Measurement.c: 285: Timer1_OF_counter_Generator = 0;
 29057  0179E0  0E00               	movlw	0
 29058  0179E2  0103               	movlb	3	; () banked
 29059  0179E4  6FF2               	movwf	(_Timer1_OF_counter_Generator+1)& (0+255),b
 29060  0179E6  0E00               	movlw	0
 29061  0179E8  6FF1               	movwf	_Timer1_OF_counter_Generator& (0+255),b
 29062                           
 29063                           ;RPM_Measurement.c: 286: GRPM_Frequency = 0; GRPM_Cap_New = 0;Generator_RPM_FLT = 0;Gene
      +                          rator_RPM_INT = 0;
 29064  0179EA  0E00               	movlw	0
 29065  0179EC  0104               	movlb	4	; () banked
 29066  0179EE  6FE1               	movwf	_GRPM_Frequency& (0+255),b
 29067  0179F0  0E00               	movlw	0
 29068  0179F2  0104               	movlb	4	; () banked
 29069  0179F4  6FE2               	movwf	(_GRPM_Frequency+1)& (0+255),b
 29070  0179F6  0E00               	movlw	0
 29071  0179F8  0104               	movlb	4	; () banked
 29072  0179FA  6FE3               	movwf	(_GRPM_Frequency+2)& (0+255),b
 29073  0179FC  0E00               	movlw	0
 29074  0179FE  0101               	movlb	1	; () banked
 29075  017A00  6F23               	movwf	(_GRPM_Cap_New+1)& (0+255),b
 29076  017A02  0E00               	movlw	0
 29077  017A04  6F22               	movwf	_GRPM_Cap_New& (0+255),b
 29078  017A06  0E00               	movlw	0
 29079  017A08  6E04               	movwf	_Generator_RPM_FLT,c
 29080  017A0A  0E00               	movlw	0
 29081  017A0C  6E05               	movwf	_Generator_RPM_FLT+1,c
 29082  017A0E  0E00               	movlw	0
 29083  017A10  6E06               	movwf	_Generator_RPM_FLT+2,c
 29084  017A12  0E00               	movlw	0
 29085  017A14  0102               	movlb	2	; () banked
 29086  017A16  6F89               	movwf	(_Generator_RPM_INT+1)& (0+255),b
 29087  017A18  0E00               	movlw	0
 29088  017A1A  6F88               	movwf	_Generator_RPM_INT& (0+255),b
 29089  017A1C                     l22972:
 29090                           
 29091                           ;RPM_Measurement.c: 287: }
 29092                           ;RPM_Measurement.c: 288: if(Timer1_OF_counter_Wind > 10)
 29093  017A1C  0103               	movlb	3	; () banked
 29094  017A1E  51F6               	movf	(_Timer1_OF_counter_Wind+1)& (0+255),w,b
 29095  017A20  E105               	bnz	u17650
 29096  017A22  0E0B               	movlw	11
 29097  017A24  0103               	movlb	3	; () banked
 29098  017A26  5DF5               	subwf	_Timer1_OF_counter_Wind& (0+255),w,b
 29099  017A28  A0D8               	btfss	status,0,c
 29100  017A2A  D01E               	goto	l22976
 29101  017A2C                     u17650:
 29102                           
 29103                           ; BSR set to: 3
 29104                           ;RPM_Measurement.c: 289: {
 29105                           ;RPM_Measurement.c: 290: Timer1_OF_counter_Wind = 0;
 29106  017A2C  0E00               	movlw	0
 29107  017A2E  0103               	movlb	3	; () banked
 29108  017A30  6FF6               	movwf	(_Timer1_OF_counter_Wind+1)& (0+255),b
 29109  017A32  0E00               	movlw	0
 29110  017A34  6FF5               	movwf	_Timer1_OF_counter_Wind& (0+255),b
 29111                           
 29112                           ;RPM_Measurement.c: 291: Wind_Frequency = 0;Wind_Cap_New = 0;Wind_Speed = 0;
 29113  017A36  0E00               	movlw	0
 29114  017A38  0104               	movlb	4	; () banked
 29115  017A3A  6FBD               	movwf	_Wind_Frequency& (0+255),b
 29116  017A3C  0E00               	movlw	0
 29117  017A3E  0104               	movlb	4	; () banked
 29118  017A40  6FBE               	movwf	(_Wind_Frequency+1)& (0+255),b
 29119  017A42  0E00               	movlw	0
 29120  017A44  0104               	movlb	4	; () banked
 29121  017A46  6FBF               	movwf	(_Wind_Frequency+2)& (0+255),b
 29122  017A48  0E00               	movlw	0
 29123  017A4A  0101               	movlb	1	; () banked
 29124  017A4C  6F43               	movwf	(_Wind_Cap_New+1)& (0+255),b
 29125  017A4E  0E00               	movlw	0
 29126  017A50  6F42               	movwf	_Wind_Cap_New& (0+255),b
 29127  017A52  0E00               	movlw	0
 29128  017A54  0102               	movlb	2	; () banked
 29129  017A56  6F33               	movwf	_Wind_Speed& (0+255),b
 29130  017A58  0E00               	movlw	0
 29131  017A5A  0102               	movlb	2	; () banked
 29132  017A5C  6F34               	movwf	(_Wind_Speed+1)& (0+255),b
 29133  017A5E  0E00               	movlw	0
 29134  017A60  0102               	movlb	2	; () banked
 29135  017A62  6F35               	movwf	(_Wind_Speed+2)& (0+255),b
 29136                           
 29137                           ;RPM_Measurement.c: 292: wind_1_Temp_flag = 1;
 29138  017A64  0E01               	movlw	1
 29139  017A66  D001               	goto	L14
 29140  017A68                     l22976:
 29141                           
 29142                           ;RPM_Measurement.c: 294: else
 29143                           ;RPM_Measurement.c: 295: {
 29144                           ;RPM_Measurement.c: 296: wind_1_Temp_flag = 0;
 29145  017A68  0E00               	movlw	0
 29146  017A6A                     L14:
 29147  017A6A  0101               	movlb	1	; () banked
 29148  017A6C  6F9C               	movwf	_wind_1_Temp_flag& (0+255),b
 29149                           
 29150                           ; BSR set to: 1
 29151                           ;RPM_Measurement.c: 298: }
 29152                           ;RPM_Measurement.c: 299: if(Timer1_OF_counter_Wind_2 > 10)
 29153                           
 29154                           ; BSR set to: 1
 29155  017A6E  0103               	movlb	3	; () banked
 29156  017A70  51F8               	movf	(_Timer1_OF_counter_Wind_2+1)& (0+255),w,b
 29157  017A72  E105               	bnz	u17660
 29158  017A74  0E0B               	movlw	11
 29159  017A76  0103               	movlb	3	; () banked
 29160  017A78  5DF7               	subwf	_Timer1_OF_counter_Wind_2& (0+255),w,b
 29161  017A7A  A0D8               	btfss	status,0,c
 29162  017A7C  D020               	goto	l22982
 29163  017A7E                     u17660:
 29164                           
 29165                           ; BSR set to: 3
 29166                           ;RPM_Measurement.c: 300: {
 29167                           ;RPM_Measurement.c: 301: Timer1_OF_counter_Wind_2 = 0;
 29168  017A7E  0E00               	movlw	0
 29169  017A80  0103               	movlb	3	; () banked
 29170  017A82  6FF8               	movwf	(_Timer1_OF_counter_Wind_2+1)& (0+255),b
 29171  017A84  0E00               	movlw	0
 29172  017A86  6FF7               	movwf	_Timer1_OF_counter_Wind_2& (0+255),b
 29173                           
 29174                           ;RPM_Measurement.c: 302: wind_Frequency_2 = 0;Wind_Cap_New_2 = 0;Wind_Speed_2 = 0;
 29175  017A88  0E00               	movlw	0
 29176  017A8A  0104               	movlb	4	; () banked
 29177  017A8C  6FD8               	movwf	_wind_Frequency_2& (0+255),b
 29178  017A8E  0E00               	movlw	0
 29179  017A90  0104               	movlb	4	; () banked
 29180  017A92  6FD9               	movwf	(_wind_Frequency_2+1)& (0+255),b
 29181  017A94  0E00               	movlw	0
 29182  017A96  0104               	movlb	4	; () banked
 29183  017A98  6FDA               	movwf	(_wind_Frequency_2+2)& (0+255),b
 29184  017A9A  0E00               	movlw	0
 29185  017A9C  0101               	movlb	1	; () banked
 29186  017A9E  6F45               	movwf	(_Wind_Cap_New_2+1)& (0+255),b
 29187  017AA0  0E00               	movlw	0
 29188  017AA2  6F44               	movwf	_Wind_Cap_New_2& (0+255),b
 29189  017AA4  0E00               	movlw	0
 29190  017AA6  0102               	movlb	2	; () banked
 29191  017AA8  6F42               	movwf	_Wind_Speed_2& (0+255),b
 29192  017AAA  0E00               	movlw	0
 29193  017AAC  0102               	movlb	2	; () banked
 29194  017AAE  6F43               	movwf	(_Wind_Speed_2+1)& (0+255),b
 29195  017AB0  0E00               	movlw	0
 29196  017AB2  0102               	movlb	2	; () banked
 29197  017AB4  6F44               	movwf	(_Wind_Speed_2+2)& (0+255),b
 29198                           
 29199                           ;RPM_Measurement.c: 303: wind_2_Temp_flag = 1;
 29200  017AB6  0E01               	movlw	1
 29201  017AB8  0101               	movlb	1	; () banked
 29202  017ABA  6F9D               	movwf	_wind_2_Temp_flag& (0+255),b
 29203                           
 29204                           ;RPM_Measurement.c: 304: }
 29205  017ABC  0012               	return	
 29206  017ABE                     l22982:
 29207                           
 29208                           ;RPM_Measurement.c: 305: else
 29209                           ;RPM_Measurement.c: 306: {
 29210                           ;RPM_Measurement.c: 307: wind_2_Temp_flag = 0;
 29211  017ABE  0E00               	movlw	0
 29212  017AC0  0101               	movlb	1	; () banked
 29213  017AC2  6F9D               	movwf	_wind_2_Temp_flag& (0+255),b
 29214  017AC4  0012               	return	
 29215  017AC6                     __end_of_RPM_Data_Kill:
 29216                           	opt stack 0
 29217                           tblptru	equ	0xFF8
 29218                           tblptrh	equ	0xFF7
 29219                           tblptrl	equ	0xFF6
 29220                           tablat	equ	0xFF5
 29221                           prodh	equ	0xFF4
 29222                           prodl	equ	0xFF3
 29223                           intcon	equ	0xFF2
 29224                           postinc0	equ	0xFEE
 29225                           wreg	equ	0xFE8
 29226                           postdec1	equ	0xFE5
 29227                           fsr1h	equ	0xFE2
 29228                           fsr1l	equ	0xFE1
 29229                           indf2	equ	0xFDF
 29230                           postinc2	equ	0xFDE
 29231                           postdec2	equ	0xFDD
 29232                           fsr2h	equ	0xFDA
 29233                           fsr2l	equ	0xFD9
 29234                           status	equ	0xFD8
 29235                           
 29236 ;; *************** function _Power_Factor *****************
 29237 ;; Defined at:
 29238 ;;		line 604 in file "Power_Meter.c"
 29239 ;; Parameters:    Size  Location     Type
 29240 ;;		None
 29241 ;; Auto vars:     Size  Location     Type
 29242 ;;		None
 29243 ;; Return value:  Size  Location     Type
 29244 ;;                  1    wreg      void 
 29245 ;; Registers used:
 29246 ;;		wreg, status,2, status,0, cstack
 29247 ;; Tracked objects:
 29248 ;;		On entry : 0/0
 29249 ;;		On exit  : 0/0
 29250 ;;		Unchanged: 0/0
 29251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29253 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29255 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29256 ;;Total ram usage:        3 bytes
 29257 ;; Hardware stack levels used:    1
 29258 ;; Hardware stack levels required when called:    5
 29259 ;; This function calls:
 29260 ;;		___ftadd
 29261 ;;		___ftdiv
 29262 ;;		___ftge
 29263 ;; This function is called by:
 29264 ;;		_main
 29265 ;; This function uses a non-reentrant model
 29266 ;;
 29267                           
 29268                           	psect	text102
 29269  01975E                     __ptext102:
 29270                           	opt stack 0
 29271  01975E                     _Power_Factor:
 29272                           	opt stack 25
 29273                           
 29274                           ;Power_Meter.c: 606: if ( Avg_RYB_Current > 0.5)
 29275                           
 29276                           ; BSR set to: 1
 29277                           ;incstack = 0
 29278  01975E  0E00               	movlw	0
 29279  019760  0100               	movlb	0	; () banked
 29280  019762  6F99               	movwf	___ftge@ff1& (0+255),b
 29281  019764  0E00               	movlw	0
 29282  019766  0100               	movlb	0	; () banked
 29283  019768  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 29284  01976A  0E3F               	movlw	63
 29285  01976C  0100               	movlb	0	; () banked
 29286  01976E  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 29287  019770  C100  F09C         	movff	_Avg_RYB_Current,___ftge@ff2
 29288  019774  C101  F09D         	movff	_Avg_RYB_Current+1,___ftge@ff2+1
 29289  019778  C102  F09E         	movff	_Avg_RYB_Current+2,___ftge@ff2+2
 29290  01977C  EC4B  F0CB         	call	___ftge	;wreg free
 29291  019780  0100               	movlb	0	; () banked
 29292  019782  B0D8               	btfsc	status,0,c
 29293  019784  D03A               	goto	l22794
 29294                           
 29295                           ; BSR set to: 0
 29296                           ;Power_Meter.c: 607: {
 29297                           ;Power_Meter.c: 608: Total_Power_Factor = ((R_Power_Factor + Y_Power_Factor + B_Power_Fa
      +                          ctor) / 3);
 29298  019786  C272  F090         	movff	_Y_Power_Factor,___ftadd@f2
 29299  01978A  C273  F091         	movff	_Y_Power_Factor+1,___ftadd@f2+1
 29300  01978E  C274  F092         	movff	_Y_Power_Factor+2,___ftadd@f2+2
 29301  019792  C594  F08D         	movff	_R_Power_Factor,___ftadd@f1
 29302  019796  C595  F08E         	movff	_R_Power_Factor+1,___ftadd@f1+1
 29303  01979A  C596  F08F         	movff	_R_Power_Factor+2,___ftadd@f1+2
 29304  01979E  ECBE  F0B2         	call	___ftadd	;wreg free
 29305  0197A2  C08D  F0B4         	movff	?___ftadd,_Power_Factor$8166
 29306  0197A6  C08E  F0B5         	movff	?___ftadd+1,_Power_Factor$8166+1
 29307  0197AA  C08F  F0B6         	movff	?___ftadd+2,_Power_Factor$8166+2
 29308                           
 29309                           ;Power_Meter.c: 607: {
 29310                           ;Power_Meter.c: 608: Total_Power_Factor = ((R_Power_Factor + Y_Power_Factor + B_Power_Fa
      +                          ctor) / 3);
 29311  0197AE  C51F  F090         	movff	_B_Power_Factor,___ftadd@f2
 29312  0197B2  C520  F091         	movff	_B_Power_Factor+1,___ftadd@f2+1
 29313  0197B6  C521  F092         	movff	_B_Power_Factor+2,___ftadd@f2+2
 29314  0197BA  C0B4  F08D         	movff	_Power_Factor$8166,___ftadd@f1
 29315  0197BE  C0B5  F08E         	movff	_Power_Factor$8166+1,___ftadd@f1+1
 29316  0197C2  C0B6  F08F         	movff	_Power_Factor$8166+2,___ftadd@f1+2
 29317  0197C6  ECBE  F0B2         	call	___ftadd	;wreg free
 29318  0197CA  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 29319  0197CE  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 29320  0197D2  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 29321  0197D6  0E00               	movlw	0
 29322  0197D8  0100               	movlb	0	; () banked
 29323  0197DA  6FA8               	movwf	___ftdiv@f2& (0+255),b
 29324  0197DC  0E40               	movlw	64
 29325  0197DE  0100               	movlb	0	; () banked
 29326  0197E0  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 29327  0197E2  0E40               	movlw	64
 29328  0197E4  0100               	movlb	0	; () banked
 29329  0197E6  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 29330  0197E8  ECAF  F0C1         	call	___ftdiv	;wreg free
 29331  0197EC  C0A5  F22A         	movff	?___ftdiv,_Total_Power_Factor
 29332  0197F0  C0A6  F22B         	movff	?___ftdiv+1,_Total_Power_Factor+1
 29333  0197F4  C0A7  F22C         	movff	?___ftdiv+2,_Total_Power_Factor+2
 29334                           
 29335                           ;Power_Meter.c: 609: }
 29336  0197F8  0012               	return	
 29337  0197FA                     l22794:
 29338                           
 29339                           ;Power_Meter.c: 610: else
 29340                           ;Power_Meter.c: 611: {
 29341                           ;Power_Meter.c: 612: Total_Power_Factor = 0;
 29342  0197FA  0E00               	movlw	0
 29343  0197FC  0102               	movlb	2	; () banked
 29344  0197FE  6F2A               	movwf	_Total_Power_Factor& (0+255),b
 29345  019800  0E00               	movlw	0
 29346  019802  0102               	movlb	2	; () banked
 29347  019804  6F2B               	movwf	(_Total_Power_Factor+1)& (0+255),b
 29348  019806  0E00               	movlw	0
 29349  019808  0102               	movlb	2	; () banked
 29350  01980A  6F2C               	movwf	(_Total_Power_Factor+2)& (0+255),b
 29351                           
 29352                           ;Power_Meter.c: 613: Y_Power_Factor = 0;
 29353  01980C  0E00               	movlw	0
 29354  01980E  0102               	movlb	2	; () banked
 29355  019810  6F72               	movwf	_Y_Power_Factor& (0+255),b
 29356  019812  0E00               	movlw	0
 29357  019814  0102               	movlb	2	; () banked
 29358  019816  6F73               	movwf	(_Y_Power_Factor+1)& (0+255),b
 29359  019818  0E00               	movlw	0
 29360  01981A  0102               	movlb	2	; () banked
 29361  01981C  6F74               	movwf	(_Y_Power_Factor+2)& (0+255),b
 29362  01981E  0012               	return	
 29363  019820                     __end_of_Power_Factor:
 29364                           	opt stack 0
 29365                           tblptru	equ	0xFF8
 29366                           tblptrh	equ	0xFF7
 29367                           tblptrl	equ	0xFF6
 29368                           tablat	equ	0xFF5
 29369                           prodh	equ	0xFF4
 29370                           prodl	equ	0xFF3
 29371                           intcon	equ	0xFF2
 29372                           postinc0	equ	0xFEE
 29373                           wreg	equ	0xFE8
 29374                           postdec1	equ	0xFE5
 29375                           fsr1h	equ	0xFE2
 29376                           fsr1l	equ	0xFE1
 29377                           indf2	equ	0xFDF
 29378                           postinc2	equ	0xFDE
 29379                           postdec2	equ	0xFDD
 29380                           fsr2h	equ	0xFDA
 29381                           fsr2l	equ	0xFD9
 29382                           status	equ	0xFD8
 29383                           
 29384 ;; *************** function _Power_Calc *****************
 29385 ;; Defined at:
 29386 ;;		line 630 in file "Power_Meter.c"
 29387 ;; Parameters:    Size  Location     Type
 29388 ;;		None
 29389 ;; Auto vars:     Size  Location     Type
 29390 ;;		None
 29391 ;; Return value:  Size  Location     Type
 29392 ;;                  1    wreg      void 
 29393 ;; Registers used:
 29394 ;;		wreg, status,2, status,0, cstack
 29395 ;; Tracked objects:
 29396 ;;		On entry : 0/0
 29397 ;;		On exit  : 0/0
 29398 ;;		Unchanged: 0/0
 29399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29401 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29403 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29404 ;;Total ram usage:        9 bytes
 29405 ;; Hardware stack levels used:    1
 29406 ;; Hardware stack levels required when called:    7
 29407 ;; This function calls:
 29408 ;;		___ftadd
 29409 ;;		___ftdiv
 29410 ;;		___ftmul
 29411 ;;		___ftneg
 29412 ;;		_sqrt
 29413 ;; This function is called by:
 29414 ;;		_main
 29415 ;; This function uses a non-reentrant model
 29416 ;;
 29417                           
 29418                           	psect	text103
 29419  0167E4                     __ptext103:
 29420                           	opt stack 0
 29421  0167E4                     _Power_Calc:
 29422                           	opt stack 23
 29423                           
 29424                           ;Power_Meter.c: 632: KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Total_Power_Factor * 1.7
      +                          32) / 1000);
 29425                           
 29426                           ;incstack = 0
 29427  0167E4  C100  F077         	movff	_Avg_RYB_Current,___ftmul@f2
 29428  0167E8  C101  F078         	movff	_Avg_RYB_Current+1,___ftmul@f2+1
 29429  0167EC  C102  F079         	movff	_Avg_RYB_Current+2,___ftmul@f2+2
 29430  0167F0  C200  F074         	movff	_Avg_RYB_Voltage,___ftmul@f1
 29431  0167F4  C201  F075         	movff	_Avg_RYB_Voltage+1,___ftmul@f1+1
 29432  0167F8  C202  F076         	movff	_Avg_RYB_Voltage+2,___ftmul@f1+2
 29433  0167FC  EC00  F0C1         	call	___ftmul	;wreg free
 29434  016800  C074  F1B0         	movff	?___ftmul,_Power_Calc$8167
 29435  016804  C075  F1B1         	movff	?___ftmul+1,_Power_Calc$8167+1
 29436  016808  C076  F1B2         	movff	?___ftmul+2,_Power_Calc$8167+2
 29437                           
 29438                           ;Power_Meter.c: 632: KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Total_Power_Factor * 1.7
      +                          32) / 1000);
 29439  01680C  C22A  F077         	movff	_Total_Power_Factor,___ftmul@f2
 29440  016810  C22B  F078         	movff	_Total_Power_Factor+1,___ftmul@f2+1
 29441  016814  C22C  F079         	movff	_Total_Power_Factor+2,___ftmul@f2+2
 29442  016818  C1B0  F074         	movff	_Power_Calc$8167,___ftmul@f1
 29443  01681C  C1B1  F075         	movff	_Power_Calc$8167+1,___ftmul@f1+1
 29444  016820  C1B2  F076         	movff	_Power_Calc$8167+2,___ftmul@f1+2
 29445  016824  EC00  F0C1         	call	___ftmul	;wreg free
 29446  016828  C074  F1AD         	movff	?___ftmul,_Power_Calc$8168
 29447  01682C  C075  F1AE         	movff	?___ftmul+1,_Power_Calc$8168+1
 29448  016830  C076  F1AF         	movff	?___ftmul+2,_Power_Calc$8168+2
 29449                           
 29450                           ;Power_Meter.c: 632: KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Total_Power_Factor * 1.7
      +                          32) / 1000);
 29451  016834  0EB2               	movlw	178
 29452  016836  0100               	movlb	0	; () banked
 29453  016838  6F77               	movwf	___ftmul@f2& (0+255),b
 29454  01683A  0EDD               	movlw	221
 29455  01683C  0100               	movlb	0	; () banked
 29456  01683E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 29457  016840  0E3F               	movlw	63
 29458  016842  0100               	movlb	0	; () banked
 29459  016844  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 29460  016846  C1AD  F074         	movff	_Power_Calc$8168,___ftmul@f1
 29461  01684A  C1AE  F075         	movff	_Power_Calc$8168+1,___ftmul@f1+1
 29462  01684E  C1AF  F076         	movff	_Power_Calc$8168+2,___ftmul@f1+2
 29463  016852  EC00  F0C1         	call	___ftmul	;wreg free
 29464  016856  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 29465  01685A  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 29466  01685E  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 29467  016862  0E00               	movlw	0
 29468  016864  0100               	movlb	0	; () banked
 29469  016866  6FA8               	movwf	___ftdiv@f2& (0+255),b
 29470  016868  0E7A               	movlw	122
 29471  01686A  0100               	movlb	0	; () banked
 29472  01686C  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 29473  01686E  0E44               	movlw	68
 29474  016870  0100               	movlb	0	; () banked
 29475  016872  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 29476  016874  ECAF  F0C1         	call	___ftdiv	;wreg free
 29477  016878  C0A5  F022         	movff	?___ftdiv,_KW
 29478  01687C  C0A6  F023         	movff	?___ftdiv+1,_KW+1
 29479  016880  C0A7  F024         	movff	?___ftdiv+2,_KW+2
 29480                           
 29481                           ;Power_Meter.c: 633: KVA = (((Avg_RYB_Voltage * Avg_RYB_Current)*1.732) / 1000);
 29482  016884  C100  F077         	movff	_Avg_RYB_Current,___ftmul@f2
 29483  016888  C101  F078         	movff	_Avg_RYB_Current+1,___ftmul@f2+1
 29484  01688C  C102  F079         	movff	_Avg_RYB_Current+2,___ftmul@f2+2
 29485  016890  C200  F074         	movff	_Avg_RYB_Voltage,___ftmul@f1
 29486  016894  C201  F075         	movff	_Avg_RYB_Voltage+1,___ftmul@f1+1
 29487  016898  C202  F076         	movff	_Avg_RYB_Voltage+2,___ftmul@f1+2
 29488  01689C  EC00  F0C1         	call	___ftmul	;wreg free
 29489  0168A0  C074  F1B0         	movff	?___ftmul,_Power_Calc$8167
 29490  0168A4  C075  F1B1         	movff	?___ftmul+1,_Power_Calc$8167+1
 29491  0168A8  C076  F1B2         	movff	?___ftmul+2,_Power_Calc$8167+2
 29492                           
 29493                           ;Power_Meter.c: 633: KVA = (((Avg_RYB_Voltage * Avg_RYB_Current)*1.732) / 1000);
 29494  0168AC  0EB2               	movlw	178
 29495  0168AE  0100               	movlb	0	; () banked
 29496  0168B0  6F77               	movwf	___ftmul@f2& (0+255),b
 29497  0168B2  0EDD               	movlw	221
 29498  0168B4  0100               	movlb	0	; () banked
 29499  0168B6  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 29500  0168B8  0E3F               	movlw	63
 29501  0168BA  0100               	movlb	0	; () banked
 29502  0168BC  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 29503  0168BE  C1B0  F074         	movff	_Power_Calc$8167,___ftmul@f1
 29504  0168C2  C1B1  F075         	movff	_Power_Calc$8167+1,___ftmul@f1+1
 29505  0168C6  C1B2  F076         	movff	_Power_Calc$8167+2,___ftmul@f1+2
 29506  0168CA  EC00  F0C1         	call	___ftmul	;wreg free
 29507  0168CE  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 29508  0168D2  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 29509  0168D6  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 29510  0168DA  0E00               	movlw	0
 29511  0168DC  0100               	movlb	0	; () banked
 29512  0168DE  6FA8               	movwf	___ftdiv@f2& (0+255),b
 29513  0168E0  0E7A               	movlw	122
 29514  0168E2  0100               	movlb	0	; () banked
 29515  0168E4  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 29516  0168E6  0E44               	movlw	68
 29517  0168E8  0100               	movlb	0	; () banked
 29518  0168EA  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 29519  0168EC  ECAF  F0C1         	call	___ftdiv	;wreg free
 29520  0168F0  C0A5  F218         	movff	?___ftdiv,_KVA
 29521  0168F4  C0A6  F219         	movff	?___ftdiv+1,_KVA+1
 29522  0168F8  C0A7  F21A         	movff	?___ftdiv+2,_KVA+2
 29523                           
 29524                           ;Power_Meter.c: 634: KVAr = (sqrt ((KVA * KVA)-(KW * KW)));
 29525  0168FC  C218  F077         	movff	_KVA,___ftmul@f2
 29526  016900  C219  F078         	movff	_KVA+1,___ftmul@f2+1
 29527  016904  C21A  F079         	movff	_KVA+2,___ftmul@f2+2
 29528  016908  C218  F074         	movff	_KVA,___ftmul@f1
 29529  01690C  C219  F075         	movff	_KVA+1,___ftmul@f1+1
 29530  016910  C21A  F076         	movff	_KVA+2,___ftmul@f1+2
 29531  016914  EC00  F0C1         	call	___ftmul	;wreg free
 29532  016918  C074  F08D         	movff	?___ftmul,___ftadd@f1
 29533  01691C  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 29534  016920  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 29535  016924  C022  F077         	movff	_KW,___ftmul@f2
 29536  016928  C023  F078         	movff	_KW+1,___ftmul@f2+1
 29537  01692C  C024  F079         	movff	_KW+2,___ftmul@f2+2
 29538  016930  C022  F074         	movff	_KW,___ftmul@f1
 29539  016934  C023  F075         	movff	_KW+1,___ftmul@f1+1
 29540  016938  C024  F076         	movff	_KW+2,___ftmul@f1+2
 29541  01693C  EC00  F0C1         	call	___ftmul	;wreg free
 29542  016940  C074  F083         	movff	?___ftmul,___ftneg@f1
 29543  016944  C075  F084         	movff	?___ftmul+1,___ftneg@f1+1
 29544  016948  C076  F085         	movff	?___ftmul+2,___ftneg@f1+2
 29545  01694C  EC1D  F0D7         	call	___ftneg	;wreg free
 29546  016950  C083  F090         	movff	?___ftneg,___ftadd@f2
 29547  016954  C084  F091         	movff	?___ftneg+1,___ftadd@f2+1
 29548  016958  C085  F092         	movff	?___ftneg+2,___ftadd@f2+2
 29549  01695C  ECBE  F0B2         	call	___ftadd	;wreg free
 29550  016960  C08D  F1AA         	movff	?___ftadd,_Power_Calc$8169
 29551  016964  C08E  F1AB         	movff	?___ftadd+1,_Power_Calc$8169+1
 29552  016968  C08F  F1AC         	movff	?___ftadd+2,_Power_Calc$8169+2
 29553                           
 29554                           ;Power_Meter.c: 634: KVAr = (sqrt ((KVA * KVA)-(KW * KW)));
 29555  01696C  C1AA  F0B1         	movff	_Power_Calc$8169,sqrt@a
 29556  016970  C1AB  F0B2         	movff	_Power_Calc$8169+1,sqrt@a+1
 29557  016974  C1AC  F0B3         	movff	_Power_Calc$8169+2,sqrt@a+2
 29558  016978  EC45  F0B9         	call	_sqrt	;wreg free
 29559  01697C  C0B1  F4AB         	movff	?_sqrt,_KVAr
 29560  016980  C0B2  F4AC         	movff	?_sqrt+1,_KVAr+1
 29561  016984  C0B3  F4AD         	movff	?_sqrt+2,_KVAr+2
 29562                           
 29563                           ;Power_Meter.c: 635: Y_KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Y_Power_Factor * 1.732
      +                          ) / 1000);
 29564  016988  C100  F077         	movff	_Avg_RYB_Current,___ftmul@f2
 29565  01698C  C101  F078         	movff	_Avg_RYB_Current+1,___ftmul@f2+1
 29566  016990  C102  F079         	movff	_Avg_RYB_Current+2,___ftmul@f2+2
 29567  016994  C200  F074         	movff	_Avg_RYB_Voltage,___ftmul@f1
 29568  016998  C201  F075         	movff	_Avg_RYB_Voltage+1,___ftmul@f1+1
 29569  01699C  C202  F076         	movff	_Avg_RYB_Voltage+2,___ftmul@f1+2
 29570  0169A0  EC00  F0C1         	call	___ftmul	;wreg free
 29571  0169A4  C074  F1B0         	movff	?___ftmul,_Power_Calc$8167
 29572  0169A8  C075  F1B1         	movff	?___ftmul+1,_Power_Calc$8167+1
 29573  0169AC  C076  F1B2         	movff	?___ftmul+2,_Power_Calc$8167+2
 29574                           
 29575                           ;Power_Meter.c: 635: Y_KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Y_Power_Factor * 1.732
      +                          ) / 1000);
 29576  0169B0  C272  F077         	movff	_Y_Power_Factor,___ftmul@f2
 29577  0169B4  C273  F078         	movff	_Y_Power_Factor+1,___ftmul@f2+1
 29578  0169B8  C274  F079         	movff	_Y_Power_Factor+2,___ftmul@f2+2
 29579  0169BC  C1B0  F074         	movff	_Power_Calc$8167,___ftmul@f1
 29580  0169C0  C1B1  F075         	movff	_Power_Calc$8167+1,___ftmul@f1+1
 29581  0169C4  C1B2  F076         	movff	_Power_Calc$8167+2,___ftmul@f1+2
 29582  0169C8  EC00  F0C1         	call	___ftmul	;wreg free
 29583  0169CC  C074  F1AD         	movff	?___ftmul,_Power_Calc$8168
 29584  0169D0  C075  F1AE         	movff	?___ftmul+1,_Power_Calc$8168+1
 29585  0169D4  C076  F1AF         	movff	?___ftmul+2,_Power_Calc$8168+2
 29586                           
 29587                           ;Power_Meter.c: 635: Y_KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Y_Power_Factor * 1.732
      +                          ) / 1000);
 29588  0169D8  0EB2               	movlw	178
 29589  0169DA  0100               	movlb	0	; () banked
 29590  0169DC  6F77               	movwf	___ftmul@f2& (0+255),b
 29591  0169DE  0EDD               	movlw	221
 29592  0169E0  0100               	movlb	0	; () banked
 29593  0169E2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 29594  0169E4  0E3F               	movlw	63
 29595  0169E6  0100               	movlb	0	; () banked
 29596  0169E8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 29597  0169EA  C1AD  F074         	movff	_Power_Calc$8168,___ftmul@f1
 29598  0169EE  C1AE  F075         	movff	_Power_Calc$8168+1,___ftmul@f1+1
 29599  0169F2  C1AF  F076         	movff	_Power_Calc$8168+2,___ftmul@f1+2
 29600  0169F6  EC00  F0C1         	call	___ftmul	;wreg free
 29601  0169FA  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 29602  0169FE  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 29603  016A02  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 29604  016A06  0E00               	movlw	0
 29605  016A08  0100               	movlb	0	; () banked
 29606  016A0A  6FA8               	movwf	___ftdiv@f2& (0+255),b
 29607  016A0C  0E7A               	movlw	122
 29608  016A0E  0100               	movlb	0	; () banked
 29609  016A10  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 29610  016A12  0E44               	movlw	68
 29611  016A14  0100               	movlb	0	; () banked
 29612  016A16  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 29613  016A18  ECAF  F0C1         	call	___ftdiv	;wreg free
 29614  016A1C  C0A5  F2F0         	movff	?___ftdiv,_Y_KW
 29615  016A20  C0A6  F2F1         	movff	?___ftdiv+1,_Y_KW+1
 29616  016A24  C0A7  F2F2         	movff	?___ftdiv+2,_Y_KW+2
 29617  016A28  0012               	return		;funcret
 29618  016A2A                     __end_of_Power_Calc:
 29619                           	opt stack 0
 29620                           tblptru	equ	0xFF8
 29621                           tblptrh	equ	0xFF7
 29622                           tblptrl	equ	0xFF6
 29623                           tablat	equ	0xFF5
 29624                           prodh	equ	0xFF4
 29625                           prodl	equ	0xFF3
 29626                           intcon	equ	0xFF2
 29627                           postinc0	equ	0xFEE
 29628                           wreg	equ	0xFE8
 29629                           postdec1	equ	0xFE5
 29630                           fsr1h	equ	0xFE2
 29631                           fsr1l	equ	0xFE1
 29632                           indf2	equ	0xFDF
 29633                           postinc2	equ	0xFDE
 29634                           postdec2	equ	0xFDD
 29635                           fsr2h	equ	0xFDA
 29636                           fsr2l	equ	0xFD9
 29637                           status	equ	0xFD8
 29638                           
 29639 ;; *************** function _sqrt *****************
 29640 ;; Defined at:
 29641 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\sprcsqrt.c"
 29642 ;; Parameters:    Size  Location     Type
 29643 ;;  a               3   81[BANK0 ] void 
 29644 ;; Auto vars:     Size  Location     Type
 29645 ;;  x               3   97[BANK0 ] void 
 29646 ;;  q               3   94[BANK0 ] void 
 29647 ;;  z               3   90[BANK0 ] void 
 29648 ;;  og              3   87[BANK0 ] void 
 29649 ;;  i               1   93[BANK0 ] unsigned char 
 29650 ;; Return value:  Size  Location     Type
 29651 ;;                  3   81[BANK0 ] unsigned char 
 29652 ;; Registers used:
 29653 ;;		wreg, status,2, status,0, cstack
 29654 ;; Tracked objects:
 29655 ;;		On entry : 0/0
 29656 ;;		On exit  : 0/0
 29657 ;;		Unchanged: 0/0
 29658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29659 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29660 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29661 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29662 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29663 ;;Total ram usage:       19 bytes
 29664 ;; Hardware stack levels used:    1
 29665 ;; Hardware stack levels required when called:    6
 29666 ;; This function calls:
 29667 ;;		___ftge
 29668 ;;		___ftmul
 29669 ;;		___ftsub
 29670 ;; This function is called by:
 29671 ;;		_Power_Calc
 29672 ;; This function uses a non-reentrant model
 29673 ;;
 29674                           
 29675                           	psect	text104
 29676  01728A                     __ptext104:
 29677                           	opt stack 0
 29678  01728A                     _sqrt:
 29679                           	opt stack 23
 29680                           
 29681                           ;incstack = 0
 29682  01728A  0E00               	movlw	0
 29683  01728C  0100               	movlb	0	; () banked
 29684  01728E  6F99               	movwf	___ftge@ff1& (0+255),b
 29685  017290  0E00               	movlw	0
 29686  017292  0100               	movlb	0	; () banked
 29687  017294  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 29688  017296  0E00               	movlw	0
 29689  017298  0100               	movlb	0	; () banked
 29690  01729A  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 29691  01729C  C0B1  F09C         	movff	sqrt@a,___ftge@ff2
 29692  0172A0  C0B2  F09D         	movff	sqrt@a+1,___ftge@ff2+1
 29693  0172A4  C0B3  F09E         	movff	sqrt@a+2,___ftge@ff2+2
 29694  0172A8  EC4B  F0CB         	call	___ftge	;wreg free
 29695  0172AC  0100               	movlb	0	; () banked
 29696  0172AE  A0D8               	btfss	status,0,c
 29697  0172B0  D012               	goto	l10998
 29698                           
 29699                           ; BSR set to: 0
 29700  0172B2  0100               	movlb	0	; () banked
 29701  0172B4  AFB3               	btfss	(sqrt@a+2)& (0+255),7,b
 29702  0172B6  D005               	goto	l10999
 29703                           
 29704                           ; BSR set to: 0
 29705  0172B8  0E00               	movlw	0
 29706  0172BA  0105               	movlb	5	; () banked
 29707  0172BC  6FF1               	movwf	(_errno+1)& (0+255),b
 29708  0172BE  0E21               	movlw	33
 29709  0172C0  6FF0               	movwf	_errno& (0+255),b
 29710  0172C2                     l10999:
 29711  0172C2  0E00               	movlw	0
 29712  0172C4  0100               	movlb	0	; () banked
 29713  0172C6  6FB1               	movwf	?_sqrt& (0+255),b
 29714  0172C8  0E00               	movlw	0
 29715  0172CA  0100               	movlb	0	; () banked
 29716  0172CC  6FB2               	movwf	(?_sqrt+1)& (0+255),b
 29717  0172CE  0E00               	movlw	0
 29718  0172D0  0100               	movlb	0	; () banked
 29719  0172D2  6FB3               	movwf	(?_sqrt+2)& (0+255),b
 29720                           
 29721                           ; BSR set to: 0
 29722  0172D4  0012               	return	
 29723  0172D6                     l10998:
 29724                           
 29725                           ; BSR set to: 0
 29726  0172D6  C0B1  F0BA         	movff	sqrt@a,sqrt@z
 29727  0172DA  C0B2  F0BB         	movff	sqrt@a+1,sqrt@z+1
 29728  0172DE  C0B3  F0BC         	movff	sqrt@a+2,sqrt@z+2
 29729                           
 29730                           ; BSR set to: 0
 29731  0172E2  C0B1  F0B4         	movff	sqrt@a,??_sqrt
 29732  0172E6  C0B2  F0B5         	movff	sqrt@a+1,??_sqrt+1
 29733  0172EA  C0B3  F0B6         	movff	sqrt@a+2,??_sqrt+2
 29734  0172EE  0100               	movlb	0	; () banked
 29735  0172F0  1FB4               	comf	??_sqrt& (0+255),f,b
 29736  0172F2  1FB5               	comf	(??_sqrt+1)& (0+255),f,b
 29737  0172F4  1FB6               	comf	(??_sqrt+2)& (0+255),f,b
 29738  0172F6  2BB4               	incf	??_sqrt& (0+255),f,b
 29739  0172F8  0E00               	movlw	0
 29740  0172FA  23B5               	addwfc	(??_sqrt+1)& (0+255),f,b
 29741  0172FC  23B6               	addwfc	(??_sqrt+2)& (0+255),f,b
 29742  0172FE  0EC8               	movlw	200
 29743  017300  0100               	movlb	0	; () banked
 29744  017302  25B4               	addwf	??_sqrt& (0+255),w,b
 29745  017304  0100               	movlb	0	; () banked
 29746  017306  6FC1               	movwf	sqrt@x& (0+255),b
 29747  017308  0E6E               	movlw	110
 29748  01730A  0100               	movlb	0	; () banked
 29749  01730C  21B5               	addwfc	(??_sqrt+1)& (0+255),w,b
 29750  01730E  0100               	movlb	0	; () banked
 29751  017310  6FC2               	movwf	(sqrt@x+1)& (0+255),b
 29752  017312  0EBE               	movlw	190
 29753  017314  0100               	movlb	0	; () banked
 29754  017316  21B6               	addwfc	(??_sqrt+2)& (0+255),w,b
 29755  017318  0100               	movlb	0	; () banked
 29756  01731A  6FC3               	movwf	(sqrt@x+2)& (0+255),b
 29757                           
 29758                           ; BSR set to: 0
 29759  01731C  0100               	movlb	0	; () banked
 29760  01731E  90D8               	bcf	status,0,c
 29761  017320  33C3               	rrcf	(sqrt@x+2)& (0+255),f,b
 29762  017322  33C2               	rrcf	(sqrt@x+1)& (0+255),f,b
 29763  017324  33C1               	rrcf	sqrt@x& (0+255),f,b
 29764                           
 29765                           ; BSR set to: 0
 29766  017326  0E00               	movlw	0
 29767  017328  0100               	movlb	0	; () banked
 29768  01732A  5FBA               	subwf	sqrt@z& (0+255),f,b
 29769  01732C  0E80               	movlw	128
 29770  01732E  0100               	movlb	0	; () banked
 29771  017330  5BBB               	subwfb	(sqrt@z+1)& (0+255),f,b
 29772  017332  0E00               	movlw	0
 29773  017334  0100               	movlb	0	; () banked
 29774  017336  5BBC               	subwfb	(sqrt@z+2)& (0+255),f,b
 29775                           
 29776                           ; BSR set to: 0
 29777  017338  0E04               	movlw	4
 29778  01733A  0100               	movlb	0	; () banked
 29779  01733C  6FBD               	movwf	sqrt@i& (0+255),b
 29780  01733E                     l22254:
 29781                           
 29782                           ; BSR set to: 0
 29783  01733E  C0C1  F0B7         	movff	sqrt@x,sqrt@og
 29784  017342  C0C2  F0B8         	movff	sqrt@x+1,sqrt@og+1
 29785  017346  C0C3  F0B9         	movff	sqrt@x+2,sqrt@og+2
 29786                           
 29787                           ; BSR set to: 0
 29788  01734A  C0C1  F074         	movff	sqrt@x,___ftmul@f1
 29789  01734E  C0C2  F075         	movff	sqrt@x+1,___ftmul@f1+1
 29790  017352  C0C3  F076         	movff	sqrt@x+2,___ftmul@f1+2
 29791  017356  C0BA  F077         	movff	sqrt@z,___ftmul@f2
 29792  01735A  C0BB  F078         	movff	sqrt@z+1,___ftmul@f2+1
 29793  01735E  C0BC  F079         	movff	sqrt@z+2,___ftmul@f2+2
 29794  017362  EC00  F0C1         	call	___ftmul	;wreg free
 29795  017366  C074  F0BE         	movff	?___ftmul,sqrt@q
 29796  01736A  C075  F0BF         	movff	?___ftmul+1,sqrt@q+1
 29797  01736E  C076  F0C0         	movff	?___ftmul+2,sqrt@q+2
 29798  017372  C0BE  F074         	movff	sqrt@q,___ftmul@f1
 29799  017376  C0BF  F075         	movff	sqrt@q+1,___ftmul@f1+1
 29800  01737A  C0C0  F076         	movff	sqrt@q+2,___ftmul@f1+2
 29801  01737E  C0C1  F077         	movff	sqrt@x,___ftmul@f2
 29802  017382  C0C2  F078         	movff	sqrt@x+1,___ftmul@f2+1
 29803  017386  C0C3  F079         	movff	sqrt@x+2,___ftmul@f2+2
 29804  01738A  EC00  F0C1         	call	___ftmul	;wreg free
 29805  01738E  C074  F0BE         	movff	?___ftmul,sqrt@q
 29806  017392  C075  F0BF         	movff	?___ftmul+1,sqrt@q+1
 29807  017396  C076  F0C0         	movff	?___ftmul+2,sqrt@q+2
 29808  01739A  C0BE  F074         	movff	sqrt@q,___ftmul@f1
 29809  01739E  C0BF  F075         	movff	sqrt@q+1,___ftmul@f1+1
 29810  0173A2  C0C0  F076         	movff	sqrt@q+2,___ftmul@f1+2
 29811  0173A6  C0C1  F077         	movff	sqrt@x,___ftmul@f2
 29812  0173AA  C0C2  F078         	movff	sqrt@x+1,___ftmul@f2+1
 29813  0173AE  C0C3  F079         	movff	sqrt@x+2,___ftmul@f2+2
 29814  0173B2  EC00  F0C1         	call	___ftmul	;wreg free
 29815  0173B6  C074  F0BE         	movff	?___ftmul,sqrt@q
 29816  0173BA  C075  F0BF         	movff	?___ftmul+1,sqrt@q+1
 29817  0173BE  C076  F0C0         	movff	?___ftmul+2,sqrt@q+2
 29818  0173C2  C0C1  F074         	movff	sqrt@x,___ftmul@f1
 29819  0173C6  C0C2  F075         	movff	sqrt@x+1,___ftmul@f1+1
 29820  0173CA  C0C3  F076         	movff	sqrt@x+2,___ftmul@f1+2
 29821  0173CE  0E00               	movlw	0
 29822  0173D0  0100               	movlb	0	; () banked
 29823  0173D2  6F77               	movwf	___ftmul@f2& (0+255),b
 29824  0173D4  0EC0               	movlw	192
 29825  0173D6  0100               	movlb	0	; () banked
 29826  0173D8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 29827  0173DA  0E3F               	movlw	63
 29828  0173DC  0100               	movlb	0	; () banked
 29829  0173DE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 29830  0173E0  EC00  F0C1         	call	___ftmul	;wreg free
 29831  0173E4  C074  F0C1         	movff	?___ftmul,sqrt@x
 29832  0173E8  C075  F0C2         	movff	?___ftmul+1,sqrt@x+1
 29833  0173EC  C076  F0C3         	movff	?___ftmul+2,sqrt@x+2
 29834  0173F0  C0C1  F0AB         	movff	sqrt@x,___ftsub@f1
 29835  0173F4  C0C2  F0AC         	movff	sqrt@x+1,___ftsub@f1+1
 29836  0173F8  C0C3  F0AD         	movff	sqrt@x+2,___ftsub@f1+2
 29837  0173FC  C0BE  F0AE         	movff	sqrt@q,___ftsub@f2
 29838  017400  C0BF  F0AF         	movff	sqrt@q+1,___ftsub@f2+1
 29839  017404  C0C0  F0B0         	movff	sqrt@q+2,___ftsub@f2+2
 29840  017408  ECC1  F0D5         	call	___ftsub	;wreg free
 29841  01740C  C0AB  F0C1         	movff	?___ftsub,sqrt@x
 29842  017410  C0AC  F0C2         	movff	?___ftsub+1,sqrt@x+1
 29843  017414  C0AD  F0C3         	movff	?___ftsub+2,sqrt@x+2
 29844  017418  0100               	movlb	0	; () banked
 29845  01741A  2FBD               	decfsz	sqrt@i& (0+255),f,b
 29846  01741C  D790               	goto	l22254
 29847                           
 29848                           ; BSR set to: 0
 29849                           
 29850                           ; BSR set to: 0
 29851  01741E  C0C1  F074         	movff	sqrt@x,___ftmul@f1
 29852  017422  C0C2  F075         	movff	sqrt@x+1,___ftmul@f1+1
 29853  017426  C0C3  F076         	movff	sqrt@x+2,___ftmul@f1+2
 29854  01742A  C0B1  F077         	movff	sqrt@a,___ftmul@f2
 29855  01742E  C0B2  F078         	movff	sqrt@a+1,___ftmul@f2+1
 29856  017432  C0B3  F079         	movff	sqrt@a+2,___ftmul@f2+2
 29857  017436  EC00  F0C1         	call	___ftmul	;wreg free
 29858  01743A  C074  F0B1         	movff	?___ftmul,?_sqrt
 29859  01743E  C075  F0B2         	movff	?___ftmul+1,?_sqrt+1
 29860  017442  C076  F0B3         	movff	?___ftmul+2,?_sqrt+2
 29861  017446  0012               	return	
 29862  017448                     __end_of_sqrt:
 29863                           	opt stack 0
 29864                           tblptru	equ	0xFF8
 29865                           tblptrh	equ	0xFF7
 29866                           tblptrl	equ	0xFF6
 29867                           tablat	equ	0xFF5
 29868                           prodh	equ	0xFF4
 29869                           prodl	equ	0xFF3
 29870                           intcon	equ	0xFF2
 29871                           postinc0	equ	0xFEE
 29872                           wreg	equ	0xFE8
 29873                           postdec1	equ	0xFE5
 29874                           fsr1h	equ	0xFE2
 29875                           fsr1l	equ	0xFE1
 29876                           indf2	equ	0xFDF
 29877                           postinc2	equ	0xFDE
 29878                           postdec2	equ	0xFDD
 29879                           fsr2h	equ	0xFDA
 29880                           fsr2l	equ	0xFD9
 29881                           status	equ	0xFD8
 29882                           
 29883 ;; *************** function _Phase_Sequence *****************
 29884 ;; Defined at:
 29885 ;;		line 270 in file "Power_Meter.c"
 29886 ;; Parameters:    Size  Location     Type
 29887 ;;		None
 29888 ;; Auto vars:     Size  Location     Type
 29889 ;;		None
 29890 ;; Return value:  Size  Location     Type
 29891 ;;                  1    wreg      void 
 29892 ;; Registers used:
 29893 ;;		wreg, status,2, status,0, cstack
 29894 ;; Tracked objects:
 29895 ;;		On entry : 0/0
 29896 ;;		On exit  : 0/0
 29897 ;;		Unchanged: 0/0
 29898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29903 ;;Total ram usage:        0 bytes
 29904 ;; Hardware stack levels used:    1
 29905 ;; Hardware stack levels required when called:    4
 29906 ;; This function calls:
 29907 ;;		_Read_Adc
 29908 ;; This function is called by:
 29909 ;;		_main
 29910 ;; This function uses a non-reentrant model
 29911 ;;
 29912                           
 29913                           	psect	text105
 29914  01809A                     __ptext105:
 29915                           	opt stack 0
 29916  01809A                     _Phase_Sequence:
 29917                           	opt stack 26
 29918                           
 29919                           ;Power_Meter.c: 272: RV_PS_Max = 0;
 29920                           
 29921                           ;incstack = 0
 29922  01809A  0E00               	movlw	0
 29923  01809C  0103               	movlb	3	; () banked
 29924  01809E  6FEC               	movwf	(_RV_PS_Max+1)& (0+255),b
 29925  0180A0  0E00               	movlw	0
 29926  0180A2  6FEB               	movwf	_RV_PS_Max& (0+255),b
 29927                           
 29928                           ;Power_Meter.c: 273: YV_PS_Max = 0;
 29929  0180A4  0E00               	movlw	0
 29930  0180A6  0103               	movlb	3	; () banked
 29931  0180A8  6FFE               	movwf	(_YV_PS_Max+1)& (0+255),b
 29932  0180AA  0E00               	movlw	0
 29933  0180AC  6FFD               	movwf	_YV_PS_Max& (0+255),b
 29934                           
 29935                           ;Power_Meter.c: 274: BV_PS_Max = 0;
 29936  0180AE  0E00               	movlw	0
 29937  0180B0  0103               	movlb	3	; () banked
 29938  0180B2  6FE2               	movwf	(_BV_PS_Max+1)& (0+255),b
 29939  0180B4  0E00               	movlw	0
 29940  0180B6  6FE1               	movwf	_BV_PS_Max& (0+255),b
 29941                           
 29942                           ;Power_Meter.c: 275: R_Peak = 0;
 29943  0180B8  0E00               	movlw	0
 29944  0180BA  0101               	movlb	1	; () banked
 29945  0180BC  6F2F               	movwf	(_R_Peak+1)& (0+255),b
 29946  0180BE  0E00               	movlw	0
 29947  0180C0  6F2E               	movwf	_R_Peak& (0+255),b
 29948                           
 29949                           ;Power_Meter.c: 276: Y_Peak = 0;
 29950  0180C2  0E00               	movlw	0
 29951  0180C4  0101               	movlb	1	; () banked
 29952  0180C6  6F4B               	movwf	(_Y_Peak+1)& (0+255),b
 29953  0180C8  0E00               	movlw	0
 29954  0180CA  6F4A               	movwf	_Y_Peak& (0+255),b
 29955                           
 29956                           ;Power_Meter.c: 277: B_Peak = 0;
 29957  0180CC  0E00               	movlw	0
 29958  0180CE  0101               	movlb	1	; () banked
 29959  0180D0  6F1F               	movwf	(_B_Peak+1)& (0+255),b
 29960  0180D2  0E00               	movlw	0
 29961  0180D4  6F1E               	movwf	_B_Peak& (0+255),b
 29962                           
 29963                           ;Power_Meter.c: 279: for(PS = 0; PS < 70; PS++)
 29964  0180D6  0E00               	movlw	0
 29965  0180D8  6E1D               	movwf	_PS,c
 29966  0180DA                     l22406:
 29967                           
 29968                           ; BSR set to: 1
 29969  0180DA  0E45               	movlw	69
 29970  0180DC  641D               	cpfsgt	_PS,c
 29971  0180DE  D001               	goto	l22410
 29972  0180E0  D04D               	goto	l22428
 29973  0180E2                     l22410:
 29974                           
 29975                           ;Power_Meter.c: 280: {
 29976                           ;Power_Meter.c: 281: RV_PS = Read_Adc(1);
 29977  0180E2  0E01               	movlw	1
 29978  0180E4  EC09  F0D6         	call	_Read_Adc
 29979  0180E8  C060  F298         	movff	?_Read_Adc,_RV_PS
 29980  0180EC  C061  F299         	movff	?_Read_Adc+1,_RV_PS+1
 29981                           
 29982                           ;Power_Meter.c: 282: YV_PS = Read_Adc(2);
 29983  0180F0  0E02               	movlw	2
 29984  0180F2  EC09  F0D6         	call	_Read_Adc
 29985  0180F6  C060  F2B0         	movff	?_Read_Adc,_YV_PS
 29986  0180FA  C061  F2B1         	movff	?_Read_Adc+1,_YV_PS+1
 29987                           
 29988                           ;Power_Meter.c: 283: BV_PS = Read_Adc(3);
 29989  0180FE  0E03               	movlw	3
 29990  018100  EC09  F0D6         	call	_Read_Adc
 29991  018104  C060  F27E         	movff	?_Read_Adc,_BV_PS
 29992  018108  C061  F27F         	movff	?_Read_Adc+1,_BV_PS+1
 29993                           
 29994                           ;Power_Meter.c: 285: if(RV_PS_Max < RV_PS)
 29995  01810C  0102               	movlb	2	; () banked
 29996  01810E  5198               	movf	_RV_PS& (0+255),w,b
 29997  018110  0103               	movlb	3	; () banked
 29998  018112  5DEB               	subwf	_RV_PS_Max& (0+255),w,b
 29999  018114  0102               	movlb	2	; () banked
 30000  018116  5199               	movf	(_RV_PS+1)& (0+255),w,b
 30001  018118  0103               	movlb	3	; () banked
 30002  01811A  59EC               	subwfb	(_RV_PS_Max+1)& (0+255),w,b
 30003  01811C  B0D8               	btfsc	status,0,c
 30004  01811E  D008               	goto	l22416
 30005                           
 30006                           ; BSR set to: 3
 30007                           ;Power_Meter.c: 286: {
 30008                           ;Power_Meter.c: 287: RV_PS_Max = RV_PS;
 30009  018120  C298  F3EB         	movff	_RV_PS,_RV_PS_Max
 30010  018124  C299  F3EC         	movff	_RV_PS+1,_RV_PS_Max+1
 30011                           
 30012                           ;Power_Meter.c: 288: R_Peak = PS;
 30013  018128  C01D  F12E         	movff	_PS,_R_Peak
 30014  01812C  0101               	movlb	1	; () banked
 30015  01812E  6B2F               	clrf	(_R_Peak+1)& (0+255),b
 30016  018130                     l22416:
 30017                           
 30018                           ;Power_Meter.c: 289: }
 30019                           ;Power_Meter.c: 291: if(YV_PS_Max < YV_PS)
 30020  018130  0102               	movlb	2	; () banked
 30021  018132  51B0               	movf	_YV_PS& (0+255),w,b
 30022  018134  0103               	movlb	3	; () banked
 30023  018136  5DFD               	subwf	_YV_PS_Max& (0+255),w,b
 30024  018138  0102               	movlb	2	; () banked
 30025  01813A  51B1               	movf	(_YV_PS+1)& (0+255),w,b
 30026  01813C  0103               	movlb	3	; () banked
 30027  01813E  59FE               	subwfb	(_YV_PS_Max+1)& (0+255),w,b
 30028  018140  B0D8               	btfsc	status,0,c
 30029  018142  D008               	goto	l22420
 30030                           
 30031                           ; BSR set to: 3
 30032                           ;Power_Meter.c: 292: {
 30033                           ;Power_Meter.c: 293: YV_PS_Max = YV_PS;
 30034  018144  C2B0  F3FD         	movff	_YV_PS,_YV_PS_Max
 30035  018148  C2B1  F3FE         	movff	_YV_PS+1,_YV_PS_Max+1
 30036                           
 30037                           ;Power_Meter.c: 294: Y_Peak = PS;
 30038  01814C  C01D  F14A         	movff	_PS,_Y_Peak
 30039  018150  0101               	movlb	1	; () banked
 30040  018152  6B4B               	clrf	(_Y_Peak+1)& (0+255),b
 30041  018154                     l22420:
 30042                           
 30043                           ;Power_Meter.c: 295: }
 30044                           ;Power_Meter.c: 297: if(BV_PS_Max < BV_PS)
 30045  018154  0102               	movlb	2	; () banked
 30046  018156  517E               	movf	_BV_PS& (0+255),w,b
 30047  018158  0103               	movlb	3	; () banked
 30048  01815A  5DE1               	subwf	_BV_PS_Max& (0+255),w,b
 30049  01815C  0102               	movlb	2	; () banked
 30050  01815E  517F               	movf	(_BV_PS+1)& (0+255),w,b
 30051  018160  0103               	movlb	3	; () banked
 30052  018162  59E2               	subwfb	(_BV_PS_Max+1)& (0+255),w,b
 30053  018164  B0D8               	btfsc	status,0,c
 30054  018166  D008               	goto	l22424
 30055                           
 30056                           ; BSR set to: 3
 30057                           ;Power_Meter.c: 298: {
 30058                           ;Power_Meter.c: 299: BV_PS_Max = BV_PS;
 30059  018168  C27E  F3E1         	movff	_BV_PS,_BV_PS_Max
 30060  01816C  C27F  F3E2         	movff	_BV_PS+1,_BV_PS_Max+1
 30061                           
 30062                           ;Power_Meter.c: 300: B_Peak = PS;
 30063  018170  C01D  F11E         	movff	_PS,_B_Peak
 30064  018174  0101               	movlb	1	; () banked
 30065  018176  6B1F               	clrf	(_B_Peak+1)& (0+255),b
 30066  018178                     l22424:
 30067  018178  2A1D               	incf	_PS,f,c
 30068  01817A  D7AF               	goto	l22406
 30069  01817C                     l22428:
 30070                           
 30071                           ;Power_Meter.c: 301: }
 30072                           ;Power_Meter.c: 302: }
 30073                           ;Power_Meter.c: 304: if( ((R_Peak > B_Peak) && (B_Peak > Y_Peak)) || ((Y_Peak > R_Peak) 
      +                          && (R_Peak > B_Peak)) || ((B_Peak > Y_Peak) && (Y_Peak > R_Peak)) )
 30074  01817C  0101               	movlb	1	; () banked
 30075  01817E  512E               	movf	_R_Peak& (0+255),w,b
 30076  018180  0101               	movlb	1	; () banked
 30077  018182  5D1E               	subwf	_B_Peak& (0+255),w,b
 30078  018184  0101               	movlb	1	; () banked
 30079  018186  512F               	movf	(_R_Peak+1)& (0+255),w,b
 30080  018188  0101               	movlb	1	; () banked
 30081  01818A  591F               	subwfb	(_B_Peak+1)& (0+255),w,b
 30082  01818C  B0D8               	btfsc	status,0,c
 30083  01818E  D00A               	goto	l22432
 30084                           
 30085                           ; BSR set to: 1
 30086  018190  0101               	movlb	1	; () banked
 30087  018192  511E               	movf	_B_Peak& (0+255),w,b
 30088  018194  0101               	movlb	1	; () banked
 30089  018196  5D4A               	subwf	_Y_Peak& (0+255),w,b
 30090  018198  0101               	movlb	1	; () banked
 30091  01819A  511F               	movf	(_B_Peak+1)& (0+255),w,b
 30092  01819C  0101               	movlb	1	; () banked
 30093  01819E  594B               	subwfb	(_Y_Peak+1)& (0+255),w,b
 30094  0181A0  A0D8               	btfss	status,0,c
 30095  0181A2  D028               	goto	l22440
 30096  0181A4                     l22432:
 30097                           
 30098                           ; BSR set to: 1
 30099  0181A4  0101               	movlb	1	; () banked
 30100  0181A6  514A               	movf	_Y_Peak& (0+255),w,b
 30101  0181A8  0101               	movlb	1	; () banked
 30102  0181AA  5D2E               	subwf	_R_Peak& (0+255),w,b
 30103  0181AC  0101               	movlb	1	; () banked
 30104  0181AE  514B               	movf	(_Y_Peak+1)& (0+255),w,b
 30105  0181B0  0101               	movlb	1	; () banked
 30106  0181B2  592F               	subwfb	(_R_Peak+1)& (0+255),w,b
 30107  0181B4  B0D8               	btfsc	status,0,c
 30108  0181B6  D00A               	goto	l22436
 30109                           
 30110                           ; BSR set to: 1
 30111  0181B8  0101               	movlb	1	; () banked
 30112  0181BA  512E               	movf	_R_Peak& (0+255),w,b
 30113  0181BC  0101               	movlb	1	; () banked
 30114  0181BE  5D1E               	subwf	_B_Peak& (0+255),w,b
 30115  0181C0  0101               	movlb	1	; () banked
 30116  0181C2  512F               	movf	(_R_Peak+1)& (0+255),w,b
 30117  0181C4  0101               	movlb	1	; () banked
 30118  0181C6  591F               	subwfb	(_B_Peak+1)& (0+255),w,b
 30119  0181C8  A0D8               	btfss	status,0,c
 30120  0181CA  D014               	goto	l22440
 30121  0181CC                     l22436:
 30122                           
 30123                           ; BSR set to: 1
 30124  0181CC  0101               	movlb	1	; () banked
 30125  0181CE  511E               	movf	_B_Peak& (0+255),w,b
 30126  0181D0  0101               	movlb	1	; () banked
 30127  0181D2  5D4A               	subwf	_Y_Peak& (0+255),w,b
 30128  0181D4  0101               	movlb	1	; () banked
 30129  0181D6  511F               	movf	(_B_Peak+1)& (0+255),w,b
 30130  0181D8  0101               	movlb	1	; () banked
 30131  0181DA  594B               	subwfb	(_Y_Peak+1)& (0+255),w,b
 30132  0181DC  B0D8               	btfsc	status,0,c
 30133  0181DE  D00D               	goto	l22442
 30134                           
 30135                           ; BSR set to: 1
 30136  0181E0  0101               	movlb	1	; () banked
 30137  0181E2  514A               	movf	_Y_Peak& (0+255),w,b
 30138  0181E4  0101               	movlb	1	; () banked
 30139  0181E6  5D2E               	subwf	_R_Peak& (0+255),w,b
 30140  0181E8  0101               	movlb	1	; () banked
 30141  0181EA  514B               	movf	(_Y_Peak+1)& (0+255),w,b
 30142  0181EC  0101               	movlb	1	; () banked
 30143  0181EE  592F               	subwfb	(_R_Peak+1)& (0+255),w,b
 30144  0181F0  B0D8               	btfsc	status,0,c
 30145  0181F2  D003               	goto	l22442
 30146  0181F4                     l22440:
 30147                           
 30148                           ; BSR set to: 1
 30149                           ;Power_Meter.c: 305: {
 30150                           ;Power_Meter.c: 306: Phase_Sequence_Ok = 1;
 30151  0181F4  0E01               	movlw	1
 30152  0181F6  6E1E               	movwf	_Phase_Sequence_Ok,c
 30153                           
 30154                           ;Power_Meter.c: 307: }
 30155  0181F8  0012               	return	
 30156  0181FA                     l22442:
 30157                           
 30158                           ; BSR set to: 1
 30159                           ;Power_Meter.c: 309: else
 30160                           ;Power_Meter.c: 310: {
 30161                           ;Power_Meter.c: 311: Phase_Sequence_Ok = 0;
 30162  0181FA  0E00               	movlw	0
 30163  0181FC  6E1E               	movwf	_Phase_Sequence_Ok,c
 30164  0181FE  0012               	return	
 30165  018200                     __end_of_Phase_Sequence:
 30166                           	opt stack 0
 30167                           tblptru	equ	0xFF8
 30168                           tblptrh	equ	0xFF7
 30169                           tblptrl	equ	0xFF6
 30170                           tablat	equ	0xFF5
 30171                           prodh	equ	0xFF4
 30172                           prodl	equ	0xFF3
 30173                           intcon	equ	0xFF2
 30174                           postinc0	equ	0xFEE
 30175                           wreg	equ	0xFE8
 30176                           postdec1	equ	0xFE5
 30177                           fsr1h	equ	0xFE2
 30178                           fsr1l	equ	0xFE1
 30179                           indf2	equ	0xFDF
 30180                           postinc2	equ	0xFDE
 30181                           postdec2	equ	0xFDD
 30182                           fsr2h	equ	0xFDA
 30183                           fsr2l	equ	0xFD9
 30184                           status	equ	0xFD8
 30185                           
 30186 ;; *************** function _Read_Adc *****************
 30187 ;; Defined at:
 30188 ;;		line 111 in file "Power_Meter.c"
 30189 ;; Parameters:    Size  Location     Type
 30190 ;;  ch              1    wreg     unsigned char 
 30191 ;; Auto vars:     Size  Location     Type
 30192 ;;  ch              1    4[BANK0 ] unsigned char 
 30193 ;; Return value:  Size  Location     Type
 30194 ;;                  2    0[BANK0 ] unsigned int 
 30195 ;; Registers used:
 30196 ;;		wreg, status,2, status,0
 30197 ;; Tracked objects:
 30198 ;;		On entry : 0/0
 30199 ;;		On exit  : 0/0
 30200 ;;		Unchanged: 0/0
 30201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30202 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30204 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30205 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30206 ;;Total ram usage:        5 bytes
 30207 ;; Hardware stack levels used:    1
 30208 ;; Hardware stack levels required when called:    3
 30209 ;; This function calls:
 30210 ;;		Nothing
 30211 ;; This function is called by:
 30212 ;;		_Temp_Read
 30213 ;;		_Volt_Curr_Read
 30214 ;;		_Phase_Sequence
 30215 ;; This function uses a non-reentrant model
 30216 ;;
 30217                           
 30218                           	psect	text106
 30219  01AC12                     __ptext106:
 30220                           	opt stack 0
 30221  01AC12                     _Read_Adc:
 30222                           	opt stack 26
 30223                           
 30224                           ; BSR set to: 1
 30225                           ;incstack = 0
 30226                           ;Read_Adc@ch stored from wreg
 30227  01AC12  0100               	movlb	0	; () banked
 30228  01AC14  6F64               	movwf	Read_Adc@ch& (0+255),b
 30229                           
 30230                           ;Power_Meter.c: 113: ADCON0 = 0b00000000;
 30231  01AC16  0E00               	movlw	0
 30232  01AC18  6EC2               	movwf	4034,c	;volatile
 30233                           
 30234                           ;Power_Meter.c: 114: ADCON0 = (ch<<2);
 30235  01AC1A  0100               	movlb	0	; () banked
 30236  01AC1C  4564               	rlncf	Read_Adc@ch& (0+255),w,b
 30237  01AC1E  46E8               	rlncf	wreg,f,c
 30238  01AC20  0BFC               	andlw	252
 30239  01AC22  6EC2               	movwf	4034,c	;volatile
 30240                           
 30241                           ; BSR set to: 0
 30242                           ;Power_Meter.c: 115: ADON = 1;
 30243  01AC24  80C2               	bsf	4034,0,c	;volatile
 30244                           
 30245                           ; BSR set to: 0
 30246                           ;Power_Meter.c: 116: GODONE = 1;
 30247  01AC26  82C2               	bsf	4034,1,c	;volatile
 30248  01AC28                     l9192:
 30249  01AC28  B2C2               	btfsc	4034,1,c	;volatile
 30250  01AC2A  D7FE               	goto	l9192
 30251                           
 30252                           ;Power_Meter.c: 118: ADON = 0;
 30253  01AC2C  90C2               	bcf	4034,0,c	;volatile
 30254                           
 30255                           ;Power_Meter.c: 119: return ((ADRESH << 8) | ADRESL);
 30256  01AC2E  50C3               	movf	4035,w,c	;volatile
 30257  01AC30  CFC4 F062          	movff	4036,??_Read_Adc	;volatile
 30258  01AC34  0100               	movlb	0	; () banked
 30259  01AC36  6B63               	clrf	(??_Read_Adc+1)& (0+255),b
 30260  01AC38  C062  F063         	movff	??_Read_Adc,??_Read_Adc+1
 30261  01AC3C  0100               	movlb	0	; () banked
 30262  01AC3E  6B62               	clrf	??_Read_Adc& (0+255),b
 30263  01AC40  0100               	movlb	0	; () banked
 30264  01AC42  1162               	iorwf	??_Read_Adc& (0+255),w,b
 30265  01AC44  0100               	movlb	0	; () banked
 30266  01AC46  6F60               	movwf	?_Read_Adc& (0+255),b
 30267  01AC48  0100               	movlb	0	; () banked
 30268  01AC4A  5163               	movf	(??_Read_Adc+1)& (0+255),w,b
 30269  01AC4C  0100               	movlb	0	; () banked
 30270  01AC4E  6F61               	movwf	(?_Read_Adc+1)& (0+255),b
 30271  01AC50  0012               	return	
 30272  01AC52                     __end_of_Read_Adc:
 30273                           	opt stack 0
 30274                           tblptru	equ	0xFF8
 30275                           tblptrh	equ	0xFF7
 30276                           tblptrl	equ	0xFF6
 30277                           tablat	equ	0xFF5
 30278                           prodh	equ	0xFF4
 30279                           prodl	equ	0xFF3
 30280                           intcon	equ	0xFF2
 30281                           postinc0	equ	0xFEE
 30282                           wreg	equ	0xFE8
 30283                           postdec1	equ	0xFE5
 30284                           fsr1h	equ	0xFE2
 30285                           fsr1l	equ	0xFE1
 30286                           indf2	equ	0xFDF
 30287                           postinc2	equ	0xFDE
 30288                           postdec2	equ	0xFDD
 30289                           fsr2h	equ	0xFDA
 30290                           fsr2l	equ	0xFD9
 30291                           status	equ	0xFD8
 30292                           
 30293 ;; *************** function _PM_Timer_Initialization *****************
 30294 ;; Defined at:
 30295 ;;		line 94 in file "Power_Meter.c"
 30296 ;; Parameters:    Size  Location     Type
 30297 ;;		None
 30298 ;; Auto vars:     Size  Location     Type
 30299 ;;		None
 30300 ;; Return value:  Size  Location     Type
 30301 ;;                  1    wreg      void 
 30302 ;; Registers used:
 30303 ;;		wreg, status,2
 30304 ;; Tracked objects:
 30305 ;;		On entry : 0/0
 30306 ;;		On exit  : 0/0
 30307 ;;		Unchanged: 0/0
 30308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30313 ;;Total ram usage:        0 bytes
 30314 ;; Hardware stack levels used:    1
 30315 ;; Hardware stack levels required when called:    3
 30316 ;; This function calls:
 30317 ;;		Nothing
 30318 ;; This function is called by:
 30319 ;;		_main
 30320 ;; This function uses a non-reentrant model
 30321 ;;
 30322                           
 30323                           	psect	text107
 30324  01B164                     __ptext107:
 30325                           	opt stack 0
 30326  01B164                     _PM_Timer_Initialization:
 30327                           	opt stack 27
 30328                           
 30329                           ;Power_Meter.c: 96: T0CON = 0b11000111;
 30330                           
 30331                           ; BSR set to: 0
 30332                           ;incstack = 0
 30333  01B164  0EC7               	movlw	199
 30334  01B166  6ED5               	movwf	4053,c	;volatile
 30335                           
 30336                           ;Power_Meter.c: 98: TMR0IE = 1;
 30337  01B168  8AF2               	bsf	intcon,5,c	;volatile
 30338                           
 30339                           ;Power_Meter.c: 99: TMR0IF = 0;
 30340  01B16A  94F2               	bcf	intcon,2,c	;volatile
 30341  01B16C  0012               	return		;funcret
 30342  01B16E                     __end_of_PM_Timer_Initialization:
 30343                           	opt stack 0
 30344                           tblptru	equ	0xFF8
 30345                           tblptrh	equ	0xFF7
 30346                           tblptrl	equ	0xFF6
 30347                           tablat	equ	0xFF5
 30348                           prodh	equ	0xFF4
 30349                           prodl	equ	0xFF3
 30350                           intcon	equ	0xFF2
 30351                           postinc0	equ	0xFEE
 30352                           wreg	equ	0xFE8
 30353                           postdec1	equ	0xFE5
 30354                           fsr1h	equ	0xFE2
 30355                           fsr1l	equ	0xFE1
 30356                           indf2	equ	0xFDF
 30357                           postinc2	equ	0xFDE
 30358                           postdec2	equ	0xFDD
 30359                           fsr2h	equ	0xFDA
 30360                           fsr2l	equ	0xFD9
 30361                           status	equ	0xFD8
 30362                           
 30363 ;; *************** function _PM_IO_Initialization *****************
 30364 ;; Defined at:
 30365 ;;		line 16 in file "Power_Meter.c"
 30366 ;; Parameters:    Size  Location     Type
 30367 ;;		None
 30368 ;; Auto vars:     Size  Location     Type
 30369 ;;		None
 30370 ;; Return value:  Size  Location     Type
 30371 ;;                  1    wreg      void 
 30372 ;; Registers used:
 30373 ;;		wreg, status,2
 30374 ;; Tracked objects:
 30375 ;;		On entry : 0/0
 30376 ;;		On exit  : 0/0
 30377 ;;		Unchanged: 0/0
 30378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30383 ;;Total ram usage:        0 bytes
 30384 ;; Hardware stack levels used:    1
 30385 ;; Hardware stack levels required when called:    3
 30386 ;; This function calls:
 30387 ;;		Nothing
 30388 ;; This function is called by:
 30389 ;;		_main
 30390 ;; This function uses a non-reentrant model
 30391 ;;
 30392                           
 30393                           	psect	text108
 30394  01A908                     __ptext108:
 30395                           	opt stack 0
 30396  01A908                     _PM_IO_Initialization:
 30397                           	opt stack 27
 30398                           
 30399                           ;Power_Meter.c: 20: TRISAbits.TRISA0 = 1;
 30400                           
 30401                           ;incstack = 0
 30402  01A908  8092               	bsf	3986,0,c	;volatile
 30403                           
 30404                           ;Power_Meter.c: 22: TRISAbits.TRISA1 = 1;
 30405  01A90A  8292               	bsf	3986,1,c	;volatile
 30406                           
 30407                           ;Power_Meter.c: 23: TRISAbits.TRISA2 = 1;
 30408  01A90C  8492               	bsf	3986,2,c	;volatile
 30409                           
 30410                           ;Power_Meter.c: 24: TRISAbits.TRISA3 = 1;
 30411  01A90E  8692               	bsf	3986,3,c	;volatile
 30412                           
 30413                           ;Power_Meter.c: 26: TRISFbits.TRISF4 = 1;
 30414  01A910  8897               	bsf	3991,4,c	;volatile
 30415                           
 30416                           ;Power_Meter.c: 27: TRISFbits.TRISF5 = 1;
 30417  01A912  8A97               	bsf	3991,5,c	;volatile
 30418                           
 30419                           ;Power_Meter.c: 28: TRISFbits.TRISF6 = 1;
 30420  01A914  8C97               	bsf	3991,6,c	;volatile
 30421                           
 30422                           ;Power_Meter.c: 31: ANSEL0 = 1;
 30423  01A916  010F               	movlb	15	; () banked
 30424  01A918  8125               	bsf	37,0,b	;volatile
 30425                           
 30426                           ;Power_Meter.c: 33: ANSEL1 = 1;
 30427  01A91A  010F               	movlb	15	; () banked
 30428  01A91C  8325               	bsf	37,1,b	;volatile
 30429                           
 30430                           ;Power_Meter.c: 34: ANSEL2 = 1;
 30431  01A91E  010F               	movlb	15	; () banked
 30432  01A920  8525               	bsf	37,2,b	;volatile
 30433                           
 30434                           ;Power_Meter.c: 35: ANSEL3 = 1;
 30435  01A922  010F               	movlb	15	; () banked
 30436  01A924  8725               	bsf	37,3,b	;volatile
 30437                           
 30438                           ;Power_Meter.c: 37: ANSEL9 = 1;
 30439  01A926  010F               	movlb	15	; () banked
 30440  01A928  8324               	bsf	36,1,b	;volatile
 30441                           
 30442                           ;Power_Meter.c: 38: ANSEL10 = 1;
 30443  01A92A  010F               	movlb	15	; () banked
 30444  01A92C  8524               	bsf	36,2,b	;volatile
 30445                           
 30446                           ;Power_Meter.c: 39: ANSEL11 = 1;
 30447  01A92E  010F               	movlb	15	; () banked
 30448  01A930  8724               	bsf	36,3,b	;volatile
 30449                           
 30450                           ;Power_Meter.c: 45: TRISFbits.TRISF7 = 0;
 30451  01A932  9E97               	bcf	3991,7,c	;volatile
 30452                           
 30453                           ;Power_Meter.c: 46: (RF7 = 0);
 30454  01A934  9E85               	bcf	3973,7,c	;volatile
 30455                           
 30456                           ;Power_Meter.c: 52: TRISCbits.TRISC2 = 1;
 30457  01A936  8494               	bsf	3988,2,c	;volatile
 30458                           
 30459                           ; BSR set to: 15
 30460                           ;Power_Meter.c: 53: CCP1CON = 0x04;
 30461  01A938  0E04               	movlw	4
 30462  01A93A  6EBB               	movwf	4027,c	;volatile
 30463                           
 30464                           ; BSR set to: 15
 30465                           ;Power_Meter.c: 54: CCP1IE = 1;
 30466  01A93C  82A3               	bsf	4003,1,c	;volatile
 30467                           
 30468                           ; BSR set to: 15
 30469                           ;Power_Meter.c: 55: CCP1IF = 0;
 30470  01A93E  92A4               	bcf	4004,1,c	;volatile
 30471                           
 30472                           ; BSR set to: 15
 30473                           ;Power_Meter.c: 61: TRISGbits.TRISG0 = 1;
 30474  01A940  8098               	bsf	3992,0,c	;volatile
 30475                           
 30476                           ;Power_Meter.c: 62: CCP3CON = 0x04;
 30477  01A942  0E04               	movlw	4
 30478  01A944  010F               	movlb	15	; () banked
 30479  01A946  6F49               	movwf	73,b	;volatile
 30480                           
 30481                           ; BSR set to: 15
 30482                           ;Power_Meter.c: 63: CCP3IE = 1;
 30483  01A948  80B6               	bsf	4022,0,c	;volatile
 30484                           
 30485                           ; BSR set to: 15
 30486                           ;Power_Meter.c: 64: CCP3IF = 0;
 30487  01A94A  90B7               	bcf	4023,0,c	;volatile
 30488                           
 30489                           ; BSR set to: 15
 30490                           ;Power_Meter.c: 66: TRISGbits.TRISG3 = 1;
 30491  01A94C  8698               	bsf	3992,3,c	;volatile
 30492                           
 30493                           ; BSR set to: 15
 30494                           ;Power_Meter.c: 67: ANSEL17 = 0;
 30495  01A94E  010F               	movlb	15	; () banked
 30496  01A950  9323               	bcf	35,1,b	;volatile
 30497                           
 30498                           ;Power_Meter.c: 68: CCP4CON = 0x04;
 30499  01A952  0E04               	movlw	4
 30500  01A954  6E77               	movwf	3959,c	;volatile
 30501                           
 30502                           ; BSR set to: 15
 30503                           ;Power_Meter.c: 69: CCP4IE = 1;
 30504  01A956  82B6               	bsf	4022,1,c	;volatile
 30505                           
 30506                           ; BSR set to: 15
 30507                           ;Power_Meter.c: 70: CCP4IF = 0;
 30508  01A958  92B7               	bcf	4023,1,c	;volatile
 30509                           
 30510                           ; BSR set to: 15
 30511                           ;Power_Meter.c: 72: TRISGbits.TRISG4 = 1;
 30512  01A95A  8898               	bsf	3992,4,c	;volatile
 30513                           
 30514                           ; BSR set to: 15
 30515                           ;Power_Meter.c: 73: ANSEL16 = 0;
 30516  01A95C  010F               	movlb	15	; () banked
 30517  01A95E  9123               	bcf	35,0,b	;volatile
 30518                           
 30519                           ;Power_Meter.c: 74: CCP5CON = 0x04;
 30520  01A960  0E04               	movlw	4
 30521  01A962  6E74               	movwf	3956,c	;volatile
 30522                           
 30523                           ; BSR set to: 15
 30524                           ;Power_Meter.c: 75: CCP5IE = 1;
 30525  01A964  84B6               	bsf	4022,2,c	;volatile
 30526                           
 30527                           ; BSR set to: 15
 30528                           ;Power_Meter.c: 76: CCP5IF = 0;
 30529  01A966  94B7               	bcf	4023,2,c	;volatile
 30530                           
 30531                           ; BSR set to: 15
 30532  01A968  0012               	return		;funcret
 30533  01A96A                     __end_of_PM_IO_Initialization:
 30534                           	opt stack 0
 30535                           tblptru	equ	0xFF8
 30536                           tblptrh	equ	0xFF7
 30537                           tblptrl	equ	0xFF6
 30538                           tablat	equ	0xFF5
 30539                           prodh	equ	0xFF4
 30540                           prodl	equ	0xFF3
 30541                           intcon	equ	0xFF2
 30542                           postinc0	equ	0xFEE
 30543                           wreg	equ	0xFE8
 30544                           postdec1	equ	0xFE5
 30545                           fsr1h	equ	0xFE2
 30546                           fsr1l	equ	0xFE1
 30547                           indf2	equ	0xFDF
 30548                           postinc2	equ	0xFDE
 30549                           postdec2	equ	0xFDD
 30550                           fsr2h	equ	0xFDA
 30551                           fsr2l	equ	0xFD9
 30552                           status	equ	0xFD8
 30553                           
 30554 ;; *************** function _PM_ADC_Initialization *****************
 30555 ;; Defined at:
 30556 ;;		line 105 in file "Power_Meter.c"
 30557 ;; Parameters:    Size  Location     Type
 30558 ;;		None
 30559 ;; Auto vars:     Size  Location     Type
 30560 ;;		None
 30561 ;; Return value:  Size  Location     Type
 30562 ;;                  1    wreg      void 
 30563 ;; Registers used:
 30564 ;;		wreg, status,2
 30565 ;; Tracked objects:
 30566 ;;		On entry : 0/0
 30567 ;;		On exit  : 0/0
 30568 ;;		Unchanged: 0/0
 30569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30574 ;;Total ram usage:        0 bytes
 30575 ;; Hardware stack levels used:    1
 30576 ;; Hardware stack levels required when called:    3
 30577 ;; This function calls:
 30578 ;;		Nothing
 30579 ;; This function is called by:
 30580 ;;		_main
 30581 ;; This function uses a non-reentrant model
 30582 ;;
 30583                           
 30584                           	psect	text109
 30585  01B16E                     __ptext109:
 30586                           	opt stack 0
 30587  01B16E                     _PM_ADC_Initialization:
 30588                           	opt stack 27
 30589                           
 30590                           ;Power_Meter.c: 107: ADCON1 = 0b01000000;
 30591                           
 30592                           ; BSR set to: 15
 30593                           ;incstack = 0
 30594  01B16E  0E40               	movlw	64
 30595  01B170  6EC1               	movwf	4033,c	;volatile
 30596                           
 30597                           ;Power_Meter.c: 108: ADCON2 = 0b10001101;
 30598  01B172  0E8D               	movlw	141
 30599  01B174  6EC0               	movwf	4032,c	;volatile
 30600  01B176  0012               	return		;funcret
 30601  01B178                     __end_of_PM_ADC_Initialization:
 30602                           	opt stack 0
 30603                           tblptru	equ	0xFF8
 30604                           tblptrh	equ	0xFF7
 30605                           tblptrl	equ	0xFF6
 30606                           tablat	equ	0xFF5
 30607                           prodh	equ	0xFF4
 30608                           prodl	equ	0xFF3
 30609                           intcon	equ	0xFF2
 30610                           postinc0	equ	0xFEE
 30611                           wreg	equ	0xFE8
 30612                           postdec1	equ	0xFE5
 30613                           fsr1h	equ	0xFE2
 30614                           fsr1l	equ	0xFE1
 30615                           indf2	equ	0xFDF
 30616                           postinc2	equ	0xFDE
 30617                           postdec2	equ	0xFDD
 30618                           fsr2h	equ	0xFDA
 30619                           fsr2l	equ	0xFD9
 30620                           status	equ	0xFD8
 30621                           
 30622 ;; *************** function _OSCILLATOR *****************
 30623 ;; Defined at:
 30624 ;;		line 12 in file "Initialization.c"
 30625 ;; Parameters:    Size  Location     Type
 30626 ;;		None
 30627 ;; Auto vars:     Size  Location     Type
 30628 ;;		None
 30629 ;; Return value:  Size  Location     Type
 30630 ;;                  1    wreg      void 
 30631 ;; Registers used:
 30632 ;;		wreg, status,2
 30633 ;; Tracked objects:
 30634 ;;		On entry : 0/0
 30635 ;;		On exit  : 0/0
 30636 ;;		Unchanged: 0/0
 30637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30642 ;;Total ram usage:        0 bytes
 30643 ;; Hardware stack levels used:    1
 30644 ;; Hardware stack levels required when called:    3
 30645 ;; This function calls:
 30646 ;;		Nothing
 30647 ;; This function is called by:
 30648 ;;		_main
 30649 ;; This function uses a non-reentrant model
 30650 ;;
 30651                           
 30652                           	psect	text110
 30653  01B1BC                     __ptext110:
 30654                           	opt stack 0
 30655  01B1BC                     _OSCILLATOR:
 30656                           	opt stack 27
 30657                           
 30658                           ;Initialization.c: 14: OSCCON = 0b11101110;
 30659                           
 30660                           ;incstack = 0
 30661  01B1BC  0EEE               	movlw	238
 30662  01B1BE  6ED3               	movwf	4051,c	;volatile
 30663  01B1C0  0012               	return		;funcret
 30664  01B1C2                     __end_of_OSCILLATOR:
 30665                           	opt stack 0
 30666                           tblptru	equ	0xFF8
 30667                           tblptrh	equ	0xFF7
 30668                           tblptrl	equ	0xFF6
 30669                           tablat	equ	0xFF5
 30670                           prodh	equ	0xFF4
 30671                           prodl	equ	0xFF3
 30672                           intcon	equ	0xFF2
 30673                           postinc0	equ	0xFEE
 30674                           wreg	equ	0xFE8
 30675                           postdec1	equ	0xFE5
 30676                           fsr1h	equ	0xFE2
 30677                           fsr1l	equ	0xFE1
 30678                           indf2	equ	0xFDF
 30679                           postinc2	equ	0xFDE
 30680                           postdec2	equ	0xFDD
 30681                           fsr2h	equ	0xFDA
 30682                           fsr2l	equ	0xFD9
 30683                           status	equ	0xFD8
 30684                           
 30685 ;; *************** function _IO_Initiate *****************
 30686 ;; Defined at:
 30687 ;;		line 62 in file "Initialization.c"
 30688 ;; Parameters:    Size  Location     Type
 30689 ;;		None
 30690 ;; Auto vars:     Size  Location     Type
 30691 ;;		None
 30692 ;; Return value:  Size  Location     Type
 30693 ;;                  2   20[None  ] int 
 30694 ;; Registers used:
 30695 ;;		cstack
 30696 ;; Tracked objects:
 30697 ;;		On entry : 0/0
 30698 ;;		On exit  : 0/0
 30699 ;;		Unchanged: 0/0
 30700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30705 ;;Total ram usage:        0 bytes
 30706 ;; Hardware stack levels used:    1
 30707 ;; Hardware stack levels required when called:    4
 30708 ;; This function calls:
 30709 ;;		_Generator_IO_init
 30710 ;;		_Pitch_Solenoid_init
 30711 ;;		_Power_Meter_Error_IO
 30712 ;;		_VFD_Contactor_IO_init
 30713 ;;		_VFD_Error_IO
 30714 ;; This function is called by:
 30715 ;;		_main
 30716 ;; This function uses a non-reentrant model
 30717 ;;
 30718                           
 30719                           	psect	text111
 30720  01AC52                     __ptext111:
 30721                           	opt stack 0
 30722  01AC52                     _IO_Initiate:
 30723                           	opt stack 26
 30724                           
 30725                           ;Initialization.c: 64: TRISE0 = 0;
 30726                           
 30727                           ;incstack = 0
 30728  01AC52  9096               	bcf	3990,0,c	;volatile
 30729                           
 30730                           ;Initialization.c: 65: RE0 = 0;
 30731  01AC54  9084               	bcf	3972,0,c	;volatile
 30732                           
 30733                           ;Initialization.c: 67: TRISA5 = 0;
 30734  01AC56  9A92               	bcf	3986,5,c	;volatile
 30735                           
 30736                           ;Initialization.c: 68: ANSEL4 = 0;
 30737  01AC58  010F               	movlb	15	; () banked
 30738  01AC5A  9925               	bcf	37,4,b	;volatile
 30739                           
 30740                           ;Initialization.c: 69: RA5 = 0;
 30741  01AC5C  9A80               	bcf	3968,5,c	;volatile
 30742                           
 30743                           ; BSR set to: 15
 30744                           ;Initialization.c: 71: Pitch_Solenoid_init();
 30745  01AC5E  ECD3  F0D8         	call	_Pitch_Solenoid_init	;wreg free
 30746                           
 30747                           ;Initialization.c: 72: VFD_Contactor_IO_init();
 30748  01AC62  ECBC  F0D8         	call	_VFD_Contactor_IO_init	;wreg free
 30749                           
 30750                           ;Initialization.c: 73: Generator_IO_init();
 30751  01AC66  ECD7  F0D8         	call	_Generator_IO_init	;wreg free
 30752                           
 30753                           ;Initialization.c: 74: VFD_Error_IO();
 30754  01AC6A  EC9D  F0D8         	call	_VFD_Error_IO	;wreg free
 30755                           
 30756                           ;Initialization.c: 75: Power_Meter_Error_IO();
 30757  01AC6E  ECC1  F0D8         	call	_Power_Meter_Error_IO	;wreg free
 30758                           
 30759                           ;Initialization.c: 77: TRISA4 = 0;
 30760  01AC72  9892               	bcf	3986,4,c	;volatile
 30761                           
 30762                           ;Initialization.c: 78: RA4 = 0;
 30763  01AC74  9880               	bcf	3968,4,c	;volatile
 30764                           
 30765                           ;Initialization.c: 80: TRISE1 = 1;
 30766  01AC76  8296               	bsf	3990,1,c	;volatile
 30767                           
 30768                           ;Initialization.c: 82: TRISE7 = 0;
 30769  01AC78  9E96               	bcf	3990,7,c	;volatile
 30770                           
 30771                           ;Initialization.c: 83: RE7 = 0;
 30772  01AC7A  9E84               	bcf	3972,7,c	;volatile
 30773                           
 30774                           ;Initialization.c: 85: TRISC5 = 1;
 30775  01AC7C  8A94               	bsf	3988,5,c	;volatile
 30776                           
 30777                           ;Initialization.c: 87: TRISB4 = 0;
 30778  01AC7E  9893               	bcf	3987,4,c	;volatile
 30779                           
 30780                           ;Initialization.c: 88: RB4 = 0;
 30781  01AC80  9881               	bcf	3969,4,c	;volatile
 30782                           
 30783                           ;Initialization.c: 90: TRISB5 = 0;
 30784  01AC82  9A93               	bcf	3987,5,c	;volatile
 30785                           
 30786                           ;Initialization.c: 91: RB5 = 1;
 30787  01AC84  8A81               	bsf	3969,5,c	;volatile
 30788                           
 30789                           ;Initialization.c: 93: TRISF1 = 0;
 30790  01AC86  9297               	bcf	3991,1,c	;volatile
 30791                           
 30792                           ;Initialization.c: 94: ANSEL6 = 0;
 30793  01AC88  010F               	movlb	15	; () banked
 30794  01AC8A  9D25               	bcf	37,6,b	;volatile
 30795                           
 30796                           ; BSR set to: 15
 30797                           ;Initialization.c: 95: RF1 = 0;
 30798  01AC8C  9285               	bcf	3973,1,c	;volatile
 30799                           
 30800                           ; BSR set to: 15
 30801                           ;Initialization.c: 97: TRISC0 = 1;
 30802  01AC8E  8094               	bsf	3988,0,c	;volatile
 30803                           
 30804                           ; BSR set to: 15
 30805  01AC90  0012               	return		;funcret
 30806  01AC92                     __end_of_IO_Initiate:
 30807                           	opt stack 0
 30808                           tblptru	equ	0xFF8
 30809                           tblptrh	equ	0xFF7
 30810                           tblptrl	equ	0xFF6
 30811                           tablat	equ	0xFF5
 30812                           prodh	equ	0xFF4
 30813                           prodl	equ	0xFF3
 30814                           intcon	equ	0xFF2
 30815                           postinc0	equ	0xFEE
 30816                           wreg	equ	0xFE8
 30817                           postdec1	equ	0xFE5
 30818                           fsr1h	equ	0xFE2
 30819                           fsr1l	equ	0xFE1
 30820                           indf2	equ	0xFDF
 30821                           postinc2	equ	0xFDE
 30822                           postdec2	equ	0xFDD
 30823                           fsr2h	equ	0xFDA
 30824                           fsr2l	equ	0xFD9
 30825                           status	equ	0xFD8
 30826                           
 30827 ;; *************** function _VFD_Error_IO *****************
 30828 ;; Defined at:
 30829 ;;		line 121 in file "Initialization.c"
 30830 ;; Parameters:    Size  Location     Type
 30831 ;;		None
 30832 ;; Auto vars:     Size  Location     Type
 30833 ;;		None
 30834 ;; Return value:  Size  Location     Type
 30835 ;;                  1    wreg      void 
 30836 ;; Registers used:
 30837 ;;		None
 30838 ;; Tracked objects:
 30839 ;;		On entry : 0/0
 30840 ;;		On exit  : 0/0
 30841 ;;		Unchanged: 0/0
 30842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30847 ;;Total ram usage:        0 bytes
 30848 ;; Hardware stack levels used:    1
 30849 ;; Hardware stack levels required when called:    3
 30850 ;; This function calls:
 30851 ;;		Nothing
 30852 ;; This function is called by:
 30853 ;;		_IO_Initiate
 30854 ;; This function uses a non-reentrant model
 30855 ;;
 30856                           
 30857                           	psect	text112
 30858  01B13A                     __ptext112:
 30859                           	opt stack 0
 30860  01B13A                     _VFD_Error_IO:
 30861                           	opt stack 26
 30862                           
 30863                           ;Initialization.c: 123: TRISE3 = 1;
 30864                           
 30865                           ; BSR set to: 15
 30866                           ;incstack = 0
 30867  01B13A  8696               	bsf	3990,3,c	;volatile
 30868                           
 30869                           ;Initialization.c: 124: TRISF3 = 0;
 30870  01B13C  9697               	bcf	3991,3,c	;volatile
 30871                           
 30872                           ;Initialization.c: 125: ANSEL8 = 0;
 30873  01B13E  010F               	movlb	15	; () banked
 30874  01B140  9124               	bcf	36,0,b	;volatile
 30875                           
 30876                           ;Initialization.c: 126: RF3 = 0;
 30877  01B142  9685               	bcf	3973,3,c	;volatile
 30878                           
 30879                           ; BSR set to: 15
 30880  01B144  0012               	return		;funcret
 30881  01B146                     __end_of_VFD_Error_IO:
 30882                           	opt stack 0
 30883                           tblptru	equ	0xFF8
 30884                           tblptrh	equ	0xFF7
 30885                           tblptrl	equ	0xFF6
 30886                           tablat	equ	0xFF5
 30887                           prodh	equ	0xFF4
 30888                           prodl	equ	0xFF3
 30889                           intcon	equ	0xFF2
 30890                           postinc0	equ	0xFEE
 30891                           wreg	equ	0xFE8
 30892                           postdec1	equ	0xFE5
 30893                           fsr1h	equ	0xFE2
 30894                           fsr1l	equ	0xFE1
 30895                           indf2	equ	0xFDF
 30896                           postinc2	equ	0xFDE
 30897                           postdec2	equ	0xFDD
 30898                           fsr2h	equ	0xFDA
 30899                           fsr2l	equ	0xFD9
 30900                           status	equ	0xFD8
 30901                           
 30902 ;; *************** function _VFD_Contactor_IO_init *****************
 30903 ;; Defined at:
 30904 ;;		line 108 in file "Initialization.c"
 30905 ;; Parameters:    Size  Location     Type
 30906 ;;		None
 30907 ;; Auto vars:     Size  Location     Type
 30908 ;;		None
 30909 ;; Return value:  Size  Location     Type
 30910 ;;                  1    wreg      void 
 30911 ;; Registers used:
 30912 ;;		None
 30913 ;; Tracked objects:
 30914 ;;		On entry : 0/0
 30915 ;;		On exit  : 0/0
 30916 ;;		Unchanged: 0/0
 30917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30922 ;;Total ram usage:        0 bytes
 30923 ;; Hardware stack levels used:    1
 30924 ;; Hardware stack levels required when called:    3
 30925 ;; This function calls:
 30926 ;;		Nothing
 30927 ;; This function is called by:
 30928 ;;		_IO_Initiate
 30929 ;; This function uses a non-reentrant model
 30930 ;;
 30931                           
 30932                           	psect	text113
 30933  01B178                     __ptext113:
 30934                           	opt stack 0
 30935  01B178                     _VFD_Contactor_IO_init:
 30936                           	opt stack 26
 30937                           
 30938                           ;Initialization.c: 110: TRISD0 = 0;
 30939                           
 30940                           ; BSR set to: 15
 30941                           ;incstack = 0
 30942  01B178  9095               	bcf	3989,0,c	;volatile
 30943                           
 30944                           ;Initialization.c: 111: TRISD1 = 0;
 30945  01B17A  9295               	bcf	3989,1,c	;volatile
 30946                           
 30947                           ;Initialization.c: 112: RD0 = 0; RD1 = 0;
 30948  01B17C  9083               	bcf	3971,0,c	;volatile
 30949  01B17E  9283               	bcf	3971,1,c	;volatile
 30950  01B180  0012               	return		;funcret
 30951  01B182                     __end_of_VFD_Contactor_IO_init:
 30952                           	opt stack 0
 30953                           tblptru	equ	0xFF8
 30954                           tblptrh	equ	0xFF7
 30955                           tblptrl	equ	0xFF6
 30956                           tablat	equ	0xFF5
 30957                           prodh	equ	0xFF4
 30958                           prodl	equ	0xFF3
 30959                           intcon	equ	0xFF2
 30960                           postinc0	equ	0xFEE
 30961                           wreg	equ	0xFE8
 30962                           postdec1	equ	0xFE5
 30963                           fsr1h	equ	0xFE2
 30964                           fsr1l	equ	0xFE1
 30965                           indf2	equ	0xFDF
 30966                           postinc2	equ	0xFDE
 30967                           postdec2	equ	0xFDD
 30968                           fsr2h	equ	0xFDA
 30969                           fsr2l	equ	0xFD9
 30970                           status	equ	0xFD8
 30971                           
 30972 ;; *************** function _Power_Meter_Error_IO *****************
 30973 ;; Defined at:
 30974 ;;		line 128 in file "Initialization.c"
 30975 ;; Parameters:    Size  Location     Type
 30976 ;;		None
 30977 ;; Auto vars:     Size  Location     Type
 30978 ;;		None
 30979 ;; Return value:  Size  Location     Type
 30980 ;;                  1    wreg      void 
 30981 ;; Registers used:
 30982 ;;		None
 30983 ;; Tracked objects:
 30984 ;;		On entry : 0/0
 30985 ;;		On exit  : 0/0
 30986 ;;		Unchanged: 0/0
 30987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30992 ;;Total ram usage:        0 bytes
 30993 ;; Hardware stack levels used:    1
 30994 ;; Hardware stack levels required when called:    3
 30995 ;; This function calls:
 30996 ;;		Nothing
 30997 ;; This function is called by:
 30998 ;;		_IO_Initiate
 30999 ;; This function uses a non-reentrant model
 31000 ;;
 31001                           
 31002                           	psect	text114
 31003  01B182                     __ptext114:
 31004                           	opt stack 0
 31005  01B182                     _Power_Meter_Error_IO:
 31006                           	opt stack 26
 31007                           
 31008                           ;Initialization.c: 130: TRISC2 = 1;
 31009                           
 31010                           ;incstack = 0
 31011  01B182  8494               	bsf	3988,2,c	;volatile
 31012                           
 31013                           ;Initialization.c: 131: TRISF4 = 0;
 31014  01B184  9897               	bcf	3991,4,c	;volatile
 31015                           
 31016                           ;Initialization.c: 132: ANSEL9 = 0;
 31017  01B186  010F               	movlb	15	; () banked
 31018  01B188  9324               	bcf	36,1,b	;volatile
 31019                           
 31020                           ; BSR set to: 15
 31021  01B18A  0012               	return		;funcret
 31022  01B18C                     __end_of_Power_Meter_Error_IO:
 31023                           	opt stack 0
 31024                           tblptru	equ	0xFF8
 31025                           tblptrh	equ	0xFF7
 31026                           tblptrl	equ	0xFF6
 31027                           tablat	equ	0xFF5
 31028                           prodh	equ	0xFF4
 31029                           prodl	equ	0xFF3
 31030                           intcon	equ	0xFF2
 31031                           postinc0	equ	0xFEE
 31032                           wreg	equ	0xFE8
 31033                           postdec1	equ	0xFE5
 31034                           fsr1h	equ	0xFE2
 31035                           fsr1l	equ	0xFE1
 31036                           indf2	equ	0xFDF
 31037                           postinc2	equ	0xFDE
 31038                           postdec2	equ	0xFDD
 31039                           fsr2h	equ	0xFDA
 31040                           fsr2l	equ	0xFD9
 31041                           status	equ	0xFD8
 31042                           
 31043 ;; *************** function _Pitch_Solenoid_init *****************
 31044 ;; Defined at:
 31045 ;;		line 101 in file "Initialization.c"
 31046 ;; Parameters:    Size  Location     Type
 31047 ;;		None
 31048 ;; Auto vars:     Size  Location     Type
 31049 ;;		None
 31050 ;; Return value:  Size  Location     Type
 31051 ;;                  1    wreg      void 
 31052 ;; Registers used:
 31053 ;;		None
 31054 ;; Tracked objects:
 31055 ;;		On entry : 0/0
 31056 ;;		On exit  : 0/0
 31057 ;;		Unchanged: 0/0
 31058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31063 ;;Total ram usage:        0 bytes
 31064 ;; Hardware stack levels used:    1
 31065 ;; Hardware stack levels required when called:    3
 31066 ;; This function calls:
 31067 ;;		Nothing
 31068 ;; This function is called by:
 31069 ;;		_IO_Initiate
 31070 ;; This function uses a non-reentrant model
 31071 ;;
 31072                           
 31073                           	psect	text115
 31074  01B1A6                     __ptext115:
 31075                           	opt stack 0
 31076  01B1A6                     _Pitch_Solenoid_init:
 31077                           	opt stack 26
 31078                           
 31079                           ;Initialization.c: 103: TRISB0 = 0;
 31080                           
 31081                           ; BSR set to: 15
 31082                           ;incstack = 0
 31083  01B1A6  9093               	bcf	3987,0,c	;volatile
 31084                           
 31085                           ;Initialization.c: 104: RB0 = 0;
 31086  01B1A8  9081               	bcf	3969,0,c	;volatile
 31087                           
 31088                           ;Initialization.c: 106: TRISB1 = 1;
 31089  01B1AA  8293               	bsf	3987,1,c	;volatile
 31090  01B1AC  0012               	return		;funcret
 31091  01B1AE                     __end_of_Pitch_Solenoid_init:
 31092                           	opt stack 0
 31093                           tblptru	equ	0xFF8
 31094                           tblptrh	equ	0xFF7
 31095                           tblptrl	equ	0xFF6
 31096                           tablat	equ	0xFF5
 31097                           prodh	equ	0xFF4
 31098                           prodl	equ	0xFF3
 31099                           intcon	equ	0xFF2
 31100                           postinc0	equ	0xFEE
 31101                           wreg	equ	0xFE8
 31102                           postdec1	equ	0xFE5
 31103                           fsr1h	equ	0xFE2
 31104                           fsr1l	equ	0xFE1
 31105                           indf2	equ	0xFDF
 31106                           postinc2	equ	0xFDE
 31107                           postdec2	equ	0xFDD
 31108                           fsr2h	equ	0xFDA
 31109                           fsr2l	equ	0xFD9
 31110                           status	equ	0xFD8
 31111                           
 31112 ;; *************** function _Generator_IO_init *****************
 31113 ;; Defined at:
 31114 ;;		line 114 in file "Initialization.c"
 31115 ;; Parameters:    Size  Location     Type
 31116 ;;		None
 31117 ;; Auto vars:     Size  Location     Type
 31118 ;;		None
 31119 ;; Return value:  Size  Location     Type
 31120 ;;                  1    wreg      void 
 31121 ;; Registers used:
 31122 ;;		None
 31123 ;; Tracked objects:
 31124 ;;		On entry : 0/0
 31125 ;;		On exit  : 0/0
 31126 ;;		Unchanged: 0/0
 31127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31132 ;;Total ram usage:        0 bytes
 31133 ;; Hardware stack levels used:    1
 31134 ;; Hardware stack levels required when called:    3
 31135 ;; This function calls:
 31136 ;;		Nothing
 31137 ;; This function is called by:
 31138 ;;		_IO_Initiate
 31139 ;; This function uses a non-reentrant model
 31140 ;;
 31141                           
 31142                           	psect	text116
 31143  01B1AE                     __ptext116:
 31144                           	opt stack 0
 31145  01B1AE                     _Generator_IO_init:
 31146                           	opt stack 26
 31147                           
 31148                           ;Initialization.c: 116: TRISD2 = 0;
 31149                           
 31150                           ;incstack = 0
 31151  01B1AE  9495               	bcf	3989,2,c	;volatile
 31152                           
 31153                           ;Initialization.c: 117: RD2 = 0;
 31154  01B1B0  9483               	bcf	3971,2,c	;volatile
 31155                           
 31156                           ;Initialization.c: 119: TRISB2 = 1;
 31157  01B1B2  8493               	bsf	3987,2,c	;volatile
 31158  01B1B4  0012               	return		;funcret
 31159  01B1B6                     __end_of_Generator_IO_init:
 31160                           	opt stack 0
 31161                           tblptru	equ	0xFF8
 31162                           tblptrh	equ	0xFF7
 31163                           tblptrl	equ	0xFF6
 31164                           tablat	equ	0xFF5
 31165                           prodh	equ	0xFF4
 31166                           prodl	equ	0xFF3
 31167                           intcon	equ	0xFF2
 31168                           postinc0	equ	0xFEE
 31169                           wreg	equ	0xFE8
 31170                           postdec1	equ	0xFE5
 31171                           fsr1h	equ	0xFE2
 31172                           fsr1l	equ	0xFE1
 31173                           indf2	equ	0xFDF
 31174                           postinc2	equ	0xFDE
 31175                           postdec2	equ	0xFDD
 31176                           fsr2h	equ	0xFDA
 31177                           fsr2l	equ	0xFD9
 31178                           status	equ	0xFD8
 31179                           
 31180 ;; *************** function _Generator_RPM_Initiate *****************
 31181 ;; Defined at:
 31182 ;;		line 41 in file "Initialization.c"
 31183 ;; Parameters:    Size  Location     Type
 31184 ;;		None
 31185 ;; Auto vars:     Size  Location     Type
 31186 ;;		None
 31187 ;; Return value:  Size  Location     Type
 31188 ;;                  2   12[None  ] int 
 31189 ;; Registers used:
 31190 ;;		wreg, status,2
 31191 ;; Tracked objects:
 31192 ;;		On entry : 0/0
 31193 ;;		On exit  : 0/0
 31194 ;;		Unchanged: 0/0
 31195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31200 ;;Total ram usage:        0 bytes
 31201 ;; Hardware stack levels used:    1
 31202 ;; Hardware stack levels required when called:    3
 31203 ;; This function calls:
 31204 ;;		Nothing
 31205 ;; This function is called by:
 31206 ;;		_main
 31207 ;; This function uses a non-reentrant model
 31208 ;;
 31209                           
 31210                           	psect	text117
 31211  01B108                     __ptext117:
 31212                           	opt stack 0
 31213  01B108                     _Generator_RPM_Initiate:
 31214                           	opt stack 27
 31215                           
 31216                           ;Initialization.c: 43: TRISEbits.TRISE4=1;
 31217                           
 31218                           ;incstack = 0
 31219  01B108  8896               	bsf	3990,4,c	;volatile
 31220                           
 31221                           ;Initialization.c: 44: CCP8CON = 0x06;
 31222  01B10A  0E06               	movlw	6
 31223  01B10C  010F               	movlb	15	; () banked
 31224  01B10E  6F46               	movwf	70,b	;volatile
 31225                           
 31226                           ; BSR set to: 15
 31227                           ;Initialization.c: 45: CCP8IE = 1;
 31228  01B110  8AB6               	bsf	4022,5,c	;volatile
 31229                           
 31230                           ; BSR set to: 15
 31231                           ;Initialization.c: 46: CCP8IF = 0;
 31232  01B112  9AB7               	bcf	4023,5,c	;volatile
 31233                           
 31234                           ; BSR set to: 15
 31235  01B114  0012               	return		;funcret
 31236  01B116                     __end_of_Generator_RPM_Initiate:
 31237                           	opt stack 0
 31238                           tblptru	equ	0xFF8
 31239                           tblptrh	equ	0xFF7
 31240                           tblptrl	equ	0xFF6
 31241                           tablat	equ	0xFF5
 31242                           prodh	equ	0xFF4
 31243                           prodl	equ	0xFF3
 31244                           intcon	equ	0xFF2
 31245                           postinc0	equ	0xFEE
 31246                           wreg	equ	0xFE8
 31247                           postdec1	equ	0xFE5
 31248                           fsr1h	equ	0xFE2
 31249                           fsr1l	equ	0xFE1
 31250                           indf2	equ	0xFDF
 31251                           postinc2	equ	0xFDE
 31252                           postdec2	equ	0xFDD
 31253                           fsr2h	equ	0xFDA
 31254                           fsr2l	equ	0xFD9
 31255                           status	equ	0xFD8
 31256                           
 31257 ;; *************** function _Generator_RPM_Cal *****************
 31258 ;; Defined at:
 31259 ;;		line 100 in file "RPM_Measurement.c"
 31260 ;; Parameters:    Size  Location     Type
 31261 ;;		None
 31262 ;; Auto vars:     Size  Location     Type
 31263 ;;		None
 31264 ;; Return value:  Size  Location     Type
 31265 ;;                  1    wreg      void 
 31266 ;; Registers used:
 31267 ;;		wreg, status,2, status,0, cstack
 31268 ;; Tracked objects:
 31269 ;;		On entry : 0/0
 31270 ;;		On exit  : 0/0
 31271 ;;		Unchanged: 0/0
 31272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31275 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31277 ;;Total ram usage:        2 bytes
 31278 ;; Hardware stack levels used:    1
 31279 ;; Hardware stack levels required when called:    5
 31280 ;; This function calls:
 31281 ;;		___ftadd
 31282 ;;		___ftdiv
 31283 ;;		___ftge
 31284 ;;		___ftmul
 31285 ;;		___fttol
 31286 ;;		___lwtoft
 31287 ;; This function is called by:
 31288 ;;		_main
 31289 ;; This function uses a non-reentrant model
 31290 ;;
 31291                           
 31292                           	psect	text118
 31293  014EDE                     __ptext118:
 31294                           	opt stack 0
 31295  014EDE                     _Generator_RPM_Cal:
 31296                           	opt stack 25
 31297                           
 31298                           ;RPM_Measurement.c: 102: CCP8IE = 0;
 31299                           
 31300                           ; BSR set to: 15
 31301                           ;incstack = 0
 31302  014EDE  9AB6               	bcf	4022,5,c	;volatile
 31303                           
 31304                           ;RPM_Measurement.c: 103: if(GRPM_Cap_New > GRPM_Cap_Old)
 31305  014EE0  0101               	movlb	1	; () banked
 31306  014EE2  5122               	movf	_GRPM_Cap_New& (0+255),w,b
 31307  014EE4  0101               	movlb	1	; () banked
 31308  014EE6  5D24               	subwf	_GRPM_Cap_Old& (0+255),w,b
 31309  014EE8  0101               	movlb	1	; () banked
 31310  014EEA  5123               	movf	(_GRPM_Cap_New+1)& (0+255),w,b
 31311  014EEC  0101               	movlb	1	; () banked
 31312  014EEE  5925               	subwfb	(_GRPM_Cap_Old+1)& (0+255),w,b
 31313  014EF0  B0D8               	btfsc	status,0,c
 31314  014EF2  D02F               	goto	l22820
 31315                           
 31316                           ; BSR set to: 1
 31317                           ;RPM_Measurement.c: 104: {
 31318                           ;RPM_Measurement.c: 105: GRPM_Pulse_width = (GRPM_Cap_New - GRPM_Cap_Old + 1) ;
 31319  014EF4  C124  F0B4         	movff	_GRPM_Cap_Old,??_Generator_RPM_Cal
 31320  014EF8  C125  F0B5         	movff	_GRPM_Cap_Old+1,??_Generator_RPM_Cal+1
 31321  014EFC  0100               	movlb	0	; () banked
 31322  014EFE  1FB4               	comf	??_Generator_RPM_Cal& (0+255),f,b
 31323  014F00  1FB5               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31324  014F02  4BB4               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 31325  014F04  2BB5               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31326  014F06  0101               	movlb	1	; () banked
 31327  014F08  5122               	movf	_GRPM_Cap_New& (0+255),w,b
 31328  014F0A  0100               	movlb	0	; () banked
 31329  014F0C  27B4               	addwf	??_Generator_RPM_Cal& (0+255),f,b
 31330  014F0E  0101               	movlb	1	; () banked
 31331  014F10  5123               	movf	(_GRPM_Cap_New+1)& (0+255),w,b
 31332  014F12  0100               	movlb	0	; () banked
 31333  014F14  23B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31334  014F16  0E01               	movlw	1
 31335  014F18  0100               	movlb	0	; () banked
 31336  014F1A  25B4               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 31337  014F1C  0102               	movlb	2	; () banked
 31338  014F1E  6FF3               	movwf	_GRPM_Pulse_width& (0+255),b
 31339  014F20  0E00               	movlw	0
 31340  014F22  0100               	movlb	0	; () banked
 31341  014F24  21B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 31342  014F26  0102               	movlb	2	; () banked
 31343  014F28  6FF4               	movwf	(_GRPM_Pulse_width+1)& (0+255),b
 31344                           
 31345                           ;RPM_Measurement.c: 106: GRPM_Counter = (Timer1_OF_counter_Generator_New - Timer1_OF_cou
      +                          nter_Generator_Old);
 31346  014F2A  C29E  F0B4         	movff	_Timer1_OF_counter_Generator_Old,??_Generator_RPM_Cal
 31347  014F2E  C29F  F0B5         	movff	_Timer1_OF_counter_Generator_Old+1,??_Generator_RPM_Cal+1
 31348  014F32  0100               	movlb	0	; () banked
 31349  014F34  1FB4               	comf	??_Generator_RPM_Cal& (0+255),f,b
 31350  014F36  1FB5               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31351  014F38  4BB4               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 31352  014F3A  2BB5               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31353  014F3C  0101               	movlb	1	; () banked
 31354  014F3E  5134               	movf	_Timer1_OF_counter_Generator_New& (0+255),w,b
 31355  014F40  0100               	movlb	0	; () banked
 31356  014F42  25B4               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 31357  014F44  0102               	movlb	2	; () banked
 31358  014F46  6F86               	movwf	_GRPM_Counter& (0+255),b
 31359  014F48  0101               	movlb	1	; () banked
 31360  014F4A  5135               	movf	(_Timer1_OF_counter_Generator_New+1)& (0+255),w,b
 31361  014F4C  0100               	movlb	0	; () banked
 31362  014F4E  21B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 31363  014F50  D038               	goto	L15
 31364  014F52                     l22820:
 31365                           
 31366                           ;RPM_Measurement.c: 108: else
 31367                           ;RPM_Measurement.c: 109: {
 31368                           ;RPM_Measurement.c: 110: GRPM_Pulse_width = (GRPM_Cap_New - GRPM_Cap_Old + 1) + 65536;
 31369  014F52  C124  F0B4         	movff	_GRPM_Cap_Old,??_Generator_RPM_Cal
 31370  014F56  C125  F0B5         	movff	_GRPM_Cap_Old+1,??_Generator_RPM_Cal+1
 31371  014F5A  0100               	movlb	0	; () banked
 31372  014F5C  1FB4               	comf	??_Generator_RPM_Cal& (0+255),f,b
 31373  014F5E  1FB5               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31374  014F60  4BB4               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 31375  014F62  2BB5               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31376  014F64  0101               	movlb	1	; () banked
 31377  014F66  5122               	movf	_GRPM_Cap_New& (0+255),w,b
 31378  014F68  0100               	movlb	0	; () banked
 31379  014F6A  27B4               	addwf	??_Generator_RPM_Cal& (0+255),f,b
 31380  014F6C  0101               	movlb	1	; () banked
 31381  014F6E  5123               	movf	(_GRPM_Cap_New+1)& (0+255),w,b
 31382  014F70  0100               	movlb	0	; () banked
 31383  014F72  23B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31384  014F74  0E01               	movlw	1
 31385  014F76  0100               	movlb	0	; () banked
 31386  014F78  25B4               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 31387  014F7A  0102               	movlb	2	; () banked
 31388  014F7C  6FF3               	movwf	_GRPM_Pulse_width& (0+255),b
 31389  014F7E  0E00               	movlw	0
 31390  014F80  0100               	movlb	0	; () banked
 31391  014F82  21B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 31392  014F84  0102               	movlb	2	; () banked
 31393  014F86  6FF4               	movwf	(_GRPM_Pulse_width+1)& (0+255),b
 31394                           
 31395                           ;RPM_Measurement.c: 111: GRPM_Counter = (Timer1_OF_counter_Generator_New - Timer1_OF_cou
      +                          nter_Generator_Old);
 31396  014F88  C29E  F0B4         	movff	_Timer1_OF_counter_Generator_Old,??_Generator_RPM_Cal
 31397  014F8C  C29F  F0B5         	movff	_Timer1_OF_counter_Generator_Old+1,??_Generator_RPM_Cal+1
 31398  014F90  0100               	movlb	0	; () banked
 31399  014F92  1FB4               	comf	??_Generator_RPM_Cal& (0+255),f,b
 31400  014F94  1FB5               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31401  014F96  4BB4               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 31402  014F98  2BB5               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31403  014F9A  0101               	movlb	1	; () banked
 31404  014F9C  5134               	movf	_Timer1_OF_counter_Generator_New& (0+255),w,b
 31405  014F9E  0100               	movlb	0	; () banked
 31406  014FA0  25B4               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 31407  014FA2  0102               	movlb	2	; () banked
 31408  014FA4  6F86               	movwf	_GRPM_Counter& (0+255),b
 31409  014FA6  0101               	movlb	1	; () banked
 31410  014FA8  5135               	movf	(_Timer1_OF_counter_Generator_New+1)& (0+255),w,b
 31411  014FAA  0100               	movlb	0	; () banked
 31412  014FAC  21B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 31413  014FAE  0102               	movlb	2	; () banked
 31414  014FB0  6F87               	movwf	(_GRPM_Counter+1)& (0+255),b
 31415                           
 31416                           ;RPM_Measurement.c: 112: GRPM_Counter = GRPM_Counter -1;
 31417  014FB2  0EFF               	movlw	255
 31418  014FB4  0102               	movlb	2	; () banked
 31419  014FB6  2586               	addwf	_GRPM_Counter& (0+255),w,b
 31420  014FB8  0102               	movlb	2	; () banked
 31421  014FBA  6F86               	movwf	_GRPM_Counter& (0+255),b
 31422  014FBC  0EFF               	movlw	255
 31423  014FBE  0102               	movlb	2	; () banked
 31424  014FC0  2187               	addwfc	(_GRPM_Counter+1)& (0+255),w,b
 31425  014FC2                     L15:
 31426  014FC2  0102               	movlb	2	; () banked
 31427  014FC4  6F87               	movwf	(_GRPM_Counter+1)& (0+255),b
 31428                           
 31429                           ; BSR set to: 2
 31430                           ;RPM_Measurement.c: 113: }
 31431                           ;RPM_Measurement.c: 114: GRPM_Time = (0.000004 * GRPM_Pulse_width);
 31432                           
 31433                           ; BSR set to: 2
 31434  014FC6  C2F3  F068         	movff	_GRPM_Pulse_width,___lwtoft@c
 31435  014FCA  C2F4  F069         	movff	_GRPM_Pulse_width+1,___lwtoft@c+1
 31436  014FCE  ECCE  F0D7         	call	___lwtoft	;wreg free
 31437  014FD2  C068  F074         	movff	?___lwtoft,___ftmul@f1
 31438  014FD6  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
 31439  014FDA  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
 31440  014FDE  0E38               	movlw	56
 31441  014FE0  0100               	movlb	0	; () banked
 31442  014FE2  6F77               	movwf	___ftmul@f2& (0+255),b
 31443  014FE4  0E86               	movlw	134
 31444  014FE6  0100               	movlb	0	; () banked
 31445  014FE8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31446  014FEA  0E36               	movlw	54
 31447  014FEC  0100               	movlb	0	; () banked
 31448  014FEE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31449  014FF0  EC00  F0C1         	call	___ftmul	;wreg free
 31450  014FF4  C074  F4A5         	movff	?___ftmul,_GRPM_Time
 31451  014FF8  C075  F4A6         	movff	?___ftmul+1,_GRPM_Time+1
 31452  014FFC  C076  F4A7         	movff	?___ftmul+2,_GRPM_Time+2
 31453                           
 31454                           ;RPM_Measurement.c: 116: GRPM_Time_1 = GRPM_Time + (0.262 * GRPM_Counter);
 31455  015000  0E25               	movlw	37
 31456  015002  0100               	movlb	0	; () banked
 31457  015004  6F77               	movwf	___ftmul@f2& (0+255),b
 31458  015006  0E86               	movlw	134
 31459  015008  0100               	movlb	0	; () banked
 31460  01500A  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31461  01500C  0E3E               	movlw	62
 31462  01500E  0100               	movlb	0	; () banked
 31463  015010  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31464  015012  C286  F068         	movff	_GRPM_Counter,___lwtoft@c
 31465  015016  C287  F069         	movff	_GRPM_Counter+1,___lwtoft@c+1
 31466  01501A  ECCE  F0D7         	call	___lwtoft	;wreg free
 31467  01501E  C068  F074         	movff	?___lwtoft,___ftmul@f1
 31468  015022  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
 31469  015026  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
 31470  01502A  EC00  F0C1         	call	___ftmul	;wreg free
 31471  01502E  C074  F08D         	movff	?___ftmul,___ftadd@f1
 31472  015032  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 31473  015036  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 31474  01503A  C4A5  F090         	movff	_GRPM_Time,___ftadd@f2
 31475  01503E  C4A6  F091         	movff	_GRPM_Time+1,___ftadd@f2+1
 31476  015042  C4A7  F092         	movff	_GRPM_Time+2,___ftadd@f2+2
 31477  015046  ECBE  F0B2         	call	___ftadd	;wreg free
 31478  01504A  C08D  F2E7         	movff	?___ftadd,_GRPM_Time_1
 31479  01504E  C08E  F2E8         	movff	?___ftadd+1,_GRPM_Time_1+1
 31480  015052  C08F  F2E9         	movff	?___ftadd+2,_GRPM_Time_1+2
 31481                           
 31482                           ;RPM_Measurement.c: 118: GRPM_Time_1 = GRPM_Time_1 / 4;
 31483  015056  C2E7  F0A5         	movff	_GRPM_Time_1,___ftdiv@f1
 31484  01505A  C2E8  F0A6         	movff	_GRPM_Time_1+1,___ftdiv@f1+1
 31485  01505E  C2E9  F0A7         	movff	_GRPM_Time_1+2,___ftdiv@f1+2
 31486  015062  0E00               	movlw	0
 31487  015064  0100               	movlb	0	; () banked
 31488  015066  6FA8               	movwf	___ftdiv@f2& (0+255),b
 31489  015068  0E80               	movlw	128
 31490  01506A  0100               	movlb	0	; () banked
 31491  01506C  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 31492  01506E  0E40               	movlw	64
 31493  015070  0100               	movlb	0	; () banked
 31494  015072  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 31495  015074  ECAF  F0C1         	call	___ftdiv	;wreg free
 31496  015078  C0A5  F2E7         	movff	?___ftdiv,_GRPM_Time_1
 31497  01507C  C0A6  F2E8         	movff	?___ftdiv+1,_GRPM_Time_1+1
 31498  015080  C0A7  F2E9         	movff	?___ftdiv+2,_GRPM_Time_1+2
 31499                           
 31500                           ;RPM_Measurement.c: 120: GRPM_Frequency = 1/GRPM_Time_1;
 31501  015084  0E00               	movlw	0
 31502  015086  0100               	movlb	0	; () banked
 31503  015088  6FA5               	movwf	___ftdiv@f1& (0+255),b
 31504  01508A  0E80               	movlw	128
 31505  01508C  0100               	movlb	0	; () banked
 31506  01508E  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
 31507  015090  0E3F               	movlw	63
 31508  015092  0100               	movlb	0	; () banked
 31509  015094  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
 31510  015096  C2E7  F0A8         	movff	_GRPM_Time_1,___ftdiv@f2
 31511  01509A  C2E8  F0A9         	movff	_GRPM_Time_1+1,___ftdiv@f2+1
 31512  01509E  C2E9  F0AA         	movff	_GRPM_Time_1+2,___ftdiv@f2+2
 31513  0150A2  ECAF  F0C1         	call	___ftdiv	;wreg free
 31514  0150A6  C0A5  F4E1         	movff	?___ftdiv,_GRPM_Frequency
 31515  0150AA  C0A6  F4E2         	movff	?___ftdiv+1,_GRPM_Frequency+1
 31516  0150AE  C0A7  F4E3         	movff	?___ftdiv+2,_GRPM_Frequency+2
 31517                           
 31518                           ;RPM_Measurement.c: 122: if(G_RPM_counter < (2))
 31519  0150B2  0E02               	movlw	2
 31520  0150B4  0100               	movlb	0	; () banked
 31521  0150B6  61E2               	cpfslt	_G_RPM_counter& (0+255),b
 31522  0150B8  D002               	goto	l22832
 31523                           
 31524                           ; BSR set to: 0
 31525                           ;RPM_Measurement.c: 123: {
 31526                           ;RPM_Measurement.c: 124: G_RPM_counter++;
 31527  0150BA  0100               	movlb	0	; () banked
 31528  0150BC  2BE2               	incf	_G_RPM_counter& (0+255),f,b
 31529  0150BE                     l22832:
 31530                           
 31531                           ; BSR set to: 0
 31532                           ;RPM_Measurement.c: 125: }
 31533                           ;RPM_Measurement.c: 126: if(G_RPM_counter == (2))
 31534  0150BE  0E02               	movlw	2
 31535  0150C0  0100               	movlb	0	; () banked
 31536  0150C2  19E2               	xorwf	_G_RPM_counter& (0+255),w,b
 31537  0150C4  A4D8               	btfss	status,2,c
 31538  0150C6  D02E               	goto	l22838
 31539                           
 31540                           ; BSR set to: 0
 31541                           ;RPM_Measurement.c: 127: {
 31542                           ;RPM_Measurement.c: 128: Generator_RPM_Old = Generator_RPM_New;
 31543  0150C8  C106  F109         	movff	_Generator_RPM_New,_Generator_RPM_Old
 31544  0150CC  C107  F10A         	movff	_Generator_RPM_New+1,_Generator_RPM_Old+1
 31545  0150D0  C108  F10B         	movff	_Generator_RPM_New+2,_Generator_RPM_Old+2
 31546                           
 31547                           ; BSR set to: 0
 31548                           ;RPM_Measurement.c: 129: Generator_RPM_New = ((60 * GRPM_Frequency) / (2));
 31549  0150D4  0E00               	movlw	0
 31550  0150D6  0100               	movlb	0	; () banked
 31551  0150D8  6F77               	movwf	___ftmul@f2& (0+255),b
 31552  0150DA  0E70               	movlw	112
 31553  0150DC  0100               	movlb	0	; () banked
 31554  0150DE  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31555  0150E0  0E42               	movlw	66
 31556  0150E2  0100               	movlb	0	; () banked
 31557  0150E4  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31558  0150E6  C4E1  F074         	movff	_GRPM_Frequency,___ftmul@f1
 31559  0150EA  C4E2  F075         	movff	_GRPM_Frequency+1,___ftmul@f1+1
 31560  0150EE  C4E3  F076         	movff	_GRPM_Frequency+2,___ftmul@f1+2
 31561  0150F2  EC00  F0C1         	call	___ftmul	;wreg free
 31562  0150F6  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 31563  0150FA  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 31564  0150FE  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 31565  015102  0E00               	movlw	0
 31566  015104  0100               	movlb	0	; () banked
 31567  015106  6FA8               	movwf	___ftdiv@f2& (0+255),b
 31568  015108  0E00               	movlw	0
 31569  01510A  0100               	movlb	0	; () banked
 31570  01510C  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 31571  01510E  0E40               	movlw	64
 31572  015110  0100               	movlb	0	; () banked
 31573  015112  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 31574  015114  ECAF  F0C1         	call	___ftdiv	;wreg free
 31575  015118  C0A5  F106         	movff	?___ftdiv,_Generator_RPM_New
 31576  01511C  C0A6  F107         	movff	?___ftdiv+1,_Generator_RPM_New+1
 31577  015120  C0A7  F108         	movff	?___ftdiv+2,_Generator_RPM_New+2
 31578  015124                     l22838:
 31579                           
 31580                           ;RPM_Measurement.c: 131: }
 31581                           ;RPM_Measurement.c: 133: if(Turbine_state == RUNNING_STATE)
 31582  015124  0E02               	movlw	2
 31583  015126  0100               	movlb	0	; () banked
 31584  015128  19F0               	xorwf	_Turbine_state& (0+255),w,b
 31585  01512A  A4D8               	btfss	status,2,c
 31586  01512C  D051               	goto	l3792
 31587                           
 31588                           ; BSR set to: 0
 31589                           ;RPM_Measurement.c: 134: {
 31590                           ;RPM_Measurement.c: 135: if ( (Generator_RPM_Old > (Generator_RPM_New * 0.8)) && (Genera
      +                          tor_RPM_Old < (Generator_RPM_New * 1.2)) )
 31591  01512E  0ECD               	movlw	205
 31592  015130  0100               	movlb	0	; () banked
 31593  015132  6F77               	movwf	___ftmul@f2& (0+255),b
 31594  015134  0E4C               	movlw	76
 31595  015136  0100               	movlb	0	; () banked
 31596  015138  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31597  01513A  0E3F               	movlw	63
 31598  01513C  0100               	movlb	0	; () banked
 31599  01513E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31600  015140  C106  F074         	movff	_Generator_RPM_New,___ftmul@f1
 31601  015144  C107  F075         	movff	_Generator_RPM_New+1,___ftmul@f1+1
 31602  015148  C108  F076         	movff	_Generator_RPM_New+2,___ftmul@f1+2
 31603  01514C  EC00  F0C1         	call	___ftmul	;wreg free
 31604  015150  C074  F099         	movff	?___ftmul,___ftge@ff1
 31605  015154  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
 31606  015158  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
 31607  01515C  C109  F09C         	movff	_Generator_RPM_Old,___ftge@ff2
 31608  015160  C10A  F09D         	movff	_Generator_RPM_Old+1,___ftge@ff2+1
 31609  015164  C10B  F09E         	movff	_Generator_RPM_Old+2,___ftge@ff2+2
 31610  015168  EC4B  F0CB         	call	___ftge	;wreg free
 31611  01516C  0100               	movlb	0	; () banked
 31612  01516E  B0D8               	btfsc	status,0,c
 31613  015170  D022               	goto	l3793
 31614                           
 31615                           ; BSR set to: 0
 31616  015172  C109  F099         	movff	_Generator_RPM_Old,___ftge@ff1
 31617  015176  C10A  F09A         	movff	_Generator_RPM_Old+1,___ftge@ff1+1
 31618  01517A  C10B  F09B         	movff	_Generator_RPM_Old+2,___ftge@ff1+2
 31619  01517E  0E9A               	movlw	154
 31620  015180  0100               	movlb	0	; () banked
 31621  015182  6F77               	movwf	___ftmul@f2& (0+255),b
 31622  015184  0E99               	movlw	153
 31623  015186  0100               	movlb	0	; () banked
 31624  015188  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31625  01518A  0E3F               	movlw	63
 31626  01518C  0100               	movlb	0	; () banked
 31627  01518E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31628  015190  C106  F074         	movff	_Generator_RPM_New,___ftmul@f1
 31629  015194  C107  F075         	movff	_Generator_RPM_New+1,___ftmul@f1+1
 31630  015198  C108  F076         	movff	_Generator_RPM_New+2,___ftmul@f1+2
 31631  01519C  EC00  F0C1         	call	___ftmul	;wreg free
 31632  0151A0  C074  F09C         	movff	?___ftmul,___ftge@ff2
 31633  0151A4  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
 31634  0151A8  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
 31635  0151AC  EC4B  F0CB         	call	___ftge	;wreg free
 31636  0151B0  0100               	movlb	0	; () banked
 31637  0151B2  A0D8               	btfss	status,0,c
 31638  0151B4  D00D               	goto	l3792
 31639  0151B6                     l3793:
 31640                           
 31641                           ; BSR set to: 0
 31642                           ;RPM_Measurement.c: 139: else
 31643                           ;RPM_Measurement.c: 140: {
 31644                           ;RPM_Measurement.c: 141: Generator_RPM_FLT = Generator_RPM_Old;
 31645  0151B6  C109  F004         	movff	_Generator_RPM_Old,_Generator_RPM_FLT
 31646  0151BA  C10A  F005         	movff	_Generator_RPM_Old+1,_Generator_RPM_FLT+1
 31647  0151BE  C10B  F006         	movff	_Generator_RPM_Old+2,_Generator_RPM_FLT+2
 31648                           
 31649                           ;RPM_Measurement.c: 142: Generator_RPM_New = Generator_RPM_Old;
 31650  0151C2  C109  F106         	movff	_Generator_RPM_Old,_Generator_RPM_New
 31651  0151C6  C10A  F107         	movff	_Generator_RPM_Old+1,_Generator_RPM_New+1
 31652  0151CA  C10B  F108         	movff	_Generator_RPM_Old+2,_Generator_RPM_New+2
 31653                           
 31654                           ; BSR set to: 0
 31655                           ;RPM_Measurement.c: 143: }
 31656                           ;RPM_Measurement.c: 144: }
 31657  0151CE  D006               	goto	l22846
 31658  0151D0                     l3792:
 31659                           
 31660                           ; BSR set to: 0
 31661                           ;RPM_Measurement.c: 145: else
 31662                           ;RPM_Measurement.c: 146: {
 31663                           ;RPM_Measurement.c: 147: Generator_RPM_FLT = Generator_RPM_New;
 31664  0151D0  C106  F004         	movff	_Generator_RPM_New,_Generator_RPM_FLT
 31665  0151D4  C107  F005         	movff	_Generator_RPM_New+1,_Generator_RPM_FLT+1
 31666  0151D8  C108  F006         	movff	_Generator_RPM_New+2,_Generator_RPM_FLT+2
 31667  0151DC                     l22846:
 31668                           
 31669                           ; BSR set to: 0
 31670                           ;RPM_Measurement.c: 148: }
 31671                           ;RPM_Measurement.c: 149: Generator_RPM_INT = Generator_RPM_FLT;
 31672  0151DC  C004  F08A         	movff	_Generator_RPM_FLT,___fttol@f1
 31673  0151E0  C005  F08B         	movff	_Generator_RPM_FLT+1,___fttol@f1+1
 31674  0151E4  C006  F08C         	movff	_Generator_RPM_FLT+2,___fttol@f1+2
 31675  0151E8  EC55  F0C2         	call	___fttol	;wreg free
 31676  0151EC  C08A  F288         	movff	?___fttol,_Generator_RPM_INT
 31677  0151F0  C08B  F289         	movff	?___fttol+1,_Generator_RPM_INT+1
 31678                           
 31679                           ;RPM_Measurement.c: 152: Timer1_OF_counter_Generator = 0;
 31680  0151F4  0E00               	movlw	0
 31681  0151F6  0103               	movlb	3	; () banked
 31682  0151F8  6FF2               	movwf	(_Timer1_OF_counter_Generator+1)& (0+255),b
 31683  0151FA  0E00               	movlw	0
 31684  0151FC  6FF1               	movwf	_Timer1_OF_counter_Generator& (0+255),b
 31685                           
 31686                           ; BSR set to: 3
 31687                           ;RPM_Measurement.c: 153: GRPM_Pulse_width = 0;
 31688  0151FE  0E00               	movlw	0
 31689  015200  0102               	movlb	2	; () banked
 31690  015202  6FF4               	movwf	(_GRPM_Pulse_width+1)& (0+255),b
 31691  015204  0E00               	movlw	0
 31692  015206  6FF3               	movwf	_GRPM_Pulse_width& (0+255),b
 31693                           
 31694                           ; BSR set to: 2
 31695                           ;RPM_Measurement.c: 154: GRPM_Frequency = 0;
 31696  015208  0E00               	movlw	0
 31697  01520A  0104               	movlb	4	; () banked
 31698  01520C  6FE1               	movwf	_GRPM_Frequency& (0+255),b
 31699  01520E  0E00               	movlw	0
 31700  015210  0104               	movlb	4	; () banked
 31701  015212  6FE2               	movwf	(_GRPM_Frequency+1)& (0+255),b
 31702  015214  0E00               	movlw	0
 31703  015216  0104               	movlb	4	; () banked
 31704  015218  6FE3               	movwf	(_GRPM_Frequency+2)& (0+255),b
 31705                           
 31706                           ; BSR set to: 4
 31707                           ;RPM_Measurement.c: 155: GRPM_Time = 0;
 31708  01521A  0E00               	movlw	0
 31709  01521C  0104               	movlb	4	; () banked
 31710  01521E  6FA5               	movwf	_GRPM_Time& (0+255),b
 31711  015220  0E00               	movlw	0
 31712  015222  0104               	movlb	4	; () banked
 31713  015224  6FA6               	movwf	(_GRPM_Time+1)& (0+255),b
 31714  015226  0E00               	movlw	0
 31715  015228  0104               	movlb	4	; () banked
 31716  01522A  6FA7               	movwf	(_GRPM_Time+2)& (0+255),b
 31717                           
 31718                           ; BSR set to: 4
 31719                           ;RPM_Measurement.c: 156: GRPM_Time_1 = 0;
 31720  01522C  0E00               	movlw	0
 31721  01522E  0102               	movlb	2	; () banked
 31722  015230  6FE7               	movwf	_GRPM_Time_1& (0+255),b
 31723  015232  0E00               	movlw	0
 31724  015234  0102               	movlb	2	; () banked
 31725  015236  6FE8               	movwf	(_GRPM_Time_1+1)& (0+255),b
 31726  015238  0E00               	movlw	0
 31727  01523A  0102               	movlb	2	; () banked
 31728  01523C  6FE9               	movwf	(_GRPM_Time_1+2)& (0+255),b
 31729                           
 31730                           ; BSR set to: 2
 31731                           ;RPM_Measurement.c: 158: CCP8IE = 1;
 31732  01523E  8AB6               	bsf	4022,5,c	;volatile
 31733                           
 31734                           ; BSR set to: 2
 31735                           ;RPM_Measurement.c: 159: CCP8IF = 0;
 31736  015240  9AB7               	bcf	4023,5,c	;volatile
 31737                           
 31738                           ; BSR set to: 2
 31739  015242  0012               	return		;funcret
 31740  015244                     __end_of_Generator_RPM_Cal:
 31741                           	opt stack 0
 31742                           tblptru	equ	0xFF8
 31743                           tblptrh	equ	0xFF7
 31744                           tblptrl	equ	0xFF6
 31745                           tablat	equ	0xFF5
 31746                           prodh	equ	0xFF4
 31747                           prodl	equ	0xFF3
 31748                           intcon	equ	0xFF2
 31749                           postinc0	equ	0xFEE
 31750                           wreg	equ	0xFE8
 31751                           postdec1	equ	0xFE5
 31752                           fsr1h	equ	0xFE2
 31753                           fsr1l	equ	0xFE1
 31754                           indf2	equ	0xFDF
 31755                           postinc2	equ	0xFDE
 31756                           postdec2	equ	0xFDD
 31757                           fsr2h	equ	0xFDA
 31758                           fsr2l	equ	0xFD9
 31759                           status	equ	0xFD8
 31760                           
 31761 ;; *************** function ___lwtoft *****************
 31762 ;; Defined at:
 31763 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
 31764 ;; Parameters:    Size  Location     Type
 31765 ;;  c               2    8[BANK0 ] unsigned int 
 31766 ;; Auto vars:     Size  Location     Type
 31767 ;;		None
 31768 ;; Return value:  Size  Location     Type
 31769 ;;                  3    8[BANK0 ] float 
 31770 ;; Registers used:
 31771 ;;		wreg, status,2, status,0, cstack
 31772 ;; Tracked objects:
 31773 ;;		On entry : 0/0
 31774 ;;		On exit  : 0/0
 31775 ;;		Unchanged: 0/0
 31776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31777 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31780 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31781 ;;Total ram usage:        3 bytes
 31782 ;; Hardware stack levels used:    1
 31783 ;; Hardware stack levels required when called:    4
 31784 ;; This function calls:
 31785 ;;		___ftpack
 31786 ;; This function is called by:
 31787 ;;		_Turbine_RPM_Cal
 31788 ;;		_Generator_RPM_Cal
 31789 ;;		_Wind_Speed_Cal
 31790 ;;		_Wind_Speed_2_Cal
 31791 ;;		_VFD_RS485_Data
 31792 ;;		_Temp_Read
 31793 ;;		_Volt_Curr_Read
 31794 ;; This function uses a non-reentrant model
 31795 ;;
 31796                           
 31797                           	psect	text119
 31798  01AF9C                     __ptext119:
 31799                           	opt stack 0
 31800  01AF9C                     ___lwtoft:
 31801                           	opt stack 25
 31802                           
 31803                           ; BSR set to: 2
 31804                           ;incstack = 0
 31805  01AF9C  C068  F060         	movff	___lwtoft@c,___ftpack@arg
 31806  01AFA0  C069  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
 31807  01AFA4  0100               	movlb	0	; () banked
 31808  01AFA6  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 31809  01AFA8  0E8E               	movlw	142
 31810  01AFAA  0100               	movlb	0	; () banked
 31811  01AFAC  6F63               	movwf	___ftpack@exp& (0+255),b
 31812  01AFAE  0E00               	movlw	0
 31813  01AFB0  0100               	movlb	0	; () banked
 31814  01AFB2  6F64               	movwf	___ftpack@sign& (0+255),b
 31815  01AFB4  EC4E  F0C5         	call	___ftpack	;wreg free
 31816  01AFB8  C060  F068         	movff	?___ftpack,?___lwtoft
 31817  01AFBC  C061  F069         	movff	?___ftpack+1,?___lwtoft+1
 31818  01AFC0  C062  F06A         	movff	?___ftpack+2,?___lwtoft+2
 31819  01AFC4  0012               	return	
 31820  01AFC6                     __end_of___lwtoft:
 31821                           	opt stack 0
 31822                           tblptru	equ	0xFF8
 31823                           tblptrh	equ	0xFF7
 31824                           tblptrl	equ	0xFF6
 31825                           tablat	equ	0xFF5
 31826                           prodh	equ	0xFF4
 31827                           prodl	equ	0xFF3
 31828                           intcon	equ	0xFF2
 31829                           postinc0	equ	0xFEE
 31830                           wreg	equ	0xFE8
 31831                           postdec1	equ	0xFE5
 31832                           fsr1h	equ	0xFE2
 31833                           fsr1l	equ	0xFE1
 31834                           indf2	equ	0xFDF
 31835                           postinc2	equ	0xFDE
 31836                           postdec2	equ	0xFDD
 31837                           fsr2h	equ	0xFDA
 31838                           fsr2l	equ	0xFD9
 31839                           status	equ	0xFD8
 31840                           
 31841 ;; *************** function _Freq_Calc *****************
 31842 ;; Defined at:
 31843 ;;		line 329 in file "Power_Meter.c"
 31844 ;; Parameters:    Size  Location     Type
 31845 ;;		None
 31846 ;; Auto vars:     Size  Location     Type
 31847 ;;		None
 31848 ;; Return value:  Size  Location     Type
 31849 ;;                  1    wreg      void 
 31850 ;; Registers used:
 31851 ;;		wreg, status,2, status,0, cstack
 31852 ;; Tracked objects:
 31853 ;;		On entry : 0/0
 31854 ;;		On exit  : 0/0
 31855 ;;		Unchanged: 0/0
 31856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31858 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31860 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31861 ;;Total ram usage:        3 bytes
 31862 ;; Hardware stack levels used:    1
 31863 ;; Hardware stack levels required when called:    5
 31864 ;; This function calls:
 31865 ;;		___ftadd
 31866 ;;		___ftdiv
 31867 ;;		___ftge
 31868 ;;		___ftmul
 31869 ;;		___ftneg
 31870 ;; This function is called by:
 31871 ;;		_main
 31872 ;; This function uses a non-reentrant model
 31873 ;;
 31874                           
 31875                           	psect	text120
 31876  0170B4                     __ptext120:
 31877                           	opt stack 0
 31878  0170B4                     _Freq_Calc:
 31879                           	opt stack 25
 31880                           
 31881                           ;Power_Meter.c: 331: if(R_V_New > R_V_Old)
 31882                           
 31883                           ;incstack = 0
 31884  0170B4  C0D0  F099         	movff	_R_V_Old,___ftge@ff1
 31885  0170B8  C0D1  F09A         	movff	_R_V_Old+1,___ftge@ff1+1
 31886  0170BC  C0D2  F09B         	movff	_R_V_Old+2,___ftge@ff1+2
 31887  0170C0  C0F7  F09C         	movff	_R_V_New,___ftge@ff2
 31888  0170C4  C0F8  F09D         	movff	_R_V_New+1,___ftge@ff2+1
 31889  0170C8  C0F9  F09E         	movff	_R_V_New+2,___ftge@ff2+2
 31890  0170CC  EC4B  F0CB         	call	___ftge	;wreg free
 31891  0170D0  0100               	movlb	0	; () banked
 31892  0170D2  B0D8               	btfsc	status,0,c
 31893  0170D4  D02E               	goto	l22518
 31894                           
 31895                           ; BSR set to: 0
 31896                           ;Power_Meter.c: 332: {
 31897                           ;Power_Meter.c: 333: Time_Diff = (R_V_New - R_V_Old + 1);
 31898  0170D6  C0F7  F090         	movff	_R_V_New,___ftadd@f2
 31899  0170DA  C0F8  F091         	movff	_R_V_New+1,___ftadd@f2+1
 31900  0170DE  C0F9  F092         	movff	_R_V_New+2,___ftadd@f2+2
 31901  0170E2  C0D0  F083         	movff	_R_V_Old,___ftneg@f1
 31902  0170E6  C0D1  F084         	movff	_R_V_Old+1,___ftneg@f1+1
 31903  0170EA  C0D2  F085         	movff	_R_V_Old+2,___ftneg@f1+2
 31904  0170EE  EC1D  F0D7         	call	___ftneg	;wreg free
 31905  0170F2  C083  F08D         	movff	?___ftneg,___ftadd@f1
 31906  0170F6  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 31907  0170FA  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 31908  0170FE  ECBE  F0B2         	call	___ftadd	;wreg free
 31909  017102  C08D  F0B4         	movff	?___ftadd,_Freq_Calc$8078
 31910  017106  C08E  F0B5         	movff	?___ftadd+1,_Freq_Calc$8078+1
 31911  01710A  C08F  F0B6         	movff	?___ftadd+2,_Freq_Calc$8078+2
 31912                           
 31913                           ;Power_Meter.c: 332: {
 31914                           ;Power_Meter.c: 333: Time_Diff = (R_V_New - R_V_Old + 1);
 31915  01710E  C0B4  F08D         	movff	_Freq_Calc$8078,___ftadd@f1
 31916  017112  C0B5  F08E         	movff	_Freq_Calc$8078+1,___ftadd@f1+1
 31917  017116  C0B6  F08F         	movff	_Freq_Calc$8078+2,___ftadd@f1+2
 31918  01711A  0E00               	movlw	0
 31919  01711C  0100               	movlb	0	; () banked
 31920  01711E  6F90               	movwf	___ftadd@f2& (0+255),b
 31921  017120  0E80               	movlw	128
 31922  017122  0100               	movlb	0	; () banked
 31923  017124  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 31924  017126  0E3F               	movlw	63
 31925  017128  0100               	movlb	0	; () banked
 31926  01712A  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 31927  01712C  ECBE  F0B2         	call	___ftadd	;wreg free
 31928  017130  D02D               	goto	L16
 31929  017132                     l22518:
 31930                           
 31931                           ;Power_Meter.c: 335: else
 31932                           ;Power_Meter.c: 336: {
 31933                           ;Power_Meter.c: 337: Time_Diff = ((R_V_New - R_V_Old + 1) + 65536);
 31934  017132  C0F7  F090         	movff	_R_V_New,___ftadd@f2
 31935  017136  C0F8  F091         	movff	_R_V_New+1,___ftadd@f2+1
 31936  01713A  C0F9  F092         	movff	_R_V_New+2,___ftadd@f2+2
 31937  01713E  C0D0  F083         	movff	_R_V_Old,___ftneg@f1
 31938  017142  C0D1  F084         	movff	_R_V_Old+1,___ftneg@f1+1
 31939  017146  C0D2  F085         	movff	_R_V_Old+2,___ftneg@f1+2
 31940  01714A  EC1D  F0D7         	call	___ftneg	;wreg free
 31941  01714E  C083  F08D         	movff	?___ftneg,___ftadd@f1
 31942  017152  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 31943  017156  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 31944  01715A  ECBE  F0B2         	call	___ftadd	;wreg free
 31945  01715E  C08D  F0B4         	movff	?___ftadd,_Freq_Calc$8078
 31946  017162  C08E  F0B5         	movff	?___ftadd+1,_Freq_Calc$8078+1
 31947  017166  C08F  F0B6         	movff	?___ftadd+2,_Freq_Calc$8078+2
 31948                           
 31949                           ;Power_Meter.c: 335: else
 31950                           ;Power_Meter.c: 336: {
 31951                           ;Power_Meter.c: 337: Time_Diff = ((R_V_New - R_V_Old + 1) + 65536);
 31952  01716A  C0B4  F08D         	movff	_Freq_Calc$8078,___ftadd@f1
 31953  01716E  C0B5  F08E         	movff	_Freq_Calc$8078+1,___ftadd@f1+1
 31954  017172  C0B6  F08F         	movff	_Freq_Calc$8078+2,___ftadd@f1+2
 31955  017176  0E01               	movlw	1
 31956  017178  0100               	movlb	0	; () banked
 31957  01717A  6F90               	movwf	___ftadd@f2& (0+255),b
 31958  01717C  0E80               	movlw	128
 31959  01717E  0100               	movlb	0	; () banked
 31960  017180  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 31961  017182  0E47               	movlw	71
 31962  017184  0100               	movlb	0	; () banked
 31963  017186  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 31964  017188  ECBE  F0B2         	call	___ftadd	;wreg free
 31965  01718C                     L16:
 31966  01718C  C08D  F4F0         	movff	?___ftadd,_Time_Diff
 31967  017190  C08E  F4F1         	movff	?___ftadd+1,_Time_Diff+1
 31968  017194  C08F  F4F2         	movff	?___ftadd+2,_Time_Diff+2
 31969                           
 31970                           ;Power_Meter.c: 338: }
 31971                           ;Power_Meter.c: 340: Time_Old = Time_New;
 31972  017198  C1A4  F227         	movff	_Time_New,_Time_Old
 31973  01719C  C1A5  F228         	movff	_Time_New+1,_Time_Old+1
 31974  0171A0  C1A6  F229         	movff	_Time_New+2,_Time_Old+2
 31975                           
 31976                           ;Power_Meter.c: 341: Time_New = (0.000004 * Time_Diff);
 31977  0171A4  C4F0  F074         	movff	_Time_Diff,___ftmul@f1
 31978  0171A8  C4F1  F075         	movff	_Time_Diff+1,___ftmul@f1+1
 31979  0171AC  C4F2  F076         	movff	_Time_Diff+2,___ftmul@f1+2
 31980  0171B0  0E38               	movlw	56
 31981  0171B2  0100               	movlb	0	; () banked
 31982  0171B4  6F77               	movwf	___ftmul@f2& (0+255),b
 31983  0171B6  0E86               	movlw	134
 31984  0171B8  0100               	movlb	0	; () banked
 31985  0171BA  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31986  0171BC  0E36               	movlw	54
 31987  0171BE  0100               	movlb	0	; () banked
 31988  0171C0  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31989  0171C2  EC00  F0C1         	call	___ftmul	;wreg free
 31990  0171C6  C074  F1A4         	movff	?___ftmul,_Time_New
 31991  0171CA  C075  F1A5         	movff	?___ftmul+1,_Time_New+1
 31992  0171CE  C076  F1A6         	movff	?___ftmul+2,_Time_New+2
 31993                           
 31994                           ;Power_Meter.c: 343: if ( (Time_Old > (Time_New * 0.8)) && (Time_Old < (Time_New * 1.2))
      +                          )
 31995  0171D2  0ECD               	movlw	205
 31996  0171D4  0100               	movlb	0	; () banked
 31997  0171D6  6F77               	movwf	___ftmul@f2& (0+255),b
 31998  0171D8  0E4C               	movlw	76
 31999  0171DA  0100               	movlb	0	; () banked
 32000  0171DC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32001  0171DE  0E3F               	movlw	63
 32002  0171E0  0100               	movlb	0	; () banked
 32003  0171E2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32004  0171E4  C1A4  F074         	movff	_Time_New,___ftmul@f1
 32005  0171E8  C1A5  F075         	movff	_Time_New+1,___ftmul@f1+1
 32006  0171EC  C1A6  F076         	movff	_Time_New+2,___ftmul@f1+2
 32007  0171F0  EC00  F0C1         	call	___ftmul	;wreg free
 32008  0171F4  C074  F099         	movff	?___ftmul,___ftge@ff1
 32009  0171F8  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
 32010  0171FC  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
 32011  017200  C227  F09C         	movff	_Time_Old,___ftge@ff2
 32012  017204  C228  F09D         	movff	_Time_Old+1,___ftge@ff2+1
 32013  017208  C229  F09E         	movff	_Time_Old+2,___ftge@ff2+2
 32014  01720C  EC4B  F0CB         	call	___ftge	;wreg free
 32015  017210  0100               	movlb	0	; () banked
 32016  017212  B0D8               	btfsc	status,0,c
 32017  017214  0012               	return	
 32018                           
 32019                           ; BSR set to: 0
 32020  017216  C227  F099         	movff	_Time_Old,___ftge@ff1
 32021  01721A  C228  F09A         	movff	_Time_Old+1,___ftge@ff1+1
 32022  01721E  C229  F09B         	movff	_Time_Old+2,___ftge@ff1+2
 32023  017222  0E9A               	movlw	154
 32024  017224  0100               	movlb	0	; () banked
 32025  017226  6F77               	movwf	___ftmul@f2& (0+255),b
 32026  017228  0E99               	movlw	153
 32027  01722A  0100               	movlb	0	; () banked
 32028  01722C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32029  01722E  0E3F               	movlw	63
 32030  017230  0100               	movlb	0	; () banked
 32031  017232  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32032  017234  C1A4  F074         	movff	_Time_New,___ftmul@f1
 32033  017238  C1A5  F075         	movff	_Time_New+1,___ftmul@f1+1
 32034  01723C  C1A6  F076         	movff	_Time_New+2,___ftmul@f1+2
 32035  017240  EC00  F0C1         	call	___ftmul	;wreg free
 32036  017244  C074  F09C         	movff	?___ftmul,___ftge@ff2
 32037  017248  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
 32038  01724C  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
 32039  017250  EC4B  F0CB         	call	___ftge	;wreg free
 32040  017254  0100               	movlb	0	; () banked
 32041  017256  B0D8               	btfsc	status,0,c
 32042  017258  0012               	return	
 32043                           
 32044                           ; BSR set to: 0
 32045                           ;Power_Meter.c: 344: {
 32046                           ;Power_Meter.c: 345: Frequency = (1 / Time_New);
 32047  01725A  0E00               	movlw	0
 32048  01725C  0100               	movlb	0	; () banked
 32049  01725E  6FA5               	movwf	___ftdiv@f1& (0+255),b
 32050  017260  0E80               	movlw	128
 32051  017262  0100               	movlb	0	; () banked
 32052  017264  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
 32053  017266  0E3F               	movlw	63
 32054  017268  0100               	movlb	0	; () banked
 32055  01726A  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
 32056  01726C  C1A4  F0A8         	movff	_Time_New,___ftdiv@f2
 32057  017270  C1A5  F0A9         	movff	_Time_New+1,___ftdiv@f2+1
 32058  017274  C1A6  F0AA         	movff	_Time_New+2,___ftdiv@f2+2
 32059  017278  ECAF  F0C1         	call	___ftdiv	;wreg free
 32060  01727C  C0A5  F0C7         	movff	?___ftdiv,_Frequency
 32061  017280  C0A6  F0C8         	movff	?___ftdiv+1,_Frequency+1
 32062  017284  C0A7  F0C9         	movff	?___ftdiv+2,_Frequency+2
 32063  017288  0012               	return	
 32064  01728A                     __end_of_Freq_Calc:
 32065                           	opt stack 0
 32066                           tblptru	equ	0xFF8
 32067                           tblptrh	equ	0xFF7
 32068                           tblptrl	equ	0xFF6
 32069                           tablat	equ	0xFF5
 32070                           prodh	equ	0xFF4
 32071                           prodl	equ	0xFF3
 32072                           intcon	equ	0xFF2
 32073                           postinc0	equ	0xFEE
 32074                           wreg	equ	0xFE8
 32075                           postdec1	equ	0xFE5
 32076                           fsr1h	equ	0xFE2
 32077                           fsr1l	equ	0xFE1
 32078                           indf2	equ	0xFDF
 32079                           postinc2	equ	0xFDE
 32080                           postdec2	equ	0xFDD
 32081                           fsr2h	equ	0xFDA
 32082                           fsr2l	equ	0xFD9
 32083                           status	equ	0xFD8
 32084                           
 32085 ;; *************** function _Cons_Gene *****************
 32086 ;; Defined at:
 32087 ;;		line 315 in file "Power_Meter.c"
 32088 ;; Parameters:    Size  Location     Type
 32089 ;;		None
 32090 ;; Auto vars:     Size  Location     Type
 32091 ;;		None
 32092 ;; Return value:  Size  Location     Type
 32093 ;;                  1    wreg      void 
 32094 ;; Registers used:
 32095 ;;		wreg, status,2, status,0, cstack
 32096 ;; Tracked objects:
 32097 ;;		On entry : 0/0
 32098 ;;		On exit  : 0/0
 32099 ;;		Unchanged: 0/0
 32100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32105 ;;Total ram usage:        0 bytes
 32106 ;; Hardware stack levels used:    1
 32107 ;; Hardware stack levels required when called:    5
 32108 ;; This function calls:
 32109 ;;		___ftge
 32110 ;;		___ftmul
 32111 ;; This function is called by:
 32112 ;;		_main
 32113 ;; This function uses a non-reentrant model
 32114 ;;
 32115                           
 32116                           	psect	text121
 32117  018990                     __ptext121:
 32118                           	opt stack 0
 32119  018990                     _Cons_Gene:
 32120                           	opt stack 25
 32121                           
 32122                           ;Power_Meter.c: 317: if((R_V_Max > (2119)) && (R_C_Max > (2119)))
 32123                           
 32124                           ;incstack = 0
 32125  018990  0E70               	movlw	112
 32126  018992  0100               	movlb	0	; () banked
 32127  018994  6F99               	movwf	___ftge@ff1& (0+255),b
 32128  018996  0E04               	movlw	4
 32129  018998  0100               	movlb	0	; () banked
 32130  01899A  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 32131  01899C  0E45               	movlw	69
 32132  01899E  0100               	movlb	0	; () banked
 32133  0189A0  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 32134  0189A2  C112  F09C         	movff	_R_V_Max,___ftge@ff2
 32135  0189A6  C113  F09D         	movff	_R_V_Max+1,___ftge@ff2+1
 32136  0189AA  C114  F09E         	movff	_R_V_Max+2,___ftge@ff2+2
 32137  0189AE  EC4B  F0CB         	call	___ftge	;wreg free
 32138  0189B2  0100               	movlb	0	; () banked
 32139  0189B4  B0D8               	btfsc	status,0,c
 32140  0189B6  D046               	goto	l22808
 32141                           
 32142                           ; BSR set to: 0
 32143  0189B8  0E70               	movlw	112
 32144  0189BA  0100               	movlb	0	; () banked
 32145  0189BC  6F99               	movwf	___ftge@ff1& (0+255),b
 32146  0189BE  0E04               	movlw	4
 32147  0189C0  0100               	movlb	0	; () banked
 32148  0189C2  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 32149  0189C4  0E45               	movlw	69
 32150  0189C6  0100               	movlb	0	; () banked
 32151  0189C8  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 32152  0189CA  C10C  F09C         	movff	_R_C_Max,___ftge@ff2
 32153  0189CE  C10D  F09D         	movff	_R_C_Max+1,___ftge@ff2+1
 32154  0189D2  C10E  F09E         	movff	_R_C_Max+2,___ftge@ff2+2
 32155  0189D6  EC4B  F0CB         	call	___ftge	;wreg free
 32156  0189DA  0100               	movlb	0	; () banked
 32157  0189DC  B0D8               	btfsc	status,0,c
 32158  0189DE  D032               	goto	l22808
 32159                           
 32160                           ; BSR set to: 0
 32161                           ;Power_Meter.c: 318: {
 32162                           ;Power_Meter.c: 319: Consumption = 0;
 32163  0189E0  0E00               	movlw	0
 32164  0189E2  0102               	movlb	2	; () banked
 32165  0189E4  6FB7               	movwf	_Consumption& (0+255),b
 32166                           
 32167                           ; BSR set to: 2
 32168                           ;Power_Meter.c: 320: KW = ((-1) * KW);
 32169  0189E6  C022  F074         	movff	_KW,___ftmul@f1
 32170  0189EA  C023  F075         	movff	_KW+1,___ftmul@f1+1
 32171  0189EE  C024  F076         	movff	_KW+2,___ftmul@f1+2
 32172  0189F2  0E00               	movlw	0
 32173  0189F4  0100               	movlb	0	; () banked
 32174  0189F6  6F77               	movwf	___ftmul@f2& (0+255),b
 32175  0189F8  0E80               	movlw	128
 32176  0189FA  0100               	movlb	0	; () banked
 32177  0189FC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32178  0189FE  0EBF               	movlw	191
 32179  018A00  0100               	movlb	0	; () banked
 32180  018A02  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32181  018A04  EC00  F0C1         	call	___ftmul	;wreg free
 32182  018A08  C074  F022         	movff	?___ftmul,_KW
 32183  018A0C  C075  F023         	movff	?___ftmul+1,_KW+1
 32184  018A10  C076  F024         	movff	?___ftmul+2,_KW+2
 32185                           
 32186                           ;Power_Meter.c: 321: Y_KW = ((-1) * Y_KW);
 32187  018A14  C2F0  F074         	movff	_Y_KW,___ftmul@f1
 32188  018A18  C2F1  F075         	movff	_Y_KW+1,___ftmul@f1+1
 32189  018A1C  C2F2  F076         	movff	_Y_KW+2,___ftmul@f1+2
 32190  018A20  0E00               	movlw	0
 32191  018A22  0100               	movlb	0	; () banked
 32192  018A24  6F77               	movwf	___ftmul@f2& (0+255),b
 32193  018A26  0E80               	movlw	128
 32194  018A28  0100               	movlb	0	; () banked
 32195  018A2A  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32196  018A2C  0EBF               	movlw	191
 32197  018A2E  0100               	movlb	0	; () banked
 32198  018A30  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32199  018A32  EC00  F0C1         	call	___ftmul	;wreg free
 32200  018A36  C074  F2F0         	movff	?___ftmul,_Y_KW
 32201  018A3A  C075  F2F1         	movff	?___ftmul+1,_Y_KW+1
 32202  018A3E  C076  F2F2         	movff	?___ftmul+2,_Y_KW+2
 32203                           
 32204                           ;Power_Meter.c: 322: }
 32205  018A42  0012               	return	
 32206  018A44                     l22808:
 32207                           
 32208                           ;Power_Meter.c: 323: else if((R_V_Max > (2119)) && (R_C_Max < (2119)))
 32209  018A44  0E70               	movlw	112
 32210  018A46  0100               	movlb	0	; () banked
 32211  018A48  6F99               	movwf	___ftge@ff1& (0+255),b
 32212  018A4A  0E04               	movlw	4
 32213  018A4C  0100               	movlb	0	; () banked
 32214  018A4E  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 32215  018A50  0E45               	movlw	69
 32216  018A52  0100               	movlb	0	; () banked
 32217  018A54  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 32218  018A56  C112  F09C         	movff	_R_V_Max,___ftge@ff2
 32219  018A5A  C113  F09D         	movff	_R_V_Max+1,___ftge@ff2+1
 32220  018A5E  C114  F09E         	movff	_R_V_Max+2,___ftge@ff2+2
 32221  018A62  EC4B  F0CB         	call	___ftge	;wreg free
 32222  018A66  0100               	movlb	0	; () banked
 32223  018A68  B0D8               	btfsc	status,0,c
 32224  018A6A  0012               	return	
 32225                           
 32226                           ; BSR set to: 0
 32227  018A6C  C10C  F099         	movff	_R_C_Max,___ftge@ff1
 32228  018A70  C10D  F09A         	movff	_R_C_Max+1,___ftge@ff1+1
 32229  018A74  C10E  F09B         	movff	_R_C_Max+2,___ftge@ff1+2
 32230  018A78  0E70               	movlw	112
 32231  018A7A  0100               	movlb	0	; () banked
 32232  018A7C  6F9C               	movwf	___ftge@ff2& (0+255),b
 32233  018A7E  0E04               	movlw	4
 32234  018A80  0100               	movlb	0	; () banked
 32235  018A82  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 32236  018A84  0E45               	movlw	69
 32237  018A86  0100               	movlb	0	; () banked
 32238  018A88  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 32239  018A8A  EC4B  F0CB         	call	___ftge	;wreg free
 32240  018A8E  0100               	movlb	0	; () banked
 32241  018A90  B0D8               	btfsc	status,0,c
 32242  018A92  0012               	return	
 32243                           
 32244                           ; BSR set to: 0
 32245                           ;Power_Meter.c: 324: {
 32246                           ;Power_Meter.c: 325: Consumption = 1;
 32247  018A94  0E01               	movlw	1
 32248  018A96  0102               	movlb	2	; () banked
 32249  018A98  6FB7               	movwf	_Consumption& (0+255),b
 32250                           
 32251                           ; BSR set to: 2
 32252  018A9A  0012               	return	
 32253  018A9C                     __end_of_Cons_Gene:
 32254                           	opt stack 0
 32255                           tblptru	equ	0xFF8
 32256                           tblptrh	equ	0xFF7
 32257                           tblptrl	equ	0xFF6
 32258                           tablat	equ	0xFF5
 32259                           prodh	equ	0xFF4
 32260                           prodl	equ	0xFF3
 32261                           intcon	equ	0xFF2
 32262                           postinc0	equ	0xFEE
 32263                           wreg	equ	0xFE8
 32264                           postdec1	equ	0xFE5
 32265                           fsr1h	equ	0xFE2
 32266                           fsr1l	equ	0xFE1
 32267                           indf2	equ	0xFDF
 32268                           postinc2	equ	0xFDE
 32269                           postdec2	equ	0xFDD
 32270                           fsr2h	equ	0xFDA
 32271                           fsr2l	equ	0xFD9
 32272                           status	equ	0xFD8
 32273                           
 32274 ;; *************** function _B_PF_Calc *****************
 32275 ;; Defined at:
 32276 ;;		line 520 in file "Power_Meter.c"
 32277 ;; Parameters:    Size  Location     Type
 32278 ;;		None
 32279 ;; Auto vars:     Size  Location     Type
 32280 ;;		None
 32281 ;; Return value:  Size  Location     Type
 32282 ;;                  1    wreg      void 
 32283 ;; Registers used:
 32284 ;;		wreg, status,2, status,0, cstack
 32285 ;; Tracked objects:
 32286 ;;		On entry : 0/0
 32287 ;;		On exit  : 0/0
 32288 ;;		Unchanged: 0/0
 32289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32291 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32293 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32294 ;;Total ram usage:        3 bytes
 32295 ;; Hardware stack levels used:    1
 32296 ;; Hardware stack levels required when called:    5
 32297 ;; This function calls:
 32298 ;;		___ftadd
 32299 ;;		___ftdiv
 32300 ;;		___ftge
 32301 ;;		___ftmul
 32302 ;;		___ftneg
 32303 ;; This function is called by:
 32304 ;;		_main
 32305 ;; This function uses a non-reentrant model
 32306 ;;
 32307                           
 32308                           	psect	text122
 32309  016E86                     __ptext122:
 32310                           	opt stack 0
 32311  016E86                     _B_PF_Calc:
 32312                           	opt stack 25
 32313                           
 32314                           ;Power_Meter.c: 522: if(Bcurr_V_New < Bcurr_V_Old)
 32315                           
 32316                           ;incstack = 0
 32317  016E86  C0F4  F099         	movff	_Bcurr_V_New,___ftge@ff1
 32318  016E8A  C0F5  F09A         	movff	_Bcurr_V_New+1,___ftge@ff1+1
 32319  016E8E  C0F6  F09B         	movff	_Bcurr_V_New+2,___ftge@ff1+2
 32320  016E92  C20C  F09C         	movff	_Bcurr_V_Old,___ftge@ff2
 32321  016E96  C20D  F09D         	movff	_Bcurr_V_Old+1,___ftge@ff2+1
 32322  016E9A  C20E  F09E         	movff	_Bcurr_V_Old+2,___ftge@ff2+2
 32323  016E9E  EC4B  F0CB         	call	___ftge	;wreg free
 32324  016EA2  0100               	movlb	0	; () banked
 32325  016EA4  B0D8               	btfsc	status,0,c
 32326  016EA6  D02E               	goto	l22706
 32327                           
 32328                           ; BSR set to: 0
 32329                           ;Power_Meter.c: 523: {
 32330                           ;Power_Meter.c: 524: B_V_Gap = ((Bcurr_V_New - Bcurr_V_Old + 1) + 65536);
 32331  016EA8  C0F4  F090         	movff	_Bcurr_V_New,___ftadd@f2
 32332  016EAC  C0F5  F091         	movff	_Bcurr_V_New+1,___ftadd@f2+1
 32333  016EB0  C0F6  F092         	movff	_Bcurr_V_New+2,___ftadd@f2+2
 32334  016EB4  C20C  F083         	movff	_Bcurr_V_Old,___ftneg@f1
 32335  016EB8  C20D  F084         	movff	_Bcurr_V_Old+1,___ftneg@f1+1
 32336  016EBC  C20E  F085         	movff	_Bcurr_V_Old+2,___ftneg@f1+2
 32337  016EC0  EC1D  F0D7         	call	___ftneg	;wreg free
 32338  016EC4  C083  F08D         	movff	?___ftneg,___ftadd@f1
 32339  016EC8  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 32340  016ECC  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 32341  016ED0  ECBE  F0B2         	call	___ftadd	;wreg free
 32342  016ED4  C08D  F0B4         	movff	?___ftadd,_B_PF_Calc$8137
 32343  016ED8  C08E  F0B5         	movff	?___ftadd+1,_B_PF_Calc$8137+1
 32344  016EDC  C08F  F0B6         	movff	?___ftadd+2,_B_PF_Calc$8137+2
 32345                           
 32346                           ;Power_Meter.c: 523: {
 32347                           ;Power_Meter.c: 524: B_V_Gap = ((Bcurr_V_New - Bcurr_V_Old + 1) + 65536);
 32348  016EE0  C0B4  F08D         	movff	_B_PF_Calc$8137,___ftadd@f1
 32349  016EE4  C0B5  F08E         	movff	_B_PF_Calc$8137+1,___ftadd@f1+1
 32350  016EE8  C0B6  F08F         	movff	_B_PF_Calc$8137+2,___ftadd@f1+2
 32351  016EEC  0E01               	movlw	1
 32352  016EEE  0100               	movlb	0	; () banked
 32353  016EF0  6F90               	movwf	___ftadd@f2& (0+255),b
 32354  016EF2  0E80               	movlw	128
 32355  016EF4  0100               	movlb	0	; () banked
 32356  016EF6  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 32357  016EF8  0E47               	movlw	71
 32358  016EFA  0100               	movlb	0	; () banked
 32359  016EFC  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 32360  016EFE  ECBE  F0B2         	call	___ftadd	;wreg free
 32361  016F02  D088               	goto	L17
 32362  016F04                     l22706:
 32363                           
 32364                           ;Power_Meter.c: 527: else if((Bcurr_New + 100) < Bcurr_V_New)
 32365  016F04  0E00               	movlw	0
 32366  016F06  0100               	movlb	0	; () banked
 32367  016F08  6F90               	movwf	___ftadd@f2& (0+255),b
 32368  016F0A  0EC8               	movlw	200
 32369  016F0C  0100               	movlb	0	; () banked
 32370  016F0E  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 32371  016F10  0E42               	movlw	66
 32372  016F12  0100               	movlb	0	; () banked
 32373  016F14  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 32374  016F16  C19E  F08D         	movff	_Bcurr_New,___ftadd@f1
 32375  016F1A  C19F  F08E         	movff	_Bcurr_New+1,___ftadd@f1+1
 32376  016F1E  C1A0  F08F         	movff	_Bcurr_New+2,___ftadd@f1+2
 32377  016F22  ECBE  F0B2         	call	___ftadd	;wreg free
 32378  016F26  C08D  F099         	movff	?___ftadd,___ftge@ff1
 32379  016F2A  C08E  F09A         	movff	?___ftadd+1,___ftge@ff1+1
 32380  016F2E  C08F  F09B         	movff	?___ftadd+2,___ftge@ff1+2
 32381  016F32  C0F4  F09C         	movff	_Bcurr_V_New,___ftge@ff2
 32382  016F36  C0F5  F09D         	movff	_Bcurr_V_New+1,___ftge@ff2+1
 32383  016F3A  C0F6  F09E         	movff	_Bcurr_V_New+2,___ftge@ff2+2
 32384  016F3E  EC4B  F0CB         	call	___ftge	;wreg free
 32385  016F42  0100               	movlb	0	; () banked
 32386  016F44  B0D8               	btfsc	status,0,c
 32387  016F46  D034               	goto	l22710
 32388                           
 32389                           ; BSR set to: 0
 32390                           ;Power_Meter.c: 528: {
 32391                           ;Power_Meter.c: 529: B_C_Gap = ((Bcurr_New - Bcurr_V_New + 1) + 65536);
 32392  016F48  C19E  F090         	movff	_Bcurr_New,___ftadd@f2
 32393  016F4C  C19F  F091         	movff	_Bcurr_New+1,___ftadd@f2+1
 32394  016F50  C1A0  F092         	movff	_Bcurr_New+2,___ftadd@f2+2
 32395  016F54  C0F4  F083         	movff	_Bcurr_V_New,___ftneg@f1
 32396  016F58  C0F5  F084         	movff	_Bcurr_V_New+1,___ftneg@f1+1
 32397  016F5C  C0F6  F085         	movff	_Bcurr_V_New+2,___ftneg@f1+2
 32398  016F60  EC1D  F0D7         	call	___ftneg	;wreg free
 32399  016F64  C083  F08D         	movff	?___ftneg,___ftadd@f1
 32400  016F68  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 32401  016F6C  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 32402  016F70  ECBE  F0B2         	call	___ftadd	;wreg free
 32403  016F74  C08D  F0B4         	movff	?___ftadd,_B_PF_Calc$8137
 32404  016F78  C08E  F0B5         	movff	?___ftadd+1,_B_PF_Calc$8137+1
 32405  016F7C  C08F  F0B6         	movff	?___ftadd+2,_B_PF_Calc$8137+2
 32406                           
 32407                           ;Power_Meter.c: 528: {
 32408                           ;Power_Meter.c: 529: B_C_Gap = ((Bcurr_New - Bcurr_V_New + 1) + 65536);
 32409  016F80  C0B4  F08D         	movff	_B_PF_Calc$8137,___ftadd@f1
 32410  016F84  C0B5  F08E         	movff	_B_PF_Calc$8137+1,___ftadd@f1+1
 32411  016F88  C0B6  F08F         	movff	_B_PF_Calc$8137+2,___ftadd@f1+2
 32412  016F8C  0E01               	movlw	1
 32413  016F8E  0100               	movlb	0	; () banked
 32414  016F90  6F90               	movwf	___ftadd@f2& (0+255),b
 32415  016F92  0E80               	movlw	128
 32416  016F94  0100               	movlb	0	; () banked
 32417  016F96  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 32418  016F98  0E47               	movlw	71
 32419  016F9A  0100               	movlb	0	; () banked
 32420  016F9C  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 32421  016F9E  ECBE  F0B2         	call	___ftadd	;wreg free
 32422  016FA2  C08D  F516         	movff	?___ftadd,_B_C_Gap
 32423  016FA6  C08E  F517         	movff	?___ftadd+1,_B_C_Gap+1
 32424  016FAA  C08F  F518         	movff	?___ftadd+2,_B_C_Gap+2
 32425                           
 32426                           ;Power_Meter.c: 530: }
 32427  016FAE  D038               	goto	l9275
 32428  016FB0                     l22710:
 32429                           
 32430                           ;Power_Meter.c: 532: else
 32431                           ;Power_Meter.c: 533: {
 32432                           ;Power_Meter.c: 534: B_C_Gap = (Bcurr_New - Bcurr_V_New);
 32433  016FB0  C0F4  F083         	movff	_Bcurr_V_New,___ftneg@f1
 32434  016FB4  C0F5  F084         	movff	_Bcurr_V_New+1,___ftneg@f1+1
 32435  016FB8  C0F6  F085         	movff	_Bcurr_V_New+2,___ftneg@f1+2
 32436  016FBC  EC1D  F0D7         	call	___ftneg	;wreg free
 32437  016FC0  C083  F08D         	movff	?___ftneg,___ftadd@f1
 32438  016FC4  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 32439  016FC8  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 32440  016FCC  C19E  F090         	movff	_Bcurr_New,___ftadd@f2
 32441  016FD0  C19F  F091         	movff	_Bcurr_New+1,___ftadd@f2+1
 32442  016FD4  C1A0  F092         	movff	_Bcurr_New+2,___ftadd@f2+2
 32443  016FD8  ECBE  F0B2         	call	___ftadd	;wreg free
 32444  016FDC  C08D  F516         	movff	?___ftadd,_B_C_Gap
 32445  016FE0  C08E  F517         	movff	?___ftadd+1,_B_C_Gap+1
 32446  016FE4  C08F  F518         	movff	?___ftadd+2,_B_C_Gap+2
 32447                           
 32448                           ;Power_Meter.c: 535: B_V_Gap = (Bcurr_V_New - Bcurr_V_Old);
 32449  016FE8  C20C  F083         	movff	_Bcurr_V_Old,___ftneg@f1
 32450  016FEC  C20D  F084         	movff	_Bcurr_V_Old+1,___ftneg@f1+1
 32451  016FF0  C20E  F085         	movff	_Bcurr_V_Old+2,___ftneg@f1+2
 32452  016FF4  EC1D  F0D7         	call	___ftneg	;wreg free
 32453  016FF8  C083  F08D         	movff	?___ftneg,___ftadd@f1
 32454  016FFC  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 32455  017000  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 32456  017004  C0F4  F090         	movff	_Bcurr_V_New,___ftadd@f2
 32457  017008  C0F5  F091         	movff	_Bcurr_V_New+1,___ftadd@f2+1
 32458  01700C  C0F6  F092         	movff	_Bcurr_V_New+2,___ftadd@f2+2
 32459  017010  ECBE  F0B2         	call	___ftadd	;wreg free
 32460  017014                     L17:
 32461  017014  C08D  F525         	movff	?___ftadd,_B_V_Gap
 32462  017018  C08E  F526         	movff	?___ftadd+1,_B_V_Gap+1
 32463  01701C  C08F  F527         	movff	?___ftadd+2,_B_V_Gap+2
 32464  017020                     l9275:
 32465                           
 32466                           ;Power_Meter.c: 536: }
 32467                           ;Power_Meter.c: 538: B_Gap_Ratio = (B_C_Gap / B_V_Gap);
 32468  017020  C516  F0A5         	movff	_B_C_Gap,___ftdiv@f1
 32469  017024  C517  F0A6         	movff	_B_C_Gap+1,___ftdiv@f1+1
 32470  017028  C518  F0A7         	movff	_B_C_Gap+2,___ftdiv@f1+2
 32471  01702C  C525  F0A8         	movff	_B_V_Gap,___ftdiv@f2
 32472  017030  C526  F0A9         	movff	_B_V_Gap+1,___ftdiv@f2+1
 32473  017034  C527  F0AA         	movff	_B_V_Gap+2,___ftdiv@f2+2
 32474  017038  ECAF  F0C1         	call	___ftdiv	;wreg free
 32475  01703C  C0A5  F103         	movff	?___ftdiv,_B_Gap_Ratio
 32476  017040  C0A6  F104         	movff	?___ftdiv+1,_B_Gap_Ratio+1
 32477  017044  C0A7  F105         	movff	?___ftdiv+2,_B_Gap_Ratio+2
 32478                           
 32479                           ;Power_Meter.c: 539: B_Deg = B_Gap_Ratio * 360;
 32480  017048  C103  F074         	movff	_B_Gap_Ratio,___ftmul@f1
 32481  01704C  C104  F075         	movff	_B_Gap_Ratio+1,___ftmul@f1+1
 32482  017050  C105  F076         	movff	_B_Gap_Ratio+2,___ftmul@f1+2
 32483  017054  0E00               	movlw	0
 32484  017056  0100               	movlb	0	; () banked
 32485  017058  6F77               	movwf	___ftmul@f2& (0+255),b
 32486  01705A  0EB4               	movlw	180
 32487  01705C  0100               	movlb	0	; () banked
 32488  01705E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32489  017060  0E43               	movlw	67
 32490  017062  0100               	movlb	0	; () banked
 32491  017064  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32492  017066  EC00  F0C1         	call	___ftmul	;wreg free
 32493  01706A  C074  F642         	movff	?___ftmul,_B_Deg
 32494  01706E  C075  F643         	movff	?___ftmul+1,_B_Deg+1
 32495  017072  C076  F644         	movff	?___ftmul+2,_B_Deg+2
 32496                           
 32497                           ;Power_Meter.c: 541: BGR_Arr_1[4] = BGR_Arr_1[3];
 32498  017076  C463  F466         	movff	_BGR_Arr_1+9,_BGR_Arr_1+12
 32499  01707A  C464  F467         	movff	_BGR_Arr_1+10,_BGR_Arr_1+13
 32500  01707E  C465  F468         	movff	_BGR_Arr_1+11,_BGR_Arr_1+14
 32501                           
 32502                           ;Power_Meter.c: 542: BGR_Arr_1[3] = BGR_Arr_1[2];
 32503  017082  C460  F463         	movff	_BGR_Arr_1+6,_BGR_Arr_1+9
 32504  017086  C461  F464         	movff	_BGR_Arr_1+7,_BGR_Arr_1+10
 32505  01708A  C462  F465         	movff	_BGR_Arr_1+8,_BGR_Arr_1+11
 32506                           
 32507                           ;Power_Meter.c: 543: BGR_Arr_1[2] = BGR_Arr_1[1];
 32508  01708E  C45D  F460         	movff	_BGR_Arr_1+3,_BGR_Arr_1+6
 32509  017092  C45E  F461         	movff	_BGR_Arr_1+4,_BGR_Arr_1+7
 32510  017096  C45F  F462         	movff	_BGR_Arr_1+5,_BGR_Arr_1+8
 32511                           
 32512                           ;Power_Meter.c: 544: BGR_Arr_1[1] = BGR_Arr_1[0];
 32513  01709A  C45A  F45D         	movff	_BGR_Arr_1,_BGR_Arr_1+3
 32514  01709E  C45B  F45E         	movff	_BGR_Arr_1+1,_BGR_Arr_1+4
 32515  0170A2  C45C  F45F         	movff	_BGR_Arr_1+2,_BGR_Arr_1+5
 32516                           
 32517                           ;Power_Meter.c: 545: BGR_Arr_1[0] = B_Gap_Ratio;
 32518  0170A6  C103  F45A         	movff	_B_Gap_Ratio,_BGR_Arr_1
 32519  0170AA  C104  F45B         	movff	_B_Gap_Ratio+1,_BGR_Arr_1+1
 32520  0170AE  C105  F45C         	movff	_B_Gap_Ratio+2,_BGR_Arr_1+2
 32521  0170B2  0012               	return		;funcret
 32522  0170B4                     __end_of_B_PF_Calc:
 32523                           	opt stack 0
 32524                           tblptru	equ	0xFF8
 32525                           tblptrh	equ	0xFF7
 32526                           tblptrl	equ	0xFF6
 32527                           tablat	equ	0xFF5
 32528                           prodh	equ	0xFF4
 32529                           prodl	equ	0xFF3
 32530                           intcon	equ	0xFF2
 32531                           postinc0	equ	0xFEE
 32532                           wreg	equ	0xFE8
 32533                           postdec1	equ	0xFE5
 32534                           fsr1h	equ	0xFE2
 32535                           fsr1l	equ	0xFE1
 32536                           indf2	equ	0xFDF
 32537                           postinc2	equ	0xFDE
 32538                           postdec2	equ	0xFDD
 32539                           fsr2h	equ	0xFDA
 32540                           fsr2l	equ	0xFD9
 32541                           status	equ	0xFD8
 32542                           
 32543 ;; *************** function _B_PF_Avg *****************
 32544 ;; Defined at:
 32545 ;;		line 549 in file "Power_Meter.c"
 32546 ;; Parameters:    Size  Location     Type
 32547 ;;		None
 32548 ;; Auto vars:     Size  Location     Type
 32549 ;;		None
 32550 ;; Return value:  Size  Location     Type
 32551 ;;                  1    wreg      void 
 32552 ;; Registers used:
 32553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32554 ;; Tracked objects:
 32555 ;;		On entry : 0/0
 32556 ;;		On exit  : 0/0
 32557 ;;		Unchanged: 0/0
 32558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32560 ;;      Locals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 32561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32562 ;;      Totals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 32563 ;;Total ram usage:       84 bytes
 32564 ;; Hardware stack levels used:    1
 32565 ;; Hardware stack levels required when called:    8
 32566 ;; This function calls:
 32567 ;;		___ftadd
 32568 ;;		___ftdiv
 32569 ;;		___ftge
 32570 ;;		___ftmul
 32571 ;;		_cos
 32572 ;; This function is called by:
 32573 ;;		_main
 32574 ;; This function uses a non-reentrant model
 32575 ;;
 32576                           
 32577                           	psect	text123
 32578  0129D0                     __ptext123:
 32579                           	opt stack 0
 32580  0129D0                     _B_PF_Avg:
 32581                           	opt stack 22
 32582                           
 32583                           ;Power_Meter.c: 551: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 32584                           
 32585                           ;incstack = 0
 32586  0129D0  C463  F090         	movff	_BGR_Arr_1+9,___ftadd@f2
 32587  0129D4  C464  F091         	movff	_BGR_Arr_1+10,___ftadd@f2+1
 32588  0129D8  C465  F092         	movff	_BGR_Arr_1+11,___ftadd@f2+2
 32589  0129DC  C466  F08D         	movff	_BGR_Arr_1+12,___ftadd@f1
 32590  0129E0  C467  F08E         	movff	_BGR_Arr_1+13,___ftadd@f1+1
 32591  0129E4  C468  F08F         	movff	_BGR_Arr_1+14,___ftadd@f1+2
 32592  0129E8  ECBE  F0B2         	call	___ftadd	;wreg free
 32593  0129EC  C08D  F6C3         	movff	?___ftadd,_B_PF_Avg$8138
 32594  0129F0  C08E  F6C4         	movff	?___ftadd+1,_B_PF_Avg$8138+1
 32595  0129F4  C08F  F6C5         	movff	?___ftadd+2,_B_PF_Avg$8138+2
 32596                           
 32597                           ;Power_Meter.c: 551: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 32598  0129F8  C460  F090         	movff	_BGR_Arr_1+6,___ftadd@f2
 32599  0129FC  C461  F091         	movff	_BGR_Arr_1+7,___ftadd@f2+1
 32600  012A00  C462  F092         	movff	_BGR_Arr_1+8,___ftadd@f2+2
 32601  012A04  C6C3  F08D         	movff	_B_PF_Avg$8138,___ftadd@f1
 32602  012A08  C6C4  F08E         	movff	_B_PF_Avg$8138+1,___ftadd@f1+1
 32603  012A0C  C6C5  F08F         	movff	_B_PF_Avg$8138+2,___ftadd@f1+2
 32604  012A10  ECBE  F0B2         	call	___ftadd	;wreg free
 32605  012A14  C08D  F6C6         	movff	?___ftadd,_B_PF_Avg$8139
 32606  012A18  C08E  F6C7         	movff	?___ftadd+1,_B_PF_Avg$8139+1
 32607  012A1C  C08F  F6C8         	movff	?___ftadd+2,_B_PF_Avg$8139+2
 32608                           
 32609                           ;Power_Meter.c: 551: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 32610  012A20  C45D  F090         	movff	_BGR_Arr_1+3,___ftadd@f2
 32611  012A24  C45E  F091         	movff	_BGR_Arr_1+4,___ftadd@f2+1
 32612  012A28  C45F  F092         	movff	_BGR_Arr_1+5,___ftadd@f2+2
 32613  012A2C  C6C6  F08D         	movff	_B_PF_Avg$8139,___ftadd@f1
 32614  012A30  C6C7  F08E         	movff	_B_PF_Avg$8139+1,___ftadd@f1+1
 32615  012A34  C6C8  F08F         	movff	_B_PF_Avg$8139+2,___ftadd@f1+2
 32616  012A38  ECBE  F0B2         	call	___ftadd	;wreg free
 32617  012A3C  C08D  F6C9         	movff	?___ftadd,_B_PF_Avg$8140
 32618  012A40  C08E  F6CA         	movff	?___ftadd+1,_B_PF_Avg$8140+1
 32619  012A44  C08F  F6CB         	movff	?___ftadd+2,_B_PF_Avg$8140+2
 32620                           
 32621                           ;Power_Meter.c: 551: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 32622  012A48  C45A  F090         	movff	_BGR_Arr_1,___ftadd@f2
 32623  012A4C  C45B  F091         	movff	_BGR_Arr_1+1,___ftadd@f2+1
 32624  012A50  C45C  F092         	movff	_BGR_Arr_1+2,___ftadd@f2+2
 32625  012A54  C6C9  F08D         	movff	_B_PF_Avg$8140,___ftadd@f1
 32626  012A58  C6CA  F08E         	movff	_B_PF_Avg$8140+1,___ftadd@f1+1
 32627  012A5C  C6CB  F08F         	movff	_B_PF_Avg$8140+2,___ftadd@f1+2
 32628  012A60  ECBE  F0B2         	call	___ftadd	;wreg free
 32629  012A64  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 32630  012A68  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 32631  012A6C  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 32632  012A70  0E00               	movlw	0
 32633  012A72  0100               	movlb	0	; () banked
 32634  012A74  6FA8               	movwf	___ftdiv@f2& (0+255),b
 32635  012A76  0EA0               	movlw	160
 32636  012A78  0100               	movlb	0	; () banked
 32637  012A7A  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 32638  012A7C  0E40               	movlw	64
 32639  012A7E  0100               	movlb	0	; () banked
 32640  012A80  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 32641  012A82  ECAF  F0C1         	call	___ftdiv	;wreg free
 32642  012A86  C0A5  F203         	movff	?___ftdiv,_BGR_Avg_1
 32643  012A8A  C0A6  F204         	movff	?___ftdiv+1,_BGR_Avg_1+1
 32644  012A8E  C0A7  F205         	movff	?___ftdiv+2,_BGR_Avg_1+2
 32645                           
 32646                           ;Power_Meter.c: 554: BGR_Arr[29] = BGR_Arr[28];
 32647  012A92  C454  F457         	movff	_BGR_Arr+84,_BGR_Arr+87
 32648  012A96  C455  F458         	movff	_BGR_Arr+85,_BGR_Arr+88
 32649  012A9A  C456  F459         	movff	_BGR_Arr+86,_BGR_Arr+89
 32650                           
 32651                           ;Power_Meter.c: 555: BGR_Arr[28] = BGR_Arr[27];
 32652  012A9E  C451  F454         	movff	_BGR_Arr+81,_BGR_Arr+84
 32653  012AA2  C452  F455         	movff	_BGR_Arr+82,_BGR_Arr+85
 32654  012AA6  C453  F456         	movff	_BGR_Arr+83,_BGR_Arr+86
 32655                           
 32656                           ;Power_Meter.c: 556: BGR_Arr[27] = BGR_Arr[26];
 32657  012AAA  C44E  F451         	movff	_BGR_Arr+78,_BGR_Arr+81
 32658  012AAE  C44F  F452         	movff	_BGR_Arr+79,_BGR_Arr+82
 32659  012AB2  C450  F453         	movff	_BGR_Arr+80,_BGR_Arr+83
 32660                           
 32661                           ;Power_Meter.c: 557: BGR_Arr[26] = BGR_Arr[25];
 32662  012AB6  C44B  F44E         	movff	_BGR_Arr+75,_BGR_Arr+78
 32663  012ABA  C44C  F44F         	movff	_BGR_Arr+76,_BGR_Arr+79
 32664  012ABE  C44D  F450         	movff	_BGR_Arr+77,_BGR_Arr+80
 32665                           
 32666                           ;Power_Meter.c: 558: BGR_Arr[25] = BGR_Arr[24];
 32667  012AC2  C448  F44B         	movff	_BGR_Arr+72,_BGR_Arr+75
 32668  012AC6  C449  F44C         	movff	_BGR_Arr+73,_BGR_Arr+76
 32669  012ACA  C44A  F44D         	movff	_BGR_Arr+74,_BGR_Arr+77
 32670                           
 32671                           ;Power_Meter.c: 559: BGR_Arr[24] = BGR_Arr[23];
 32672  012ACE  C445  F448         	movff	_BGR_Arr+69,_BGR_Arr+72
 32673  012AD2  C446  F449         	movff	_BGR_Arr+70,_BGR_Arr+73
 32674  012AD6  C447  F44A         	movff	_BGR_Arr+71,_BGR_Arr+74
 32675                           
 32676                           ;Power_Meter.c: 560: BGR_Arr[23] = BGR_Arr[22];
 32677  012ADA  C442  F445         	movff	_BGR_Arr+66,_BGR_Arr+69
 32678  012ADE  C443  F446         	movff	_BGR_Arr+67,_BGR_Arr+70
 32679  012AE2  C444  F447         	movff	_BGR_Arr+68,_BGR_Arr+71
 32680                           
 32681                           ;Power_Meter.c: 561: BGR_Arr[22] = BGR_Arr[21];
 32682  012AE6  C43F  F442         	movff	_BGR_Arr+63,_BGR_Arr+66
 32683  012AEA  C440  F443         	movff	_BGR_Arr+64,_BGR_Arr+67
 32684  012AEE  C441  F444         	movff	_BGR_Arr+65,_BGR_Arr+68
 32685                           
 32686                           ;Power_Meter.c: 562: BGR_Arr[21] = BGR_Arr[20];
 32687  012AF2  C43C  F43F         	movff	_BGR_Arr+60,_BGR_Arr+63
 32688  012AF6  C43D  F440         	movff	_BGR_Arr+61,_BGR_Arr+64
 32689  012AFA  C43E  F441         	movff	_BGR_Arr+62,_BGR_Arr+65
 32690                           
 32691                           ;Power_Meter.c: 563: BGR_Arr[20] = BGR_Arr[19];
 32692  012AFE  C439  F43C         	movff	_BGR_Arr+57,_BGR_Arr+60
 32693  012B02  C43A  F43D         	movff	_BGR_Arr+58,_BGR_Arr+61
 32694  012B06  C43B  F43E         	movff	_BGR_Arr+59,_BGR_Arr+62
 32695                           
 32696                           ;Power_Meter.c: 564: BGR_Arr[19] = BGR_Arr[18];
 32697  012B0A  C436  F439         	movff	_BGR_Arr+54,_BGR_Arr+57
 32698  012B0E  C437  F43A         	movff	_BGR_Arr+55,_BGR_Arr+58
 32699  012B12  C438  F43B         	movff	_BGR_Arr+56,_BGR_Arr+59
 32700                           
 32701                           ;Power_Meter.c: 565: BGR_Arr[18] = BGR_Arr[17];
 32702  012B16  C433  F436         	movff	_BGR_Arr+51,_BGR_Arr+54
 32703  012B1A  C434  F437         	movff	_BGR_Arr+52,_BGR_Arr+55
 32704  012B1E  C435  F438         	movff	_BGR_Arr+53,_BGR_Arr+56
 32705                           
 32706                           ;Power_Meter.c: 566: BGR_Arr[17] = BGR_Arr[16];
 32707  012B22  C430  F433         	movff	_BGR_Arr+48,_BGR_Arr+51
 32708  012B26  C431  F434         	movff	_BGR_Arr+49,_BGR_Arr+52
 32709  012B2A  C432  F435         	movff	_BGR_Arr+50,_BGR_Arr+53
 32710                           
 32711                           ;Power_Meter.c: 567: BGR_Arr[16] = BGR_Arr[15];
 32712  012B2E  C42D  F430         	movff	_BGR_Arr+45,_BGR_Arr+48
 32713  012B32  C42E  F431         	movff	_BGR_Arr+46,_BGR_Arr+49
 32714  012B36  C42F  F432         	movff	_BGR_Arr+47,_BGR_Arr+50
 32715                           
 32716                           ;Power_Meter.c: 568: BGR_Arr[15] = BGR_Arr[14];
 32717  012B3A  C42A  F42D         	movff	_BGR_Arr+42,_BGR_Arr+45
 32718  012B3E  C42B  F42E         	movff	_BGR_Arr+43,_BGR_Arr+46
 32719  012B42  C42C  F42F         	movff	_BGR_Arr+44,_BGR_Arr+47
 32720                           
 32721                           ;Power_Meter.c: 569: BGR_Arr[14] = BGR_Arr[13];
 32722  012B46  C427  F42A         	movff	_BGR_Arr+39,_BGR_Arr+42
 32723  012B4A  C428  F42B         	movff	_BGR_Arr+40,_BGR_Arr+43
 32724  012B4E  C429  F42C         	movff	_BGR_Arr+41,_BGR_Arr+44
 32725                           
 32726                           ;Power_Meter.c: 570: BGR_Arr[13] = BGR_Arr[12];
 32727  012B52  C424  F427         	movff	_BGR_Arr+36,_BGR_Arr+39
 32728  012B56  C425  F428         	movff	_BGR_Arr+37,_BGR_Arr+40
 32729  012B5A  C426  F429         	movff	_BGR_Arr+38,_BGR_Arr+41
 32730                           
 32731                           ;Power_Meter.c: 571: BGR_Arr[12] = BGR_Arr[11];
 32732  012B5E  C421  F424         	movff	_BGR_Arr+33,_BGR_Arr+36
 32733  012B62  C422  F425         	movff	_BGR_Arr+34,_BGR_Arr+37
 32734  012B66  C423  F426         	movff	_BGR_Arr+35,_BGR_Arr+38
 32735                           
 32736                           ;Power_Meter.c: 572: BGR_Arr[11] = BGR_Arr[10];
 32737  012B6A  C41E  F421         	movff	_BGR_Arr+30,_BGR_Arr+33
 32738  012B6E  C41F  F422         	movff	_BGR_Arr+31,_BGR_Arr+34
 32739  012B72  C420  F423         	movff	_BGR_Arr+32,_BGR_Arr+35
 32740                           
 32741                           ;Power_Meter.c: 573: BGR_Arr[10] = BGR_Arr[9];
 32742  012B76  C41B  F41E         	movff	_BGR_Arr+27,_BGR_Arr+30
 32743  012B7A  C41C  F41F         	movff	_BGR_Arr+28,_BGR_Arr+31
 32744  012B7E  C41D  F420         	movff	_BGR_Arr+29,_BGR_Arr+32
 32745                           
 32746                           ;Power_Meter.c: 574: BGR_Arr[9] = BGR_Arr[8];
 32747  012B82  C418  F41B         	movff	_BGR_Arr+24,_BGR_Arr+27
 32748  012B86  C419  F41C         	movff	_BGR_Arr+25,_BGR_Arr+28
 32749  012B8A  C41A  F41D         	movff	_BGR_Arr+26,_BGR_Arr+29
 32750                           
 32751                           ;Power_Meter.c: 575: BGR_Arr[8] = BGR_Arr[7];
 32752  012B8E  C415  F418         	movff	_BGR_Arr+21,_BGR_Arr+24
 32753  012B92  C416  F419         	movff	_BGR_Arr+22,_BGR_Arr+25
 32754  012B96  C417  F41A         	movff	_BGR_Arr+23,_BGR_Arr+26
 32755                           
 32756                           ;Power_Meter.c: 576: BGR_Arr[7] = BGR_Arr[6];
 32757  012B9A  C412  F415         	movff	_BGR_Arr+18,_BGR_Arr+21
 32758  012B9E  C413  F416         	movff	_BGR_Arr+19,_BGR_Arr+22
 32759  012BA2  C414  F417         	movff	_BGR_Arr+20,_BGR_Arr+23
 32760                           
 32761                           ;Power_Meter.c: 577: BGR_Arr[6] = BGR_Arr[5];
 32762  012BA6  C40F  F412         	movff	_BGR_Arr+15,_BGR_Arr+18
 32763  012BAA  C410  F413         	movff	_BGR_Arr+16,_BGR_Arr+19
 32764  012BAE  C411  F414         	movff	_BGR_Arr+17,_BGR_Arr+20
 32765                           
 32766                           ;Power_Meter.c: 578: BGR_Arr[5] = BGR_Arr[4];
 32767  012BB2  C40C  F40F         	movff	_BGR_Arr+12,_BGR_Arr+15
 32768  012BB6  C40D  F410         	movff	_BGR_Arr+13,_BGR_Arr+16
 32769  012BBA  C40E  F411         	movff	_BGR_Arr+14,_BGR_Arr+17
 32770                           
 32771                           ;Power_Meter.c: 579: BGR_Arr[4] = BGR_Arr[3];
 32772  012BBE  C409  F40C         	movff	_BGR_Arr+9,_BGR_Arr+12
 32773  012BC2  C40A  F40D         	movff	_BGR_Arr+10,_BGR_Arr+13
 32774  012BC6  C40B  F40E         	movff	_BGR_Arr+11,_BGR_Arr+14
 32775                           
 32776                           ;Power_Meter.c: 580: BGR_Arr[3] = BGR_Arr[2];
 32777  012BCA  C406  F409         	movff	_BGR_Arr+6,_BGR_Arr+9
 32778  012BCE  C407  F40A         	movff	_BGR_Arr+7,_BGR_Arr+10
 32779  012BD2  C408  F40B         	movff	_BGR_Arr+8,_BGR_Arr+11
 32780                           
 32781                           ;Power_Meter.c: 581: BGR_Arr[2] = BGR_Arr[1];
 32782  012BD6  C403  F406         	movff	_BGR_Arr+3,_BGR_Arr+6
 32783  012BDA  C404  F407         	movff	_BGR_Arr+4,_BGR_Arr+7
 32784  012BDE  C405  F408         	movff	_BGR_Arr+5,_BGR_Arr+8
 32785                           
 32786                           ;Power_Meter.c: 582: BGR_Arr[1] = BGR_Arr[0];
 32787  012BE2  C400  F403         	movff	_BGR_Arr,_BGR_Arr+3
 32788  012BE6  C401  F404         	movff	_BGR_Arr+1,_BGR_Arr+4
 32789  012BEA  C402  F405         	movff	_BGR_Arr+2,_BGR_Arr+5
 32790                           
 32791                           ;Power_Meter.c: 584: if( (BGR_Avg_1 > (B_Gap_Ratio * 0.8)) && (BGR_Avg_1 < (B_Gap_Ratio 
      +                          * 1.2)) )
 32792  012BEE  0ECD               	movlw	205
 32793  012BF0  0100               	movlb	0	; () banked
 32794  012BF2  6F77               	movwf	___ftmul@f2& (0+255),b
 32795  012BF4  0E4C               	movlw	76
 32796  012BF6  0100               	movlb	0	; () banked
 32797  012BF8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32798  012BFA  0E3F               	movlw	63
 32799  012BFC  0100               	movlb	0	; () banked
 32800  012BFE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32801  012C00  C103  F074         	movff	_B_Gap_Ratio,___ftmul@f1
 32802  012C04  C104  F075         	movff	_B_Gap_Ratio+1,___ftmul@f1+1
 32803  012C08  C105  F076         	movff	_B_Gap_Ratio+2,___ftmul@f1+2
 32804  012C0C  EC00  F0C1         	call	___ftmul	;wreg free
 32805  012C10  C074  F099         	movff	?___ftmul,___ftge@ff1
 32806  012C14  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
 32807  012C18  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
 32808  012C1C  C203  F09C         	movff	_BGR_Avg_1,___ftge@ff2
 32809  012C20  C204  F09D         	movff	_BGR_Avg_1+1,___ftge@ff2+1
 32810  012C24  C205  F09E         	movff	_BGR_Avg_1+2,___ftge@ff2+2
 32811  012C28  EC4B  F0CB         	call	___ftge	;wreg free
 32812  012C2C  0100               	movlb	0	; () banked
 32813  012C2E  B0D8               	btfsc	status,0,c
 32814  012C30  D028               	goto	l22786
 32815                           
 32816                           ; BSR set to: 0
 32817  012C32  C203  F099         	movff	_BGR_Avg_1,___ftge@ff1
 32818  012C36  C204  F09A         	movff	_BGR_Avg_1+1,___ftge@ff1+1
 32819  012C3A  C205  F09B         	movff	_BGR_Avg_1+2,___ftge@ff1+2
 32820  012C3E  0E9A               	movlw	154
 32821  012C40  0100               	movlb	0	; () banked
 32822  012C42  6F77               	movwf	___ftmul@f2& (0+255),b
 32823  012C44  0E99               	movlw	153
 32824  012C46  0100               	movlb	0	; () banked
 32825  012C48  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32826  012C4A  0E3F               	movlw	63
 32827  012C4C  0100               	movlb	0	; () banked
 32828  012C4E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32829  012C50  C103  F074         	movff	_B_Gap_Ratio,___ftmul@f1
 32830  012C54  C104  F075         	movff	_B_Gap_Ratio+1,___ftmul@f1+1
 32831  012C58  C105  F076         	movff	_B_Gap_Ratio+2,___ftmul@f1+2
 32832  012C5C  EC00  F0C1         	call	___ftmul	;wreg free
 32833  012C60  C074  F09C         	movff	?___ftmul,___ftge@ff2
 32834  012C64  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
 32835  012C68  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
 32836  012C6C  EC4B  F0CB         	call	___ftge	;wreg free
 32837  012C70  0100               	movlb	0	; () banked
 32838  012C72  B0D8               	btfsc	status,0,c
 32839  012C74  D006               	goto	l22786
 32840                           
 32841                           ; BSR set to: 0
 32842                           ;Power_Meter.c: 585: {
 32843                           ;Power_Meter.c: 586: BGR_Arr[0] = B_Gap_Ratio;
 32844  012C76  C103  F400         	movff	_B_Gap_Ratio,_BGR_Arr
 32845  012C7A  C104  F401         	movff	_B_Gap_Ratio+1,_BGR_Arr+1
 32846  012C7E  C105  F402         	movff	_B_Gap_Ratio+2,_BGR_Arr+2
 32847  012C82                     l22786:
 32848                           
 32849                           ; BSR set to: 0
 32850                           ;Power_Meter.c: 587: }
 32851                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32852                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32853                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32854                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32855  012C82  C454  F090         	movff	_BGR_Arr+84,___ftadd@f2
 32856  012C86  C455  F091         	movff	_BGR_Arr+85,___ftadd@f2+1
 32857  012C8A  C456  F092         	movff	_BGR_Arr+86,___ftadd@f2+2
 32858  012C8E  C457  F08D         	movff	_BGR_Arr+87,___ftadd@f1
 32859  012C92  C458  F08E         	movff	_BGR_Arr+88,___ftadd@f1+1
 32860  012C96  C459  F08F         	movff	_BGR_Arr+89,___ftadd@f1+2
 32861  012C9A  ECBE  F0B2         	call	___ftadd	;wreg free
 32862  012C9E  C08D  F6C3         	movff	?___ftadd,_B_PF_Avg$8138
 32863  012CA2  C08E  F6C4         	movff	?___ftadd+1,_B_PF_Avg$8138+1
 32864  012CA6  C08F  F6C5         	movff	?___ftadd+2,_B_PF_Avg$8138+2
 32865                           
 32866                           ;Power_Meter.c: 587: }
 32867                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32868                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32869                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32870                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32871  012CAA  C451  F090         	movff	_BGR_Arr+81,___ftadd@f2
 32872  012CAE  C452  F091         	movff	_BGR_Arr+82,___ftadd@f2+1
 32873  012CB2  C453  F092         	movff	_BGR_Arr+83,___ftadd@f2+2
 32874  012CB6  C6C3  F08D         	movff	_B_PF_Avg$8138,___ftadd@f1
 32875  012CBA  C6C4  F08E         	movff	_B_PF_Avg$8138+1,___ftadd@f1+1
 32876  012CBE  C6C5  F08F         	movff	_B_PF_Avg$8138+2,___ftadd@f1+2
 32877  012CC2  ECBE  F0B2         	call	___ftadd	;wreg free
 32878  012CC6  C08D  F6C6         	movff	?___ftadd,_B_PF_Avg$8139
 32879  012CCA  C08E  F6C7         	movff	?___ftadd+1,_B_PF_Avg$8139+1
 32880  012CCE  C08F  F6C8         	movff	?___ftadd+2,_B_PF_Avg$8139+2
 32881                           
 32882                           ;Power_Meter.c: 587: }
 32883                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32884                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32885                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32886                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32887  012CD2  C44E  F090         	movff	_BGR_Arr+78,___ftadd@f2
 32888  012CD6  C44F  F091         	movff	_BGR_Arr+79,___ftadd@f2+1
 32889  012CDA  C450  F092         	movff	_BGR_Arr+80,___ftadd@f2+2
 32890  012CDE  C6C6  F08D         	movff	_B_PF_Avg$8139,___ftadd@f1
 32891  012CE2  C6C7  F08E         	movff	_B_PF_Avg$8139+1,___ftadd@f1+1
 32892  012CE6  C6C8  F08F         	movff	_B_PF_Avg$8139+2,___ftadd@f1+2
 32893  012CEA  ECBE  F0B2         	call	___ftadd	;wreg free
 32894  012CEE  C08D  F6C9         	movff	?___ftadd,_B_PF_Avg$8140
 32895  012CF2  C08E  F6CA         	movff	?___ftadd+1,_B_PF_Avg$8140+1
 32896  012CF6  C08F  F6CB         	movff	?___ftadd+2,_B_PF_Avg$8140+2
 32897                           
 32898                           ;Power_Meter.c: 587: }
 32899                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32900                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32901                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32902                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32903  012CFA  C44B  F090         	movff	_BGR_Arr+75,___ftadd@f2
 32904  012CFE  C44C  F091         	movff	_BGR_Arr+76,___ftadd@f2+1
 32905  012D02  C44D  F092         	movff	_BGR_Arr+77,___ftadd@f2+2
 32906  012D06  C6C9  F08D         	movff	_B_PF_Avg$8140,___ftadd@f1
 32907  012D0A  C6CA  F08E         	movff	_B_PF_Avg$8140+1,___ftadd@f1+1
 32908  012D0E  C6CB  F08F         	movff	_B_PF_Avg$8140+2,___ftadd@f1+2
 32909  012D12  ECBE  F0B2         	call	___ftadd	;wreg free
 32910  012D16  C08D  F678         	movff	?___ftadd,_B_PF_Avg$8141
 32911  012D1A  C08E  F679         	movff	?___ftadd+1,_B_PF_Avg$8141+1
 32912  012D1E  C08F  F67A         	movff	?___ftadd+2,_B_PF_Avg$8141+2
 32913                           
 32914                           ;Power_Meter.c: 587: }
 32915                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32916                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32917                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32918                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32919  012D22  C448  F090         	movff	_BGR_Arr+72,___ftadd@f2
 32920  012D26  C449  F091         	movff	_BGR_Arr+73,___ftadd@f2+1
 32921  012D2A  C44A  F092         	movff	_BGR_Arr+74,___ftadd@f2+2
 32922  012D2E  C678  F08D         	movff	_B_PF_Avg$8141,___ftadd@f1
 32923  012D32  C679  F08E         	movff	_B_PF_Avg$8141+1,___ftadd@f1+1
 32924  012D36  C67A  F08F         	movff	_B_PF_Avg$8141+2,___ftadd@f1+2
 32925  012D3A  ECBE  F0B2         	call	___ftadd	;wreg free
 32926  012D3E  C08D  F67B         	movff	?___ftadd,_B_PF_Avg$8142
 32927  012D42  C08E  F67C         	movff	?___ftadd+1,_B_PF_Avg$8142+1
 32928  012D46  C08F  F67D         	movff	?___ftadd+2,_B_PF_Avg$8142+2
 32929                           
 32930                           ;Power_Meter.c: 587: }
 32931                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32932                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32933                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32934                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32935  012D4A  C445  F090         	movff	_BGR_Arr+69,___ftadd@f2
 32936  012D4E  C446  F091         	movff	_BGR_Arr+70,___ftadd@f2+1
 32937  012D52  C447  F092         	movff	_BGR_Arr+71,___ftadd@f2+2
 32938  012D56  C67B  F08D         	movff	_B_PF_Avg$8142,___ftadd@f1
 32939  012D5A  C67C  F08E         	movff	_B_PF_Avg$8142+1,___ftadd@f1+1
 32940  012D5E  C67D  F08F         	movff	_B_PF_Avg$8142+2,___ftadd@f1+2
 32941  012D62  ECBE  F0B2         	call	___ftadd	;wreg free
 32942  012D66  C08D  F67E         	movff	?___ftadd,_B_PF_Avg$8143
 32943  012D6A  C08E  F67F         	movff	?___ftadd+1,_B_PF_Avg$8143+1
 32944  012D6E  C08F  F680         	movff	?___ftadd+2,_B_PF_Avg$8143+2
 32945                           
 32946                           ;Power_Meter.c: 587: }
 32947                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32948                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32949                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32950                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32951  012D72  C442  F090         	movff	_BGR_Arr+66,___ftadd@f2
 32952  012D76  C443  F091         	movff	_BGR_Arr+67,___ftadd@f2+1
 32953  012D7A  C444  F092         	movff	_BGR_Arr+68,___ftadd@f2+2
 32954  012D7E  C67E  F08D         	movff	_B_PF_Avg$8143,___ftadd@f1
 32955  012D82  C67F  F08E         	movff	_B_PF_Avg$8143+1,___ftadd@f1+1
 32956  012D86  C680  F08F         	movff	_B_PF_Avg$8143+2,___ftadd@f1+2
 32957  012D8A  ECBE  F0B2         	call	___ftadd	;wreg free
 32958  012D8E  C08D  F681         	movff	?___ftadd,_B_PF_Avg$8144
 32959  012D92  C08E  F682         	movff	?___ftadd+1,_B_PF_Avg$8144+1
 32960  012D96  C08F  F683         	movff	?___ftadd+2,_B_PF_Avg$8144+2
 32961                           
 32962                           ;Power_Meter.c: 587: }
 32963                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32964                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32965                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32966                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32967  012D9A  C43F  F090         	movff	_BGR_Arr+63,___ftadd@f2
 32968  012D9E  C440  F091         	movff	_BGR_Arr+64,___ftadd@f2+1
 32969  012DA2  C441  F092         	movff	_BGR_Arr+65,___ftadd@f2+2
 32970  012DA6  C681  F08D         	movff	_B_PF_Avg$8144,___ftadd@f1
 32971  012DAA  C682  F08E         	movff	_B_PF_Avg$8144+1,___ftadd@f1+1
 32972  012DAE  C683  F08F         	movff	_B_PF_Avg$8144+2,___ftadd@f1+2
 32973  012DB2  ECBE  F0B2         	call	___ftadd	;wreg free
 32974  012DB6  C08D  F684         	movff	?___ftadd,_B_PF_Avg$8145
 32975  012DBA  C08E  F685         	movff	?___ftadd+1,_B_PF_Avg$8145+1
 32976  012DBE  C08F  F686         	movff	?___ftadd+2,_B_PF_Avg$8145+2
 32977                           
 32978                           ;Power_Meter.c: 587: }
 32979                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32980                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32981                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32982                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32983  012DC2  C43C  F090         	movff	_BGR_Arr+60,___ftadd@f2
 32984  012DC6  C43D  F091         	movff	_BGR_Arr+61,___ftadd@f2+1
 32985  012DCA  C43E  F092         	movff	_BGR_Arr+62,___ftadd@f2+2
 32986  012DCE  C684  F08D         	movff	_B_PF_Avg$8145,___ftadd@f1
 32987  012DD2  C685  F08E         	movff	_B_PF_Avg$8145+1,___ftadd@f1+1
 32988  012DD6  C686  F08F         	movff	_B_PF_Avg$8145+2,___ftadd@f1+2
 32989  012DDA  ECBE  F0B2         	call	___ftadd	;wreg free
 32990  012DDE  C08D  F687         	movff	?___ftadd,_B_PF_Avg$8146
 32991  012DE2  C08E  F688         	movff	?___ftadd+1,_B_PF_Avg$8146+1
 32992  012DE6  C08F  F689         	movff	?___ftadd+2,_B_PF_Avg$8146+2
 32993                           
 32994                           ;Power_Meter.c: 587: }
 32995                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32996                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32997                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32998                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32999  012DEA  C439  F090         	movff	_BGR_Arr+57,___ftadd@f2
 33000  012DEE  C43A  F091         	movff	_BGR_Arr+58,___ftadd@f2+1
 33001  012DF2  C43B  F092         	movff	_BGR_Arr+59,___ftadd@f2+2
 33002  012DF6  C687  F08D         	movff	_B_PF_Avg$8146,___ftadd@f1
 33003  012DFA  C688  F08E         	movff	_B_PF_Avg$8146+1,___ftadd@f1+1
 33004  012DFE  C689  F08F         	movff	_B_PF_Avg$8146+2,___ftadd@f1+2
 33005  012E02  ECBE  F0B2         	call	___ftadd	;wreg free
 33006  012E06  C08D  F68A         	movff	?___ftadd,_B_PF_Avg$8147
 33007  012E0A  C08E  F68B         	movff	?___ftadd+1,_B_PF_Avg$8147+1
 33008  012E0E  C08F  F68C         	movff	?___ftadd+2,_B_PF_Avg$8147+2
 33009                           
 33010                           ;Power_Meter.c: 587: }
 33011                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33012                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33013                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33014                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33015  012E12  C436  F090         	movff	_BGR_Arr+54,___ftadd@f2
 33016  012E16  C437  F091         	movff	_BGR_Arr+55,___ftadd@f2+1
 33017  012E1A  C438  F092         	movff	_BGR_Arr+56,___ftadd@f2+2
 33018  012E1E  C68A  F08D         	movff	_B_PF_Avg$8147,___ftadd@f1
 33019  012E22  C68B  F08E         	movff	_B_PF_Avg$8147+1,___ftadd@f1+1
 33020  012E26  C68C  F08F         	movff	_B_PF_Avg$8147+2,___ftadd@f1+2
 33021  012E2A  ECBE  F0B2         	call	___ftadd	;wreg free
 33022  012E2E  C08D  F68D         	movff	?___ftadd,_B_PF_Avg$8148
 33023  012E32  C08E  F68E         	movff	?___ftadd+1,_B_PF_Avg$8148+1
 33024  012E36  C08F  F68F         	movff	?___ftadd+2,_B_PF_Avg$8148+2
 33025                           
 33026                           ;Power_Meter.c: 587: }
 33027                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33028                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33029                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33030                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33031  012E3A  C433  F090         	movff	_BGR_Arr+51,___ftadd@f2
 33032  012E3E  C434  F091         	movff	_BGR_Arr+52,___ftadd@f2+1
 33033  012E42  C435  F092         	movff	_BGR_Arr+53,___ftadd@f2+2
 33034  012E46  C68D  F08D         	movff	_B_PF_Avg$8148,___ftadd@f1
 33035  012E4A  C68E  F08E         	movff	_B_PF_Avg$8148+1,___ftadd@f1+1
 33036  012E4E  C68F  F08F         	movff	_B_PF_Avg$8148+2,___ftadd@f1+2
 33037  012E52  ECBE  F0B2         	call	___ftadd	;wreg free
 33038  012E56  C08D  F690         	movff	?___ftadd,_B_PF_Avg$8149
 33039  012E5A  C08E  F691         	movff	?___ftadd+1,_B_PF_Avg$8149+1
 33040  012E5E  C08F  F692         	movff	?___ftadd+2,_B_PF_Avg$8149+2
 33041                           
 33042                           ;Power_Meter.c: 587: }
 33043                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33044                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33045                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33046                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33047  012E62  C430  F090         	movff	_BGR_Arr+48,___ftadd@f2
 33048  012E66  C431  F091         	movff	_BGR_Arr+49,___ftadd@f2+1
 33049  012E6A  C432  F092         	movff	_BGR_Arr+50,___ftadd@f2+2
 33050  012E6E  C690  F08D         	movff	_B_PF_Avg$8149,___ftadd@f1
 33051  012E72  C691  F08E         	movff	_B_PF_Avg$8149+1,___ftadd@f1+1
 33052  012E76  C692  F08F         	movff	_B_PF_Avg$8149+2,___ftadd@f1+2
 33053  012E7A  ECBE  F0B2         	call	___ftadd	;wreg free
 33054  012E7E  C08D  F693         	movff	?___ftadd,_B_PF_Avg$8150
 33055  012E82  C08E  F694         	movff	?___ftadd+1,_B_PF_Avg$8150+1
 33056  012E86  C08F  F695         	movff	?___ftadd+2,_B_PF_Avg$8150+2
 33057                           
 33058                           ;Power_Meter.c: 587: }
 33059                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33060                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33061                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33062                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33063  012E8A  C42D  F090         	movff	_BGR_Arr+45,___ftadd@f2
 33064  012E8E  C42E  F091         	movff	_BGR_Arr+46,___ftadd@f2+1
 33065  012E92  C42F  F092         	movff	_BGR_Arr+47,___ftadd@f2+2
 33066  012E96  C693  F08D         	movff	_B_PF_Avg$8150,___ftadd@f1
 33067  012E9A  C694  F08E         	movff	_B_PF_Avg$8150+1,___ftadd@f1+1
 33068  012E9E  C695  F08F         	movff	_B_PF_Avg$8150+2,___ftadd@f1+2
 33069  012EA2  ECBE  F0B2         	call	___ftadd	;wreg free
 33070  012EA6  C08D  F696         	movff	?___ftadd,_B_PF_Avg$8151
 33071  012EAA  C08E  F697         	movff	?___ftadd+1,_B_PF_Avg$8151+1
 33072  012EAE  C08F  F698         	movff	?___ftadd+2,_B_PF_Avg$8151+2
 33073                           
 33074                           ;Power_Meter.c: 587: }
 33075                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33076                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33077                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33078                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33079  012EB2  C42A  F090         	movff	_BGR_Arr+42,___ftadd@f2
 33080  012EB6  C42B  F091         	movff	_BGR_Arr+43,___ftadd@f2+1
 33081  012EBA  C42C  F092         	movff	_BGR_Arr+44,___ftadd@f2+2
 33082  012EBE  C696  F08D         	movff	_B_PF_Avg$8151,___ftadd@f1
 33083  012EC2  C697  F08E         	movff	_B_PF_Avg$8151+1,___ftadd@f1+1
 33084  012EC6  C698  F08F         	movff	_B_PF_Avg$8151+2,___ftadd@f1+2
 33085  012ECA  ECBE  F0B2         	call	___ftadd	;wreg free
 33086  012ECE  C08D  F699         	movff	?___ftadd,_B_PF_Avg$8152
 33087  012ED2  C08E  F69A         	movff	?___ftadd+1,_B_PF_Avg$8152+1
 33088  012ED6  C08F  F69B         	movff	?___ftadd+2,_B_PF_Avg$8152+2
 33089                           
 33090                           ;Power_Meter.c: 587: }
 33091                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33092                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33093                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33094                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33095  012EDA  C427  F090         	movff	_BGR_Arr+39,___ftadd@f2
 33096  012EDE  C428  F091         	movff	_BGR_Arr+40,___ftadd@f2+1
 33097  012EE2  C429  F092         	movff	_BGR_Arr+41,___ftadd@f2+2
 33098  012EE6  C699  F08D         	movff	_B_PF_Avg$8152,___ftadd@f1
 33099  012EEA  C69A  F08E         	movff	_B_PF_Avg$8152+1,___ftadd@f1+1
 33100  012EEE  C69B  F08F         	movff	_B_PF_Avg$8152+2,___ftadd@f1+2
 33101  012EF2  ECBE  F0B2         	call	___ftadd	;wreg free
 33102  012EF6  C08D  F69C         	movff	?___ftadd,_B_PF_Avg$8153
 33103  012EFA  C08E  F69D         	movff	?___ftadd+1,_B_PF_Avg$8153+1
 33104  012EFE  C08F  F69E         	movff	?___ftadd+2,_B_PF_Avg$8153+2
 33105                           
 33106                           ;Power_Meter.c: 587: }
 33107                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33108                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33109                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33110                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33111  012F02  C424  F090         	movff	_BGR_Arr+36,___ftadd@f2
 33112  012F06  C425  F091         	movff	_BGR_Arr+37,___ftadd@f2+1
 33113  012F0A  C426  F092         	movff	_BGR_Arr+38,___ftadd@f2+2
 33114  012F0E  C69C  F08D         	movff	_B_PF_Avg$8153,___ftadd@f1
 33115  012F12  C69D  F08E         	movff	_B_PF_Avg$8153+1,___ftadd@f1+1
 33116  012F16  C69E  F08F         	movff	_B_PF_Avg$8153+2,___ftadd@f1+2
 33117  012F1A  ECBE  F0B2         	call	___ftadd	;wreg free
 33118  012F1E  C08D  F69F         	movff	?___ftadd,_B_PF_Avg$8154
 33119  012F22  C08E  F6A0         	movff	?___ftadd+1,_B_PF_Avg$8154+1
 33120  012F26  C08F  F6A1         	movff	?___ftadd+2,_B_PF_Avg$8154+2
 33121                           
 33122                           ;Power_Meter.c: 587: }
 33123                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33124                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33125                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33126                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33127  012F2A  C421  F090         	movff	_BGR_Arr+33,___ftadd@f2
 33128  012F2E  C422  F091         	movff	_BGR_Arr+34,___ftadd@f2+1
 33129  012F32  C423  F092         	movff	_BGR_Arr+35,___ftadd@f2+2
 33130  012F36  C69F  F08D         	movff	_B_PF_Avg$8154,___ftadd@f1
 33131  012F3A  C6A0  F08E         	movff	_B_PF_Avg$8154+1,___ftadd@f1+1
 33132  012F3E  C6A1  F08F         	movff	_B_PF_Avg$8154+2,___ftadd@f1+2
 33133  012F42  ECBE  F0B2         	call	___ftadd	;wreg free
 33134  012F46  C08D  F6A2         	movff	?___ftadd,_B_PF_Avg$8155
 33135  012F4A  C08E  F6A3         	movff	?___ftadd+1,_B_PF_Avg$8155+1
 33136  012F4E  C08F  F6A4         	movff	?___ftadd+2,_B_PF_Avg$8155+2
 33137                           
 33138                           ;Power_Meter.c: 587: }
 33139                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33140                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33141                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33142                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33143  012F52  C41E  F090         	movff	_BGR_Arr+30,___ftadd@f2
 33144  012F56  C41F  F091         	movff	_BGR_Arr+31,___ftadd@f2+1
 33145  012F5A  C420  F092         	movff	_BGR_Arr+32,___ftadd@f2+2
 33146  012F5E  C6A2  F08D         	movff	_B_PF_Avg$8155,___ftadd@f1
 33147  012F62  C6A3  F08E         	movff	_B_PF_Avg$8155+1,___ftadd@f1+1
 33148  012F66  C6A4  F08F         	movff	_B_PF_Avg$8155+2,___ftadd@f1+2
 33149  012F6A  ECBE  F0B2         	call	___ftadd	;wreg free
 33150  012F6E  C08D  F6A5         	movff	?___ftadd,_B_PF_Avg$8156
 33151  012F72  C08E  F6A6         	movff	?___ftadd+1,_B_PF_Avg$8156+1
 33152  012F76  C08F  F6A7         	movff	?___ftadd+2,_B_PF_Avg$8156+2
 33153                           
 33154                           ;Power_Meter.c: 587: }
 33155                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33156                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33157                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33158                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33159  012F7A  C41B  F090         	movff	_BGR_Arr+27,___ftadd@f2
 33160  012F7E  C41C  F091         	movff	_BGR_Arr+28,___ftadd@f2+1
 33161  012F82  C41D  F092         	movff	_BGR_Arr+29,___ftadd@f2+2
 33162  012F86  C6A5  F08D         	movff	_B_PF_Avg$8156,___ftadd@f1
 33163  012F8A  C6A6  F08E         	movff	_B_PF_Avg$8156+1,___ftadd@f1+1
 33164  012F8E  C6A7  F08F         	movff	_B_PF_Avg$8156+2,___ftadd@f1+2
 33165  012F92  ECBE  F0B2         	call	___ftadd	;wreg free
 33166  012F96  C08D  F6A8         	movff	?___ftadd,_B_PF_Avg$8157
 33167  012F9A  C08E  F6A9         	movff	?___ftadd+1,_B_PF_Avg$8157+1
 33168  012F9E  C08F  F6AA         	movff	?___ftadd+2,_B_PF_Avg$8157+2
 33169                           
 33170                           ;Power_Meter.c: 587: }
 33171                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33172                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33173                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33174                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33175  012FA2  C418  F090         	movff	_BGR_Arr+24,___ftadd@f2
 33176  012FA6  C419  F091         	movff	_BGR_Arr+25,___ftadd@f2+1
 33177  012FAA  C41A  F092         	movff	_BGR_Arr+26,___ftadd@f2+2
 33178  012FAE  C6A8  F08D         	movff	_B_PF_Avg$8157,___ftadd@f1
 33179  012FB2  C6A9  F08E         	movff	_B_PF_Avg$8157+1,___ftadd@f1+1
 33180  012FB6  C6AA  F08F         	movff	_B_PF_Avg$8157+2,___ftadd@f1+2
 33181  012FBA  ECBE  F0B2         	call	___ftadd	;wreg free
 33182  012FBE  C08D  F6AB         	movff	?___ftadd,_B_PF_Avg$8158
 33183  012FC2  C08E  F6AC         	movff	?___ftadd+1,_B_PF_Avg$8158+1
 33184  012FC6  C08F  F6AD         	movff	?___ftadd+2,_B_PF_Avg$8158+2
 33185                           
 33186                           ;Power_Meter.c: 587: }
 33187                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33188                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33189                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33190                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33191  012FCA  C415  F090         	movff	_BGR_Arr+21,___ftadd@f2
 33192  012FCE  C416  F091         	movff	_BGR_Arr+22,___ftadd@f2+1
 33193  012FD2  C417  F092         	movff	_BGR_Arr+23,___ftadd@f2+2
 33194  012FD6  C6AB  F08D         	movff	_B_PF_Avg$8158,___ftadd@f1
 33195  012FDA  C6AC  F08E         	movff	_B_PF_Avg$8158+1,___ftadd@f1+1
 33196  012FDE  C6AD  F08F         	movff	_B_PF_Avg$8158+2,___ftadd@f1+2
 33197  012FE2  ECBE  F0B2         	call	___ftadd	;wreg free
 33198  012FE6  C08D  F6AE         	movff	?___ftadd,_B_PF_Avg$8159
 33199  012FEA  C08E  F6AF         	movff	?___ftadd+1,_B_PF_Avg$8159+1
 33200  012FEE  C08F  F6B0         	movff	?___ftadd+2,_B_PF_Avg$8159+2
 33201                           
 33202                           ;Power_Meter.c: 587: }
 33203                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33204                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33205                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33206                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33207  012FF2  C412  F090         	movff	_BGR_Arr+18,___ftadd@f2
 33208  012FF6  C413  F091         	movff	_BGR_Arr+19,___ftadd@f2+1
 33209  012FFA  C414  F092         	movff	_BGR_Arr+20,___ftadd@f2+2
 33210  012FFE  C6AE  F08D         	movff	_B_PF_Avg$8159,___ftadd@f1
 33211  013002  C6AF  F08E         	movff	_B_PF_Avg$8159+1,___ftadd@f1+1
 33212  013006  C6B0  F08F         	movff	_B_PF_Avg$8159+2,___ftadd@f1+2
 33213  01300A  ECBE  F0B2         	call	___ftadd	;wreg free
 33214  01300E  C08D  F6B1         	movff	?___ftadd,_B_PF_Avg$8160
 33215  013012  C08E  F6B2         	movff	?___ftadd+1,_B_PF_Avg$8160+1
 33216  013016  C08F  F6B3         	movff	?___ftadd+2,_B_PF_Avg$8160+2
 33217                           
 33218                           ;Power_Meter.c: 587: }
 33219                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33220                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33221                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33222                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33223  01301A  C40F  F090         	movff	_BGR_Arr+15,___ftadd@f2
 33224  01301E  C410  F091         	movff	_BGR_Arr+16,___ftadd@f2+1
 33225  013022  C411  F092         	movff	_BGR_Arr+17,___ftadd@f2+2
 33226  013026  C6B1  F08D         	movff	_B_PF_Avg$8160,___ftadd@f1
 33227  01302A  C6B2  F08E         	movff	_B_PF_Avg$8160+1,___ftadd@f1+1
 33228  01302E  C6B3  F08F         	movff	_B_PF_Avg$8160+2,___ftadd@f1+2
 33229  013032  ECBE  F0B2         	call	___ftadd	;wreg free
 33230  013036  C08D  F6B4         	movff	?___ftadd,_B_PF_Avg$8161
 33231  01303A  C08E  F6B5         	movff	?___ftadd+1,_B_PF_Avg$8161+1
 33232  01303E  C08F  F6B6         	movff	?___ftadd+2,_B_PF_Avg$8161+2
 33233                           
 33234                           ;Power_Meter.c: 587: }
 33235                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33236                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33237                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33238                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33239  013042  C40C  F090         	movff	_BGR_Arr+12,___ftadd@f2
 33240  013046  C40D  F091         	movff	_BGR_Arr+13,___ftadd@f2+1
 33241  01304A  C40E  F092         	movff	_BGR_Arr+14,___ftadd@f2+2
 33242  01304E  C6B4  F08D         	movff	_B_PF_Avg$8161,___ftadd@f1
 33243  013052  C6B5  F08E         	movff	_B_PF_Avg$8161+1,___ftadd@f1+1
 33244  013056  C6B6  F08F         	movff	_B_PF_Avg$8161+2,___ftadd@f1+2
 33245  01305A  ECBE  F0B2         	call	___ftadd	;wreg free
 33246  01305E  C08D  F6B7         	movff	?___ftadd,_B_PF_Avg$8162
 33247  013062  C08E  F6B8         	movff	?___ftadd+1,_B_PF_Avg$8162+1
 33248  013066  C08F  F6B9         	movff	?___ftadd+2,_B_PF_Avg$8162+2
 33249                           
 33250                           ;Power_Meter.c: 587: }
 33251                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33252                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33253                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33254                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33255  01306A  C409  F090         	movff	_BGR_Arr+9,___ftadd@f2
 33256  01306E  C40A  F091         	movff	_BGR_Arr+10,___ftadd@f2+1
 33257  013072  C40B  F092         	movff	_BGR_Arr+11,___ftadd@f2+2
 33258  013076  C6B7  F08D         	movff	_B_PF_Avg$8162,___ftadd@f1
 33259  01307A  C6B8  F08E         	movff	_B_PF_Avg$8162+1,___ftadd@f1+1
 33260  01307E  C6B9  F08F         	movff	_B_PF_Avg$8162+2,___ftadd@f1+2
 33261  013082  ECBE  F0B2         	call	___ftadd	;wreg free
 33262  013086  C08D  F6BA         	movff	?___ftadd,_B_PF_Avg$8163
 33263  01308A  C08E  F6BB         	movff	?___ftadd+1,_B_PF_Avg$8163+1
 33264  01308E  C08F  F6BC         	movff	?___ftadd+2,_B_PF_Avg$8163+2
 33265                           
 33266                           ;Power_Meter.c: 587: }
 33267                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33268                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33269                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33270                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33271  013092  C406  F090         	movff	_BGR_Arr+6,___ftadd@f2
 33272  013096  C407  F091         	movff	_BGR_Arr+7,___ftadd@f2+1
 33273  01309A  C408  F092         	movff	_BGR_Arr+8,___ftadd@f2+2
 33274  01309E  C6BA  F08D         	movff	_B_PF_Avg$8163,___ftadd@f1
 33275  0130A2  C6BB  F08E         	movff	_B_PF_Avg$8163+1,___ftadd@f1+1
 33276  0130A6  C6BC  F08F         	movff	_B_PF_Avg$8163+2,___ftadd@f1+2
 33277  0130AA  ECBE  F0B2         	call	___ftadd	;wreg free
 33278  0130AE  C08D  F6BD         	movff	?___ftadd,_B_PF_Avg$8164
 33279  0130B2  C08E  F6BE         	movff	?___ftadd+1,_B_PF_Avg$8164+1
 33280  0130B6  C08F  F6BF         	movff	?___ftadd+2,_B_PF_Avg$8164+2
 33281                           
 33282                           ;Power_Meter.c: 587: }
 33283                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33284                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33285                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33286                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33287  0130BA  C403  F090         	movff	_BGR_Arr+3,___ftadd@f2
 33288  0130BE  C404  F091         	movff	_BGR_Arr+4,___ftadd@f2+1
 33289  0130C2  C405  F092         	movff	_BGR_Arr+5,___ftadd@f2+2
 33290  0130C6  C6BD  F08D         	movff	_B_PF_Avg$8164,___ftadd@f1
 33291  0130CA  C6BE  F08E         	movff	_B_PF_Avg$8164+1,___ftadd@f1+1
 33292  0130CE  C6BF  F08F         	movff	_B_PF_Avg$8164+2,___ftadd@f1+2
 33293  0130D2  ECBE  F0B2         	call	___ftadd	;wreg free
 33294  0130D6  C08D  F6C0         	movff	?___ftadd,_B_PF_Avg$8165
 33295  0130DA  C08E  F6C1         	movff	?___ftadd+1,_B_PF_Avg$8165+1
 33296  0130DE  C08F  F6C2         	movff	?___ftadd+2,_B_PF_Avg$8165+2
 33297                           
 33298                           ;Power_Meter.c: 587: }
 33299                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33300                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33301                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33302                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33303  0130E2  C6C0  F08D         	movff	_B_PF_Avg$8165,___ftadd@f1
 33304  0130E6  C6C1  F08E         	movff	_B_PF_Avg$8165+1,___ftadd@f1+1
 33305  0130EA  C6C2  F08F         	movff	_B_PF_Avg$8165+2,___ftadd@f1+2
 33306  0130EE  C400  F090         	movff	_BGR_Arr,___ftadd@f2
 33307  0130F2  C401  F091         	movff	_BGR_Arr+1,___ftadd@f2+1
 33308  0130F6  C402  F092         	movff	_BGR_Arr+2,___ftadd@f2+2
 33309  0130FA  ECBE  F0B2         	call	___ftadd	;wreg free
 33310  0130FE  C08D  F2E4         	movff	?___ftadd,_BGR_Avg
 33311  013102  C08E  F2E5         	movff	?___ftadd+1,_BGR_Avg+1
 33312  013106  C08F  F2E6         	movff	?___ftadd+2,_BGR_Avg+2
 33313                           
 33314                           ;Power_Meter.c: 594: BGR_Avg = (BGR_Avg / 30);
 33315  01310A  C2E4  F0A5         	movff	_BGR_Avg,___ftdiv@f1
 33316  01310E  C2E5  F0A6         	movff	_BGR_Avg+1,___ftdiv@f1+1
 33317  013112  C2E6  F0A7         	movff	_BGR_Avg+2,___ftdiv@f1+2
 33318  013116  0E00               	movlw	0
 33319  013118  0100               	movlb	0	; () banked
 33320  01311A  6FA8               	movwf	___ftdiv@f2& (0+255),b
 33321  01311C  0EF0               	movlw	240
 33322  01311E  0100               	movlb	0	; () banked
 33323  013120  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 33324  013122  0E41               	movlw	65
 33325  013124  0100               	movlb	0	; () banked
 33326  013126  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 33327  013128  ECAF  F0C1         	call	___ftdiv	;wreg free
 33328  01312C  C0A5  F2E4         	movff	?___ftdiv,_BGR_Avg
 33329  013130  C0A6  F2E5         	movff	?___ftdiv+1,_BGR_Avg+1
 33330  013134  C0A7  F2E6         	movff	?___ftdiv+2,_BGR_Avg+2
 33331                           
 33332                           ;Power_Meter.c: 595: B_Rad = ((BGR_Avg * 2 * 3.1412) - (0.575959));
 33333  013138  0E09               	movlw	9
 33334  01313A  0100               	movlb	0	; () banked
 33335  01313C  6F77               	movwf	___ftmul@f2& (0+255),b
 33336  01313E  0EC9               	movlw	201
 33337  013140  0100               	movlb	0	; () banked
 33338  013142  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 33339  013144  0E40               	movlw	64
 33340  013146  0100               	movlb	0	; () banked
 33341  013148  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 33342  01314A  C2E4  F074         	movff	_BGR_Avg,___ftmul@f1
 33343  01314E  C2E5  F075         	movff	_BGR_Avg+1,___ftmul@f1+1
 33344  013152  C2E6  F076         	movff	_BGR_Avg+2,___ftmul@f1+2
 33345  013156  EC00  F0C1         	call	___ftmul	;wreg free
 33346  01315A  C074  F08D         	movff	?___ftmul,___ftadd@f1
 33347  01315E  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 33348  013162  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 33349  013166  0E72               	movlw	114
 33350  013168  0100               	movlb	0	; () banked
 33351  01316A  6F90               	movwf	___ftadd@f2& (0+255),b
 33352  01316C  0E13               	movlw	19
 33353  01316E  0100               	movlb	0	; () banked
 33354  013170  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33355  013172  0EBF               	movlw	191
 33356  013174  0100               	movlb	0	; () banked
 33357  013176  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33358  013178  ECBE  F0B2         	call	___ftadd	;wreg free
 33359  01317C  C08D  F522         	movff	?___ftadd,_B_Rad
 33360  013180  C08E  F523         	movff	?___ftadd+1,_B_Rad+1
 33361  013184  C08F  F524         	movff	?___ftadd+2,_B_Rad+2
 33362                           
 33363                           ;Power_Meter.c: 596: B_Power_Factor = (cos(B_Rad));
 33364  013188  C522  F0C1         	movff	_B_Rad,cos@f
 33365  01318C  C523  F0C2         	movff	_B_Rad+1,cos@f+1
 33366  013190  C524  F0C3         	movff	_B_Rad+2,cos@f+2
 33367  013194  EC10  F0CC         	call	_cos	;wreg free
 33368  013198  C0C1  F51F         	movff	?_cos,_B_Power_Factor
 33369  01319C  C0C2  F520         	movff	?_cos+1,_B_Power_Factor+1
 33370  0131A0  C0C3  F521         	movff	?_cos+2,_B_Power_Factor+2
 33371  0131A4  0012               	return		;funcret
 33372  0131A6                     __end_of_B_PF_Avg:
 33373                           	opt stack 0
 33374                           tblptru	equ	0xFF8
 33375                           tblptrh	equ	0xFF7
 33376                           tblptrl	equ	0xFF6
 33377                           tablat	equ	0xFF5
 33378                           prodh	equ	0xFF4
 33379                           prodl	equ	0xFF3
 33380                           intcon	equ	0xFF2
 33381                           postinc0	equ	0xFEE
 33382                           wreg	equ	0xFE8
 33383                           postdec1	equ	0xFE5
 33384                           fsr1h	equ	0xFE2
 33385                           fsr1l	equ	0xFE1
 33386                           indf2	equ	0xFDF
 33387                           postinc2	equ	0xFDE
 33388                           postdec2	equ	0xFDD
 33389                           fsr2h	equ	0xFDA
 33390                           fsr2l	equ	0xFD9
 33391                           status	equ	0xFD8
 33392                           
 33393 ;; *************** function _cos *****************
 33394 ;; Defined at:
 33395 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\cos.c"
 33396 ;; Parameters:    Size  Location     Type
 33397 ;;  f               3   97[BANK0 ] void 
 33398 ;; Auto vars:     Size  Location     Type
 33399 ;;		None
 33400 ;; Return value:  Size  Location     Type
 33401 ;;                  3   97[BANK0 ] void 
 33402 ;; Registers used:
 33403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33404 ;; Tracked objects:
 33405 ;;		On entry : 0/0
 33406 ;;		On exit  : 0/0
 33407 ;;		Unchanged: 0/0
 33408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33409 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33410 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33412 ;;      Totals:         0       3       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33413 ;;Total ram usage:        6 bytes
 33414 ;; Hardware stack levels used:    1
 33415 ;; Hardware stack levels required when called:    7
 33416 ;; This function calls:
 33417 ;;		___ftadd
 33418 ;;		___ftge
 33419 ;;		_sin
 33420 ;; This function is called by:
 33421 ;;		_R_PF_Avg
 33422 ;;		_Y_PF_Avg
 33423 ;;		_B_PF_Avg
 33424 ;; This function uses a non-reentrant model
 33425 ;;
 33426                           
 33427                           	psect	text124
 33428  019820                     __ptext124:
 33429                           	opt stack 0
 33430  019820                     _cos:
 33431                           	opt stack 22
 33432                           
 33433                           ;incstack = 0
 33434  019820  0E10               	movlw	16
 33435  019822  0100               	movlb	0	; () banked
 33436  019824  6F99               	movwf	___ftge@ff1& (0+255),b
 33437  019826  0E49               	movlw	73
 33438  019828  0100               	movlb	0	; () banked
 33439  01982A  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 33440  01982C  0E40               	movlw	64
 33441  01982E  0100               	movlb	0	; () banked
 33442  019830  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 33443  019832  C0C1  F09C         	movff	cos@f,___ftge@ff2
 33444  019836  C0C2  F09D         	movff	cos@f+1,___ftge@ff2+1
 33445  01983A  C0C3  F09E         	movff	cos@f+2,___ftge@ff2+2
 33446  01983E  EC4B  F0CB         	call	___ftge	;wreg free
 33447  019842  0100               	movlb	0	; () banked
 33448  019844  B0D8               	btfsc	status,0,c
 33449  019846  D026               	goto	l22232
 33450                           
 33451                           ; BSR set to: 0
 33452  019848  C0C1  F08D         	movff	cos@f,___ftadd@f1
 33453  01984C  C0C2  F08E         	movff	cos@f+1,___ftadd@f1+1
 33454  019850  C0C3  F08F         	movff	cos@f+2,___ftadd@f1+2
 33455  019854  0ECC               	movlw	204
 33456  019856  0100               	movlb	0	; () banked
 33457  019858  6F90               	movwf	___ftadd@f2& (0+255),b
 33458  01985A  0E96               	movlw	150
 33459  01985C  0100               	movlb	0	; () banked
 33460  01985E  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33461  019860  0EC0               	movlw	192
 33462  019862  0100               	movlb	0	; () banked
 33463  019864  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33464  019866  ECBE  F0B2         	call	___ftadd	;wreg free
 33465  01986A  C08D  F1AA         	movff	?___ftadd,_cos$8174
 33466  01986E  C08E  F1AB         	movff	?___ftadd+1,_cos$8174+1
 33467  019872  C08F  F1AC         	movff	?___ftadd+2,_cos$8174+2
 33468  019876  C1AA  F0B4         	movff	_cos$8174,sin@f
 33469  01987A  C1AB  F0B5         	movff	_cos$8174+1,sin@f+1
 33470  01987E  C1AC  F0B6         	movff	_cos$8174+2,sin@f+2
 33471  019882  ECCB  F0AD         	call	_sin	;wreg free
 33472  019886  C0B4  F0C1         	movff	?_sin,?_cos
 33473  01988A  C0B5  F0C2         	movff	?_sin+1,?_cos+1
 33474  01988E  C0B6  F0C3         	movff	?_sin+2,?_cos+2
 33475  019892  0012               	return	
 33476  019894                     l22232:
 33477  019894  C0C1  F08D         	movff	cos@f,___ftadd@f1
 33478  019898  C0C2  F08E         	movff	cos@f+1,___ftadd@f1+1
 33479  01989C  C0C3  F08F         	movff	cos@f+2,___ftadd@f1+2
 33480  0198A0  0E10               	movlw	16
 33481  0198A2  0100               	movlb	0	; () banked
 33482  0198A4  6F90               	movwf	___ftadd@f2& (0+255),b
 33483  0198A6  0EC9               	movlw	201
 33484  0198A8  0100               	movlb	0	; () banked
 33485  0198AA  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33486  0198AC  0E3F               	movlw	63
 33487  0198AE  0100               	movlb	0	; () banked
 33488  0198B0  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33489  0198B2  ECBE  F0B2         	call	___ftadd	;wreg free
 33490  0198B6  C08D  F1AA         	movff	?___ftadd,_cos$8174
 33491  0198BA  C08E  F1AB         	movff	?___ftadd+1,_cos$8174+1
 33492  0198BE  C08F  F1AC         	movff	?___ftadd+2,_cos$8174+2
 33493  0198C2  C1AA  F0B4         	movff	_cos$8174,sin@f
 33494  0198C6  C1AB  F0B5         	movff	_cos$8174+1,sin@f+1
 33495  0198CA  C1AC  F0B6         	movff	_cos$8174+2,sin@f+2
 33496  0198CE  ECCB  F0AD         	call	_sin	;wreg free
 33497  0198D2  C0B4  F0C1         	movff	?_sin,?_cos
 33498  0198D6  C0B5  F0C2         	movff	?_sin+1,?_cos+1
 33499  0198DA  C0B6  F0C3         	movff	?_sin+2,?_cos+2
 33500  0198DE  0012               	return	
 33501  0198E0                     __end_of_cos:
 33502                           	opt stack 0
 33503                           tblptru	equ	0xFF8
 33504                           tblptrh	equ	0xFF7
 33505                           tblptrl	equ	0xFF6
 33506                           tablat	equ	0xFF5
 33507                           prodh	equ	0xFF4
 33508                           prodl	equ	0xFF3
 33509                           intcon	equ	0xFF2
 33510                           postinc0	equ	0xFEE
 33511                           wreg	equ	0xFE8
 33512                           postdec1	equ	0xFE5
 33513                           fsr1h	equ	0xFE2
 33514                           fsr1l	equ	0xFE1
 33515                           indf2	equ	0xFDF
 33516                           postinc2	equ	0xFDE
 33517                           postdec2	equ	0xFDD
 33518                           fsr2h	equ	0xFDA
 33519                           fsr2l	equ	0xFD9
 33520                           status	equ	0xFD8
 33521                           
 33522 ;; *************** function _sin *****************
 33523 ;; Defined at:
 33524 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\sin.c"
 33525 ;; Parameters:    Size  Location     Type
 33526 ;;  f               3   84[BANK0 ] void 
 33527 ;; Auto vars:     Size  Location     Type
 33528 ;;  x2              3   93[BANK0 ] void 
 33529 ;;  y               3   87[BANK0 ] void 
 33530 ;;  sgn             1   96[BANK0 ] unsigned char 
 33531 ;; Return value:  Size  Location     Type
 33532 ;;                  3   84[BANK0 ] unsigned char 
 33533 ;; Registers used:
 33534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33535 ;; Tracked objects:
 33536 ;;		On entry : 0/0
 33537 ;;		On exit  : 0/0
 33538 ;;		Unchanged: 0/0
 33539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33540 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33541 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33543 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33544 ;;Total ram usage:       13 bytes
 33545 ;; Hardware stack levels used:    1
 33546 ;; Hardware stack levels required when called:    6
 33547 ;; This function calls:
 33548 ;;		___ftadd
 33549 ;;		___ftdiv
 33550 ;;		___ftge
 33551 ;;		___ftmul
 33552 ;;		___ftneg
 33553 ;;		___ftsub
 33554 ;;		_eval_poly
 33555 ;;		_floor
 33556 ;; This function is called by:
 33557 ;;		_cos
 33558 ;; This function uses a non-reentrant model
 33559 ;;
 33560                           
 33561                           	psect	text125
 33562  015B96                     __ptext125:
 33563                           	opt stack 0
 33564  015B96                     _sin:
 33565                           	opt stack 22
 33566                           
 33567                           ;incstack = 0
 33568  015B96  0E00               	movlw	0
 33569  015B98  0100               	movlb	0	; () banked
 33570  015B9A  6FC0               	movwf	sin@sgn& (0+255),b
 33571                           
 33572                           ; BSR set to: 0
 33573  015B9C  0100               	movlb	0	; () banked
 33574  015B9E  AFB6               	btfss	(sin@f+2)& (0+255),7,b
 33575  015BA0  D011               	goto	l21562
 33576                           
 33577                           ; BSR set to: 0
 33578  015BA2  C0B4  F083         	movff	sin@f,___ftneg@f1
 33579  015BA6  C0B5  F084         	movff	sin@f+1,___ftneg@f1+1
 33580  015BAA  C0B6  F085         	movff	sin@f+2,___ftneg@f1+2
 33581  015BAE  EC1D  F0D7         	call	___ftneg	;wreg free
 33582  015BB2  C083  F0B4         	movff	?___ftneg,sin@f
 33583  015BB6  C084  F0B5         	movff	?___ftneg+1,sin@f+1
 33584  015BBA  C085  F0B6         	movff	?___ftneg+2,sin@f+2
 33585  015BBE  0E01               	movlw	1
 33586  015BC0  0100               	movlb	0	; () banked
 33587  015BC2  6FC0               	movwf	sin@sgn& (0+255),b
 33588  015BC4                     l21562:
 33589                           
 33590                           ; BSR set to: 0
 33591  015BC4  C0B4  F074         	movff	sin@f,___ftmul@f1
 33592  015BC8  C0B5  F075         	movff	sin@f+1,___ftmul@f1+1
 33593  015BCC  C0B6  F076         	movff	sin@f+2,___ftmul@f1+2
 33594  015BD0  0EFA               	movlw	250
 33595  015BD2  0100               	movlb	0	; () banked
 33596  015BD4  6F77               	movwf	___ftmul@f2& (0+255),b
 33597  015BD6  0E22               	movlw	34
 33598  015BD8  0100               	movlb	0	; () banked
 33599  015BDA  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 33600  015BDC  0E3E               	movlw	62
 33601  015BDE  0100               	movlb	0	; () banked
 33602  015BE0  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 33603  015BE2  EC00  F0C1         	call	___ftmul	;wreg free
 33604  015BE6  C074  F0B4         	movff	?___ftmul,sin@f
 33605  015BEA  C075  F0B5         	movff	?___ftmul+1,sin@f+1
 33606  015BEE  C076  F0B6         	movff	?___ftmul+2,sin@f+2
 33607  015BF2  C0B4  F0AB         	movff	sin@f,___ftsub@f1
 33608  015BF6  C0B5  F0AC         	movff	sin@f+1,___ftsub@f1+1
 33609  015BFA  C0B6  F0AD         	movff	sin@f+2,___ftsub@f1+2
 33610  015BFE  C0B4  F0A3         	movff	sin@f,floor@x
 33611  015C02  C0B5  F0A4         	movff	sin@f+1,floor@x+1
 33612  015C06  C0B6  F0A5         	movff	sin@f+2,floor@x+2
 33613  015C0A  EC59  F0C6         	call	_floor	;wreg free
 33614  015C0E  C0A3  F0AE         	movff	?_floor,___ftsub@f2
 33615  015C12  C0A4  F0AF         	movff	?_floor+1,___ftsub@f2+1
 33616  015C16  C0A5  F0B0         	movff	?_floor+2,___ftsub@f2+2
 33617  015C1A  ECC1  F0D5         	call	___ftsub	;wreg free
 33618  015C1E  C0AB  F0B4         	movff	?___ftsub,sin@f
 33619  015C22  C0AC  F0B5         	movff	?___ftsub+1,sin@f+1
 33620  015C26  C0AD  F0B6         	movff	?___ftsub+2,sin@f+2
 33621  015C2A  C0B4  F074         	movff	sin@f,___ftmul@f1
 33622  015C2E  C0B5  F075         	movff	sin@f+1,___ftmul@f1+1
 33623  015C32  C0B6  F076         	movff	sin@f+2,___ftmul@f1+2
 33624  015C36  0E00               	movlw	0
 33625  015C38  0100               	movlb	0	; () banked
 33626  015C3A  6F77               	movwf	___ftmul@f2& (0+255),b
 33627  015C3C  0E80               	movlw	128
 33628  015C3E  0100               	movlb	0	; () banked
 33629  015C40  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 33630  015C42  0E40               	movlw	64
 33631  015C44  0100               	movlb	0	; () banked
 33632  015C46  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 33633  015C48  EC00  F0C1         	call	___ftmul	;wreg free
 33634  015C4C  C074  F0B4         	movff	?___ftmul,sin@f
 33635  015C50  C075  F0B5         	movff	?___ftmul+1,sin@f+1
 33636  015C54  C076  F0B6         	movff	?___ftmul+2,sin@f+2
 33637  015C58  0E00               	movlw	0
 33638  015C5A  0100               	movlb	0	; () banked
 33639  015C5C  6F99               	movwf	___ftge@ff1& (0+255),b
 33640  015C5E  0E00               	movlw	0
 33641  015C60  0100               	movlb	0	; () banked
 33642  015C62  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 33643  015C64  0E40               	movlw	64
 33644  015C66  0100               	movlb	0	; () banked
 33645  015C68  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 33646  015C6A  C0B4  F09C         	movff	sin@f,___ftge@ff2
 33647  015C6E  C0B5  F09D         	movff	sin@f+1,___ftge@ff2+1
 33648  015C72  C0B6  F09E         	movff	sin@f+2,___ftge@ff2+2
 33649  015C76  EC4B  F0CB         	call	___ftge	;wreg free
 33650  015C7A  0100               	movlb	0	; () banked
 33651  015C7C  B0D8               	btfsc	status,0,c
 33652  015C7E  D021               	goto	l21574
 33653                           
 33654                           ; BSR set to: 0
 33655  015C80  C0B4  F0AB         	movff	sin@f,___ftsub@f1
 33656  015C84  C0B5  F0AC         	movff	sin@f+1,___ftsub@f1+1
 33657  015C88  C0B6  F0AD         	movff	sin@f+2,___ftsub@f1+2
 33658  015C8C  0E00               	movlw	0
 33659  015C8E  0100               	movlb	0	; () banked
 33660  015C90  6FAE               	movwf	___ftsub@f2& (0+255),b
 33661  015C92  0E00               	movlw	0
 33662  015C94  0100               	movlb	0	; () banked
 33663  015C96  6FAF               	movwf	(___ftsub@f2+1)& (0+255),b
 33664  015C98  0E40               	movlw	64
 33665  015C9A  0100               	movlb	0	; () banked
 33666  015C9C  6FB0               	movwf	(___ftsub@f2+2)& (0+255),b
 33667  015C9E  ECC1  F0D5         	call	___ftsub	;wreg free
 33668  015CA2  C0AB  F0B4         	movff	?___ftsub,sin@f
 33669  015CA6  C0AC  F0B5         	movff	?___ftsub+1,sin@f+1
 33670  015CAA  C0AD  F0B6         	movff	?___ftsub+2,sin@f+2
 33671  015CAE  0100               	movlb	0	; () banked
 33672  015CB0  51C0               	movf	sin@sgn& (0+255),w,b
 33673  015CB2  0100               	movlb	0	; () banked
 33674  015CB4  A4D8               	btfss	status,2,c
 33675  015CB6  D002               	goto	u16460
 33676  015CB8  0E01               	movlw	1
 33677  015CBA  D001               	goto	u16470
 33678  015CBC                     u16460:
 33679  015CBC  0E00               	movlw	0
 33680  015CBE                     u16470:
 33681  015CBE  0100               	movlb	0	; () banked
 33682  015CC0  6FC0               	movwf	sin@sgn& (0+255),b
 33683  015CC2                     l21574:
 33684                           
 33685                           ; BSR set to: 0
 33686  015CC2  0E00               	movlw	0
 33687  015CC4  0100               	movlb	0	; () banked
 33688  015CC6  6F99               	movwf	___ftge@ff1& (0+255),b
 33689  015CC8  0E80               	movlw	128
 33690  015CCA  0100               	movlb	0	; () banked
 33691  015CCC  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 33692  015CCE  0E3F               	movlw	63
 33693  015CD0  0100               	movlb	0	; () banked
 33694  015CD2  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 33695  015CD4  C0B4  F09C         	movff	sin@f,___ftge@ff2
 33696  015CD8  C0B5  F09D         	movff	sin@f+1,___ftge@ff2+1
 33697  015CDC  C0B6  F09E         	movff	sin@f+2,___ftge@ff2+2
 33698  015CE0  EC4B  F0CB         	call	___ftge	;wreg free
 33699  015CE4  0100               	movlb	0	; () banked
 33700  015CE6  B0D8               	btfsc	status,0,c
 33701  015CE8  D01F               	goto	l10871
 33702                           
 33703                           ; BSR set to: 0
 33704  015CEA  C0B4  F083         	movff	sin@f,___ftneg@f1
 33705  015CEE  C0B5  F084         	movff	sin@f+1,___ftneg@f1+1
 33706  015CF2  C0B6  F085         	movff	sin@f+2,___ftneg@f1+2
 33707  015CF6  EC1D  F0D7         	call	___ftneg	;wreg free
 33708  015CFA  C083  F08D         	movff	?___ftneg,___ftadd@f1
 33709  015CFE  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 33710  015D02  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 33711  015D06  0E00               	movlw	0
 33712  015D08  0100               	movlb	0	; () banked
 33713  015D0A  6F90               	movwf	___ftadd@f2& (0+255),b
 33714  015D0C  0E00               	movlw	0
 33715  015D0E  0100               	movlb	0	; () banked
 33716  015D10  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33717  015D12  0E40               	movlw	64
 33718  015D14  0100               	movlb	0	; () banked
 33719  015D16  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33720  015D18  ECBE  F0B2         	call	___ftadd	;wreg free
 33721  015D1C  C08D  F0B4         	movff	?___ftadd,sin@f
 33722  015D20  C08E  F0B5         	movff	?___ftadd+1,sin@f+1
 33723  015D24  C08F  F0B6         	movff	?___ftadd+2,sin@f+2
 33724  015D28                     l10871:
 33725  015D28  C0B4  F074         	movff	sin@f,___ftmul@f1
 33726  015D2C  C0B5  F075         	movff	sin@f+1,___ftmul@f1+1
 33727  015D30  C0B6  F076         	movff	sin@f+2,___ftmul@f1+2
 33728  015D34  C0B4  F077         	movff	sin@f,___ftmul@f2
 33729  015D38  C0B5  F078         	movff	sin@f+1,___ftmul@f2+1
 33730  015D3C  C0B6  F079         	movff	sin@f+2,___ftmul@f2+2
 33731  015D40  EC00  F0C1         	call	___ftmul	;wreg free
 33732  015D44  C074  F0BD         	movff	?___ftmul,sin@x2
 33733  015D48  C075  F0BE         	movff	?___ftmul+1,sin@x2+1
 33734  015D4C  C076  F0BF         	movff	?___ftmul+2,sin@x2+2
 33735  015D50  C0BD  F099         	movff	sin@x2,eval_poly@x
 33736  015D54  C0BE  F09A         	movff	sin@x2+1,eval_poly@x+1
 33737  015D58  C0BF  F09B         	movff	sin@x2+2,eval_poly@x+2
 33738  015D5C  0E10               	movlw	low sin@coeff_b
 33739  015D5E  0100               	movlb	0	; () banked
 33740  015D60  6F9C               	movwf	eval_poly@d& (0+255),b
 33741  015D62  0EFC               	movlw	high sin@coeff_b
 33742  015D64  0100               	movlb	0	; () banked
 33743  015D66  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
 33744  015D68  0E00               	movlw	0
 33745  015D6A  0100               	movlb	0	; () banked
 33746  015D6C  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
 33747  015D6E  0E03               	movlw	3
 33748  015D70  6F9E               	movwf	eval_poly@n& (0+255),b
 33749  015D72  EC47  F0C8         	call	_eval_poly	;wreg free
 33750  015D76  C099  F0B7         	movff	?_eval_poly,sin@y
 33751  015D7A  C09A  F0B8         	movff	?_eval_poly+1,sin@y+1
 33752  015D7E  C09B  F0B9         	movff	?_eval_poly+2,sin@y+2
 33753  015D82  C0B7  F0A8         	movff	sin@y,___ftdiv@f2
 33754  015D86  C0B8  F0A9         	movff	sin@y+1,___ftdiv@f2+1
 33755  015D8A  C0B9  F0AA         	movff	sin@y+2,___ftdiv@f2+2
 33756  015D8E  0E00               	movlw	0
 33757  015D90  0100               	movlb	0	; () banked
 33758  015D92  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
 33759  015D94  0E04               	movlw	4
 33760  015D96  6F9E               	movwf	eval_poly@n& (0+255),b
 33761  015D98  0E01               	movlw	low sin@coeff_a
 33762  015D9A  0100               	movlb	0	; () banked
 33763  015D9C  6F9C               	movwf	eval_poly@d& (0+255),b
 33764  015D9E  0EFC               	movlw	high sin@coeff_a
 33765  015DA0  0100               	movlb	0	; () banked
 33766  015DA2  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
 33767  015DA4  C0BD  F099         	movff	sin@x2,eval_poly@x
 33768  015DA8  C0BE  F09A         	movff	sin@x2+1,eval_poly@x+1
 33769  015DAC  C0BF  F09B         	movff	sin@x2+2,eval_poly@x+2
 33770  015DB0  EC47  F0C8         	call	_eval_poly	;wreg free
 33771  015DB4  C099  F0A5         	movff	?_eval_poly,___ftdiv@f1
 33772  015DB8  C09A  F0A6         	movff	?_eval_poly+1,___ftdiv@f1+1
 33773  015DBC  C09B  F0A7         	movff	?_eval_poly+2,___ftdiv@f1+2
 33774  015DC0  ECAF  F0C1         	call	___ftdiv	;wreg free
 33775  015DC4  C0A5  F0BA         	movff	?___ftdiv,_sin$8175
 33776  015DC8  C0A6  F0BB         	movff	?___ftdiv+1,_sin$8175+1
 33777  015DCC  C0A7  F0BC         	movff	?___ftdiv+2,_sin$8175+2
 33778  015DD0  C0B4  F074         	movff	sin@f,___ftmul@f1
 33779  015DD4  C0B5  F075         	movff	sin@f+1,___ftmul@f1+1
 33780  015DD8  C0B6  F076         	movff	sin@f+2,___ftmul@f1+2
 33781  015DDC  C0BA  F077         	movff	_sin$8175,___ftmul@f2
 33782  015DE0  C0BB  F078         	movff	_sin$8175+1,___ftmul@f2+1
 33783  015DE4  C0BC  F079         	movff	_sin$8175+2,___ftmul@f2+2
 33784  015DE8  EC00  F0C1         	call	___ftmul	;wreg free
 33785  015DEC  C074  F0B4         	movff	?___ftmul,sin@f
 33786  015DF0  C075  F0B5         	movff	?___ftmul+1,sin@f+1
 33787  015DF4  C076  F0B6         	movff	?___ftmul+2,sin@f+2
 33788  015DF8  0100               	movlb	0	; () banked
 33789  015DFA  51C0               	movf	sin@sgn& (0+255),w,b
 33790  015DFC  0100               	movlb	0	; () banked
 33791  015DFE  B4D8               	btfsc	status,2,c
 33792  015E00  D00F               	goto	l10872
 33793                           
 33794                           ; BSR set to: 0
 33795  015E02  C0B4  F083         	movff	sin@f,___ftneg@f1
 33796  015E06  C0B5  F084         	movff	sin@f+1,___ftneg@f1+1
 33797  015E0A  C0B6  F085         	movff	sin@f+2,___ftneg@f1+2
 33798  015E0E  EC1D  F0D7         	call	___ftneg	;wreg free
 33799  015E12  C083  F0B4         	movff	?___ftneg,?_sin
 33800  015E16  C084  F0B5         	movff	?___ftneg+1,?_sin+1
 33801  015E1A  C085  F0B6         	movff	?___ftneg+2,?_sin+2
 33802  015E1E  0012               	return	
 33803  015E20                     l10872:
 33804                           
 33805                           ; BSR set to: 0
 33806  015E20  C0B4  F0B4         	movff	sin@f,?_sin
 33807  015E24  C0B5  F0B5         	movff	sin@f+1,?_sin+1
 33808  015E28  C0B6  F0B6         	movff	sin@f+2,?_sin+2
 33809  015E2C  0012               	return		;funcret
 33810  015E2E                     __end_of_sin:
 33811                           	opt stack 0
 33812                           tblptru	equ	0xFF8
 33813                           tblptrh	equ	0xFF7
 33814                           tblptrl	equ	0xFF6
 33815                           tablat	equ	0xFF5
 33816                           prodh	equ	0xFF4
 33817                           prodl	equ	0xFF3
 33818                           intcon	equ	0xFF2
 33819                           postinc0	equ	0xFEE
 33820                           wreg	equ	0xFE8
 33821                           postdec1	equ	0xFE5
 33822                           fsr1h	equ	0xFE2
 33823                           fsr1l	equ	0xFE1
 33824                           indf2	equ	0xFDF
 33825                           postinc2	equ	0xFDE
 33826                           postdec2	equ	0xFDD
 33827                           fsr2h	equ	0xFDA
 33828                           fsr2l	equ	0xFD9
 33829                           status	equ	0xFD8
 33830                           
 33831 ;; *************** function _floor *****************
 33832 ;; Defined at:
 33833 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\floor.c"
 33834 ;; Parameters:    Size  Location     Type
 33835 ;;  x               3   67[BANK0 ] unsigned char 
 33836 ;; Auto vars:     Size  Location     Type
 33837 ;;  i               3   70[BANK0 ] unsigned char 
 33838 ;;  expon           2   73[BANK0 ] int 
 33839 ;; Return value:  Size  Location     Type
 33840 ;;                  3   67[BANK0 ] int 
 33841 ;; Registers used:
 33842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 33843 ;; Tracked objects:
 33844 ;;		On entry : 0/0
 33845 ;;		On exit  : 0/0
 33846 ;;		Unchanged: 0/0
 33847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33848 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33849 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33851 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33852 ;;Total ram usage:        8 bytes
 33853 ;; Hardware stack levels used:    1
 33854 ;; Hardware stack levels required when called:    5
 33855 ;; This function calls:
 33856 ;;		___altoft
 33857 ;;		___ftadd
 33858 ;;		___ftge
 33859 ;;		___fttol
 33860 ;;		_frexp
 33861 ;; This function is called by:
 33862 ;;		_sin
 33863 ;; This function uses a non-reentrant model
 33864 ;;
 33865                           
 33866                           	psect	text126
 33867  018CB2                     __ptext126:
 33868                           	opt stack 0
 33869  018CB2                     _floor:
 33870                           	opt stack 22
 33871                           
 33872                           ;incstack = 0
 33873  018CB2  C0A3  F060         	movff	floor@x,frexp@value
 33874  018CB6  C0A4  F061         	movff	floor@x+1,frexp@value+1
 33875  018CBA  C0A5  F062         	movff	floor@x+2,frexp@value+2
 33876  018CBE  0EA9               	movlw	low floor@expon
 33877  018CC0  0100               	movlb	0	; () banked
 33878  018CC2  6F63               	movwf	frexp@eptr& (0+255),b
 33879  018CC4  0E00               	movlw	high floor@expon
 33880  018CC6  0100               	movlb	0	; () banked
 33881  018CC8  6F64               	movwf	(frexp@eptr+1)& (0+255),b
 33882  018CCA  ECE4  F0D1         	call	_frexp	;wreg free
 33883  018CCE  0100               	movlb	0	; () banked
 33884  018CD0  AFAA               	btfss	(floor@expon+1)& (0+255),7,b
 33885  018CD2  D017               	goto	l20658
 33886                           
 33887                           ; BSR set to: 0
 33888  018CD4  0100               	movlb	0	; () banked
 33889  018CD6  AFA5               	btfss	(floor@x+2)& (0+255),7,b
 33890  018CD8  D00A               	goto	l20654
 33891                           
 33892                           ; BSR set to: 0
 33893  018CDA  0E00               	movlw	0
 33894  018CDC  0100               	movlb	0	; () banked
 33895  018CDE  6FA3               	movwf	?_floor& (0+255),b
 33896  018CE0  0E80               	movlw	128
 33897  018CE2  0100               	movlb	0	; () banked
 33898  018CE4  6FA4               	movwf	(?_floor+1)& (0+255),b
 33899  018CE6  0EBF               	movlw	191
 33900  018CE8  0100               	movlb	0	; () banked
 33901  018CEA  6FA5               	movwf	(?_floor+2)& (0+255),b
 33902                           
 33903                           ; BSR set to: 0
 33904  018CEC  0012               	return	
 33905  018CEE                     l20654:
 33906                           
 33907                           ; BSR set to: 0
 33908  018CEE  0E00               	movlw	0
 33909  018CF0  0100               	movlb	0	; () banked
 33910  018CF2  6FA3               	movwf	?_floor& (0+255),b
 33911  018CF4  0E00               	movlw	0
 33912  018CF6  0100               	movlb	0	; () banked
 33913  018CF8  6FA4               	movwf	(?_floor+1)& (0+255),b
 33914  018CFA  0E00               	movlw	0
 33915  018CFC  0100               	movlb	0	; () banked
 33916  018CFE  6FA5               	movwf	(?_floor+2)& (0+255),b
 33917                           
 33918                           ; BSR set to: 0
 33919  018D00  0012               	return	
 33920  018D02                     l20658:
 33921                           
 33922                           ; BSR set to: 0
 33923  018D02  0100               	movlb	0	; () banked
 33924  018D04  51AA               	movf	(floor@expon+1)& (0+255),w,b
 33925  018D06  E105               	bnz	u14700
 33926  018D08  0E15               	movlw	21
 33927  018D0A  0100               	movlb	0	; () banked
 33928  018D0C  5DA9               	subwf	floor@expon& (0+255),w,b
 33929  018D0E  A0D8               	btfss	status,0,c
 33930  018D10  D007               	goto	l20662
 33931  018D12                     u14700:
 33932                           
 33933                           ; BSR set to: 0
 33934  018D12  C0A3  F0A3         	movff	floor@x,?_floor
 33935  018D16  C0A4  F0A4         	movff	floor@x+1,?_floor+1
 33936  018D1A  C0A5  F0A5         	movff	floor@x+2,?_floor+2
 33937  018D1E  0012               	return	
 33938  018D20                     l20662:
 33939                           
 33940                           ; BSR set to: 0
 33941  018D20  C0A3  F08A         	movff	floor@x,___fttol@f1
 33942  018D24  C0A4  F08B         	movff	floor@x+1,___fttol@f1+1
 33943  018D28  C0A5  F08C         	movff	floor@x+2,___fttol@f1+2
 33944  018D2C  EC55  F0C2         	call	___fttol	;wreg free
 33945  018D30  C08A  F099         	movff	?___fttol,___altoft@c
 33946  018D34  C08B  F09A         	movff	?___fttol+1,___altoft@c+1
 33947  018D38  C08C  F09B         	movff	?___fttol+2,___altoft@c+2
 33948  018D3C  C08D  F09C         	movff	?___fttol+3,___altoft@c+3
 33949  018D40  EC48  F0D1         	call	___altoft	;wreg free
 33950  018D44  C099  F0A6         	movff	?___altoft,floor@i
 33951  018D48  C09A  F0A7         	movff	?___altoft+1,floor@i+1
 33952  018D4C  C09B  F0A8         	movff	?___altoft+2,floor@i+2
 33953  018D50  C0A3  F099         	movff	floor@x,___ftge@ff1
 33954  018D54  C0A4  F09A         	movff	floor@x+1,___ftge@ff1+1
 33955  018D58  C0A5  F09B         	movff	floor@x+2,___ftge@ff1+2
 33956  018D5C  C0A6  F09C         	movff	floor@i,___ftge@ff2
 33957  018D60  C0A7  F09D         	movff	floor@i+1,___ftge@ff2+1
 33958  018D64  C0A8  F09E         	movff	floor@i+2,___ftge@ff2+2
 33959  018D68  EC4B  F0CB         	call	___ftge	;wreg free
 33960  018D6C  0100               	movlb	0	; () banked
 33961  018D6E  B0D8               	btfsc	status,0,c
 33962  018D70  D018               	goto	l11038
 33963                           
 33964                           ; BSR set to: 0
 33965  018D72  C0A6  F08D         	movff	floor@i,___ftadd@f1
 33966  018D76  C0A7  F08E         	movff	floor@i+1,___ftadd@f1+1
 33967  018D7A  C0A8  F08F         	movff	floor@i+2,___ftadd@f1+2
 33968  018D7E  0E00               	movlw	0
 33969  018D80  0100               	movlb	0	; () banked
 33970  018D82  6F90               	movwf	___ftadd@f2& (0+255),b
 33971  018D84  0E80               	movlw	128
 33972  018D86  0100               	movlb	0	; () banked
 33973  018D88  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33974  018D8A  0EBF               	movlw	191
 33975  018D8C  0100               	movlb	0	; () banked
 33976  018D8E  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33977  018D90  ECBE  F0B2         	call	___ftadd	;wreg free
 33978  018D94  C08D  F0A3         	movff	?___ftadd,?_floor
 33979  018D98  C08E  F0A4         	movff	?___ftadd+1,?_floor+1
 33980  018D9C  C08F  F0A5         	movff	?___ftadd+2,?_floor+2
 33981  018DA0  0012               	return	
 33982  018DA2                     l11038:
 33983                           
 33984                           ; BSR set to: 0
 33985  018DA2  C0A6  F0A3         	movff	floor@i,?_floor
 33986  018DA6  C0A7  F0A4         	movff	floor@i+1,?_floor+1
 33987  018DAA  C0A8  F0A5         	movff	floor@i+2,?_floor+2
 33988  018DAE  0012               	return		;funcret
 33989  018DB0                     __end_of_floor:
 33990                           	opt stack 0
 33991                           tblptru	equ	0xFF8
 33992                           tblptrh	equ	0xFF7
 33993                           tblptrl	equ	0xFF6
 33994                           tablat	equ	0xFF5
 33995                           prodh	equ	0xFF4
 33996                           prodl	equ	0xFF3
 33997                           intcon	equ	0xFF2
 33998                           postinc0	equ	0xFEE
 33999                           wreg	equ	0xFE8
 34000                           postdec1	equ	0xFE5
 34001                           fsr1h	equ	0xFE2
 34002                           fsr1l	equ	0xFE1
 34003                           indf2	equ	0xFDF
 34004                           postinc2	equ	0xFDE
 34005                           postdec2	equ	0xFDD
 34006                           fsr2h	equ	0xFDA
 34007                           fsr2l	equ	0xFD9
 34008                           status	equ	0xFD8
 34009                           
 34010 ;; *************** function _frexp *****************
 34011 ;; Defined at:
 34012 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
 34013 ;; Parameters:    Size  Location     Type
 34014 ;;  value           3    0[BANK0 ] int 
 34015 ;;  eptr            2    3[BANK0 ] PTR int 
 34016 ;;		 -> floor@expon(2), 
 34017 ;; Auto vars:     Size  Location     Type
 34018 ;;		None
 34019 ;; Return value:  Size  Location     Type
 34020 ;;                  3    0[BANK0 ] PTR int 
 34021 ;; Registers used:
 34022 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 34023 ;; Tracked objects:
 34024 ;;		On entry : 0/0
 34025 ;;		On exit  : 0/0
 34026 ;;		Unchanged: 0/0
 34027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34028 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34031 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34032 ;;Total ram usage:        7 bytes
 34033 ;; Hardware stack levels used:    1
 34034 ;; Hardware stack levels required when called:    3
 34035 ;; This function calls:
 34036 ;;		Nothing
 34037 ;; This function is called by:
 34038 ;;		_floor
 34039 ;; This function uses a non-reentrant model
 34040 ;;
 34041                           
 34042                           	psect	text127
 34043  01A3C8                     __ptext127:
 34044                           	opt stack 0
 34045  01A3C8                     _frexp:
 34046                           	opt stack 23
 34047                           
 34048                           ;incstack = 0
 34049  01A3C8  0100               	movlb	0	; () banked
 34050  01A3CA  5160               	movf	frexp@value& (0+255),w,b
 34051  01A3CC  0100               	movlb	0	; () banked
 34052  01A3CE  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 34053  01A3D0  0100               	movlb	0	; () banked
 34054  01A3D2  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 34055  01A3D4  A4D8               	btfss	status,2,c
 34056  01A3D6  D009               	goto	l20126
 34057                           
 34058                           ; BSR set to: 0
 34059  01A3D8  C063  FFD9         	movff	frexp@eptr,fsr2l
 34060  01A3DC  C064  FFDA         	movff	frexp@eptr+1,fsr2h
 34061  01A3E0  0E00               	movlw	0
 34062  01A3E2  6EDE               	movwf	postinc2,c
 34063  01A3E4  0E00               	movlw	0
 34064  01A3E6  6EDD               	movwf	postdec2,c
 34065                           
 34066                           ; BSR set to: 0
 34067                           ;	Return value of _frexp is never used
 34068  01A3E8  0012               	return	
 34069  01A3EA                     l20126:
 34070                           
 34071                           ; BSR set to: 0
 34072  01A3EA  0100               	movlb	0	; () banked
 34073  01A3EC  5162               	movf	(frexp@value+2)& (0+255),w,b
 34074  01A3EE  0B7F               	andlw	127
 34075  01A3F0  0100               	movlb	0	; () banked
 34076  01A3F2  6F65               	movwf	??_frexp& (0+255),b
 34077  01A3F4  6B66               	clrf	(??_frexp+1)& (0+255),b
 34078  01A3F6  90D8               	bcf	status,0,c
 34079  01A3F8  0100               	movlb	0	; () banked
 34080  01A3FA  3765               	rlcf	??_frexp& (0+255),f,b
 34081  01A3FC  3766               	rlcf	(??_frexp+1)& (0+255),f,b
 34082  01A3FE  C063  FFD9         	movff	frexp@eptr,fsr2l
 34083  01A402  C064  FFDA         	movff	frexp@eptr+1,fsr2h
 34084  01A406  C065  FFDE         	movff	??_frexp,postinc2
 34085  01A40A  C066  FFDD         	movff	??_frexp+1,postdec2
 34086  01A40E  0100               	movlb	0	; () banked
 34087  01A410  AF61               	btfss	(frexp@value+1)& (0+255),7,b
 34088  01A412  D004               	goto	u13700
 34089  01A414  0100               	movlb	0	; () banked
 34090  01A416  6B65               	clrf	??_frexp& (0+255),b
 34091  01A418  2B65               	incf	??_frexp& (0+255),f,b
 34092  01A41A  D002               	goto	u13708
 34093  01A41C                     u13700:
 34094  01A41C  0100               	movlb	0	; () banked
 34095  01A41E  6B65               	clrf	??_frexp& (0+255),b
 34096  01A420                     u13708:
 34097  01A420  0100               	movlb	0	; () banked
 34098  01A422  5165               	movf	??_frexp& (0+255),w,b
 34099  01A424  C063  FFD9         	movff	frexp@eptr,fsr2l
 34100  01A428  C064  FFDA         	movff	frexp@eptr+1,fsr2h
 34101  01A42C  12DE               	iorwf	postinc2,f,c
 34102  01A42E  0E00               	movlw	0
 34103  01A430  12DD               	iorwf	postdec2,f,c
 34104                           
 34105                           ; BSR set to: 0
 34106  01A432  C063  FFD9         	movff	frexp@eptr,fsr2l
 34107  01A436  C064  FFDA         	movff	frexp@eptr+1,fsr2h
 34108  01A43A  0E82               	movlw	130
 34109  01A43C  26DE               	addwf	postinc2,f,c
 34110  01A43E  0EFF               	movlw	255
 34111  01A440  22DD               	addwfc	postdec2,f,c
 34112                           
 34113                           ; BSR set to: 0
 34114  01A442  0100               	movlb	0	; () banked
 34115  01A444  8162               	bsf	(frexp@value+2)& (0+255),0,b
 34116  01A446  8362               	bsf	(frexp@value+2)& (0+255),1,b
 34117  01A448  8562               	bsf	(frexp@value+2)& (0+255),2,b
 34118  01A44A  8762               	bsf	(frexp@value+2)& (0+255),3,b
 34119  01A44C  8962               	bsf	(frexp@value+2)& (0+255),4,b
 34120  01A44E  8B62               	bsf	(frexp@value+2)& (0+255),5,b
 34121  01A450  9D62               	bcf	(frexp@value+2)& (0+255),6,b
 34122                           
 34123                           ; BSR set to: 0
 34124  01A452  0100               	movlb	0	; () banked
 34125  01A454  9F61               	bcf	(frexp@value+1)& (0+255),7,b
 34126  01A456  0012               	return	
 34127  01A458                     __end_of_frexp:
 34128                           	opt stack 0
 34129                           tblptru	equ	0xFF8
 34130                           tblptrh	equ	0xFF7
 34131                           tblptrl	equ	0xFF6
 34132                           tablat	equ	0xFF5
 34133                           prodh	equ	0xFF4
 34134                           prodl	equ	0xFF3
 34135                           intcon	equ	0xFF2
 34136                           postinc0	equ	0xFEE
 34137                           wreg	equ	0xFE8
 34138                           postdec1	equ	0xFE5
 34139                           fsr1h	equ	0xFE2
 34140                           fsr1l	equ	0xFE1
 34141                           indf2	equ	0xFDF
 34142                           postinc2	equ	0xFDE
 34143                           postdec2	equ	0xFDD
 34144                           fsr2h	equ	0xFDA
 34145                           fsr2l	equ	0xFD9
 34146                           status	equ	0xFD8
 34147                           
 34148 ;; *************** function ___fttol *****************
 34149 ;; Defined at:
 34150 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 34151 ;; Parameters:    Size  Location     Type
 34152 ;;  f1              3   42[BANK0 ] float 
 34153 ;; Auto vars:     Size  Location     Type
 34154 ;;  lval            4   52[BANK0 ] unsigned long 
 34155 ;;  exp1            1   56[BANK0 ] unsigned char 
 34156 ;;  sign1           1   51[BANK0 ] unsigned char 
 34157 ;; Return value:  Size  Location     Type
 34158 ;;                  4   42[BANK0 ] long 
 34159 ;; Registers used:
 34160 ;;		wreg, status,2, status,0
 34161 ;; Tracked objects:
 34162 ;;		On entry : 0/0
 34163 ;;		On exit  : 0/0
 34164 ;;		Unchanged: 0/0
 34165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34166 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34167 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34168 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34169 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34170 ;;Total ram usage:       15 bytes
 34171 ;; Hardware stack levels used:    1
 34172 ;; Hardware stack levels required when called:    3
 34173 ;; This function calls:
 34174 ;;		Nothing
 34175 ;; This function is called by:
 34176 ;;		_Generator_RPM_Cal
 34177 ;;		_printf
 34178 ;;		_floor
 34179 ;; This function uses a non-reentrant model
 34180 ;;
 34181                           
 34182                           	psect	text128
 34183  0184AA                     __ptext128:
 34184                           	opt stack 0
 34185  0184AA                     ___fttol:
 34186                           	opt stack 23
 34187                           
 34188                           ; BSR set to: 0
 34189                           ;incstack = 0
 34190  0184AA  C08C  F08E         	movff	___fttol@f1+2,??___fttol
 34191  0184AE  0100               	movlb	0	; () banked
 34192  0184B0  6B8F               	clrf	(??___fttol+1)& (0+255),b
 34193  0184B2  6B90               	clrf	(??___fttol+2)& (0+255),b
 34194  0184B4  0100               	movlb	0	; () banked
 34195  0184B6  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 34196  0184B8  0100               	movlb	0	; () banked
 34197  0184BA  378E               	rlcf	??___fttol& (0+255),f,b
 34198  0184BC  E301               	bnc	u13541
 34199  0184BE  818F               	bsf	(??___fttol+1)& (0+255),0,b
 34200  0184C0                     u13541:
 34201  0184C0  0100               	movlb	0	; () banked
 34202  0184C2  518E               	movf	??___fttol& (0+255),w,b
 34203  0184C4  0100               	movlb	0	; () banked
 34204  0184C6  6F98               	movwf	___fttol@exp1& (0+255),b
 34205  0184C8  0100               	movlb	0	; () banked
 34206  0184CA  5198               	movf	___fttol@exp1& (0+255),w,b
 34207  0184CC  A4D8               	btfss	status,2,c
 34208  0184CE  D00A               	goto	l20032
 34209                           
 34210                           ; BSR set to: 0
 34211  0184D0  0E00               	movlw	0
 34212  0184D2  0100               	movlb	0	; () banked
 34213  0184D4  6F8A               	movwf	?___fttol& (0+255),b
 34214  0184D6  0E00               	movlw	0
 34215  0184D8  6F8B               	movwf	(?___fttol+1)& (0+255),b
 34216  0184DA  0E00               	movlw	0
 34217  0184DC  6F8C               	movwf	(?___fttol+2)& (0+255),b
 34218  0184DE  0E00               	movlw	0
 34219  0184E0  6F8D               	movwf	(?___fttol+3)& (0+255),b
 34220                           
 34221                           ; BSR set to: 0
 34222  0184E2  0012               	return	
 34223  0184E4                     l20032:
 34224                           
 34225                           ; BSR set to: 0
 34226  0184E4  0E17               	movlw	23
 34227  0184E6  0100               	movlb	0	; () banked
 34228  0184E8  6F8E               	movwf	??___fttol& (0+255),b
 34229  0184EA  C08A  F08F         	movff	___fttol@f1,??___fttol+1
 34230  0184EE  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
 34231  0184F2  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
 34232  0184F6  0100               	movlb	0	; () banked
 34233  0184F8  298E               	incf	??___fttol& (0+255),w,b
 34234  0184FA  0100               	movlb	0	; () banked
 34235  0184FC  6F92               	movwf	(??___fttol+4)& (0+255),b
 34236  0184FE  D005               	goto	u13560
 34237  018500                     u13565:
 34238  018500  0100               	movlb	0	; () banked
 34239  018502  90D8               	bcf	status,0,c
 34240  018504  3391               	rrcf	(??___fttol+3)& (0+255),f,b
 34241  018506  3390               	rrcf	(??___fttol+2)& (0+255),f,b
 34242  018508  338F               	rrcf	(??___fttol+1)& (0+255),f,b
 34243  01850A                     u13560:
 34244  01850A  0100               	movlb	0	; () banked
 34245  01850C  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
 34246  01850E  D7F8               	goto	u13565
 34247  018510  0100               	movlb	0	; () banked
 34248  018512  518F               	movf	(??___fttol+1)& (0+255),w,b
 34249  018514  0100               	movlb	0	; () banked
 34250  018516  6F93               	movwf	___fttol@sign1& (0+255),b
 34251                           
 34252                           ; BSR set to: 0
 34253  018518  0100               	movlb	0	; () banked
 34254  01851A  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
 34255                           
 34256                           ; BSR set to: 0
 34257  01851C  0EFF               	movlw	255
 34258  01851E  0100               	movlb	0	; () banked
 34259  018520  178A               	andwf	___fttol@f1& (0+255),f,b
 34260  018522  0EFF               	movlw	255
 34261  018524  0100               	movlb	0	; () banked
 34262  018526  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
 34263  018528  0E00               	movlw	0
 34264  01852A  0100               	movlb	0	; () banked
 34265  01852C  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
 34266                           
 34267                           ; BSR set to: 0
 34268  01852E  0100               	movlb	0	; () banked
 34269  018530  518A               	movf	___fttol@f1& (0+255),w,b
 34270  018532  0100               	movlb	0	; () banked
 34271  018534  6F94               	movwf	___fttol@lval& (0+255),b
 34272  018536  0100               	movlb	0	; () banked
 34273  018538  518B               	movf	(___fttol@f1+1)& (0+255),w,b
 34274  01853A  0100               	movlb	0	; () banked
 34275  01853C  6F95               	movwf	(___fttol@lval+1)& (0+255),b
 34276  01853E  0100               	movlb	0	; () banked
 34277  018540  518C               	movf	(___fttol@f1+2)& (0+255),w,b
 34278  018542  0100               	movlb	0	; () banked
 34279  018544  6F96               	movwf	(___fttol@lval+2)& (0+255),b
 34280  018546  0100               	movlb	0	; () banked
 34281  018548  6B97               	clrf	(___fttol@lval+3)& (0+255),b
 34282                           
 34283                           ; BSR set to: 0
 34284  01854A  0E8E               	movlw	142
 34285  01854C  0100               	movlb	0	; () banked
 34286  01854E  5F98               	subwf	___fttol@exp1& (0+255),f,b
 34287                           
 34288                           ; BSR set to: 0
 34289  018550  0100               	movlb	0	; () banked
 34290  018552  AF98               	btfss	___fttol@exp1& (0+255),7,b
 34291  018554  D01A               	goto	l20054
 34292                           
 34293                           ; BSR set to: 0
 34294  018556  0100               	movlb	0	; () banked
 34295  018558  5198               	movf	___fttol@exp1& (0+255),w,b
 34296  01855A  0A80               	xorlw	128
 34297  01855C  0F8F               	addlw	143
 34298  01855E  B0D8               	btfsc	status,0,c
 34299  018560  D00A               	goto	l20050
 34300                           
 34301                           ; BSR set to: 0
 34302  018562  0E00               	movlw	0
 34303  018564  0100               	movlb	0	; () banked
 34304  018566  6F8A               	movwf	?___fttol& (0+255),b
 34305  018568  0E00               	movlw	0
 34306  01856A  6F8B               	movwf	(?___fttol+1)& (0+255),b
 34307  01856C  0E00               	movlw	0
 34308  01856E  6F8C               	movwf	(?___fttol+2)& (0+255),b
 34309  018570  0E00               	movlw	0
 34310  018572  6F8D               	movwf	(?___fttol+3)& (0+255),b
 34311                           
 34312                           ; BSR set to: 0
 34313  018574  0012               	return	
 34314  018576                     l20050:
 34315                           
 34316                           ; BSR set to: 0
 34317  018576  0100               	movlb	0	; () banked
 34318  018578  90D8               	bcf	status,0,c
 34319  01857A  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
 34320  01857C  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
 34321  01857E  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
 34322  018580  3394               	rrcf	___fttol@lval& (0+255),f,b
 34323                           
 34324                           ; BSR set to: 0
 34325  018582  0100               	movlb	0	; () banked
 34326  018584  3F98               	incfsz	___fttol@exp1& (0+255),f,b
 34327  018586  D7F7               	goto	l20050
 34328                           
 34329                           ; BSR set to: 0
 34330  018588  D01B               	goto	l20064
 34331  01858A                     l20054:
 34332                           
 34333                           ; BSR set to: 0
 34334  01858A  0E17               	movlw	23
 34335  01858C  0100               	movlb	0	; () banked
 34336  01858E  6598               	cpfsgt	___fttol@exp1& (0+255),b
 34337  018590  D012               	goto	l20062
 34338                           
 34339                           ; BSR set to: 0
 34340  018592  0E00               	movlw	0
 34341  018594  0100               	movlb	0	; () banked
 34342  018596  6F8A               	movwf	?___fttol& (0+255),b
 34343  018598  0E00               	movlw	0
 34344  01859A  6F8B               	movwf	(?___fttol+1)& (0+255),b
 34345  01859C  0E00               	movlw	0
 34346  01859E  6F8C               	movwf	(?___fttol+2)& (0+255),b
 34347  0185A0  0E00               	movlw	0
 34348  0185A2  6F8D               	movwf	(?___fttol+3)& (0+255),b
 34349                           
 34350                           ; BSR set to: 0
 34351  0185A4  0012               	return	
 34352  0185A6                     l20060:
 34353                           
 34354                           ; BSR set to: 0
 34355  0185A6  0100               	movlb	0	; () banked
 34356  0185A8  90D8               	bcf	status,0,c
 34357  0185AA  3794               	rlcf	___fttol@lval& (0+255),f,b
 34358  0185AC  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
 34359  0185AE  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
 34360  0185B0  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
 34361  0185B2  0100               	movlb	0	; () banked
 34362  0185B4  0798               	decf	___fttol@exp1& (0+255),f,b
 34363  0185B6                     l20062:
 34364                           
 34365                           ; BSR set to: 0
 34366  0185B6  0100               	movlb	0	; () banked
 34367  0185B8  5198               	movf	___fttol@exp1& (0+255),w,b
 34368  0185BA  0100               	movlb	0	; () banked
 34369  0185BC  A4D8               	btfss	status,2,c
 34370  0185BE  D7F3               	goto	l20060
 34371  0185C0                     l20064:
 34372                           
 34373                           ; BSR set to: 0
 34374  0185C0  0100               	movlb	0	; () banked
 34375  0185C2  5193               	movf	___fttol@sign1& (0+255),w,b
 34376  0185C4  0100               	movlb	0	; () banked
 34377  0185C6  B4D8               	btfsc	status,2,c
 34378  0185C8  D009               	goto	l20068
 34379                           
 34380                           ; BSR set to: 0
 34381  0185CA  0100               	movlb	0	; () banked
 34382  0185CC  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
 34383  0185CE  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
 34384  0185D0  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
 34385  0185D2  6D94               	negf	___fttol@lval& (0+255),b
 34386  0185D4  0E00               	movlw	0
 34387  0185D6  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
 34388  0185D8  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
 34389  0185DA  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
 34390  0185DC                     l20068:
 34391                           
 34392                           ; BSR set to: 0
 34393  0185DC  C094  F08A         	movff	___fttol@lval,?___fttol
 34394  0185E0  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
 34395  0185E4  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
 34396  0185E8  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
 34397  0185EC  0012               	return	
 34398  0185EE                     __end_of___fttol:
 34399                           	opt stack 0
 34400                           tblptru	equ	0xFF8
 34401                           tblptrh	equ	0xFF7
 34402                           tblptrl	equ	0xFF6
 34403                           tablat	equ	0xFF5
 34404                           prodh	equ	0xFF4
 34405                           prodl	equ	0xFF3
 34406                           intcon	equ	0xFF2
 34407                           postinc0	equ	0xFEE
 34408                           wreg	equ	0xFE8
 34409                           postdec1	equ	0xFE5
 34410                           fsr1h	equ	0xFE2
 34411                           fsr1l	equ	0xFE1
 34412                           indf2	equ	0xFDF
 34413                           postinc2	equ	0xFDE
 34414                           postdec2	equ	0xFDD
 34415                           fsr2h	equ	0xFDA
 34416                           fsr2l	equ	0xFD9
 34417                           status	equ	0xFD8
 34418                           
 34419 ;; *************** function ___ftge *****************
 34420 ;; Defined at:
 34421 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 34422 ;; Parameters:    Size  Location     Type
 34423 ;;  ff1             3   57[BANK0 ] float 
 34424 ;;  ff2             3   60[BANK0 ] float 
 34425 ;; Auto vars:     Size  Location     Type
 34426 ;;		None
 34427 ;; Return value:  Size  Location     Type
 34428 ;;		None               void
 34429 ;; Registers used:
 34430 ;;		wreg, status,2, status,0
 34431 ;; Tracked objects:
 34432 ;;		On entry : 0/0
 34433 ;;		On exit  : 0/0
 34434 ;;		Unchanged: 0/0
 34435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34436 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34438 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34439 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34440 ;;Total ram usage:        9 bytes
 34441 ;; Hardware stack levels used:    1
 34442 ;; Hardware stack levels required when called:    3
 34443 ;; This function calls:
 34444 ;;		Nothing
 34445 ;; This function is called by:
 34446 ;;		_Turbine_RPM_Cal
 34447 ;;		_Generator_RPM_Cal
 34448 ;;		_Stopping_state_function
 34449 ;;		_Turbine_Restore_Check
 34450 ;;		_Wind_Speed_Error_Trigger
 34451 ;;		_Grid_UV
 34452 ;;		_Grid_OV
 34453 ;;		_Turbine_Over_Speed
 34454 ;;		_Turbine_Under_speed
 34455 ;;		_Grid_Frequency
 34456 ;;		_Grid_Over_Current
 34457 ;;		_Generator_RPM
 34458 ;;		_Grid_Minimum_Power
 34459 ;;		_Grid_Maximum_Power
 34460 ;;		_Turbine_OverLoaded_Error
 34461 ;;		_VFD_Freq_Step_up
 34462 ;;		_Volt_Curr_Read
 34463 ;;		_Cons_Gene
 34464 ;;		_Freq_Calc
 34465 ;;		_R_PF_Calc
 34466 ;;		_R_PF_Avg
 34467 ;;		_Y_PF_Calc
 34468 ;;		_Y_PF_Avg
 34469 ;;		_B_PF_Calc
 34470 ;;		_B_PF_Avg
 34471 ;;		_Power_Factor
 34472 ;;		_Ramp_Up_Slip
 34473 ;;		_Ramp_Up_Slip_Error_Trigger
 34474 ;;		_printf
 34475 ;;		_cos
 34476 ;;		_sin
 34477 ;;		_sqrt
 34478 ;;		_floor
 34479 ;;		_Turbine2Wheel_Ratio
 34480 ;;		_Turbine_RPM_Checking_Rampup
 34481 ;; This function uses a non-reentrant model
 34482 ;;
 34483                           
 34484                           	psect	text129
 34485  019696                     __ptext129:
 34486                           	opt stack 0
 34487  019696                     ___ftge:
 34488                           	opt stack 26
 34489                           
 34490                           ; BSR set to: 0
 34491                           ;incstack = 0
 34492  019696  0100               	movlb	0	; () banked
 34493  019698  AF9B               	btfss	(___ftge@ff1+2)& (0+255),7,b
 34494  01969A  D01D               	goto	l20008
 34495                           
 34496                           ; BSR set to: 0
 34497  01969C  C099  F09F         	movff	___ftge@ff1,??___ftge
 34498  0196A0  C09A  F0A0         	movff	___ftge@ff1+1,??___ftge+1
 34499  0196A4  C09B  F0A1         	movff	___ftge@ff1+2,??___ftge+2
 34500  0196A8  0100               	movlb	0	; () banked
 34501  0196AA  1F9F               	comf	??___ftge& (0+255),f,b
 34502  0196AC  1FA0               	comf	(??___ftge+1)& (0+255),f,b
 34503  0196AE  1FA1               	comf	(??___ftge+2)& (0+255),f,b
 34504  0196B0  2B9F               	incf	??___ftge& (0+255),f,b
 34505  0196B2  0E00               	movlw	0
 34506  0196B4  23A0               	addwfc	(??___ftge+1)& (0+255),f,b
 34507  0196B6  23A1               	addwfc	(??___ftge+2)& (0+255),f,b
 34508  0196B8  0E00               	movlw	0
 34509  0196BA  0100               	movlb	0	; () banked
 34510  0196BC  259F               	addwf	??___ftge& (0+255),w,b
 34511  0196BE  0100               	movlb	0	; () banked
 34512  0196C0  6F99               	movwf	___ftge@ff1& (0+255),b
 34513  0196C2  0E00               	movlw	0
 34514  0196C4  0100               	movlb	0	; () banked
 34515  0196C6  21A0               	addwfc	(??___ftge+1)& (0+255),w,b
 34516  0196C8  0100               	movlb	0	; () banked
 34517  0196CA  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 34518  0196CC  0E80               	movlw	128
 34519  0196CE  0100               	movlb	0	; () banked
 34520  0196D0  21A1               	addwfc	(??___ftge+2)& (0+255),w,b
 34521  0196D2  0100               	movlb	0	; () banked
 34522  0196D4  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 34523  0196D6                     l20008:
 34524                           
 34525                           ; BSR set to: 0
 34526  0196D6  0100               	movlb	0	; () banked
 34527  0196D8  AF9E               	btfss	(___ftge@ff2+2)& (0+255),7,b
 34528  0196DA  D01D               	goto	l20012
 34529                           
 34530                           ; BSR set to: 0
 34531  0196DC  C09C  F09F         	movff	___ftge@ff2,??___ftge
 34532  0196E0  C09D  F0A0         	movff	___ftge@ff2+1,??___ftge+1
 34533  0196E4  C09E  F0A1         	movff	___ftge@ff2+2,??___ftge+2
 34534  0196E8  0100               	movlb	0	; () banked
 34535  0196EA  1F9F               	comf	??___ftge& (0+255),f,b
 34536  0196EC  1FA0               	comf	(??___ftge+1)& (0+255),f,b
 34537  0196EE  1FA1               	comf	(??___ftge+2)& (0+255),f,b
 34538  0196F0  2B9F               	incf	??___ftge& (0+255),f,b
 34539  0196F2  0E00               	movlw	0
 34540  0196F4  23A0               	addwfc	(??___ftge+1)& (0+255),f,b
 34541  0196F6  23A1               	addwfc	(??___ftge+2)& (0+255),f,b
 34542  0196F8  0E00               	movlw	0
 34543  0196FA  0100               	movlb	0	; () banked
 34544  0196FC  259F               	addwf	??___ftge& (0+255),w,b
 34545  0196FE  0100               	movlb	0	; () banked
 34546  019700  6F9C               	movwf	___ftge@ff2& (0+255),b
 34547  019702  0E00               	movlw	0
 34548  019704  0100               	movlb	0	; () banked
 34549  019706  21A0               	addwfc	(??___ftge+1)& (0+255),w,b
 34550  019708  0100               	movlb	0	; () banked
 34551  01970A  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 34552  01970C  0E80               	movlw	128
 34553  01970E  0100               	movlb	0	; () banked
 34554  019710  21A1               	addwfc	(??___ftge+2)& (0+255),w,b
 34555  019712  0100               	movlb	0	; () banked
 34556  019714  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 34557  019716                     l20012:
 34558                           
 34559                           ; BSR set to: 0
 34560  019716  0E00               	movlw	0
 34561  019718  0100               	movlb	0	; () banked
 34562  01971A  1B99               	xorwf	___ftge@ff1& (0+255),f,b
 34563  01971C  0E00               	movlw	0
 34564  01971E  0100               	movlb	0	; () banked
 34565  019720  1B9A               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 34566  019722  0E80               	movlw	128
 34567  019724  0100               	movlb	0	; () banked
 34568  019726  1B9B               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 34569                           
 34570                           ; BSR set to: 0
 34571  019728  0E00               	movlw	0
 34572  01972A  0100               	movlb	0	; () banked
 34573  01972C  1B9C               	xorwf	___ftge@ff2& (0+255),f,b
 34574  01972E  0E00               	movlw	0
 34575  019730  0100               	movlb	0	; () banked
 34576  019732  1B9D               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 34577  019734  0E80               	movlw	128
 34578  019736  0100               	movlb	0	; () banked
 34579  019738  1B9E               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 34580  01973A  0100               	movlb	0	; () banked
 34581  01973C  519C               	movf	___ftge@ff2& (0+255),w,b
 34582  01973E  0100               	movlb	0	; () banked
 34583  019740  5D99               	subwf	___ftge@ff1& (0+255),w,b
 34584  019742  0100               	movlb	0	; () banked
 34585  019744  519D               	movf	(___ftge@ff2+1)& (0+255),w,b
 34586  019746  0100               	movlb	0	; () banked
 34587  019748  599A               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 34588  01974A  0100               	movlb	0	; () banked
 34589  01974C  519E               	movf	(___ftge@ff2+2)& (0+255),w,b
 34590  01974E  0100               	movlb	0	; () banked
 34591  019750  599B               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 34592  019752  B0D8               	btfsc	status,0,c
 34593  019754  D002               	goto	l20018
 34594                           
 34595                           ; BSR set to: 0
 34596  019756  90D8               	bcf	status,0,c
 34597  019758  0012               	return	
 34598  01975A                     l20018:
 34599                           
 34600                           ; BSR set to: 0
 34601  01975A  80D8               	bsf	status,0,c
 34602                           
 34603                           ; BSR set to: 0
 34604  01975C  0012               	return	
 34605  01975E                     __end_of___ftge:
 34606                           	opt stack 0
 34607                           tblptru	equ	0xFF8
 34608                           tblptrh	equ	0xFF7
 34609                           tblptrl	equ	0xFF6
 34610                           tablat	equ	0xFF5
 34611                           prodh	equ	0xFF4
 34612                           prodl	equ	0xFF3
 34613                           intcon	equ	0xFF2
 34614                           postinc0	equ	0xFEE
 34615                           wreg	equ	0xFE8
 34616                           postdec1	equ	0xFE5
 34617                           fsr1h	equ	0xFE2
 34618                           fsr1l	equ	0xFE1
 34619                           indf2	equ	0xFDF
 34620                           postinc2	equ	0xFDE
 34621                           postdec2	equ	0xFDD
 34622                           fsr2h	equ	0xFDA
 34623                           fsr2l	equ	0xFD9
 34624                           status	equ	0xFD8
 34625                           
 34626 ;; *************** function ___altoft *****************
 34627 ;; Defined at:
 34628 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 34629 ;; Parameters:    Size  Location     Type
 34630 ;;  c               4   57[BANK0 ] long 
 34631 ;; Auto vars:     Size  Location     Type
 34632 ;;  sign            1   66[BANK0 ] unsigned char 
 34633 ;;  exp             1   65[BANK0 ] unsigned char 
 34634 ;; Return value:  Size  Location     Type
 34635 ;;                  3   57[BANK0 ] float 
 34636 ;; Registers used:
 34637 ;;		wreg, status,2, status,0, cstack
 34638 ;; Tracked objects:
 34639 ;;		On entry : 0/0
 34640 ;;		On exit  : 0/0
 34641 ;;		Unchanged: 0/0
 34642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34643 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34644 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34645 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34646 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34647 ;;Total ram usage:       10 bytes
 34648 ;; Hardware stack levels used:    1
 34649 ;; Hardware stack levels required when called:    4
 34650 ;; This function calls:
 34651 ;;		___ftpack
 34652 ;; This function is called by:
 34653 ;;		_floor
 34654 ;; This function uses a non-reentrant model
 34655 ;;
 34656                           
 34657                           	psect	text130
 34658  01A290                     __ptext130:
 34659                           	opt stack 0
 34660  01A290                     ___altoft:
 34661                           	opt stack 22
 34662                           
 34663                           ; BSR set to: 0
 34664                           ;incstack = 0
 34665  01A290  0E00               	movlw	0
 34666  01A292  0100               	movlb	0	; () banked
 34667  01A294  6FA2               	movwf	___altoft@sign& (0+255),b
 34668  01A296  0E8E               	movlw	142
 34669  01A298  0100               	movlb	0	; () banked
 34670  01A29A  6FA1               	movwf	___altoft@exp& (0+255),b
 34671                           
 34672                           ; BSR set to: 0
 34673  01A29C  0100               	movlb	0	; () banked
 34674  01A29E  AF9C               	btfss	(___altoft@c+3)& (0+255),7,b
 34675  01A2A0  D015               	goto	l19990
 34676                           
 34677                           ; BSR set to: 0
 34678  01A2A2  0100               	movlb	0	; () banked
 34679  01A2A4  1F9C               	comf	(___altoft@c+3)& (0+255),f,b
 34680  01A2A6  1F9B               	comf	(___altoft@c+2)& (0+255),f,b
 34681  01A2A8  1F9A               	comf	(___altoft@c+1)& (0+255),f,b
 34682  01A2AA  6D99               	negf	___altoft@c& (0+255),b
 34683  01A2AC  0E00               	movlw	0
 34684  01A2AE  239A               	addwfc	(___altoft@c+1)& (0+255),f,b
 34685  01A2B0  239B               	addwfc	(___altoft@c+2)& (0+255),f,b
 34686  01A2B2  239C               	addwfc	(___altoft@c+3)& (0+255),f,b
 34687                           
 34688                           ; BSR set to: 0
 34689  01A2B4  0E01               	movlw	1
 34690  01A2B6  0100               	movlb	0	; () banked
 34691  01A2B8  6FA2               	movwf	___altoft@sign& (0+255),b
 34692                           
 34693                           ; BSR set to: 0
 34694  01A2BA  D008               	goto	l19990
 34695  01A2BC                     l19988:
 34696                           
 34697                           ; BSR set to: 0
 34698  01A2BC  0100               	movlb	0	; () banked
 34699  01A2BE  90D8               	bcf	status,0,c
 34700  01A2C0  339C               	rrcf	(___altoft@c+3)& (0+255),f,b
 34701  01A2C2  339B               	rrcf	(___altoft@c+2)& (0+255),f,b
 34702  01A2C4  339A               	rrcf	(___altoft@c+1)& (0+255),f,b
 34703  01A2C6  3399               	rrcf	___altoft@c& (0+255),f,b
 34704  01A2C8  0100               	movlb	0	; () banked
 34705  01A2CA  2BA1               	incf	___altoft@exp& (0+255),f,b
 34706  01A2CC                     l19990:
 34707                           
 34708                           ; BSR set to: 0
 34709  01A2CC  0E00               	movlw	0
 34710  01A2CE  0100               	movlb	0	; () banked
 34711  01A2D0  1599               	andwf	___altoft@c& (0+255),w,b
 34712  01A2D2  0100               	movlb	0	; () banked
 34713  01A2D4  6F9D               	movwf	??___altoft& (0+255),b
 34714  01A2D6  0E00               	movlw	0
 34715  01A2D8  0100               	movlb	0	; () banked
 34716  01A2DA  159A               	andwf	(___altoft@c+1)& (0+255),w,b
 34717  01A2DC  0100               	movlb	0	; () banked
 34718  01A2DE  6F9E               	movwf	(??___altoft+1)& (0+255),b
 34719  01A2E0  0E00               	movlw	0
 34720  01A2E2  0100               	movlb	0	; () banked
 34721  01A2E4  159B               	andwf	(___altoft@c+2)& (0+255),w,b
 34722  01A2E6  0100               	movlb	0	; () banked
 34723  01A2E8  6F9F               	movwf	(??___altoft+2)& (0+255),b
 34724  01A2EA  0EFF               	movlw	255
 34725  01A2EC  0100               	movlb	0	; () banked
 34726  01A2EE  159C               	andwf	(___altoft@c+3)& (0+255),w,b
 34727  01A2F0  0100               	movlb	0	; () banked
 34728  01A2F2  6FA0               	movwf	(??___altoft+3)& (0+255),b
 34729  01A2F4  0100               	movlb	0	; () banked
 34730  01A2F6  519D               	movf	??___altoft& (0+255),w,b
 34731  01A2F8  0100               	movlb	0	; () banked
 34732  01A2FA  119E               	iorwf	(??___altoft+1)& (0+255),w,b
 34733  01A2FC  0100               	movlb	0	; () banked
 34734  01A2FE  119F               	iorwf	(??___altoft+2)& (0+255),w,b
 34735  01A300  0100               	movlb	0	; () banked
 34736  01A302  11A0               	iorwf	(??___altoft+3)& (0+255),w,b
 34737  01A304  A4D8               	btfss	status,2,c
 34738  01A306  D7DA               	goto	l19988
 34739                           
 34740                           ; BSR set to: 0
 34741                           
 34742                           ; BSR set to: 0
 34743  01A308  C099  F060         	movff	___altoft@c,___ftpack@arg
 34744  01A30C  C09A  F061         	movff	___altoft@c+1,___ftpack@arg+1
 34745  01A310  C09B  F062         	movff	___altoft@c+2,___ftpack@arg+2
 34746  01A314  C0A1  F063         	movff	___altoft@exp,___ftpack@exp
 34747  01A318  C0A2  F064         	movff	___altoft@sign,___ftpack@sign
 34748  01A31C  EC4E  F0C5         	call	___ftpack	;wreg free
 34749  01A320  C060  F099         	movff	?___ftpack,?___altoft
 34750  01A324  C061  F09A         	movff	?___ftpack+1,?___altoft+1
 34751  01A328  C062  F09B         	movff	?___ftpack+2,?___altoft+2
 34752  01A32C  0012               	return	
 34753  01A32E                     __end_of___altoft:
 34754                           	opt stack 0
 34755                           tblptru	equ	0xFF8
 34756                           tblptrh	equ	0xFF7
 34757                           tblptrl	equ	0xFF6
 34758                           tablat	equ	0xFF5
 34759                           prodh	equ	0xFF4
 34760                           prodl	equ	0xFF3
 34761                           intcon	equ	0xFF2
 34762                           postinc0	equ	0xFEE
 34763                           wreg	equ	0xFE8
 34764                           postdec1	equ	0xFE5
 34765                           fsr1h	equ	0xFE2
 34766                           fsr1l	equ	0xFE1
 34767                           indf2	equ	0xFDF
 34768                           postinc2	equ	0xFDE
 34769                           postdec2	equ	0xFDD
 34770                           fsr2h	equ	0xFDA
 34771                           fsr2l	equ	0xFD9
 34772                           status	equ	0xFD8
 34773                           
 34774 ;; *************** function _eval_poly *****************
 34775 ;; Defined at:
 34776 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
 34777 ;; Parameters:    Size  Location     Type
 34778 ;;  x               3   57[BANK0 ] float 
 34779 ;;  d               2   60[BANK0 ] PTR const 
 34780 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
 34781 ;;  n               2   62[BANK0 ] int 
 34782 ;; Auto vars:     Size  Location     Type
 34783 ;;  res             3   66[BANK0 ] int 
 34784 ;; Return value:  Size  Location     Type
 34785 ;;                  3   57[BANK0 ] int 
 34786 ;; Registers used:
 34787 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34788 ;; Tracked objects:
 34789 ;;		On entry : 0/0
 34790 ;;		On exit  : 0/0
 34791 ;;		Unchanged: 0/0
 34792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34793 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34794 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34795 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34796 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34797 ;;Total ram usage:       12 bytes
 34798 ;; Hardware stack levels used:    1
 34799 ;; Hardware stack levels required when called:    5
 34800 ;; This function calls:
 34801 ;;		___ftadd
 34802 ;;		___ftmul
 34803 ;;		___wmul
 34804 ;; This function is called by:
 34805 ;;		_sin
 34806 ;; This function uses a non-reentrant model
 34807 ;;
 34808                           
 34809                           	psect	text131
 34810  01908E                     __ptext131:
 34811                           	opt stack 0
 34812  01908E                     _eval_poly:
 34813                           	opt stack 22
 34814                           
 34815                           ;incstack = 0
 34816  01908E  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
 34817  019092  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
 34818  019096  0E00               	movlw	0
 34819  019098  0100               	movlb	0	; () banked
 34820  01909A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 34821  01909C  0E03               	movlw	3
 34822  01909E  6F70               	movwf	___wmul@multiplicand& (0+255),b
 34823  0190A0  ECB9  F0D6         	call	___wmul	;wreg free
 34824  0190A4  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
 34825  0190A8  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
 34826  0190AC  0100               	movlb	0	; () banked
 34827  0190AE  516E               	movf	?___wmul& (0+255),w,b
 34828  0190B0  0100               	movlb	0	; () banked
 34829  0190B2  27A0               	addwf	??_eval_poly& (0+255),f,b
 34830  0190B4  0100               	movlb	0	; () banked
 34831  0190B6  516F               	movf	(?___wmul+1)& (0+255),w,b
 34832  0190B8  0100               	movlb	0	; () banked
 34833  0190BA  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
 34834  0190BC  C0A0  FFF6         	movff	??_eval_poly,tblptrl
 34835  0190C0  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
 34836  0190C4                     	if	0	;tblptru may be non-zero
 34837  0190C4                     	endif
 34838  0190C4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 34839  0190C4  0E00               	movlw	low (__mediumconst shr (0+16))
 34840  0190C6  6EF8               	movwf	tblptru,c
 34841  0190C8                     	endif
 34842  0190C8  0009               	tblrd		*+
 34843  0190CA  CFF5 F0A2          	movff	tablat,eval_poly@res
 34844  0190CE  0009               	tblrd		*+
 34845  0190D0  CFF5 F0A3          	movff	tablat,eval_poly@res+1
 34846  0190D4  000A               	tblrd		*-
 34847  0190D6  CFF5 F0A4          	movff	tablat,eval_poly@res+2
 34848  0190DA  D046               	goto	l20672
 34849  0190DC                     l20670:
 34850                           
 34851                           ; BSR set to: 0
 34852  0190DC  C0A2  F077         	movff	eval_poly@res,___ftmul@f2
 34853  0190E0  C0A3  F078         	movff	eval_poly@res+1,___ftmul@f2+1
 34854  0190E4  C0A4  F079         	movff	eval_poly@res+2,___ftmul@f2+2
 34855  0190E8  C099  F074         	movff	eval_poly@x,___ftmul@f1
 34856  0190EC  C09A  F075         	movff	eval_poly@x+1,___ftmul@f1+1
 34857  0190F0  C09B  F076         	movff	eval_poly@x+2,___ftmul@f1+2
 34858  0190F4  EC00  F0C1         	call	___ftmul	;wreg free
 34859  0190F8  C074  F08D         	movff	?___ftmul,___ftadd@f1
 34860  0190FC  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 34861  019100  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 34862  019104  0E00               	movlw	0
 34863  019106  0100               	movlb	0	; () banked
 34864  019108  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 34865  01910A  0E03               	movlw	3
 34866  01910C  6F70               	movwf	___wmul@multiplicand& (0+255),b
 34867  01910E  0100               	movlb	0	; () banked
 34868  019110  079E               	decf	eval_poly@n& (0+255),f,b
 34869  019112  A0D8               	btfss	status,0,c
 34870  019114  079F               	decf	(eval_poly@n+1)& (0+255),f,b
 34871  019116  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
 34872  01911A  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
 34873  01911E  ECB9  F0D6         	call	___wmul	;wreg free
 34874  019122  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
 34875  019126  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
 34876  01912A  0100               	movlb	0	; () banked
 34877  01912C  516E               	movf	?___wmul& (0+255),w,b
 34878  01912E  0100               	movlb	0	; () banked
 34879  019130  27A0               	addwf	??_eval_poly& (0+255),f,b
 34880  019132  0100               	movlb	0	; () banked
 34881  019134  516F               	movf	(?___wmul+1)& (0+255),w,b
 34882  019136  0100               	movlb	0	; () banked
 34883  019138  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
 34884  01913A  C0A0  FFF6         	movff	??_eval_poly,tblptrl
 34885  01913E  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
 34886  019142                     	if	0	;tblptru may be non-zero
 34887  019142                     	endif
 34888  019142                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 34889  019142  0E00               	movlw	low (__mediumconst shr (0+16))
 34890  019144  6EF8               	movwf	tblptru,c
 34891  019146                     	endif
 34892  019146  0009               	tblrd		*+
 34893  019148  CFF5 F090          	movff	tablat,___ftadd@f2
 34894  01914C  0009               	tblrd		*+
 34895  01914E  CFF5 F091          	movff	tablat,___ftadd@f2+1
 34896  019152  000A               	tblrd		*-
 34897  019154  CFF5 F092          	movff	tablat,___ftadd@f2+2
 34898  019158  ECBE  F0B2         	call	___ftadd	;wreg free
 34899  01915C  C08D  F0A2         	movff	?___ftadd,eval_poly@res
 34900  019160  C08E  F0A3         	movff	?___ftadd+1,eval_poly@res+1
 34901  019164  C08F  F0A4         	movff	?___ftadd+2,eval_poly@res+2
 34902  019168                     l20672:
 34903  019168  0100               	movlb	0	; () banked
 34904  01916A  519E               	movf	eval_poly@n& (0+255),w,b
 34905  01916C  0100               	movlb	0	; () banked
 34906  01916E  119F               	iorwf	(eval_poly@n+1)& (0+255),w,b
 34907  019170  A4D8               	btfss	status,2,c
 34908  019172  D7B4               	goto	l20670
 34909                           
 34910                           ; BSR set to: 0
 34911  019174  C0A2  F099         	movff	eval_poly@res,?_eval_poly
 34912  019178  C0A3  F09A         	movff	eval_poly@res+1,?_eval_poly+1
 34913  01917C  C0A4  F09B         	movff	eval_poly@res+2,?_eval_poly+2
 34914                           
 34915                           ; BSR set to: 0
 34916  019180  0012               	return		;funcret
 34917  019182                     __end_of_eval_poly:
 34918                           	opt stack 0
 34919                           tblptru	equ	0xFF8
 34920                           tblptrh	equ	0xFF7
 34921                           tblptrl	equ	0xFF6
 34922                           tablat	equ	0xFF5
 34923                           prodh	equ	0xFF4
 34924                           prodl	equ	0xFF3
 34925                           intcon	equ	0xFF2
 34926                           postinc0	equ	0xFEE
 34927                           wreg	equ	0xFE8
 34928                           postdec1	equ	0xFE5
 34929                           fsr1h	equ	0xFE2
 34930                           fsr1l	equ	0xFE1
 34931                           indf2	equ	0xFDF
 34932                           postinc2	equ	0xFDE
 34933                           postdec2	equ	0xFDD
 34934                           fsr2h	equ	0xFDA
 34935                           fsr2l	equ	0xFD9
 34936                           status	equ	0xFD8
 34937                           
 34938 ;; *************** function ___wmul *****************
 34939 ;; Defined at:
 34940 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 34941 ;; Parameters:    Size  Location     Type
 34942 ;;  multiplier      2   14[BANK0 ] unsigned int 
 34943 ;;  multiplicand    2   16[BANK0 ] unsigned int 
 34944 ;; Auto vars:     Size  Location     Type
 34945 ;;  product         2   18[BANK0 ] unsigned int 
 34946 ;; Return value:  Size  Location     Type
 34947 ;;                  2   14[BANK0 ] unsigned int 
 34948 ;; Registers used:
 34949 ;;		wreg, status,2, status,0, prodl, prodh
 34950 ;; Tracked objects:
 34951 ;;		On entry : 0/0
 34952 ;;		On exit  : 0/0
 34953 ;;		Unchanged: 0/0
 34954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34955 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34958 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34959 ;;Total ram usage:        6 bytes
 34960 ;; Hardware stack levels used:    1
 34961 ;; Hardware stack levels required when called:    3
 34962 ;; This function calls:
 34963 ;;		Nothing
 34964 ;; This function is called by:
 34965 ;;		_BCDtoI
 34966 ;;		_fround
 34967 ;;		_scale
 34968 ;;		_printf
 34969 ;;		_eval_poly
 34970 ;; This function uses a non-reentrant model
 34971 ;;
 34972                           
 34973                           	psect	text132
 34974  01AD72                     __ptext132:
 34975                           	opt stack 0
 34976  01AD72                     ___wmul:
 34977                           	opt stack 23
 34978                           
 34979                           ; BSR set to: 0
 34980                           ;incstack = 0
 34981  01AD72  0100               	movlb	0	; () banked
 34982  01AD74  516E               	movf	___wmul@multiplier& (0+255),w,b
 34983  01AD76  0100               	movlb	0	; () banked
 34984  01AD78  0370               	mulwf	___wmul@multiplicand& (0+255),b
 34985  01AD7A  CFF3 F072          	movff	prodl,___wmul@product
 34986  01AD7E  CFF4 F073          	movff	prodh,___wmul@product+1
 34987  01AD82  0100               	movlb	0	; () banked
 34988  01AD84  516E               	movf	___wmul@multiplier& (0+255),w,b
 34989  01AD86  0100               	movlb	0	; () banked
 34990  01AD88  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 34991  01AD8A  50F3               	movf	prodl,w,c
 34992  01AD8C  0100               	movlb	0	; () banked
 34993  01AD8E  2773               	addwf	(___wmul@product+1)& (0+255),f,b
 34994  01AD90  0100               	movlb	0	; () banked
 34995  01AD92  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
 34996  01AD94  0100               	movlb	0	; () banked
 34997  01AD96  0370               	mulwf	___wmul@multiplicand& (0+255),b
 34998  01AD98  50F3               	movf	prodl,w,c
 34999  01AD9A  0100               	movlb	0	; () banked
 35000  01AD9C  2773               	addwf	(___wmul@product+1)& (0+255),f,b
 35001                           
 35002                           ; BSR set to: 0
 35003  01AD9E  C072  F06E         	movff	___wmul@product,?___wmul
 35004  01ADA2  C073  F06F         	movff	___wmul@product+1,?___wmul+1
 35005  01ADA6  0012               	return	
 35006  01ADA8                     __end_of___wmul:
 35007                           	opt stack 0
 35008                           tblptru	equ	0xFF8
 35009                           tblptrh	equ	0xFF7
 35010                           tblptrl	equ	0xFF6
 35011                           tablat	equ	0xFF5
 35012                           prodh	equ	0xFF4
 35013                           prodl	equ	0xFF3
 35014                           intcon	equ	0xFF2
 35015                           postinc0	equ	0xFEE
 35016                           wreg	equ	0xFE8
 35017                           postdec1	equ	0xFE5
 35018                           fsr1h	equ	0xFE2
 35019                           fsr1l	equ	0xFE1
 35020                           indf2	equ	0xFDF
 35021                           postinc2	equ	0xFDE
 35022                           postdec2	equ	0xFDD
 35023                           fsr2h	equ	0xFDA
 35024                           fsr2l	equ	0xFD9
 35025                           status	equ	0xFD8
 35026                           
 35027 ;; *************** function ___ftmul *****************
 35028 ;; Defined at:
 35029 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 35030 ;; Parameters:    Size  Location     Type
 35031 ;;  f1              3   20[BANK0 ] float 
 35032 ;;  f2              3   23[BANK0 ] float 
 35033 ;; Auto vars:     Size  Location     Type
 35034 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
 35035 ;;  sign            1   34[BANK0 ] unsigned char 
 35036 ;;  cntr            1   33[BANK0 ] unsigned char 
 35037 ;;  exp             1   29[BANK0 ] unsigned char 
 35038 ;; Return value:  Size  Location     Type
 35039 ;;                  3   20[BANK0 ] float 
 35040 ;; Registers used:
 35041 ;;		wreg, status,2, status,0, cstack
 35042 ;; Tracked objects:
 35043 ;;		On entry : 0/0
 35044 ;;		On exit  : 0/0
 35045 ;;		Unchanged: 0/0
 35046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35047 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35048 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35049 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35050 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35051 ;;Total ram usage:       15 bytes
 35052 ;; Hardware stack levels used:    1
 35053 ;; Hardware stack levels required when called:    4
 35054 ;; This function calls:
 35055 ;;		___ftpack
 35056 ;; This function is called by:
 35057 ;;		_Turbine_RPM_Cal
 35058 ;;		_Generator_RPM_Cal
 35059 ;;		_Wind_Speed_Cal
 35060 ;;		_Wind_Speed_2_Cal
 35061 ;;		_VFD_Freq_Step_up
 35062 ;;		_Temp_Read
 35063 ;;		_Volt_Curr_Avg
 35064 ;;		_Cons_Gene
 35065 ;;		_Freq_Calc
 35066 ;;		_R_PF_Calc
 35067 ;;		_R_PF_Avg
 35068 ;;		_Y_PF_Calc
 35069 ;;		_Y_PF_Avg
 35070 ;;		_B_PF_Calc
 35071 ;;		_B_PF_Avg
 35072 ;;		_Power_Calc
 35073 ;;		_Rotor_Slip_Cal
 35074 ;;		_Motor_Slip_Cal
 35075 ;;		_fround
 35076 ;;		_scale
 35077 ;;		_printf
 35078 ;;		_sin
 35079 ;;		_sqrt
 35080 ;;		_eval_poly
 35081 ;; This function uses a non-reentrant model
 35082 ;;
 35083                           
 35084                           	psect	text133
 35085  018200                     __ptext133:
 35086                           	opt stack 0
 35087  018200                     ___ftmul:
 35088                           	opt stack 25
 35089                           
 35090                           ; BSR set to: 0
 35091                           ;incstack = 0
 35092  018200  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
 35093  018204  0100               	movlb	0	; () banked
 35094  018206  6B7B               	clrf	(??___ftmul+1)& (0+255),b
 35095  018208  6B7C               	clrf	(??___ftmul+2)& (0+255),b
 35096  01820A  0100               	movlb	0	; () banked
 35097  01820C  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 35098  01820E  0100               	movlb	0	; () banked
 35099  018210  377A               	rlcf	??___ftmul& (0+255),f,b
 35100  018212  E301               	bnc	u12941
 35101  018214  817B               	bsf	(??___ftmul+1)& (0+255),0,b
 35102  018216                     u12941:
 35103  018216  0100               	movlb	0	; () banked
 35104  018218  517A               	movf	??___ftmul& (0+255),w,b
 35105  01821A  0100               	movlb	0	; () banked
 35106  01821C  6F7D               	movwf	___ftmul@exp& (0+255),b
 35107  01821E  0100               	movlb	0	; () banked
 35108  018220  517D               	movf	___ftmul@exp& (0+255),w,b
 35109  018222  A4D8               	btfss	status,2,c
 35110  018224  D00A               	goto	l19614
 35111                           
 35112                           ; BSR set to: 0
 35113  018226  0E00               	movlw	0
 35114  018228  0100               	movlb	0	; () banked
 35115  01822A  6F74               	movwf	?___ftmul& (0+255),b
 35116  01822C  0E00               	movlw	0
 35117  01822E  0100               	movlb	0	; () banked
 35118  018230  6F75               	movwf	(?___ftmul+1)& (0+255),b
 35119  018232  0E00               	movlw	0
 35120  018234  0100               	movlb	0	; () banked
 35121  018236  6F76               	movwf	(?___ftmul+2)& (0+255),b
 35122                           
 35123                           ; BSR set to: 0
 35124  018238  0012               	return	
 35125  01823A                     l19614:
 35126                           
 35127                           ; BSR set to: 0
 35128  01823A  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
 35129  01823E  0100               	movlb	0	; () banked
 35130  018240  6B7B               	clrf	(??___ftmul+1)& (0+255),b
 35131  018242  6B7C               	clrf	(??___ftmul+2)& (0+255),b
 35132  018244  0100               	movlb	0	; () banked
 35133  018246  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 35134  018248  0100               	movlb	0	; () banked
 35135  01824A  377A               	rlcf	??___ftmul& (0+255),f,b
 35136  01824C  E301               	bnc	u12961
 35137  01824E  817B               	bsf	(??___ftmul+1)& (0+255),0,b
 35138  018250                     u12961:
 35139  018250  0100               	movlb	0	; () banked
 35140  018252  517A               	movf	??___ftmul& (0+255),w,b
 35141  018254  0100               	movlb	0	; () banked
 35142  018256  6F82               	movwf	___ftmul@sign& (0+255),b
 35143  018258  0100               	movlb	0	; () banked
 35144  01825A  5182               	movf	___ftmul@sign& (0+255),w,b
 35145  01825C  A4D8               	btfss	status,2,c
 35146  01825E  D00A               	goto	l19620
 35147                           
 35148                           ; BSR set to: 0
 35149  018260  0E00               	movlw	0
 35150  018262  0100               	movlb	0	; () banked
 35151  018264  6F74               	movwf	?___ftmul& (0+255),b
 35152  018266  0E00               	movlw	0
 35153  018268  0100               	movlb	0	; () banked
 35154  01826A  6F75               	movwf	(?___ftmul+1)& (0+255),b
 35155  01826C  0E00               	movlw	0
 35156  01826E  0100               	movlb	0	; () banked
 35157  018270  6F76               	movwf	(?___ftmul+2)& (0+255),b
 35158                           
 35159                           ; BSR set to: 0
 35160  018272  0012               	return	
 35161  018274                     l19620:
 35162                           
 35163                           ; BSR set to: 0
 35164  018274  0100               	movlb	0	; () banked
 35165  018276  5182               	movf	___ftmul@sign& (0+255),w,b
 35166  018278  0F7B               	addlw	123
 35167  01827A  0100               	movlb	0	; () banked
 35168  01827C  277D               	addwf	___ftmul@exp& (0+255),f,b
 35169                           
 35170                           ; BSR set to: 0
 35171  01827E  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
 35172  018282  0100               	movlb	0	; () banked
 35173  018284  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 35174  018286  0100               	movlb	0	; () banked
 35175  018288  1B82               	xorwf	___ftmul@sign& (0+255),f,b
 35176  01828A  0E80               	movlw	128
 35177  01828C  0100               	movlb	0	; () banked
 35178  01828E  1782               	andwf	___ftmul@sign& (0+255),f,b
 35179                           
 35180                           ; BSR set to: 0
 35181  018290  0100               	movlb	0	; () banked
 35182  018292  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
 35183                           
 35184                           ; BSR set to: 0
 35185  018294  0100               	movlb	0	; () banked
 35186  018296  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
 35187                           
 35188                           ; BSR set to: 0
 35189  018298  0EFF               	movlw	255
 35190  01829A  0100               	movlb	0	; () banked
 35191  01829C  1777               	andwf	___ftmul@f2& (0+255),f,b
 35192  01829E  0EFF               	movlw	255
 35193  0182A0  0100               	movlb	0	; () banked
 35194  0182A2  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
 35195  0182A4  0E00               	movlw	0
 35196  0182A6  0100               	movlb	0	; () banked
 35197  0182A8  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
 35198                           
 35199                           ; BSR set to: 0
 35200  0182AA  0E00               	movlw	0
 35201  0182AC  0100               	movlb	0	; () banked
 35202  0182AE  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
 35203  0182B0  0E00               	movlw	0
 35204  0182B2  0100               	movlb	0	; () banked
 35205  0182B4  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 35206  0182B6  0E00               	movlw	0
 35207  0182B8  0100               	movlb	0	; () banked
 35208  0182BA  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 35209                           
 35210                           ; BSR set to: 0
 35211  0182BC  0E07               	movlw	7
 35212  0182BE  0100               	movlb	0	; () banked
 35213  0182C0  6F81               	movwf	___ftmul@cntr& (0+255),b
 35214  0182C2                     l19634:
 35215                           
 35216                           ; BSR set to: 0
 35217  0182C2  0100               	movlb	0	; () banked
 35218  0182C4  A174               	btfss	___ftmul@f1& (0+255),0,b
 35219  0182C6  D00C               	goto	l19638
 35220                           
 35221                           ; BSR set to: 0
 35222  0182C8  0100               	movlb	0	; () banked
 35223  0182CA  5177               	movf	___ftmul@f2& (0+255),w,b
 35224  0182CC  0100               	movlb	0	; () banked
 35225  0182CE  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 35226  0182D0  0100               	movlb	0	; () banked
 35227  0182D2  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
 35228  0182D4  0100               	movlb	0	; () banked
 35229  0182D6  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 35230  0182D8  0100               	movlb	0	; () banked
 35231  0182DA  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 35232  0182DC  0100               	movlb	0	; () banked
 35233  0182DE  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 35234  0182E0                     l19638:
 35235                           
 35236                           ; BSR set to: 0
 35237  0182E0  0100               	movlb	0	; () banked
 35238  0182E2  90D8               	bcf	status,0,c
 35239  0182E4  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 35240  0182E6  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 35241  0182E8  3374               	rrcf	___ftmul@f1& (0+255),f,b
 35242  0182EA  0100               	movlb	0	; () banked
 35243  0182EC  90D8               	bcf	status,0,c
 35244  0182EE  3777               	rlcf	___ftmul@f2& (0+255),f,b
 35245  0182F0  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 35246  0182F2  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 35247                           
 35248                           ; BSR set to: 0
 35249  0182F4  0100               	movlb	0	; () banked
 35250  0182F6  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
 35251  0182F8  D7E4               	goto	l19634
 35252                           
 35253                           ; BSR set to: 0
 35254                           
 35255                           ; BSR set to: 0
 35256  0182FA  0E09               	movlw	9
 35257  0182FC  0100               	movlb	0	; () banked
 35258  0182FE  6F81               	movwf	___ftmul@cntr& (0+255),b
 35259  018300                     l19644:
 35260                           
 35261                           ; BSR set to: 0
 35262  018300  0100               	movlb	0	; () banked
 35263  018302  A174               	btfss	___ftmul@f1& (0+255),0,b
 35264  018304  D00C               	goto	l19648
 35265                           
 35266                           ; BSR set to: 0
 35267  018306  0100               	movlb	0	; () banked
 35268  018308  5177               	movf	___ftmul@f2& (0+255),w,b
 35269  01830A  0100               	movlb	0	; () banked
 35270  01830C  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 35271  01830E  0100               	movlb	0	; () banked
 35272  018310  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
 35273  018312  0100               	movlb	0	; () banked
 35274  018314  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 35275  018316  0100               	movlb	0	; () banked
 35276  018318  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 35277  01831A  0100               	movlb	0	; () banked
 35278  01831C  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 35279  01831E                     l19648:
 35280                           
 35281                           ; BSR set to: 0
 35282  01831E  0100               	movlb	0	; () banked
 35283  018320  90D8               	bcf	status,0,c
 35284  018322  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 35285  018324  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 35286  018326  3374               	rrcf	___ftmul@f1& (0+255),f,b
 35287  018328  0100               	movlb	0	; () banked
 35288  01832A  90D8               	bcf	status,0,c
 35289  01832C  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 35290  01832E  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 35291  018330  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 35292                           
 35293                           ; BSR set to: 0
 35294  018332  0100               	movlb	0	; () banked
 35295  018334  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
 35296  018336  D7E4               	goto	l19644
 35297                           
 35298                           ; BSR set to: 0
 35299                           
 35300                           ; BSR set to: 0
 35301  018338  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
 35302  01833C  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 35303  018340  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 35304  018344  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
 35305  018348  C082  F064         	movff	___ftmul@sign,___ftpack@sign
 35306  01834C  EC4E  F0C5         	call	___ftpack	;wreg free
 35307  018350  C060  F074         	movff	?___ftpack,?___ftmul
 35308  018354  C061  F075         	movff	?___ftpack+1,?___ftmul+1
 35309  018358  C062  F076         	movff	?___ftpack+2,?___ftmul+2
 35310  01835C  0012               	return	
 35311  01835E                     __end_of___ftmul:
 35312                           	opt stack 0
 35313                           tblptru	equ	0xFF8
 35314                           tblptrh	equ	0xFF7
 35315                           tblptrl	equ	0xFF6
 35316                           tablat	equ	0xFF5
 35317                           prodh	equ	0xFF4
 35318                           prodl	equ	0xFF3
 35319                           intcon	equ	0xFF2
 35320                           postinc0	equ	0xFEE
 35321                           wreg	equ	0xFE8
 35322                           postdec1	equ	0xFE5
 35323                           fsr1h	equ	0xFE2
 35324                           fsr1l	equ	0xFE1
 35325                           indf2	equ	0xFDF
 35326                           postinc2	equ	0xFDE
 35327                           postdec2	equ	0xFDD
 35328                           fsr2h	equ	0xFDA
 35329                           fsr2l	equ	0xFD9
 35330                           status	equ	0xFD8
 35331                           
 35332 ;; *************** function ___ftsub *****************
 35333 ;; Defined at:
 35334 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
 35335 ;; Parameters:    Size  Location     Type
 35336 ;;  f1              3   75[BANK0 ] float 
 35337 ;;  f2              3   78[BANK0 ] float 
 35338 ;; Auto vars:     Size  Location     Type
 35339 ;;		None
 35340 ;; Return value:  Size  Location     Type
 35341 ;;                  3   75[BANK0 ] float 
 35342 ;; Registers used:
 35343 ;;		wreg, status,2, status,0, cstack
 35344 ;; Tracked objects:
 35345 ;;		On entry : 0/0
 35346 ;;		On exit  : 0/0
 35347 ;;		Unchanged: 0/0
 35348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35349 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35352 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35353 ;;Total ram usage:        6 bytes
 35354 ;; Hardware stack levels used:    1
 35355 ;; Hardware stack levels required when called:    5
 35356 ;; This function calls:
 35357 ;;		___ftadd
 35358 ;; This function is called by:
 35359 ;;		_printf
 35360 ;;		_sin
 35361 ;;		_sqrt
 35362 ;; This function uses a non-reentrant model
 35363 ;;
 35364                           
 35365                           	psect	text134
 35366  01AB82                     __ptext134:
 35367                           	opt stack 0
 35368  01AB82                     ___ftsub:
 35369                           	opt stack 22
 35370                           
 35371                           ;incstack = 0
 35372  01AB82  0100               	movlb	0	; () banked
 35373  01AB84  51AE               	movf	___ftsub@f2& (0+255),w,b
 35374  01AB86  0100               	movlb	0	; () banked
 35375  01AB88  11AF               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 35376  01AB8A  0100               	movlb	0	; () banked
 35377  01AB8C  11B0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 35378  01AB8E  B4D8               	btfsc	status,2,c
 35379  01AB90  D009               	goto	l20000
 35380                           
 35381                           ; BSR set to: 0
 35382  01AB92  0E00               	movlw	0
 35383  01AB94  0100               	movlb	0	; () banked
 35384  01AB96  1BAE               	xorwf	___ftsub@f2& (0+255),f,b
 35385  01AB98  0E00               	movlw	0
 35386  01AB9A  0100               	movlb	0	; () banked
 35387  01AB9C  1BAF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 35388  01AB9E  0E80               	movlw	128
 35389  01ABA0  0100               	movlb	0	; () banked
 35390  01ABA2  1BB0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 35391  01ABA4                     l20000:
 35392                           
 35393                           ; BSR set to: 0
 35394  01ABA4  C0AB  F08D         	movff	___ftsub@f1,___ftadd@f1
 35395  01ABA8  C0AC  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
 35396  01ABAC  C0AD  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
 35397  01ABB0  C0AE  F090         	movff	___ftsub@f2,___ftadd@f2
 35398  01ABB4  C0AF  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
 35399  01ABB8  C0B0  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
 35400  01ABBC  ECBE  F0B2         	call	___ftadd	;wreg free
 35401  01ABC0  C08D  F0AB         	movff	?___ftadd,?___ftsub
 35402  01ABC4  C08E  F0AC         	movff	?___ftadd+1,?___ftsub+1
 35403  01ABC8  C08F  F0AD         	movff	?___ftadd+2,?___ftsub+2
 35404  01ABCC  0012               	return	
 35405  01ABCE                     __end_of___ftsub:
 35406                           	opt stack 0
 35407                           tblptru	equ	0xFF8
 35408                           tblptrh	equ	0xFF7
 35409                           tblptrl	equ	0xFF6
 35410                           tablat	equ	0xFF5
 35411                           prodh	equ	0xFF4
 35412                           prodl	equ	0xFF3
 35413                           intcon	equ	0xFF2
 35414                           postinc0	equ	0xFEE
 35415                           wreg	equ	0xFE8
 35416                           postdec1	equ	0xFE5
 35417                           fsr1h	equ	0xFE2
 35418                           fsr1l	equ	0xFE1
 35419                           indf2	equ	0xFDF
 35420                           postinc2	equ	0xFDE
 35421                           postdec2	equ	0xFDD
 35422                           fsr2h	equ	0xFDA
 35423                           fsr2l	equ	0xFD9
 35424                           status	equ	0xFD8
 35425                           
 35426 ;; *************** function ___ftadd *****************
 35427 ;; Defined at:
 35428 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 35429 ;; Parameters:    Size  Location     Type
 35430 ;;  f1              3   45[BANK0 ] float 
 35431 ;;  f2              3   48[BANK0 ] float 
 35432 ;; Auto vars:     Size  Location     Type
 35433 ;;  exp1            1   56[BANK0 ] unsigned char 
 35434 ;;  exp2            1   55[BANK0 ] unsigned char 
 35435 ;;  sign            1   54[BANK0 ] unsigned char 
 35436 ;; Return value:  Size  Location     Type
 35437 ;;                  3   45[BANK0 ] float 
 35438 ;; Registers used:
 35439 ;;		wreg, status,2, status,0, cstack
 35440 ;; Tracked objects:
 35441 ;;		On entry : 0/0
 35442 ;;		On exit  : 0/0
 35443 ;;		Unchanged: 0/0
 35444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35445 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35446 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35447 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35448 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35449 ;;Total ram usage:       12 bytes
 35450 ;; Hardware stack levels used:    1
 35451 ;; Hardware stack levels required when called:    4
 35452 ;; This function calls:
 35453 ;;		___ftpack
 35454 ;; This function is called by:
 35455 ;;		_Turbine_RPM_Cal
 35456 ;;		_Generator_RPM_Cal
 35457 ;;		_Wind_Speed_Cal
 35458 ;;		_Wind_Speed_2_Cal
 35459 ;;		_Wind_Average
 35460 ;;		_Temp_Read
 35461 ;;		_Volt_Curr_Avg
 35462 ;;		_Freq_Calc
 35463 ;;		_R_PF_Calc
 35464 ;;		_R_PF_Avg
 35465 ;;		_Y_PF_Calc
 35466 ;;		_Y_PF_Avg
 35467 ;;		_B_PF_Calc
 35468 ;;		_B_PF_Avg
 35469 ;;		_Power_Factor
 35470 ;;		_Power_Calc
 35471 ;;		_Rotor_Slip_Cal
 35472 ;;		_Motor_Slip_Cal
 35473 ;;		_printf
 35474 ;;		_cos
 35475 ;;		___ftsub
 35476 ;;		_sin
 35477 ;;		_eval_poly
 35478 ;;		_floor
 35479 ;;		_Turbine2Wheel_Ratio
 35480 ;;		_Turbine_RPM_Checking_Rampup
 35481 ;; This function uses a non-reentrant model
 35482 ;;
 35483                           
 35484                           	psect	text135
 35485  01657C                     __ptext135:
 35486                           	opt stack 0
 35487  01657C                     ___ftadd:
 35488                           	opt stack 25
 35489                           
 35490                           ;incstack = 0
 35491  01657C  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
 35492  016580  0100               	movlb	0	; () banked
 35493  016582  6B94               	clrf	(??___ftadd+1)& (0+255),b
 35494  016584  6B95               	clrf	(??___ftadd+2)& (0+255),b
 35495  016586  0100               	movlb	0	; () banked
 35496  016588  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 35497  01658A  0100               	movlb	0	; () banked
 35498  01658C  3793               	rlcf	??___ftadd& (0+255),f,b
 35499  01658E  E301               	bnc	u12731
 35500  016590  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 35501  016592                     u12731:
 35502  016592  0100               	movlb	0	; () banked
 35503  016594  5193               	movf	??___ftadd& (0+255),w,b
 35504  016596  0100               	movlb	0	; () banked
 35505  016598  6F98               	movwf	___ftadd@exp1& (0+255),b
 35506  01659A  C092  F093         	movff	___ftadd@f2+2,??___ftadd
 35507  01659E  0100               	movlb	0	; () banked
 35508  0165A0  6B94               	clrf	(??___ftadd+1)& (0+255),b
 35509  0165A2  6B95               	clrf	(??___ftadd+2)& (0+255),b
 35510  0165A4  0100               	movlb	0	; () banked
 35511  0165A6  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 35512  0165A8  0100               	movlb	0	; () banked
 35513  0165AA  3793               	rlcf	??___ftadd& (0+255),f,b
 35514  0165AC  E301               	bnc	u12741
 35515  0165AE  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 35516  0165B0                     u12741:
 35517  0165B0  0100               	movlb	0	; () banked
 35518  0165B2  5193               	movf	??___ftadd& (0+255),w,b
 35519  0165B4  0100               	movlb	0	; () banked
 35520  0165B6  6F97               	movwf	___ftadd@exp2& (0+255),b
 35521                           
 35522                           ; BSR set to: 0
 35523  0165B8  0100               	movlb	0	; () banked
 35524  0165BA  5198               	movf	___ftadd@exp1& (0+255),w,b
 35525  0165BC  0100               	movlb	0	; () banked
 35526  0165BE  B4D8               	btfsc	status,2,c
 35527  0165C0  D011               	goto	l10655
 35528                           
 35529                           ; BSR set to: 0
 35530  0165C2  0100               	movlb	0	; () banked
 35531  0165C4  5197               	movf	___ftadd@exp2& (0+255),w,b
 35532  0165C6  0100               	movlb	0	; () banked
 35533  0165C8  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 35534  0165CA  B0D8               	btfsc	status,0,c
 35535  0165CC  D012               	goto	l19546
 35536                           
 35537                           ; BSR set to: 0
 35538  0165CE  0100               	movlb	0	; () banked
 35539  0165D0  5198               	movf	___ftadd@exp1& (0+255),w,b
 35540  0165D2  0800               	sublw	0
 35541  0165D4  0100               	movlb	0	; () banked
 35542  0165D6  2597               	addwf	___ftadd@exp2& (0+255),w,b
 35543  0165D8  0100               	movlb	0	; () banked
 35544  0165DA  6F93               	movwf	??___ftadd& (0+255),b
 35545  0165DC  0E18               	movlw	24
 35546  0165DE  0100               	movlb	0	; () banked
 35547  0165E0  6593               	cpfsgt	??___ftadd& (0+255),b
 35548  0165E2  D007               	goto	l19546
 35549  0165E4                     l10655:
 35550                           
 35551                           ; BSR set to: 0
 35552  0165E4  C090  F08D         	movff	___ftadd@f2,?___ftadd
 35553  0165E8  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
 35554  0165EC  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
 35555  0165F0  0012               	return	
 35556  0165F2                     l19546:
 35557                           
 35558                           ; BSR set to: 0
 35559  0165F2  0100               	movlb	0	; () banked
 35560  0165F4  5197               	movf	___ftadd@exp2& (0+255),w,b
 35561  0165F6  0100               	movlb	0	; () banked
 35562  0165F8  B4D8               	btfsc	status,2,c
 35563  0165FA  D011               	goto	l10659
 35564                           
 35565                           ; BSR set to: 0
 35566  0165FC  0100               	movlb	0	; () banked
 35567  0165FE  5198               	movf	___ftadd@exp1& (0+255),w,b
 35568  016600  0100               	movlb	0	; () banked
 35569  016602  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 35570  016604  B0D8               	btfsc	status,0,c
 35571  016606  D012               	goto	l19552
 35572                           
 35573                           ; BSR set to: 0
 35574  016608  0100               	movlb	0	; () banked
 35575  01660A  5197               	movf	___ftadd@exp2& (0+255),w,b
 35576  01660C  0800               	sublw	0
 35577  01660E  0100               	movlb	0	; () banked
 35578  016610  2598               	addwf	___ftadd@exp1& (0+255),w,b
 35579  016612  0100               	movlb	0	; () banked
 35580  016614  6F93               	movwf	??___ftadd& (0+255),b
 35581  016616  0E18               	movlw	24
 35582  016618  0100               	movlb	0	; () banked
 35583  01661A  6593               	cpfsgt	??___ftadd& (0+255),b
 35584  01661C  D007               	goto	l19552
 35585  01661E                     l10659:
 35586                           
 35587                           ; BSR set to: 0
 35588  01661E  C08D  F08D         	movff	___ftadd@f1,?___ftadd
 35589  016622  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
 35590  016626  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
 35591  01662A  0012               	return	
 35592  01662C                     l19552:
 35593                           
 35594                           ; BSR set to: 0
 35595  01662C  0E06               	movlw	6
 35596  01662E  0100               	movlb	0	; () banked
 35597  016630  6F96               	movwf	___ftadd@sign& (0+255),b
 35598                           
 35599                           ; BSR set to: 0
 35600  016632  0100               	movlb	0	; () banked
 35601  016634  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 35602  016636  D002               	goto	l19558
 35603                           
 35604                           ; BSR set to: 0
 35605  016638  0100               	movlb	0	; () banked
 35606  01663A  8F96               	bsf	___ftadd@sign& (0+255),7,b
 35607  01663C                     l19558:
 35608                           
 35609                           ; BSR set to: 0
 35610  01663C  0100               	movlb	0	; () banked
 35611  01663E  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 35612  016640  D002               	goto	l10661
 35613                           
 35614                           ; BSR set to: 0
 35615  016642  0100               	movlb	0	; () banked
 35616  016644  8D96               	bsf	___ftadd@sign& (0+255),6,b
 35617  016646                     l10661:
 35618                           
 35619                           ; BSR set to: 0
 35620  016646  0100               	movlb	0	; () banked
 35621  016648  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 35622                           
 35623                           ; BSR set to: 0
 35624  01664A  0EFF               	movlw	255
 35625  01664C  0100               	movlb	0	; () banked
 35626  01664E  178D               	andwf	___ftadd@f1& (0+255),f,b
 35627  016650  0EFF               	movlw	255
 35628  016652  0100               	movlb	0	; () banked
 35629  016654  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 35630  016656  0E00               	movlw	0
 35631  016658  0100               	movlb	0	; () banked
 35632  01665A  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 35633  01665C  0100               	movlb	0	; () banked
 35634  01665E  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
 35635                           
 35636                           ; BSR set to: 0
 35637  016660  0EFF               	movlw	255
 35638  016662  0100               	movlb	0	; () banked
 35639  016664  1790               	andwf	___ftadd@f2& (0+255),f,b
 35640  016666  0EFF               	movlw	255
 35641  016668  0100               	movlb	0	; () banked
 35642  01666A  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
 35643  01666C  0E00               	movlw	0
 35644  01666E  0100               	movlb	0	; () banked
 35645  016670  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
 35646                           
 35647                           ; BSR set to: 0
 35648  016672  0100               	movlb	0	; () banked
 35649  016674  5197               	movf	___ftadd@exp2& (0+255),w,b
 35650  016676  0100               	movlb	0	; () banked
 35651  016678  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 35652  01667A  B0D8               	btfsc	status,0,c
 35653  01667C  D025               	goto	l19578
 35654  01667E                     l19568:
 35655                           
 35656                           ; BSR set to: 0
 35657  01667E  0100               	movlb	0	; () banked
 35658  016680  90D8               	bcf	status,0,c
 35659  016682  3790               	rlcf	___ftadd@f2& (0+255),f,b
 35660  016684  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 35661  016686  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 35662  016688  0100               	movlb	0	; () banked
 35663  01668A  0797               	decf	___ftadd@exp2& (0+255),f,b
 35664                           
 35665                           ; BSR set to: 0
 35666  01668C  0100               	movlb	0	; () banked
 35667  01668E  5198               	movf	___ftadd@exp1& (0+255),w,b
 35668  016690  0100               	movlb	0	; () banked
 35669  016692  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 35670  016694  B4D8               	btfsc	status,2,c
 35671  016696  D011               	goto	l19576
 35672                           
 35673                           ; BSR set to: 0
 35674  016698  0100               	movlb	0	; () banked
 35675  01669A  0796               	decf	___ftadd@sign& (0+255),f,b
 35676  01669C  C096  F093         	movff	___ftadd@sign,??___ftadd
 35677  0166A0  0E07               	movlw	7
 35678  0166A2  0100               	movlb	0	; () banked
 35679  0166A4  1793               	andwf	??___ftadd& (0+255),f,b
 35680  0166A6  B4D8               	btfsc	status,2,c
 35681  0166A8  D008               	goto	l19576
 35682  0166AA  D7E9               	goto	l19568
 35683  0166AC                     l19574:
 35684                           
 35685                           ; BSR set to: 0
 35686  0166AC  0100               	movlb	0	; () banked
 35687  0166AE  90D8               	bcf	status,0,c
 35688  0166B0  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 35689  0166B2  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 35690  0166B4  338D               	rrcf	___ftadd@f1& (0+255),f,b
 35691  0166B6  0100               	movlb	0	; () banked
 35692  0166B8  2B98               	incf	___ftadd@exp1& (0+255),f,b
 35693  0166BA                     l19576:
 35694                           
 35695                           ; BSR set to: 0
 35696  0166BA  0100               	movlb	0	; () banked
 35697  0166BC  5197               	movf	___ftadd@exp2& (0+255),w,b
 35698  0166BE  0100               	movlb	0	; () banked
 35699  0166C0  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 35700  0166C2  B4D8               	btfsc	status,2,c
 35701  0166C4  D02B               	goto	l10670
 35702  0166C6  D7F2               	goto	l19574
 35703  0166C8                     l19578:
 35704                           
 35705                           ; BSR set to: 0
 35706  0166C8  0100               	movlb	0	; () banked
 35707  0166CA  5198               	movf	___ftadd@exp1& (0+255),w,b
 35708  0166CC  0100               	movlb	0	; () banked
 35709  0166CE  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 35710  0166D0  B0D8               	btfsc	status,0,c
 35711  0166D2  D024               	goto	l10670
 35712  0166D4                     l19580:
 35713                           
 35714                           ; BSR set to: 0
 35715  0166D4  0100               	movlb	0	; () banked
 35716  0166D6  90D8               	bcf	status,0,c
 35717  0166D8  378D               	rlcf	___ftadd@f1& (0+255),f,b
 35718  0166DA  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 35719  0166DC  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 35720  0166DE  0100               	movlb	0	; () banked
 35721  0166E0  0798               	decf	___ftadd@exp1& (0+255),f,b
 35722                           
 35723                           ; BSR set to: 0
 35724  0166E2  0100               	movlb	0	; () banked
 35725  0166E4  5198               	movf	___ftadd@exp1& (0+255),w,b
 35726  0166E6  0100               	movlb	0	; () banked
 35727  0166E8  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 35728  0166EA  B4D8               	btfsc	status,2,c
 35729  0166EC  D011               	goto	l19588
 35730                           
 35731                           ; BSR set to: 0
 35732  0166EE  0100               	movlb	0	; () banked
 35733  0166F0  0796               	decf	___ftadd@sign& (0+255),f,b
 35734  0166F2  C096  F093         	movff	___ftadd@sign,??___ftadd
 35735  0166F6  0E07               	movlw	7
 35736  0166F8  0100               	movlb	0	; () banked
 35737  0166FA  1793               	andwf	??___ftadd& (0+255),f,b
 35738  0166FC  B4D8               	btfsc	status,2,c
 35739  0166FE  D008               	goto	l19588
 35740  016700  D7E9               	goto	l19580
 35741  016702                     l19586:
 35742                           
 35743                           ; BSR set to: 0
 35744  016702  0100               	movlb	0	; () banked
 35745  016704  90D8               	bcf	status,0,c
 35746  016706  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 35747  016708  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 35748  01670A  3390               	rrcf	___ftadd@f2& (0+255),f,b
 35749  01670C  0100               	movlb	0	; () banked
 35750  01670E  2B97               	incf	___ftadd@exp2& (0+255),f,b
 35751  016710                     l19588:
 35752                           
 35753                           ; BSR set to: 0
 35754  016710  0100               	movlb	0	; () banked
 35755  016712  5197               	movf	___ftadd@exp2& (0+255),w,b
 35756  016714  0100               	movlb	0	; () banked
 35757  016716  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 35758  016718  A4D8               	btfss	status,2,c
 35759  01671A  D7F3               	goto	l19586
 35760  01671C                     l10670:
 35761                           
 35762                           ; BSR set to: 0
 35763  01671C  0100               	movlb	0	; () banked
 35764  01671E  AF96               	btfss	___ftadd@sign& (0+255),7,b
 35765  016720  D012               	goto	l10679
 35766                           
 35767                           ; BSR set to: 0
 35768  016722  0EFF               	movlw	255
 35769  016724  0100               	movlb	0	; () banked
 35770  016726  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
 35771  016728  0EFF               	movlw	255
 35772  01672A  0100               	movlb	0	; () banked
 35773  01672C  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 35774  01672E  0EFF               	movlw	255
 35775  016730  0100               	movlb	0	; () banked
 35776  016732  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 35777  016734  0E01               	movlw	1
 35778  016736  0100               	movlb	0	; () banked
 35779  016738  278D               	addwf	___ftadd@f1& (0+255),f,b
 35780  01673A  0E00               	movlw	0
 35781  01673C  0100               	movlb	0	; () banked
 35782  01673E  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 35783  016740  0E00               	movlw	0
 35784  016742  0100               	movlb	0	; () banked
 35785  016744  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 35786  016746                     l10679:
 35787                           
 35788                           ; BSR set to: 0
 35789  016746  0100               	movlb	0	; () banked
 35790  016748  AD96               	btfss	___ftadd@sign& (0+255),6,b
 35791  01674A  D012               	goto	l19594
 35792                           
 35793                           ; BSR set to: 0
 35794  01674C  0EFF               	movlw	255
 35795  01674E  0100               	movlb	0	; () banked
 35796  016750  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 35797  016752  0EFF               	movlw	255
 35798  016754  0100               	movlb	0	; () banked
 35799  016756  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 35800  016758  0EFF               	movlw	255
 35801  01675A  0100               	movlb	0	; () banked
 35802  01675C  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 35803  01675E  0E01               	movlw	1
 35804  016760  0100               	movlb	0	; () banked
 35805  016762  2790               	addwf	___ftadd@f2& (0+255),f,b
 35806  016764  0E00               	movlw	0
 35807  016766  0100               	movlb	0	; () banked
 35808  016768  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 35809  01676A  0E00               	movlw	0
 35810  01676C  0100               	movlb	0	; () banked
 35811  01676E  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 35812  016770                     l19594:
 35813                           
 35814                           ; BSR set to: 0
 35815  016770  0E00               	movlw	0
 35816  016772  0100               	movlb	0	; () banked
 35817  016774  6F96               	movwf	___ftadd@sign& (0+255),b
 35818                           
 35819                           ; BSR set to: 0
 35820  016776  0100               	movlb	0	; () banked
 35821  016778  518D               	movf	___ftadd@f1& (0+255),w,b
 35822  01677A  0100               	movlb	0	; () banked
 35823  01677C  2790               	addwf	___ftadd@f2& (0+255),f,b
 35824  01677E  0100               	movlb	0	; () banked
 35825  016780  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
 35826  016782  0100               	movlb	0	; () banked
 35827  016784  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 35828  016786  0100               	movlb	0	; () banked
 35829  016788  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
 35830  01678A  0100               	movlb	0	; () banked
 35831  01678C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 35832                           
 35833                           ; BSR set to: 0
 35834  01678E  0100               	movlb	0	; () banked
 35835  016790  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 35836  016792  D015               	goto	l19604
 35837                           
 35838                           ; BSR set to: 0
 35839  016794  0EFF               	movlw	255
 35840  016796  0100               	movlb	0	; () banked
 35841  016798  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 35842  01679A  0EFF               	movlw	255
 35843  01679C  0100               	movlb	0	; () banked
 35844  01679E  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 35845  0167A0  0EFF               	movlw	255
 35846  0167A2  0100               	movlb	0	; () banked
 35847  0167A4  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 35848  0167A6  0E01               	movlw	1
 35849  0167A8  0100               	movlb	0	; () banked
 35850  0167AA  2790               	addwf	___ftadd@f2& (0+255),f,b
 35851  0167AC  0E00               	movlw	0
 35852  0167AE  0100               	movlb	0	; () banked
 35853  0167B0  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 35854  0167B2  0E00               	movlw	0
 35855  0167B4  0100               	movlb	0	; () banked
 35856  0167B6  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 35857                           
 35858                           ; BSR set to: 0
 35859  0167B8  0E01               	movlw	1
 35860  0167BA  0100               	movlb	0	; () banked
 35861  0167BC  6F96               	movwf	___ftadd@sign& (0+255),b
 35862  0167BE                     l19604:
 35863                           
 35864                           ; BSR set to: 0
 35865  0167BE  C090  F060         	movff	___ftadd@f2,___ftpack@arg
 35866  0167C2  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 35867  0167C6  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 35868  0167CA  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
 35869  0167CE  C096  F064         	movff	___ftadd@sign,___ftpack@sign
 35870  0167D2  EC4E  F0C5         	call	___ftpack	;wreg free
 35871  0167D6  C060  F08D         	movff	?___ftpack,?___ftadd
 35872  0167DA  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
 35873  0167DE  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
 35874  0167E2  0012               	return	
 35875  0167E4                     __end_of___ftadd:
 35876                           	opt stack 0
 35877                           tblptru	equ	0xFF8
 35878                           tblptrh	equ	0xFF7
 35879                           tblptrl	equ	0xFF6
 35880                           tablat	equ	0xFF5
 35881                           prodh	equ	0xFF4
 35882                           prodl	equ	0xFF3
 35883                           intcon	equ	0xFF2
 35884                           postinc0	equ	0xFEE
 35885                           wreg	equ	0xFE8
 35886                           postdec1	equ	0xFE5
 35887                           fsr1h	equ	0xFE2
 35888                           fsr1l	equ	0xFE1
 35889                           indf2	equ	0xFDF
 35890                           postinc2	equ	0xFDE
 35891                           postdec2	equ	0xFDD
 35892                           fsr2h	equ	0xFDA
 35893                           fsr2l	equ	0xFD9
 35894                           status	equ	0xFD8
 35895                           
 35896 ;; *************** function ___ftneg *****************
 35897 ;; Defined at:
 35898 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 35899 ;; Parameters:    Size  Location     Type
 35900 ;;  f1              3   35[BANK0 ] float 
 35901 ;; Auto vars:     Size  Location     Type
 35902 ;;		None
 35903 ;; Return value:  Size  Location     Type
 35904 ;;                  3   35[BANK0 ] float 
 35905 ;; Registers used:
 35906 ;;		wreg, status,2, status,0
 35907 ;; Tracked objects:
 35908 ;;		On entry : 0/0
 35909 ;;		On exit  : 0/0
 35910 ;;		Unchanged: 0/0
 35911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35912 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35915 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35916 ;;Total ram usage:        3 bytes
 35917 ;; Hardware stack levels used:    1
 35918 ;; Hardware stack levels required when called:    3
 35919 ;; This function calls:
 35920 ;;		Nothing
 35921 ;; This function is called by:
 35922 ;;		_Freq_Calc
 35923 ;;		_R_PF_Calc
 35924 ;;		_Y_PF_Calc
 35925 ;;		_B_PF_Calc
 35926 ;;		_Power_Calc
 35927 ;;		_Rotor_Slip_Cal
 35928 ;;		_Motor_Slip_Cal
 35929 ;;		_printf
 35930 ;;		_sin
 35931 ;;		_Turbine_RPM_Checking_Rampup
 35932 ;; This function uses a non-reentrant model
 35933 ;;
 35934                           
 35935                           	psect	text136
 35936  01AE3A                     __ptext136:
 35937                           	opt stack 0
 35938  01AE3A                     ___ftneg:
 35939                           	opt stack 26
 35940                           
 35941                           ;incstack = 0
 35942  01AE3A  0100               	movlb	0	; () banked
 35943  01AE3C  5183               	movf	___ftneg@f1& (0+255),w,b
 35944  01AE3E  0100               	movlb	0	; () banked
 35945  01AE40  1184               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 35946  01AE42  0100               	movlb	0	; () banked
 35947  01AE44  1185               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 35948  01AE46  B4D8               	btfsc	status,2,c
 35949  01AE48  D009               	goto	l10729
 35950                           
 35951                           ; BSR set to: 0
 35952  01AE4A  0E00               	movlw	0
 35953  01AE4C  0100               	movlb	0	; () banked
 35954  01AE4E  1B83               	xorwf	___ftneg@f1& (0+255),f,b
 35955  01AE50  0E00               	movlw	0
 35956  01AE52  0100               	movlb	0	; () banked
 35957  01AE54  1B84               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 35958  01AE56  0E80               	movlw	128
 35959  01AE58  0100               	movlb	0	; () banked
 35960  01AE5A  1B85               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 35961  01AE5C                     l10729:
 35962                           
 35963                           ; BSR set to: 0
 35964  01AE5C  C083  F083         	movff	___ftneg@f1,?___ftneg
 35965  01AE60  C084  F084         	movff	___ftneg@f1+1,?___ftneg+1
 35966  01AE64  C085  F085         	movff	___ftneg@f1+2,?___ftneg+2
 35967                           
 35968                           ; BSR set to: 0
 35969  01AE68  0012               	return		;funcret
 35970  01AE6A                     __end_of___ftneg:
 35971                           	opt stack 0
 35972                           tblptru	equ	0xFF8
 35973                           tblptrh	equ	0xFF7
 35974                           tblptrl	equ	0xFF6
 35975                           tablat	equ	0xFF5
 35976                           prodh	equ	0xFF4
 35977                           prodl	equ	0xFF3
 35978                           intcon	equ	0xFF2
 35979                           postinc0	equ	0xFEE
 35980                           wreg	equ	0xFE8
 35981                           postdec1	equ	0xFE5
 35982                           fsr1h	equ	0xFE2
 35983                           fsr1l	equ	0xFE1
 35984                           indf2	equ	0xFDF
 35985                           postinc2	equ	0xFDE
 35986                           postdec2	equ	0xFDD
 35987                           fsr2h	equ	0xFDA
 35988                           fsr2l	equ	0xFD9
 35989                           status	equ	0xFD8
 35990                           
 35991 ;; *************** function ___ftdiv *****************
 35992 ;; Defined at:
 35993 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 35994 ;; Parameters:    Size  Location     Type
 35995 ;;  f1              3   69[BANK0 ] float 
 35996 ;;  f2              3   72[BANK0 ] float 
 35997 ;; Auto vars:     Size  Location     Type
 35998 ;;  f3              3   79[BANK0 ] float 
 35999 ;;  sign            1   83[BANK0 ] unsigned char 
 36000 ;;  exp             1   82[BANK0 ] unsigned char 
 36001 ;;  cntr            1   78[BANK0 ] unsigned char 
 36002 ;; Return value:  Size  Location     Type
 36003 ;;                  3   69[BANK0 ] float 
 36004 ;; Registers used:
 36005 ;;		wreg, status,2, status,0, cstack
 36006 ;; Tracked objects:
 36007 ;;		On entry : 0/0
 36008 ;;		On exit  : 0/0
 36009 ;;		Unchanged: 0/0
 36010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36011 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36012 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36013 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36014 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36015 ;;Total ram usage:       15 bytes
 36016 ;; Hardware stack levels used:    1
 36017 ;; Hardware stack levels required when called:    4
 36018 ;; This function calls:
 36019 ;;		___ftpack
 36020 ;; This function is called by:
 36021 ;;		_Turbine_RPM_Cal
 36022 ;;		_Generator_RPM_Cal
 36023 ;;		_Wind_Speed_Cal
 36024 ;;		_Wind_Speed_2_Cal
 36025 ;;		_Wind_Average
 36026 ;;		_VFD_Freq_Step_up
 36027 ;;		_VFD_RS485_Data
 36028 ;;		_Temp_Read
 36029 ;;		_Volt_Curr_Avg
 36030 ;;		_Freq_Calc
 36031 ;;		_R_PF_Calc
 36032 ;;		_R_PF_Avg
 36033 ;;		_Y_PF_Calc
 36034 ;;		_Y_PF_Avg
 36035 ;;		_B_PF_Calc
 36036 ;;		_B_PF_Avg
 36037 ;;		_Power_Factor
 36038 ;;		_Power_Calc
 36039 ;;		_Rotor_Slip_Cal
 36040 ;;		_Motor_Slip_Cal
 36041 ;;		_sin
 36042 ;; This function uses a non-reentrant model
 36043 ;;
 36044                           
 36045                           	psect	text137
 36046  01835E                     __ptext137:
 36047                           	opt stack 0
 36048  01835E                     ___ftdiv:
 36049                           	opt stack 25
 36050                           
 36051                           ; BSR set to: 0
 36052                           ;incstack = 0
 36053  01835E  C0A7  F0AB         	movff	___ftdiv@f1+2,??___ftdiv
 36054  018362  0100               	movlb	0	; () banked
 36055  018364  6BAC               	clrf	(??___ftdiv+1)& (0+255),b
 36056  018366  6BAD               	clrf	(??___ftdiv+2)& (0+255),b
 36057  018368  0100               	movlb	0	; () banked
 36058  01836A  35A6               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 36059  01836C  0100               	movlb	0	; () banked
 36060  01836E  37AB               	rlcf	??___ftdiv& (0+255),f,b
 36061  018370  E301               	bnc	u14631
 36062  018372  81AC               	bsf	(??___ftdiv+1)& (0+255),0,b
 36063  018374                     u14631:
 36064  018374  0100               	movlb	0	; () banked
 36065  018376  51AB               	movf	??___ftdiv& (0+255),w,b
 36066  018378  0100               	movlb	0	; () banked
 36067  01837A  6FB2               	movwf	___ftdiv@exp& (0+255),b
 36068  01837C  0100               	movlb	0	; () banked
 36069  01837E  51B2               	movf	___ftdiv@exp& (0+255),w,b
 36070  018380  A4D8               	btfss	status,2,c
 36071  018382  D00A               	goto	l20596
 36072                           
 36073                           ; BSR set to: 0
 36074  018384  0E00               	movlw	0
 36075  018386  0100               	movlb	0	; () banked
 36076  018388  6FA5               	movwf	?___ftdiv& (0+255),b
 36077  01838A  0E00               	movlw	0
 36078  01838C  0100               	movlb	0	; () banked
 36079  01838E  6FA6               	movwf	(?___ftdiv+1)& (0+255),b
 36080  018390  0E00               	movlw	0
 36081  018392  0100               	movlb	0	; () banked
 36082  018394  6FA7               	movwf	(?___ftdiv+2)& (0+255),b
 36083                           
 36084                           ; BSR set to: 0
 36085  018396  0012               	return	
 36086  018398                     l20596:
 36087                           
 36088                           ; BSR set to: 0
 36089  018398  C0AA  F0AB         	movff	___ftdiv@f2+2,??___ftdiv
 36090  01839C  0100               	movlb	0	; () banked
 36091  01839E  6BAC               	clrf	(??___ftdiv+1)& (0+255),b
 36092  0183A0  6BAD               	clrf	(??___ftdiv+2)& (0+255),b
 36093  0183A2  0100               	movlb	0	; () banked
 36094  0183A4  35A9               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 36095  0183A6  0100               	movlb	0	; () banked
 36096  0183A8  37AB               	rlcf	??___ftdiv& (0+255),f,b
 36097  0183AA  E301               	bnc	u14651
 36098  0183AC  81AC               	bsf	(??___ftdiv+1)& (0+255),0,b
 36099  0183AE                     u14651:
 36100  0183AE  0100               	movlb	0	; () banked
 36101  0183B0  51AB               	movf	??___ftdiv& (0+255),w,b
 36102  0183B2  0100               	movlb	0	; () banked
 36103  0183B4  6FB3               	movwf	___ftdiv@sign& (0+255),b
 36104  0183B6  0100               	movlb	0	; () banked
 36105  0183B8  51B3               	movf	___ftdiv@sign& (0+255),w,b
 36106  0183BA  A4D8               	btfss	status,2,c
 36107  0183BC  D00A               	goto	l20602
 36108                           
 36109                           ; BSR set to: 0
 36110  0183BE  0E00               	movlw	0
 36111  0183C0  0100               	movlb	0	; () banked
 36112  0183C2  6FA5               	movwf	?___ftdiv& (0+255),b
 36113  0183C4  0E00               	movlw	0
 36114  0183C6  0100               	movlb	0	; () banked
 36115  0183C8  6FA6               	movwf	(?___ftdiv+1)& (0+255),b
 36116  0183CA  0E00               	movlw	0
 36117  0183CC  0100               	movlb	0	; () banked
 36118  0183CE  6FA7               	movwf	(?___ftdiv+2)& (0+255),b
 36119                           
 36120                           ; BSR set to: 0
 36121  0183D0  0012               	return	
 36122  0183D2                     l20602:
 36123                           
 36124                           ; BSR set to: 0
 36125  0183D2  0E00               	movlw	0
 36126  0183D4  0100               	movlb	0	; () banked
 36127  0183D6  6FAF               	movwf	___ftdiv@f3& (0+255),b
 36128  0183D8  0E00               	movlw	0
 36129  0183DA  0100               	movlb	0	; () banked
 36130  0183DC  6FB0               	movwf	(___ftdiv@f3+1)& (0+255),b
 36131  0183DE  0E00               	movlw	0
 36132  0183E0  0100               	movlb	0	; () banked
 36133  0183E2  6FB1               	movwf	(___ftdiv@f3+2)& (0+255),b
 36134                           
 36135                           ; BSR set to: 0
 36136  0183E4  0100               	movlb	0	; () banked
 36137  0183E6  51B3               	movf	___ftdiv@sign& (0+255),w,b
 36138  0183E8  0F89               	addlw	137
 36139  0183EA  0100               	movlb	0	; () banked
 36140  0183EC  5FB2               	subwf	___ftdiv@exp& (0+255),f,b
 36141                           
 36142                           ; BSR set to: 0
 36143  0183EE  C0A7  F0B3         	movff	___ftdiv@f1+2,___ftdiv@sign
 36144                           
 36145                           ; BSR set to: 0
 36146  0183F2  0100               	movlb	0	; () banked
 36147  0183F4  51AA               	movf	(___ftdiv@f2+2)& (0+255),w,b
 36148  0183F6  0100               	movlb	0	; () banked
 36149  0183F8  1BB3               	xorwf	___ftdiv@sign& (0+255),f,b
 36150                           
 36151                           ; BSR set to: 0
 36152  0183FA  0E80               	movlw	128
 36153  0183FC  0100               	movlb	0	; () banked
 36154  0183FE  17B3               	andwf	___ftdiv@sign& (0+255),f,b
 36155                           
 36156                           ; BSR set to: 0
 36157  018400  0100               	movlb	0	; () banked
 36158  018402  8FA6               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 36159                           
 36160                           ; BSR set to: 0
 36161  018404  0EFF               	movlw	255
 36162  018406  0100               	movlb	0	; () banked
 36163  018408  17A5               	andwf	___ftdiv@f1& (0+255),f,b
 36164  01840A  0EFF               	movlw	255
 36165  01840C  0100               	movlb	0	; () banked
 36166  01840E  17A6               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 36167  018410  0E00               	movlw	0
 36168  018412  0100               	movlb	0	; () banked
 36169  018414  17A7               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 36170                           
 36171                           ; BSR set to: 0
 36172  018416  0100               	movlb	0	; () banked
 36173  018418  8FA9               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 36174                           
 36175                           ; BSR set to: 0
 36176  01841A  0EFF               	movlw	255
 36177  01841C  0100               	movlb	0	; () banked
 36178  01841E  17A8               	andwf	___ftdiv@f2& (0+255),f,b
 36179  018420  0EFF               	movlw	255
 36180  018422  0100               	movlb	0	; () banked
 36181  018424  17A9               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 36182  018426  0E00               	movlw	0
 36183  018428  0100               	movlb	0	; () banked
 36184  01842A  17AA               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 36185                           
 36186                           ; BSR set to: 0
 36187  01842C  0E18               	movlw	24
 36188  01842E  0100               	movlb	0	; () banked
 36189  018430  6FAE               	movwf	___ftdiv@cntr& (0+255),b
 36190  018432                     l20622:
 36191                           
 36192                           ; BSR set to: 0
 36193  018432  0100               	movlb	0	; () banked
 36194  018434  90D8               	bcf	status,0,c
 36195  018436  37AF               	rlcf	___ftdiv@f3& (0+255),f,b
 36196  018438  37B0               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 36197  01843A  37B1               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 36198                           
 36199                           ; BSR set to: 0
 36200  01843C  0100               	movlb	0	; () banked
 36201  01843E  51A8               	movf	___ftdiv@f2& (0+255),w,b
 36202  018440  0100               	movlb	0	; () banked
 36203  018442  5DA5               	subwf	___ftdiv@f1& (0+255),w,b
 36204  018444  0100               	movlb	0	; () banked
 36205  018446  51A9               	movf	(___ftdiv@f2+1)& (0+255),w,b
 36206  018448  0100               	movlb	0	; () banked
 36207  01844A  59A6               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 36208  01844C  0100               	movlb	0	; () banked
 36209  01844E  51AA               	movf	(___ftdiv@f2+2)& (0+255),w,b
 36210  018450  0100               	movlb	0	; () banked
 36211  018452  59A7               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 36212  018454  A0D8               	btfss	status,0,c
 36213  018456  D00E               	goto	l10690
 36214                           
 36215                           ; BSR set to: 0
 36216  018458  0100               	movlb	0	; () banked
 36217  01845A  51A8               	movf	___ftdiv@f2& (0+255),w,b
 36218  01845C  0100               	movlb	0	; () banked
 36219  01845E  5FA5               	subwf	___ftdiv@f1& (0+255),f,b
 36220  018460  0100               	movlb	0	; () banked
 36221  018462  51A9               	movf	(___ftdiv@f2+1)& (0+255),w,b
 36222  018464  0100               	movlb	0	; () banked
 36223  018466  5BA6               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 36224  018468  0100               	movlb	0	; () banked
 36225  01846A  51AA               	movf	(___ftdiv@f2+2)& (0+255),w,b
 36226  01846C  0100               	movlb	0	; () banked
 36227  01846E  5BA7               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 36228                           
 36229                           ; BSR set to: 0
 36230  018470  0100               	movlb	0	; () banked
 36231  018472  81AF               	bsf	___ftdiv@f3& (0+255),0,b
 36232  018474                     l10690:
 36233                           
 36234                           ; BSR set to: 0
 36235  018474  0100               	movlb	0	; () banked
 36236  018476  90D8               	bcf	status,0,c
 36237  018478  37A5               	rlcf	___ftdiv@f1& (0+255),f,b
 36238  01847A  37A6               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 36239  01847C  37A7               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 36240                           
 36241                           ; BSR set to: 0
 36242  01847E  0100               	movlb	0	; () banked
 36243  018480  2FAE               	decfsz	___ftdiv@cntr& (0+255),f,b
 36244  018482  D7D7               	goto	l20622
 36245                           
 36246                           ; BSR set to: 0
 36247                           
 36248                           ; BSR set to: 0
 36249  018484  C0AF  F060         	movff	___ftdiv@f3,___ftpack@arg
 36250  018488  C0B0  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
 36251  01848C  C0B1  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
 36252  018490  C0B2  F063         	movff	___ftdiv@exp,___ftpack@exp
 36253  018494  C0B3  F064         	movff	___ftdiv@sign,___ftpack@sign
 36254  018498  EC4E  F0C5         	call	___ftpack	;wreg free
 36255  01849C  C060  F0A5         	movff	?___ftpack,?___ftdiv
 36256  0184A0  C061  F0A6         	movff	?___ftpack+1,?___ftdiv+1
 36257  0184A4  C062  F0A7         	movff	?___ftpack+2,?___ftdiv+2
 36258  0184A8  0012               	return	
 36259  0184AA                     __end_of___ftdiv:
 36260                           	opt stack 0
 36261                           tblptru	equ	0xFF8
 36262                           tblptrh	equ	0xFF7
 36263                           tblptrl	equ	0xFF6
 36264                           tablat	equ	0xFF5
 36265                           prodh	equ	0xFF4
 36266                           prodl	equ	0xFF3
 36267                           intcon	equ	0xFF2
 36268                           postinc0	equ	0xFEE
 36269                           wreg	equ	0xFE8
 36270                           postdec1	equ	0xFE5
 36271                           fsr1h	equ	0xFE2
 36272                           fsr1l	equ	0xFE1
 36273                           indf2	equ	0xFDF
 36274                           postinc2	equ	0xFDE
 36275                           postdec2	equ	0xFDD
 36276                           fsr2h	equ	0xFDA
 36277                           fsr2l	equ	0xFD9
 36278                           status	equ	0xFD8
 36279                           
 36280 ;; *************** function ___ftpack *****************
 36281 ;; Defined at:
 36282 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 36283 ;; Parameters:    Size  Location     Type
 36284 ;;  arg             3    0[BANK0 ] unsigned um
 36285 ;;  exp             1    3[BANK0 ] unsigned char 
 36286 ;;  sign            1    4[BANK0 ] unsigned char 
 36287 ;; Auto vars:     Size  Location     Type
 36288 ;;		None
 36289 ;; Return value:  Size  Location     Type
 36290 ;;                  3    0[BANK0 ] float 
 36291 ;; Registers used:
 36292 ;;		wreg, status,2, status,0
 36293 ;; Tracked objects:
 36294 ;;		On entry : 0/0
 36295 ;;		On exit  : 0/0
 36296 ;;		Unchanged: 0/0
 36297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36298 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36300 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36301 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36302 ;;Total ram usage:        8 bytes
 36303 ;; Hardware stack levels used:    1
 36304 ;; Hardware stack levels required when called:    3
 36305 ;; This function calls:
 36306 ;;		Nothing
 36307 ;; This function is called by:
 36308 ;;		___altoft
 36309 ;;		___ftadd
 36310 ;;		___ftdiv
 36311 ;;		___ftmul
 36312 ;;		___lbtoft
 36313 ;;		___lltoft
 36314 ;;		___lwtoft
 36315 ;; This function uses a non-reentrant model
 36316 ;;
 36317                           
 36318                           	psect	text138
 36319  018A9C                     __ptext138:
 36320                           	opt stack 0
 36321  018A9C                     ___ftpack:
 36322                           	opt stack 25
 36323                           
 36324                           ;incstack = 0
 36325  018A9C  0100               	movlb	0	; () banked
 36326  018A9E  5163               	movf	___ftpack@exp& (0+255),w,b
 36327  018AA0  0100               	movlb	0	; () banked
 36328  018AA2  B4D8               	btfsc	status,2,c
 36329  018AA4  D008               	goto	l19494
 36330                           
 36331                           ; BSR set to: 0
 36332  018AA6  0100               	movlb	0	; () banked
 36333  018AA8  5160               	movf	___ftpack@arg& (0+255),w,b
 36334  018AAA  0100               	movlb	0	; () banked
 36335  018AAC  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 36336  018AAE  0100               	movlb	0	; () banked
 36337  018AB0  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 36338  018AB2  A4D8               	btfss	status,2,c
 36339  018AB4  D011               	goto	l19500
 36340  018AB6                     l19494:
 36341                           
 36342                           ; BSR set to: 0
 36343  018AB6  0E00               	movlw	0
 36344  018AB8  0100               	movlb	0	; () banked
 36345  018ABA  6F60               	movwf	?___ftpack& (0+255),b
 36346  018ABC  0E00               	movlw	0
 36347  018ABE  0100               	movlb	0	; () banked
 36348  018AC0  6F61               	movwf	(?___ftpack+1)& (0+255),b
 36349  018AC2  0E00               	movlw	0
 36350  018AC4  0100               	movlb	0	; () banked
 36351  018AC6  6F62               	movwf	(?___ftpack+2)& (0+255),b
 36352                           
 36353                           ; BSR set to: 0
 36354  018AC8  0012               	return	
 36355  018ACA                     l19498:
 36356                           
 36357                           ; BSR set to: 0
 36358  018ACA  0100               	movlb	0	; () banked
 36359  018ACC  2B63               	incf	___ftpack@exp& (0+255),f,b
 36360  018ACE  0100               	movlb	0	; () banked
 36361  018AD0  90D8               	bcf	status,0,c
 36362  018AD2  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 36363  018AD4  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 36364  018AD6  3360               	rrcf	___ftpack@arg& (0+255),f,b
 36365  018AD8                     l19500:
 36366                           
 36367                           ; BSR set to: 0
 36368  018AD8  0E00               	movlw	0
 36369  018ADA  0100               	movlb	0	; () banked
 36370  018ADC  1560               	andwf	___ftpack@arg& (0+255),w,b
 36371  018ADE  0100               	movlb	0	; () banked
 36372  018AE0  6F65               	movwf	??___ftpack& (0+255),b
 36373  018AE2  0E00               	movlw	0
 36374  018AE4  0100               	movlb	0	; () banked
 36375  018AE6  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 36376  018AE8  0100               	movlb	0	; () banked
 36377  018AEA  6F66               	movwf	(??___ftpack+1)& (0+255),b
 36378  018AEC  0EFE               	movlw	254
 36379  018AEE  0100               	movlb	0	; () banked
 36380  018AF0  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 36381  018AF2  0100               	movlb	0	; () banked
 36382  018AF4  6F67               	movwf	(??___ftpack+2)& (0+255),b
 36383  018AF6  0100               	movlb	0	; () banked
 36384  018AF8  5165               	movf	??___ftpack& (0+255),w,b
 36385  018AFA  0100               	movlb	0	; () banked
 36386  018AFC  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 36387  018AFE  0100               	movlb	0	; () banked
 36388  018B00  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 36389  018B02  B4D8               	btfsc	status,2,c
 36390  018B04  D011               	goto	l19506
 36391  018B06  D7E1               	goto	l19498
 36392  018B08                     l19502:
 36393                           
 36394                           ; BSR set to: 0
 36395  018B08  0100               	movlb	0	; () banked
 36396  018B0A  2B63               	incf	___ftpack@exp& (0+255),f,b
 36397                           
 36398                           ; BSR set to: 0
 36399  018B0C  0E01               	movlw	1
 36400  018B0E  0100               	movlb	0	; () banked
 36401  018B10  2760               	addwf	___ftpack@arg& (0+255),f,b
 36402  018B12  0E00               	movlw	0
 36403  018B14  0100               	movlb	0	; () banked
 36404  018B16  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 36405  018B18  0E00               	movlw	0
 36406  018B1A  0100               	movlb	0	; () banked
 36407  018B1C  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 36408  018B1E  0100               	movlb	0	; () banked
 36409  018B20  90D8               	bcf	status,0,c
 36410  018B22  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 36411  018B24  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 36412  018B26  3360               	rrcf	___ftpack@arg& (0+255),f,b
 36413  018B28                     l19506:
 36414                           
 36415                           ; BSR set to: 0
 36416  018B28  0E00               	movlw	0
 36417  018B2A  0100               	movlb	0	; () banked
 36418  018B2C  1560               	andwf	___ftpack@arg& (0+255),w,b
 36419  018B2E  0100               	movlb	0	; () banked
 36420  018B30  6F65               	movwf	??___ftpack& (0+255),b
 36421  018B32  0E00               	movlw	0
 36422  018B34  0100               	movlb	0	; () banked
 36423  018B36  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 36424  018B38  0100               	movlb	0	; () banked
 36425  018B3A  6F66               	movwf	(??___ftpack+1)& (0+255),b
 36426  018B3C  0EFF               	movlw	255
 36427  018B3E  0100               	movlb	0	; () banked
 36428  018B40  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 36429  018B42  0100               	movlb	0	; () banked
 36430  018B44  6F67               	movwf	(??___ftpack+2)& (0+255),b
 36431  018B46  0100               	movlb	0	; () banked
 36432  018B48  5165               	movf	??___ftpack& (0+255),w,b
 36433  018B4A  0100               	movlb	0	; () banked
 36434  018B4C  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 36435  018B4E  0100               	movlb	0	; () banked
 36436  018B50  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 36437  018B52  B4D8               	btfsc	status,2,c
 36438  018B54  D008               	goto	l19510
 36439  018B56  D7D8               	goto	l19502
 36440  018B58                     l19508:
 36441                           
 36442                           ; BSR set to: 0
 36443  018B58  0100               	movlb	0	; () banked
 36444  018B5A  0763               	decf	___ftpack@exp& (0+255),f,b
 36445  018B5C  0100               	movlb	0	; () banked
 36446  018B5E  90D8               	bcf	status,0,c
 36447  018B60  3760               	rlcf	___ftpack@arg& (0+255),f,b
 36448  018B62  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 36449  018B64  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 36450  018B66                     l19510:
 36451                           
 36452                           ; BSR set to: 0
 36453  018B66  0100               	movlb	0	; () banked
 36454  018B68  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 36455  018B6A  D004               	goto	l10632
 36456                           
 36457                           ; BSR set to: 0
 36458  018B6C  0E02               	movlw	2
 36459  018B6E  0100               	movlb	0	; () banked
 36460  018B70  6163               	cpfslt	___ftpack@exp& (0+255),b
 36461  018B72  D7F2               	goto	l19508
 36462  018B74                     l10632:
 36463                           
 36464                           ; BSR set to: 0
 36465  018B74  0100               	movlb	0	; () banked
 36466  018B76  B163               	btfsc	___ftpack@exp& (0+255),0,b
 36467  018B78  D002               	goto	l19516
 36468                           
 36469                           ; BSR set to: 0
 36470  018B7A  0100               	movlb	0	; () banked
 36471  018B7C  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 36472  018B7E                     l19516:
 36473                           
 36474                           ; BSR set to: 0
 36475  018B7E  0100               	movlb	0	; () banked
 36476  018B80  90D8               	bcf	status,0,c
 36477  018B82  3363               	rrcf	___ftpack@exp& (0+255),f,b
 36478  018B84  0100               	movlb	0	; () banked
 36479  018B86  5163               	movf	___ftpack@exp& (0+255),w,b
 36480  018B88  0100               	movlb	0	; () banked
 36481  018B8A  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 36482                           
 36483                           ; BSR set to: 0
 36484  018B8C  0100               	movlb	0	; () banked
 36485  018B8E  5164               	movf	___ftpack@sign& (0+255),w,b
 36486  018B90  0100               	movlb	0	; () banked
 36487  018B92  B4D8               	btfsc	status,2,c
 36488  018B94  D002               	goto	l19522
 36489                           
 36490                           ; BSR set to: 0
 36491  018B96  0100               	movlb	0	; () banked
 36492  018B98  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 36493  018B9A                     l19522:
 36494                           
 36495                           ; BSR set to: 0
 36496  018B9A  C060  F060         	movff	___ftpack@arg,?___ftpack
 36497  018B9E  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 36498  018BA2  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 36499  018BA6  0012               	return	
 36500  018BA8                     __end_of___ftpack:
 36501                           	opt stack 0
 36502                           tblptru	equ	0xFF8
 36503                           tblptrh	equ	0xFF7
 36504                           tblptrl	equ	0xFF6
 36505                           tablat	equ	0xFF5
 36506                           prodh	equ	0xFF4
 36507                           prodl	equ	0xFF3
 36508                           intcon	equ	0xFF2
 36509                           postinc0	equ	0xFEE
 36510                           wreg	equ	0xFE8
 36511                           postdec1	equ	0xFE5
 36512                           fsr1h	equ	0xFE2
 36513                           fsr1l	equ	0xFE1
 36514                           indf2	equ	0xFDF
 36515                           postinc2	equ	0xFDE
 36516                           postdec2	equ	0xFDD
 36517                           fsr2h	equ	0xFDA
 36518                           fsr2l	equ	0xFD9
 36519                           status	equ	0xFD8
 36520                           
 36521 ;; *************** function _ISR *****************
 36522 ;; Defined at:
 36523 ;;		line 18 in file "ISR.c"
 36524 ;; Parameters:    Size  Location     Type
 36525 ;;		None
 36526 ;; Auto vars:     Size  Location     Type
 36527 ;;		None
 36528 ;; Return value:  Size  Location     Type
 36529 ;;                  1    wreg      void 
 36530 ;; Registers used:
 36531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36532 ;; Tracked objects:
 36533 ;;		On entry : 0/0
 36534 ;;		On exit  : 0/0
 36535 ;;		Unchanged: 0/0
 36536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36539 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36540 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36541 ;;Total ram usage:       16 bytes
 36542 ;; Hardware stack levels used:    1
 36543 ;; Hardware stack levels required when called:    2
 36544 ;; This function calls:
 36545 ;;		_Error_Checking_Interrupt_Overflow
 36546 ;;		_PM_Error_Led
 36547 ;;		___awtoft
 36548 ;;		i2___ftadd
 36549 ;; This function is called by:
 36550 ;;		Interrupt level 2
 36551 ;; This function uses a non-reentrant model
 36552 ;;
 36553                           
 36554                           	psect	intcode
 36555  000008                     __pintcode:
 36556                           	opt stack 0
 36557  000008                     _ISR:
 36558                           	opt stack 21
 36559                           
 36560                           ; BSR set to: 0
 36561                           ;incstack = 0
 36562  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 36563  00000A  CFFA F03B          	movff	pclath,??_ISR+2
 36564  00000E  CFFB F03C          	movff	pclatu,??_ISR+3
 36565  000012  CFE9 F03D          	movff	fsr0l,??_ISR+4
 36566  000016  CFEA F03E          	movff	fsr0h,??_ISR+5
 36567  00001A  CFE1 F03F          	movff	fsr1l,??_ISR+6
 36568  00001E  CFE2 F040          	movff	fsr1h,??_ISR+7
 36569  000022  CFD9 F041          	movff	fsr2l,??_ISR+8
 36570  000026  CFDA F042          	movff	fsr2h,??_ISR+9
 36571  00002A  CFF3 F043          	movff	prodl,??_ISR+10
 36572  00002E  CFF4 F044          	movff	prodh,??_ISR+11
 36573  000032  CFF6 F045          	movff	tblptrl,??_ISR+12
 36574  000036  CFF7 F046          	movff	tblptrh,??_ISR+13
 36575  00003A  CFF8 F047          	movff	tblptru,??_ISR+14
 36576  00003E  CFF5 F048          	movff	tablat,??_ISR+15
 36577                           
 36578                           ;ISR.c: 20: if(TMR7IF)
 36579  000042  A6BA               	btfss	4026,3,c	;volatile
 36580  000044  D040               	goto	i2l19330
 36581                           
 36582                           ;ISR.c: 21: {
 36583                           ;ISR.c: 22: TMR7IF = 0;
 36584  000046  96BA               	bcf	4026,3,c	;volatile
 36585                           
 36586                           ;ISR.c: 23: Error_Checking_Interrupt_Overflow();
 36587  000048  ECC6  F0D8         	call	_Error_Checking_Interrupt_Overflow	;wreg free
 36588                           
 36589                           ;ISR.c: 24: Timer1_counter++;
 36590  00004C  0101               	movlb	1	; () banked
 36591  00004E  4B3C               	infsnz	_Timer1_counter& (0+255),f,b
 36592  000050  2B3D               	incf	(_Timer1_counter+1)& (0+255),f,b
 36593                           
 36594                           ; BSR set to: 1
 36595                           ;ISR.c: 25: if(Timer1_counter == 15)
 36596  000052  0E0F               	movlw	15
 36597  000054  0101               	movlb	1	; () banked
 36598  000056  193C               	xorwf	_Timer1_counter& (0+255),w,b
 36599  000058  0101               	movlb	1	; () banked
 36600  00005A  113D               	iorwf	(_Timer1_counter+1)& (0+255),w,b
 36601  00005C  A4D8               	btfss	status,2,c
 36602  00005E  D003               	goto	i2l19318
 36603                           
 36604                           ; BSR set to: 1
 36605                           ;ISR.c: 26: {
 36606                           ;ISR.c: 27: Timer0_Falg2 = 1;
 36607  000060  0E01               	movlw	1
 36608  000062  0101               	movlb	1	; () banked
 36609  000064  6F84               	movwf	_Timer0_Falg2& (0+255),b
 36610  000066                     i2l19318:
 36611                           
 36612                           ; BSR set to: 1
 36613                           ;ISR.c: 28: }
 36614                           ;ISR.c: 29: if(Timer1_counter == 30 && One_Sec_Flag == 0)
 36615  000066  0E1E               	movlw	30
 36616  000068  0101               	movlb	1	; () banked
 36617  00006A  193C               	xorwf	_Timer1_counter& (0+255),w,b
 36618  00006C  0101               	movlb	1	; () banked
 36619  00006E  113D               	iorwf	(_Timer1_counter+1)& (0+255),w,b
 36620  000070  A4D8               	btfss	status,2,c
 36621  000072  D011               	goto	i2l19324
 36622                           
 36623                           ; BSR set to: 1
 36624  000074  0100               	movlb	0	; () banked
 36625  000076  51E8               	movf	_One_Sec_Flag& (0+255),w,b
 36626  000078  A4D8               	btfss	status,2,c
 36627  00007A  D00D               	goto	i2l19324
 36628                           
 36629                           ; BSR set to: 0
 36630                           ;ISR.c: 30: {
 36631                           ;ISR.c: 31: Timer1_counter = 0;
 36632  00007C  0E00               	movlw	0
 36633  00007E  0101               	movlb	1	; () banked
 36634  000080  6F3D               	movwf	(_Timer1_counter+1)& (0+255),b
 36635  000082  0E00               	movlw	0
 36636  000084  6F3C               	movwf	_Timer1_counter& (0+255),b
 36637                           
 36638                           ;ISR.c: 32: Timer0_1Sec_Flag = 1;
 36639  000086  0E00               	movlw	0
 36640  000088  0103               	movlb	3	; () banked
 36641  00008A  6FF0               	movwf	(_Timer0_1Sec_Flag+1)& (0+255),b
 36642  00008C  0E01               	movlw	1
 36643  00008E  6FEF               	movwf	_Timer0_1Sec_Flag& (0+255),b
 36644                           
 36645                           ;ISR.c: 33: One_Sec_Flag = 1;
 36646  000090  0E01               	movlw	1
 36647  000092  0100               	movlb	0	; () banked
 36648  000094  6FE8               	movwf	_One_Sec_Flag& (0+255),b
 36649  000096                     i2l19324:
 36650                           
 36651                           ;ISR.c: 34: }
 36652                           ;ISR.c: 35: if(Timer1_counter == 31 && One_Sec_Flag == 1)
 36653  000096  0E1F               	movlw	31
 36654  000098  0101               	movlb	1	; () banked
 36655  00009A  193C               	xorwf	_Timer1_counter& (0+255),w,b
 36656  00009C  0101               	movlb	1	; () banked
 36657  00009E  113D               	iorwf	(_Timer1_counter+1)& (0+255),w,b
 36658  0000A0  A4D8               	btfss	status,2,c
 36659  0000A2  D011               	goto	i2l19330
 36660                           
 36661                           ; BSR set to: 1
 36662  0000A4  0100               	movlb	0	; () banked
 36663  0000A6  05E8               	decf	_One_Sec_Flag& (0+255),w,b
 36664  0000A8  A4D8               	btfss	status,2,c
 36665  0000AA  D00D               	goto	i2l19330
 36666                           
 36667                           ; BSR set to: 0
 36668                           ;ISR.c: 36: {
 36669                           ;ISR.c: 37: Timer1_counter = 0;
 36670  0000AC  0E00               	movlw	0
 36671  0000AE  0101               	movlb	1	; () banked
 36672  0000B0  6F3D               	movwf	(_Timer1_counter+1)& (0+255),b
 36673  0000B2  0E00               	movlw	0
 36674  0000B4  6F3C               	movwf	_Timer1_counter& (0+255),b
 36675                           
 36676                           ;ISR.c: 38: Timer0_1Sec_Flag = 1;
 36677  0000B6  0E00               	movlw	0
 36678  0000B8  0103               	movlb	3	; () banked
 36679  0000BA  6FF0               	movwf	(_Timer0_1Sec_Flag+1)& (0+255),b
 36680  0000BC  0E01               	movlw	1
 36681  0000BE  6FEF               	movwf	_Timer0_1Sec_Flag& (0+255),b
 36682                           
 36683                           ;ISR.c: 39: One_Sec_Flag = 0;
 36684  0000C0  0E00               	movlw	0
 36685  0000C2  0100               	movlb	0	; () banked
 36686  0000C4  6FE8               	movwf	_One_Sec_Flag& (0+255),b
 36687  0000C6                     i2l19330:
 36688                           
 36689                           ;ISR.c: 40: }
 36690                           ;ISR.c: 41: }
 36691                           ;ISR.c: 42: if(TMR0IF)
 36692  0000C6  A4F2               	btfss	intcon,2,c	;volatile
 36693  0000C8  D009               	goto	i2l19340
 36694                           
 36695                           ;ISR.c: 43: {
 36696                           ;ISR.c: 44: TMR0IF = 0;
 36697  0000CA  94F2               	bcf	intcon,2,c	;volatile
 36698                           
 36699                           ;ISR.c: 45: Volt_Curr_Flag = 1;
 36700  0000CC  0E01               	movlw	1
 36701  0000CE  0101               	movlb	1	; () banked
 36702  0000D0  6F98               	movwf	_Volt_Curr_Flag& (0+255),b
 36703                           
 36704                           ; BSR set to: 1
 36705                           ;ISR.c: 46: PM_Error_Led();
 36706  0000D2  EC22  F0A9         	call	_PM_Error_Led	;wreg free
 36707                           
 36708                           ;ISR.c: 47: Timer0_counter++;
 36709  0000D6  0105               	movlb	5	; () banked
 36710  0000D8  4BDE               	infsnz	_Timer0_counter& (0+255),f,b
 36711  0000DA  2BDF               	incf	(_Timer0_counter+1)& (0+255),f,b
 36712  0000DC                     i2l19340:
 36713                           
 36714                           ;ISR.c: 48: }
 36715                           ;ISR.c: 50: if(CCP1IF)
 36716  0000DC  A2A4               	btfss	4004,1,c	;volatile
 36717  0000DE  D01E               	goto	i2l19350
 36718                           
 36719                           ;ISR.c: 51: {
 36720                           ;ISR.c: 52: CCP1IF = 0;
 36721  0000E0  92A4               	bcf	4004,1,c	;volatile
 36722                           
 36723                           ;ISR.c: 53: CCP1IE = 1;
 36724  0000E2  82A3               	bsf	4003,1,c	;volatile
 36725                           
 36726                           ;ISR.c: 54: Freq_Flag = 1;
 36727  0000E4  0E01               	movlw	1
 36728  0000E6  0101               	movlb	1	; () banked
 36729  0000E8  6F5A               	movwf	_Freq_Flag& (0+255),b
 36730                           
 36731                           ; BSR set to: 1
 36732                           ;ISR.c: 55: R_V_Old = R_V_New;
 36733  0000EA  C0F7  F0D0         	movff	_R_V_New,_R_V_Old
 36734  0000EE  C0F8  F0D1         	movff	_R_V_New+1,_R_V_Old+1
 36735  0000F2  C0F9  F0D2         	movff	_R_V_New+2,_R_V_Old+2
 36736                           
 36737                           ; BSR set to: 1
 36738                           ;ISR.c: 56: R_V_New = ((CCPR1H << 8) | CCPR1L);
 36739  0000F6  50BC               	movf	4028,w,c	;volatile
 36740  0000F8  CFBD F039          	movff	4029,??_ISR	;volatile
 36741  0000FC  6A3A               	clrf	(??_ISR+1)& (0+255),c
 36742  0000FE  C039  F03A         	movff	??_ISR,??_ISR+1
 36743  000102  6A39               	clrf	??_ISR,c
 36744  000104  1039               	iorwf	??_ISR,w,c
 36745  000106  6E2D               	movwf	___awtoft@c,c
 36746  000108  503A               	movf	??_ISR+1,w,c
 36747  00010A  6E2E               	movwf	___awtoft@c+1,c
 36748  00010C  EC67  F0D6         	call	___awtoft	;wreg free
 36749  000110  C02D  F0F7         	movff	?___awtoft,_R_V_New
 36750  000114  C02E  F0F8         	movff	?___awtoft+1,_R_V_New+1
 36751  000118  C02F  F0F9         	movff	?___awtoft+2,_R_V_New+2
 36752  00011C                     i2l19350:
 36753                           
 36754                           ;ISR.c: 57: }
 36755                           ;ISR.c: 59: if(CCP3IF)
 36756  00011C  A0B7               	btfss	4023,0,c	;volatile
 36757  00011E  D047               	goto	i2l19364
 36758                           
 36759                           ;ISR.c: 60: {
 36760                           ;ISR.c: 61: CCP3IF = 0;
 36761  000120  90B7               	bcf	4023,0,c	;volatile
 36762                           
 36763                           ;ISR.c: 62: CCP3IE = 1;
 36764  000122  80B6               	bsf	4022,0,c	;volatile
 36765                           
 36766                           ;ISR.c: 63: R_PF_Flag = 1;
 36767  000124  0E01               	movlw	1
 36768  000126  0101               	movlb	1	; () banked
 36769  000128  6F78               	movwf	_R_PF_Flag& (0+255),b
 36770                           
 36771                           ; BSR set to: 1
 36772                           ;ISR.c: 64: Rcurr_Old = Rcurr_New;
 36773  00012A  C1A1  F66C         	movff	_Rcurr_New,_Rcurr_Old
 36774  00012E  C1A2  F66D         	movff	_Rcurr_New+1,_Rcurr_Old+1
 36775  000132  C1A3  F66E         	movff	_Rcurr_New+2,_Rcurr_Old+2
 36776                           
 36777                           ; BSR set to: 1
 36778                           ;ISR.c: 65: Rcurr_New = ((CCPR3H << 8) | CCPR3L);
 36779  000136  010F               	movlb	15	; () banked
 36780  000138  514A               	movf	74,w,b	;volatile
 36781  00013A  CF4B F039          	movff	3915,??_ISR	;volatile
 36782  00013E  6A3A               	clrf	(??_ISR+1)& (0+255),c
 36783  000140  C039  F03A         	movff	??_ISR,??_ISR+1
 36784  000144  6A39               	clrf	??_ISR,c
 36785  000146  1039               	iorwf	??_ISR,w,c
 36786  000148  6E2D               	movwf	___awtoft@c,c
 36787  00014A  503A               	movf	??_ISR+1,w,c
 36788  00014C  6E2E               	movwf	___awtoft@c+1,c
 36789  00014E  EC67  F0D6         	call	___awtoft	;wreg free
 36790  000152  C02D  F1A1         	movff	?___awtoft,_Rcurr_New
 36791  000156  C02E  F1A2         	movff	?___awtoft+1,_Rcurr_New+1
 36792  00015A  C02F  F1A3         	movff	?___awtoft+2,_Rcurr_New+2
 36793                           
 36794                           ;ISR.c: 66: Rcurr_V_Old = (R_V_Old - (1666.667));
 36795  00015E  C0D0  F02D         	movff	_R_V_Old,i2___ftadd@f1
 36796  000162  C0D1  F02E         	movff	_R_V_Old+1,i2___ftadd@f1+1
 36797  000166  C0D2  F02F         	movff	_R_V_Old+2,i2___ftadd@f1+2
 36798  00016A  0E55               	movlw	85
 36799  00016C  6E30               	movwf	i2___ftadd@f2,c
 36800  00016E  0ED0               	movlw	208
 36801  000170  6E31               	movwf	i2___ftadd@f2+1,c
 36802  000172  0EC4               	movlw	196
 36803  000174  6E32               	movwf	i2___ftadd@f2+2,c
 36804  000176  EC24  F0BA         	call	i2___ftadd	;wreg free
 36805  00017A  C02D  F21E         	movff	?i2___ftadd,_Rcurr_V_Old
 36806  00017E  C02E  F21F         	movff	?i2___ftadd+1,_Rcurr_V_Old+1
 36807  000182  C02F  F220         	movff	?i2___ftadd+2,_Rcurr_V_Old+2
 36808                           
 36809                           ;ISR.c: 67: Rcurr_V_New = (R_V_New - (1666.667));
 36810  000186  C0F7  F02D         	movff	_R_V_New,i2___ftadd@f1
 36811  00018A  C0F8  F02E         	movff	_R_V_New+1,i2___ftadd@f1+1
 36812  00018E  C0F9  F02F         	movff	_R_V_New+2,i2___ftadd@f1+2
 36813  000192  0E55               	movlw	85
 36814  000194  6E30               	movwf	i2___ftadd@f2,c
 36815  000196  0ED0               	movlw	208
 36816  000198  6E31               	movwf	i2___ftadd@f2+1,c
 36817  00019A  0EC4               	movlw	196
 36818  00019C  6E32               	movwf	i2___ftadd@f2+2,c
 36819  00019E  EC24  F0BA         	call	i2___ftadd	;wreg free
 36820  0001A2  C02D  F0FA         	movff	?i2___ftadd,_Rcurr_V_New
 36821  0001A6  C02E  F0FB         	movff	?i2___ftadd+1,_Rcurr_V_New+1
 36822  0001AA  C02F  F0FC         	movff	?i2___ftadd+2,_Rcurr_V_New+2
 36823  0001AE                     i2l19364:
 36824                           
 36825                           ;ISR.c: 68: }
 36826                           ;ISR.c: 70: if(CCP4IF)
 36827  0001AE  A2B7               	btfss	4023,1,c	;volatile
 36828  0001B0  D02A               	goto	i2l19378
 36829                           
 36830                           ;ISR.c: 71: {
 36831                           ;ISR.c: 72: CCP4IF = 0;
 36832  0001B2  92B7               	bcf	4023,1,c	;volatile
 36833                           
 36834                           ;ISR.c: 73: CCP4IE = 1;
 36835  0001B4  82B6               	bsf	4022,1,c	;volatile
 36836                           
 36837                           ;ISR.c: 74: Y_PF_Flag = 1;
 36838  0001B6  0E01               	movlw	1
 36839  0001B8  0101               	movlb	1	; () banked
 36840  0001BA  6F9B               	movwf	_Y_PF_Flag& (0+255),b
 36841                           
 36842                           ; BSR set to: 1
 36843                           ;ISR.c: 75: Ycurr_Old = Ycurr_New;
 36844  0001BC  C1A7  F675         	movff	_Ycurr_New,_Ycurr_Old
 36845  0001C0  C1A8  F676         	movff	_Ycurr_New+1,_Ycurr_Old+1
 36846  0001C4  C1A9  F677         	movff	_Ycurr_New+2,_Ycurr_Old+2
 36847                           
 36848                           ; BSR set to: 1
 36849                           ;ISR.c: 76: Ycurr_New = ((CCPR4H << 8) | CCPR4L);
 36850  0001C8  5078               	movf	3960,w,c	;volatile
 36851  0001CA  CF79 F039          	movff	3961,??_ISR	;volatile
 36852  0001CE  6A3A               	clrf	(??_ISR+1)& (0+255),c
 36853  0001D0  C039  F03A         	movff	??_ISR,??_ISR+1
 36854  0001D4  6A39               	clrf	??_ISR,c
 36855  0001D6  1039               	iorwf	??_ISR,w,c
 36856  0001D8  6E2D               	movwf	___awtoft@c,c
 36857  0001DA  503A               	movf	??_ISR+1,w,c
 36858  0001DC  6E2E               	movwf	___awtoft@c+1,c
 36859  0001DE  EC67  F0D6         	call	___awtoft	;wreg free
 36860  0001E2  C02D  F1A7         	movff	?___awtoft,_Ycurr_New
 36861  0001E6  C02E  F1A8         	movff	?___awtoft+1,_Ycurr_New+1
 36862  0001EA  C02F  F1A9         	movff	?___awtoft+2,_Ycurr_New+2
 36863                           
 36864                           ;ISR.c: 77: Ycurr_V_Old = R_V_Old;
 36865  0001EE  C0D0  F278         	movff	_R_V_Old,_Ycurr_V_Old
 36866  0001F2  C0D1  F279         	movff	_R_V_Old+1,_Ycurr_V_Old+1
 36867  0001F6  C0D2  F27A         	movff	_R_V_Old+2,_Ycurr_V_Old+2
 36868                           
 36869                           ;ISR.c: 78: Ycurr_V_New = R_V_New;
 36870  0001FA  C0F7  F0FD         	movff	_R_V_New,_Ycurr_V_New
 36871  0001FE  C0F8  F0FE         	movff	_R_V_New+1,_Ycurr_V_New+1
 36872  000202  C0F9  F0FF         	movff	_R_V_New+2,_Ycurr_V_New+2
 36873  000206                     i2l19378:
 36874                           
 36875                           ;ISR.c: 79: }
 36876                           ;ISR.c: 81: if(CCP5IF)
 36877  000206  A4B7               	btfss	4023,2,c	;volatile
 36878  000208  D046               	goto	i2l19392
 36879                           
 36880                           ;ISR.c: 82: {
 36881                           ;ISR.c: 83: CCP5IF = 0;
 36882  00020A  94B7               	bcf	4023,2,c	;volatile
 36883                           
 36884                           ;ISR.c: 84: CCP5IE = 1;
 36885  00020C  84B6               	bsf	4022,2,c	;volatile
 36886                           
 36887                           ;ISR.c: 85: B_PF_Flag = 1;
 36888  00020E  0E01               	movlw	1
 36889  000210  0101               	movlb	1	; () banked
 36890  000212  6F4C               	movwf	_B_PF_Flag& (0+255),b
 36891                           
 36892                           ; BSR set to: 1
 36893                           ;ISR.c: 86: Bcurr_Old = Bcurr_New;
 36894  000214  C19E  F645         	movff	_Bcurr_New,_Bcurr_Old
 36895  000218  C19F  F646         	movff	_Bcurr_New+1,_Bcurr_Old+1
 36896  00021C  C1A0  F647         	movff	_Bcurr_New+2,_Bcurr_Old+2
 36897                           
 36898                           ; BSR set to: 1
 36899                           ;ISR.c: 87: Bcurr_New = ((CCPR5H << 8) | CCPR5L);
 36900  000220  5075               	movf	3957,w,c	;volatile
 36901  000222  CF76 F039          	movff	3958,??_ISR	;volatile
 36902  000226  6A3A               	clrf	(??_ISR+1)& (0+255),c
 36903  000228  C039  F03A         	movff	??_ISR,??_ISR+1
 36904  00022C  6A39               	clrf	??_ISR,c
 36905  00022E  1039               	iorwf	??_ISR,w,c
 36906  000230  6E2D               	movwf	___awtoft@c,c
 36907  000232  503A               	movf	??_ISR+1,w,c
 36908  000234  6E2E               	movwf	___awtoft@c+1,c
 36909  000236  EC67  F0D6         	call	___awtoft	;wreg free
 36910  00023A  C02D  F19E         	movff	?___awtoft,_Bcurr_New
 36911  00023E  C02E  F19F         	movff	?___awtoft+1,_Bcurr_New+1
 36912  000242  C02F  F1A0         	movff	?___awtoft+2,_Bcurr_New+2
 36913                           
 36914                           ;ISR.c: 88: Bcurr_V_Old = (R_V_Old + (1666.667));
 36915  000246  C0D0  F02D         	movff	_R_V_Old,i2___ftadd@f1
 36916  00024A  C0D1  F02E         	movff	_R_V_Old+1,i2___ftadd@f1+1
 36917  00024E  C0D2  F02F         	movff	_R_V_Old+2,i2___ftadd@f1+2
 36918  000252  0E55               	movlw	85
 36919  000254  6E30               	movwf	i2___ftadd@f2,c
 36920  000256  0ED0               	movlw	208
 36921  000258  6E31               	movwf	i2___ftadd@f2+1,c
 36922  00025A  0E44               	movlw	68
 36923  00025C  6E32               	movwf	i2___ftadd@f2+2,c
 36924  00025E  EC24  F0BA         	call	i2___ftadd	;wreg free
 36925  000262  C02D  F20C         	movff	?i2___ftadd,_Bcurr_V_Old
 36926  000266  C02E  F20D         	movff	?i2___ftadd+1,_Bcurr_V_Old+1
 36927  00026A  C02F  F20E         	movff	?i2___ftadd+2,_Bcurr_V_Old+2
 36928                           
 36929                           ;ISR.c: 89: Bcurr_V_New = (R_V_New + (1666.667));
 36930  00026E  C0F7  F02D         	movff	_R_V_New,i2___ftadd@f1
 36931  000272  C0F8  F02E         	movff	_R_V_New+1,i2___ftadd@f1+1
 36932  000276  C0F9  F02F         	movff	_R_V_New+2,i2___ftadd@f1+2
 36933  00027A  0E55               	movlw	85
 36934  00027C  6E30               	movwf	i2___ftadd@f2,c
 36935  00027E  0ED0               	movlw	208
 36936  000280  6E31               	movwf	i2___ftadd@f2+1,c
 36937  000282  0E44               	movlw	68
 36938  000284  6E32               	movwf	i2___ftadd@f2+2,c
 36939  000286  EC24  F0BA         	call	i2___ftadd	;wreg free
 36940  00028A  C02D  F0F4         	movff	?i2___ftadd,_Bcurr_V_New
 36941  00028E  C02E  F0F5         	movff	?i2___ftadd+1,_Bcurr_V_New+1
 36942  000292  C02F  F0F6         	movff	?i2___ftadd+2,_Bcurr_V_New+2
 36943  000296                     i2l19392:
 36944                           
 36945                           ;ISR.c: 90: }
 36946                           ;ISR.c: 92: if(TMR1IF)
 36947  000296  A09E               	btfss	3998,0,c	;volatile
 36948  000298  D01C               	goto	i2l19400
 36949                           
 36950                           ;ISR.c: 93: {
 36951                           ;ISR.c: 94: TMR1IF = 0;
 36952  00029A  909E               	bcf	3998,0,c	;volatile
 36953                           
 36954                           ;ISR.c: 95: Gi_Timer1_OF_counter++;
 36955  00029C  0102               	movlb	2	; () banked
 36956  00029E  4B92               	infsnz	_Gi_Timer1_OF_counter& (0+255),f,b
 36957  0002A0  2B93               	incf	(_Gi_Timer1_OF_counter+1)& (0+255),f,b
 36958                           
 36959                           ;ISR.c: 96: Timer1_OF_counter_Turbine++;
 36960  0002A2  0103               	movlb	3	; () banked
 36961  0002A4  4BF3               	infsnz	_Timer1_OF_counter_Turbine& (0+255),f,b
 36962  0002A6  2BF4               	incf	(_Timer1_OF_counter_Turbine+1)& (0+255),f,b
 36963                           
 36964                           ;ISR.c: 98: Timer1_OF_counter_Generator++;
 36965  0002A8  0103               	movlb	3	; () banked
 36966  0002AA  4BF1               	infsnz	_Timer1_OF_counter_Generator& (0+255),f,b
 36967  0002AC  2BF2               	incf	(_Timer1_OF_counter_Generator+1)& (0+255),f,b
 36968                           
 36969                           ;ISR.c: 99: Gi_Timer1_OF_counter_Generator_Temp++;
 36970  0002AE  0103               	movlb	3	; () banked
 36971  0002B0  4BE7               	infsnz	_Gi_Timer1_OF_counter_Generator_Temp& (0+255),f,b
 36972  0002B2  2BE8               	incf	(_Gi_Timer1_OF_counter_Generator_Temp+1)& (0+255),f,b
 36973                           
 36974                           ;ISR.c: 101: Timer1_OF_counter_Wind++;
 36975  0002B4  0103               	movlb	3	; () banked
 36976  0002B6  4BF5               	infsnz	_Timer1_OF_counter_Wind& (0+255),f,b
 36977  0002B8  2BF6               	incf	(_Timer1_OF_counter_Wind+1)& (0+255),f,b
 36978                           
 36979                           ;ISR.c: 102: Timer1_OF_counter_Wind_temp++;
 36980  0002BA  0103               	movlb	3	; () banked
 36981  0002BC  4BFB               	infsnz	_Timer1_OF_counter_Wind_temp& (0+255),f,b
 36982  0002BE  2BFC               	incf	(_Timer1_OF_counter_Wind_temp+1)& (0+255),f,b
 36983                           
 36984                           ;ISR.c: 104: Timer1_OF_counter_Wind_2++;
 36985  0002C0  0103               	movlb	3	; () banked
 36986  0002C2  4BF7               	infsnz	_Timer1_OF_counter_Wind_2& (0+255),f,b
 36987  0002C4  2BF8               	incf	(_Timer1_OF_counter_Wind_2+1)& (0+255),f,b
 36988                           
 36989                           ;ISR.c: 105: Timer1_OF_counter_Wind_2_temp++;
 36990  0002C6  0103               	movlb	3	; () banked
 36991  0002C8  4BF9               	infsnz	_Timer1_OF_counter_Wind_2_temp& (0+255),f,b
 36992  0002CA  2BFA               	incf	(_Timer1_OF_counter_Wind_2_temp+1)& (0+255),f,b
 36993                           
 36994                           ; BSR set to: 3
 36995                           ;ISR.c: 107: Timer1_interrupt_flag = 1;
 36996  0002CC  0E01               	movlw	1
 36997  0002CE  0101               	movlb	1	; () banked
 36998  0002D0  6F86               	movwf	_Timer1_interrupt_flag& (0+255),b
 36999  0002D2                     i2l19400:
 37000                           
 37001                           ;ISR.c: 109: }
 37002                           ;ISR.c: 111: if(CCP7IF)
 37003  0002D2  A8B7               	btfss	4023,4,c	;volatile
 37004  0002D4  D01B               	goto	i2l19412
 37005                           
 37006                           ;ISR.c: 112: {
 37007                           ;ISR.c: 113: CCP7IF = 0;
 37008  0002D6  98B7               	bcf	4023,4,c	;volatile
 37009                           
 37010                           ;ISR.c: 114: TRPM_Cap_Old = TRPM_Cap_New;
 37011  0002D8  C130  F132         	movff	_TRPM_Cap_New,_TRPM_Cap_Old
 37012  0002DC  C131  F133         	movff	_TRPM_Cap_New+1,_TRPM_Cap_Old+1
 37013                           
 37014                           ;ISR.c: 115: TRPM_Cap_New = (256*CCPR7H)+CCPR7L;
 37015  0002E0  5070               	movf	3952,w,c	;volatile
 37016  0002E2  6E3A               	movwf	(??_ISR+1)& (0+255),c
 37017  0002E4  6A39               	clrf	??_ISR& (0+255),c
 37018  0002E6  506F               	movf	3951,w,c	;volatile
 37019  0002E8  2439               	addwf	??_ISR,w,c
 37020  0002EA  0101               	movlb	1	; () banked
 37021  0002EC  6F30               	movwf	_TRPM_Cap_New& (0+255),b
 37022  0002EE  0E00               	movlw	0
 37023  0002F0  203A               	addwfc	??_ISR+1,w,c
 37024  0002F2  0101               	movlb	1	; () banked
 37025  0002F4  6F31               	movwf	(_TRPM_Cap_New+1)& (0+255),b
 37026                           
 37027                           ; BSR set to: 1
 37028                           ;ISR.c: 116: Timer1_OF_counter_Old = Timer1_OF_counter_New;
 37029  0002F6  C136  F2A0         	movff	_Timer1_OF_counter_New,_Timer1_OF_counter_Old
 37030  0002FA  C137  F2A1         	movff	_Timer1_OF_counter_New+1,_Timer1_OF_counter_Old+1
 37031                           
 37032                           ; BSR set to: 1
 37033                           ;ISR.c: 117: Timer1_OF_counter_New = Gi_Timer1_OF_counter;
 37034  0002FE  C292  F136         	movff	_Gi_Timer1_OF_counter,_Timer1_OF_counter_New
 37035  000302  C293  F137         	movff	_Gi_Timer1_OF_counter+1,_Timer1_OF_counter_New+1
 37036                           
 37037                           ; BSR set to: 1
 37038                           ;ISR.c: 118: TRPM_Cal = 1;
 37039  000306  0E01               	movlw	1
 37040  000308  0100               	movlb	0	; () banked
 37041  00030A  6FEC               	movwf	_TRPM_Cal& (0+255),b
 37042  00030C                     i2l19412:
 37043                           
 37044                           ;ISR.c: 120: }
 37045                           ;ISR.c: 121: if(CCP8IF)
 37046  00030C  AAB7               	btfss	4023,5,c	;volatile
 37047  00030E  D020               	goto	i2l19424
 37048                           
 37049                           ;ISR.c: 122: {
 37050                           ;ISR.c: 123: CCP8IF = 0;
 37051  000310  9AB7               	bcf	4023,5,c	;volatile
 37052                           
 37053                           ;ISR.c: 124: GRPM_Cap_Old = GRPM_Cap_New;
 37054  000312  C122  F124         	movff	_GRPM_Cap_New,_GRPM_Cap_Old
 37055  000316  C123  F125         	movff	_GRPM_Cap_New+1,_GRPM_Cap_Old+1
 37056                           
 37057                           ;ISR.c: 125: GRPM_Cap_New = ((256*CCPR8H)+CCPR8L);
 37058  00031A  010F               	movlb	15	; () banked
 37059  00031C  5148               	movf	72,w,b	;volatile
 37060  00031E  6E3A               	movwf	(??_ISR+1)& (0+255),c
 37061  000320  6A39               	clrf	??_ISR& (0+255),c
 37062  000322  010F               	movlb	15	; () banked
 37063  000324  5147               	movf	71,w,b	;volatile
 37064  000326  2439               	addwf	??_ISR,w,c
 37065  000328  0101               	movlb	1	; () banked
 37066  00032A  6F22               	movwf	_GRPM_Cap_New& (0+255),b
 37067  00032C  010F               	movlb	15	; () banked
 37068  00032E  0E00               	movlw	0
 37069  000330  203A               	addwfc	??_ISR+1,w,c
 37070  000332  0101               	movlb	1	; () banked
 37071  000334  6F23               	movwf	(_GRPM_Cap_New+1)& (0+255),b
 37072                           
 37073                           ; BSR set to: 1
 37074                           ;ISR.c: 126: Timer1_OF_counter_Generator_Old = Timer1_OF_counter_Generator_New;
 37075  000336  C134  F29E         	movff	_Timer1_OF_counter_Generator_New,_Timer1_OF_counter_Generator_Old
 37076  00033A  C135  F29F         	movff	_Timer1_OF_counter_Generator_New+1,_Timer1_OF_counter_Generator_Old+1
 37077                           
 37078                           ; BSR set to: 1
 37079                           ;ISR.c: 127: Timer1_OF_counter_Generator_New = Gi_Timer1_OF_counter_Generator_Temp;
 37080  00033E  C3E7  F134         	movff	_Gi_Timer1_OF_counter_Generator_Temp,_Timer1_OF_counter_Generator_New
 37081  000342  C3E8  F135         	movff	_Gi_Timer1_OF_counter_Generator_Temp+1,_Timer1_OF_counter_Generator_New+1
 37082                           
 37083                           ; BSR set to: 1
 37084                           ;ISR.c: 128: GRPM_Cap = 1;
 37085  000346  0E00               	movlw	0
 37086  000348  0102               	movlb	2	; () banked
 37087  00034A  6F85               	movwf	(_GRPM_Cap+1)& (0+255),b
 37088  00034C  0E01               	movlw	1
 37089  00034E  6F84               	movwf	_GRPM_Cap& (0+255),b
 37090  000350                     i2l19424:
 37091                           
 37092                           ;ISR.c: 129: }
 37093                           ;ISR.c: 130: if(CCP10IF)
 37094  000350  AEB7               	btfss	4023,7,c	;volatile
 37095  000352  D020               	goto	i2l19436
 37096                           
 37097                           ;ISR.c: 131: {
 37098                           ;ISR.c: 132: CCP10IF = 0;
 37099  000354  9EB7               	bcf	4023,7,c	;volatile
 37100                           
 37101                           ;ISR.c: 133: Wind_Cap_Old_2 = Wind_Cap_New_2;
 37102  000356  C144  F148         	movff	_Wind_Cap_New_2,_Wind_Cap_Old_2
 37103  00035A  C145  F149         	movff	_Wind_Cap_New_2+1,_Wind_Cap_Old_2+1
 37104                           
 37105                           ;ISR.c: 134: Wind_Cap_New_2 = (256*CCPR10H)+CCPR10L;
 37106  00035E  010F               	movlb	15	; () banked
 37107  000360  5142               	movf	66,w,b	;volatile
 37108  000362  6E3A               	movwf	(??_ISR+1)& (0+255),c
 37109  000364  6A39               	clrf	??_ISR& (0+255),c
 37110  000366  010F               	movlb	15	; () banked
 37111  000368  5141               	movf	65,w,b	;volatile
 37112  00036A  2439               	addwf	??_ISR,w,c
 37113  00036C  0101               	movlb	1	; () banked
 37114  00036E  6F44               	movwf	_Wind_Cap_New_2& (0+255),b
 37115  000370  010F               	movlb	15	; () banked
 37116  000372  0E00               	movlw	0
 37117  000374  203A               	addwfc	??_ISR+1,w,c
 37118  000376  0101               	movlb	1	; () banked
 37119  000378  6F45               	movwf	(_Wind_Cap_New_2+1)& (0+255),b
 37120                           
 37121                           ; BSR set to: 1
 37122                           ;ISR.c: 135: Timer1_OF_counter_Wind_2_temp_Old = Timer1_OF_counter_Wind_2_temp_New;
 37123  00037A  C138  F2A2         	movff	_Timer1_OF_counter_Wind_2_temp_New,_Timer1_OF_counter_Wind_2_temp_Old
 37124  00037E  C139  F2A3         	movff	_Timer1_OF_counter_Wind_2_temp_New+1,_Timer1_OF_counter_Wind_2_temp_Old+1
 37125                           
 37126                           ; BSR set to: 1
 37127                           ;ISR.c: 136: Timer1_OF_counter_Wind_2_temp_New = Timer1_OF_counter_Wind_2_temp;
 37128  000382  C3F9  F138         	movff	_Timer1_OF_counter_Wind_2_temp,_Timer1_OF_counter_Wind_2_temp_New
 37129  000386  C3FA  F139         	movff	_Timer1_OF_counter_Wind_2_temp+1,_Timer1_OF_counter_Wind_2_temp_New+1
 37130                           
 37131                           ; BSR set to: 1
 37132                           ;ISR.c: 137: Wind_Cap_2 = 1;
 37133  00038A  0E00               	movlw	0
 37134  00038C  0102               	movlb	2	; () banked
 37135  00038E  6FAF               	movwf	(_Wind_Cap_2+1)& (0+255),b
 37136  000390  0E01               	movlw	1
 37137  000392  6FAE               	movwf	_Wind_Cap_2& (0+255),b
 37138  000394                     i2l19436:
 37139                           
 37140                           ;ISR.c: 138: }
 37141                           ;ISR.c: 139: if(CCP6IF)
 37142  000394  A6B7               	btfss	4023,3,c	;volatile
 37143  000396  D01D               	goto	i2l19448
 37144                           
 37145                           ;ISR.c: 140: {
 37146                           ;ISR.c: 141: CCP6IF = 0;
 37147  000398  96B7               	bcf	4023,3,c	;volatile
 37148                           
 37149                           ;ISR.c: 142: Wind_Cap_Old = Wind_Cap_New;
 37150  00039A  C142  F146         	movff	_Wind_Cap_New,_Wind_Cap_Old
 37151  00039E  C143  F147         	movff	_Wind_Cap_New+1,_Wind_Cap_Old+1
 37152                           
 37153                           ;ISR.c: 143: Wind_Cap_New = ((256*CCPR6H)+CCPR6L);
 37154  0003A2  5073               	movf	3955,w,c	;volatile
 37155  0003A4  6E3A               	movwf	(??_ISR+1)& (0+255),c
 37156  0003A6  6A39               	clrf	??_ISR& (0+255),c
 37157  0003A8  5072               	movf	3954,w,c	;volatile
 37158  0003AA  2439               	addwf	??_ISR,w,c
 37159  0003AC  0101               	movlb	1	; () banked
 37160  0003AE  6F42               	movwf	_Wind_Cap_New& (0+255),b
 37161  0003B0  0E00               	movlw	0
 37162  0003B2  203A               	addwfc	??_ISR+1,w,c
 37163  0003B4  0101               	movlb	1	; () banked
 37164  0003B6  6F43               	movwf	(_Wind_Cap_New+1)& (0+255),b
 37165                           
 37166                           ; BSR set to: 1
 37167                           ;ISR.c: 144: Timer1_OF_counter_Wind_temp_Old = Timer1_OF_counter_Wind_temp_New;
 37168  0003B8  C13A  F2A4         	movff	_Timer1_OF_counter_Wind_temp_New,_Timer1_OF_counter_Wind_temp_Old
 37169  0003BC  C13B  F2A5         	movff	_Timer1_OF_counter_Wind_temp_New+1,_Timer1_OF_counter_Wind_temp_Old+1
 37170                           
 37171                           ; BSR set to: 1
 37172                           ;ISR.c: 145: Timer1_OF_counter_Wind_temp_New = Timer1_OF_counter_Wind_temp;
 37173  0003C0  C3FB  F13A         	movff	_Timer1_OF_counter_Wind_temp,_Timer1_OF_counter_Wind_temp_New
 37174  0003C4  C3FC  F13B         	movff	_Timer1_OF_counter_Wind_temp+1,_Timer1_OF_counter_Wind_temp_New+1
 37175                           
 37176                           ; BSR set to: 1
 37177                           ;ISR.c: 146: Wind_Cap = 1;
 37178  0003C8  0E00               	movlw	0
 37179  0003CA  0102               	movlb	2	; () banked
 37180  0003CC  6FAD               	movwf	(_Wind_Cap+1)& (0+255),b
 37181  0003CE  0E01               	movlw	1
 37182  0003D0  6FAC               	movwf	_Wind_Cap& (0+255),b
 37183  0003D2                     i2l19448:
 37184                           
 37185                           ;ISR.c: 147: }
 37186                           ;ISR.c: 149: if(PIR3bits.RC2IF)
 37187  0003D2  AAA4               	btfss	4004,5,c	;volatile
 37188  0003D4  D02A               	goto	i2l4552
 37189                           
 37190                           ;ISR.c: 150: {
 37191                           ;ISR.c: 151: if(RCSTA2bits.OERR==1)
 37192  0003D6  010F               	movlb	15	; () banked
 37193  0003D8  A322               	btfss	34,1,b	;volatile
 37194  0003DA  D004               	goto	i2l19454
 37195                           
 37196                           ; BSR set to: 15
 37197                           ;ISR.c: 152: {
 37198                           ;ISR.c: 153: RCSTA2bits.CREN=0;
 37199  0003DC  010F               	movlb	15	; () banked
 37200  0003DE  9922               	bcf	34,4,b	;volatile
 37201                           
 37202                           ;ISR.c: 154: RCSTA2bits.CREN=1;
 37203  0003E0  010F               	movlb	15	; () banked
 37204  0003E2  8922               	bsf	34,4,b	;volatile
 37205  0003E4                     i2l19454:
 37206                           
 37207                           ; BSR set to: 15
 37208                           ;ISR.c: 155: }
 37209                           ;ISR.c: 156: if(RS485_Data_Flag == 1)
 37210  0003E4  0101               	movlb	1	; () banked
 37211  0003E6  0577               	decf	_RS485_Data_Flag& (0+255),w,b
 37212  0003E8  A4D8               	btfss	status,2,c
 37213  0003EA  D01E               	goto	i2l19464
 37214                           
 37215                           ; BSR set to: 1
 37216                           ;ISR.c: 157: {
 37217                           ;ISR.c: 158: Data_1[counter_1] = RCREG2;
 37218  0003EC  010F               	movlb	15	; () banked
 37219  0003EE  511D               	movf	29,w,b	;volatile
 37220  0003F0  6E39               	movwf	??_ISR& (0+255),c
 37221  0003F2  6A3A               	clrf	(??_ISR+1)& (0+255),c
 37222  0003F4  0100               	movlb	0	; () banked
 37223  0003F6  51F3               	movf	_counter_1& (0+255),w,b
 37224  0003F8  0D02               	mullw	2
 37225  0003FA  0E00               	movlw	low _Data_1
 37226  0003FC  24F3               	addwf	prodl,w,c
 37227  0003FE  6ED9               	movwf	fsr2l,c
 37228  000400  0E05               	movlw	high _Data_1
 37229  000402  20F4               	addwfc	prodh,w,c
 37230  000404  6EDA               	movwf	fsr2h,c
 37231  000406  C039  FFDE         	movff	??_ISR,postinc2
 37232  00040A  C03A  FFDD         	movff	??_ISR+1,postdec2
 37233                           
 37234                           ; BSR set to: 0
 37235                           ;ISR.c: 159: if(Data_1[0] == 0x20)
 37236  00040E  0E20               	movlw	32
 37237  000410  0105               	movlb	5	; () banked
 37238  000412  1900               	xorwf	_Data_1& (0+255),w,b
 37239  000414  0105               	movlb	5	; () banked
 37240  000416  1101               	iorwf	(_Data_1+1)& (0+255),w,b
 37241  000418  A4D8               	btfss	status,2,c
 37242  00041A  D006               	goto	i2l19464
 37243                           
 37244                           ; BSR set to: 5
 37245                           ;ISR.c: 160: {
 37246                           ;ISR.c: 161: if(counter_1 < 10)
 37247  00041C  0E0A               	movlw	10
 37248  00041E  0100               	movlb	0	; () banked
 37249  000420  61F3               	cpfslt	_counter_1& (0+255),b
 37250  000422  D002               	goto	i2l19464
 37251                           
 37252                           ; BSR set to: 0
 37253                           ;ISR.c: 162: {
 37254                           ;ISR.c: 163: counter_1++;
 37255  000424  0100               	movlb	0	; () banked
 37256  000426  2BF3               	incf	_counter_1& (0+255),f,b
 37257  000428                     i2l19464:
 37258                           
 37259                           ;ISR.c: 164: }
 37260                           ;ISR.c: 165: }
 37261                           ;ISR.c: 166: }
 37262                           ;ISR.c: 167: PIR3bits.RC2IF = 0;
 37263  000428  9AA4               	bcf	4004,5,c	;volatile
 37264  00042A                     i2l4552:
 37265  00042A  C048  FFF5         	movff	??_ISR+15,tablat
 37266  00042E  C047  FFF8         	movff	??_ISR+14,tblptru
 37267  000432  C046  FFF7         	movff	??_ISR+13,tblptrh
 37268  000436  C045  FFF6         	movff	??_ISR+12,tblptrl
 37269  00043A  C044  FFF4         	movff	??_ISR+11,prodh
 37270  00043E  C043  FFF3         	movff	??_ISR+10,prodl
 37271  000442  C042  FFDA         	movff	??_ISR+9,fsr2h
 37272  000446  C041  FFD9         	movff	??_ISR+8,fsr2l
 37273  00044A  C040  FFE2         	movff	??_ISR+7,fsr1h
 37274  00044E  C03F  FFE1         	movff	??_ISR+6,fsr1l
 37275  000452  C03E  FFEA         	movff	??_ISR+5,fsr0h
 37276  000456  C03D  FFE9         	movff	??_ISR+4,fsr0l
 37277  00045A  C03C  FFFB         	movff	??_ISR+3,pclatu
 37278  00045E  C03B  FFFA         	movff	??_ISR+2,pclath
 37279  000462  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 37280  000464  0011               	retfie		f
 37281  000466                     __end_of_ISR:
 37282                           	opt stack 0
 37283                           pclatu	equ	0xFFB
 37284                           pclath	equ	0xFFA
 37285                           tblptru	equ	0xFF8
 37286                           tblptrh	equ	0xFF7
 37287                           tblptrl	equ	0xFF6
 37288                           tablat	equ	0xFF5
 37289                           prodh	equ	0xFF4
 37290                           prodl	equ	0xFF3
 37291                           intcon	equ	0xFF2
 37292                           postinc0	equ	0xFEE
 37293                           fsr0h	equ	0xFEA
 37294                           fsr0l	equ	0xFE9
 37295                           wreg	equ	0xFE8
 37296                           postdec1	equ	0xFE5
 37297                           fsr1h	equ	0xFE2
 37298                           fsr1l	equ	0xFE1
 37299                           indf2	equ	0xFDF
 37300                           postinc2	equ	0xFDE
 37301                           postdec2	equ	0xFDD
 37302                           fsr2h	equ	0xFDA
 37303                           fsr2l	equ	0xFD9
 37304                           status	equ	0xFD8
 37305                           
 37306 ;; *************** function i2___ftadd *****************
 37307 ;; Defined at:
 37308 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 37309 ;; Parameters:    Size  Location     Type
 37310 ;;  f1              3    8[COMRAM] float 
 37311 ;;  f2              3   11[COMRAM] float 
 37312 ;; Auto vars:     Size  Location     Type
 37313 ;;  __ftadd         1   19[COMRAM] unsigned char 
 37314 ;;  __ftadd         1   18[COMRAM] unsigned char 
 37315 ;;  __ftadd         1   17[COMRAM] unsigned char 
 37316 ;; Return value:  Size  Location     Type
 37317 ;;                  3    8[COMRAM] float 
 37318 ;; Registers used:
 37319 ;;		wreg, status,2, status,0, cstack
 37320 ;; Tracked objects:
 37321 ;;		On entry : 0/0
 37322 ;;		On exit  : 0/0
 37323 ;;		Unchanged: 0/0
 37324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37325 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37326 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37327 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37328 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37329 ;;Total ram usage:       12 bytes
 37330 ;; Hardware stack levels used:    1
 37331 ;; Hardware stack levels required when called:    1
 37332 ;; This function calls:
 37333 ;;		i2___ftpack
 37334 ;; This function is called by:
 37335 ;;		_ISR
 37336 ;; This function uses a non-reentrant model
 37337 ;;
 37338                           
 37339                           	psect	text140
 37340  017448                     __ptext140:
 37341                           	opt stack 0
 37342  017448                     i2___ftadd:
 37343                           	opt stack 21
 37344                           
 37345                           ;incstack = 0
 37346  017448  C02F  F033         	movff	i2___ftadd@f1+2,??i2___ftadd
 37347  01744C  6A34               	clrf	(??i2___ftadd+1)& (0+255),c
 37348  01744E  6A35               	clrf	(??i2___ftadd+2)& (0+255),c
 37349  017450  342E               	rlcf	i2___ftadd@f1+1,w,c
 37350  017452  3633               	rlcf	??i2___ftadd& (0+255),f,c
 37351  017454  E301               	bnc	u1206_41
 37352  017456  8034               	bsf	(??i2___ftadd+1)& (0+255),0,c
 37353  017458                     u1206_41:
 37354  017458  5033               	movf	??i2___ftadd,w,c
 37355  01745A  6E38               	movwf	i2___ftadd@exp1,c
 37356  01745C  C032  F033         	movff	i2___ftadd@f2+2,??i2___ftadd
 37357  017460  6A34               	clrf	(??i2___ftadd+1)& (0+255),c
 37358  017462  6A35               	clrf	(??i2___ftadd+2)& (0+255),c
 37359  017464  3431               	rlcf	i2___ftadd@f2+1,w,c
 37360  017466  3633               	rlcf	??i2___ftadd& (0+255),f,c
 37361  017468  E301               	bnc	u1207_41
 37362  01746A  8034               	bsf	(??i2___ftadd+1)& (0+255),0,c
 37363  01746C                     u1207_41:
 37364  01746C  5033               	movf	??i2___ftadd,w,c
 37365  01746E  6E37               	movwf	i2___ftadd@exp2,c
 37366  017470  5038               	movf	i2___ftadd@exp1,w,c
 37367  017472  B4D8               	btfsc	status,2,c
 37368  017474  D00B               	goto	i2l10655
 37369  017476  5037               	movf	i2___ftadd@exp2,w,c
 37370  017478  5C38               	subwf	i2___ftadd@exp1,w,c
 37371  01747A  B0D8               	btfsc	status,0,c
 37372  01747C  D00E               	goto	i2l19082
 37373  01747E  5038               	movf	i2___ftadd@exp1,w,c
 37374  017480  0800               	sublw	0
 37375  017482  2437               	addwf	i2___ftadd@exp2,w,c
 37376  017484  6E33               	movwf	??i2___ftadd& (0+255),c
 37377  017486  0E18               	movlw	24
 37378  017488  6433               	cpfsgt	??i2___ftadd,c
 37379  01748A  D007               	goto	i2l19082
 37380  01748C                     i2l10655:
 37381  01748C  C030  F02D         	movff	i2___ftadd@f2,?i2___ftadd
 37382  017490  C031  F02E         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 37383  017494  C032  F02F         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 37384  017498  0012               	return	
 37385  01749A                     i2l19082:
 37386  01749A  5037               	movf	i2___ftadd@exp2,w,c
 37387  01749C  B4D8               	btfsc	status,2,c
 37388  01749E  D00B               	goto	i2l10659
 37389  0174A0  5038               	movf	i2___ftadd@exp1,w,c
 37390  0174A2  5C37               	subwf	i2___ftadd@exp2,w,c
 37391  0174A4  B0D8               	btfsc	status,0,c
 37392  0174A6  D00E               	goto	i2l19088
 37393  0174A8  5037               	movf	i2___ftadd@exp2,w,c
 37394  0174AA  0800               	sublw	0
 37395  0174AC  2438               	addwf	i2___ftadd@exp1,w,c
 37396  0174AE  6E33               	movwf	??i2___ftadd& (0+255),c
 37397  0174B0  0E18               	movlw	24
 37398  0174B2  6433               	cpfsgt	??i2___ftadd,c
 37399  0174B4  D007               	goto	i2l19088
 37400  0174B6                     i2l10659:
 37401  0174B6  C02D  F02D         	movff	i2___ftadd@f1,?i2___ftadd
 37402  0174BA  C02E  F02E         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 37403  0174BE  C02F  F02F         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 37404  0174C2  0012               	return	
 37405  0174C4                     i2l19088:
 37406  0174C4  0E06               	movlw	6
 37407  0174C6  6E36               	movwf	i2___ftadd@sign,c
 37408  0174C8  BE2F               	btfsc	i2___ftadd@f1+2,7,c
 37409  0174CA  8E36               	bsf	i2___ftadd@sign,7,c
 37410  0174CC  BE32               	btfsc	i2___ftadd@f2+2,7,c
 37411  0174CE  8C36               	bsf	i2___ftadd@sign,6,c
 37412  0174D0  8E2E               	bsf	i2___ftadd@f1+1,7,c
 37413  0174D2  0EFF               	movlw	255
 37414  0174D4  162D               	andwf	i2___ftadd@f1,f,c
 37415  0174D6  0EFF               	movlw	255
 37416  0174D8  162E               	andwf	i2___ftadd@f1+1,f,c
 37417  0174DA  0E00               	movlw	0
 37418  0174DC  162F               	andwf	i2___ftadd@f1+2,f,c
 37419  0174DE  8E31               	bsf	i2___ftadd@f2+1,7,c
 37420  0174E0  0EFF               	movlw	255
 37421  0174E2  1630               	andwf	i2___ftadd@f2,f,c
 37422  0174E4  0EFF               	movlw	255
 37423  0174E6  1631               	andwf	i2___ftadd@f2+1,f,c
 37424  0174E8  0E00               	movlw	0
 37425  0174EA  1632               	andwf	i2___ftadd@f2+2,f,c
 37426  0174EC  5037               	movf	i2___ftadd@exp2,w,c
 37427  0174EE  5C38               	subwf	i2___ftadd@exp1,w,c
 37428  0174F0  B0D8               	btfsc	status,0,c
 37429  0174F2  D01B               	goto	i2l19114
 37430  0174F4                     i2l19104:
 37431  0174F4  90D8               	bcf	status,0,c
 37432  0174F6  3630               	rlcf	i2___ftadd@f2,f,c
 37433  0174F8  3631               	rlcf	i2___ftadd@f2+1,f,c
 37434  0174FA  3632               	rlcf	i2___ftadd@f2+2,f,c
 37435  0174FC  0637               	decf	i2___ftadd@exp2,f,c
 37436  0174FE  5038               	movf	i2___ftadd@exp1,w,c
 37437  017500  1837               	xorwf	i2___ftadd@exp2,w,c
 37438  017502  B4D8               	btfsc	status,2,c
 37439  017504  D00D               	goto	i2l19112
 37440  017506  0636               	decf	i2___ftadd@sign,f,c
 37441  017508  C036  F033         	movff	i2___ftadd@sign,??i2___ftadd
 37442  01750C  0E07               	movlw	7
 37443  01750E  1633               	andwf	??i2___ftadd,f,c
 37444  017510  B4D8               	btfsc	status,2,c
 37445  017512  D006               	goto	i2l19112
 37446  017514  D7EF               	goto	i2l19104
 37447  017516                     i2l19110:
 37448  017516  90D8               	bcf	status,0,c
 37449  017518  322F               	rrcf	i2___ftadd@f1+2,f,c
 37450  01751A  322E               	rrcf	i2___ftadd@f1+1,f,c
 37451  01751C  322D               	rrcf	i2___ftadd@f1,f,c
 37452  01751E  2A38               	incf	i2___ftadd@exp1,f,c
 37453  017520                     i2l19112:
 37454  017520  5037               	movf	i2___ftadd@exp2,w,c
 37455  017522  1838               	xorwf	i2___ftadd@exp1,w,c
 37456  017524  B4D8               	btfsc	status,2,c
 37457  017526  D01F               	goto	i2l10670
 37458  017528  D7F6               	goto	i2l19110
 37459  01752A                     i2l19114:
 37460  01752A  5038               	movf	i2___ftadd@exp1,w,c
 37461  01752C  5C37               	subwf	i2___ftadd@exp2,w,c
 37462  01752E  B0D8               	btfsc	status,0,c
 37463  017530  D01A               	goto	i2l10670
 37464  017532                     i2l19116:
 37465  017532  90D8               	bcf	status,0,c
 37466  017534  362D               	rlcf	i2___ftadd@f1,f,c
 37467  017536  362E               	rlcf	i2___ftadd@f1+1,f,c
 37468  017538  362F               	rlcf	i2___ftadd@f1+2,f,c
 37469  01753A  0638               	decf	i2___ftadd@exp1,f,c
 37470  01753C  5038               	movf	i2___ftadd@exp1,w,c
 37471  01753E  1837               	xorwf	i2___ftadd@exp2,w,c
 37472  017540  B4D8               	btfsc	status,2,c
 37473  017542  D00D               	goto	i2l19124
 37474  017544  0636               	decf	i2___ftadd@sign,f,c
 37475  017546  C036  F033         	movff	i2___ftadd@sign,??i2___ftadd
 37476  01754A  0E07               	movlw	7
 37477  01754C  1633               	andwf	??i2___ftadd,f,c
 37478  01754E  B4D8               	btfsc	status,2,c
 37479  017550  D006               	goto	i2l19124
 37480  017552  D7EF               	goto	i2l19116
 37481  017554                     i2l19122:
 37482  017554  90D8               	bcf	status,0,c
 37483  017556  3232               	rrcf	i2___ftadd@f2+2,f,c
 37484  017558  3231               	rrcf	i2___ftadd@f2+1,f,c
 37485  01755A  3230               	rrcf	i2___ftadd@f2,f,c
 37486  01755C  2A37               	incf	i2___ftadd@exp2,f,c
 37487  01755E                     i2l19124:
 37488  01755E  5037               	movf	i2___ftadd@exp2,w,c
 37489  017560  1838               	xorwf	i2___ftadd@exp1,w,c
 37490  017562  A4D8               	btfss	status,2,c
 37491  017564  D7F7               	goto	i2l19122
 37492  017566                     i2l10670:
 37493  017566  AE36               	btfss	i2___ftadd@sign,7,c
 37494  017568  D00C               	goto	i2l10679
 37495  01756A  0EFF               	movlw	255
 37496  01756C  1A2D               	xorwf	i2___ftadd@f1,f,c
 37497  01756E  0EFF               	movlw	255
 37498  017570  1A2E               	xorwf	i2___ftadd@f1+1,f,c
 37499  017572  0EFF               	movlw	255
 37500  017574  1A2F               	xorwf	i2___ftadd@f1+2,f,c
 37501  017576  0E01               	movlw	1
 37502  017578  262D               	addwf	i2___ftadd@f1,f,c
 37503  01757A  0E00               	movlw	0
 37504  01757C  222E               	addwfc	i2___ftadd@f1+1,f,c
 37505  01757E  0E00               	movlw	0
 37506  017580  222F               	addwfc	i2___ftadd@f1+2,f,c
 37507  017582                     i2l10679:
 37508  017582  AC36               	btfss	i2___ftadd@sign,6,c
 37509  017584  D00C               	goto	i2l19130
 37510  017586  0EFF               	movlw	255
 37511  017588  1A30               	xorwf	i2___ftadd@f2,f,c
 37512  01758A  0EFF               	movlw	255
 37513  01758C  1A31               	xorwf	i2___ftadd@f2+1,f,c
 37514  01758E  0EFF               	movlw	255
 37515  017590  1A32               	xorwf	i2___ftadd@f2+2,f,c
 37516  017592  0E01               	movlw	1
 37517  017594  2630               	addwf	i2___ftadd@f2,f,c
 37518  017596  0E00               	movlw	0
 37519  017598  2231               	addwfc	i2___ftadd@f2+1,f,c
 37520  01759A  0E00               	movlw	0
 37521  01759C  2232               	addwfc	i2___ftadd@f2+2,f,c
 37522  01759E                     i2l19130:
 37523  01759E  0E00               	movlw	0
 37524  0175A0  6E36               	movwf	i2___ftadd@sign,c
 37525  0175A2  502D               	movf	i2___ftadd@f1,w,c
 37526  0175A4  2630               	addwf	i2___ftadd@f2,f,c
 37527  0175A6  502E               	movf	i2___ftadd@f1+1,w,c
 37528  0175A8  2231               	addwfc	i2___ftadd@f2+1,f,c
 37529  0175AA  502F               	movf	i2___ftadd@f1+2,w,c
 37530  0175AC  2232               	addwfc	i2___ftadd@f2+2,f,c
 37531  0175AE  AE32               	btfss	i2___ftadd@f2+2,7,c
 37532  0175B0  D00E               	goto	i2l19140
 37533  0175B2  0EFF               	movlw	255
 37534  0175B4  1A30               	xorwf	i2___ftadd@f2,f,c
 37535  0175B6  0EFF               	movlw	255
 37536  0175B8  1A31               	xorwf	i2___ftadd@f2+1,f,c
 37537  0175BA  0EFF               	movlw	255
 37538  0175BC  1A32               	xorwf	i2___ftadd@f2+2,f,c
 37539  0175BE  0E01               	movlw	1
 37540  0175C0  2630               	addwf	i2___ftadd@f2,f,c
 37541  0175C2  0E00               	movlw	0
 37542  0175C4  2231               	addwfc	i2___ftadd@f2+1,f,c
 37543  0175C6  0E00               	movlw	0
 37544  0175C8  2232               	addwfc	i2___ftadd@f2+2,f,c
 37545  0175CA  0E01               	movlw	1
 37546  0175CC  6E36               	movwf	i2___ftadd@sign,c
 37547  0175CE                     i2l19140:
 37548  0175CE  C030  F025         	movff	i2___ftadd@f2,i2___ftpack@arg
 37549  0175D2  C031  F026         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 37550  0175D6  C032  F027         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 37551  0175DA  C038  F028         	movff	i2___ftadd@exp1,i2___ftpack@exp
 37552  0175DE  C036  F029         	movff	i2___ftadd@sign,i2___ftpack@sign
 37553  0175E2  ECFD  F0CF         	call	i2___ftpack	;wreg free
 37554  0175E6  C025  F02D         	movff	?i2___ftpack,?i2___ftadd
 37555  0175EA  C026  F02E         	movff	?i2___ftpack+1,?i2___ftadd+1
 37556  0175EE  C027  F02F         	movff	?i2___ftpack+2,?i2___ftadd+2
 37557  0175F2  0012               	return	
 37558  0175F4                     __end_ofi2___ftadd:
 37559                           	opt stack 0
 37560                           pclatu	equ	0xFFB
 37561                           pclath	equ	0xFFA
 37562                           tblptru	equ	0xFF8
 37563                           tblptrh	equ	0xFF7
 37564                           tblptrl	equ	0xFF6
 37565                           tablat	equ	0xFF5
 37566                           prodh	equ	0xFF4
 37567                           prodl	equ	0xFF3
 37568                           intcon	equ	0xFF2
 37569                           postinc0	equ	0xFEE
 37570                           fsr0h	equ	0xFEA
 37571                           fsr0l	equ	0xFE9
 37572                           wreg	equ	0xFE8
 37573                           postdec1	equ	0xFE5
 37574                           fsr1h	equ	0xFE2
 37575                           fsr1l	equ	0xFE1
 37576                           indf2	equ	0xFDF
 37577                           postinc2	equ	0xFDE
 37578                           postdec2	equ	0xFDD
 37579                           fsr2h	equ	0xFDA
 37580                           fsr2l	equ	0xFD9
 37581                           status	equ	0xFD8
 37582                           
 37583 ;; *************** function ___awtoft *****************
 37584 ;; Defined at:
 37585 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 37586 ;; Parameters:    Size  Location     Type
 37587 ;;  c               2    8[COMRAM] int 
 37588 ;; Auto vars:     Size  Location     Type
 37589 ;;  sign            1   11[COMRAM] unsigned char 
 37590 ;; Return value:  Size  Location     Type
 37591 ;;                  3    8[COMRAM] float 
 37592 ;; Registers used:
 37593 ;;		wreg, status,2, status,0, cstack
 37594 ;; Tracked objects:
 37595 ;;		On entry : 0/0
 37596 ;;		On exit  : 0/0
 37597 ;;		Unchanged: 0/0
 37598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37599 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37602 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37603 ;;Total ram usage:        4 bytes
 37604 ;; Hardware stack levels used:    1
 37605 ;; Hardware stack levels required when called:    1
 37606 ;; This function calls:
 37607 ;;		i2___ftpack
 37608 ;; This function is called by:
 37609 ;;		_ISR
 37610 ;; This function uses a non-reentrant model
 37611 ;;
 37612                           
 37613                           	psect	text141
 37614  01ACCE                     __ptext141:
 37615                           	opt stack 0
 37616  01ACCE                     ___awtoft:
 37617                           	opt stack 21
 37618                           
 37619                           ;incstack = 0
 37620  01ACCE  0E00               	movlw	0
 37621  01ACD0  6E30               	movwf	___awtoft@sign,c
 37622  01ACD2  AE2E               	btfss	___awtoft@c+1,7,c
 37623  01ACD4  D006               	goto	i2l19070
 37624  01ACD6  6C2D               	negf	___awtoft@c,c
 37625  01ACD8  1E2E               	comf	___awtoft@c+1,f,c
 37626  01ACDA  B0D8               	btfsc	status,0,c
 37627  01ACDC  2A2E               	incf	___awtoft@c+1,f,c
 37628  01ACDE  0E01               	movlw	1
 37629  01ACE0  6E30               	movwf	___awtoft@sign,c
 37630  01ACE2                     i2l19070:
 37631  01ACE2  C02D  F025         	movff	___awtoft@c,i2___ftpack@arg
 37632  01ACE6  C02E  F026         	movff	___awtoft@c+1,i2___ftpack@arg+1
 37633  01ACEA  6A27               	clrf	i2___ftpack@arg+2,c
 37634  01ACEC  0E8E               	movlw	142
 37635  01ACEE  6E28               	movwf	i2___ftpack@exp,c
 37636  01ACF0  C030  F029         	movff	___awtoft@sign,i2___ftpack@sign
 37637  01ACF4  ECFD  F0CF         	call	i2___ftpack	;wreg free
 37638  01ACF8  C025  F02D         	movff	?i2___ftpack,?___awtoft
 37639  01ACFC  C026  F02E         	movff	?i2___ftpack+1,?___awtoft+1
 37640  01AD00  C027  F02F         	movff	?i2___ftpack+2,?___awtoft+2
 37641  01AD04  0012               	return	
 37642  01AD06                     __end_of___awtoft:
 37643                           	opt stack 0
 37644                           pclatu	equ	0xFFB
 37645                           pclath	equ	0xFFA
 37646                           tblptru	equ	0xFF8
 37647                           tblptrh	equ	0xFF7
 37648                           tblptrl	equ	0xFF6
 37649                           tablat	equ	0xFF5
 37650                           prodh	equ	0xFF4
 37651                           prodl	equ	0xFF3
 37652                           intcon	equ	0xFF2
 37653                           postinc0	equ	0xFEE
 37654                           fsr0h	equ	0xFEA
 37655                           fsr0l	equ	0xFE9
 37656                           wreg	equ	0xFE8
 37657                           postdec1	equ	0xFE5
 37658                           fsr1h	equ	0xFE2
 37659                           fsr1l	equ	0xFE1
 37660                           indf2	equ	0xFDF
 37661                           postinc2	equ	0xFDE
 37662                           postdec2	equ	0xFDD
 37663                           fsr2h	equ	0xFDA
 37664                           fsr2l	equ	0xFD9
 37665                           status	equ	0xFD8
 37666                           
 37667 ;; *************** function i2___ftpack *****************
 37668 ;; Defined at:
 37669 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 37670 ;; Parameters:    Size  Location     Type
 37671 ;;  arg             3    0[COMRAM] unsigned um
 37672 ;;  exp             1    3[COMRAM] unsigned char 
 37673 ;;  sign            1    4[COMRAM] unsigned char 
 37674 ;; Auto vars:     Size  Location     Type
 37675 ;;		None
 37676 ;; Return value:  Size  Location     Type
 37677 ;;                  3    0[COMRAM] float 
 37678 ;; Registers used:
 37679 ;;		wreg, status,2, status,0
 37680 ;; Tracked objects:
 37681 ;;		On entry : 0/0
 37682 ;;		On exit  : 0/0
 37683 ;;		Unchanged: 0/0
 37684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37685 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37687 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37688 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37689 ;;Total ram usage:        8 bytes
 37690 ;; Hardware stack levels used:    1
 37691 ;; This function calls:
 37692 ;;		Nothing
 37693 ;; This function is called by:
 37694 ;;		___awtoft
 37695 ;;		i2___ftadd
 37696 ;; This function uses a non-reentrant model
 37697 ;;
 37698                           
 37699                           	psect	text142
 37700  019FFA                     __ptext142:
 37701                           	opt stack 0
 37702  019FFA                     i2___ftpack:
 37703                           	opt stack 21
 37704                           
 37705                           ;incstack = 0
 37706  019FFA  5028               	movf	i2___ftpack@exp,w,c
 37707  019FFC  B4D8               	btfsc	status,2,c
 37708  019FFE  D005               	goto	i2l18140
 37709  01A000  5025               	movf	i2___ftpack@arg,w,c
 37710  01A002  1026               	iorwf	i2___ftpack@arg+1,w,c
 37711  01A004  1027               	iorwf	i2___ftpack@arg+2,w,c
 37712  01A006  A4D8               	btfss	status,2,c
 37713  01A008  D00C               	goto	i2l18146
 37714  01A00A                     i2l18140:
 37715  01A00A  0E00               	movlw	0
 37716  01A00C  6E25               	movwf	?i2___ftpack,c
 37717  01A00E  0E00               	movlw	0
 37718  01A010  6E26               	movwf	?i2___ftpack+1,c
 37719  01A012  0E00               	movlw	0
 37720  01A014  6E27               	movwf	?i2___ftpack+2,c
 37721  01A016  0012               	return	
 37722  01A018                     i2l18144:
 37723  01A018  2A28               	incf	i2___ftpack@exp,f,c
 37724  01A01A  90D8               	bcf	status,0,c
 37725  01A01C  3227               	rrcf	i2___ftpack@arg+2,f,c
 37726  01A01E  3226               	rrcf	i2___ftpack@arg+1,f,c
 37727  01A020  3225               	rrcf	i2___ftpack@arg,f,c
 37728  01A022                     i2l18146:
 37729  01A022  0E00               	movlw	0
 37730  01A024  1425               	andwf	i2___ftpack@arg,w,c
 37731  01A026  6E2A               	movwf	??i2___ftpack& (0+255),c
 37732  01A028  0E00               	movlw	0
 37733  01A02A  1426               	andwf	i2___ftpack@arg+1,w,c
 37734  01A02C  6E2B               	movwf	(??i2___ftpack+1)& (0+255),c
 37735  01A02E  0EFE               	movlw	254
 37736  01A030  1427               	andwf	i2___ftpack@arg+2,w,c
 37737  01A032  6E2C               	movwf	(??i2___ftpack+2)& (0+255),c
 37738  01A034  502A               	movf	??i2___ftpack,w,c
 37739  01A036  102B               	iorwf	??i2___ftpack+1,w,c
 37740  01A038  102C               	iorwf	??i2___ftpack+2,w,c
 37741  01A03A  B4D8               	btfsc	status,2,c
 37742  01A03C  D00C               	goto	i2l18152
 37743  01A03E  D7EC               	goto	i2l18144
 37744  01A040                     i2l18148:
 37745  01A040  2A28               	incf	i2___ftpack@exp,f,c
 37746  01A042  0E01               	movlw	1
 37747  01A044  2625               	addwf	i2___ftpack@arg,f,c
 37748  01A046  0E00               	movlw	0
 37749  01A048  2226               	addwfc	i2___ftpack@arg+1,f,c
 37750  01A04A  0E00               	movlw	0
 37751  01A04C  2227               	addwfc	i2___ftpack@arg+2,f,c
 37752  01A04E  90D8               	bcf	status,0,c
 37753  01A050  3227               	rrcf	i2___ftpack@arg+2,f,c
 37754  01A052  3226               	rrcf	i2___ftpack@arg+1,f,c
 37755  01A054  3225               	rrcf	i2___ftpack@arg,f,c
 37756  01A056                     i2l18152:
 37757  01A056  0E00               	movlw	0
 37758  01A058  1425               	andwf	i2___ftpack@arg,w,c
 37759  01A05A  6E2A               	movwf	??i2___ftpack& (0+255),c
 37760  01A05C  0E00               	movlw	0
 37761  01A05E  1426               	andwf	i2___ftpack@arg+1,w,c
 37762  01A060  6E2B               	movwf	(??i2___ftpack+1)& (0+255),c
 37763  01A062  0EFF               	movlw	255
 37764  01A064  1427               	andwf	i2___ftpack@arg+2,w,c
 37765  01A066  6E2C               	movwf	(??i2___ftpack+2)& (0+255),c
 37766  01A068  502A               	movf	??i2___ftpack,w,c
 37767  01A06A  102B               	iorwf	??i2___ftpack+1,w,c
 37768  01A06C  102C               	iorwf	??i2___ftpack+2,w,c
 37769  01A06E  B4D8               	btfsc	status,2,c
 37770  01A070  D006               	goto	i2l18156
 37771  01A072  D7E6               	goto	i2l18148
 37772  01A074                     i2l18154:
 37773  01A074  0628               	decf	i2___ftpack@exp,f,c
 37774  01A076  90D8               	bcf	status,0,c
 37775  01A078  3625               	rlcf	i2___ftpack@arg,f,c
 37776  01A07A  3626               	rlcf	i2___ftpack@arg+1,f,c
 37777  01A07C  3627               	rlcf	i2___ftpack@arg+2,f,c
 37778  01A07E                     i2l18156:
 37779  01A07E  BE26               	btfsc	i2___ftpack@arg+1,7,c
 37780  01A080  D003               	goto	i2l10632
 37781  01A082  0E02               	movlw	2
 37782  01A084  6028               	cpfslt	i2___ftpack@exp,c
 37783  01A086  D7F6               	goto	i2l18154
 37784  01A088                     i2l10632:
 37785  01A088  A028               	btfss	i2___ftpack@exp,0,c
 37786  01A08A  9E26               	bcf	i2___ftpack@arg+1,7,c
 37787  01A08C  90D8               	bcf	status,0,c
 37788  01A08E  3228               	rrcf	i2___ftpack@exp,f,c
 37789  01A090  5028               	movf	i2___ftpack@exp,w,c
 37790  01A092  1227               	iorwf	i2___ftpack@arg+2,f,c
 37791  01A094  5029               	movf	i2___ftpack@sign,w,c
 37792  01A096  A4D8               	btfss	status,2,c
 37793  01A098  8E27               	bsf	i2___ftpack@arg+2,7,c
 37794  01A09A  C025  F025         	movff	i2___ftpack@arg,?i2___ftpack
 37795  01A09E  C026  F026         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 37796  01A0A2  C027  F027         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 37797  01A0A6  0012               	return	
 37798  01A0A8                     __end_ofi2___ftpack:
 37799                           	opt stack 0
 37800                           pclatu	equ	0xFFB
 37801                           pclath	equ	0xFFA
 37802                           tblptru	equ	0xFF8
 37803                           tblptrh	equ	0xFF7
 37804                           tblptrl	equ	0xFF6
 37805                           tablat	equ	0xFF5
 37806                           prodh	equ	0xFF4
 37807                           prodl	equ	0xFF3
 37808                           intcon	equ	0xFF2
 37809                           postinc0	equ	0xFEE
 37810                           fsr0h	equ	0xFEA
 37811                           fsr0l	equ	0xFE9
 37812                           wreg	equ	0xFE8
 37813                           postdec1	equ	0xFE5
 37814                           fsr1h	equ	0xFE2
 37815                           fsr1l	equ	0xFE1
 37816                           indf2	equ	0xFDF
 37817                           postinc2	equ	0xFDE
 37818                           postdec2	equ	0xFDD
 37819                           fsr2h	equ	0xFDA
 37820                           fsr2l	equ	0xFD9
 37821                           status	equ	0xFD8
 37822                           
 37823 ;; *************** function _PM_Error_Led *****************
 37824 ;; Defined at:
 37825 ;;		line 637 in file "Power_Meter.c"
 37826 ;; Parameters:    Size  Location     Type
 37827 ;;		None
 37828 ;; Auto vars:     Size  Location     Type
 37829 ;;		None
 37830 ;; Return value:  Size  Location     Type
 37831 ;;                  1    wreg      void 
 37832 ;; Registers used:
 37833 ;;		wreg, status,2, status,0, cstack
 37834 ;; Tracked objects:
 37835 ;;		On entry : 0/0
 37836 ;;		On exit  : 0/0
 37837 ;;		Unchanged: 0/0
 37838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37843 ;;Total ram usage:        0 bytes
 37844 ;; Hardware stack levels used:    1
 37845 ;; Hardware stack levels required when called:    1
 37846 ;; This function calls:
 37847 ;;		i2___ftge
 37848 ;; This function is called by:
 37849 ;;		_ISR
 37850 ;; This function uses a non-reentrant model
 37851 ;;
 37852                           
 37853                           	psect	text143
 37854  015244                     __ptext143:
 37855                           	opt stack 0
 37856  015244                     _PM_Error_Led:
 37857                           	opt stack 21
 37858                           
 37859                           ;Power_Meter.c: 639: if ((Phase_Sequence_Ok == 0) || (R_Volt <= (370)) || (Y_Volt <= (37
      +                          0)) ||
 37860                           ;Power_Meter.c: 640: (B_Volt <= (370)) || (R_Volt >= (450)) || (Y_Volt >= (450)) ||
 37861                           ;Power_Meter.c: 641: (B_Volt >= (450)) || (R_Curr >= (12)) || (Y_Curr >= (12)) ||
 37862                           ;Power_Meter.c: 642: (B_Curr >= (12)) || (Frequency <= 47.5) || (Frequency >=52.5) || (K
      +                          W <= (-5.0)) ||
 37863                           ;Power_Meter.c: 643: (KW >= (6.0) ))
 37864                           
 37865                           ;incstack = 0
 37866  015244  501E               	movf	_Phase_Sequence_Ok,w,c
 37867  015246  B4D8               	btfsc	status,2,c
 37868  015248  D0D0               	goto	i2l9295
 37869  01524A  0E00               	movlw	0
 37870  01524C  6E25               	movwf	i2___ftge@ff1,c
 37871  01524E  0EB9               	movlw	185
 37872  015250  6E26               	movwf	i2___ftge@ff1+1,c
 37873  015252  0E43               	movlw	67
 37874  015254  6E27               	movwf	i2___ftge@ff1+2,c
 37875  015256  C007  F028         	movff	_R_Volt,i2___ftge@ff2
 37876  01525A  C008  F029         	movff	_R_Volt+1,i2___ftge@ff2+1
 37877  01525E  C009  F02A         	movff	_R_Volt+2,i2___ftge@ff2+2
 37878  015262  EC2C  F0D2         	call	i2___ftge	;wreg free
 37879  015266  B0D8               	btfsc	status,0,c
 37880  015268  D0C0               	goto	i2l9295
 37881  01526A  0E00               	movlw	0
 37882  01526C  6E25               	movwf	i2___ftge@ff1,c
 37883  01526E  0EB9               	movlw	185
 37884  015270  6E26               	movwf	i2___ftge@ff1+1,c
 37885  015272  0E43               	movlw	67
 37886  015274  6E27               	movwf	i2___ftge@ff1+2,c
 37887  015276  C010  F028         	movff	_Y_Volt,i2___ftge@ff2
 37888  01527A  C011  F029         	movff	_Y_Volt+1,i2___ftge@ff2+1
 37889  01527E  C012  F02A         	movff	_Y_Volt+2,i2___ftge@ff2+2
 37890  015282  EC2C  F0D2         	call	i2___ftge	;wreg free
 37891  015286  B0D8               	btfsc	status,0,c
 37892  015288  D0B0               	goto	i2l9295
 37893  01528A  0E00               	movlw	0
 37894  01528C  6E25               	movwf	i2___ftge@ff1,c
 37895  01528E  0EB9               	movlw	185
 37896  015290  6E26               	movwf	i2___ftge@ff1+1,c
 37897  015292  0E43               	movlw	67
 37898  015294  6E27               	movwf	i2___ftge@ff1+2,c
 37899  015296  C001  F028         	movff	_B_Volt,i2___ftge@ff2
 37900  01529A  C002  F029         	movff	_B_Volt+1,i2___ftge@ff2+1
 37901  01529E  C003  F02A         	movff	_B_Volt+2,i2___ftge@ff2+2
 37902  0152A2  EC2C  F0D2         	call	i2___ftge	;wreg free
 37903  0152A6  B0D8               	btfsc	status,0,c
 37904  0152A8  D0A0               	goto	i2l9295
 37905  0152AA  C007  F025         	movff	_R_Volt,i2___ftge@ff1
 37906  0152AE  C008  F026         	movff	_R_Volt+1,i2___ftge@ff1+1
 37907  0152B2  C009  F027         	movff	_R_Volt+2,i2___ftge@ff1+2
 37908  0152B6  0E00               	movlw	0
 37909  0152B8  6E28               	movwf	i2___ftge@ff2,c
 37910  0152BA  0EE1               	movlw	225
 37911  0152BC  6E29               	movwf	i2___ftge@ff2+1,c
 37912  0152BE  0E43               	movlw	67
 37913  0152C0  6E2A               	movwf	i2___ftge@ff2+2,c
 37914  0152C2  EC2C  F0D2         	call	i2___ftge	;wreg free
 37915  0152C6  B0D8               	btfsc	status,0,c
 37916  0152C8  D090               	goto	i2l9295
 37917  0152CA  C010  F025         	movff	_Y_Volt,i2___ftge@ff1
 37918  0152CE  C011  F026         	movff	_Y_Volt+1,i2___ftge@ff1+1
 37919  0152D2  C012  F027         	movff	_Y_Volt+2,i2___ftge@ff1+2
 37920  0152D6  0E00               	movlw	0
 37921  0152D8  6E28               	movwf	i2___ftge@ff2,c
 37922  0152DA  0EE1               	movlw	225
 37923  0152DC  6E29               	movwf	i2___ftge@ff2+1,c
 37924  0152DE  0E43               	movlw	67
 37925  0152E0  6E2A               	movwf	i2___ftge@ff2+2,c
 37926  0152E2  EC2C  F0D2         	call	i2___ftge	;wreg free
 37927  0152E6  B0D8               	btfsc	status,0,c
 37928  0152E8  D080               	goto	i2l9295
 37929  0152EA  C001  F025         	movff	_B_Volt,i2___ftge@ff1
 37930  0152EE  C002  F026         	movff	_B_Volt+1,i2___ftge@ff1+1
 37931  0152F2  C003  F027         	movff	_B_Volt+2,i2___ftge@ff1+2
 37932  0152F6  0E00               	movlw	0
 37933  0152F8  6E28               	movwf	i2___ftge@ff2,c
 37934  0152FA  0EE1               	movlw	225
 37935  0152FC  6E29               	movwf	i2___ftge@ff2+1,c
 37936  0152FE  0E43               	movlw	67
 37937  015300  6E2A               	movwf	i2___ftge@ff2+2,c
 37938  015302  EC2C  F0D2         	call	i2___ftge	;wreg free
 37939  015306  B0D8               	btfsc	status,0,c
 37940  015308  D070               	goto	i2l9295
 37941  01530A  C0CD  F025         	movff	_R_Curr,i2___ftge@ff1
 37942  01530E  C0CE  F026         	movff	_R_Curr+1,i2___ftge@ff1+1
 37943  015312  C0CF  F027         	movff	_R_Curr+2,i2___ftge@ff1+2
 37944  015316  0E00               	movlw	0
 37945  015318  6E28               	movwf	i2___ftge@ff2,c
 37946  01531A  0E40               	movlw	64
 37947  01531C  6E29               	movwf	i2___ftge@ff2+1,c
 37948  01531E  0E41               	movlw	65
 37949  015320  6E2A               	movwf	i2___ftge@ff2+2,c
 37950  015322  EC2C  F0D2         	call	i2___ftge	;wreg free
 37951  015326  B0D8               	btfsc	status,0,c
 37952  015328  D060               	goto	i2l9295
 37953  01532A  C0D6  F025         	movff	_Y_Curr,i2___ftge@ff1
 37954  01532E  C0D7  F026         	movff	_Y_Curr+1,i2___ftge@ff1+1
 37955  015332  C0D8  F027         	movff	_Y_Curr+2,i2___ftge@ff1+2
 37956  015336  0E00               	movlw	0
 37957  015338  6E28               	movwf	i2___ftge@ff2,c
 37958  01533A  0E40               	movlw	64
 37959  01533C  6E29               	movwf	i2___ftge@ff2+1,c
 37960  01533E  0E41               	movlw	65
 37961  015340  6E2A               	movwf	i2___ftge@ff2+2,c
 37962  015342  EC2C  F0D2         	call	i2___ftge	;wreg free
 37963  015346  B0D8               	btfsc	status,0,c
 37964  015348  D050               	goto	i2l9295
 37965  01534A  C0C4  F025         	movff	_B_Curr,i2___ftge@ff1
 37966  01534E  C0C5  F026         	movff	_B_Curr+1,i2___ftge@ff1+1
 37967  015352  C0C6  F027         	movff	_B_Curr+2,i2___ftge@ff1+2
 37968  015356  0E00               	movlw	0
 37969  015358  6E28               	movwf	i2___ftge@ff2,c
 37970  01535A  0E40               	movlw	64
 37971  01535C  6E29               	movwf	i2___ftge@ff2+1,c
 37972  01535E  0E41               	movlw	65
 37973  015360  6E2A               	movwf	i2___ftge@ff2+2,c
 37974  015362  EC2C  F0D2         	call	i2___ftge	;wreg free
 37975  015366  B0D8               	btfsc	status,0,c
 37976  015368  D040               	goto	i2l9295
 37977  01536A  0E00               	movlw	0
 37978  01536C  6E25               	movwf	i2___ftge@ff1,c
 37979  01536E  0E3E               	movlw	62
 37980  015370  6E26               	movwf	i2___ftge@ff1+1,c
 37981  015372  0E42               	movlw	66
 37982  015374  6E27               	movwf	i2___ftge@ff1+2,c
 37983  015376  C0C7  F028         	movff	_Frequency,i2___ftge@ff2
 37984  01537A  C0C8  F029         	movff	_Frequency+1,i2___ftge@ff2+1
 37985  01537E  C0C9  F02A         	movff	_Frequency+2,i2___ftge@ff2+2
 37986  015382  EC2C  F0D2         	call	i2___ftge	;wreg free
 37987  015386  B0D8               	btfsc	status,0,c
 37988  015388  D030               	goto	i2l9295
 37989  01538A  C0C7  F025         	movff	_Frequency,i2___ftge@ff1
 37990  01538E  C0C8  F026         	movff	_Frequency+1,i2___ftge@ff1+1
 37991  015392  C0C9  F027         	movff	_Frequency+2,i2___ftge@ff1+2
 37992  015396  0E00               	movlw	0
 37993  015398  6E28               	movwf	i2___ftge@ff2,c
 37994  01539A  0E52               	movlw	82
 37995  01539C  6E29               	movwf	i2___ftge@ff2+1,c
 37996  01539E  0E42               	movlw	66
 37997  0153A0  6E2A               	movwf	i2___ftge@ff2+2,c
 37998  0153A2  EC2C  F0D2         	call	i2___ftge	;wreg free
 37999  0153A6  B0D8               	btfsc	status,0,c
 38000  0153A8  D020               	goto	i2l9295
 38001  0153AA  0E00               	movlw	0
 38002  0153AC  6E25               	movwf	i2___ftge@ff1,c
 38003  0153AE  0EA0               	movlw	160
 38004  0153B0  6E26               	movwf	i2___ftge@ff1+1,c
 38005  0153B2  0EC0               	movlw	192
 38006  0153B4  6E27               	movwf	i2___ftge@ff1+2,c
 38007  0153B6  C022  F028         	movff	_KW,i2___ftge@ff2
 38008  0153BA  C023  F029         	movff	_KW+1,i2___ftge@ff2+1
 38009  0153BE  C024  F02A         	movff	_KW+2,i2___ftge@ff2+2
 38010  0153C2  EC2C  F0D2         	call	i2___ftge	;wreg free
 38011  0153C6  B0D8               	btfsc	status,0,c
 38012  0153C8  D010               	goto	i2l9295
 38013  0153CA  C022  F025         	movff	_KW,i2___ftge@ff1
 38014  0153CE  C023  F026         	movff	_KW+1,i2___ftge@ff1+1
 38015  0153D2  C024  F027         	movff	_KW+2,i2___ftge@ff1+2
 38016  0153D6  0E00               	movlw	0
 38017  0153D8  6E28               	movwf	i2___ftge@ff2,c
 38018  0153DA  0EC0               	movlw	192
 38019  0153DC  6E29               	movwf	i2___ftge@ff2+1,c
 38020  0153DE  0E40               	movlw	64
 38021  0153E0  6E2A               	movwf	i2___ftge@ff2+2,c
 38022  0153E2  EC2C  F0D2         	call	i2___ftge	;wreg free
 38023  0153E6  A0D8               	btfss	status,0,c
 38024  0153E8  D002               	goto	i2l19032
 38025  0153EA                     i2l9295:
 38026                           
 38027                           ;Power_Meter.c: 644: {
 38028                           ;Power_Meter.c: 645: (RF7 = 1);
 38029  0153EA  8E85               	bsf	3973,7,c	;volatile
 38030                           
 38031                           ;Power_Meter.c: 646: }
 38032  0153EC  0012               	return	
 38033  0153EE                     i2l19032:
 38034                           
 38035                           ;Power_Meter.c: 647: else if ((Phase_Sequence_Ok == 1) && (R_Volt >= (370)) && (Y_Volt >
      +                          = (370)) &&
 38036                           ;Power_Meter.c: 648: (B_Volt >= (370)) && (R_Volt <= (450)) && (Y_Volt <= (450)) &&
 38037                           ;Power_Meter.c: 649: (B_Volt <= (450)) && (R_Curr <= (12)) && (Y_Curr <= (12)) &&
 38038                           ;Power_Meter.c: 650: (B_Curr <= (12)) && (Frequency >= 47.5) && (Frequency <=52.5) && (K
      +                          W >= (-5.0)) &&
 38039                           ;Power_Meter.c: 651: (KW <= (6.0) ))
 38040  0153EE  041E               	decf	_Phase_Sequence_Ok,w,c
 38041  0153F0  A4D8               	btfss	status,2,c
 38042  0153F2  0012               	return	
 38043  0153F4  C007  F025         	movff	_R_Volt,i2___ftge@ff1
 38044  0153F8  C008  F026         	movff	_R_Volt+1,i2___ftge@ff1+1
 38045  0153FC  C009  F027         	movff	_R_Volt+2,i2___ftge@ff1+2
 38046  015400  0E00               	movlw	0
 38047  015402  6E28               	movwf	i2___ftge@ff2,c
 38048  015404  0EB9               	movlw	185
 38049  015406  6E29               	movwf	i2___ftge@ff2+1,c
 38050  015408  0E43               	movlw	67
 38051  01540A  6E2A               	movwf	i2___ftge@ff2+2,c
 38052  01540C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38053  015410  A0D8               	btfss	status,0,c
 38054  015412  0012               	return	
 38055  015414  C010  F025         	movff	_Y_Volt,i2___ftge@ff1
 38056  015418  C011  F026         	movff	_Y_Volt+1,i2___ftge@ff1+1
 38057  01541C  C012  F027         	movff	_Y_Volt+2,i2___ftge@ff1+2
 38058  015420  0E00               	movlw	0
 38059  015422  6E28               	movwf	i2___ftge@ff2,c
 38060  015424  0EB9               	movlw	185
 38061  015426  6E29               	movwf	i2___ftge@ff2+1,c
 38062  015428  0E43               	movlw	67
 38063  01542A  6E2A               	movwf	i2___ftge@ff2+2,c
 38064  01542C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38065  015430  A0D8               	btfss	status,0,c
 38066  015432  0012               	return	
 38067  015434  C001  F025         	movff	_B_Volt,i2___ftge@ff1
 38068  015438  C002  F026         	movff	_B_Volt+1,i2___ftge@ff1+1
 38069  01543C  C003  F027         	movff	_B_Volt+2,i2___ftge@ff1+2
 38070  015440  0E00               	movlw	0
 38071  015442  6E28               	movwf	i2___ftge@ff2,c
 38072  015444  0EB9               	movlw	185
 38073  015446  6E29               	movwf	i2___ftge@ff2+1,c
 38074  015448  0E43               	movlw	67
 38075  01544A  6E2A               	movwf	i2___ftge@ff2+2,c
 38076  01544C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38077  015450  A0D8               	btfss	status,0,c
 38078  015452  0012               	return	
 38079  015454  0E00               	movlw	0
 38080  015456  6E25               	movwf	i2___ftge@ff1,c
 38081  015458  0EE1               	movlw	225
 38082  01545A  6E26               	movwf	i2___ftge@ff1+1,c
 38083  01545C  0E43               	movlw	67
 38084  01545E  6E27               	movwf	i2___ftge@ff1+2,c
 38085  015460  C007  F028         	movff	_R_Volt,i2___ftge@ff2
 38086  015464  C008  F029         	movff	_R_Volt+1,i2___ftge@ff2+1
 38087  015468  C009  F02A         	movff	_R_Volt+2,i2___ftge@ff2+2
 38088  01546C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38089  015470  A0D8               	btfss	status,0,c
 38090  015472  0012               	return	
 38091  015474  0E00               	movlw	0
 38092  015476  6E25               	movwf	i2___ftge@ff1,c
 38093  015478  0EE1               	movlw	225
 38094  01547A  6E26               	movwf	i2___ftge@ff1+1,c
 38095  01547C  0E43               	movlw	67
 38096  01547E  6E27               	movwf	i2___ftge@ff1+2,c
 38097  015480  C010  F028         	movff	_Y_Volt,i2___ftge@ff2
 38098  015484  C011  F029         	movff	_Y_Volt+1,i2___ftge@ff2+1
 38099  015488  C012  F02A         	movff	_Y_Volt+2,i2___ftge@ff2+2
 38100  01548C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38101  015490  A0D8               	btfss	status,0,c
 38102  015492  0012               	return	
 38103  015494  0E00               	movlw	0
 38104  015496  6E25               	movwf	i2___ftge@ff1,c
 38105  015498  0EE1               	movlw	225
 38106  01549A  6E26               	movwf	i2___ftge@ff1+1,c
 38107  01549C  0E43               	movlw	67
 38108  01549E  6E27               	movwf	i2___ftge@ff1+2,c
 38109  0154A0  C001  F028         	movff	_B_Volt,i2___ftge@ff2
 38110  0154A4  C002  F029         	movff	_B_Volt+1,i2___ftge@ff2+1
 38111  0154A8  C003  F02A         	movff	_B_Volt+2,i2___ftge@ff2+2
 38112  0154AC  EC2C  F0D2         	call	i2___ftge	;wreg free
 38113  0154B0  A0D8               	btfss	status,0,c
 38114  0154B2  0012               	return	
 38115  0154B4  0E00               	movlw	0
 38116  0154B6  6E25               	movwf	i2___ftge@ff1,c
 38117  0154B8  0E40               	movlw	64
 38118  0154BA  6E26               	movwf	i2___ftge@ff1+1,c
 38119  0154BC  0E41               	movlw	65
 38120  0154BE  6E27               	movwf	i2___ftge@ff1+2,c
 38121  0154C0  C0CD  F028         	movff	_R_Curr,i2___ftge@ff2
 38122  0154C4  C0CE  F029         	movff	_R_Curr+1,i2___ftge@ff2+1
 38123  0154C8  C0CF  F02A         	movff	_R_Curr+2,i2___ftge@ff2+2
 38124  0154CC  EC2C  F0D2         	call	i2___ftge	;wreg free
 38125  0154D0  A0D8               	btfss	status,0,c
 38126  0154D2  0012               	return	
 38127  0154D4  0E00               	movlw	0
 38128  0154D6  6E25               	movwf	i2___ftge@ff1,c
 38129  0154D8  0E40               	movlw	64
 38130  0154DA  6E26               	movwf	i2___ftge@ff1+1,c
 38131  0154DC  0E41               	movlw	65
 38132  0154DE  6E27               	movwf	i2___ftge@ff1+2,c
 38133  0154E0  C0D6  F028         	movff	_Y_Curr,i2___ftge@ff2
 38134  0154E4  C0D7  F029         	movff	_Y_Curr+1,i2___ftge@ff2+1
 38135  0154E8  C0D8  F02A         	movff	_Y_Curr+2,i2___ftge@ff2+2
 38136  0154EC  EC2C  F0D2         	call	i2___ftge	;wreg free
 38137  0154F0  A0D8               	btfss	status,0,c
 38138  0154F2  0012               	return	
 38139  0154F4  0E00               	movlw	0
 38140  0154F6  6E25               	movwf	i2___ftge@ff1,c
 38141  0154F8  0E40               	movlw	64
 38142  0154FA  6E26               	movwf	i2___ftge@ff1+1,c
 38143  0154FC  0E41               	movlw	65
 38144  0154FE  6E27               	movwf	i2___ftge@ff1+2,c
 38145  015500  C0C4  F028         	movff	_B_Curr,i2___ftge@ff2
 38146  015504  C0C5  F029         	movff	_B_Curr+1,i2___ftge@ff2+1
 38147  015508  C0C6  F02A         	movff	_B_Curr+2,i2___ftge@ff2+2
 38148  01550C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38149  015510  A0D8               	btfss	status,0,c
 38150  015512  0012               	return	
 38151  015514  C0C7  F025         	movff	_Frequency,i2___ftge@ff1
 38152  015518  C0C8  F026         	movff	_Frequency+1,i2___ftge@ff1+1
 38153  01551C  C0C9  F027         	movff	_Frequency+2,i2___ftge@ff1+2
 38154  015520  0E00               	movlw	0
 38155  015522  6E28               	movwf	i2___ftge@ff2,c
 38156  015524  0E3E               	movlw	62
 38157  015526  6E29               	movwf	i2___ftge@ff2+1,c
 38158  015528  0E42               	movlw	66
 38159  01552A  6E2A               	movwf	i2___ftge@ff2+2,c
 38160  01552C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38161  015530  A0D8               	btfss	status,0,c
 38162  015532  0012               	return	
 38163  015534  0E00               	movlw	0
 38164  015536  6E25               	movwf	i2___ftge@ff1,c
 38165  015538  0E52               	movlw	82
 38166  01553A  6E26               	movwf	i2___ftge@ff1+1,c
 38167  01553C  0E42               	movlw	66
 38168  01553E  6E27               	movwf	i2___ftge@ff1+2,c
 38169  015540  C0C7  F028         	movff	_Frequency,i2___ftge@ff2
 38170  015544  C0C8  F029         	movff	_Frequency+1,i2___ftge@ff2+1
 38171  015548  C0C9  F02A         	movff	_Frequency+2,i2___ftge@ff2+2
 38172  01554C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38173  015550  A0D8               	btfss	status,0,c
 38174  015552  0012               	return	
 38175  015554  C022  F025         	movff	_KW,i2___ftge@ff1
 38176  015558  C023  F026         	movff	_KW+1,i2___ftge@ff1+1
 38177  01555C  C024  F027         	movff	_KW+2,i2___ftge@ff1+2
 38178  015560  0E00               	movlw	0
 38179  015562  6E28               	movwf	i2___ftge@ff2,c
 38180  015564  0EA0               	movlw	160
 38181  015566  6E29               	movwf	i2___ftge@ff2+1,c
 38182  015568  0EC0               	movlw	192
 38183  01556A  6E2A               	movwf	i2___ftge@ff2+2,c
 38184  01556C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38185  015570  A0D8               	btfss	status,0,c
 38186  015572  0012               	return	
 38187  015574  0E00               	movlw	0
 38188  015576  6E25               	movwf	i2___ftge@ff1,c
 38189  015578  0EC0               	movlw	192
 38190  01557A  6E26               	movwf	i2___ftge@ff1+1,c
 38191  01557C  0E40               	movlw	64
 38192  01557E  6E27               	movwf	i2___ftge@ff1+2,c
 38193  015580  C022  F028         	movff	_KW,i2___ftge@ff2
 38194  015584  C023  F029         	movff	_KW+1,i2___ftge@ff2+1
 38195  015588  C024  F02A         	movff	_KW+2,i2___ftge@ff2+2
 38196  01558C  EC2C  F0D2         	call	i2___ftge	;wreg free
 38197  015590  A0D8               	btfss	status,0,c
 38198  015592  0012               	return	
 38199                           
 38200                           ;Power_Meter.c: 652: {
 38201                           ;Power_Meter.c: 653: (RF7 = 0);
 38202  015594  9E85               	bcf	3973,7,c	;volatile
 38203  015596  0012               	return	
 38204  015598                     __end_of_PM_Error_Led:
 38205                           	opt stack 0
 38206                           pclatu	equ	0xFFB
 38207                           pclath	equ	0xFFA
 38208                           tblptru	equ	0xFF8
 38209                           tblptrh	equ	0xFF7
 38210                           tblptrl	equ	0xFF6
 38211                           tablat	equ	0xFF5
 38212                           prodh	equ	0xFF4
 38213                           prodl	equ	0xFF3
 38214                           intcon	equ	0xFF2
 38215                           postinc0	equ	0xFEE
 38216                           fsr0h	equ	0xFEA
 38217                           fsr0l	equ	0xFE9
 38218                           wreg	equ	0xFE8
 38219                           postdec1	equ	0xFE5
 38220                           fsr1h	equ	0xFE2
 38221                           fsr1l	equ	0xFE1
 38222                           indf2	equ	0xFDF
 38223                           postinc2	equ	0xFDE
 38224                           postdec2	equ	0xFDD
 38225                           fsr2h	equ	0xFDA
 38226                           fsr2l	equ	0xFD9
 38227                           status	equ	0xFD8
 38228                           
 38229 ;; *************** function i2___ftge *****************
 38230 ;; Defined at:
 38231 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 38232 ;; Parameters:    Size  Location     Type
 38233 ;;  ff1             3    0[COMRAM] float 
 38234 ;;  ff2             3    3[COMRAM] float 
 38235 ;; Auto vars:     Size  Location     Type
 38236 ;;		None
 38237 ;; Return value:  Size  Location     Type
 38238 ;;		None               void
 38239 ;; Registers used:
 38240 ;;		wreg, status,2, status,0
 38241 ;; Tracked objects:
 38242 ;;		On entry : 0/0
 38243 ;;		On exit  : 0/0
 38244 ;;		Unchanged: 0/0
 38245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38246 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38248 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38249 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38250 ;;Total ram usage:        9 bytes
 38251 ;; Hardware stack levels used:    1
 38252 ;; This function calls:
 38253 ;;		Nothing
 38254 ;; This function is called by:
 38255 ;;		_PM_Error_Led
 38256 ;; This function uses a non-reentrant model
 38257 ;;
 38258                           
 38259                           	psect	text144
 38260  01A458                     __ptext144:
 38261                           	opt stack 0
 38262  01A458                     i2___ftge:
 38263                           	opt stack 21
 38264                           
 38265                           ;incstack = 0
 38266  01A458  AE27               	btfss	i2___ftge@ff1+2,7,c
 38267  01A45A  D016               	goto	i2l18176
 38268  01A45C  C025  F02B         	movff	i2___ftge@ff1,??i2___ftge
 38269  01A460  C026  F02C         	movff	i2___ftge@ff1+1,??i2___ftge+1
 38270  01A464  C027  F02D         	movff	i2___ftge@ff1+2,??i2___ftge+2
 38271  01A468  1E2B               	comf	??i2___ftge,f,c
 38272  01A46A  1E2C               	comf	??i2___ftge+1,f,c
 38273  01A46C  1E2D               	comf	??i2___ftge+2,f,c
 38274  01A46E  2A2B               	incf	??i2___ftge,f,c
 38275  01A470  0E00               	movlw	0
 38276  01A472  222C               	addwfc	??i2___ftge+1,f,c
 38277  01A474  222D               	addwfc	??i2___ftge+2,f,c
 38278  01A476  0E00               	movlw	0
 38279  01A478  242B               	addwf	??i2___ftge,w,c
 38280  01A47A  6E25               	movwf	i2___ftge@ff1,c
 38281  01A47C  0E00               	movlw	0
 38282  01A47E  202C               	addwfc	??i2___ftge+1,w,c
 38283  01A480  6E26               	movwf	i2___ftge@ff1+1,c
 38284  01A482  0E80               	movlw	128
 38285  01A484  202D               	addwfc	??i2___ftge+2,w,c
 38286  01A486  6E27               	movwf	i2___ftge@ff1+2,c
 38287  01A488                     i2l18176:
 38288  01A488  AE2A               	btfss	i2___ftge@ff2+2,7,c
 38289  01A48A  D016               	goto	i2l18180
 38290  01A48C  C028  F02B         	movff	i2___ftge@ff2,??i2___ftge
 38291  01A490  C029  F02C         	movff	i2___ftge@ff2+1,??i2___ftge+1
 38292  01A494  C02A  F02D         	movff	i2___ftge@ff2+2,??i2___ftge+2
 38293  01A498  1E2B               	comf	??i2___ftge,f,c
 38294  01A49A  1E2C               	comf	??i2___ftge+1,f,c
 38295  01A49C  1E2D               	comf	??i2___ftge+2,f,c
 38296  01A49E  2A2B               	incf	??i2___ftge,f,c
 38297  01A4A0  0E00               	movlw	0
 38298  01A4A2  222C               	addwfc	??i2___ftge+1,f,c
 38299  01A4A4  222D               	addwfc	??i2___ftge+2,f,c
 38300  01A4A6  0E00               	movlw	0
 38301  01A4A8  242B               	addwf	??i2___ftge,w,c
 38302  01A4AA  6E28               	movwf	i2___ftge@ff2,c
 38303  01A4AC  0E00               	movlw	0
 38304  01A4AE  202C               	addwfc	??i2___ftge+1,w,c
 38305  01A4B0  6E29               	movwf	i2___ftge@ff2+1,c
 38306  01A4B2  0E80               	movlw	128
 38307  01A4B4  202D               	addwfc	??i2___ftge+2,w,c
 38308  01A4B6  6E2A               	movwf	i2___ftge@ff2+2,c
 38309  01A4B8                     i2l18180:
 38310  01A4B8  0E00               	movlw	0
 38311  01A4BA  1A25               	xorwf	i2___ftge@ff1,f,c
 38312  01A4BC  0E00               	movlw	0
 38313  01A4BE  1A26               	xorwf	i2___ftge@ff1+1,f,c
 38314  01A4C0  0E80               	movlw	128
 38315  01A4C2  1A27               	xorwf	i2___ftge@ff1+2,f,c
 38316  01A4C4  0E00               	movlw	0
 38317  01A4C6  1A28               	xorwf	i2___ftge@ff2,f,c
 38318  01A4C8  0E00               	movlw	0
 38319  01A4CA  1A29               	xorwf	i2___ftge@ff2+1,f,c
 38320  01A4CC  0E80               	movlw	128
 38321  01A4CE  1A2A               	xorwf	i2___ftge@ff2+2,f,c
 38322  01A4D0  5028               	movf	i2___ftge@ff2,w,c
 38323  01A4D2  5C25               	subwf	i2___ftge@ff1,w,c
 38324  01A4D4  5029               	movf	i2___ftge@ff2+1,w,c
 38325  01A4D6  5826               	subwfb	i2___ftge@ff1+1,w,c
 38326  01A4D8  502A               	movf	i2___ftge@ff2+2,w,c
 38327  01A4DA  5827               	subwfb	i2___ftge@ff1+2,w,c
 38328  01A4DC  B0D8               	btfsc	status,0,c
 38329  01A4DE  D002               	goto	i2l18186
 38330  01A4E0  90D8               	bcf	status,0,c
 38331  01A4E2  0012               	return	
 38332  01A4E4                     i2l18186:
 38333  01A4E4  80D8               	bsf	status,0,c
 38334  01A4E6  0012               	return	
 38335  01A4E8                     __end_ofi2___ftge:
 38336                           	opt stack 0
 38337                           pclatu	equ	0xFFB
 38338                           pclath	equ	0xFFA
 38339                           tblptru	equ	0xFF8
 38340                           tblptrh	equ	0xFF7
 38341                           tblptrl	equ	0xFF6
 38342                           tablat	equ	0xFF5
 38343                           prodh	equ	0xFF4
 38344                           prodl	equ	0xFF3
 38345                           intcon	equ	0xFF2
 38346                           postinc0	equ	0xFEE
 38347                           fsr0h	equ	0xFEA
 38348                           fsr0l	equ	0xFE9
 38349                           wreg	equ	0xFE8
 38350                           postdec1	equ	0xFE5
 38351                           fsr1h	equ	0xFE2
 38352                           fsr1l	equ	0xFE1
 38353                           indf2	equ	0xFDF
 38354                           postinc2	equ	0xFDE
 38355                           postdec2	equ	0xFDD
 38356                           fsr2h	equ	0xFDA
 38357                           fsr2l	equ	0xFD9
 38358                           status	equ	0xFD8
 38359                           
 38360 ;; *************** function _Error_Checking_Interrupt_Overflow *****************
 38361 ;; Defined at:
 38362 ;;		line 73 in file "ERROR_HANDLING.c"
 38363 ;; Parameters:    Size  Location     Type
 38364 ;;		None
 38365 ;; Auto vars:     Size  Location     Type
 38366 ;;		None
 38367 ;; Return value:  Size  Location     Type
 38368 ;;                  2  3826[None  ] int 
 38369 ;; Registers used:
 38370 ;;		wreg, status,2, status,0, cstack
 38371 ;; Tracked objects:
 38372 ;;		On entry : 0/0
 38373 ;;		On exit  : 0/0
 38374 ;;		Unchanged: 0/0
 38375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38380 ;;Total ram usage:        0 bytes
 38381 ;; Hardware stack levels used:    1
 38382 ;; Hardware stack levels required when called:    1
 38383 ;; This function calls:
 38384 ;;		_Capacitor_Adding
 38385 ;;		_VFD_IO_Error
 38386 ;; This function is called by:
 38387 ;;		_ISR
 38388 ;; This function uses a non-reentrant model
 38389 ;;
 38390                           
 38391                           	psect	text145
 38392  01B18C                     __ptext145:
 38393                           	opt stack 0
 38394  01B18C                     _Error_Checking_Interrupt_Overflow:
 38395                           	opt stack 21
 38396                           
 38397                           ;ERROR_HANDLING.c: 75: Capacitor_Adding();
 38398                           
 38399                           ;incstack = 0
 38400  01B18C  EC35  F0D3         	call	_Capacitor_Adding	;wreg free
 38401                           
 38402                           ;ERROR_HANDLING.c: 76: VFD_IO_Error();
 38403  01B190  EC32  F0D8         	call	_VFD_IO_Error	;wreg free
 38404  01B194  0012               	return		;funcret
 38405  01B196                     __end_of_Error_Checking_Interrupt_Overflow:
 38406                           	opt stack 0
 38407                           pclatu	equ	0xFFB
 38408                           pclath	equ	0xFFA
 38409                           tblptru	equ	0xFF8
 38410                           tblptrh	equ	0xFF7
 38411                           tblptrl	equ	0xFF6
 38412                           tablat	equ	0xFF5
 38413                           prodh	equ	0xFF4
 38414                           prodl	equ	0xFF3
 38415                           intcon	equ	0xFF2
 38416                           postinc0	equ	0xFEE
 38417                           fsr0h	equ	0xFEA
 38418                           fsr0l	equ	0xFE9
 38419                           wreg	equ	0xFE8
 38420                           postdec1	equ	0xFE5
 38421                           fsr1h	equ	0xFE2
 38422                           fsr1l	equ	0xFE1
 38423                           indf2	equ	0xFDF
 38424                           postinc2	equ	0xFDE
 38425                           postdec2	equ	0xFDD
 38426                           fsr2h	equ	0xFDA
 38427                           fsr2l	equ	0xFD9
 38428                           status	equ	0xFD8
 38429                           
 38430 ;; *************** function _VFD_IO_Error *****************
 38431 ;; Defined at:
 38432 ;;		line 667 in file "ERROR_HANDLING.c"
 38433 ;; Parameters:    Size  Location     Type
 38434 ;;		None
 38435 ;; Auto vars:     Size  Location     Type
 38436 ;;		None
 38437 ;; Return value:  Size  Location     Type
 38438 ;;                  1    wreg      void 
 38439 ;; Registers used:
 38440 ;;		wreg, status,2
 38441 ;; Tracked objects:
 38442 ;;		On entry : 0/0
 38443 ;;		On exit  : 0/0
 38444 ;;		Unchanged: 0/0
 38445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38450 ;;Total ram usage:        0 bytes
 38451 ;; Hardware stack levels used:    1
 38452 ;; This function calls:
 38453 ;;		Nothing
 38454 ;; This function is called by:
 38455 ;;		_Error_Checking_Interrupt_Overflow
 38456 ;; This function uses a non-reentrant model
 38457 ;;
 38458                           
 38459                           	psect	text146
 38460  01B064                     __ptext146:
 38461                           	opt stack 0
 38462  01B064                     _VFD_IO_Error:
 38463                           	opt stack 21
 38464                           
 38465                           ;ERROR_HANDLING.c: 669: if(RC5 == 1)
 38466                           
 38467                           ;incstack = 0
 38468  01B064  AA82               	btfss	3970,5,c	;volatile
 38469  01B066  D006               	goto	i2l18074
 38470                           
 38471                           ;ERROR_HANDLING.c: 670: {
 38472                           ;ERROR_HANDLING.c: 671: VFD_Error_Flag = 1;
 38473  01B068  0E01               	movlw	1
 38474  01B06A  0101               	movlb	1	; () banked
 38475  01B06C  6F92               	movwf	_VFD_Error_Flag& (0+255),b
 38476                           
 38477                           ;ERROR_HANDLING.c: 672: Errors = VFD_ERROR_IO;
 38478  01B06E  0E19               	movlw	25
 38479  01B070  6E1B               	movwf	_Errors,c
 38480                           
 38481                           ;ERROR_HANDLING.c: 673: }
 38482  01B072  0012               	return	
 38483  01B074                     i2l18074:
 38484                           
 38485                           ;ERROR_HANDLING.c: 674: else
 38486                           ;ERROR_HANDLING.c: 675: {
 38487                           ;ERROR_HANDLING.c: 676: VFD_Error_Flag = 0;
 38488  01B074  0E00               	movlw	0
 38489  01B076  0101               	movlb	1	; () banked
 38490  01B078  6F92               	movwf	_VFD_Error_Flag& (0+255),b
 38491  01B07A  0012               	return	
 38492  01B07C                     __end_of_VFD_IO_Error:
 38493                           	opt stack 0
 38494                           pclatu	equ	0xFFB
 38495                           pclath	equ	0xFFA
 38496                           tblptru	equ	0xFF8
 38497                           tblptrh	equ	0xFF7
 38498                           tblptrl	equ	0xFF6
 38499                           tablat	equ	0xFF5
 38500                           prodh	equ	0xFF4
 38501                           prodl	equ	0xFF3
 38502                           intcon	equ	0xFF2
 38503                           postinc0	equ	0xFEE
 38504                           fsr0h	equ	0xFEA
 38505                           fsr0l	equ	0xFE9
 38506                           wreg	equ	0xFE8
 38507                           postdec1	equ	0xFE5
 38508                           fsr1h	equ	0xFE2
 38509                           fsr1l	equ	0xFE1
 38510                           indf2	equ	0xFDF
 38511                           postinc2	equ	0xFDE
 38512                           postdec2	equ	0xFDD
 38513                           fsr2h	equ	0xFDA
 38514                           fsr2l	equ	0xFD9
 38515                           status	equ	0xFD8
 38516                           
 38517 ;; *************** function _Capacitor_Adding *****************
 38518 ;; Defined at:
 38519 ;;		line 656 in file "Power_Meter.c"
 38520 ;; Parameters:    Size  Location     Type
 38521 ;;		None
 38522 ;; Auto vars:     Size  Location     Type
 38523 ;;		None
 38524 ;; Return value:  Size  Location     Type
 38525 ;;                  1    wreg      void 
 38526 ;; Registers used:
 38527 ;;		wreg, status,2, status,0
 38528 ;; Tracked objects:
 38529 ;;		On entry : 0/0
 38530 ;;		On exit  : 0/0
 38531 ;;		Unchanged: 0/0
 38532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38537 ;;Total ram usage:        0 bytes
 38538 ;; Hardware stack levels used:    1
 38539 ;; This function calls:
 38540 ;;		Nothing
 38541 ;; This function is called by:
 38542 ;;		_Error_Checking_Interrupt_Overflow
 38543 ;; This function uses a non-reentrant model
 38544 ;;
 38545                           
 38546                           	psect	text147
 38547  01A66A                     __ptext147:
 38548                           	opt stack 0
 38549  01A66A                     _Capacitor_Adding:
 38550                           	opt stack 21
 38551                           
 38552                           ;Power_Meter.c: 658: if(Capacitor_Counter < 40 && Turbine_state == RUNNING_STATE)
 38553                           
 38554                           ; BSR set to: 1
 38555                           ;incstack = 0
 38556  01A66A  0101               	movlb	1	; () banked
 38557  01A66C  5121               	movf	(_Capacitor_Counter+1)& (0+255),w,b
 38558  01A66E  E10D               	bnz	i2l18050
 38559  01A670  0E28               	movlw	40
 38560  01A672  0101               	movlb	1	; () banked
 38561  01A674  5D20               	subwf	_Capacitor_Counter& (0+255),w,b
 38562  01A676  B0D8               	btfsc	status,0,c
 38563  01A678  D008               	goto	i2l18050
 38564                           
 38565                           ; BSR set to: 1
 38566  01A67A  0E02               	movlw	2
 38567  01A67C  0100               	movlb	0	; () banked
 38568  01A67E  19F0               	xorwf	_Turbine_state& (0+255),w,b
 38569  01A680  A4D8               	btfss	status,2,c
 38570  01A682  D003               	goto	i2l18050
 38571                           
 38572                           ; BSR set to: 0
 38573                           ;Power_Meter.c: 659: {
 38574                           ;Power_Meter.c: 660: Capacitor_Counter++;
 38575  01A684  0101               	movlb	1	; () banked
 38576  01A686  4B20               	infsnz	_Capacitor_Counter& (0+255),f,b
 38577  01A688  2B21               	incf	(_Capacitor_Counter+1)& (0+255),f,b
 38578  01A68A                     i2l18050:
 38579                           
 38580                           ;Power_Meter.c: 661: }
 38581                           ;Power_Meter.c: 662: if(Turbine_state != RUNNING_STATE )
 38582  01A68A  0E02               	movlw	2
 38583  01A68C  0100               	movlb	0	; () banked
 38584  01A68E  19F0               	xorwf	_Turbine_state& (0+255),w,b
 38585  01A690  B4D8               	btfsc	status,2,c
 38586  01A692  D006               	goto	i2l18056
 38587                           
 38588                           ; BSR set to: 0
 38589                           ;Power_Meter.c: 663: {
 38590                           ;Power_Meter.c: 664: (RF1 = 0);
 38591  01A694  9285               	bcf	3973,1,c	;volatile
 38592                           
 38593                           ; BSR set to: 0
 38594                           ;Power_Meter.c: 665: Capacitor_Counter = 0;
 38595  01A696  0E00               	movlw	0
 38596  01A698  0101               	movlb	1	; () banked
 38597  01A69A  6F21               	movwf	(_Capacitor_Counter+1)& (0+255),b
 38598  01A69C  0E00               	movlw	0
 38599  01A69E  6F20               	movwf	_Capacitor_Counter& (0+255),b
 38600  01A6A0                     i2l18056:
 38601                           
 38602                           ;Power_Meter.c: 666: }
 38603                           ;Power_Meter.c: 667: if(Capacitor_Counter == 40 && Turbine_state == RUNNING_STATE)
 38604  01A6A0  0E28               	movlw	40
 38605  01A6A2  0101               	movlb	1	; () banked
 38606  01A6A4  1920               	xorwf	_Capacitor_Counter& (0+255),w,b
 38607  01A6A6  0101               	movlb	1	; () banked
 38608  01A6A8  1121               	iorwf	(_Capacitor_Counter+1)& (0+255),w,b
 38609  01A6AA  A4D8               	btfss	status,2,c
 38610  01A6AC  D00A               	goto	i2l18064
 38611                           
 38612                           ; BSR set to: 1
 38613  01A6AE  0E02               	movlw	2
 38614  01A6B0  0100               	movlb	0	; () banked
 38615  01A6B2  19F0               	xorwf	_Turbine_state& (0+255),w,b
 38616  01A6B4  A4D8               	btfss	status,2,c
 38617  01A6B6  D005               	goto	i2l18064
 38618                           
 38619                           ; BSR set to: 0
 38620                           ;Power_Meter.c: 668: {
 38621                           ;Power_Meter.c: 669: (RF1 = 1);
 38622  01A6B8  8285               	bsf	3973,1,c	;volatile
 38623                           
 38624                           ; BSR set to: 0
 38625                           ;Power_Meter.c: 670: Five_Second_flag = 1;
 38626  01A6BA  0E01               	movlw	1
 38627  01A6BC  0101               	movlb	1	; () banked
 38628  01A6BE  6F59               	movwf	_Five_Second_flag& (0+255),b
 38629                           
 38630                           ;Power_Meter.c: 671: }
 38631  01A6C0  0012               	return	
 38632  01A6C2                     i2l18064:
 38633                           
 38634                           ;Power_Meter.c: 672: else if(Capacitor_Counter < 40 || Turbine_state != RUNNING_STATE)
 38635  01A6C2  0101               	movlb	1	; () banked
 38636  01A6C4  5121               	movf	(_Capacitor_Counter+1)& (0+255),w,b
 38637  01A6C6  E105               	bnz	i2u1070_40
 38638  01A6C8  0E28               	movlw	40
 38639  01A6CA  0101               	movlb	1	; () banked
 38640  01A6CC  5D20               	subwf	_Capacitor_Counter& (0+255),w,b
 38641  01A6CE  A0D8               	btfss	status,0,c
 38642  01A6D0  D005               	goto	i2l18068
 38643  01A6D2                     i2u1070_40:
 38644                           
 38645                           ; BSR set to: 1
 38646  01A6D2  0E02               	movlw	2
 38647  01A6D4  0100               	movlb	0	; () banked
 38648  01A6D6  19F0               	xorwf	_Turbine_state& (0+255),w,b
 38649  01A6D8  B4D8               	btfsc	status,2,c
 38650  01A6DA  0012               	return	
 38651  01A6DC                     i2l18068:
 38652                           
 38653                           ;Power_Meter.c: 673: {
 38654                           ;Power_Meter.c: 674: Five_Second_flag = 0;
 38655  01A6DC  0E00               	movlw	0
 38656  01A6DE  0101               	movlb	1	; () banked
 38657  01A6E0  6F59               	movwf	_Five_Second_flag& (0+255),b
 38658                           
 38659                           ; BSR set to: 1
 38660  01A6E2  0012               	return	
 38661  01A6E4                     __end_of_Capacitor_Adding:
 38662                           	opt stack 0
 38663                           pclatu	equ	0xFFB
 38664                           pclath	equ	0xFFA
 38665                           tblptru	equ	0xFF8
 38666                           tblptrh	equ	0xFF7
 38667                           tblptrl	equ	0xFF6
 38668                           tablat	equ	0xFF5
 38669                           prodh	equ	0xFF4
 38670                           prodl	equ	0xFF3
 38671                           intcon	equ	0xFF2
 38672                           postinc0	equ	0xFEE
 38673                           fsr0h	equ	0xFEA
 38674                           fsr0l	equ	0xFE9
 38675                           wreg	equ	0xFE8
 38676                           postdec1	equ	0xFE5
 38677                           fsr1h	equ	0xFE2
 38678                           fsr1l	equ	0xFE1
 38679                           indf2	equ	0xFDF
 38680                           postinc2	equ	0xFDE
 38681                           postdec2	equ	0xFDD
 38682                           fsr2h	equ	0xFDA
 38683                           fsr2l	equ	0xFD9
 38684                           status	equ	0xFD8
 38685                           pclatu	equ	0xFFB
 38686                           pclath	equ	0xFFA
 38687                           tblptru	equ	0xFF8
 38688                           tblptrh	equ	0xFF7
 38689                           tblptrl	equ	0xFF6
 38690                           tablat	equ	0xFF5
 38691                           prodh	equ	0xFF4
 38692                           prodl	equ	0xFF3
 38693                           intcon	equ	0xFF2
 38694                           postinc0	equ	0xFEE
 38695                           fsr0h	equ	0xFEA
 38696                           fsr0l	equ	0xFE9
 38697                           wreg	equ	0xFE8
 38698                           postdec1	equ	0xFE5
 38699                           fsr1h	equ	0xFE2
 38700                           fsr1l	equ	0xFE1
 38701                           indf2	equ	0xFDF
 38702                           postinc2	equ	0xFDE
 38703                           postdec2	equ	0xFDD
 38704                           fsr2h	equ	0xFDA
 38705                           fsr2l	equ	0xFD9
 38706                           status	equ	0xFD8
 38707                           
 38708                           	psect	rparam
 38709  0000                     pclatu	equ	0xFFB
 38710                           pclath	equ	0xFFA
 38711                           tblptru	equ	0xFF8
 38712                           tblptrh	equ	0xFF7
 38713                           tblptrl	equ	0xFF6
 38714                           tablat	equ	0xFF5
 38715                           prodh	equ	0xFF4
 38716                           prodl	equ	0xFF3
 38717                           intcon	equ	0xFF2
 38718                           postinc0	equ	0xFEE
 38719                           fsr0h	equ	0xFEA
 38720                           fsr0l	equ	0xFE9
 38721                           wreg	equ	0xFE8
 38722                           postdec1	equ	0xFE5
 38723                           fsr1h	equ	0xFE2
 38724                           fsr1l	equ	0xFE1
 38725                           indf2	equ	0xFDF
 38726                           postinc2	equ	0xFDE
 38727                           postdec2	equ	0xFDD
 38728                           fsr2h	equ	0xFDA
 38729                           fsr2l	equ	0xFD9
 38730                           status	equ	0xFD8
 38731                           
 38732                           	psect	temp
 38733  000049                     btemp:
 38734                           	opt stack 0
 38735  000049                     	ds	1
 38736  0000                     int$flags	set	btemp
 38737                           pclatu	equ	0xFFB
 38738                           pclath	equ	0xFFA
 38739                           tblptru	equ	0xFF8
 38740                           tblptrh	equ	0xFF7
 38741                           tblptrl	equ	0xFF6
 38742                           tablat	equ	0xFF5
 38743                           prodh	equ	0xFF4
 38744                           prodl	equ	0xFF3
 38745                           intcon	equ	0xFF2
 38746                           postinc0	equ	0xFEE
 38747                           fsr0h	equ	0xFEA
 38748                           fsr0l	equ	0xFE9
 38749                           wreg	equ	0xFE8
 38750                           postdec1	equ	0xFE5
 38751                           fsr1h	equ	0xFE2
 38752                           fsr1l	equ	0xFE1
 38753                           indf2	equ	0xFDF
 38754                           postinc2	equ	0xFDE
 38755                           postdec2	equ	0xFDD
 38756                           fsr2h	equ	0xFDA
 38757                           fsr2l	equ	0xFD9
 38758                           status	equ	0xFD8


Data Sizes:
    Strings     995
    Constant    145
    Data        4
    BSS         1403
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      72
    BANK0           160    100     160
    BANK1           256     29     201
    BANK2           256      0     255
    BANK3           256      0     255
    BANK4           256      0     255
    BANK5           256      0     254
    BANK6           256     84     204
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_235(CODE[7]), Hours_2(BANK2[2]), Mot_Frequency(BANK5[3]), Time_New(BANK1[3]), 
		 -> wind_Time_1_2(BANK4[3]), Wind_Time_1(BANK4[3]), GRPM_Frequency(BANK4[3]), GRPM_Time_1(BANK2[3]), 
		 -> TRPM_Frequency(BANK4[3]), TRPM_Time(BANK4[3]), STR_232(CODE[17]), STR_230(CODE[17]), 
		 -> STR_228(CODE[18]), STR_226(CODE[24]), STR_224(CODE[18]), STR_222(CODE[18]), 
		 -> STR_220(CODE[18]), STR_218(CODE[16]), STR_216(CODE[8]), STR_214(CODE[10]), 
		 -> STR_212(CODE[14]), STR_210(CODE[11]), STR_208(CODE[19]), STR_206(CODE[19]), 
		 -> STR_204(CODE[27]), STR_202(CODE[13]), STR_200(CODE[10]), STR_198(CODE[13]), 
		 -> STR_196(CODE[12]), STR_194(CODE[5]), STR_192(CODE[5]), STR_190(CODE[14]), 
		 -> STR_188(CODE[16]), STR_186(CODE[9]), STR_184(CODE[13]), STR_182(CODE[10]), 
		 -> STR_180(CODE[12]), STR_178(CODE[10]), STR_176(CODE[15]), STR_174(CODE[13]), 
		 -> STR_172(CODE[5]), STR_170(CODE[4]), STR_168(CODE[5]), STR_166(CODE[3]), 
		 -> STR_164(CODE[10]), STR_162(CODE[10]), STR_160(CODE[10]), STR_158(CODE[7]), 
		 -> STR_156(CODE[7]), STR_154(CODE[7]), STR_152(CODE[15]), STR_150(CODE[15]), 
		 -> STR_148(CODE[7]), STR_146(CODE[15]), STR_144(CODE[15]), STR_142(CODE[14]), 
		 -> STR_140(CODE[12]), STR_138(CODE[11]), STR_136(CODE[15]), STR_134(CODE[9]), 
		 -> STR_132(CODE[13]), STR_130(CODE[11]), STR_128(CODE[10]), STR_91(CODE[9]), 
		 -> STR_89(CODE[8]), STR_87(CODE[7]), STR_85(CODE[8]), STR_83(CODE[13]), 
		 -> STR_81(CODE[11]), STR_79(CODE[14]), STR_77(CODE[12]), STR_75(CODE[7]), 
		 -> STR_73(CODE[9]), STR_71(CODE[11]), STR_69(CODE[11]), STR_67(CODE[10]), 
		 -> STR_65(CODE[10]), STR_63(CODE[10]), STR_61(CODE[7]), STR_59(CODE[14]), 
		 -> STR_57(CODE[11]), STR_55(CODE[11]), STR_53(CODE[7]), STR_51(CODE[8]), 
		 -> STR_49(CODE[13]), STR_47(CODE[11]), STR_45(CODE[5]), STR_43(CODE[10]), 
		 -> STR_41(CODE[18]), STR_39(CODE[9]), STR_37(CODE[10]), STR_35(CODE[11]), 
		 -> STR_33(CODE[9]), Y_KW(BANK2[3]), KW(COMRAM[3]), STR_3(CODE[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_231(CODE[3]), STR_229(CODE[3]), STR_227(CODE[3]), STR_225(CODE[3]), 
		 -> STR_223(CODE[3]), STR_221(CODE[3]), STR_219(CODE[3]), STR_217(CODE[3]), 
		 -> STR_215(CODE[3]), STR_213(CODE[3]), STR_211(CODE[3]), STR_209(CODE[3]), 
		 -> STR_207(CODE[3]), STR_205(CODE[3]), STR_203(CODE[3]), STR_201(CODE[3]), 
		 -> STR_199(CODE[3]), STR_197(CODE[3]), STR_195(CODE[3]), STR_193(CODE[3]), 
		 -> STR_191(CODE[3]), STR_189(CODE[3]), STR_187(CODE[3]), STR_185(CODE[3]), 
		 -> STR_183(CODE[3]), STR_181(CODE[3]), STR_179(CODE[3]), STR_177(CODE[3]), 
		 -> STR_175(CODE[3]), STR_173(CODE[3]), STR_171(CODE[3]), STR_169(CODE[3]), 
		 -> STR_167(CODE[3]), STR_165(CODE[3]), STR_163(CODE[3]), STR_161(CODE[3]), 
		 -> STR_159(CODE[3]), STR_157(CODE[3]), STR_155(CODE[3]), STR_153(CODE[3]), 
		 -> STR_151(CODE[3]), STR_149(CODE[3]), STR_147(CODE[3]), STR_145(CODE[3]), 
		 -> STR_143(CODE[3]), STR_141(CODE[3]), STR_139(CODE[3]), STR_137(CODE[3]), 
		 -> STR_135(CODE[3]), STR_133(CODE[3]), STR_131(CODE[3]), STR_129(CODE[3]), 
		 -> STR_127(CODE[3]), STR_122(CODE[3]), STR_121(CODE[3]), STR_120(CODE[3]), 
		 -> STR_119(CODE[3]), STR_118(CODE[3]), STR_117(CODE[3]), STR_116(CODE[3]), 
		 -> STR_115(CODE[3]), STR_114(CODE[3]), STR_113(CODE[3]), STR_112(CODE[3]), 
		 -> STR_111(CODE[3]), STR_110(CODE[3]), STR_109(CODE[3]), STR_108(CODE[3]), 
		 -> STR_107(CODE[3]), STR_106(CODE[3]), STR_105(CODE[3]), STR_104(CODE[3]), 
		 -> STR_103(CODE[3]), STR_102(CODE[3]), STR_101(CODE[3]), STR_100(CODE[3]), 
		 -> STR_99(CODE[3]), STR_98(CODE[7]), STR_97(CODE[3]), STR_96(CODE[3]), 
		 -> STR_95(CODE[3]), STR_94(CODE[3]), STR_93(CODE[3]), STR_92(CODE[3]), 
		 -> STR_90(CODE[3]), STR_88(CODE[3]), STR_86(CODE[3]), STR_84(CODE[3]), 
		 -> STR_82(CODE[3]), STR_80(CODE[3]), STR_78(CODE[3]), STR_76(CODE[3]), 
		 -> STR_74(CODE[3]), STR_72(CODE[3]), STR_70(CODE[3]), STR_68(CODE[3]), 
		 -> STR_66(CODE[3]), STR_64(CODE[3]), STR_62(CODE[3]), STR_60(CODE[3]), 
		 -> STR_58(CODE[3]), STR_56(CODE[3]), STR_54(CODE[3]), STR_52(CODE[3]), 
		 -> STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), STR_44(CODE[3]), 
		 -> STR_42(CODE[3]), STR_40(CODE[3]), STR_38(CODE[3]), STR_36(CODE[3]), 
		 -> STR_34(CODE[3]), STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[3]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[7]), STR_26(CODE[7]), 
		 -> STR_25(CODE[7]), STR_24(CODE[7]), STR_23(CODE[7]), STR_22(CODE[7]), 
		 -> STR_21(CODE[7]), STR_20(CODE[7]), STR_19(CODE[7]), STR_18(CODE[7]), 
		 -> STR_17(CODE[6]), STR_16(CODE[6]), STR_15(CODE[6]), STR_14(CODE[7]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[7]), STR_10(CODE[7]), 
		 -> STR_9(CODE[3]), STR_8(CODE[7]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[7]), STR_4(CODE[7]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    usart_str@str	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_234(CODE[2]), STR_233(CODE[2]), STR_126(CODE[2]), STR_125(CODE[2]), 
		 -> STR_124(CODE[2]), STR_123(CODE[2]), 

    RTC_GetDateTime@rtc	PTR struct . size(2) Largest target is 7
		 -> rtc(BANK5[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->i2___ftadd
    i2___ftadd->i2___ftpack
    ___awtoft->i2___ftpack
    _PM_Error_Led->i2___ftge

Critical Paths under _main in BANK0

    _Y_PF_Calc->___ftdiv
    _Y_PF_Avg->_cos
    _Wind_Speed_Cal->___ftdiv
    _Wind_Speed_2_Cal->___ftdiv
    _Volt_Curr_Read->___ftge
    _Volt_Curr_Avg->___ftdiv
    _Turbine_RPM_Cal->___ftdiv
    _Wind_Average->___ftdiv
    _VFD_RS485_Data_filter->_VFD_RS485_Data
    _VFD_RS485_Data->___ftdiv
    _UART_Data->_printf
    _UART_Data_String->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _RTC_GetDateTime->_I2C_Read
    _BCDtoI->___wmul
    _Error_Scan_Ramp_up->_EEPROM_Error_Stop
    _Stopping_state_function->___ftge
    _EEPROM_Error_Stop->_int_eeprom_read
    _EEPROM_Error_Stop->_int_eeprom_write
    _Last_3_EEPROM_ERROR_Trigger->_int_eeprom_write
    _Wind_Speed_Error_Trigger->___ftge
    _Turbine_Under_speed->___ftge
    _Turbine_Restore_Check->___ftge
    _Turbine_Over_Speed->___ftge
    _Turbine_OverLoaded_Error->___ftge
    _Start_Stop->_int_eeprom_write
    _Rotor_Slip_Cal->___ftdiv
    _Ramp_Up_Slip_Error_Trigger->___ftge
    _Ramp_Up_Slip->___ftge
    _Pitch_Feedback->_int_eeprom_write
    _Motor_Slip_Cal->___ftdiv
    ___lbtoft->___ftpack
    _Grid_UV->___ftge
    _Grid_Over_Current->___ftge
    _Grid_OV->___ftge
    _Grid_Minimum_Power->___ftge
    _Grid_Maximum_Power->___ftge
    _Grid_Frequency->___ftge
    _Generator_RPM->___ftge
    _Generator_One_Feedback->_int_eeprom_write
    _EEPROM_Error_Monitor->_int_eeprom_read
    _EEPROM_Error_Monitor->_int_eeprom_write
    _Temp_Read->___ftdiv
    _Rampup_state_function->_RAMP_UP
    _VFD_Freq_Step_up->___ftdiv
    _R_PF_Calc->___ftdiv
    _R_PF_Avg->_cos
    _RTC_Init->_I2C_Write
    _RS485_Data_communication->_usart_str_2
    _Power_Factor->___ftdiv
    _Power_Calc->_sqrt
    _sqrt->___ftsub
    _Phase_Sequence->_Read_Adc
    _Generator_RPM_Cal->___ftdiv
    ___lwtoft->___ftpack
    _Freq_Calc->___ftdiv
    _Cons_Gene->___ftge
    _B_PF_Calc->___ftdiv
    _B_PF_Avg->_cos
    _cos->_sin
    _sin->___ftdiv
    _floor->___altoft
    ___fttol->_scale
    ___ftge->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftsub->_floor
    ___ftadd->_fround
    ___ftneg->___ftmul
    ___ftdiv->_eval_poly

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Y_PF_Avg->_cos
    _UART_Data->_printf
    _UART_Data_String->_printf
    _R_PF_Avg->_cos
    _B_PF_Avg->_cos

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    _main->_B_PF_Avg
    _main->_R_PF_Avg
    _main->_Y_PF_Avg

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0 2912493
                           _B_PF_Avg
                          _B_PF_Calc
                          _Cons_Gene
                  _EEPROM_Error_Stop
                          _Freq_Calc
                  _Generator_RPM_Cal
             _Generator_RPM_Initiate
                        _IO_Initiate
                         _OSCILLATOR
              _PM_ADC_Initialization
               _PM_IO_Initialization
            _PM_Timer_Initialization
                     _Phase_Sequence
                         _Power_Calc
                       _Power_Factor
                      _RPM_Data_Kill
           _RS485_Data_communication
                           _RTC_Init
                           _R_PF_Avg
                          _R_PF_Calc
              _Rampup_state_function
                          _Temp_Read
          _Timer0_OneSecond_Function
                    _Timer1_Initiate
                        _Timer7_Init
                    _Turbine_RPM_Cal
               _Turbine_RPM_Initiate
                      _Volt_Curr_Avg
                     _Volt_Curr_Read
                   _Wind_Speed_2_Cal
              _Wind_Speed_2_Initiate
                     _Wind_Speed_Cal
                _Wind_Speed_Initiate
                           _Y_PF_Avg
                          _Y_PF_Calc
             _startup_state_function
                         _usart_init
 ---------------------------------------------------------------------------------
 (1) _usart_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _startup_state_function                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Y_PF_Calc                                            6     6      0   76331
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _Y_PF_Avg                                            93    93      0  345029
                                              0 BANK6     84    84      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                                _cos
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_Initiate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_Cal                                       2     2      0   62980
                                             84 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_2_Initiate                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_2_Cal                                     2     2      0   62980
                                             84 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Volt_Curr_Read                                       0     0      0   20135
                           _Read_Adc
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Volt_Curr_Avg                                       24    24      0   60832
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _Turbine_RPM_Initiate                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Turbine_RPM_Cal                                      2     2      0   78760
                                             84 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Timer7_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Initiate                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_OneSecond_Function                            0     0      0  871919
               _EEPROM_Error_Monitor
          _Error_Checking_One_Second
                 _Error_Scan_Running
                    _Last_Five_Error
            _Stopping_state_function
           _Turbine_Ramp_up_1_Second
          _Turbine_Start_up_1_Second
                      _Two_Sec_Delay
                          _UART_Data
                     _VFD_RS485_Data
              _VFD_RS485_Data_filter
                       _Wind_Average
 ---------------------------------------------------------------------------------
 (2) _Wind_Average                                        48    48      0   44685
                                              0 BANK1     24    24      0
                            ___ftadd
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (2) _VFD_RS485_Data_filter                                0     0      0   14079
                     _VFD_RS485_Data
 ---------------------------------------------------------------------------------
 (3) _VFD_RS485_Data                                       2     2      0   14079
                                             84 BANK0      2     2      0
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _UART_Data                                            0     0      0  356069
                             _BCDtoI
                    _RTC_GetDateTime
                   _UART_Data_String
                             _printf
                          _usart_str
                        _usart_str_1
 ---------------------------------------------------------------------------------
 (3) _UART_Data_String                                     0     0      0  175598
                             _printf
                          _usart_str
                        _usart_str_1
 ---------------------------------------------------------------------------------
 (3) _usart_str_1                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _usart_str                                            2     0      2     527
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _printf                                              41    36      5  175040
                                             81 BANK0     11     6      5
                                              0 BANK1     29    29      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   23334
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   23055
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2778
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _RTC_GetDateTime                                      2     0      2     393
                                              2 BANK0      2     0      2
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             2     2      0      68
                                              0 BANK0      2     2      0
                            _i2c_Ack
                          _i2c_NoAck
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (5) _i2c_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BCDtoI                                               7     5      2    4480
                                             20 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Turbine_Start_up_1_Second                            0     0      0       0
                _Error_Scan_start_up
                      _VFD_Data_Kill
 ---------------------------------------------------------------------------------
 (3) _Error_Scan_start_up                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Turbine_Ramp_up_1_Second                             0     0      0   13841
                 _Error_Scan_Ramp_up
                     _Five_Sec_Delay
                      _One_Sec_Delay
                      _Two_Sec_Delay
 ---------------------------------------------------------------------------------
 (2) _Two_Sec_Delay                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _One_Sec_Delay                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Five_Sec_Delay                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Error_Scan_Ramp_up                                   0     0      0   13841
                  _EEPROM_Error_Stop
 ---------------------------------------------------------------------------------
 (2) _Last_Five_Error                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error_Scan_Running                                   0     0      0   36007
                  _EEPROM_Error_Stop
            _Stopping_state_function
 ---------------------------------------------------------------------------------
 (2) _Stopping_state_function                              0     0      0   22166
                    _Error_Flag_Kill
                         _Start_Stop
                   _Turbine_Pitching
                      _VFD_Data_Kill
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Error_Flag_Kill                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEPROM_Error_Stop                                    2     2      0   13841
                                              4 BANK0      2     2      0
        _Last_3_EEPROM_ERROR_Trigger
                    _int_eeprom_read
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (5) _Last_3_EEPROM_ERROR_Trigger                          0     0      0    6386
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (2) _Error_Checking_One_Second                            0     0      0  363538
                _Communication_Error
                     _DC_Bus_Voltage
             _Generator_One_Feedback
                      _Generator_RPM
                     _Grid_Frequency
                 _Grid_Maximum_Power
                 _Grid_Minimum_Power
                            _Grid_OV
                  _Grid_Over_Current
                _Grid_Phase_Sequence
                            _Grid_UV
                     _Motor_Slip_Cal
                     _Pitch_Feedback
               _Pitch_PS_ON_Function
                       _Ramp_Up_Slip
         _Ramp_Up_Slip_Error_Trigger
                     _Rotor_Slip_Cal
                         _Start_Stop
           _Turbine_OverLoaded_Error
                 _Turbine_Over_Speed
              _Turbine_Restore_Check
                _Turbine_Under_speed
                 _VFD_PS_ON_Function
                 _VFD_Run_Time_Error
           _Wind_Speed_Error_Trigger
 ---------------------------------------------------------------------------------
 (3) _Wind_Speed_Error_Trigger                             0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _VFD_Run_Time_Error                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _VFD_PS_ON_Function                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Turbine_Under_speed                                  0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Turbine_Restore_Check                                0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Turbine_Over_Speed                                   0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Turbine_OverLoaded_Error                             0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Start_Stop                                           0     0      0    6386
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (3) _Rotor_Slip_Cal                                       0     0      0   60415
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (3) _Ramp_Up_Slip_Error_Trigger                           0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Ramp_Up_Slip                                         0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Pitch_PS_ON_Function                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Pitch_Feedback                                       0     0      0    6386
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (3) _Motor_Slip_Cal                                       0     0      0   63045
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2630
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _Grid_UV                                              0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Phase_Sequence                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Grid_Over_Current                                    0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_OV                                              0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Minimum_Power                                   0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Maximum_Power                                   0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Frequency                                       0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Generator_RPM                                        0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Generator_One_Feedback                               0     0      0    6386
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (3) _DC_Bus_Voltage                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Communication_Error                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Error_Monitor                                 0     0      0    7455
                    _int_eeprom_read
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (5) _int_eeprom_write                                     4     0      4    6386
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _int_eeprom_read                                      4     2      2    1069
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Temp_Read                                           12    12      0   63147
                                             84 BANK0     12    12      0
                           _Read_Adc
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Rampup_state_function                                0     0      0   40594
                            _RAMP_UP
 ---------------------------------------------------------------------------------
 (2) _RAMP_UP                                              1     1      0   40594
                                             84 BANK0      1     1      0
                      _Pitch_Release
                   _Turbine_Pitching
                      _VFD_Data_Kill
                   _VFD_Freq_Step_up
 ---------------------------------------------------------------------------------
 (3) _VFD_Freq_Step_up                                     0     0      0   40594
                            ___ftdiv
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) _VFD_Data_Kill                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Turbine_Pitching                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Pitch_Release                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _R_PF_Calc                                            6     6      0   76331
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _R_PF_Avg                                            93    93      0  345029
                                              0 BANK6     84    84      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                                _cos
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0      31
                           _I2C_Init
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            1     1      0      31
                                              0 BANK0      1     1      0
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (5) _i2c_WaitForIdle                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Data_communication                             1     1      0      31
                                              1 BANK0      1     1      0
                        _usart2_init
                        _usart_str_2
 ---------------------------------------------------------------------------------
 (2) _usart_str_2                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _usart2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RPM_Data_Kill                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Power_Factor                                         3     3      0   59411
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _Power_Calc                                          18    18      0  127035
                                              0 BANK1      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                19    16      3   66144
                                             81 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftneg (ARG)
                            ___ftsub
 ---------------------------------------------------------------------------------
 (1) _Phase_Sequence                                       0     0      0      31
                           _Read_Adc
 ---------------------------------------------------------------------------------
 (2) _Read_Adc                                             5     3      2      31
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _PM_Timer_Initialization                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PM_IO_Initialization                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PM_ADC_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IO_Initiate                                          0     0      0       0
                  _Generator_IO_init
                _Pitch_Solenoid_init
               _Power_Meter_Error_IO
              _VFD_Contactor_IO_init
                       _VFD_Error_IO
 ---------------------------------------------------------------------------------
 (2) _VFD_Error_IO                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _VFD_Contactor_IO_init                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Power_Meter_Error_IO                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Pitch_Solenoid_init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Generator_IO_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Generator_RPM_Initiate                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Generator_RPM_Cal                                    2     2      0   79516
                                             84 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    4324
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _Freq_Calc                                            6     6      0   76331
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _Cons_Gene                                            0     0      0   30839
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _B_PF_Calc                                            6     6      0   76331
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _B_PF_Avg                                            93    93      0  345029
                                              0 BANK6     84    84      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3  269335
                                             97 BANK0      3     0      3
                                              0 BANK1      3     3      0
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 13    10      3  219253
                                             84 BANK0     13    10      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   54155
                                             67 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     452
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     756
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6   15780
                                             57 BANK0      9     3      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2880
                                             57 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   53391
                                             57 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3774
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6   15059
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6   34668
                                             75 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6   33842
                                             45 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3    1759
                                             35 BANK0      3     0      3
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    9755
                                             69 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2599
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0    3657
                                             20 COMRAM    16    16      0
  _Error_Checking_Interrupt_Overflow
                       _PM_Error_Led
                           ___awtoft
                          i2___ftadd
 ---------------------------------------------------------------------------------
 (9) i2___ftadd                                           12     6      6    1435
                                              8 COMRAM    12     6      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3     734
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _PM_Error_Led                                         0     0      0    1488
                           i2___ftge
 ---------------------------------------------------------------------------------
 (10) i2___ftge                                            9     3      6    1488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) _Error_Checking_Interrupt_Overflow                    0     0      0       0
                   _Capacitor_Adding
                       _VFD_IO_Error
 ---------------------------------------------------------------------------------
 (10) _VFD_IO_Error                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Capacitor_Adding                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _B_PF_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sin
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _B_PF_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Cons_Gene
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _EEPROM_Error_Stop
     _Last_3_EEPROM_ERROR_Trigger
       _int_eeprom_write
     _int_eeprom_read
     _int_eeprom_write
   _Freq_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Generator_RPM_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Generator_RPM_Initiate
   _IO_Initiate
     _Generator_IO_init
     _Pitch_Solenoid_init
     _Power_Meter_Error_IO
     _VFD_Contactor_IO_init
     _VFD_Error_IO
   _OSCILLATOR
   _PM_ADC_Initialization
   _PM_IO_Initialization
   _PM_Timer_Initialization
   _Phase_Sequence
     _Read_Adc
   _Power_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _sqrt
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _Power_Factor
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
   _RPM_Data_Kill
   _RS485_Data_communication
     _usart2_init
     _usart_str_2
   _RTC_Init
     _I2C_Init
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _R_PF_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sin
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _R_PF_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Rampup_state_function
     _RAMP_UP
       _Pitch_Release
       _Turbine_Pitching
       _VFD_Data_Kill
       _VFD_Freq_Step_up
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _Temp_Read
     _Read_Adc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Timer0_OneSecond_Function
     _EEPROM_Error_Monitor
       _int_eeprom_read
       _int_eeprom_write
     _Error_Checking_One_Second
       _Communication_Error
       _DC_Bus_Voltage
       _Generator_One_Feedback
         _int_eeprom_write
       _Generator_RPM
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Frequency
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Maximum_Power
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Minimum_Power
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_OV
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Over_Current
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Phase_Sequence
       _Grid_UV
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Motor_Slip_Cal
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lbtoft
           ___ftpack
       _Pitch_Feedback
         _int_eeprom_write
       _Pitch_PS_ON_Function
       _Ramp_Up_Slip
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Ramp_Up_Slip_Error_Trigger
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Rotor_Slip_Cal
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Start_Stop
         _int_eeprom_write
       _Turbine_OverLoaded_Error
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Turbine_Over_Speed
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Turbine_Restore_Check
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Turbine_Under_speed
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _VFD_PS_ON_Function
       _VFD_Run_Time_Error
       _Wind_Speed_Error_Trigger
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _Error_Scan_Running
       _EEPROM_Error_Stop
         _Last_3_EEPROM_ERROR_Trigger
           _int_eeprom_write
         _int_eeprom_read
         _int_eeprom_write
       _Stopping_state_function
         _Error_Flag_Kill
         _Start_Stop
           _int_eeprom_write
         _Turbine_Pitching
         _VFD_Data_Kill
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _Last_Five_Error
     _Stopping_state_function
       _Error_Flag_Kill
       _Start_Stop
         _int_eeprom_write
       _Turbine_Pitching
       _VFD_Data_Kill
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _Turbine_Ramp_up_1_Second
       _Error_Scan_Ramp_up
         _EEPROM_Error_Stop
           _Last_3_EEPROM_ERROR_Trigger
             _int_eeprom_write
           _int_eeprom_read
           _int_eeprom_write
       _Five_Sec_Delay
       _One_Sec_Delay
       _Two_Sec_Delay
     _Turbine_Start_up_1_Second
       _Error_Scan_start_up
       _VFD_Data_Kill
     _Two_Sec_Delay
     _UART_Data
       _BCDtoI
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _RTC_GetDateTime
         _I2C_Read
           _i2c_Ack
           _i2c_NoAck
           _i2c_WaitForIdle
         _I2C_Start
         _I2C_Stop
         _I2C_Write
           _i2c_WaitForIdle
       _UART_Data_String
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftsub
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
             _floor (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
                 ___ftadd (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _usart_str
         _usart_str_1
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _usart_str
       _usart_str_1
     _VFD_RS485_Data
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lwtoft
         ___ftpack
     _VFD_RS485_Data_filter
       _VFD_RS485_Data
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft
           ___ftpack
     _Wind_Average
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _Timer1_Initiate
   _Timer7_Init
   _Turbine_RPM_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Turbine_RPM_Initiate
   _Volt_Curr_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Volt_Curr_Read
     _Read_Adc
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _Wind_Speed_2_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Wind_Speed_2_Initiate
   _Wind_Speed_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Wind_Speed_Initiate
   _Y_PF_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sin
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _Y_PF_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _startup_state_function
   _usart_init

 _ISR (ROOT)
   _Error_Checking_Interrupt_Overflow
     _Capacitor_Adding
     _VFD_IO_Error
   _PM_Error_Led
     i2___ftge
   ___awtoft
     i2___ftpack
   i2___ftadd
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100     54      CC      18       79.7%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      FE      16       99.2%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      FF      14       99.6%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      FF      11       99.6%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FF       9       99.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1D      C9       7       78.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     64      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      48       1       76.6%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     678      12        0.0%
DATA                 0      0     678       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Dec 22 12:11:12 2017

                                _KW_Counter 0168                                  _RPM_Time_1 05D4  
                   _Gf_Yellow_Phase_Voltage 0666                             ?_Grid_Frequency 0025  
                     __end_of_Pitch_Release ACCE                                ___altoft@exp 00A1  
                                         _i 0021                          __size_of_I2C_Start 0008  
                          ?_i2c_WaitForIdle 0025                               ___altoft@sign 00A2  
             __size_of_Power_Meter_Error_IO 000A                          __size_of_I2C_Write 0012  
                                        _T1 05D8                                          _KW 0022  
                                        _PS 001D                              ?_RPM_Data_Kill 0025  
                              ___awdiv@sign 006B                         ___wmul@multiplicand 0070  
                               __CFG_BORV$0 000000                                _PM_Error_Led 5244  
                                i2___ftpack 9FFA                    _TRPM_Under_Speed_Counter 0180  
                          ??_Wind_Speed_Cal 00B4            __end_of_Turbine_OverLoaded_Error AA22  
                ?_Turbine_Start_up_1_Second 0025                         _Ten_Sec_RampUp_Flag 0183  
                              ___ftadd@exp1 0098                                ___ftadd@exp2 0097  
                              ___ftadd@sign 0096                                         _GIE 007F97  
                                       _RB0 007C08                                         _RB1 007C09  
                                       _RC0 007C10                                         _RB2 007C0A  
                                       _RA4 007C04                                         _RA5 007C05  
                                       _RD0 007C18                                         _RB4 007C0C  
                                       _RD1 007C19                                         _RB5 007C0D  
                                       _RE0 007C20                                         _RD2 007C1A  
                                       _RE1 007C21                                         _RC5 007C15  
                                       _RF1 007C29                                         _RF3 007C2B  
                                       _RE7 007C27                                         _B_C 0280  
                                       _RF7 007C2F                                         _KVA 0218  
                                       _B_V 0282                                         _ISR 0008  
                                       _R_C 029A                                         _R_V 029C  
                               _usart2_init AE0A                                         _Y_C 02B2  
              __end_of_Pitch_PS_ON_Function AD72                                         _Y_V 02B4  
           __end_of_PM_Timer_Initialization B16E                              _KW_Counter_Max 0169  
                                       _cos 9820                                         _sin 5B96  
                                       _rtc 05F2                                ___awmod@sign 0065  
                                       prod 000FF3                          _Turbine_Over_Speed AADA  
                             _Two_Sec_Delay AF48                                         wreg 000FE8  
                 __size_of_Capacitor_Adding 007A                                  _TXSTA2bits 000F21  
                                _OV_Counter 0171                  __size_of_EEPROM_Error_Stop 032E  
                               _RPM_counter 00EB                               _Volt_Curr_Avg 38F2  
                                      ?_ISR 0025                      _Generator_One_Feedback A834  
                              ___ftdiv@cntr 00AE                                ___ftdiv@sign 00B3  
                                      l1022 B0A0                                        l1040 B1A0  
                                      l1016 B096                                        l1008 ADE6  
                                      l1034 B154                                        l1028 B14A  
                                      l1046 B198                                        l2440 AD08  
                                      l2453 B0F0                                        l2447 B0E2  
                                      l2465 B0FE                                        ?_cos 00C1  
                                      l6105 8F0A                                        l6140 95C2  
                                      l7021 900E                                        l7013 8F9C  
                                      l7016 8FC6                                        l7017 8FDC  
                                      l6330 99FC                                        l6155 8886  
                                      l6316 A860                                        l6228 869E  
                                      l7036 A756                                        l6309 A806  
                                      l3774 4A6E                                        l6335 9A58  
                                      l3792 51D0                                        l3784 4AF0  
                                      l3793 51B6                                        l3779 4A9A  
                                      l6284 9328                                        l9210 4D50  
                                      l9211 4D06                                        l9204 4C24  
                                      l9205 4BDA                                        l9215 4E7C  
                                      l9216 4E32                                        l9253 6DF2  
                                      l9192 AC28                                        l9264 6BC4  
                                      l9275 7020                                        ?_sin 00B4  
                                      _ADON 007E10                                        STR_1 FFF8  
                                      STR_2 FFF5                                        STR_3 FCBD  
                                      STR_4 FFC6                                        STR_5 FFC6  
                                      STR_6 FFC6                                        STR_7 FFC6  
                                      STR_8 FFC6                                        STR_9 FFF2  
                              _TRPM_Cap_Old 0132                                _TRPM_Cap_New 0130  
                           __end_of_RAMP_UP 908E                                printf@tmpval 01B5  
                           ?_Pitch_Feedback 0025                         ?_Turbine_Over_Speed 0025  
                                      _PEIE 007F96                                        _KW_1 0585  
                                      _KVAr 04AB                                        _TXIF 007CF4  
                                      _GfKw 055B                     __size_of_Motor_Slip_Cal 010A  
                                      _Data 0600                             ?_Rotor_Slip_Cal 0025  
                           _Avg_RYB_Current 0100                                        _Y_KW 02F0  
                           _Power_Calc$8167 01B0                             _Power_Calc$8168 01AD  
                           _Power_Calc$8169 01AA                                        _Temp 0221  
                                Read_Adc@ch 0064                                        _Wind 03DE  
                                      _data 05E4                _Gc_Turbine2Wheel_Ratio_Error 02CD  
                                      _main 75F4                   __size_of_Turbine_Pitching 0004  
                              ___ftpack@arg 0060                                 _usart_str_1 B0DE  
                               _usart_str_2 B0FA                                        cos@f 00C1  
                              ___ftpack@exp 0063                             _VFD_Bus_Voltage 013E  
                          __end_of_I2C_Init B0C2                            __end_of_I2C_Read AE0A  
                     _Rampup_state_function B1B6                                        fsr0h 000FEA  
                                      fsr1h 000FE2                                        fsr0l 000FE9  
                                      fsr2h 000FDA                                        fsr1l 000FE1  
                                      indf2 000FDF                                        fsr2l 000FD9  
                                      btemp 0049                                        _sqrt 728A  
                               _GfR_current 055E                _Generator_One_Feedback_Error 0164  
                          __end_of_I2C_Stop B19E                                i2___ftadd@f1 002D  
                              i2___ftadd@f2 0030                       _Timer1_Time_per_Count 05A3  
                                      pclat 000FFA                                        sin@f 00B4  
                              i2___ftge@ff1 0025                                        sin@y 00B7  
                              i2___ftge@ff2 0028                                        prodh 000FF4  
                                      prodl 000FF3                           ?_Wind_Speed_2_Cal 0025  
                                      start 0466                                 _Gi_TRPM_Cap 05CC  
                               ?_OSCILLATOR 0025                             _Avg_RYB_Voltage 0200  
                             __CFG_MCLRE$ON 000000                          ??_Wind_Speed_2_Cal 00B4  
                              ___ftmul@cntr 0081                                ___param_bank 000010  
                           __end_of_i2c_Ack B15A                                ___ftmul@sign 0082  
                           __end_of_Grid_OV 809A                             __end_of_Grid_UV 7F32  
                                _Gen_Theory 0215                               _GCR_slip_flag 02BF  
                          ??_DC_Bus_Voltage 0060                                _Gf_TRPM_Time 0570  
                        __size_of_B_PF_Calc 022E                                       ??_ISR 0039  
                __end_of_VFD_Run_Time_Error AC12                              _Temp_Read$8073 00B4  
                            _Temp_Read$8074 00B7                              _Temp_Read$8075 00BA  
                            _Temp_Read$8076 00BD                                ___fttol@exp1 0098  
                            _Volt_Curr_Flag 0198                                       ??_cos 00C4  
                              ___fttol@lval 0094                                       ??_sin 00B7  
                            _Volt_Curr_Read 4B40                        ??_Turbine_Over_Speed 00A2  
                              _BAUDCON2bits 000F20                 _Timer1_OF_counter_Generator 03F1  
                                     l10222 58A0                                       l20000 ABA4  
                                     l10240 ADC2                                       l10234 AF06  
                                     l10243 ADCC                                       l20012 9716  
                                     l20100 A35A                                       l10317 1710  
                                     l11038 8DA2                                       l20102 A360  
                                     l10351 1584                                       l20008 96D6  
                                     l20032 84E4                                       l20112 A5F6  
                                     l10600 7C3C                                       l20018 975A  
                                     l20050 8576                                       l20106 A3A4  
                                     l20114 A606                                       l20060 85A6  
                                     l20300 104C                                       l20062 85B6  
                                     l20054 858A                                       l20126 A3EA  
                                     l21110 88D6                                       l20214 AE00  
                                     l20222 0D50                                       l10632 8B74  
                                     l20064 85C0                                       l21200 7F1C  
                                     l20216 AE04                                       l20080 9A9A  
                                     l10704 792A                                       l20400 1466  
                                     l20232 0D9C                                       l20240 0E1A  
                                     l21202 7F24                                       l21114 890A  
                                     l20146 5674                                       l20154 56C8  
                                     l20090 9AF4                                       l20082 9AA0  
                                     l20402 147A                                       l20306 1066  
                                     l20250 0E90                                       l20226 0D66  
                                     l20068 85DC                                       l21220 7FD8  
                                     l21212 7FB2                                       l21300 9D88  
                                     l21124 895A                                       l20180 583A  
                                     l20172 57D2                                       l21060 9C46  
                                     l20420 1566                                       l20412 1536  
                                     l20340 11CE                                       l20332 115E  
                                     l20316 10AC                                       l20252 0EAA  
                                     l10661 6646                                       l10670 671C  
                                     l22110 5ED0                                       l21230 8066  
                                     l21222 7FE4                                       l21302 9D92  
                                     l20078 9A8A                                       l20510 190C  
                                     l20502 18C0                                       l20430 15AC  
                                     l20414 1544                                       l20406 14A2  
                                     l20350 1258                                       l20270 0F04  
                                     l20246 0E46                                       l10655 65E4  
                                     l22120 5F08                                       l22104 5EA4  
                                     l21320 A8EC                                       l21160 AD4E  
                                     l21136 A702                                       l20520 195A  
                                     l20512 1918                                       l20504 18CA  
                                     l20440 16E6                                       l20424 1588  
                                     l20360 12D0                                       l20344 11FC  
                                     l20256 0EBA                                       l10729 AE5C  
                                     l10690 8474                                       l20602 83D2  
                                     l22210 906A                                       l22122 5F20  
                                     l22114 5EE4                                       l21322 A8FA  
                                     l21250 A556                                       l21218 7FD0  
                                     l21146 A732                                       l20194 58BE  
                                     l20186 5894                                       l20178 582E  
                                     l22050 9F42                                       l22042 9F26  
                                     l21074 9C80                                       l20098 A34A  
                                     l20442 16F4                                       l20434 15FE  
                                     l20418 1552                                       l20370 132E  
                                     l20346 1212                                       l20282 0F92  
                                     l20266 0EF2                                       l20258 0EC0  
                                     l10659 661E                                       l22116 5EFC  
                                     l22108 5EB8                                       l21252 A55E  
                                     l21244 A538                                       l21236 8084  
                                     l21340 8694                                       l21500 87C8  
                                     l20524 19EA                                       l20516 1932  
                                     l20508 1902                                       l20356 12A2  
                                     l20348 1242                                       l20292 0FE8  
                                     l20284 0F9E                                       l20268 0EFE  
                                     l23012 9390                                       l20622 8432  
                                     l21318 A8E4                                       l21262 929C  
                                     l21238 808C                                       l21350 8728  
                                     l21334 8678                                       l21182 7E68  
                                     l22038 9F16                                       l20470 17B0  
                                     l20462 1784                                       l20446 1702  
                                     l20374 1394                                       l20294 1002  
                                     l20286 0FA4                                       l20278 0F6C  
                                     l20526 1A00                                       l23022 93B2  
                                     l10679 6746                                       l10871 5D28  
                                     l10872 5E20                                       l22232 9894  
                                     l21328 8600                                       l21184 7E70  
                                     l21176 7E4A                                       l21504 87F4  
                                     l20552 99BA                                       l21360 A9B0  
                                     l20392 1436                                       l20376 139A  
                                     l20288 0FBC                                       l22064 43DE  
                                     l23032 93DC                                       l10697 7866  
                                     l22410 80E2                                       l21530 8DB8  
                                     l21282 930C                                       l21274 92E0  
                                     l21266 92B4                                       l21194 7EFE  
                                     l21186 7E7C                                       l21434 AB20  
                                     l21362 A9B8                                       l21522 ABFA  
                                     l21098 8878                                       l10698 78AA  
                                     l20490 1854                                       l20482 17FC  
                                     l20458 175C                                       l20298 1008  
                                     l20538 AD24                                       l23026 93C6  
                                     l23210 775E                                       l10779 9B06  
                                     l22420 8154                                       l21372 AB74  
                                     l21348 871E                                       l21292 B018  
                                     l21380 8BC2                                       l21508 8822  
                                     l20580 9A3C                                       l21444 AA0C  
                                     l20468 17AA                                       l20396 1458  
                                     l20388 13E6                                       l22092 45F6  
                                     l22068 4572                                       l23036 93EC  
                                     l23220 7798                                       l23212 7774  
                                     l23140 767C                                       l23132 7666  
                                     l23116 763A                                       l10789 A3B6  
                                     l20670 90DC                                       l20662 8D20  
                                     l20654 8CEE                                       l22406 80DA  
                                     l22254 733E                                       l22182 9008  
                                     l22174 8FE2                                       l21470 AACC  
                                     l20582 9A42                                       l21446 AA14  
                                     l20486 1824                                       l20398 145E  
                                     l21710 04A2                                       l21702 045A  
                                     l23038 93F2                                       l22510 4EC6  
                                     l23206 7758                                       l23126 7654  
                                     l20672 9168                                       l22440 81F4  
                                     l22432 81A4                                       l22424 8178  
                                     l22416 8130                                       l21456 AA68  
                                     l21384 8BDE                                       l20496 1888  
                                     l22504 4E78                                       l20658 8D02  
                                     l21562 5BC4                                       l22442 81FA  
                                     l23066 A22C                                       l22610 24AC  
                                     l22530 6CD6                                       l21458 AA70  
                                     l21482 9FF2                                       l20586 9A52  
                                     l21810 08A2                                       l21802 085A  
                                     l21730 0556                                       l21722 050E  
                                     l21714 04C6                                       l21706 047E  
                                     l20596 8398                                       l22436 81CC  
                                     l22428 817C                                       l23068 A230  
                                     l21468 AAC4                                       l21492 8788  
                                     l22460 4B42                                       l23180 76FA  
                                     l23156 76A8                                       l23148 7692  
                                     l21574 5CC2                                       l22710 6FB0  
                                     l22518 7132                                       l10998 72D6  
                                     l22534 6D82                                       l22198 9050  
                                     l21478 9FA2                                       l21806 087E  
                                     l21750 060A                                       l21742 05C2  
                                     l21734 057A                                       l21726 0532  
                                     l21718 04EA                                       l22462 4B70  
                                     l22622 6B54                                       l23174 76E0  
                                     l10999 72C2                                       l21488 875A  
                                     l21816 08C6                                       l22472 4C20  
                                     l23192 7728                                       l23168 76CE  
                                     l22706 6F04                                       l20962 A13E  
                                     l21818 08E2                                       l21770 06BE  
                                     l21762 0676                                       l21754 062E  
                                     l21746 05E6                                       l21738 059E  
                                     l21690 03EE                                       l22482 4CA4  
                                     l22466 4B78                                       l22618 6AA8  
                                     l23186 7714                                       l22820 4F52  
                                     l22900 49E6                                       l22492 4D9A  
                                     l22476 4C6E                                       l21790 0772  
                                     l21782 072A                                       l21774 06E2  
                                     l21766 069A                                       l21758 0652  
                                     l21694 0412                                       l22494 4DC8  
                                     l22478 4C9C                                 _GfY_current 0567  
                                     l22808 8A44                                       l22832 50BE  
                                     l20992 8EF8                                       l22904 4A88  
                                     l22488 4D4C                                       l21786 074E  
                                     l21778 0706                                       l21698 0436  
                                     l22914 4AC6                                       l22498 4DD0  
                                     l21796 0796                                       l21972 A588  
                                     l22908 4AA6                                       l22846 51DC  
                                     l22838 5124                                       l21798 0836  
                                     l22918 4AD8                                       l22934 615C  
                                     l22952 63CA                                       l22786 2C82  
                                     l22794 97FA                                       l21986 958E  
                                     l21978 9534                                       l22874 481A  
                                     l22698 1CD6                                       l22972 7A1C  
                                     l22982 7ABE                                       l22976 7A68  
                                     l22968 79D0                                       l22888 4962  
                                     l19500 8AD8                                       l22988 AFDA  
                                     l19510 8B66                                       l19502 8B08  
                                     l19522 8B9A                                       l19506 8B28  
                                     l19516 8B7E                                       l19508 8B58  
                                     l19604 67BE                                       l19620 8274  
                                     l19614 823A                                       l19552 662C  
                                     l19720 A1A0                                       l19712 A17A  
                                     l19546 65F2                                       l19634 82C2  
                                     l19810 5B48                                       l19802 5A58  
                                     l19580 66D4                                       l19644 8300  
                                     l19732 A1E6                                       l19724 A1C4  
                                     l19716 A18E                                       l19708 A16A  
                                     l19494 8AB6                                       l19574 66AC  
                                     l19558 663C                                       l19638 82E0  
                                     l19910 78F4                                       l19670 9912  
                                     l19718 A19A                                       l19830 40BA  
                                     l19576 66BA                                       l19568 667E  
                                     l19648 831E                                       l19680 9942  
                                     l19664 98FC                                       l19728 A1D2  
                                     l19824 3FE8                                       l19498 8ACA  
                                     l19594 6770                                       l19586 6702  
                                     l19578 66C8                                       l19906 78E0  
                                     l19842 425C                                       l19834 40E6  
                                     l19588 6710                                       l19932 7B12  
                                     l19916 7910                                       l19676 9930  
                                     l19692 9980                                       l19860 AF3E  
                                     l19926 7AEC                                       l19918 7920  
                                     l19870 77D8                                       l19678 993C  
                                     l19696 9994                                       l19688 9972  
                                     l19848 432E                                       l19786 9250  
                                     l19970 7C06                                       l19954 7BBA  
                                     l19946 7B66                                       l19876 7812  
                                     l19990 A2CC                                       l19966 7BF2  
                                     l19976 7C22                                       l19978 7C32  
                                     l19988 A2BC                                       ?_main 0025  
                           __end_of___awdiv 999E                                       _EEADR 000F62  
                           __end_of___ftadd 67E4                                       STR_10 FFC6  
                                     STR_11 FFC6                                       STR_12 FFF2  
                                     STR_20 FFBF                                       STR_13 FFF2  
                                     STR_21 FFC6                                       STR_30 FFF2  
                                     STR_22 FFC6                                       STR_14 FFBF  
                                     STR_31 FFF2                                       STR_23 FFC6  
                                     STR_15 FFD4                                       STR_16 FFD4  
                                     STR_24 FFC6                                       STR_40 FFF5  
                                     STR_32 FFF5                            __end_of_B_PF_Avg 31A6  
                                     STR_17 FFD4                                       STR_25 FFC6  
                                     STR_33 FF55                                       STR_41 FCCF  
                                     STR_18 FFBF                                       STR_26 FFC6  
                                     STR_50 FFF5                                       STR_42 FFF5  
                                     STR_34 FFF5                                       STR_19 FFBF  
                                     STR_27 FFC6                                       STR_51 FF6F  
                                     STR_43 FED7                                       STR_35 FEA4  
                                     STR_28 FFF2                                       STR_60 FFF5  
                                     STR_52 FFF5                                       STR_44 FFF5  
                                     STR_36 FFF5                             __end_of___awmod A1F0  
                                     STR_29 FFF2                                       STR_45 FFDF  
                                     STR_61 FFA3                                       STR_53 FF95  
                                     STR_37 FEAF                                       STR_70 FFF5  
                                     STR_62 FFF5                                       STR_54 FFF5  
                                     STR_46 FFF5                                       STR_38 FFF5  
                                     STR_39 FF5E                                       STR_63 FEB9  
                                     STR_71 FE99                                       STR_47 FE78  
                                     STR_55 FE6D                                       STR_80 FFF5  
                                     STR_72 FFF5                                       STR_64 FFF5  
                                     STR_56 FFF5                                       STR_48 FFF5  
                                     STR_73 FF31                                       STR_65 FF13  
                                     STR_81 FE83                                       STR_57 FE62  
                                     STR_49 FDC3                                       STR_90 FFF5  
                                     STR_82 FFF5                                       STR_74 FFF5  
                                     STR_66 FFF5                                       STR_58 FFF5  
                                     STR_75 FF8E                                       STR_91 FF3A  
                                     STR_67 FEC3                                       STR_83 FDD0  
                                     STR_59 FDA7                                       STR_92 FFF2  
                                     STR_84 FFF5                                       STR_76 FFF5  
                                     STR_68 FFF5                                       STR_93 FFF2  
                                     STR_85 FF7F                                       STR_69 FE57  
                                     STR_77 FE35                                       STR_94 FFF2  
                                     STR_86 FFF5                                       STR_78 FFF5  
                                     STR_95 FFF2                                       STR_87 FF9C  
                                     STR_79 FD99                                       STR_96 FFF2  
                                     STR_88 FFF5                                       STR_97 FFF2  
                                     STR_89 FF67                                       STR_98 FFBF  
                                     STR_99 FFF2                             __end_of___ftdiv 84AA  
                           __end_of___ftneg AE6A                             __end_of___lldiv 9B18  
                                     ?_sqrt 00B1                             __end_of___ftmul 835E  
                                     _T0CON 000FD5                             ___awdiv@divisor 0068  
                           __end_of___llmod A3C8                             __end_of___ftsub ABCE  
                           __end_of___fttol 85EE                                       u13311 77B4  
                                     u14050 10F2                                       u13331 77EE  
                                     u14055 10E6                                       u14240 157C  
                                     u12731 6592                                       u13700 A41C  
                                     u12741 65B0                                       u13541 84C0  
                                     u13560 850A                                       u15400 A6F4  
                                     u14610 9A50                                       u13708 A420  
                                     u14700 8D12                                       u12941 8216  
                                     u13565 8500                                       u14631 8374  
                                     u12961 8250                                       u13770 5816  
                                     u13930 0F3E                                       u14651 83AE  
                                     u13790 587E                                       u14735 9494  
                                     u15480 AD64                                       u13937 0F34  
                                     u18027 903A                                       u16460 5CBC  
                                     u18037 A250                                       u16470 5CBE  
                                     u13990 0FDE                           _Pitch_EP_Err_Flag 00E9  
                                     u18047 A282                                       _T7CON 000F3D  
                       _Turbine_Under_speed A96A                                       u13997 0FD4  
                                     u17630 794C                                       u17640 79E0  
                                     u15880 A8C4                                       u17650 7A2C  
                                     u17810 9422                                       u17660 7A7E  
                                     u17840 A218                                       u17980 7796  
                               _GiMinutes_1 00DB                                 _GiMinutes_2 0013  
                               _GiMinutes_3 00DD                                       _BV_PS 027E  
                           ___awdiv@counter 006A                                       _KVA_1 057F  
                                     _B_Deg 0642                                       _B_Rad 0522  
                                     _TX1IF 007CF4                                       _TX2IF 007D24  
                            ?_Two_Sec_Delay 0025                                       _PORTD 000F83  
                                     _GcMin 015F                                       _GcSec 0161  
                        __end_ofsin@coeff_a FC10                                       _GiDay 05CA  
                        __end_ofsin@coeff_b FC1C                                       _Gf_KW 0651  
                                     _GfKva 0555                                       _TXREG 000FAD  
                                     _Check 02B6                                       _RV_PS 0298  
                                     _R_Deg 0669                                       _R_Rad 0597  
                                     _YV_PS 02B0                                       _Y_Deg 0672  
                              ___lltoft@exp 0070                                       _Dummy 05C4  
                                     _Y_Rad 05BE                          __size_of_UART_Data 0D40  
                                     _Hours 02D0                             _GCB_phasev_flag 02B9  
                            ?_Volt_Curr_Avg 0025          __end_of_Ramp_Up_Slip_Error_Trigger 8864  
                _Ramp_Up_Slip_Error_Trigger 872E                               _Y_V_Avg_Steps 04F9  
                             ___awtoft@sign 0030                __end_of_Turbine_RPM_Initiate B12E  
                           __end_of_dpowers FBB3                                       _floor 8CB2  
                                     _frexp A3C8                                       _errno 05F0  
                                     _scale 3E64                             __end_of_isdigit AF48  
                             ___ftpack@sign 0064                            __end_of_RTC_Init B04A  
                                     _putch B0EC                     __end_of_Last_Five_Error B00A  
                ?_Timer0_OneSecond_Function 0025                           __end_of_I2C_Start B1A6  
                         __end_of_I2C_Write B0A0                            _GRPM_Pulse_width 02F3  
                                     sin@x2 00BD                                       tablat 000FF5  
                          __end_ofi2___ftge A4E8                           ??_Timer1_Initiate 0060  
                    __size_of_One_Sec_Delay 002A                                       sqrt@a 00B1  
                   __size_of_VFD_RS485_Data 0072                                       sqrt@i 00BD  
                                     sqrt@q 00BE                                       sqrt@x 00C1  
                                     sqrt@z 00BA                                       status 000FD8  
                          __end_of_R_PF_Avg 29D0                        ?_Turbine_Under_speed 0025  
                               _Bcurr_V_Old 020C                                 _Bcurr_V_New 00F4  
                        __size_ofi2___ftadd 01AC                           ??_int_eeprom_read 0062  
                          _wind_1_Temp_flag 019C                                 _R_Gap_Ratio 010F  
                  __size_of_Error_Flag_Kill 00CA                       _Rotor_Slip_Error_Flag 0179  
                           __initialization 9C86            __end_of_RS485_Data_communication A290  
                    __end_of_Volt_Curr_Read 4EDE                            __end_of_Y_PF_Avg 21FA  
                              __end_of_main 779E                             ??_RPM_Data_Kill 0060  
                        __size_of_R_PF_Calc 022E                                __end_of_sqrt 7448  
            __size_of_VFD_RS485_Data_filter 0082                            _VFD_Freq_Step_up 8DB0  
             __end_of_VFD_RS485_Data_filter A5EE                            __end_of_Read_Adc AC52  
                               _Avg_Current 063C                        _Gc_TRPM_Rampup_Error 02CC  
                          _wind_2_Temp_flag 019D                                 ?i2___ftpack 0025  
                             _Initial_Check 02D1                                      ??_main 00C4  
                             ___fttol@sign1 0093                  ??_Wind_Speed_Error_Trigger 00A2  
       __end_of_Last_3_EEPROM_ERROR_Trigger 9270                 _Last_3_EEPROM_ERROR_Trigger 9182  
               _Timer1_OF_counter_Wind_temp 03FB                            _Gf_Turbine_RPM_1 0576  
                                    ??_sqrt 00B4                               __activetblptr 000003  
                      _Wind_Cut_Out_Counter 019A                                 _Avg_Voltage 063F  
                              _WRPM_Counter 02A8                      _VFD_SHORT_CIRCUIT_fLAG 02A6  
                      __size_of__tdiv_to_l_ 019E         _Gi_Timer1_OF_counter_Generator_Temp 03E7  
                       __size_of_OSCILLATOR 0006                           _Timer0_RS485_flag 05DC  
                                 ??_RAMP_UP 00B4                 ??_Error_Checking_One_Second 00B4  
                             _Turbine_state 00F0                          __size_of_Cons_Gene 010C  
                               _S_S_Counter 017A                         _Error_Scan_start_up 8EA6  
                        __size_of_Y_PF_Calc 022E                     ??_Wind_Speed_2_Initiate 0060  
                                    _ADCON0 000FC2                                      _ADCON1 000FC1  
                                    _ADCON2 000FC0                                      _CCP1IE 007D19  
                                    ?_floor 00A3                                      _CCP1IF 007D21  
                                    _CCP3IE 007DB0                                      _CCP3IF 007DB8  
                              ?_IO_Initiate 0025                                      _CCP4IE 007DB1  
                                    _CCP4IF 007DB9                                      _CCP5IE 007DB2  
                                    _CCP5IF 007DBA                                      _CCP6IE 007DB3  
                                    _CCP6IF 007DBB                                      _CCP7IE 007DB4  
                                    ?_frexp 0060                                      _CCP7IF 007DBC  
                                    _CCP8IE 007DB5                                      _CCP8IF 007DBD  
                          __end_of___altoft A32E                            ___llmod@dividend 006D  
                                    ?_scale 0083                                      STR_100 FFF2  
                                    STR_101 FFF2                                      STR_110 FFF2  
                                    STR_102 FFF2                                      STR_111 FFF2  
                                    STR_103 FFF2                                      STR_120 FFF2  
                                    STR_112 FFF2                                      STR_104 FFF2  
                                    STR_200 FEEB                                      STR_121 FFF2  
                                    STR_113 FFF2                                      STR_105 FFF2  
                                    STR_201 FFF5                                      STR_122 FFF2  
                                    STR_114 FFF2                                      STR_106 FFF2  
                                    STR_210 FE8E                                      STR_130 FE41  
                                    STR_202 FDDD                                      _ADRESH 000FC4  
                         __end_of_B_PF_Calc 70B4                                      STR_115 FFF2  
                                    STR_107 FFF2                                      STR_211 FFF5  
                                    STR_203 FFF5                                      STR_131 FFF5  
                                    STR_123 FFFD                                      STR_116 FFF2  
                                    STR_108 FFF2                                      STR_124 FFFB  
                                    STR_140 FE29                                      STR_132 FDF7  
                                    STR_212 FDB5                                      STR_220 FC87  
                                    STR_204 FC1C                                      STR_125 FFFD  
                                    STR_117 FFF2                                      STR_109 FFF2  
                                    STR_221 FFF5                                      STR_213 FFF5  
                                    STR_205 FFF5                                      STR_141 FFF5  
                                    STR_133 FFF5                                      STR_126 FFFB  
                                    STR_118 FFF2                                      STR_134 FF43  
                                    STR_214 FECD                                      STR_142 FD8B  
                                    STR_150 FD23                                      STR_230 FCE1  
                                    STR_222 FC75                                      STR_206 FC62  
                                    _ADRESL 000FC3                                      STR_119 FFF2  
                                    STR_231 FFF5                                      STR_223 FFF5  
                                    STR_215 FFF5                                      STR_207 FFF5  
                                    STR_151 FFF5                                      STR_143 FFF5  
                                    STR_135 FFF5                                      STR_127 FFF5  
                                    STR_216 FF77                                      STR_128 FF27  
                                    STR_160 FEFF                                      STR_152 FD6E  
                                    STR_136 FD5F                                      STR_144 FD32  
                                    STR_232 FCF2                                      STR_224 FC99  
                                    STR_208 FC4F                                      STR_233 FFFD  
                                    STR_225 FFF5                                      STR_217 FFF5  
                                    STR_209 FFF5                                      STR_161 FFF5  
                                    STR_153 FFF5                                      STR_145 FFF5  
                                    STR_137 FFF5                                      STR_129 FFF5  
                                    STR_234 FFFB                                      STR_170 FFEE  
                                    STR_154 FFB1                                      STR_162 FF09  
                                    STR_138 FE4C                                      STR_146 FD41  
                                    STR_218 FD03                                      STR_226 FC37  
                                    STR_227 FFF5                                      STR_219 FFF5  
                                    STR_171 FFF5                                      STR_163 FFF5  
                                    STR_155 FFF5                                      STR_147 FFF5  
                                    STR_139 FFF5                                      STR_235 FF87  
                                    STR_172 FFE4                                      STR_148 FFCD  
                                    STR_156 FFB8                                      STR_164 FEF5  
                                    STR_180 FE11                                      STR_228 FCAB  
                                    STR_229 FFF5                                      STR_181 FFF5  
                                    STR_173 FFF5                                      STR_165 FFF5  
                                    STR_157 FFF5                                      STR_149 FFF5  
                                    _EEDATA 000F61                                      STR_174 FD52  
                                    STR_166 FFEB                                      STR_158 FFAA  
                                    STR_182 FEE1                                      STR_190 FD7D  
                                    STR_191 FFF5                                      STR_183 FFF5  
                                    STR_175 FFF5                                      STR_167 FFF5  
                                    STR_159 FFF5                                      STR_168 FFE9  
                                    STR_192 FFDA                                      STR_184 FE04  
                                    STR_176 FD50                                      STR_193 FFF5  
                                    STR_185 FFF5                                      STR_177 FFF5  
                                    STR_169 FFF5                                      STR_194 FC82  
                                    STR_186 FF4C                                      STR_178 FF1D  
                                    _CCPR1H 000FBD                                      STR_195 FFF5  
                                    STR_187 FFF5                                      STR_179 FFF5  
                                    STR_196 FE1D                                      STR_188 FD13  
                                    STR_197 FFF5                                      STR_189 FFF5  
                                    STR_198 FDEA                                      _CCPR1L 000FBC  
                                    _CCPR3H 000F4B                                      STR_199 FFF5  
                        __size_of_Freq_Calc 01D6                                      _CCPR4H 000F79  
                                    _CCPR5H 000F76                                      _CCPR3L 000F4A  
                                    _CCPR6H 000F73                                      _CCPR4L 000F78  
                        __size_of_i2c_NoAck 000A                                      _CCPR7H 000F70  
                                    _CCPR5L 000F75                                      _CCPR6L 000F72  
                                    _CCPR8H 000F48                                      _EECON2 000F7E  
                                    _CCPR7L 000F6F                                      _CCPR8L 000F47  
                               _R_Current_1 0591                            ___awdiv@dividend 0066  
                                    _ANSEL0 007928                                      _ANSEL1 007929  
                                    _ANSEL2 00792A                                      _ANSEL3 00792B  
                                    _ANSEL4 00792C                                      _ANSEL6 00792E  
                                    _ANSEL8 007920                                      _ANSEL9 007921  
                          __end_of___awtoft AD06                                      ?_putch 0025  
                                    _BCDtoI 9428                            __end_of___ftpack 8BA8  
                          __end_of___lbtoft AE98                                      _GODONE 007E11  
                             ?_Ramp_Up_Slip 0025                            __end_of___lltoft A66A  
                       _DC_Bus_Voltage_Flag 0150                              __CFG_WDTEN$OFF 000000  
                                    i2l4552 042A                            _lcDC_Bus_Counter 02DF  
                                    i2l9295 53EA                        _Grid_Frequency_Error 00E4  
                                    _RCREG2 000F1D           __end_of_Timer0_OneSecond_Function 9428  
                          __end_of___lwtoft AFC6                      ?_Rampup_state_function 0025  
                           _GCR_phasev_flag 02BE                                      _OSCCON 000FD3  
                                    _TEMP_1 05DA                                      _B_Peak 011E  
                                    _B_Curr 00C4                                      _TMR0IE 007F95  
                                    _SPBRG1 000FAF                                      _TMR0IF 007F92  
                                    _SPBRG2 000F1E                                      _TMR1IE 007CE8  
                                    _TMR1IF 007CF0                                      _KVAr_1 0582  
                                    _TMR1ON 007E68                                      _TMR7IE 007DCB  
                                    _TMR7IF 007DD3                       ??_Turbine_Under_speed 00A2  
                                    _TRISB0 007C98                                      _B_Volt 0001  
                                    _TRISB1 007C99                                      _TRISC0 007CA0  
                                    _TRISB2 007C9A                                      _TRISA4 007C94  
                                    _TRISA5 007C95                                      _TRISD0 007CA8  
                                    _TRISC2 007CA2                                      _TRISB4 007C9C  
                                    _TRISD1 007CA9                                      _TRISC3 007CA3  
                                    _TRISB5 007C9D                                      _TRISE0 007CB0  
                                    _TRISD2 007CAA                                      _TRISC4 007CA4  
                                    _TRISE1 007CB1                                      _TRISC5 007CA5  
                                    _TRISF1 007CB9                                      _TRISE3 007CB3  
                                    _TRISF3 007CBB                                      _TRISF4 007CBC  
                                    _TRISE7 007CB7                                      _GcDate 015D  
         __size_of_Turbine_OverLoaded_Error 005C                                   ??_i2c_Ack 0060  
                                    _GiData 028A                                      _TXREG1 000FAD  
                                    _TXREG2 000F1C                                      _GcHour 015E  
                 ?_Turbine_OverLoaded_Error 0025                          _Grid_Maximum_Power AA7E  
                                 ??_Grid_OV 00A2                                   ??_Grid_UV 00A2  
                                    _GcYear 0162                                      _Data_1 0500  
                                    _GfKvar 0558                          _Volt_Curr_Avg$8077 00B4  
                                    _GiYear 03E5                                      _R_Peak 012E  
                                    _R_Curr 00CD                                      _Gfwind 057C  
                                    _R_Volt 0007                        _Pitch_PS_ON_Function AD3C  
                                    _Y_Peak 014A                    _Turbine_Ramp_up_1_Second B07C  
                                    _Y_Curr 00D6                                      _Errors 001B  
                            __CFG_PWRTEN$ON 000000                              __CFG_XINST$OFF 000000  
                             ??_Timer7_Init 0060                                      _Y_Volt 0010  
                                    _Temp_1 02D7                                      _Temp_2 02D8  
                                    _Temp_3 02D9                                      _Temp_4 02DA  
                                    _Temp_5 02DB                                      _Temp_6 02DC  
          __size_of_PM_Timer_Initialization 000A                        ?_Error_Scan_start_up 0025  
                          __end_of__powers_ FC01                    ?_Stopping_state_function 0025  
                            _lc_Avg_Counter 02E0                           __end_of_UART_Data 0D40  
                     I2C_Write@v_i2cData_u8 0060                             ?_Volt_Curr_Read 0025  
                                    ___ftge 9696                         ?_Grid_Maximum_Power 0025  
                                 BCDtoI@BCD 0074                                      ___wmul AD72  
                  __size_of_Turbine_RPM_Cal 03B4                                   ??___awdiv 006A  
                                 ??___ftadd 0093                                   ??___awmod 0064  
                                _Motor_slip 00CA                              _Timer0_counter 05DE  
                   ?_startup_state_function 0025                                   ??___ftdiv 00AB  
                                 ??___ftneg 0086                                      _digit1 05E6  
                                    _digit2 05E8                                      _digit3 05EA  
                                    _digit4 05EC                                      _digit5 05EE  
                                 ??___lldiv 0068                                   ??___ftmul 007A  
                                 ??___llmod 0075                                   ??___ftsub 00B1  
                                 ??___fttol 008E                              _Timer1_counter 013C  
                                _Temprature 0224                                      _fround 58C6  
                                    clear_0 9CBC                                      clear_1 9CC8  
                                    clear_2 9CD6                                      clear_3 9CEA  
                                    clear_4 9CFE                                      clear_5 9D10  
                                    clear_6 9D1C                                      clear_7 9D28  
                          ___awdiv@quotient 006C                          __size_of_Temp_Read 017C  
                           ___awmod@divisor 0062                  _RAMP_UP_TURBINE_CUT_IN_RPM 04B4  
               _lc_Rotor_Slip_Error_Counter 02E3                               _One_Sec_Delay AF72  
                                    _wind_2 04D5                             ___awmod@counter 0064  
                                    _printf 0D40                             ??_Two_Sec_Delay 0060  
                  ??_Generator_RPM_Initiate 0060                                  _Power_Calc 67E4  
                                _Wind_Cap_2 02AE                __size_of_Grid_Phase_Sequence 0020  
                                    floor@i 00A6                                      floor@x 00A3  
                     ___ftmul@f3_as_product 007E                         int_eeprom_read@temp 0062  
                             _B_C_Avg_Steps 04DB                                  _Wind_Spd_2 0230  
                                 ??_isdigit 0060                             ??_Volt_Curr_Avg 00B4  
                                 ?_I2C_Init 0025                                   ?_I2C_Read 0025  
                     _Turbine_Restore_Check 9D38                                  _Wind_Speed 0233  
                         __end_ofi2___ftadd 75F4                              i2___ftadd@exp1 0038  
                            i2___ftadd@exp2 0037                                   ?_I2C_Stop 0025  
                                    sin@sgn 00C0                            _Capacitor_Adding A66A  
                            i2___ftadd@sign 0036                       _Turbine_Restore_Error 0189  
                     _VFD_Contactor_IO_init B178                                __mediumconst FB8A  
                       _Gc_Rotor_Slip_Error 02CB                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                            _TRPM_Frequency 04EA                        ??_Grid_Maximum_Power 00A2  
                                    sqrt@og 00B7                            _Stopping_Counter 017E  
                               _Consumption 02B7                                  _Start_Stop 999E  
                             _B_PF_Avg$8140 06C9                               _B_PF_Avg$8141 0678  
                             _B_PF_Avg$8150 0693                               _B_PF_Avg$8142 067B  
                             _B_PF_Avg$8151 0696                               _B_PF_Avg$8143 067E  
                             _B_PF_Avg$8160 06B1                               _B_PF_Avg$8152 0699  
                             _B_PF_Avg$8144 0681                               _B_PF_Avg$8161 06B4  
                             _B_PF_Avg$8153 069C                               _B_PF_Avg$8145 0684  
                             _B_PF_Avg$8138 06C3                               _B_PF_Avg$8162 06B7  
                             _B_PF_Avg$8154 069F                               _B_PF_Avg$8146 0687  
                             _B_PF_Avg$8139 06C6                               _B_PF_Avg$8163 06BA  
                             _B_PF_Avg$8155 06A2                               _B_PF_Avg$8147 068A  
                             _B_PF_Avg$8164 06BD                               _B_PF_Avg$8156 06A5  
                             _B_PF_Avg$8148 068D                               _B_PF_Avg$8165 06C0  
                             _B_PF_Avg$8157 06A8                               _B_PF_Avg$8149 0690  
                             _B_PF_Avg$8158 06AB                               _B_PF_Avg$8159 06AE  
                         __end_of_R_PF_Calc 6E86                              ??_Ramp_Up_Slip 00A2  
                                _Total_Pf_1 05AC               __size_of_EEPROM_Error_Monitor 0272  
                               _Key_Counter 016C                              _Motor_Slip_Cal 8BA8  
                          ?_Last_Five_Error 0025                         _Gf_Turbine_RPM_Prev 0579  
                         _Gf_TRPM_Frequency 056D                               _One_Time_Flag 0173  
                __end_of_Error_Scan_Ramp_up 9C86                   __size_of_UART_Data_String 074C  
                                _Rotor_slip 00D3                                 _Y_Gap_Ratio 011B  
                                __accesstop 0060                     __end_of__initialization 9D2E  
                                ___altoft@c 0099                            _Turbine_Pitching B1C2  
                                ___ftadd@f1 008D                                  ___ftadd@f2 0090  
                       __size_ofi2___ftpack 00AE                           ?_int_eeprom_write 0060  
                      _Initial_Delay_Second 012A                                  ___ftge@ff1 0099  
                                ___ftge@ff2 009C                 __size_of_VFD_PS_ON_Function 0074  
                          ??_Grid_Frequency 00A2                                eval_poly@res 00A2  
                             ___rparam_used 000001                       __end_of_VFD_Data_Kill AEC6  
                __end_of_Error_Scan_Running 9F4C                                  ___ftdiv@f1 00A5  
                                ___ftdiv@f2 00A8                                  ___ftdiv@f3 00AF  
                     ?_Pitch_PS_ON_Function 0025                                   ?_B_PF_Avg 0025  
              _Gc_Pitch_Coil_Feedback_Error 02CA                       __end_of_Generator_RPM AB82  
                                ___ftneg@f1 0083                                  ___awtoft@c 002D  
                 _Error_Checking_One_Second 94FC                          ??_int_eeprom_write 0064  
                            i2___ftpack@arg 0025                 __end_of_Pitch_Solenoid_init B1AE  
                            i2___ftpack@exp 0028                       ??_Error_Scan_start_up 0060  
                                ___lbtoft@c 006B                      _Gf_Wind_Cut_In_Counter 02CF  
                               _Frequency_1 0528                                  ___ftmul@f1 0074  
                                ___ftmul@f2 0077                                  ___ftsub@f1 00AB  
                                ___ftsub@f2 00AE              __end_of_startup_state_function AFEA  
                                ___fttol@f1 008A                           __end_of_Cons_Gene 8A9C  
                            __pcstackCOMRAM 0025                           __end_of_Y_PF_Calc 6C58  
                              __pidataBANK1 B1C6                                __pidataBANK5 B1C8  
                                ___lltoft@c 0068                             _Wind_Speed_10_2 05B2  
                      _Turbine_RPM_Initiate B122                           __end_of_Freq_Calc 728A  
                         __end_of_i2c_NoAck B150                               __end_of_floor 8DB0  
                    _TRPM_OverSpeed_Counter 017F                               __end_of_frexp A458  
                             __end_of_scale 435A                          _One_sec_Delay_Flag 0174  
                        _Two_sec_Delay_Flag 018D                               __end_of_putch B0FA  
                            ?_One_Sec_Delay 0025                                   ?_RTC_Init 0025  
                  _RS485_Data_communication A1F0                         __end_of_Timer7_Init B13A  
                         ??_Error_Flag_Kill 0060                              _Gf_TRPM_Time_1 0573  
                                ___lwtoft@c 0068                                   ?i2___ftge 0025  
               ??_Turbine_Start_up_1_Second 0060                                ?_usart2_init 0025  
                        _Grid_Minimum_Power AA22                                  __div_to_l_ 7AC6  
                       int_eeprom_write@adr 0060                         int_eeprom_write@dat 0062  
                               _Y_Current_1 05BB                                  ??_I2C_Init 0060  
                                ??_I2C_Read 0060                                   ?_R_PF_Avg 0025  
              __size_of_Wind_Speed_Initiate 000C                                  ??_I2C_Stop 0060  
                   ?_Generator_One_Feedback 0025                     __size_of_Phase_Sequence 0166  
                          ??_Pitch_Feedback 0064                            ??_Rotor_Slip_Cal 00B4  
                       _Five_sec_Delay_Flag 02B8                      __end_of_Motor_Slip_Cal 8CB2  
                           __div_to_l_@exp1 006B                                     ??_floor 00A6  
                       ?_Grid_Minimum_Power 0025                             __div_to_l_@cntr 006A  
                                   ??_frexp 0065                __end_of_Power_Meter_Error_IO B18C  
                             _R_C_Avg_Steps 04E4                                     ??_scale 0086  
                               _Phase_Angle 0175                       _PM_ADC_Initialization B16E  
                           __div_to_l_@quot 0066                                   ?_Y_PF_Avg 0025  
                  __size_of_RTC_GetDateTime 00B8                                     ??_putch 0060  
                                   ?_BCDtoI 0074                                  __pbssBANK0 00C4  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
                                __pbssBANK3 0300                                  __pbssBANK4 0400  
                                __pbssBANK5 0500                                  __pbssBANK6 0600  
                          _KW_Maximum_Error 016A                          __size_of_eval_poly 00F4  
               __end_of_Communication_Error A908                              _VFD_RS485_Data A758  
                                 ?_Read_Adc 0060                           __end_of_Temp_Read 7DCA  
                              ?_usart_str_1 0025                                ?_usart_str_2 0025  
                             _R_PF_Avg$8100 06AB                               _R_PF_Avg$8101 06AE  
                             _R_PF_Avg$8102 06B1                               _R_PF_Avg$8103 06B4  
                             _R_PF_Avg$8104 06B7                               _R_PF_Avg$8105 06BA  
                             _R_PF_Avg$8106 06BD                               _R_PF_Avg$8107 06C0  
                             _R_PF_Avg$8080 06C3                               _R_PF_Avg$8081 06C6  
                             _R_PF_Avg$8082 06C9                               _R_PF_Avg$8090 068D  
                             _R_PF_Avg$8091 0690                               _R_PF_Avg$8083 0678  
                             _R_PF_Avg$8092 0693                               _R_PF_Avg$8084 067B  
                             _R_PF_Avg$8093 0696                               _R_PF_Avg$8085 067E  
                             _R_PF_Avg$8094 0699                               _R_PF_Avg$8086 0681  
                             _R_PF_Avg$8095 069C                               _R_PF_Avg$8087 0684  
                             _R_PF_Avg$8096 069F                               _R_PF_Avg$8088 0687  
                             _R_PF_Avg$8097 06A2                               _R_PF_Avg$8089 068A  
                             _R_PF_Avg$8098 06A5                               _R_PF_Avg$8099 06A8  
                         _Grid_Over_Current 85EE                               __div_to_l_@f1 0060  
                             __div_to_l_@f2 0063                                ??_OSCILLATOR 0060  
                                ??_B_PF_Avg 00C4                       _lc_Pitch_Coil_Counter 02E2  
                             _Gf_Motor_Slip 0654                          ?_Grid_Over_Current 0025  
             __size_of_PM_IO_Initialization 0062                                     ?___ftge 0099  
                      ??_Grid_Minimum_Power 00A2                                     ?___wmul 006E  
                     ?_Turbine_RPM_Initiate 0025                        _GENERATOR_RPM_THEORY 0212  
                                   _CCP10IE 007DB7                                     _CCP10IF 007DBF  
                                   _CCP1CON 000FBB                                     _CCP3CON 000F49  
                                   _CCP4CON 000F77                                     _CCP5CON 000F74  
                                   _CCP6CON 000F71                                     _CCP7CON 000F6E  
                                   _CCP8CON 000F46                                   ?___altoft 0099  
                                   _CCPR10H 000F42                                     _CCPR10L 000F41  
                                   ?_fround 0083                                  ??_RTC_Init 0061  
                       ??_Grid_Over_Current 00A2                                   ?___awtoft 002D  
                                 ?___ftpack 0060                                   ?___lbtoft 0068  
                         _Power_Factor$8166 00B4                                usart_str@str 0060  
                                   _ANSEL10 007922                                     _ANSEL11 007923  
                                   _ANSEL16 007918                                     _ANSEL17 007919  
                                   _ANSEL18 00791A                                     _ANSEL19 00791B  
                                   ?_printf 00B1                                   ?___lltoft 0068  
             _Timer1_OF_counter_Wind_2_temp 03F9                                  ??i2___ftge 002B  
                                   _T1CKPS0 007E6C                                     _T1CKPS1 007E6D  
                               ?_Power_Calc 0025                                     _BGR_Avg 02E4  
                                   _BGR_Arr 0400                      ?_Turbine_Restore_Check 0025  
                                 ?___lwtoft 0068                   __size_of_Wind_Speed_2_Cal 026E  
            __end_of_Generator_One_Feedback A89E                                     u1206_41 7458  
                                   u1207_41 746C             __size_of_Generator_RPM_Initiate 000E  
                         ??_Turbine_RPM_Cal 00B4                      ?_VFD_Contactor_IO_init 0025  
                         _Grid_Over_current 001C                                     i2l10632 A088  
                                   i2l10670 7566                                     i2l10655 748C  
                                   i2l10659 74B6                                     i2l10679 7582  
                                   i2l18050 A68A                                     i2l18140 A00A  
                                   i2l19110 7516                                     i2l18064 A6C2  
                                   i2l18056 A6A0                                     i2l19032 53EE  
                                   i2l18152 A056                                     i2l18144 A018  
                                   i2l19112 7520                                     i2l19104 74F4  
                                   i2l18074 B074                                     i2l18154 A074  
                                   i2l18146 A022                                     i2l19130 759E  
                                   i2l19122 7554                                     i2l19114 752A  
                                   i2l18068 A6DC                                     i2l18180 A4B8  
                                   i2l18156 A07E                                     i2l18148 A040  
                                   i2l19140 75CE                                     i2l19124 755E  
                                   i2l19116 7532                                     i2l19070 ACE2  
                                   i2l18176 A488                                     i2l19400 02D2  
                                   i2l18186 A4E4                                     i2l19082 749A  
                                   i2l19330 00C6                                     i2l19412 030C  
                                   i2l19340 00DC                                     i2l19324 0096  
                                   i2l19350 011C                                     i2l19318 0066  
                                   i2l19088 74C4                                     i2l19424 0350  
                                   i2l19436 0394                                     i2l19364 01AE  
                                   i2l19454 03E4                                     i2l19464 0428  
                                   i2l19448 03D2                                     i2l19392 0296  
                                   i2l19378 0206                             _Timer1_Initiate B0D0  
                                ??_R_PF_Avg 00C4                                     _B_C_Gap 0516  
                                   _B_C_Arr 0478                                     _B_C_Max 0206  
                  __size_of_i2c_WaitForIdle 0012                                     _RAMP_UP 8F9A  
                             _Mot_Frequency 05F9                          _VFD_Run_Time_Error ABCE  
                          _Wind_Cut_In_Flag 0199                                     _B_V_Gap 0525  
                                   _B_V_Arr 0481                          __end_of_OSCILLATOR B1C2  
                                   _B_V_Max 0209                               _PW_Error_Flag 02D5  
                                   _SSP1ADD 000FC8                 ?_Ramp_Up_Slip_Error_Trigger 0025  
                                   _SSP1BUF 000FC9                            _lc_Current_T_RPM 027B  
                           ?_Motor_Slip_Cal 0025                               _Gf_Rotor_Slip 065D  
                                   _RGR_Avg 02EA                                     _RGR_Arr 0300  
                               ?_Start_Stop 0025                        _Gi_Timer1_OF_counter 0292  
                           _int_eeprom_read AEF2                                     _RPM_PWM 02F9  
                             ?_VFD_IO_Error 0025                      __end_of_VFD_RS485_Data A7CA  
                                ??_Y_PF_Avg 00C4                                     _GfG_rpm 0552  
                    __size_of_Pitch_Release 003C                    __end_of_VFD_Freq_Step_up 8EA6  
                                   _GcMonth 0160                                     _YGR_Avg 02ED  
                                   _YGR_Arr 035A                             __size_of_BCDtoI 00D4  
                                   _GfT_rpm 0564                 ??_Timer0_OneSecond_Function 00BC  
                                   _R_C_Gap 058B                                     _R_C_Arr 048A  
                                   _R_C_Max 010C                                     _GiHours 028C  
                                   _GiMonth 03E3                      _Timer1_OF_counter_Wind 03F5  
                   _VFD_DC_EXTREM_LOW_Error 0191                        __size_of_IO_Initiate 0040  
                        __size_of_usart_str 0036                         ?_VFD_Run_Time_Error 0025  
                                ??_Read_Adc 0062                   __end_of_Grid_Over_Current 872E  
                                   _R_V_Gap 059A                                     _R_V_Arr 03D5  
                 _Turbine_Start_up_1_Second B15A                                     _R_V_Max 0112  
                                   _R_V_Old 00D0                                     _R_V_New 00F7  
                    ??_Pitch_PS_ON_Function 0060                                     _Y_C_Gap 05B5  
                                   _Y_C_Arr 0493                                     _Y_C_Max 026F  
                                   _i2c_Ack B150                                     _Grid_OV 7F32  
                                   _Grid_UV 7DCA                                   _I2C_Start B19E  
                               _Temp_Sensor 03ED                                   _I2C_Write B08E  
                                   _Y_V_Gap 05C1                                     _Y_V_Arr 049C  
                                   _Y_V_Max 0275                                     _Errors1 00E1  
                                   _Errors2 0152                                     _Errors3 0153  
                                   _Errors4 0154                                     _Errors5 0155  
                   _PM_Timer_Initialization B164                                     _Hours_1 02F5  
                                   _Hours_2 02F7                     __size_of_Five_Sec_Delay 002C  
                         __end_of__npowers_ FBDA                              usart_str_1@str 0060  
                                   __Hparam 0000                              usart_str_2@str 0060  
                               _Rcurr_V_Old 021E                                 _Rcurr_V_New 00FA  
                                   _Minutes 016E                                  _scale$8172 0086  
                                   __Lparam 0000                         _Gc_Generator_One_Fb 02C5  
                               _Timer7_Init B12E                          _DC_BUS_Low_Counter 014F  
                           __size_of___ftge 00C8                             ??_One_Sec_Delay 0060  
                                   ___awdiv 98E0                                     ___ftadd 657C  
                                   ___awmod A14E                    _VFD_DC_Bus_Current_Error 018E  
                                   ___ftdiv 835E                                     ___ftneg AE3A  
                                   ___lldiv 9A5C                             __size_of___wmul 0036  
                                   ___ftmul 8200                                     ___llmod A32E  
                                   ___ftsub AB82                                     ___fttol 84AA  
                      __end_of_Ramp_Up_Slip 9FFA                 __size_of_Turbine_Over_Speed 0054  
                                ??___altoft 009D                                     __pcinit 9C86  
                      ??_VFD_Run_Time_Error 0060                                ??i2___ftpack 002A  
                                ??___awtoft 0030                            _KW_Minimum_Error 016B  
                                ??___ftpack 0065                                   _BGR_Avg_1 0203  
                                ??___lbtoft 006B                           __end_of_eval_poly 9182  
                                 _BGR_Arr_1 045A                             __size_of_fround 02D0  
                                   __ramtop 1000                               ?_Power_Factor 0025  
                                ??___lltoft 006C                                     __ptext0 75F4  
                                   __ptext1 B04A                                     __ptext2 AFC6  
                                   __ptext3 6A2A                                     __ptext4 1A24  
                                   __ptext5 B116                                     __ptext6 60A0  
                                   __ptext7 B0C2                                     __ptext8 630E  
                                   __ptext9 4B40                             __size_of_printf 0CE4  
                             ?_VFD_Error_IO 0025                                  ??___lwtoft 006B  
                              __size_of_ISR 045E                                   _T1CONbits 000FCD  
                               ?__div_to_l_ 0060                                     _counter 05E2  
                                   _dpowers FB8B                                __size_of_cos 00C0  
                                   _isdigit AF1E                                __size_of_sin 0298  
                             ?_Wind_Average 0025                            ___awmod@dividend 0060  
                    ?_PM_ADC_Initialization 0025                              ??_VFD_IO_Error 0025  
                   ??_Rampup_state_function 00B5                             ?_VFD_RS485_Data 0025  
                              _GCG_rpm_flag 02BC                  ??_Turbine_Ramp_up_1_Second 0066  
                   __size_of_Wind_Speed_Cal 026E              __size_of_Wind_Speed_2_Initiate 000E  
                      end_of_initialization 9D2E               __end_of_Wind_Speed_2_Initiate B0D0  
                          _Five_Second_flag 0159                      I2C_Read@v_ackOption_u8 0060  
                          _UART_Data_String 31A6                _RAMP_UP_GENERATOR_CUT_IN_RPM 04B1  
      __size_of_Last_3_EEPROM_ERROR_Trigger 00EE                            __CFG_BOREN$NOSLP 000000  
                                 _B_PF_Calc 6E86                                   _GRPM_Time 04A5  
                                 _B_PF_Flag 014C                                 _Wind_Time_1 04F3  
                               _Wind_Time_2 04CC                      _Generator_RPM_Initiate B108  
                                 _BV_PS_Max 03E1                            ??_Volt_Curr_Read 00A2  
                       _Grid_Phase_Sequence B00A                                   i2u1070_40 A6D2  
                                ?_I2C_Start 0025                          __end_ofi2___ftpack A0A8  
                                ?_I2C_Write 0025                         __size_of_Power_Calc 0246  
                         ??_RTC_GetDateTime 0064                             ___lldiv@divisor 0064  
                  __end_of_Capacitor_Adding A6E4                             ___lldiv@counter 006C  
                     _Motor_Slip_Error_Flag 0170                        _VFD_Run_Time_Counter 0140  
                    ??_Turbine_RPM_Initiate 0060                               _Pitch_Counter 0294  
                                 _RCSTAbits 000FAB                                     printf@c 01C6  
                                   printf@f 00B1                                     postdec1 000FE5  
                                   postdec2 000FDD                           _Capacitor_Counter 0120  
                                   postinc0 000FEE                                     postinc2 000FDE  
                             _Delay_counter 0151                               _Pitch_Release AC92  
                         _One_Sec_Delay_vab 0172                              _GRPM_Frequency 04E1  
                         _Two_Sec_Delay_vab 018C                                   _B_Current 0519  
                      _VFD_DC_Bus_Low_Error 0190                   _Timer0_OneSecond_Function 9352  
                            __tdiv_to_l_@f1 0060                              __tdiv_to_l_@f2 0063  
                       __size_of_Start_Stop 00BE                              _B_PF_Calc$8137 00B4  
                   __end_of_Timer1_Initiate B0DE                        _Power_Meter_Error_IO B182  
                     __end_of_RPM_Data_Kill 7AC6                            _VFD_Temp_counter 05E0  
                                 _UART_Data 0000                        _Slip_Error_Counter_1 017C  
                            ??_Power_Factor 00B4                               ??__tdiv_to_l_ 0066  
                                 _RGR_Avg_1 021B                                   _RGR_Arr_1 03C6  
        __size_of_Error_Checking_One_Second 00D0                              ??_VFD_Error_IO 0060  
                         __end_of_usart_str AD3C                         _DC_BUS_High_Counter 014E  
                     _VFD_RS485_Data_filter A56C                           _Ten_Sec_Counter_2 00EE  
                  __end_of_Turbine_Pitching B1C6                          _Five_Sec_Delay_vab 0158  
                      ?_Grid_Phase_Sequence 0025                     __end_of_int_eeprom_read AF1E  
                            ??_Wind_Average 00B4                              _Phase_Sequence 809A  
                          __CFG_FOSC$INTIO2 000000            __size_of_Stopping_state_function 00A6  
                   __size_of_DC_Bus_Voltage 00E2                                   _TRISAbits 000F92  
                                 _TRISCbits 000F94                        __size_of_usart2_init 0030  
                                 _TRISEbits 000F96                                   _TRISFbits 000F97  
                                 _TRISGbits 000F98                           __size_of_I2C_Init 0010  
                         __size_of_I2C_Read 0030                 __end_of_Turbine_Under_speed A9C6  
                         __size_of_I2C_Stop 0008                                   i2___ftadd 7448  
                                 _TRPM_Time 04ED                                   _YGR_Avg_1 026C  
                                 _YGR_Arr_1 0469                           ??_i2c_WaitForIdle 0060  
                       _VFD__Run_Time_Error 0196                          _Wind_Pulse_width_2 02FD  
                               _Ycurr_V_Old 0278                                 _Ycurr_V_New 00FD  
                                 _Case_Call 01C7                              __end_of_BCDtoI 94FC  
                __size_of_Grid_Over_Current 0140                   ??_PM_Timer_Initialization 0060  
                             _Pitching_FlAG 0296           __size_of_Wind_Speed_Error_Trigger 012C  
                                ?_B_PF_Calc 0025                   ?_Wind_Speed_Error_Trigger 0025  
                               ___ftdiv@exp 00B2                                   _GiHours_1 0126  
                                 _GiHours_2 00D9                                   _GiHours_3 0128  
                                 _R_PF_Calc 6C58                                   _R_PF_Flag 0178  
                               printf@width 01BF                                   _RV_PS_Max 03EB  
                                 _TXSTAbits 000FAC                         _Gc_Motor_Slip_Error 02C8  
                                 _GiMinutes 028E                                   _GiSeconds 0290  
                  _Timer1_OF_counter_Wind_2 03F7                            _Timer0_1Sec_Flag 03EF  
                                _usart_init B04A                              _Gf_Red_Current 0657  
                           i2___ftpack@sign 0029                             _Error_Flag_Kill 95CC  
                       __size_of__div_to_l_ 0188                         _Wind_Speed_Initiate B116  
                ??_RS485_Data_communication 0061                        __size_of_usart_str_1 000E  
                      __size_of_usart_str_2 000E                       _Generator_One_Counter 0163  
                                 _Bcurr_Old 0645                                   _Bcurr_New 019E  
                               ___ftmul@exp 007D                           __size_of_B_PF_Avg 07D6  
                               _Turbine_RPM 000A                              ?_Pitch_Release 0025  
                     _Gf_VFD_DC_Bus_Voltage 0660                __end_of_EEPROM_Error_Monitor 60A0  
                                 _Flag_temp 05C6                          _Error_Scan_Ramp_up 9BD0  
                     ?_Power_Meter_Error_IO 0025                     _Gc_Grid_Phase_Unbalance 02C6  
                            _GCDc_high_flag 02BA                              __end_of___ftge 975E  
                                 _R_Current 058E         __size_of_Ramp_Up_Slip_Error_Trigger 0136  
                             _B_V_Avg_Steps 04DE                              __end_of___wmul ADA8  
                                ?_UART_Data 0025                               ?_PM_Error_Led 0025  
                            _Wind_Cap_Old_2 0148                              _Wind_Cap_New_2 0144  
                               _BAUDCONbits 000F65                                   _Cons_Gene 8990  
                                 _Y_PF_Calc 6A2A                       ??_Grid_Phase_Sequence 0060  
                 __size_of_int_eeprom_write 0032                                   _Y_PF_Flag 019B  
                        _Error_Scan_Running 9E9C                      __end_of_Phase_Sequence 8200  
                                 _YV_PS_Max 03FD                                _GCT_rpm_flag 02C0  
                            __end_of_fround 5B96                          _TURBINE_RPM_THEORY 04B7  
                            _B_Power_Factor 051F                            _Wind_Speed_2_Cal 630E  
                                 _Freq_Calc 70B4                                   _i2c_NoAck B146  
                                 _Freq_Flag 015A                          _Total_Power_Factor 022A  
                                floor@expon 00A9                         ?_Error_Scan_Ramp_up 0025  
                            __end_of_printf 1A24                           __size_of_RTC_Init 0020  
                     __end_of_Two_Sec_Delay AF72                       _Timer_1_OverFlow_Time 05A6  
                            _VFD_Error_Flag 0192                        ?_Wind_Speed_Initiate 0025  
                       start_initialization 9C86                            _Wind_Speed_Avg_2 04C6  
                         __size_ofi2___ftge 0090                                  eval_poly@d 009C  
                                eval_poly@n 009E                                  eval_poly@x 0099  
                               __end_of_ISR 0466                                   _Frequency 00C7  
                       __end_of__tdiv_to_l_ 793C                       __end_of_Volt_Curr_Avg 3E64  
                       ?_Error_Scan_Running 0025                                 __end_of_cos 98E0  
                               __end_of_sin 5E2E                           __size_of_R_PF_Avg 07D6  
               __size_of_Grid_Maximum_Power 005C                                   _Y_Current 05B8  
                                ?i2___ftadd 002D   __end_of_Error_Checking_Interrupt_Overflow B196  
__size_of_Error_Checking_Interrupt_Overflow 000A          ?_Error_Checking_Interrupt_Overflow 0025  
       ??_Error_Checking_Interrupt_Overflow 0025           _Error_Checking_Interrupt_Overflow B18C  
                                  ??_BCDtoI 0076                    _Turbine_OverLoaded_Error A9C6  
                __end_of_VFD_PS_ON_Function A758             _Timer1_OF_counter_Generator_Old 029E  
           _Timer1_OF_counter_Generator_New 0134                 __end_of_Error_Scan_start_up 8F9A  
                                frexp@value 0060                               _T_RPM_counter 0182  
                         __size_of_Y_PF_Avg 07D6                                  ?_R_PF_Calc 0025  
                                 _Minutes_1 016F                             ___llmod@divisor 0071  
                      ??_Error_Scan_Ramp_up 0066                                 ??_I2C_Start 0060  
                           ___llmod@counter 0075                                 ??_I2C_Write 0060  
                            _Y_PF_Calc$8108 00B4                              _Five_Sec_Delay AEC6  
                         __size_of_Read_Adc 0040                    _Turbine_Under_Speed_Flag 018A  
                                 _Temp_Read 7C4E                                   _Serial_No 00DF  
                     __size_of_Ramp_Up_Slip 00AE                                   _Time_Diff 04F0  
                  __size_of_Last_Five_Error 0020                                   _Rcurr_Old 066C  
                                 _Rcurr_New 01A1                        ??_Error_Scan_Running 00A2  
                           _Turbine_RPM_Cal 478C                                   _Temp_sign 05A0  
                                 _Slip_Flag 017D                             _GCvfd_curr_flag 02C4  
                   _Turbine2Wheel_Ratio_Avg 022D                             _Turbine_RPM_Old 0118  
                           _Turbine_RPM_New 0115                                    ??___ftge 009F  
                            _Wind_Frequency 04BD                                _GRPM_Cap_Old 0124  
                              _GRPM_Cap_New 0122                                    ??___wmul 0072  
        __size_of_Turbine_Start_up_1_Second 000A                        __end_of_VFD_IO_Error B07C  
                              _One_Sec_Flag 00E8                              ??_PM_Error_Led 002E  
                        int_eeprom_read@adr 0060                     ??_Turbine_Restore_Check 00A2  
                               __pdataBANK1 01C7                                 __pdataBANK5 05FC  
                          ?_Timer1_Initiate 0025                      ?_VFD_RS485_Data_filter 0025  
                                 _Wind_Time 04C9                                    ??_fround 0086  
                   ??_VFD_Contactor_IO_init 0060                                  ?_Cons_Gene 0025  
              __size_of_Pitch_Solenoid_init 0008                                  ?_Y_PF_Calc 0025  
                              _GRPM_Counter 0286                                    ??_printf 00B6  
                           ?_Phase_Sequence 0025                                ??_Power_Calc 00C4  
                                 _Total_Min 0187                             _Ten_Sec_Counter 00ED  
                                ?_Freq_Calc 0025                                  ?_i2c_NoAck 0025  
                         __size_of___altoft 009E                            ??_Motor_Slip_Cal 00B4  
                                fround@prec 008C                       ??_Wind_Speed_Initiate 0060  
                          ?_int_eeprom_read 0060                           __size_of___awtoft 0038  
                         __size_of___ftpack 010C                             _Temperature_Avg 066F  
                         __size_of___lbtoft 002E                           __size_of___lltoft 007C  
                             _R_V_Avg_Steps 04E7                                 __pbssCOMRAM 0001  
                          _Wind_Pulse_width 02FB                                   _Ycurr_Old 0675  
                                 _Ycurr_New 01A7                      __size_of_VFD_Data_Kill 002E  
                       _Gc_VFD_DC_Bus_Error 02CE                           __size_of___lwtoft 002A  
                                  ?_RAMP_UP 0025                               __pcstackBANK0 0060  
                             __pcstackBANK1 01AA                               __pcstackBANK6 0678  
              __end_of_PM_IO_Initialization A96A                      __size_of_Generator_RPM 0054  
           _VFD_communication_Error_Counter 0197                      _DC_BUS_Current_Counter 014D  
                            _WRPM_Counter_1 02AA                                ??_Start_Stop 0064  
                            _Wind_Speed_0_2 0239                              _Wind_Speed_1_2 023F  
                            _Wind_Speed_2_2 0245                              _Wind_Speed_3_2 024B  
                            _Wind_Speed_4_2 0251                              _Wind_Speed_5_2 0257  
                            _Wind_Speed_6_2 025D                              _Wind_Speed_7_2 0263  
                            _Wind_Speed_8_2 0269                              _Wind_Speed_9_2 04C3  
          __end_of_Turbine_Ramp_up_1_Second B08E                                _isdigit$7638 0061  
                            _Wind_Speed_Cal 60A0                              _Wind_Speed_Avg 000D  
                            _R_PF_Calc$8079 00B4                     __end_of_Error_Flag_Kill 9696  
                 _Timer1_OF_counter_Turbine 03F3                           ?_VFD_Freq_Step_up 0025  
                              _Ramp_Up_Slip 9F4C                      __end_of_Five_Sec_Delay AEF2  
                      __end_of_Power_Factor 9820                                 ??_B_PF_Calc 00B4  
                                sin@coeff_a FC01                                  sin@coeff_b FC10  
                           _Gen_EP_Err_Flag 00E3                        __end_of_VFD_Error_IO B146  
                        ??_VFD_Freq_Step_up 00B4                                    ?_i2c_Ack 0025  
                          _Gc_Pitch_Coil_Fb 02C9                                    ?_Grid_OV 0025  
                                  ?_Grid_UV 0025                             _GCY_phasev_flag 02C2  
                               ?_usart_init 0025                           _Start_Stop_Flag_1 02D6  
                      __end_of_Wind_Average 478C                          __end_of_Power_Calc 6A2A  
                         _Wind_Average$8070 01B9                           _Wind_Average$8071 01BC  
                         _Wind_Average$8072 01BF                           _Wind_Average$8065 01AA  
                         _Wind_Average$8066 01AD                           _Wind_Average$8067 01B0  
                         _Wind_Average$8068 01B3                           _Wind_Average$8069 01B6  
                                ?_Temp_Read 0025                             ??_Pitch_Release 0060  
             _Gc_Grid_Phase_Unbalance_Error 02C7                             _Start_Stop_Flag 001F  
                              ?_Timer7_Init 0025                __size_of_Communication_Error 006A  
                            _Y_Power_Factor 0272                      ??_Power_Meter_Error_IO 0060  
                                 __pintcode 0008                               _G_RPM_Counter 015C  
                             __pmediumconst FB8A                 __size_of_Grid_Minimum_Power 005C  
                                  ?___awdiv 0066                                   __ptext100 AE0A  
                                 __ptext101 793C                                   __ptext110 B1BC  
                                 __ptext102 975E                                   __ptext111 AC52  
                                 __ptext103 67E4                                   __ptext120 70B4  
                                 __ptext112 B13A                                   __ptext104 728A  
                                 __ptext121 8990                                   __ptext113 B178  
                                 __ptext105 809A                                   __ptext130 A290  
                                 __ptext122 6E86                                   __ptext114 B182  
                                 __ptext106 AC12                                   __ptext131 908E  
                                 __ptext123 29D0                                   __ptext115 B1A6  
                                 __ptext107 B164                                   __ptext140 7448  
                                 __ptext132 AD72                                   __ptext124 9820  
                                 __ptext116 B1AE                                   __ptext108 A908  
                                 __ptext141 ACCE                                   __ptext133 8200  
                                 __ptext125 5B96                                   __ptext117 B108  
                                 __ptext109 B16E                                    ?___ftadd 008D  
                                 __ptext142 9FFA                                   __ptext134 AB82  
                                 __ptext126 8CB2                                   __ptext118 4EDE  
                                 __ptext143 5244                                   __ptext135 657C  
                                 __ptext127 A3C8                                   __ptext119 AF9C  
                                 __ptext144 A458                                   __ptext136 AE3A  
                                 __ptext128 84AA                                   __ptext145 B18C  
                                 __ptext137 835E                                   __ptext129 9696  
                                 __ptext146 B064                                   __ptext138 8A9C  
                                 __ptext147 A66A                                    ?___awmod 0060  
                                  ?___ftdiv 00A5                                    ?___ftneg 0083  
                                  ?___lldiv 0060                                    ?___ftmul 0074  
                                  ?___llmod 006D                                    ?___ftsub 00AB  
                                 __npowers_ FBB3                                    ?___fttol 008A  
                            _DC_Bus_Current 020F                                BCDtoI@result 0079  
                               ??_UART_Data 00BC           __end_of_Turbine_Start_up_1_Second B164  
                   __size_of_Grid_Frequency 0084                          __end_of_Start_Stop 9A5C  
                  __end_of_UART_Data_String 38F2                        I2C_Read@v_i2cData_u8 0061  
                               __tdiv_to_l_ 779E                                    _CCP10CON 000F40  
                   _Stopping_state_function A0A8                                ??__div_to_l_ 0066  
                     _Timer1_OF_counter_Old 02A0                       _Timer1_OF_counter_New 0136  
              ?_Last_3_EEPROM_ERROR_Trigger 0025                     ??_PM_ADC_Initialization 0060  
                     _Timer1_interrupt_flag 0186                              _DC_Bus_Voltage 9270  
                                  ?_isdigit 0025                                    _I2C_Init B0B2  
                                  _I2C_Read ADDA                            ??_VFD_RS485_Data 00B4  
                       _Gi_TRPM_Pulse_width 05D2                                   _eval_poly 908E  
                                  _I2C_Stop B196                            _Grid_Und_voltage 00E7  
                                 _counter_1 00F3          __size_of_Timer0_OneSecond_Function 00D6  
                    __end_of_Wind_Speed_Cal 630E                           _Generator_RPM_FLT 0004  
                         _Generator_IO_init B1AE                           _Generator_RPM_INT 0288  
                         _Generator_RPM_Cal 4EDE                           _Generator_RPM_Old 0109  
                         _Generator_RPM_New 0106                _VFD_communication_Error_Flag 00F1  
                           _RTC_GetDateTime 9B18                               _G_RPM_counter 00E2  
                             ??_IO_Initiate 0060                             _Grid_UV_Counter 0167  
                               ??i2___ftadd 0033                              __size_of_floor 00FE  
                            __size_of_frexp 0090                          ?_Generator_IO_init 0025  
                            __size_of_scale 04F6                          ?_Generator_RPM_Cal 0025  
                   ?_Generator_RPM_Initiate 0025                        _EEPROM_Error_Monitor 5E2E  
            __size_of_Rampup_state_function 0006                              __size_of_putch 000E  
             __end_of_Rampup_state_function B1BC                   _Grid_Phase_Sequence_Error 00E6  
                   __end_of_Turbine_RPM_Cal 4B40                    ??_startup_state_function 0060  
                           ?_Five_Sec_Delay 0025                              ___wmul@product 0072  
                               ??_R_PF_Calc 00B4                              _R_Power_Factor 0594  
                          _Grid_Ovr_voltage 00E5                     __size_of_Pitch_Feedback 006A  
                       ??_Generator_IO_init 0060                     __size_of_Rotor_Slip_Cal 00B2  
                       ??_Generator_RPM_Cal 00B4                                    _PIE1bits 000F9D  
                                  _GRPM_Cap 0284                                    _PIE3bits 000FA3  
                                  _B_PF_Avg 29D0               __size_of_Pitch_PS_ON_Function 0036  
                             _VFD_Data_Kill AE98                               _Generator_RPM AB2E  
                                  _PIR1bits 000F9E                          __end_of__div_to_l_ 7C4E  
                                  _PIR3bits 000FA4                           ?_Capacitor_Adding 0025  
           _Timer1_OF_counter_Wind_temp_Old 02A4             _Timer1_OF_counter_Wind_temp_New 013A  
                                  _KVA_Sign 02D2                  __end_of_Turbine_Over_Speed AB2E  
                                  _VFD_RAMP 0195                                    _SSP1CON1 000FC6  
                        ??_Capacitor_Adding 0025                             _RS485_Data_Flag 0177  
                                  _SSP1STAT 000FC7                              _Freq_Calc$8078 00B4  
                     __end_of_One_Sec_Delay AF9C                                 ??_Cons_Gene 00A2  
                                  _RTC_Init B02A                           ??_Last_Five_Error 0060  
                               ??_Y_PF_Calc 00B4                                    _GfB_volt 054F  
               __size_of_VFD_Run_Time_Error 0044                            _int_eeprom_write ADA8  
                                  _RPM_Time 012C                            _wind_Frequency_2 04D8  
                    __end_of_DC_Bus_Voltage 9352                                    _TRPM_Cal 00EC  
                         ___wmul@multiplier 006E                                    i2___ftge A458  
                                  _PWM_Temp 04AE                            __CFG_SOSCSEL$DIG 000000  
                               ??_Freq_Calc 00B4                                 ??_i2c_NoAck 0060  
                         ?_Turbine_Pitching 0025                             _i2c_WaitForIdle B0A0  
                 __end_of_Generator_IO_init B1B6                                  printf@flag 01B3  
                                  _GfR_volt 0561                   __end_of_Generator_RPM_Cal 5244  
                                printf@fval 01C1            __end_of_Wind_Speed_Error_Trigger 8990  
                                printf@prec 01C4                                    _R_PF_Avg 21FA  
                                ?_eval_poly 0099                                    _GfY_volt 056A  
                       __size_of_usart_init 001A                                   _usart_str AD06  
                        ??_Turbine_Pitching 0060               ??_Last_3_EEPROM_ERROR_Trigger 0064  
                           ?_Wind_Speed_Cal 0025                           _Wind_Cut_Out_Flag 00F2  
                          __size_of_RAMP_UP 00F4              __end_of_Generator_RPM_Initiate B116  
                                  _Lead_Lag 02D3                       ?_EEPROM_Error_Monitor 0025  
                             _VFD_Frequency 02DE                                    _Y_PF_Avg 1A24  
                          ?_Error_Flag_Kill 0025                                    _Key_Flag 016D  
                      __end_of_PM_Error_Led 5598                               _Y_C_Avg_Steps 04F6  
                                  _Read_Adc AC12                       _Wind_Speed_2_Initiate B0C2  
                          _Pitch_Ps_Counter 03E9                    __end_of_Wind_Speed_2_Cal 657C  
                           _Grid_Ov_Counter 0166                         __end_of_IO_Initiate AC92  
                              _Timer0_Falg1 02DD                                _Timer0_Falg2 0184  
                                 frexp@eptr 0063                                  _EECON1bits 000F7F  
                              _GCphase_flag 02C3                              ?_VFD_Data_Kill 0025  
                             _GCDc_low_flag 02BB                            __size_of_i2c_Ack 000A  
                     __size_of_VFD_IO_Error 0018                            __size_of_Grid_OV 0168  
                          __size_of_Grid_UV 0168                              ?_Generator_RPM 0025  
                                  __Hrparam 0000                                 ??_Temp_Read 00B4  
                               _GCWind_flag 02C1                               _Y_PF_Avg$8110 06C6  
                             _Y_PF_Avg$8111 06C9                               _Y_PF_Avg$8120 0690  
                             _Y_PF_Avg$8112 0678                               _Y_PF_Avg$8121 0693  
                             _Y_PF_Avg$8113 067B                               _Y_PF_Avg$8130 06AE  
                             _Y_PF_Avg$8122 0696                               _Y_PF_Avg$8114 067E  
                             _Y_PF_Avg$8131 06B1                               _Y_PF_Avg$8123 0699  
                             _Y_PF_Avg$8115 0681                               _Y_PF_Avg$8132 06B4  
                             _Y_PF_Avg$8124 069C                               _Y_PF_Avg$8116 0684  
                             _Y_PF_Avg$8109 06C3                               _Y_PF_Avg$8133 06B7  
                             _Y_PF_Avg$8125 069F                               _Y_PF_Avg$8117 0687  
                             _Y_PF_Avg$8134 06BA                               _Y_PF_Avg$8126 06A2  
                             _Y_PF_Avg$8118 068A                               _Y_PF_Avg$8135 06BD  
                             _Y_PF_Avg$8127 06A5                               _Y_PF_Avg$8119 068D  
                             _Y_PF_Avg$8136 06C0                               _Y_PF_Avg$8128 06A8  
                             _Y_PF_Avg$8129 06AB                                    _Temp_Arr 03B4  
                                  _Slave_Id 05D6                                    _Time_Old 0227  
                                  _Time_New 01A4                                    __Lrparam 0000  
                      _Gf_Red_Phase_Voltage 065A                        _PM_IO_Initialization A908  
                                  _Wind_Cap 02AC                    ??_Generator_One_Feedback 0064  
         __size_of_Turbine_Ramp_up_1_Second 0012                             _Gf_Blue_Current 0648  
             __size_of_Turbine_RPM_Initiate 000C                   ?_Turbine_Ramp_up_1_Second 0025  
                                  _Total_Pf 05A9                            __size_of___awdiv 00BE  
                          __size_of___ftadd 0268                            __size_of___awmod 00A2  
                 ??_Stopping_state_function 00A2                            __size_of___ftdiv 014C  
                          __size_of___ftneg 0030                            __size_of___lldiv 00BC  
                               _GRPM_Time_1 02E7                                    ___altoft A290  
                          __size_of___ftmul 015E                                    _Turb_RPM 04BA  
                          __size_of___llmod 009A                            __size_of___ftsub 004C  
                          __size_of___fttol 0144                                    _cos$8174 01AA  
                           _G_RPM_counter_1 05C8                                    ___awtoft ACCE  
                                  ___ftpack 8A9C                                    ___lbtoft AE6A  
                               _fround$8170 0089                                 _fround$8171 0086  
                             _Wind_Speed_10 05AF                                    ___lltoft A5EE  
                           ?_DC_Bus_Voltage 0025                              _Feedback_Error 0156  
                   __end_of_RTC_GetDateTime 9BD0                               ??_usart2_init 0060  
                                  ___lwtoft AF9C                  ??_Turbine_OverLoaded_Error 00A2  
                      _Generator_Over_Speed 0165                                _Motor_slip_1 0588  
                     _Gf_Blue_Phase_Voltage 064B                                  ?_usart_str 0060  
                                  _lc_T_RPM 04D2                            __size_of_isdigit 002A  
                     _Timer0_RAMPUP_Counter 0185                           _EEPROM_Error_Flag 0017  
                                  __ptext10 38F2                                    __ptext11 B122  
                                  __ptext20 31A6                                    __ptext12 478C  
                                  __ptext21 B0DE                                    __ptext13 B12E  
                                  __ptext30 779E                                    __ptext22 AD06  
                                  __ptext14 B0D0                                    __ptext31 7AC6  
                                  __ptext23 0D40                                    __ptext15 9352  
                                  __ptext40 B15A                                    __ptext32 A5EE  
                                  __ptext24 3E64                                    __ptext16 435A  
                                  __ptext41 8EA6                                    __ptext33 A32E  
                                  __ptext25 B0EC                                    __ptext17 A56C  
                                  __ptext50 95CC                                    __ptext42 B07C  
                                  __ptext34 9A5C                                    __ptext26 AF1E  
                                  __ptext18 A758                                    __ptext51 5598  
                                  __ptext43 AF48                                    __ptext35 9B18  
                                  __ptext27 58C6                                    __ptext19 0000  
                                  __ptext60 A9C6                                    __ptext52 9182  
                                  __ptext44 AF72                                    __ptext36 ADDA  
                                  __ptext28 A14E                                    __ptext61 999E  
                                  __ptext53 94FC                                    __ptext45 AEC6  
                                  __ptext37 B146                                    __ptext29 98E0  
                                  __ptext70 B00A                                    __ptext62 9DEA  
                                  __ptext54 8864                                    __ptext46 9BD0  
                                  __ptext38 B150                                    __ptext71 85EE  
                                  __ptext63 872E                                    __ptext55 ABCE  
                                  __ptext47 AFEA                                    __ptext39 9428  
                                  __ptext80 5E2E                                    __ptext72 7F32  
                                  __ptext64 9F4C                                    __ptext56 A6E4  
                                  __ptext48 9E9C                                    __ptext81 ADA8  
                                  __ptext73 AA22                                    __ptext65 AD3C  
                                  __ptext57 A96A                                    __ptext49 A0A8  
                                  __ptext90 6C58                                    __ptext82 AEF2  
                                  __ptext74 AA7E                                    __ptext66 A7CA  
                                  __ptext58 9D38                       __size_of_Power_Factor 00C2  
                                  __ptext91 21FA                                    __ptext83 7C4E  
                                  __ptext75 A4E8                                    __ptext67 8BA8  
                                  __ptext59 AADA                                    __ptext92 B02A  
                                  __ptext84 B1B6                                    __ptext76 AB2E  
                                  __ptext68 AE6A                                    __ptext93 B08E  
                                  __ptext85 8F9A                                    __ptext77 A834  
                                  __ptext69 7DCA                                    __ptext94 B0A0  
                                  __ptext86 8DB0                                    __ptext78 9270  
                                  __ptext95 B196                                    __ptext87 AE98  
                                  __ptext79 A89E                                    __ptext96 B19E  
                                  __ptext88 B1C2                                    __ptext97 B0B2  
                                  __ptext89 AC92                                    __ptext98 A1F0  
                                  __ptext99 B0FA                                _SSP1CON2bits 000FC5  
                                  _sin$8175 00BA                                    __powers_ FBDA  
                         _EEPROM_Error_Stop 5598                           _Two_Delay_counter 018B  
                     __size_of_VFD_Error_IO 000C                                _VFD_IO_Error B064  
                     __size_of_Wind_Average 0432                          ?_EEPROM_Error_Stop 0025  
                       _Pitch_Solenoid_init B1A6                            _Generator_RPM_10 0531  
                    __size_of_RPM_Data_Kill 018A                               ??_usart_str_1 0060  
                             ??_usart_str_2 0060                          _Five_Delay_counter 0157  
                          ?_Turbine_RPM_Cal 0025                               __size_of_main 01AA  
                    _Gf_Turbine2Wheel_Ratio 04A8             __size_of_startup_state_function 0024  
                             __size_of_sqrt 01BE                __size_of_Turbine_Under_speed 005C  
                               _B_Gap_Ratio 0103                 _lc_Motor_Slip_Error_Counter 02E1  
                       ??_EEPROM_Error_Stop 0064                       ?_PM_IO_Initialization 0025  
                   ??_VFD_RS485_Data_filter 00B6                 __end_of_Grid_Phase_Sequence B02A  
                        _Slip_Error_Counter 017B                            ??_Phase_Sequence 0065  
                     _VFD_DC_Bus_High_Error 018F                          _VFD_PS_ON_Function A6E4  
                                  int$flags 0049                     __end_of_i2c_WaitForIdle B0B2  
                      __size_of_Timer7_Init 000C                              _Grid_Frequency A4E8  
                                 printf@len 01B1                     __size_of_Volt_Curr_Read 039E  
                                 printf@exp 01BD                                   printf@val 01B9  
                              _SSP1STATbits 000FC7                        ?_Pitch_Solenoid_init 0025  
            __size_of_Turbine_Restore_Check 00B2               __end_of_Turbine_Restore_Check 9DEA  
                            _Start_up_Error 01C8                                _Power_Factor 975E  
                              _Wind_Cap_Old 0146                                _Wind_Cap_New 0142  
            __size_of_VFD_Contactor_IO_init 000A                           _Gf_Grid_Frequency 064E  
                       ?_VFD_PS_ON_Function 0025               __end_of_VFD_Contactor_IO_init B182  
                              _VFD_Error_IO B13A                                _VFD_Error_No 0020  
                __size_of_Generator_IO_init 0008                                   putch@data 0060  
                __size_of_Generator_RPM_Cal 0366           __size_of_RS485_Data_communication 00A0  
                                _INTCONbits 000FF2                   ?_RS485_Data_communication 0025  
                               ??_eval_poly 00A0                  __end_of_Grid_Maximum_Power AADA  
                              _Wind_Average 435A                  ?_Error_Checking_One_Second 0025  
                 __end_of_EEPROM_Error_Stop 58C6                         _Communication_Error A89E  
                    ??_EEPROM_Error_Monitor 0064                                    isdigit@c 0062  
                               _B_Current_1 051C                    ?_PM_Timer_Initialization 0025  
                                  scale@scl 0089                          RTC_GetDateTime@rtc 0062  
                       __end_of_usart2_init AE3A                ??_Ramp_Up_Slip_Error_Trigger 00A2  
                               _IO_Initiate AC52                    _Wind_Speed_Error_Trigger 8864  
                              _Wind_Speed_0 0236                                _Wind_Speed_1 023C  
                              _Wind_Speed_2 0242                                _Wind_Speed_3 0248  
                              _Wind_Speed_4 024E                                _Wind_Speed_5 0254  
                              _Wind_Speed_6 025A                                _Wind_Speed_7 0260  
                              _Wind_Speed_8 0266                                _Wind_Speed_9 04C0  
           __end_of_Stopping_state_function A14E                                    intlevel2 0000  
                          __tdiv_to_l_@exp1 006E                            __tdiv_to_l_@cntr 006D  
                    ?_Wind_Speed_2_Initiate 0025                            __tdiv_to_l_@quot 0069  
                           ??_VFD_Data_Kill 0060                              _Pitch_Feedback A7CA  
                          ___lldiv@dividend 0060                        ??_VFD_PS_ON_Function 0060  
                           ??_Generator_RPM 00A2                              _Rotor_Slip_Cal 9DEA  
                                _EP_Errors1 0018                                  _EP_Errors2 0019  
                                _EP_Errors3 001A                                ??_usart_init 0060  
               __size_of_Error_Scan_Ramp_up 00B6                             _Generator_RPM_0 052B  
                           _Generator_RPM_1 052E                             _Generator_RPM_2 0534  
                           _Generator_RPM_3 0537                             _Generator_RPM_4 053A  
                           _Generator_RPM_5 053D                             _Generator_RPM_6 0540  
                           _Generator_RPM_7 0543                             _Generator_RPM_8 0546  
                           _Generator_RPM_9 0549                                  _RCSTA2bits 000F22  
                               _VFD_ON_Flag 0193                                  _OSCILLATOR B1BC  
                    _Pitch_FB_Error_counter 0176                      __size_of_Two_Sec_Delay 002A  
                      ?_Communication_Error 0025                __size_of_Error_Scan_start_up 00F4  
                               _PF_Lead_Lag 02D4                 __size_of_Error_Scan_Running 00B0  
                       __end_of_usart_str_1 B0EC                         __end_of_usart_str_2 B108  
                    __end_of_Grid_Frequency A56C                     _Turbine_Over_Speed_Flag 00EF  
                    __size_of_Volt_Curr_Avg 0572                                    printf@ap 01AF  
                                  printf@cp 01AD                        _Tur_OverLoaded_Error 0188  
           __size_of_Generator_One_Feedback 006A                                 _VFD_Counter 05FC  
                 __size_of_VFD_Freq_Step_up 00F6                 __end_of_Wind_Speed_Initiate B122  
                     ??_Pitch_Solenoid_init 0060                           _Phase_Sequence_Ok 001E  
                             _RPM_Data_Kill 793C                                ?__tdiv_to_l_ 0060  
                         _Gf_Yellow_Current 0663                           ?_UART_Data_String 0025  
                    _startup_state_function AFC6                             _Gi_TRPM_Cap_Old 05D0  
                           _Gi_TRPM_Cap_New 05CE                                 _printf$8173 01AA  
                          ?_RTC_GetDateTime 0062                          _T_Overload_counter 0181  
                        ??_UART_Data_String 00BC                            ___lldiv@quotient 0068  
         _Timer1_OF_counter_Wind_2_temp_Old 02A2           _Timer1_OF_counter_Wind_2_temp_New 0138  
                               ??_usart_str 0062              __size_of_PM_ADC_Initialization 000A  
                  __size_of_Timer1_Initiate 000E               __end_of_PM_ADC_Initialization B178  
                     __size_of_PM_Error_Led 0354                          __end_of_usart_init B064  
         __end_of_Error_Checking_One_Second 95CC                            ??_Five_Sec_Delay 0060  
                                _VFD_On_Off 0194                           _Communication_OTP 0015  
                    __end_of_Pitch_Feedback A834                    __size_of_int_eeprom_read 002C  
                    __end_of_Rotor_Slip_Cal 9E9C                           _Desired_Frequency 0016  
                             _wind_Time_1_2 04FC                    __end_of_int_eeprom_write ADDA  
                   _Frequency_Error_counter 015B                         _Pitch_FB_Error_Flag 00EA  
                             _GCM_slip_flag 02BD                                 _GfB_current 054C  
                         _lc_Previous_T_RPM 04CF                             _Last_Five_Error AFEA  
                    ??_PM_IO_Initialization 0060                       ??_Communication_Error 0060  
                              _Rotor_slip_1 059D                  __end_of_Grid_Minimum_Power AA7E  
