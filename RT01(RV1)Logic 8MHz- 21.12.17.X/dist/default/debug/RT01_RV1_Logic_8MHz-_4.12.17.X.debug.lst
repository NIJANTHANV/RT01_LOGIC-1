

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Dec 13 11:45:50 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	idataBANK5,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   172                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   173                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   174  0000                     
   175                           	psect	idataBANK1
   176  01B106                     __pidataBANK1:
   177                           	opt stack 0
   178                           
   179                           ;initializer for _Case_Call
   180  01B106  01                 	db	1
   181                           
   182                           ;initializer for _Start_up_Error
   183  01B107  02                 	db	2
   184                           
   185                           	psect	idataBANK5
   186  01B108                     __pidataBANK5:
   187                           	opt stack 0
   188                           
   189                           ;initializer for _VFD_Counter
   190  01B108  0018               	dw	24
   191                           
   192                           	psect	mediumconst
   193  00FBB6                     __pmediumconst:
   194                           	opt stack 0
   195  00FBB6  00                 	db	0
   196  00FBB7                     _dpowers:
   197                           	opt stack 0
   198  00FBB7  0001               	dw	1
   199  00FBB9  0000               	dw	0
   200  00FBBB  000A               	dw	10
   201  00FBBD  0000               	dw	0
   202  00FBBF  0064               	dw	100
   203  00FBC1  0000               	dw	0
   204  00FBC3  03E8               	dw	1000
   205  00FBC5  0000               	dw	0
   206  00FBC7  2710               	dw	10000
   207  00FBC9  0000               	dw	0
   208  00FBCB  86A0               	dw	34464
   209  00FBCD  0001               	dw	1
   210  00FBCF  4240               	dw	16960
   211  00FBD1  000F               	dw	15
   212  00FBD3  9680               	dw	38528
   213  00FBD5  0098               	dw	152
   214  00FBD7  E100               	dw	57600
   215  00FBD9  05F5               	dw	1525
   216  00FBDB  CA00               	dw	51712
   217  00FBDD  3B9A               	dw	15258
   218  00FBDF                     __end_of_dpowers:
   219                           	opt stack 0
   220  00FBDF                     __npowers_:
   221                           	opt stack 0
   222  00FBDF  00                 	db	0
   223  00FBE0  80                 	db	128
   224  00FBE1  3F                 	db	63
   225  00FBE2  CD                 	db	205
   226  00FBE3  CC                 	db	204
   227  00FBE4  3D                 	db	61
   228  00FBE5  D7                 	db	215
   229  00FBE6  23                 	db	35
   230  00FBE7  3C                 	db	60
   231  00FBE8  12                 	db	18
   232  00FBE9  83                 	db	131
   233  00FBEA  3A                 	db	58
   234  00FBEB  B7                 	db	183
   235  00FBEC  D1                 	db	209
   236  00FBED  38                 	db	56
   237  00FBEE  C6                 	db	198
   238  00FBEF  27                 	db	39
   239  00FBF0  37                 	db	55
   240  00FBF1  38                 	db	56
   241  00FBF2  86                 	db	134
   242  00FBF3  35                 	db	53
   243  00FBF4  C0                 	db	192
   244  00FBF5  D6                 	db	214
   245  00FBF6  33                 	db	51
   246  00FBF7  CC                 	db	204
   247  00FBF8  2B                 	db	43
   248  00FBF9  32                 	db	50
   249  00FBFA  70                 	db	112
   250  00FBFB  89                 	db	137
   251  00FBFC  30                 	db	48
   252  00FBFD  E7                 	db	231
   253  00FBFE  DB                 	db	219
   254  00FBFF  2E                 	db	46
   255  00FC00  E5                 	db	229
   256  00FC01  3C                 	db	60
   257  00FC02  1E                 	db	30
   258  00FC03  42                 	db	66
   259  00FC04  A2                 	db	162
   260  00FC05  0D                 	db	13
   261  00FC06                     __end_of__npowers_:
   262                           	opt stack 0
   263  00FC06                     __powers_:
   264                           	opt stack 0
   265  00FC06  00                 	db	0
   266  00FC07  80                 	db	128
   267  00FC08  3F                 	db	63
   268  00FC09  00                 	db	0
   269  00FC0A  20                 	db	32
   270  00FC0B  41                 	db	65
   271  00FC0C  00                 	db	0
   272  00FC0D  C8                 	db	200
   273  00FC0E  42                 	db	66
   274  00FC0F  00                 	db	0
   275  00FC10  7A                 	db	122
   276  00FC11  44                 	db	68
   277  00FC12  40                 	db	64
   278  00FC13  1C                 	db	28
   279  00FC14  46                 	db	70
   280  00FC15  50                 	db	80
   281  00FC16  C3                 	db	195
   282  00FC17  47                 	db	71
   283  00FC18  24                 	db	36
   284  00FC19  74                 	db	116
   285  00FC1A  49                 	db	73
   286  00FC1B  97                 	db	151
   287  00FC1C  18                 	db	24
   288  00FC1D  4B                 	db	75
   289  00FC1E  BC                 	db	188
   290  00FC1F  BE                 	db	190
   291  00FC20  4C                 	db	76
   292  00FC21  6B                 	db	107
   293  00FC22  6E                 	db	110
   294  00FC23  4E                 	db	78
   295  00FC24  03                 	db	3
   296  00FC25  15                 	db	21
   297  00FC26  50                 	db	80
   298  00FC27  79                 	db	121
   299  00FC28  AD                 	db	173
   300  00FC29  60                 	db	96
   301  00FC2A  F3                 	db	243
   302  00FC2B  49                 	db	73
   303  00FC2C  71                 	db	113
   304  00FC2D                     __end_of__powers_:
   305                           	opt stack 0
   306  00FC2D                     sin@coeff_a:
   307                           	opt stack 0
   308  00FC2D  F4                 	db	244
   309  00FC2E  4A                 	db	74
   310  00FC2F  48                 	db	72
   311  00FC30  95                 	db	149
   312  00FC31  95                 	db	149
   313  00FC32  C7                 	db	199
   314  00FC33  C1                 	db	193
   315  00FC34  DC                 	db	220
   316  00FC35  45                 	db	69
   317  00FC36  DC                 	db	220
   318  00FC37  6D                 	db	109
   319  00FC38  C3                 	db	195
   320  00FC39  B3                 	db	179
   321  00FC3A  33                 	db	51
   322  00FC3B  40                 	db	64
   323  00FC3C                     __end_ofsin@coeff_a:
   324                           	opt stack 0
   325  00FC3C                     sin@coeff_b:
   326                           	opt stack 0
   327  00FC3C  34                 	db	52
   328  00FC3D  01                 	db	1
   329  00FC3E  48                 	db	72
   330  00FC3F  9D                 	db	157
   331  00FC40  B0                 	db	176
   332  00FC41  45                 	db	69
   333  00FC42  00                 	db	0
   334  00FC43  DA                 	db	218
   335  00FC44  42                 	db	66
   336  00FC45  00                 	db	0
   337  00FC46  80                 	db	128
   338  00FC47  3F                 	db	63
   339  00FC48                     __end_ofsin@coeff_b:
   340                           	opt stack 0
   341  0000                     _BAUDCON2bits	set	3872
   342  0000                     _CCP10CON	set	3904
   343  0000                     _CCP3CON	set	3913
   344  0000                     _CCP8CON	set	3910
   345  0000                     _CCPR10L	set	3905
   346  0000                     _CCPR3H	set	3915
   347  0000                     _CCPR3L	set	3914
   348  0000                     _CCPR8L	set	3911
   349  0000                     _RCREG2	set	3869
   350  0000                     _RCSTA2bits	set	3874
   351  0000                     _SPBRG2	set	3870
   352  0000                     _T7CON	set	3901
   353  0000                     _TXREG2	set	3868
   354  0000                     _TXSTA2bits	set	3873
   355  0000                     _CCPR10H	set	3906
   356  0000                     _CCPR8H	set	3912
   357  0000                     _ANSEL0	set	31016
   358  0000                     _ANSEL1	set	31017
   359  0000                     _ANSEL10	set	31010
   360  0000                     _ANSEL11	set	31011
   361  0000                     _ANSEL16	set	31000
   362  0000                     _ANSEL17	set	31001
   363  0000                     _ANSEL18	set	31002
   364  0000                     _ANSEL19	set	31003
   365  0000                     _ANSEL2	set	31018
   366  0000                     _ANSEL3	set	31019
   367  0000                     _ANSEL4	set	31020
   368  0000                     _ANSEL6	set	31022
   369  0000                     _ANSEL8	set	31008
   370  0000                     _ANSEL9	set	31009
   371  0000                     _ADCON0	set	4034
   372  0000                     _ADCON1	set	4033
   373  0000                     _ADCON2	set	4032
   374  0000                     _ADRESH	set	4036
   375  0000                     _ADRESL	set	4035
   376  0000                     _BAUDCONbits	set	3941
   377  0000                     _CCP1CON	set	4027
   378  0000                     _CCP4CON	set	3959
   379  0000                     _CCP5CON	set	3956
   380  0000                     _CCP6CON	set	3953
   381  0000                     _CCP7CON	set	3950
   382  0000                     _CCPR1H	set	4029
   383  0000                     _CCPR1L	set	4028
   384  0000                     _CCPR4H	set	3961
   385  0000                     _CCPR4L	set	3960
   386  0000                     _CCPR5H	set	3958
   387  0000                     _CCPR5L	set	3957
   388  0000                     _CCPR6L	set	3954
   389  0000                     _CCPR7L	set	3951
   390  0000                     _EEADR	set	3938
   391  0000                     _EECON1bits	set	3967
   392  0000                     _EECON2	set	3966
   393  0000                     _EEDATA	set	3937
   394  0000                     _INTCONbits	set	4082
   395  0000                     _OSCCON	set	4051
   396  0000                     _PIE1bits	set	3997
   397  0000                     _PIE3bits	set	4003
   398  0000                     _PIR1bits	set	3998
   399  0000                     _PIR3bits	set	4004
   400  0000                     _PORTD	set	3971
   401  0000                     _RCSTAbits	set	4011
   402  0000                     _SPBRG1	set	4015
   403  0000                     _SSP1ADD	set	4040
   404  0000                     _SSP1BUF	set	4041
   405  0000                     _SSP1CON1	set	4038
   406  0000                     _SSP1CON2bits	set	4037
   407  0000                     _SSP1STAT	set	4039
   408  0000                     _SSP1STATbits	set	4039
   409  0000                     _T0CON	set	4053
   410  0000                     _T1CONbits	set	4045
   411  0000                     _TRISAbits	set	3986
   412  0000                     _TRISCbits	set	3988
   413  0000                     _TRISEbits	set	3990
   414  0000                     _TRISFbits	set	3991
   415  0000                     _TRISGbits	set	3992
   416  0000                     _TXREG	set	4013
   417  0000                     _TXREG1	set	4013
   418  0000                     _TXSTAbits	set	4012
   419  0000                     _CCPR6H	set	3955
   420  0000                     _CCPR7H	set	3952
   421  0000                     _ADON	set	32272
   422  0000                     _CCP10IE	set	32183
   423  0000                     _CCP10IF	set	32191
   424  0000                     _CCP1IE	set	32025
   425  0000                     _CCP1IF	set	32033
   426  0000                     _CCP3IE	set	32176
   427  0000                     _CCP3IF	set	32184
   428  0000                     _CCP4IE	set	32177
   429  0000                     _CCP4IF	set	32185
   430  0000                     _CCP5IE	set	32178
   431  0000                     _CCP5IF	set	32186
   432  0000                     _CCP6IE	set	32179
   433  0000                     _CCP6IF	set	32187
   434  0000                     _CCP7IE	set	32180
   435  0000                     _CCP7IF	set	32188
   436  0000                     _CCP8IE	set	32181
   437  0000                     _CCP8IF	set	32189
   438  0000                     _GIE	set	32663
   439  0000                     _GODONE	set	32273
   440  0000                     _PEIE	set	32662
   441  0000                     _RA4	set	31748
   442  0000                     _RA5	set	31749
   443  0000                     _RB0	set	31752
   444  0000                     _RB1	set	31753
   445  0000                     _RB2	set	31754
   446  0000                     _RB4	set	31756
   447  0000                     _RB5	set	31757
   448  0000                     _RC0	set	31760
   449  0000                     _RC5	set	31765
   450  0000                     _RD0	set	31768
   451  0000                     _RD1	set	31769
   452  0000                     _RD2	set	31770
   453  0000                     _RE0	set	31776
   454  0000                     _RE1	set	31777
   455  0000                     _RE7	set	31783
   456  0000                     _RF1	set	31785
   457  0000                     _RF3	set	31787
   458  0000                     _RF7	set	31791
   459  0000                     _T1CKPS0	set	32364
   460  0000                     _T1CKPS1	set	32365
   461  0000                     _TMR0IE	set	32661
   462  0000                     _TMR0IF	set	32658
   463  0000                     _TMR1IE	set	31976
   464  0000                     _TMR1IF	set	31984
   465  0000                     _TMR1ON	set	32360
   466  0000                     _TMR7IE	set	32203
   467  0000                     _TMR7IF	set	32211
   468  0000                     _TRISA4	set	31892
   469  0000                     _TRISA5	set	31893
   470  0000                     _TRISB0	set	31896
   471  0000                     _TRISB1	set	31897
   472  0000                     _TRISB2	set	31898
   473  0000                     _TRISB4	set	31900
   474  0000                     _TRISB5	set	31901
   475  0000                     _TRISC0	set	31904
   476  0000                     _TRISC2	set	31906
   477  0000                     _TRISC3	set	31907
   478  0000                     _TRISC4	set	31908
   479  0000                     _TRISC5	set	31909
   480  0000                     _TRISD0	set	31912
   481  0000                     _TRISD1	set	31913
   482  0000                     _TRISD2	set	31914
   483  0000                     _TRISE0	set	31920
   484  0000                     _TRISE1	set	31921
   485  0000                     _TRISE3	set	31923
   486  0000                     _TRISE7	set	31927
   487  0000                     _TRISF1	set	31929
   488  0000                     _TRISF3	set	31931
   489  0000                     _TRISF4	set	31932
   490  0000                     _TX1IF	set	31988
   491  0000                     _TX2IF	set	32036
   492  0000                     _TXIF	set	31988
   493  00FC48                     STR_200:
   494  00FC48  56                 	db	86	;'V'
   495  00FC49  46                 	db	70	;'F'
   496  00FC4A  44                 	db	68	;'D'
   497  00FC4B  20                 	db	32
   498  00FC4C  52                 	db	82	;'R'
   499  00FC4D  55                 	db	85	;'U'
   500  00FC4E  4E                 	db	78	;'N'
   501  00FC4F  20                 	db	32
   502  00FC50  54                 	db	84	;'T'
   503  00FC51  49                 	db	73	;'I'
   504  00FC52  4D                 	db	77	;'M'
   505  00FC53  45                 	db	69	;'E'
   506  00FC54  20                 	db	32
   507  00FC55  45                 	db	69	;'E'
   508  00FC56  52                 	db	82	;'R'
   509  00FC57  52                 	db	82	;'R'
   510  00FC58  4F                 	db	79	;'O'
   511  00FC59  52                 	db	82	;'R'
   512  00FC5A  20                 	db	32
   513  00FC5B  43                 	db	67	;'C'
   514  00FC5C  4F                 	db	79	;'O'
   515  00FC5D  55                 	db	85	;'U'
   516  00FC5E  4E                 	db	78	;'N'
   517  00FC5F  54                 	db	84	;'T'
   518  00FC60  45                 	db	69	;'E'
   519  00FC61  52                 	db	82	;'R'
   520  00FC62  00                 	db	0
   521  00FC63                     STR_222:
   522  00FC63  45                 	db	69	;'E'
   523  00FC64  45                 	db	69	;'E'
   524  00FC65  50                 	db	80	;'P'
   525  00FC66  52                 	db	82	;'R'
   526  00FC67  4F                 	db	79	;'O'
   527  00FC68  4D                 	db	77	;'M'
   528  00FC69  20                 	db	32
   529  00FC6A  4C                 	db	76	;'L'
   530  00FC6B  41                 	db	65	;'A'
   531  00FC6C  53                 	db	83	;'S'
   532  00FC6D  54                 	db	84	;'T'
   533  00FC6E  20                 	db	32
   534  00FC6F  54                 	db	84	;'T'
   535  00FC70  48                 	db	72	;'H'
   536  00FC71  52                 	db	82	;'R'
   537  00FC72  45                 	db	69	;'E'
   538  00FC73  45                 	db	69	;'E'
   539  00FC74  20                 	db	32
   540  00FC75  45                 	db	69	;'E'
   541  00FC76  52                 	db	82	;'R'
   542  00FC77  52                 	db	82	;'R'
   543  00FC78  4F                 	db	79	;'O'
   544  00FC79  52                 	db	82	;'R'
   545  00FC7A  00                 	db	0
   546  00FC7B                     STR_224:
   547  00FC7B  53                 	db	83	;'S'
   548  00FC7C  54                 	db	84	;'T'
   549  00FC7D  41                 	db	65	;'A'
   550  00FC7E  52                 	db	82	;'R'
   551  00FC7F  54                 	db	84	;'T'
   552  00FC80  2F                 	db	47
   553  00FC81  53                 	db	83	;'S'
   554  00FC82  54                 	db	84	;'T'
   555  00FC83  4F                 	db	79	;'O'
   556  00FC84  50                 	db	80	;'P'
   557  00FC85  20                 	db	32
   558  00FC86  4B                 	db	75	;'K'
   559  00FC87  45                 	db	69	;'E'
   560  00FC88  59                 	db	89	;'Y'
   561  00FC89  20                 	db	32
   562  00FC8A  46                 	db	70	;'F'
   563  00FC8B  4C                 	db	76	;'L'
   564  00FC8C  41                 	db	65	;'A'
   565  00FC8D  47                 	db	71	;'G'
   566  00FC8E  00                 	db	0
   567  00FC8F                     STR_204:
   568  00FC8F  4D                 	db	77	;'M'
   569  00FC90  4F                 	db	79	;'O'
   570  00FC91  54                 	db	84	;'T'
   571  00FC92  4F                 	db	79	;'O'
   572  00FC93  52                 	db	82	;'R'
   573  00FC94  20                 	db	32
   574  00FC95  53                 	db	83	;'S'
   575  00FC96  4C                 	db	76	;'L'
   576  00FC97  49                 	db	73	;'I'
   577  00FC98  50                 	db	80	;'P'
   578  00FC99  20                 	db	32
   579  00FC9A  43                 	db	67	;'C'
   580  00FC9B  4F                 	db	79	;'O'
   581  00FC9C  55                 	db	85	;'U'
   582  00FC9D  4E                 	db	78	;'N'
   583  00FC9E  54                 	db	84	;'T'
   584  00FC9F  45                 	db	69	;'E'
   585  00FCA0  52                 	db	82	;'R'
   586  00FCA1  00                 	db	0
   587  00FCA2                     STR_202:
   588  00FCA2  52                 	db	82	;'R'
   589  00FCA3  4F                 	db	79	;'O'
   590  00FCA4  54                 	db	84	;'T'
   591  00FCA5  4F                 	db	79	;'O'
   592  00FCA6  52                 	db	82	;'R'
   593  00FCA7  20                 	db	32
   594  00FCA8  53                 	db	83	;'S'
   595  00FCA9  4C                 	db	76	;'L'
   596  00FCAA  49                 	db	73	;'I'
   597  00FCAB  50                 	db	80	;'P'
   598  00FCAC  20                 	db	32
   599  00FCAD  43                 	db	67	;'C'
   600  00FCAE  4F                 	db	79	;'O'
   601  00FCAF  55                 	db	85	;'U'
   602  00FCB0  4E                 	db	78	;'N'
   603  00FCB1  54                 	db	84	;'T'
   604  00FCB2  45                 	db	69	;'E'
   605  00FCB3  52                 	db	82	;'R'
   606  00FCB4  00                 	db	0
   607  00FCB5                     STR_218:
   608  00FCB5  45                 	db	69	;'E'
   609  00FCB6  45                 	db	69	;'E'
   610  00FCB7  50                 	db	80	;'P'
   611  00FCB8  52                 	db	82	;'R'
   612  00FCB9  4F                 	db	79	;'O'
   613  00FCBA  4D                 	db	77	;'M'
   614  00FCBB  20                 	db	32
   615  00FCBC  45                 	db	69	;'E'
   616  00FCBD  52                 	db	82	;'R'
   617  00FCBE  52                 	db	82	;'R'
   618  00FCBF  4F                 	db	79	;'O'
   619  00FCC0  52                 	db	82	;'R'
   620  00FCC1  20                 	db	32
   621  00FCC2  54                 	db	84	;'T'
   622  00FCC3  49                 	db	73	;'I'
   623  00FCC4  4D                 	db	77	;'M'
   624  00FCC5  45                 	db	69	;'E'
   625  00FCC6  00                 	db	0
   626  00FCC7                     STR_216:
   627  00FCC7  50                 	db	80	;'P'
   628  00FCC8  49                 	db	73	;'I'
   629  00FCC9  54                 	db	84	;'T'
   630  00FCCA  43                 	db	67	;'C'
   631  00FCCB  48                 	db	72	;'H'
   632  00FCCC  20                 	db	32
   633  00FCCD  45                 	db	69	;'E'
   634  00FCCE  45                 	db	69	;'E'
   635  00FCCF  50                 	db	80	;'P'
   636  00FCD0  52                 	db	82	;'R'
   637  00FCD1  4F                 	db	79	;'O'
   638  00FCD2  4D                 	db	77	;'M'
   639  00FCD3  20                 	db	32
   640  00FCD4  46                 	db	70	;'F'
   641  00FCD5  4C                 	db	76	;'L'
   642  00FCD6  41                 	db	65	;'A'
   643  00FCD7  47                 	db	71	;'G'
   644  00FCD8  00                 	db	0
   645  00FCD9                     STR_220:
   646  00FCD9  45                 	db	69	;'E'
   647  00FCDA  45                 	db	69	;'E'
   648  00FCDB  50                 	db	80	;'P'
   649  00FCDC  52                 	db	82	;'R'
   650  00FCDD  4F                 	db	79	;'O'
   651  00FCDE  4D                 	db	77	;'M'
   652  00FCDF  20                 	db	32
   653  00FCE0  45                 	db	69	;'E'
   654  00FCE1  52                 	db	82	;'R'
   655  00FCE2  52                 	db	82	;'R'
   656  00FCE3  4F                 	db	79	;'O'
   657  00FCE4  52                 	db	82	;'R'
   658  00FCE5  20                 	db	32
   659  00FCE6  46                 	db	70	;'F'
   660  00FCE7  4C                 	db	76	;'L'
   661  00FCE8  41                 	db	65	;'A'
   662  00FCE9  47                 	db	71	;'G'
   663  00FCEA  00                 	db	0
   664  00FCEB                     STR_3:
   665  00FCEB  52                 	db	82	;'R'
   666  00FCEC  54                 	db	84	;'T'
   667  00FCED  30                 	db	48	;'0'
   668  00FCEE  31                 	db	49	;'1'
   669  00FCEF  20                 	db	32
   670  00FCF0  52                 	db	82	;'R'
   671  00FCF1  76                 	db	118	;'v'
   672  00FCF2  33                 	db	51	;'3'
   673  00FCF3  20                 	db	32
   674  00FCF4  4B                 	db	75	;'K'
   675  00FCF5  41                 	db	65	;'A'
   676  00FCF6  56                 	db	86	;'V'
   677  00FCF7  41                 	db	65	;'A'
   678  00FCF8  4E                 	db	78	;'N'
   679  00FCF9  4F                 	db	79	;'O'
   680  00FCFA  4F                 	db	79	;'O'
   681  00FCFB  52                 	db	82	;'R'
   682  00FCFC  00                 	db	0
   683  00FCFD                     STR_41:
   684  00FCFD  56                 	db	86	;'V'
   685  00FCFE  46                 	db	70	;'F'
   686  00FCFF  44                 	db	68	;'D'
   687  00FD00  5F                 	db	95	;'_'
   688  00FD01  53                 	db	83	;'S'
   689  00FD02  48                 	db	72	;'H'
   690  00FD03  4F                 	db	79	;'O'
   691  00FD04  52                 	db	82	;'R'
   692  00FD05  54                 	db	84	;'T'
   693  00FD06  5F                 	db	95	;'_'
   694  00FD07  43                 	db	67	;'C'
   695  00FD08  49                 	db	73	;'I'
   696  00FD09  52                 	db	82	;'R'
   697  00FD0A  43                 	db	67	;'C'
   698  00FD0B  55                 	db	85	;'U'
   699  00FD0C  49                 	db	73	;'I'
   700  00FD0D  54                 	db	84	;'T'
   701  00FD0E  00                 	db	0
   702  00FD0F                     STR_214:
   703  00FD0F  47                 	db	71	;'G'
   704  00FD10  45                 	db	69	;'E'
   705  00FD11  4E                 	db	78	;'N'
   706  00FD12  20                 	db	32
   707  00FD13  45                 	db	69	;'E'
   708  00FD14  45                 	db	69	;'E'
   709  00FD15  50                 	db	80	;'P'
   710  00FD16  52                 	db	82	;'R'
   711  00FD17  4F                 	db	79	;'O'
   712  00FD18  4D                 	db	77	;'M'
   713  00FD19  20                 	db	32
   714  00FD1A  46                 	db	70	;'F'
   715  00FD1B  4C                 	db	76	;'L'
   716  00FD1C  41                 	db	65	;'A'
   717  00FD1D  47                 	db	71	;'G'
   718  00FD1E  00                 	db	0
   719  00FD1F                     STR_184:
   720  00FD1F  45                 	db	69	;'E'
   721  00FD20  52                 	db	82	;'R'
   722  00FD21  52                 	db	82	;'R'
   723  00FD22  4F                 	db	79	;'O'
   724  00FD23  52                 	db	82	;'R'
   725  00FD24  20                 	db	32
   726  00FD25  49                 	db	73	;'I'
   727  00FD26  4E                 	db	78	;'N'
   728  00FD27  20                 	db	32
   729  00FD28  53                 	db	83	;'S'
   730  00FD29  54                 	db	84	;'T'
   731  00FD2A  52                 	db	82	;'R'
   732  00FD2B  49                 	db	73	;'I'
   733  00FD2C  4E                 	db	78	;'N'
   734  00FD2D  47                 	db	71	;'G'
   735  00FD2E  00                 	db	0
   736  00FD2F                     STR_146:
   737  00FD2F  44                 	db	68	;'D'
   738  00FD30  43                 	db	67	;'C'
   739  00FD31  20                 	db	32
   740  00FD32  42                 	db	66	;'B'
   741  00FD33  55                 	db	85	;'U'
   742  00FD34  53                 	db	83	;'S'
   743  00FD35  20                 	db	32
   744  00FD36  56                 	db	86	;'V'
   745  00FD37  4F                 	db	79	;'O'
   746  00FD38  4C                 	db	76	;'L'
   747  00FD39  54                 	db	84	;'T'
   748  00FD3A  41                 	db	65	;'A'
   749  00FD3B  47                 	db	71	;'G'
   750  00FD3C  45                 	db	69	;'E'
   751  00FD3D  00                 	db	0
   752  00FD3E                     STR_140:
   753  00FD3E  4D                 	db	77	;'M'
   754  00FD3F  4F                 	db	79	;'O'
   755  00FD40  54                 	db	84	;'T'
   756  00FD41  4F                 	db	79	;'O'
   757  00FD42  52                 	db	82	;'R'
   758  00FD43  20                 	db	32
   759  00FD44  53                 	db	83	;'S'
   760  00FD45  4C                 	db	76	;'L'
   761  00FD46  49                 	db	73	;'I'
   762  00FD47  50                 	db	80	;'P'
   763  00FD48  20                 	db	32
   764  00FD49  52                 	db	82	;'R'
   765  00FD4A  50                 	db	80	;'P'
   766  00FD4B  4D                 	db	77	;'M'
   767  00FD4C  00                 	db	0
   768  00FD4D                     STR_142:
   769  00FD4D  52                 	db	82	;'R'
   770  00FD4E  4F                 	db	79	;'O'
   771  00FD4F  54                 	db	84	;'T'
   772  00FD50  4F                 	db	79	;'O'
   773  00FD51  52                 	db	82	;'R'
   774  00FD52  20                 	db	32
   775  00FD53  53                 	db	83	;'S'
   776  00FD54  4C                 	db	76	;'L'
   777  00FD55  49                 	db	73	;'I'
   778  00FD56  50                 	db	80	;'P'
   779  00FD57  20                 	db	32
   780  00FD58  52                 	db	82	;'R'
   781  00FD59  50                 	db	80	;'P'
   782  00FD5A  4D                 	db	77	;'M'
   783  00FD5B  00                 	db	0
   784  00FD5C                     STR_172:
   785  00FD5C  59                 	db	89	;'Y'
   786  00FD5D  2D                 	db	45
   787  00FD5E  50                 	db	80	;'P'
   788  00FD5F  4F                 	db	79	;'O'
   789  00FD60  57                 	db	87	;'W'
   790  00FD61  45                 	db	69	;'E'
   791  00FD62  52                 	db	82	;'R'
   792  00FD63  20                 	db	32
   793  00FD64  46                 	db	70	;'F'
   794  00FD65  41                 	db	65	;'A'
   795  00FD66  43                 	db	67	;'C'
   796  00FD67  54                 	db	84	;'T'
   797  00FD68  4F                 	db	79	;'O'
   798  00FD69  52                 	db	82	;'R'
   799  00FD6A  00                 	db	0
   800  00FD6B                     STR_132:
   801  00FD6B  57                 	db	87	;'W'
   802  00FD6C  49                 	db	73	;'I'
   803  00FD6D  4E                 	db	78	;'N'
   804  00FD6E  44                 	db	68	;'D'
   805  00FD6F  20                 	db	32
   806  00FD70  32                 	db	50	;'2'
   807  00FD71  20                 	db	32
   808  00FD72  49                 	db	73	;'I'
   809  00FD73  4E                 	db	78	;'N'
   810  00FD74  53                 	db	83	;'S'
   811  00FD75  54                 	db	84	;'T'
   812  00FD76  41                 	db	65	;'A'
   813  00FD77  4E                 	db	78	;'N'
   814  00FD78  54                 	db	84	;'T'
   815  00FD79  00                 	db	0
   816  00FD7A                     STR_148:
   817  00FD7A  44                 	db	68	;'D'
   818  00FD7B  43                 	db	67	;'C'
   819  00FD7C  20                 	db	32
   820  00FD7D  42                 	db	66	;'B'
   821  00FD7E  55                 	db	85	;'U'
   822  00FD7F  53                 	db	83	;'S'
   823  00FD80  20                 	db	32
   824  00FD81  43                 	db	67	;'C'
   825  00FD82  55                 	db	85	;'U'
   826  00FD83  52                 	db	82	;'R'
   827  00FD84  52                 	db	82	;'R'
   828  00FD85  45                 	db	69	;'E'
   829  00FD86  4E                 	db	78	;'N'
   830  00FD87  54                 	db	84	;'T'
   831  00FD88  00                 	db	0
   832  00FD89                     STR_186:
   833  00FD89  54                 	db	84	;'T'
   834  00FD8A  55                 	db	85	;'U'
   835  00FD8B  52                 	db	82	;'R'
   836  00FD8C  42                 	db	66	;'B'
   837  00FD8D  49                 	db	73	;'I'
   838  00FD8E  4E                 	db	78	;'N'
   839  00FD8F  45                 	db	69	;'E'
   840  00FD90  20                 	db	32
   841  00FD91  53                 	db	83	;'S'
   842  00FD92  54                 	db	84	;'T'
   843  00FD93  41                 	db	65	;'A'
   844  00FD94  54                 	db	84	;'T'
   845  00FD95  45                 	db	69	;'E'
   846  00FD96  00                 	db	0
   847  00FD97                     STR_138:
   848  00FD97  47                 	db	71	;'G'
   849  00FD98  45                 	db	69	;'E'
   850  00FD99  4E                 	db	78	;'N'
   851  00FD9A  45                 	db	69	;'E'
   852  00FD9B  52                 	db	82	;'R'
   853  00FD9C  41                 	db	65	;'A'
   854  00FD9D  54                 	db	84	;'T'
   855  00FD9E  4F                 	db	79	;'O'
   856  00FD9F  52                 	db	82	;'R'
   857  00FDA0  20                 	db	32
   858  00FDA1  52                 	db	82	;'R'
   859  00FDA2  50                 	db	80	;'P'
   860  00FDA3  4D                 	db	77	;'M'
   861  00FDA4  00                 	db	0
   862  00FDA5                     STR_79:
   863  00FDA5  56                 	db	86	;'V'
   864  00FDA6  46                 	db	70	;'F'
   865  00FDA7  44                 	db	68	;'D'
   866  00FDA8  5F                 	db	95	;'_'
   867  00FDA9  43                 	db	67	;'C'
   868  00FDAA  4F                 	db	79	;'O'
   869  00FDAB  4D                 	db	77	;'M'
   870  00FDAC  4D                 	db	77	;'M'
   871  00FDAD  55                 	db	85	;'U'
   872  00FDAE  5F                 	db	95	;'_'
   873  00FDAF  45                 	db	69	;'E'
   874  00FDB0  52                 	db	82	;'R'
   875  00FDB1  52                 	db	82	;'R'
   876  00FDB2  00                 	db	0
   877  00FDB3                     STR_59:
   878  00FDB3  54                 	db	84	;'T'
   879  00FDB4  55                 	db	85	;'U'
   880  00FDB5  52                 	db	82	;'R'
   881  00FDB6  42                 	db	66	;'B'
   882  00FDB7  49                 	db	73	;'I'
   883  00FDB8  4E                 	db	78	;'N'
   884  00FDB9  45                 	db	69	;'E'
   885  00FDBA  5F                 	db	95	;'_'
   886  00FDBB  55                 	db	85	;'U'
   887  00FDBC  53                 	db	83	;'S'
   888  00FDBD  5F                 	db	95	;'_'
   889  00FDBE  4F                 	db	79	;'O'
   890  00FDBF  53                 	db	83	;'S'
   891  00FDC0  00                 	db	0
   892  00FDC1                     STR_208:
   893  00FDC1  56                 	db	86	;'V'
   894  00FDC2  46                 	db	70	;'F'
   895  00FDC3  44                 	db	68	;'D'
   896  00FDC4  20                 	db	32
   897  00FDC5  42                 	db	66	;'B'
   898  00FDC6  4F                 	db	79	;'O'
   899  00FDC7  54                 	db	84	;'T'
   900  00FDC8  54                 	db	84	;'T'
   901  00FDC9  4F                 	db	79	;'O'
   902  00FDCA  4D                 	db	77	;'M'
   903  00FDCB  20                 	db	32
   904  00FDCC  43                 	db	67	;'C'
   905  00FDCD  54                 	db	84	;'T'
   906  00FDCE  00                 	db	0
   907  00FDCF                     STR_49:
   908  00FDCF  56                 	db	86	;'V'
   909  00FDD0  46                 	db	70	;'F'
   910  00FDD1  44                 	db	68	;'D'
   911  00FDD2  5F                 	db	95	;'_'
   912  00FDD3  52                 	db	82	;'R'
   913  00FDD4  55                 	db	85	;'U'
   914  00FDD5  4E                 	db	78	;'N'
   915  00FDD6  5F                 	db	95	;'_'
   916  00FDD7  54                 	db	84	;'T'
   917  00FDD8  49                 	db	73	;'I'
   918  00FDD9  4D                 	db	77	;'M'
   919  00FDDA  45                 	db	69	;'E'
   920  00FDDB  00                 	db	0
   921  00FDDC                     STR_198:
   922  00FDDC  52                 	db	82	;'R'
   923  00FDDD  41                 	db	65	;'A'
   924  00FDDE  4D                 	db	77	;'M'
   925  00FDDF  50                 	db	80	;'P'
   926  00FDE0  20                 	db	32
   927  00FDE1  55                 	db	85	;'U'
   928  00FDE2  50                 	db	80	;'P'
   929  00FDE3  20                 	db	32
   930  00FDE4  4C                 	db	76	;'L'
   931  00FDE5  4F                 	db	79	;'O'
   932  00FDE6  4F                 	db	79	;'O'
   933  00FDE7  50                 	db	80	;'P'
   934  00FDE8  00                 	db	0
   935  00FDE9                     STR_194:
   936  00FDE9  4C                 	db	76	;'L'
   937  00FDEA  41                 	db	65	;'A'
   938  00FDEB  53                 	db	83	;'S'
   939  00FDEC  54                 	db	84	;'T'
   940  00FDED  20                 	db	32
   941  00FDEE  35                 	db	53	;'5'
   942  00FDEF  20                 	db	32
   943  00FDF0  45                 	db	69	;'E'
   944  00FDF1  52                 	db	82	;'R'
   945  00FDF2  52                 	db	82	;'R'
   946  00FDF3  4F                 	db	79	;'O'
   947  00FDF4  52                 	db	82	;'R'
   948  00FDF5  00                 	db	0
   949  00FDF6                     STR_128:
   950  00FDF6  57                 	db	87	;'W'
   951  00FDF7  49                 	db	73	;'I'
   952  00FDF8  4E                 	db	78	;'N'
   953  00FDF9  44                 	db	68	;'D'
   954  00FDFA  5F                 	db	95	;'_'
   955  00FDFB  49                 	db	73	;'I'
   956  00FDFC  4E                 	db	78	;'N'
   957  00FDFD  53                 	db	83	;'S'
   958  00FDFE  54                 	db	84	;'T'
   959  00FDFF  41                 	db	65	;'A'
   960  00FE00  4E                 	db	78	;'N'
   961  00FE01  54                 	db	84	;'T'
   962  00FE02  00                 	db	0
   963  00FE03                     STR_180:
   964  00FE03  49                 	db	73	;'I'
   965  00FE04  4E                 	db	78	;'N'
   966  00FE05  49                 	db	73	;'I'
   967  00FE06  54                 	db	84	;'T'
   968  00FE07  41                 	db	65	;'A'
   969  00FE08  4C                 	db	76	;'L'
   970  00FE09  20                 	db	32
   971  00FE0A  44                 	db	68	;'D'
   972  00FE0B  45                 	db	69	;'E'
   973  00FE0C  4C                 	db	76	;'L'
   974  00FE0D  41                 	db	65	;'A'
   975  00FE0E  59                 	db	89	;'Y'
   976  00FE0F  00                 	db	0
   977  00FE10                     STR_176:
   978  00FE10  50                 	db	80	;'P'
   979  00FE11  48                 	db	72	;'H'
   980  00FE12  41                 	db	65	;'A'
   981  00FE13  53                 	db	83	;'S'
   982  00FE14  45                 	db	69	;'E'
   983  00FE15  20                 	db	32
   984  00FE16  41                 	db	65	;'A'
   985  00FE17  4E                 	db	78	;'N'
   986  00FE18  47                 	db	71	;'G'
   987  00FE19  4C                 	db	76	;'L'
   988  00FE1A  45                 	db	69	;'E'
   989  00FE1B  00                 	db	0
   990  00FE1C                     STR_192:
   991  00FE1C  54                 	db	84	;'T'
   992  00FE1D  45                 	db	69	;'E'
   993  00FE1E  4D                 	db	77	;'M'
   994  00FE1F  50                 	db	80	;'P'
   995  00FE20  45                 	db	69	;'E'
   996  00FE21  52                 	db	82	;'R'
   997  00FE22  41                 	db	65	;'A'
   998  00FE23  54                 	db	84	;'T'
   999  00FE24  55                 	db	85	;'U'
  1000  00FE25  52                 	db	82	;'R'
  1001  00FE26  45                 	db	69	;'E'
  1002  00FE27  00                 	db	0
  1003  00FE28                     STR_136:
  1004  00FE28  54                 	db	84	;'T'
  1005  00FE29  55                 	db	85	;'U'
  1006  00FE2A  52                 	db	82	;'R'
  1007  00FE2B  42                 	db	66	;'B'
  1008  00FE2C  49                 	db	73	;'I'
  1009  00FE2D  4E                 	db	78	;'N'
  1010  00FE2E  45                 	db	69	;'E'
  1011  00FE2F  20                 	db	32
  1012  00FE30  52                 	db	82	;'R'
  1013  00FE31  50                 	db	80	;'P'
  1014  00FE32  4D                 	db	77	;'M'
  1015  00FE33  00                 	db	0
  1016  00FE34                     STR_77:
  1017  00FE34  4D                 	db	77	;'M'
  1018  00FE35  41                 	db	65	;'A'
  1019  00FE36  4E                 	db	78	;'N'
  1020  00FE37  55                 	db	85	;'U'
  1021  00FE38  41                 	db	65	;'A'
  1022  00FE39  4C                 	db	76	;'L'
  1023  00FE3A  5F                 	db	95	;'_'
  1024  00FE3B  53                 	db	83	;'S'
  1025  00FE3C  54                 	db	84	;'T'
  1026  00FE3D  4F                 	db	79	;'O'
  1027  00FE3E  50                 	db	80	;'P'
  1028  00FE3F  00                 	db	0
  1029  00FE40                     STR_126:
  1030  00FE40  54                 	db	84	;'T'
  1031  00FE41  55                 	db	85	;'U'
  1032  00FE42  52                 	db	82	;'R'
  1033  00FE43  42                 	db	66	;'B'
  1034  00FE44  49                 	db	73	;'I'
  1035  00FE45  4E                 	db	78	;'N'
  1036  00FE46  45                 	db	69	;'E'
  1037  00FE47  20                 	db	32
  1038  00FE48  49                 	db	73	;'I'
  1039  00FE49  44                 	db	68	;'D'
  1040  00FE4A  00                 	db	0
  1041  00FE4B                     STR_134:
  1042  00FE4B  57                 	db	87	;'W'
  1043  00FE4C  49                 	db	73	;'I'
  1044  00FE4D  4E                 	db	78	;'N'
  1045  00FE4E  44                 	db	68	;'D'
  1046  00FE4F  20                 	db	32
  1047  00FE50  32                 	db	50	;'2'
  1048  00FE51  20                 	db	32
  1049  00FE52  41                 	db	65	;'A'
  1050  00FE53  56                 	db	86	;'V'
  1051  00FE54  47                 	db	71	;'G'
  1052  00FE55  00                 	db	0
  1053  00FE56                     STR_69:
  1054  00FE56  54                 	db	84	;'T'
  1055  00FE57  55                 	db	85	;'U'
  1056  00FE58  52                 	db	82	;'R'
  1057  00FE59  42                 	db	66	;'B'
  1058  00FE5A  49                 	db	73	;'I'
  1059  00FE5B  4E                 	db	78	;'N'
  1060  00FE5C  45                 	db	69	;'E'
  1061  00FE5D  5F                 	db	95	;'_'
  1062  00FE5E  4F                 	db	79	;'O'
  1063  00FE5F  4C                 	db	76	;'L'
  1064  00FE60  00                 	db	0
  1065  00FE61                     STR_57:
  1066  00FE61  4D                 	db	77	;'M'
  1067  00FE62  4F                 	db	79	;'O'
  1068  00FE63  54                 	db	84	;'T'
  1069  00FE64  4F                 	db	79	;'O'
  1070  00FE65  52                 	db	82	;'R'
  1071  00FE66  5F                 	db	95	;'_'
  1072  00FE67  53                 	db	83	;'S'
  1073  00FE68  4C                 	db	76	;'L'
  1074  00FE69  49                 	db	73	;'I'
  1075  00FE6A  50                 	db	80	;'P'
  1076  00FE6B  00                 	db	0
  1077  00FE6C                     STR_55:
  1078  00FE6C  52                 	db	82	;'R'
  1079  00FE6D  4F                 	db	79	;'O'
  1080  00FE6E  54                 	db	84	;'T'
  1081  00FE6F  4F                 	db	79	;'O'
  1082  00FE70  52                 	db	82	;'R'
  1083  00FE71  5F                 	db	95	;'_'
  1084  00FE72  53                 	db	83	;'S'
  1085  00FE73  4C                 	db	76	;'L'
  1086  00FE74  49                 	db	73	;'I'
  1087  00FE75  50                 	db	80	;'P'
  1088  00FE76  00                 	db	0
  1089  00FE77                     STR_47:
  1090  00FE77  54                 	db	84	;'T'
  1091  00FE78  55                 	db	85	;'U'
  1092  00FE79  52                 	db	82	;'R'
  1093  00FE7A  42                 	db	66	;'B'
  1094  00FE7B  49                 	db	73	;'I'
  1095  00FE7C  4E                 	db	78	;'N'
  1096  00FE7D  45                 	db	69	;'E'
  1097  00FE7E  5F                 	db	95	;'_'
  1098  00FE7F  4E                 	db	78	;'N'
  1099  00FE80  52                 	db	82	;'R'
  1100  00FE81  00                 	db	0
  1101  00FE82                     STR_81:
  1102  00FE82  4D                 	db	77	;'M'
  1103  00FE83  45                 	db	69	;'E'
  1104  00FE84  41                 	db	65	;'A'
  1105  00FE85  55                 	db	85	;'U'
  1106  00FE86  52                 	db	82	;'R'
  1107  00FE87  45                 	db	69	;'E'
  1108  00FE88  5F                 	db	95	;'_'
  1109  00FE89  45                 	db	69	;'E'
  1110  00FE8A  52                 	db	82	;'R'
  1111  00FE8B  52                 	db	82	;'R'
  1112  00FE8C  00                 	db	0
  1113  00FE8D                     STR_206:
  1114  00FE8D  56                 	db	86	;'V'
  1115  00FE8E  46                 	db	70	;'F'
  1116  00FE8F  44                 	db	68	;'D'
  1117  00FE90  20                 	db	32
  1118  00FE91  54                 	db	84	;'T'
  1119  00FE92  4F                 	db	79	;'O'
  1120  00FE93  50                 	db	80	;'P'
  1121  00FE94  20                 	db	32
  1122  00FE95  43                 	db	67	;'C'
  1123  00FE96  54                 	db	84	;'T'
  1124  00FE97  00                 	db	0
  1125  00FE98                     STR_71:
  1126  00FE98  44                 	db	68	;'D'
  1127  00FE99  43                 	db	67	;'C'
  1128  00FE9A  5F                 	db	95	;'_'
  1129  00FE9B  45                 	db	69	;'E'
  1130  00FE9C  58                 	db	88	;'X'
  1131  00FE9D  54                 	db	84	;'T'
  1132  00FE9E  5F                 	db	95	;'_'
  1133  00FE9F  4C                 	db	76	;'L'
  1134  00FEA0  4F                 	db	79	;'O'
  1135  00FEA1  57                 	db	87	;'W'
  1136  00FEA2  00                 	db	0
  1137  00FEA3                     STR_35:
  1138  00FEA3  57                 	db	87	;'W'
  1139  00FEA4  53                 	db	83	;'S'
  1140  00FEA5  5F                 	db	95	;'_'
  1141  00FEA6  4D                 	db	77	;'M'
  1142  00FEA7  49                 	db	73	;'I'
  1143  00FEA8  4E                 	db	78	;'N'
  1144  00FEA9  5F                 	db	95	;'_'
  1145  00FEAA  4D                 	db	77	;'M'
  1146  00FEAB  41                 	db	65	;'A'
  1147  00FEAC  58                 	db	88	;'X'
  1148  00FEAD  00                 	db	0
  1149  00FEAE                     STR_37:
  1150  00FEAE  56                 	db	86	;'V'
  1151  00FEAF  4F                 	db	79	;'O'
  1152  00FEB0  4C                 	db	76	;'L'
  1153  00FEB1  54                 	db	84	;'T'
  1154  00FEB2  5F                 	db	95	;'_'
  1155  00FEB3  48                 	db	72	;'H'
  1156  00FEB4  49                 	db	73	;'I'
  1157  00FEB5  47                 	db	71	;'G'
  1158  00FEB6  48                 	db	72	;'H'
  1159  00FEB7  00                 	db	0
  1160  00FEB8                     STR_63:
  1161  00FEB8  43                 	db	67	;'C'
  1162  00FEB9  55                 	db	85	;'U'
  1163  00FEBA  52                 	db	82	;'R'
  1164  00FEBB  52                 	db	82	;'R'
  1165  00FEBC  45                 	db	69	;'E'
  1166  00FEBD  4E                 	db	78	;'N'
  1167  00FEBE  54                 	db	84	;'T'
  1168  00FEBF  5F                 	db	95	;'_'
  1169  00FEC0  48                 	db	72	;'H'
  1170  00FEC1  00                 	db	0
  1171  00FEC2                     STR_67:
  1172  00FEC2  50                 	db	80	;'P'
  1173  00FEC3  4F                 	db	79	;'O'
  1174  00FEC4  57                 	db	87	;'W'
  1175  00FEC5  45                 	db	69	;'E'
  1176  00FEC6  52                 	db	82	;'R'
  1177  00FEC7  5F                 	db	95	;'_'
  1178  00FEC8  4D                 	db	77	;'M'
  1179  00FEC9  49                 	db	73	;'I'
  1180  00FECA  4E                 	db	78	;'N'
  1181  00FECB  00                 	db	0
  1182  00FECC                     STR_210:
  1183  00FECC  4C                 	db	76	;'L'
  1184  00FECD  4F                 	db	79	;'O'
  1185  00FECE  47                 	db	71	;'G'
  1186  00FECF  49                 	db	73	;'I'
  1187  00FED0  43                 	db	67	;'C'
  1188  00FED1  20                 	db	32
  1189  00FED2  4F                 	db	79	;'O'
  1190  00FED3  54                 	db	84	;'T'
  1191  00FED4  50                 	db	80	;'P'
  1192  00FED5  00                 	db	0
  1193  00FED6                     STR_43:
  1194  00FED6  50                 	db	80	;'P'
  1195  00FED7  48                 	db	72	;'H'
  1196  00FED8  41                 	db	65	;'A'
  1197  00FED9  53                 	db	83	;'S'
  1198  00FEDA  45                 	db	69	;'E'
  1199  00FEDB  5F                 	db	95	;'_'
  1200  00FEDC  53                 	db	83	;'S'
  1201  00FEDD  45                 	db	69	;'E'
  1202  00FEDE  51                 	db	81	;'Q'
  1203  00FEDF  00                 	db	0
  1204  00FEE0                     STR_178:
  1205  00FEE0  56                 	db	86	;'V'
  1206  00FEE1  46                 	db	70	;'F'
  1207  00FEE2  44                 	db	68	;'D'
  1208  00FEE3  20                 	db	32
  1209  00FEE4  45                 	db	69	;'E'
  1210  00FEE5  52                 	db	82	;'R'
  1211  00FEE6  52                 	db	82	;'R'
  1212  00FEE7  4F                 	db	79	;'O'
  1213  00FEE8  52                 	db	82	;'R'
  1214  00FEE9  00                 	db	0
  1215  00FEEA                     STR_196:
  1216  00FEEA  43                 	db	67	;'C'
  1217  00FEEB  4F                 	db	79	;'O'
  1218  00FEEC  4E                 	db	78	;'N'
  1219  00FEED  54                 	db	84	;'T'
  1220  00FEEE  41                 	db	65	;'A'
  1221  00FEEF  43                 	db	67	;'C'
  1222  00FEF0  54                 	db	84	;'T'
  1223  00FEF1  4F                 	db	79	;'O'
  1224  00FEF2  52                 	db	82	;'R'
  1225  00FEF3  00                 	db	0
  1226  00FEF4                     STR_160:
  1227  00FEF4  42                 	db	66	;'B'
  1228  00FEF5  20                 	db	32
  1229  00FEF6  43                 	db	67	;'C'
  1230  00FEF7  55                 	db	85	;'U'
  1231  00FEF8  52                 	db	82	;'R'
  1232  00FEF9  52                 	db	82	;'R'
  1233  00FEFA  45                 	db	69	;'E'
  1234  00FEFB  4E                 	db	78	;'N'
  1235  00FEFC  54                 	db	84	;'T'
  1236  00FEFD  00                 	db	0
  1237  00FEFE                     STR_156:
  1238  00FEFE  52                 	db	82	;'R'
  1239  00FEFF  20                 	db	32
  1240  00FF00  43                 	db	67	;'C'
  1241  00FF01  55                 	db	85	;'U'
  1242  00FF02  52                 	db	82	;'R'
  1243  00FF03  52                 	db	82	;'R'
  1244  00FF04  45                 	db	69	;'E'
  1245  00FF05  4E                 	db	78	;'N'
  1246  00FF06  54                 	db	84	;'T'
  1247  00FF07  00                 	db	0
  1248  00FF08                     STR_158:
  1249  00FF08  59                 	db	89	;'Y'
  1250  00FF09  20                 	db	32
  1251  00FF0A  43                 	db	67	;'C'
  1252  00FF0B  55                 	db	85	;'U'
  1253  00FF0C  52                 	db	82	;'R'
  1254  00FF0D  52                 	db	82	;'R'
  1255  00FF0E  45                 	db	69	;'E'
  1256  00FF0F  4E                 	db	78	;'N'
  1257  00FF10  54                 	db	84	;'T'
  1258  00FF11  00                 	db	0
  1259  00FF12                     STR_65:
  1260  00FF12  50                 	db	80	;'P'
  1261  00FF13  4F                 	db	79	;'O'
  1262  00FF14  57                 	db	87	;'W'
  1263  00FF15  45                 	db	69	;'E'
  1264  00FF16  52                 	db	82	;'R'
  1265  00FF17  5F                 	db	95	;'_'
  1266  00FF18  4D                 	db	77	;'M'
  1267  00FF19  41                 	db	65	;'A'
  1268  00FF1A  58                 	db	88	;'X'
  1269  00FF1B  00                 	db	0
  1270  00FF1C                     STR_174:
  1271  00FF1C  46                 	db	70	;'F'
  1272  00FF1D  52                 	db	82	;'R'
  1273  00FF1E  45                 	db	69	;'E'
  1274  00FF1F  51                 	db	81	;'Q'
  1275  00FF20  55                 	db	85	;'U'
  1276  00FF21  45                 	db	69	;'E'
  1277  00FF22  4E                 	db	78	;'N'
  1278  00FF23  43                 	db	67	;'C'
  1279  00FF24  59                 	db	89	;'Y'
  1280  00FF25  00                 	db	0
  1281  00FF26                     STR_124:
  1282  00FF26  53                 	db	83	;'S'
  1283  00FF27  65                 	db	101	;'e'
  1284  00FF28  72                 	db	114	;'r'
  1285  00FF29  69                 	db	105	;'i'
  1286  00FF2A  61                 	db	97	;'a'
  1287  00FF2B  6C                 	db	108	;'l'
  1288  00FF2C  20                 	db	32
  1289  00FF2D  4E                 	db	78	;'N'
  1290  00FF2E  6F                 	db	111	;'o'
  1291  00FF2F  00                 	db	0
  1292  00FF30                     STR_73:
  1293  00FF30  50                 	db	80	;'P'
  1294  00FF31  49                 	db	73	;'I'
  1295  00FF32  54                 	db	84	;'T'
  1296  00FF33  43                 	db	67	;'C'
  1297  00FF34  48                 	db	72	;'H'
  1298  00FF35  5F                 	db	95	;'_'
  1299  00FF36  46                 	db	70	;'F'
  1300  00FF37  42                 	db	66	;'B'
  1301  00FF38  00                 	db	0
  1302  00FF39                     STR_89:
  1303  00FF39  53                 	db	83	;'S'
  1304  00FF3A  54                 	db	84	;'T'
  1305  00FF3B  4F                 	db	79	;'O'
  1306  00FF3C  50                 	db	80	;'P'
  1307  00FF3D  50                 	db	80	;'P'
  1308  00FF3E  49                 	db	73	;'I'
  1309  00FF3F  4E                 	db	78	;'N'
  1310  00FF40  47                 	db	71	;'G'
  1311  00FF41  00                 	db	0
  1312  00FF42                     STR_130:
  1313  00FF42  57                 	db	87	;'W'
  1314  00FF43  49                 	db	73	;'I'
  1315  00FF44  4E                 	db	78	;'N'
  1316  00FF45  44                 	db	68	;'D'
  1317  00FF46  20                 	db	32
  1318  00FF47  41                 	db	65	;'A'
  1319  00FF48  56                 	db	86	;'V'
  1320  00FF49  47                 	db	71	;'G'
  1321  00FF4A  00                 	db	0
  1322  00FF4B                     STR_182:
  1323  00FF4B  45                 	db	69	;'E'
  1324  00FF4C  52                 	db	82	;'R'
  1325  00FF4D  52                 	db	82	;'R'
  1326  00FF4E  4F                 	db	79	;'O'
  1327  00FF4F  52                 	db	82	;'R'
  1328  00FF50  20                 	db	32
  1329  00FF51  4E                 	db	78	;'N'
  1330  00FF52  4F                 	db	79	;'O'
  1331  00FF53  00                 	db	0
  1332  00FF54                     STR_33:
  1333  00FF54  4E                 	db	78	;'N'
  1334  00FF55  4F                 	db	79	;'O'
  1335  00FF56  5F                 	db	95	;'_'
  1336  00FF57  45                 	db	69	;'E'
  1337  00FF58  52                 	db	82	;'R'
  1338  00FF59  52                 	db	82	;'R'
  1339  00FF5A  4F                 	db	79	;'O'
  1340  00FF5B  52                 	db	82	;'R'
  1341  00FF5C  00                 	db	0
  1342  00FF5D                     STR_39:
  1343  00FF5D  56                 	db	86	;'V'
  1344  00FF5E  4F                 	db	79	;'O'
  1345  00FF5F  4C                 	db	76	;'L'
  1346  00FF60  54                 	db	84	;'T'
  1347  00FF61  5F                 	db	95	;'_'
  1348  00FF62  4C                 	db	76	;'L'
  1349  00FF63  4F                 	db	79	;'O'
  1350  00FF64  57                 	db	87	;'W'
  1351  00FF65  00                 	db	0
  1352  00FF66                     STR_87:
  1353  00FF66  52                 	db	82	;'R'
  1354  00FF67  55                 	db	85	;'U'
  1355  00FF68  4E                 	db	78	;'N'
  1356  00FF69  4E                 	db	78	;'N'
  1357  00FF6A  49                 	db	73	;'I'
  1358  00FF6B  4E                 	db	78	;'N'
  1359  00FF6C  47                 	db	71	;'G'
  1360  00FF6D  00                 	db	0
  1361  00FF6E                     STR_51:
  1362  00FF6E  44                 	db	68	;'D'
  1363  00FF6F  43                 	db	67	;'C'
  1364  00FF70  42                 	db	66	;'B'
  1365  00FF71  5F                 	db	95	;'_'
  1366  00FF72  4C                 	db	76	;'L'
  1367  00FF73  5F                 	db	95	;'_'
  1368  00FF74  48                 	db	72	;'H'
  1369  00FF75  00                 	db	0
  1370  00FF76                     STR_212:
  1371  00FF76  56                 	db	86	;'V'
  1372  00FF77  46                 	db	70	;'F'
  1373  00FF78  44                 	db	68	;'D'
  1374  00FF79  20                 	db	32
  1375  00FF7A  4F                 	db	79	;'O'
  1376  00FF7B  54                 	db	84	;'T'
  1377  00FF7C  50                 	db	80	;'P'
  1378  00FF7D  00                 	db	0
  1379  00FF7E                     STR_83:
  1380  00FF7E  53                 	db	83	;'S'
  1381  00FF7F  54                 	db	84	;'T'
  1382  00FF80  41                 	db	65	;'A'
  1383  00FF81  52                 	db	82	;'R'
  1384  00FF82  54                 	db	84	;'T'
  1385  00FF83  55                 	db	85	;'U'
  1386  00FF84  50                 	db	80	;'P'
  1387  00FF85  00                 	db	0
  1388  00FF86                     STR_227:
  1389  00FF86  28                 	db	40
  1390  00FF87  6E                 	db	110	;'n'
  1391  00FF88  75                 	db	117	;'u'
  1392  00FF89  6C                 	db	108	;'l'
  1393  00FF8A  6C                 	db	108	;'l'
  1394  00FF8B  29                 	db	41
  1395  00FF8C  00                 	db	0
  1396  00FF8D                     STR_75:
  1397  00FF8D  47                 	db	71	;'G'
  1398  00FF8E  45                 	db	69	;'E'
  1399  00FF8F  4E                 	db	78	;'N'
  1400  00FF90  5F                 	db	95	;'_'
  1401  00FF91  46                 	db	70	;'F'
  1402  00FF92  42                 	db	66	;'B'
  1403  00FF93  00                 	db	0
  1404  00FF94                     STR_53:
  1405  00FF94  56                 	db	86	;'V'
  1406  00FF95  46                 	db	70	;'F'
  1407  00FF96  44                 	db	68	;'D'
  1408  00FF97  5F                 	db	95	;'_'
  1409  00FF98  4F                 	db	79	;'O'
  1410  00FF99  43                 	db	67	;'C'
  1411  00FF9A  00                 	db	0
  1412  00FF9B                     STR_85:
  1413  00FF9B  52                 	db	82	;'R'
  1414  00FF9C  41                 	db	65	;'A'
  1415  00FF9D  4D                 	db	77	;'M'
  1416  00FF9E  50                 	db	80	;'P'
  1417  00FF9F  55                 	db	85	;'U'
  1418  00FFA0  50                 	db	80	;'P'
  1419  00FFA1  00                 	db	0
  1420  00FFA2                     STR_61:
  1421  00FFA2  47                 	db	71	;'G'
  1422  00FFA3  45                 	db	69	;'E'
  1423  00FFA4  4E                 	db	78	;'N'
  1424  00FFA5  5F                 	db	95	;'_'
  1425  00FFA6  4F                 	db	79	;'O'
  1426  00FFA7  53                 	db	83	;'S'
  1427  00FFA8  00                 	db	0
  1428  00FFA9                     STR_154:
  1429  00FFA9  42                 	db	66	;'B'
  1430  00FFAA  20                 	db	32
  1431  00FFAB  56                 	db	86	;'V'
  1432  00FFAC  4F                 	db	79	;'O'
  1433  00FFAD  4C                 	db	76	;'L'
  1434  00FFAE  54                 	db	84	;'T'
  1435  00FFAF  00                 	db	0
  1436  00FFB0                     STR_150:
  1437  00FFB0  52                 	db	82	;'R'
  1438  00FFB1  20                 	db	32
  1439  00FFB2  56                 	db	86	;'V'
  1440  00FFB3  4F                 	db	79	;'O'
  1441  00FFB4  4C                 	db	76	;'L'
  1442  00FFB5  54                 	db	84	;'T'
  1443  00FFB6  00                 	db	0
  1444  00FFB7                     STR_152:
  1445  00FFB7  59                 	db	89	;'Y'
  1446  00FFB8  20                 	db	32
  1447  00FFB9  56                 	db	86	;'V'
  1448  00FFBA  4F                 	db	79	;'O'
  1449  00FFBB  4C                 	db	76	;'L'
  1450  00FFBC  54                 	db	84	;'T'
  1451  00FFBD  00                 	db	0
  1452  00FFBE                     STR_14:
  1453  00FFBE  25                 	db	37
  1454  00FFBF  34                 	db	52	;'4'
  1455  00FFC0  2E                 	db	46
  1456  00FFC1  30                 	db	48	;'0'
  1457  00FFC2  31                 	db	49	;'1'
  1458  00FFC3  66                 	db	102	;'f'
  1459  00FFC4  00                 	db	0
  1460  00FFC5                     STR_4:
  1461  00FFC5  25                 	db	37
  1462  00FFC6  34                 	db	52	;'4'
  1463  00FFC7  2E                 	db	46
  1464  00FFC8  30                 	db	48	;'0'
  1465  00FFC9  32                 	db	50	;'2'
  1466  00FFCA  66                 	db	102	;'f'
  1467  00FFCB  00                 	db	0
  1468  00FFCC                     STR_144:
  1469  00FFCC  56                 	db	86	;'V'
  1470  00FFCD  46                 	db	70	;'F'
  1471  00FFCE  44                 	db	68	;'D'
  1472  00FFCF  20                 	db	32
  1473  00FFD0  48                 	db	72	;'H'
  1474  00FFD1  7A                 	db	122	;'z'
  1475  00FFD2  00                 	db	0
  1476  00FFD3                     STR_15:
  1477  00FFD3  25                 	db	37
  1478  00FFD4  34                 	db	52	;'4'
  1479  00FFD5  2E                 	db	46
  1480  00FFD6  30                 	db	48	;'0'
  1481  00FFD7  66                 	db	102	;'f'
  1482  00FFD8  00                 	db	0
  1483  00FFD9                     STR_188:
  1484  00FFD9  44                 	db	68	;'D'
  1485  00FFDA  41                 	db	65	;'A'
  1486  00FFDB  54                 	db	84	;'T'
  1487  00FFDC  45                 	db	69	;'E'
  1488  00FFDD  00                 	db	0
  1489  00FFDE                     STR_45:
  1490  00FFDE  46                 	db	70	;'F'
  1491  00FFDF  52                 	db	82	;'R'
  1492  00FFE0  45                 	db	69	;'E'
  1493  00FFE1  51                 	db	81	;'Q'
  1494  00FFE2  00                 	db	0
  1495  00FFE3                     STR_168:
  1496  00FFE3  4B                 	db	75	;'K'
  1497  00FFE4  56                 	db	86	;'V'
  1498  00FFE5  41                 	db	65	;'A'
  1499  00FFE6  52                 	db	82	;'R'
  1500  00FFE7  00                 	db	0
  1501  00FFE8                     STR_164:
  1502  00FFE8  59                 	db	89	;'Y'
  1503  00FFE9  2D                 	db	45
  1504  00FFEA  4B                 	db	75	;'K'
  1505  00FFEB  57                 	db	87	;'W'
  1506  00FFEC  00                 	db	0
  1507  00FFED                     STR_166:
  1508  00FFED  4B                 	db	75	;'K'
  1509  00FFEE  56                 	db	86	;'V'
  1510  00FFEF  41                 	db	65	;'A'
  1511  00FFF0  00                 	db	0
  1512  00FFF1                     STR_9:
  1513  00FFF1  25                 	db	37
  1514  00FFF2  64                 	db	100	;'d'
  1515  00FFF3  00                 	db	0
  1516  00FFF4                     STR_2:
  1517  00FFF4  25                 	db	37
  1518  00FFF5  73                 	db	115	;'s'
  1519  00FFF6  00                 	db	0
  1520  00FFF7                     STR_1:
  1521  00FFF7  25                 	db	37
  1522  00FFF8  75                 	db	117	;'u'
  1523  00FFF9  00                 	db	0
  1524  00FFFA                     STR_120:
  1525  00FFFA  0A                 	db	10
  1526  00FFFB  00                 	db	0
  1527  00FFFC                     STR_119:
  1528  00FFFC  0D                 	db	13
  1529  00FFFD  00                 	db	0
  1530  0000                     
  1531                           ; #config settings
  1532  00FFFE  00                 	db	0	; dummy byte at the end
  1533  0000                     
  1534                           	psect	cinit
  1535  019BC6                     __pcinit:
  1536                           	opt stack 0
  1537  019BC6                     start_initialization:
  1538                           	opt stack 0
  1539  019BC6                     __initialization:
  1540                           	opt stack 0
  1541                           
  1542                           ; Initialize objects allocated to BANK5 (2 bytes)
  1543                           ; load TBLPTR registers with __pidataBANK5
  1544  019BC6  0E08               	movlw	low __pidataBANK5
  1545  019BC8  6EF6               	movwf	tblptrl,c
  1546  019BCA  0EB1               	movlw	high __pidataBANK5
  1547  019BCC  6EF7               	movwf	tblptrh,c
  1548  019BCE  0E01               	movlw	low (__pidataBANK5 shr (0+16))
  1549  019BD0  6EF8               	movwf	tblptru,c
  1550  019BD2  0009               	tblrd		*+	;fetch initializer
  1551  019BD4  CFF5 F5FC          	movff	tablat,__pdataBANK5
  1552  019BD8  0009               	tblrd		*+	;fetch initializer
  1553  019BDA  CFF5 F5FD          	movff	tablat,__pdataBANK5+1
  1554                           
  1555                           ; Initialize objects allocated to BANK1 (2 bytes)
  1556                           ; load TBLPTR registers with __pidataBANK1
  1557  019BDE  0E06               	movlw	low __pidataBANK1
  1558  019BE0  6EF6               	movwf	tblptrl,c
  1559  019BE2  0EB1               	movlw	high __pidataBANK1
  1560  019BE4  6EF7               	movwf	tblptrh,c
  1561  019BE6  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1562  019BE8  6EF8               	movwf	tblptru,c
  1563  019BEA  0009               	tblrd		*+	;fetch initializer
  1564  019BEC  CFF5 F1C7          	movff	tablat,__pdataBANK1
  1565  019BF0  0009               	tblrd		*+	;fetch initializer
  1566  019BF2  CFF5 F1C8          	movff	tablat,__pdataBANK1+1
  1567                           
  1568                           ; Clear objects allocated to BANK6 (117 bytes)
  1569  019BF6  EE06  F000         	lfsr	0,__pbssBANK6
  1570  019BFA  0E75               	movlw	117
  1571  019BFC                     clear_0:
  1572  019BFC  6AEE               	clrf	postinc0,c
  1573  019BFE  06E8               	decf	wreg,f,c
  1574  019C00  E1FD               	bnz	clear_0
  1575                           
  1576                           ; Clear objects allocated to BANK5 (252 bytes)
  1577  019C02  EE05  F000         	lfsr	0,__pbssBANK5
  1578  019C06  0EFC               	movlw	252
  1579  019C08                     clear_1:
  1580  019C08  6AEE               	clrf	postinc0,c
  1581  019C0A  06E8               	decf	wreg,f,c
  1582  019C0C  E1FD               	bnz	clear_1
  1583                           
  1584                           ; Clear objects allocated to BANK4 (255 bytes)
  1585  019C0E  EE04  F000         	lfsr	0,__pbssBANK4
  1586  019C12  EE10 F0FF          	lfsr	1,255
  1587  019C16                     clear_2:
  1588  019C16  6AEE               	clrf	postinc0,c
  1589  019C18  50E5               	movf	postdec1,w,c
  1590  019C1A  50E1               	movf	fsr1l,w,c
  1591  019C1C  E1FC               	bnz	clear_2
  1592  019C1E  50E2               	movf	fsr1h,w,c
  1593  019C20  E1FA               	bnz	clear_2
  1594                           
  1595                           ; Clear objects allocated to BANK3 (256 bytes)
  1596  019C22  EE03  F000         	lfsr	0,__pbssBANK3
  1597  019C26  EE11 F000          	lfsr	1,256
  1598  019C2A                     clear_3:
  1599  019C2A  6AEE               	clrf	postinc0,c
  1600  019C2C  50E5               	movf	postdec1,w,c
  1601  019C2E  50E1               	movf	fsr1l,w,c
  1602  019C30  E1FC               	bnz	clear_3
  1603  019C32  50E2               	movf	fsr1h,w,c
  1604  019C34  E1FA               	bnz	clear_3
  1605                           
  1606                           ; Clear objects allocated to BANK2 (256 bytes)
  1607  019C36  EE02  F000         	lfsr	0,__pbssBANK2
  1608  019C3A  EE11 F000          	lfsr	1,256
  1609  019C3E                     clear_4:
  1610  019C3E  6AEE               	clrf	postinc0,c
  1611  019C40  50E5               	movf	postdec1,w,c
  1612  019C42  50E1               	movf	fsr1l,w,c
  1613  019C44  E1FC               	bnz	clear_4
  1614  019C46  50E2               	movf	fsr1h,w,c
  1615  019C48  E1FA               	bnz	clear_4
  1616                           
  1617                           ; Clear objects allocated to BANK1 (170 bytes)
  1618  019C4A  EE01  F000         	lfsr	0,__pbssBANK1
  1619  019C4E  0EAA               	movlw	170
  1620  019C50                     clear_5:
  1621  019C50  6AEE               	clrf	postinc0,c
  1622  019C52  06E8               	decf	wreg,f,c
  1623  019C54  E1FD               	bnz	clear_5
  1624                           
  1625                           ; Clear objects allocated to BANK0 (60 bytes)
  1626  019C56  EE00  F0C4         	lfsr	0,__pbssBANK0
  1627  019C5A  0E3C               	movlw	60
  1628  019C5C                     clear_6:
  1629  019C5C  6AEE               	clrf	postinc0,c
  1630  019C5E  06E8               	decf	wreg,f,c
  1631  019C60  E1FD               	bnz	clear_6
  1632                           
  1633                           ; Clear objects allocated to COMRAM (36 bytes)
  1634  019C62  EE00  F001         	lfsr	0,__pbssCOMRAM
  1635  019C66  0E24               	movlw	36
  1636  019C68                     clear_7:
  1637  019C68  6AEE               	clrf	postinc0,c
  1638  019C6A  06E8               	decf	wreg,f,c
  1639  019C6C  E1FD               	bnz	clear_7
  1640  019C6E                     end_of_initialization:
  1641                           	opt stack 0
  1642  019C6E                     __end_of__initialization:
  1643                           	opt stack 0
  1644  019C6E  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1645  019C70  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1646  019C72  0100               	movlb	0
  1647  019C74  EFCF  F0B9         	goto	_main	;jump to C main() function
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           postdec1	equ	0xFE5
  1655                           fsr1h	equ	0xFE2
  1656                           fsr1l	equ	0xFE1
  1657                           
  1658                           	psect	bssCOMRAM
  1659  000001                     __pbssCOMRAM:
  1660                           	opt stack 0
  1661  000001                     _B_Volt:
  1662                           	opt stack 0
  1663  000001                     	ds	3
  1664  000004                     _Generator_RPM_FLT:
  1665                           	opt stack 0
  1666  000004                     	ds	3
  1667  000007                     _R_Volt:
  1668                           	opt stack 0
  1669  000007                     	ds	3
  1670  00000A                     _Turbine_RPM:
  1671                           	opt stack 0
  1672  00000A                     	ds	3
  1673  00000D                     _Wind_Speed_Avg:
  1674                           	opt stack 0
  1675  00000D                     	ds	3
  1676  000010                     _Y_Volt:
  1677                           	opt stack 0
  1678  000010                     	ds	3
  1679  000013                     _GiMinutes_2:
  1680                           	opt stack 0
  1681  000013                     	ds	2
  1682  000015                     _Communication_OTP:
  1683                           	opt stack 0
  1684  000015                     	ds	1
  1685  000016                     _Desired_Frequency:
  1686                           	opt stack 0
  1687  000016                     	ds	1
  1688  000017                     _EEPROM_Error_Flag:
  1689                           	opt stack 0
  1690  000017                     	ds	1
  1691  000018                     _EP_Errors1:
  1692                           	opt stack 0
  1693  000018                     	ds	1
  1694  000019                     _EP_Errors2:
  1695                           	opt stack 0
  1696  000019                     	ds	1
  1697  00001A                     _EP_Errors3:
  1698                           	opt stack 0
  1699  00001A                     	ds	1
  1700  00001B                     _Errors:
  1701                           	opt stack 0
  1702  00001B                     	ds	1
  1703  00001C                     _Grid_Over_current:
  1704                           	opt stack 0
  1705  00001C                     	ds	1
  1706  00001D                     _PS:
  1707                           	opt stack 0
  1708  00001D                     	ds	1
  1709  00001E                     _Phase_Sequence_Ok:
  1710                           	opt stack 0
  1711  00001E                     	ds	1
  1712  00001F                     _Start_Stop_Flag:
  1713                           	opt stack 0
  1714  00001F                     	ds	1
  1715  000020                     _VFD_Error_No:
  1716                           	opt stack 0
  1717  000020                     	ds	1
  1718  000021                     _i:
  1719                           	opt stack 0
  1720  000021                     	ds	1
  1721  000022                     _KW:
  1722                           	opt stack 0
  1723  000022                     	ds	3
  1724                           tblptru	equ	0xFF8
  1725                           tblptrh	equ	0xFF7
  1726                           tblptrl	equ	0xFF6
  1727                           tablat	equ	0xFF5
  1728                           postinc0	equ	0xFEE
  1729                           wreg	equ	0xFE8
  1730                           postdec1	equ	0xFE5
  1731                           fsr1h	equ	0xFE2
  1732                           fsr1l	equ	0xFE1
  1733                           
  1734                           	psect	bssBANK0
  1735  0000C4                     __pbssBANK0:
  1736                           	opt stack 0
  1737  0000C4                     _B_Curr:
  1738                           	opt stack 0
  1739  0000C4                     	ds	3
  1740  0000C7                     _Frequency:
  1741                           	opt stack 0
  1742  0000C7                     	ds	3
  1743  0000CA                     _Motor_slip:
  1744                           	opt stack 0
  1745  0000CA                     	ds	3
  1746  0000CD                     _R_Curr:
  1747                           	opt stack 0
  1748  0000CD                     	ds	3
  1749  0000D0                     _R_V_Old:
  1750                           	opt stack 0
  1751  0000D0                     	ds	3
  1752  0000D3                     _Rotor_slip:
  1753                           	opt stack 0
  1754  0000D3                     	ds	3
  1755  0000D6                     _Y_Curr:
  1756                           	opt stack 0
  1757  0000D6                     	ds	3
  1758  0000D9                     _GiHours_2:
  1759                           	opt stack 0
  1760  0000D9                     	ds	2
  1761  0000DB                     _GiMinutes_1:
  1762                           	opt stack 0
  1763  0000DB                     	ds	2
  1764  0000DD                     _GiMinutes_3:
  1765                           	opt stack 0
  1766  0000DD                     	ds	2
  1767  0000DF                     _Serial_No:
  1768                           	opt stack 0
  1769  0000DF                     	ds	2
  1770  0000E1                     _Errors1:
  1771                           	opt stack 0
  1772  0000E1                     	ds	1
  1773  0000E2                     _G_RPM_counter:
  1774                           	opt stack 0
  1775  0000E2                     	ds	1
  1776  0000E3                     _Gen_EP_Err_Flag:
  1777                           	opt stack 0
  1778  0000E3                     	ds	1
  1779  0000E4                     _Grid_Frequency_Error:
  1780                           	opt stack 0
  1781  0000E4                     	ds	1
  1782  0000E5                     _Grid_Phase_Sequence_Error:
  1783                           	opt stack 0
  1784  0000E5                     	ds	1
  1785  0000E6                     _Grid_Und_voltage:
  1786                           	opt stack 0
  1787  0000E6                     	ds	1
  1788  0000E7                     _Pitch_EP_Err_Flag:
  1789                           	opt stack 0
  1790  0000E7                     	ds	1
  1791  0000E8                     _Pitch_FB_Error_Flag:
  1792                           	opt stack 0
  1793  0000E8                     	ds	1
  1794  0000E9                     _RPM_counter:
  1795                           	opt stack 0
  1796  0000E9                     	ds	1
  1797  0000EA                     _TRPM_Cal:
  1798                           	opt stack 0
  1799  0000EA                     	ds	1
  1800  0000EB                     _Ten_Sec_Counter:
  1801                           	opt stack 0
  1802  0000EB                     	ds	1
  1803  0000EC                     _Ten_Sec_Counter_2:
  1804                           	opt stack 0
  1805  0000EC                     	ds	1
  1806  0000ED                     _Ten_Sec_RampUp_Flag:
  1807                           	opt stack 0
  1808  0000ED                     	ds	1
  1809  0000EE                     _Timer0_RAMPUP_Counter:
  1810                           	opt stack 0
  1811  0000EE                     	ds	1
  1812  0000EF                     _Turbine_Over_Speed_Flag:
  1813                           	opt stack 0
  1814  0000EF                     	ds	1
  1815  0000F0                     _Turbine_state:
  1816                           	opt stack 0
  1817  0000F0                     	ds	1
  1818  0000F1                     _VFD_communication_Error_Flag:
  1819                           	opt stack 0
  1820  0000F1                     	ds	1
  1821  0000F2                     _Wind_Cut_Out_Flag:
  1822                           	opt stack 0
  1823  0000F2                     	ds	1
  1824  0000F3                     _counter_1:
  1825                           	opt stack 0
  1826  0000F3                     	ds	1
  1827  0000F4                     _Bcurr_V_New:
  1828                           	opt stack 0
  1829  0000F4                     	ds	3
  1830  0000F7                     _R_V_New:
  1831                           	opt stack 0
  1832  0000F7                     	ds	3
  1833  0000FA                     _Rcurr_V_New:
  1834                           	opt stack 0
  1835  0000FA                     	ds	3
  1836  0000FD                     _Ycurr_V_New:
  1837                           	opt stack 0
  1838  0000FD                     	ds	3
  1839                           tblptru	equ	0xFF8
  1840                           tblptrh	equ	0xFF7
  1841                           tblptrl	equ	0xFF6
  1842                           tablat	equ	0xFF5
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           postdec1	equ	0xFE5
  1846                           fsr1h	equ	0xFE2
  1847                           fsr1l	equ	0xFE1
  1848                           
  1849                           	psect	bssBANK1
  1850  000100                     __pbssBANK1:
  1851                           	opt stack 0
  1852  000100                     _Avg_RYB_Current:
  1853                           	opt stack 0
  1854  000100                     	ds	3
  1855  000103                     _B_Gap_Ratio:
  1856                           	opt stack 0
  1857  000103                     	ds	3
  1858  000106                     _Generator_RPM_New:
  1859                           	opt stack 0
  1860  000106                     	ds	3
  1861  000109                     _Generator_RPM_Old:
  1862                           	opt stack 0
  1863  000109                     	ds	3
  1864  00010C                     _R_C_Max:
  1865                           	opt stack 0
  1866  00010C                     	ds	3
  1867  00010F                     _R_Gap_Ratio:
  1868                           	opt stack 0
  1869  00010F                     	ds	3
  1870  000112                     _R_V_Max:
  1871                           	opt stack 0
  1872  000112                     	ds	3
  1873  000115                     _Turbine_RPM_New:
  1874                           	opt stack 0
  1875  000115                     	ds	3
  1876  000118                     _Turbine_RPM_Old:
  1877                           	opt stack 0
  1878  000118                     	ds	3
  1879  00011B                     _Y_Gap_Ratio:
  1880                           	opt stack 0
  1881  00011B                     	ds	3
  1882  00011E                     _B_Peak:
  1883                           	opt stack 0
  1884  00011E                     	ds	2
  1885  000120                     _Capacitor_Counter:
  1886                           	opt stack 0
  1887  000120                     	ds	2
  1888  000122                     _GRPM_Cap_New:
  1889                           	opt stack 0
  1890  000122                     	ds	2
  1891  000124                     _GRPM_Cap_Old:
  1892                           	opt stack 0
  1893  000124                     	ds	2
  1894  000126                     _GiHours_1:
  1895                           	opt stack 0
  1896  000126                     	ds	2
  1897  000128                     _GiHours_3:
  1898                           	opt stack 0
  1899  000128                     	ds	2
  1900  00012A                     _Initial_Delay_Second:
  1901                           	opt stack 0
  1902  00012A                     	ds	2
  1903  00012C                     _RPM_Time:
  1904                           	opt stack 0
  1905  00012C                     	ds	2
  1906  00012E                     _R_Peak:
  1907                           	opt stack 0
  1908  00012E                     	ds	2
  1909  000130                     _TRPM_Cap_New:
  1910                           	opt stack 0
  1911  000130                     	ds	2
  1912  000132                     _TRPM_Cap_Old:
  1913                           	opt stack 0
  1914  000132                     	ds	2
  1915  000134                     _Timer1_OF_counter_Generator_New:
  1916                           	opt stack 0
  1917  000134                     	ds	2
  1918  000136                     _Timer1_OF_counter_New:
  1919                           	opt stack 0
  1920  000136                     	ds	2
  1921  000138                     _Timer1_OF_counter_Wind_2_temp_New:
  1922                           	opt stack 0
  1923  000138                     	ds	2
  1924  00013A                     _Timer1_OF_counter_Wind_temp_New:
  1925                           	opt stack 0
  1926  00013A                     	ds	2
  1927  00013C                     _VFD_Bus_Voltage:
  1928                           	opt stack 0
  1929  00013C                     	ds	2
  1930  00013E                     _VFD_Run_Time_Counter:
  1931                           	opt stack 0
  1932  00013E                     	ds	2
  1933  000140                     _Wind_Cap_New:
  1934                           	opt stack 0
  1935  000140                     	ds	2
  1936  000142                     _Wind_Cap_New_2:
  1937                           	opt stack 0
  1938  000142                     	ds	2
  1939  000144                     _Wind_Cap_Old:
  1940                           	opt stack 0
  1941  000144                     	ds	2
  1942  000146                     _Wind_Cap_Old_2:
  1943                           	opt stack 0
  1944  000146                     	ds	2
  1945  000148                     _Y_Peak:
  1946                           	opt stack 0
  1947  000148                     	ds	2
  1948  00014A                     _B_PF_Flag:
  1949                           	opt stack 0
  1950  00014A                     	ds	1
  1951  00014B                     _DC_BUS_Current_Counter:
  1952                           	opt stack 0
  1953  00014B                     	ds	1
  1954  00014C                     _DC_BUS_High_Counter:
  1955                           	opt stack 0
  1956  00014C                     	ds	1
  1957  00014D                     _DC_BUS_Low_Counter:
  1958                           	opt stack 0
  1959  00014D                     	ds	1
  1960  00014E                     _DC_Bus_Voltage_Flag:
  1961                           	opt stack 0
  1962  00014E                     	ds	1
  1963  00014F                     _Delay_counter:
  1964                           	opt stack 0
  1965  00014F                     	ds	1
  1966  000150                     _Errors2:
  1967                           	opt stack 0
  1968  000150                     	ds	1
  1969  000151                     _Errors3:
  1970                           	opt stack 0
  1971  000151                     	ds	1
  1972  000152                     _Errors4:
  1973                           	opt stack 0
  1974  000152                     	ds	1
  1975  000153                     _Errors5:
  1976                           	opt stack 0
  1977  000153                     	ds	1
  1978  000154                     _Feedback_Error:
  1979                           	opt stack 0
  1980  000154                     	ds	1
  1981  000155                     _Five_Delay_counter:
  1982                           	opt stack 0
  1983  000155                     	ds	1
  1984  000156                     _Five_Sec_Delay_vab:
  1985                           	opt stack 0
  1986  000156                     	ds	1
  1987  000157                     _Five_Second_flag:
  1988                           	opt stack 0
  1989  000157                     	ds	1
  1990  000158                     _Freq_Flag:
  1991                           	opt stack 0
  1992  000158                     	ds	1
  1993  000159                     _Frequency_Error_counter:
  1994                           	opt stack 0
  1995  000159                     	ds	1
  1996  00015A                     _G_RPM_Counter:
  1997                           	opt stack 0
  1998  00015A                     	ds	1
  1999  00015B                     _GcDate:
  2000                           	opt stack 0
  2001  00015B                     	ds	1
  2002  00015C                     _GcHour:
  2003                           	opt stack 0
  2004  00015C                     	ds	1
  2005  00015D                     _GcMin:
  2006                           	opt stack 0
  2007  00015D                     	ds	1
  2008  00015E                     _GcMonth:
  2009                           	opt stack 0
  2010  00015E                     	ds	1
  2011  00015F                     _GcSec:
  2012                           	opt stack 0
  2013  00015F                     	ds	1
  2014  000160                     _GcYear:
  2015                           	opt stack 0
  2016  000160                     	ds	1
  2017  000161                     _Generator_One_Counter:
  2018                           	opt stack 0
  2019  000161                     	ds	1
  2020  000162                     _Generator_One_Feedback_Error:
  2021                           	opt stack 0
  2022  000162                     	ds	1
  2023  000163                     _Generator_Over_Speed:
  2024                           	opt stack 0
  2025  000163                     	ds	1
  2026  000164                     _Grid_Ov_Counter:
  2027                           	opt stack 0
  2028  000164                     	ds	1
  2029  000165                     _Grid_Ovr_voltage:
  2030                           	opt stack 0
  2031  000165                     	ds	1
  2032  000166                     _Grid_UV_Counter:
  2033                           	opt stack 0
  2034  000166                     	ds	1
  2035  000167                     _KVA_Sign:
  2036                           	opt stack 0
  2037  000167                     	ds	1
  2038  000168                     _KW_Counter:
  2039                           	opt stack 0
  2040  000168                     	ds	1
  2041  000169                     _KW_Counter_Max:
  2042                           	opt stack 0
  2043  000169                     	ds	1
  2044  00016A                     _KW_Maximum_Error:
  2045                           	opt stack 0
  2046  00016A                     	ds	1
  2047  00016B                     _KW_Minimum_Error:
  2048                           	opt stack 0
  2049  00016B                     	ds	1
  2050  00016C                     _Key_Counter:
  2051                           	opt stack 0
  2052  00016C                     	ds	1
  2053  00016D                     _Key_Flag:
  2054                           	opt stack 0
  2055  00016D                     	ds	1
  2056  00016E                     _Minutes:
  2057                           	opt stack 0
  2058  00016E                     	ds	1
  2059  00016F                     _Minutes_1:
  2060                           	opt stack 0
  2061  00016F                     	ds	1
  2062  000170                     _Motor_Slip_Error_Flag:
  2063                           	opt stack 0
  2064  000170                     	ds	1
  2065  000171                     _OV_Counter:
  2066                           	opt stack 0
  2067  000171                     	ds	1
  2068  000172                     _One_Sec_Delay_vab:
  2069                           	opt stack 0
  2070  000172                     	ds	1
  2071  000173                     _One_Time_Flag:
  2072                           	opt stack 0
  2073  000173                     	ds	1
  2074  000174                     _One_sec_Delay_Flag:
  2075                           	opt stack 0
  2076  000174                     	ds	1
  2077  000175                     _Phase_Angle:
  2078                           	opt stack 0
  2079  000175                     	ds	1
  2080  000176                     _Pitch_FB_Error_counter:
  2081                           	opt stack 0
  2082  000176                     	ds	1
  2083  000177                     _RS485_Data_Flag:
  2084                           	opt stack 0
  2085  000177                     	ds	1
  2086  000178                     _R_PF_Flag:
  2087                           	opt stack 0
  2088  000178                     	ds	1
  2089  000179                     _Rotor_Slip_Error_Flag:
  2090                           	opt stack 0
  2091  000179                     	ds	1
  2092  00017A                     _S_S_Counter:
  2093                           	opt stack 0
  2094  00017A                     	ds	1
  2095  00017B                     _Slip_Error_Counter:
  2096                           	opt stack 0
  2097  00017B                     	ds	1
  2098  00017C                     _Slip_Error_Counter_1:
  2099                           	opt stack 0
  2100  00017C                     	ds	1
  2101  00017D                     _Slip_Flag:
  2102                           	opt stack 0
  2103  00017D                     	ds	1
  2104  00017E                     _Stopping_Counter:
  2105                           	opt stack 0
  2106  00017E                     	ds	1
  2107  00017F                     _TRPM_OverSpeed_Counter:
  2108                           	opt stack 0
  2109  00017F                     	ds	1
  2110  000180                     _TRPM_Under_Speed_Counter:
  2111                           	opt stack 0
  2112  000180                     	ds	1
  2113  000181                     _T_Overload_counter:
  2114                           	opt stack 0
  2115  000181                     	ds	1
  2116  000182                     _T_RPM_counter:
  2117                           	opt stack 0
  2118  000182                     	ds	1
  2119  000183                     _Timer0_Falg1:
  2120                           	opt stack 0
  2121  000183                     	ds	1
  2122  000184                     _Timer0_Falg2:
  2123                           	opt stack 0
  2124  000184                     	ds	1
  2125  000185                     _Timer0_Initial_delay_flag:
  2126                           	opt stack 0
  2127  000185                     	ds	1
  2128  000186                     _Timer1_Initial_counter:
  2129                           	opt stack 0
  2130  000186                     	ds	1
  2131  000187                     _Timer1_interrupt_flag:
  2132                           	opt stack 0
  2133  000187                     	ds	1
  2134  000188                     _Total_Min:
  2135                           	opt stack 0
  2136  000188                     	ds	1
  2137  000189                     _Tur_OverLoaded_Error:
  2138                           	opt stack 0
  2139  000189                     	ds	1
  2140  00018A                     _Turbine_Restore_Error:
  2141                           	opt stack 0
  2142  00018A                     	ds	1
  2143  00018B                     _Turbine_Under_Speed_Flag:
  2144                           	opt stack 0
  2145  00018B                     	ds	1
  2146  00018C                     _Two_Delay_counter:
  2147                           	opt stack 0
  2148  00018C                     	ds	1
  2149  00018D                     _Two_Sec_Delay_vab:
  2150                           	opt stack 0
  2151  00018D                     	ds	1
  2152  00018E                     _Two_sec_Delay_Flag:
  2153                           	opt stack 0
  2154  00018E                     	ds	1
  2155  00018F                     _VFD_DC_Bus_Current_Error:
  2156                           	opt stack 0
  2157  00018F                     	ds	1
  2158  000190                     _VFD_DC_Bus_High_Error:
  2159                           	opt stack 0
  2160  000190                     	ds	1
  2161  000191                     _VFD_DC_Bus_Low_Error:
  2162                           	opt stack 0
  2163  000191                     	ds	1
  2164  000192                     _VFD_DC_EXTREM_LOW_Error:
  2165                           	opt stack 0
  2166  000192                     	ds	1
  2167  000193                     _VFD_Error_Flag:
  2168                           	opt stack 0
  2169  000193                     	ds	1
  2170  000194                     _VFD_Frequency:
  2171                           	opt stack 0
  2172  000194                     	ds	1
  2173  000195                     _VFD_ON_Flag:
  2174                           	opt stack 0
  2175  000195                     	ds	1
  2176  000196                     _VFD_On_Off:
  2177                           	opt stack 0
  2178  000196                     	ds	1
  2179  000197                     _VFD_RAMP:
  2180                           	opt stack 0
  2181  000197                     	ds	1
  2182  000198                     _VFD__Run_Time_Error:
  2183                           	opt stack 0
  2184  000198                     	ds	1
  2185  000199                     _VFD_communication_Error_Counter:
  2186                           	opt stack 0
  2187  000199                     	ds	1
  2188  00019A                     _Volt_Curr_Flag:
  2189                           	opt stack 0
  2190  00019A                     	ds	1
  2191  00019B                     _Wind_Cut_In_Flag:
  2192                           	opt stack 0
  2193  00019B                     	ds	1
  2194  00019C                     _Wind_Cut_Out_Counter:
  2195                           	opt stack 0
  2196  00019C                     	ds	1
  2197  00019D                     _Y_PF_Flag:
  2198                           	opt stack 0
  2199  00019D                     	ds	1
  2200  00019E                     _Bcurr_New:
  2201                           	opt stack 0
  2202  00019E                     	ds	3
  2203  0001A1                     _Rcurr_New:
  2204                           	opt stack 0
  2205  0001A1                     	ds	3
  2206  0001A4                     _Time_New:
  2207                           	opt stack 0
  2208  0001A4                     	ds	3
  2209  0001A7                     _Ycurr_New:
  2210                           	opt stack 0
  2211  0001A7                     	ds	3
  2212                           tblptru	equ	0xFF8
  2213                           tblptrh	equ	0xFF7
  2214                           tblptrl	equ	0xFF6
  2215                           tablat	equ	0xFF5
  2216                           postinc0	equ	0xFEE
  2217                           wreg	equ	0xFE8
  2218                           postdec1	equ	0xFE5
  2219                           fsr1h	equ	0xFE2
  2220                           fsr1l	equ	0xFE1
  2221                           
  2222                           	psect	dataBANK1
  2223  0001C7                     __pdataBANK1:
  2224                           	opt stack 0
  2225  0001C7                     _Case_Call:
  2226                           	opt stack 0
  2227  0001C7                     	ds	1
  2228  0001C8                     _Start_up_Error:
  2229                           	opt stack 0
  2230  0001C8                     	ds	1
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           postdec1	equ	0xFE5
  2238                           fsr1h	equ	0xFE2
  2239                           fsr1l	equ	0xFE1
  2240                           
  2241                           	psect	bssBANK2
  2242  000200                     __pbssBANK2:
  2243                           	opt stack 0
  2244  000200                     _Avg_RYB_Voltage:
  2245                           	opt stack 0
  2246  000200                     	ds	3
  2247  000203                     _BGR_Avg_1:
  2248                           	opt stack 0
  2249  000203                     	ds	3
  2250  000206                     _B_C_Max:
  2251                           	opt stack 0
  2252  000206                     	ds	3
  2253  000209                     _B_V_Max:
  2254                           	opt stack 0
  2255  000209                     	ds	3
  2256  00020C                     _Bcurr_V_Old:
  2257                           	opt stack 0
  2258  00020C                     	ds	3
  2259  00020F                     _DC_Bus_Current:
  2260                           	opt stack 0
  2261  00020F                     	ds	3
  2262  000212                     _GENERATOR_RPM_THEORY:
  2263                           	opt stack 0
  2264  000212                     	ds	3
  2265  000215                     _Gen_Theory:
  2266                           	opt stack 0
  2267  000215                     	ds	3
  2268  000218                     _KVA:
  2269                           	opt stack 0
  2270  000218                     	ds	3
  2271  00021B                     _RGR_Avg_1:
  2272                           	opt stack 0
  2273  00021B                     	ds	3
  2274  00021E                     _Rcurr_V_Old:
  2275                           	opt stack 0
  2276  00021E                     	ds	3
  2277  000221                     _Temp:
  2278                           	opt stack 0
  2279  000221                     	ds	3
  2280  000224                     _Temprature:
  2281                           	opt stack 0
  2282  000224                     	ds	3
  2283  000227                     _Time_Old:
  2284                           	opt stack 0
  2285  000227                     	ds	3
  2286  00022A                     _Total_Power_Factor:
  2287                           	opt stack 0
  2288  00022A                     	ds	3
  2289  00022D                     _Turbine2Wheel_Ratio_Avg:
  2290                           	opt stack 0
  2291  00022D                     	ds	3
  2292  000230                     _Wind_Spd_2:
  2293                           	opt stack 0
  2294  000230                     	ds	3
  2295  000233                     _Wind_Speed:
  2296                           	opt stack 0
  2297  000233                     	ds	3
  2298  000236                     _Wind_Speed_0:
  2299                           	opt stack 0
  2300  000236                     	ds	3
  2301  000239                     _Wind_Speed_0_2:
  2302                           	opt stack 0
  2303  000239                     	ds	3
  2304  00023C                     _Wind_Speed_1:
  2305                           	opt stack 0
  2306  00023C                     	ds	3
  2307  00023F                     _Wind_Speed_1_2:
  2308                           	opt stack 0
  2309  00023F                     	ds	3
  2310  000242                     _Wind_Speed_2:
  2311                           	opt stack 0
  2312  000242                     	ds	3
  2313  000245                     _Wind_Speed_2_2:
  2314                           	opt stack 0
  2315  000245                     	ds	3
  2316  000248                     _Wind_Speed_3:
  2317                           	opt stack 0
  2318  000248                     	ds	3
  2319  00024B                     _Wind_Speed_3_2:
  2320                           	opt stack 0
  2321  00024B                     	ds	3
  2322  00024E                     _Wind_Speed_4:
  2323                           	opt stack 0
  2324  00024E                     	ds	3
  2325  000251                     _Wind_Speed_4_2:
  2326                           	opt stack 0
  2327  000251                     	ds	3
  2328  000254                     _Wind_Speed_5:
  2329                           	opt stack 0
  2330  000254                     	ds	3
  2331  000257                     _Wind_Speed_5_2:
  2332                           	opt stack 0
  2333  000257                     	ds	3
  2334  00025A                     _Wind_Speed_6:
  2335                           	opt stack 0
  2336  00025A                     	ds	3
  2337  00025D                     _Wind_Speed_6_2:
  2338                           	opt stack 0
  2339  00025D                     	ds	3
  2340  000260                     _Wind_Speed_7:
  2341                           	opt stack 0
  2342  000260                     	ds	3
  2343  000263                     _Wind_Speed_7_2:
  2344                           	opt stack 0
  2345  000263                     	ds	3
  2346  000266                     _Wind_Speed_8:
  2347                           	opt stack 0
  2348  000266                     	ds	3
  2349  000269                     _Wind_Speed_8_2:
  2350                           	opt stack 0
  2351  000269                     	ds	3
  2352  00026C                     _YGR_Avg_1:
  2353                           	opt stack 0
  2354  00026C                     	ds	3
  2355  00026F                     _Y_C_Max:
  2356                           	opt stack 0
  2357  00026F                     	ds	3
  2358  000272                     _Y_Power_Factor:
  2359                           	opt stack 0
  2360  000272                     	ds	3
  2361  000275                     _Y_V_Max:
  2362                           	opt stack 0
  2363  000275                     	ds	3
  2364  000278                     _Ycurr_V_Old:
  2365                           	opt stack 0
  2366  000278                     	ds	3
  2367  00027B                     _lc_Current_T_RPM:
  2368                           	opt stack 0
  2369  00027B                     	ds	3
  2370  00027E                     _BV_PS:
  2371                           	opt stack 0
  2372  00027E                     	ds	2
  2373  000280                     _B_C:
  2374                           	opt stack 0
  2375  000280                     	ds	2
  2376  000282                     _B_V:
  2377                           	opt stack 0
  2378  000282                     	ds	2
  2379  000284                     _GRPM_Cap:
  2380                           	opt stack 0
  2381  000284                     	ds	2
  2382  000286                     _GRPM_Counter:
  2383                           	opt stack 0
  2384  000286                     	ds	2
  2385  000288                     _Generator_RPM_INT:
  2386                           	opt stack 0
  2387  000288                     	ds	2
  2388  00028A                     _GiData:
  2389                           	opt stack 0
  2390  00028A                     	ds	2
  2391  00028C                     _GiHours:
  2392                           	opt stack 0
  2393  00028C                     	ds	2
  2394  00028E                     _GiMinutes:
  2395                           	opt stack 0
  2396  00028E                     	ds	2
  2397  000290                     _GiMonth:
  2398                           	opt stack 0
  2399  000290                     	ds	2
  2400  000292                     _GiSeconds:
  2401                           	opt stack 0
  2402  000292                     	ds	2
  2403  000294                     _Gi_Timer1_OF_counter:
  2404                           	opt stack 0
  2405  000294                     	ds	2
  2406  000296                     _Pitch_Counter:
  2407                           	opt stack 0
  2408  000296                     	ds	2
  2409  000298                     _Pitching_FlAG:
  2410                           	opt stack 0
  2411  000298                     	ds	2
  2412  00029A                     _RV_PS:
  2413                           	opt stack 0
  2414  00029A                     	ds	2
  2415  00029C                     _R_C:
  2416                           	opt stack 0
  2417  00029C                     	ds	2
  2418  00029E                     _R_V:
  2419                           	opt stack 0
  2420  00029E                     	ds	2
  2421  0002A0                     _Timer1_OF_counter_Generator_Old:
  2422                           	opt stack 0
  2423  0002A0                     	ds	2
  2424  0002A2                     _Timer1_OF_counter_Old:
  2425                           	opt stack 0
  2426  0002A2                     	ds	2
  2427  0002A4                     _Timer1_OF_counter_Wind_2_temp_Old:
  2428                           	opt stack 0
  2429  0002A4                     	ds	2
  2430  0002A6                     _Timer1_OF_counter_Wind_temp_Old:
  2431                           	opt stack 0
  2432  0002A6                     	ds	2
  2433  0002A8                     _Timer1_counter:
  2434                           	opt stack 0
  2435  0002A8                     	ds	2
  2436  0002AA                     _VFD_SHORT_CIRCUIT_fLAG:
  2437                           	opt stack 0
  2438  0002AA                     	ds	2
  2439  0002AC                     _WRPM_Counter:
  2440                           	opt stack 0
  2441  0002AC                     	ds	2
  2442  0002AE                     _WRPM_Counter_1:
  2443                           	opt stack 0
  2444  0002AE                     	ds	2
  2445  0002B0                     _Wind_Cap:
  2446                           	opt stack 0
  2447  0002B0                     	ds	2
  2448  0002B2                     _Wind_Cap_2:
  2449                           	opt stack 0
  2450  0002B2                     	ds	2
  2451  0002B4                     _YV_PS:
  2452                           	opt stack 0
  2453  0002B4                     	ds	2
  2454  0002B6                     _Y_C:
  2455                           	opt stack 0
  2456  0002B6                     	ds	2
  2457  0002B8                     _Y_V:
  2458                           	opt stack 0
  2459  0002B8                     	ds	2
  2460  0002BA                     _Check:
  2461                           	opt stack 0
  2462  0002BA                     	ds	1
  2463  0002BB                     _Consumption:
  2464                           	opt stack 0
  2465  0002BB                     	ds	1
  2466  0002BC                     _Five_sec_Delay_Flag:
  2467                           	opt stack 0
  2468  0002BC                     	ds	1
  2469  0002BD                     _GCB_phasev_flag:
  2470                           	opt stack 0
  2471  0002BD                     	ds	1
  2472  0002BE                     _GCDc_high_flag:
  2473                           	opt stack 0
  2474  0002BE                     	ds	1
  2475  0002BF                     _GCDc_low_flag:
  2476                           	opt stack 0
  2477  0002BF                     	ds	1
  2478  0002C0                     _GCG_rpm_flag:
  2479                           	opt stack 0
  2480  0002C0                     	ds	1
  2481  0002C1                     _GCM_slip_flag:
  2482                           	opt stack 0
  2483  0002C1                     	ds	1
  2484  0002C2                     _GCR_phasev_flag:
  2485                           	opt stack 0
  2486  0002C2                     	ds	1
  2487  0002C3                     _GCR_slip_flag:
  2488                           	opt stack 0
  2489  0002C3                     	ds	1
  2490  0002C4                     _GCT_rpm_flag:
  2491                           	opt stack 0
  2492  0002C4                     	ds	1
  2493  0002C5                     _GCWind_flag:
  2494                           	opt stack 0
  2495  0002C5                     	ds	1
  2496  0002C6                     _GCY_phasev_flag:
  2497                           	opt stack 0
  2498  0002C6                     	ds	1
  2499  0002C7                     _GCphase_flag:
  2500                           	opt stack 0
  2501  0002C7                     	ds	1
  2502  0002C8                     _GCvfd_curr_flag:
  2503                           	opt stack 0
  2504  0002C8                     	ds	1
  2505  0002C9                     _Gc_Generator_One_Fb:
  2506                           	opt stack 0
  2507  0002C9                     	ds	1
  2508  0002CA                     _Gc_Grid_Phase_Unbalance:
  2509                           	opt stack 0
  2510  0002CA                     	ds	1
  2511  0002CB                     _Gc_Grid_Phase_Unbalance_Error:
  2512                           	opt stack 0
  2513  0002CB                     	ds	1
  2514  0002CC                     _Gc_Motor_Slip_Error:
  2515                           	opt stack 0
  2516  0002CC                     	ds	1
  2517  0002CD                     _Gc_Pitch_Coil_Fb:
  2518                           	opt stack 0
  2519  0002CD                     	ds	1
  2520  0002CE                     _Gc_Pitch_Coil_Feedback_Error:
  2521                           	opt stack 0
  2522  0002CE                     	ds	1
  2523  0002CF                     _Gc_Rotor_Slip_Error:
  2524                           	opt stack 0
  2525  0002CF                     	ds	1
  2526  0002D0                     _Gc_TRPM_Rampup_Error:
  2527                           	opt stack 0
  2528  0002D0                     	ds	1
  2529  0002D1                     _Gc_Turbine2Wheel_Ratio_Error:
  2530                           	opt stack 0
  2531  0002D1                     	ds	1
  2532  0002D2                     _Gc_VFD_DC_Bus_Error:
  2533                           	opt stack 0
  2534  0002D2                     	ds	1
  2535  0002D3                     _Gf_Wind_Cut_In_Counter:
  2536                           	opt stack 0
  2537  0002D3                     	ds	1
  2538  0002D4                     _Hours:
  2539                           	opt stack 0
  2540  0002D4                     	ds	1
  2541  0002D5                     _Initial_Check:
  2542                           	opt stack 0
  2543  0002D5                     	ds	1
  2544  0002D6                     _Lead_Lag:
  2545                           	opt stack 0
  2546  0002D6                     	ds	1
  2547  0002D7                     _PF_Lead_Lag:
  2548                           	opt stack 0
  2549  0002D7                     	ds	1
  2550  0002D8                     _PW_Error_Flag:
  2551                           	opt stack 0
  2552  0002D8                     	ds	1
  2553  0002D9                     _Start_Stop_Flag_1:
  2554                           	opt stack 0
  2555  0002D9                     	ds	1
  2556  0002DA                     _Temp_1:
  2557                           	opt stack 0
  2558  0002DA                     	ds	1
  2559  0002DB                     _Temp_2:
  2560                           	opt stack 0
  2561  0002DB                     	ds	1
  2562  0002DC                     _Temp_3:
  2563                           	opt stack 0
  2564  0002DC                     	ds	1
  2565  0002DD                     _Temp_4:
  2566                           	opt stack 0
  2567  0002DD                     	ds	1
  2568  0002DE                     _Temp_5:
  2569                           	opt stack 0
  2570  0002DE                     	ds	1
  2571  0002DF                     _Temp_6:
  2572                           	opt stack 0
  2573  0002DF                     	ds	1
  2574  0002E0                     _lcDC_Bus_Counter:
  2575                           	opt stack 0
  2576  0002E0                     	ds	1
  2577  0002E1                     _lc_Avg_Counter:
  2578                           	opt stack 0
  2579  0002E1                     	ds	1
  2580  0002E2                     _lc_Motor_Slip_Error_Counter:
  2581                           	opt stack 0
  2582  0002E2                     	ds	1
  2583  0002E3                     _lc_Pitch_Coil_Counter:
  2584                           	opt stack 0
  2585  0002E3                     	ds	1
  2586  0002E4                     _lc_Rotor_Slip_Error_Counter:
  2587                           	opt stack 0
  2588  0002E4                     	ds	1
  2589  0002E5                     _BGR_Avg:
  2590                           	opt stack 0
  2591  0002E5                     	ds	3
  2592  0002E8                     _GRPM_Time_1:
  2593                           	opt stack 0
  2594  0002E8                     	ds	3
  2595  0002EB                     _RGR_Avg:
  2596                           	opt stack 0
  2597  0002EB                     	ds	3
  2598  0002EE                     _YGR_Avg:
  2599                           	opt stack 0
  2600  0002EE                     	ds	3
  2601  0002F1                     _Y_KW:
  2602                           	opt stack 0
  2603  0002F1                     	ds	3
  2604  0002F4                     _GRPM_Pulse_width:
  2605                           	opt stack 0
  2606  0002F4                     	ds	2
  2607  0002F6                     _Hours_1:
  2608                           	opt stack 0
  2609  0002F6                     	ds	2
  2610  0002F8                     _Hours_2:
  2611                           	opt stack 0
  2612  0002F8                     	ds	2
  2613  0002FA                     _RPM_PWM:
  2614                           	opt stack 0
  2615  0002FA                     	ds	2
  2616  0002FC                     _Wind_Pulse_width:
  2617                           	opt stack 0
  2618  0002FC                     	ds	2
  2619  0002FE                     _Wind_Pulse_width_2:
  2620                           	opt stack 0
  2621  0002FE                     	ds	2
  2622                           tblptru	equ	0xFF8
  2623                           tblptrh	equ	0xFF7
  2624                           tblptrl	equ	0xFF6
  2625                           tablat	equ	0xFF5
  2626                           postinc0	equ	0xFEE
  2627                           wreg	equ	0xFE8
  2628                           postdec1	equ	0xFE5
  2629                           fsr1h	equ	0xFE2
  2630                           fsr1l	equ	0xFE1
  2631                           
  2632                           	psect	bssBANK3
  2633  000300                     __pbssBANK3:
  2634                           	opt stack 0
  2635  000300                     _RGR_Arr:
  2636                           	opt stack 0
  2637  000300                     	ds	90
  2638  00035A                     _YGR_Arr:
  2639                           	opt stack 0
  2640  00035A                     	ds	90
  2641  0003B4                     _Temp_Arr:
  2642                           	opt stack 0
  2643  0003B4                     	ds	18
  2644  0003C6                     _RGR_Arr_1:
  2645                           	opt stack 0
  2646  0003C6                     	ds	15
  2647  0003D5                     _YGR_Arr_1:
  2648                           	opt stack 0
  2649  0003D5                     	ds	15
  2650  0003E4                     _BV_PS_Max:
  2651                           	opt stack 0
  2652  0003E4                     	ds	2
  2653  0003E6                     _GiYear:
  2654                           	opt stack 0
  2655  0003E6                     	ds	2
  2656  0003E8                     _Gi_Timer1_OF_counter_Generator_Temp:
  2657                           	opt stack 0
  2658  0003E8                     	ds	2
  2659  0003EA                     _Pitch_Ps_Counter:
  2660                           	opt stack 0
  2661  0003EA                     	ds	2
  2662  0003EC                     _RV_PS_Max:
  2663                           	opt stack 0
  2664  0003EC                     	ds	2
  2665  0003EE                     _Temp_Sensor:
  2666                           	opt stack 0
  2667  0003EE                     	ds	2
  2668  0003F0                     _Timer0_1Sec_Flag:
  2669                           	opt stack 0
  2670  0003F0                     	ds	2
  2671  0003F2                     _Timer1_OF_counter_Generator:
  2672                           	opt stack 0
  2673  0003F2                     	ds	2
  2674  0003F4                     _Timer1_OF_counter_Turbine:
  2675                           	opt stack 0
  2676  0003F4                     	ds	2
  2677  0003F6                     _Timer1_OF_counter_Wind:
  2678                           	opt stack 0
  2679  0003F6                     	ds	2
  2680  0003F8                     _Timer1_OF_counter_Wind_2:
  2681                           	opt stack 0
  2682  0003F8                     	ds	2
  2683  0003FA                     _Timer1_OF_counter_Wind_2_temp:
  2684                           	opt stack 0
  2685  0003FA                     	ds	2
  2686  0003FC                     _Timer1_OF_counter_Wind_temp:
  2687                           	opt stack 0
  2688  0003FC                     	ds	2
  2689  0003FE                     _YV_PS_Max:
  2690                           	opt stack 0
  2691  0003FE                     	ds	2
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           postdec1	equ	0xFE5
  2699                           fsr1h	equ	0xFE2
  2700                           fsr1l	equ	0xFE1
  2701                           
  2702                           	psect	bssBANK4
  2703  000400                     __pbssBANK4:
  2704                           	opt stack 0
  2705  000400                     _BGR_Arr:
  2706                           	opt stack 0
  2707  000400                     	ds	90
  2708  00045A                     _BGR_Arr_1:
  2709                           	opt stack 0
  2710  00045A                     	ds	15
  2711  000469                     _B_C_Arr:
  2712                           	opt stack 0
  2713  000469                     	ds	9
  2714  000472                     _B_V_Arr:
  2715                           	opt stack 0
  2716  000472                     	ds	9
  2717  00047B                     _R_C_Arr:
  2718                           	opt stack 0
  2719  00047B                     	ds	9
  2720  000484                     _R_V_Arr:
  2721                           	opt stack 0
  2722  000484                     	ds	9
  2723  00048D                     _Y_C_Arr:
  2724                           	opt stack 0
  2725  00048D                     	ds	9
  2726  000496                     _Y_V_Arr:
  2727                           	opt stack 0
  2728  000496                     	ds	9
  2729  00049F                     _GRPM_Time:
  2730                           	opt stack 0
  2731  00049F                     	ds	3
  2732  0004A2                     _Gf_Turbine2Wheel_Ratio:
  2733                           	opt stack 0
  2734  0004A2                     	ds	3
  2735  0004A5                     _KVAr:
  2736                           	opt stack 0
  2737  0004A5                     	ds	3
  2738  0004A8                     _PWM_Temp:
  2739                           	opt stack 0
  2740  0004A8                     	ds	3
  2741  0004AB                     _RAMP_UP_GENERATOR_CUT_IN_RPM:
  2742                           	opt stack 0
  2743  0004AB                     	ds	3
  2744  0004AE                     _RAMP_UP_TURBINE_CUT_IN_RPM:
  2745                           	opt stack 0
  2746  0004AE                     	ds	3
  2747  0004B1                     _R_V_Gap:
  2748                           	opt stack 0
  2749  0004B1                     	ds	3
  2750  0004B4                     _TURBINE_RPM_THEORY:
  2751                           	opt stack 0
  2752  0004B4                     	ds	3
  2753  0004B7                     _Turb_RPM:
  2754                           	opt stack 0
  2755  0004B7                     	ds	3
  2756  0004BA                     _Wind:
  2757                           	opt stack 0
  2758  0004BA                     	ds	3
  2759  0004BD                     _Wind_Frequency:
  2760                           	opt stack 0
  2761  0004BD                     	ds	3
  2762  0004C0                     _Wind_Speed_9:
  2763                           	opt stack 0
  2764  0004C0                     	ds	3
  2765  0004C3                     _Wind_Speed_9_2:
  2766                           	opt stack 0
  2767  0004C3                     	ds	3
  2768  0004C6                     _Wind_Speed_Avg_2:
  2769                           	opt stack 0
  2770  0004C6                     	ds	3
  2771  0004C9                     _Wind_Time:
  2772                           	opt stack 0
  2773  0004C9                     	ds	3
  2774  0004CC                     _Wind_Time_2:
  2775                           	opt stack 0
  2776  0004CC                     	ds	3
  2777  0004CF                     _lc_Previous_T_RPM:
  2778                           	opt stack 0
  2779  0004CF                     	ds	3
  2780  0004D2                     _lc_T_RPM:
  2781                           	opt stack 0
  2782  0004D2                     	ds	3
  2783  0004D5                     _wind_2:
  2784                           	opt stack 0
  2785  0004D5                     	ds	3
  2786  0004D8                     _wind_Frequency_2:
  2787                           	opt stack 0
  2788  0004D8                     	ds	3
  2789  0004DB                     _B_C_Avg_Steps:
  2790                           	opt stack 0
  2791  0004DB                     	ds	3
  2792  0004DE                     _B_V_Avg_Steps:
  2793                           	opt stack 0
  2794  0004DE                     	ds	3
  2795  0004E1                     _GRPM_Frequency:
  2796                           	opt stack 0
  2797  0004E1                     	ds	3
  2798  0004E4                     _R_C_Avg_Steps:
  2799                           	opt stack 0
  2800  0004E4                     	ds	3
  2801  0004E7                     _R_V_Avg_Steps:
  2802                           	opt stack 0
  2803  0004E7                     	ds	3
  2804  0004EA                     _TRPM_Frequency:
  2805                           	opt stack 0
  2806  0004EA                     	ds	3
  2807  0004ED                     _TRPM_Time:
  2808                           	opt stack 0
  2809  0004ED                     	ds	3
  2810  0004F0                     _Time_Diff:
  2811                           	opt stack 0
  2812  0004F0                     	ds	3
  2813  0004F3                     _Wind_Time_1:
  2814                           	opt stack 0
  2815  0004F3                     	ds	3
  2816  0004F6                     _Y_C_Avg_Steps:
  2817                           	opt stack 0
  2818  0004F6                     	ds	3
  2819  0004F9                     _Y_V_Avg_Steps:
  2820                           	opt stack 0
  2821  0004F9                     	ds	3
  2822  0004FC                     _wind_Time_1_2:
  2823                           	opt stack 0
  2824  0004FC                     	ds	3
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           postdec1	equ	0xFE5
  2832                           fsr1h	equ	0xFE2
  2833                           fsr1l	equ	0xFE1
  2834                           
  2835                           	psect	bssBANK5
  2836  000500                     __pbssBANK5:
  2837                           	opt stack 0
  2838  000500                     _Data_1:
  2839                           	opt stack 0
  2840  000500                     	ds	22
  2841  000516                     _B_C_Gap:
  2842                           	opt stack 0
  2843  000516                     	ds	3
  2844  000519                     _B_Current:
  2845                           	opt stack 0
  2846  000519                     	ds	3
  2847  00051C                     _B_Current_1:
  2848                           	opt stack 0
  2849  00051C                     	ds	3
  2850  00051F                     _B_Power_Factor:
  2851                           	opt stack 0
  2852  00051F                     	ds	3
  2853  000522                     _B_Rad:
  2854                           	opt stack 0
  2855  000522                     	ds	3
  2856  000525                     _B_V_Gap:
  2857                           	opt stack 0
  2858  000525                     	ds	3
  2859  000528                     _Frequency_1:
  2860                           	opt stack 0
  2861  000528                     	ds	3
  2862  00052B                     _Generator_RPM_0:
  2863                           	opt stack 0
  2864  00052B                     	ds	3
  2865  00052E                     _Generator_RPM_1:
  2866                           	opt stack 0
  2867  00052E                     	ds	3
  2868  000531                     _Generator_RPM_10:
  2869                           	opt stack 0
  2870  000531                     	ds	3
  2871  000534                     _Generator_RPM_2:
  2872                           	opt stack 0
  2873  000534                     	ds	3
  2874  000537                     _Generator_RPM_3:
  2875                           	opt stack 0
  2876  000537                     	ds	3
  2877  00053A                     _Generator_RPM_4:
  2878                           	opt stack 0
  2879  00053A                     	ds	3
  2880  00053D                     _Generator_RPM_5:
  2881                           	opt stack 0
  2882  00053D                     	ds	3
  2883  000540                     _Generator_RPM_6:
  2884                           	opt stack 0
  2885  000540                     	ds	3
  2886  000543                     _Generator_RPM_7:
  2887                           	opt stack 0
  2888  000543                     	ds	3
  2889  000546                     _Generator_RPM_8:
  2890                           	opt stack 0
  2891  000546                     	ds	3
  2892  000549                     _Generator_RPM_9:
  2893                           	opt stack 0
  2894  000549                     	ds	3
  2895  00054C                     _GfB_current:
  2896                           	opt stack 0
  2897  00054C                     	ds	3
  2898  00054F                     _GfB_volt:
  2899                           	opt stack 0
  2900  00054F                     	ds	3
  2901  000552                     _GfG_rpm:
  2902                           	opt stack 0
  2903  000552                     	ds	3
  2904  000555                     _GfKva:
  2905                           	opt stack 0
  2906  000555                     	ds	3
  2907  000558                     _GfKvar:
  2908                           	opt stack 0
  2909  000558                     	ds	3
  2910  00055B                     _GfKw:
  2911                           	opt stack 0
  2912  00055B                     	ds	3
  2913  00055E                     _GfR_current:
  2914                           	opt stack 0
  2915  00055E                     	ds	3
  2916  000561                     _GfR_volt:
  2917                           	opt stack 0
  2918  000561                     	ds	3
  2919  000564                     _GfT_rpm:
  2920                           	opt stack 0
  2921  000564                     	ds	3
  2922  000567                     _GfY_current:
  2923                           	opt stack 0
  2924  000567                     	ds	3
  2925  00056A                     _GfY_volt:
  2926                           	opt stack 0
  2927  00056A                     	ds	3
  2928  00056D                     _Gf_KW:
  2929                           	opt stack 0
  2930  00056D                     	ds	3
  2931  000570                     _Gf_TRPM_Frequency:
  2932                           	opt stack 0
  2933  000570                     	ds	3
  2934  000573                     _Gf_TRPM_Time:
  2935                           	opt stack 0
  2936  000573                     	ds	3
  2937  000576                     _Gf_TRPM_Time_1:
  2938                           	opt stack 0
  2939  000576                     	ds	3
  2940  000579                     _Gf_Turbine_RPM_1:
  2941                           	opt stack 0
  2942  000579                     	ds	3
  2943  00057C                     _Gf_Turbine_RPM_Prev:
  2944                           	opt stack 0
  2945  00057C                     	ds	3
  2946  00057F                     _Gfwind:
  2947                           	opt stack 0
  2948  00057F                     	ds	3
  2949  000582                     _KVA_1:
  2950                           	opt stack 0
  2951  000582                     	ds	3
  2952  000585                     _KVAr_1:
  2953                           	opt stack 0
  2954  000585                     	ds	3
  2955  000588                     _KW_1:
  2956                           	opt stack 0
  2957  000588                     	ds	3
  2958  00058B                     _Motor_slip_1:
  2959                           	opt stack 0
  2960  00058B                     	ds	3
  2961  00058E                     _R_C_Gap:
  2962                           	opt stack 0
  2963  00058E                     	ds	3
  2964  000591                     _R_Current:
  2965                           	opt stack 0
  2966  000591                     	ds	3
  2967  000594                     _R_Current_1:
  2968                           	opt stack 0
  2969  000594                     	ds	3
  2970  000597                     _R_Power_Factor:
  2971                           	opt stack 0
  2972  000597                     	ds	3
  2973  00059A                     _R_Rad:
  2974                           	opt stack 0
  2975  00059A                     	ds	3
  2976  00059D                     _Rotor_slip_1:
  2977                           	opt stack 0
  2978  00059D                     	ds	3
  2979  0005A0                     _Temp_sign:
  2980                           	opt stack 0
  2981  0005A0                     	ds	3
  2982  0005A3                     _Timer1_Time_per_Count:
  2983                           	opt stack 0
  2984  0005A3                     	ds	3
  2985  0005A6                     _Timer_1_OverFlow_Time:
  2986                           	opt stack 0
  2987  0005A6                     	ds	3
  2988  0005A9                     _Total_Pf:
  2989                           	opt stack 0
  2990  0005A9                     	ds	3
  2991  0005AC                     _Total_Pf_1:
  2992                           	opt stack 0
  2993  0005AC                     	ds	3
  2994  0005AF                     _Wind_Speed_10:
  2995                           	opt stack 0
  2996  0005AF                     	ds	3
  2997  0005B2                     _Wind_Speed_10_2:
  2998                           	opt stack 0
  2999  0005B2                     	ds	3
  3000  0005B5                     _Y_C_Gap:
  3001                           	opt stack 0
  3002  0005B5                     	ds	3
  3003  0005B8                     _Y_Current:
  3004                           	opt stack 0
  3005  0005B8                     	ds	3
  3006  0005BB                     _Y_Current_1:
  3007                           	opt stack 0
  3008  0005BB                     	ds	3
  3009  0005BE                     _Y_Rad:
  3010                           	opt stack 0
  3011  0005BE                     	ds	3
  3012  0005C1                     _Y_V_Gap:
  3013                           	opt stack 0
  3014  0005C1                     	ds	3
  3015  0005C4                     _Dummy:
  3016                           	opt stack 0
  3017  0005C4                     	ds	2
  3018  0005C6                     _Flag_temp:
  3019                           	opt stack 0
  3020  0005C6                     	ds	2
  3021  0005C8                     _G_RPM_counter_1:
  3022                           	opt stack 0
  3023  0005C8                     	ds	2
  3024  0005CA                     _GiDay:
  3025                           	opt stack 0
  3026  0005CA                     	ds	2
  3027  0005CC                     _Gi_TRPM_Cap:
  3028                           	opt stack 0
  3029  0005CC                     	ds	2
  3030  0005CE                     _Gi_TRPM_Cap_New:
  3031                           	opt stack 0
  3032  0005CE                     	ds	2
  3033  0005D0                     _Gi_TRPM_Cap_Old:
  3034                           	opt stack 0
  3035  0005D0                     	ds	2
  3036  0005D2                     _Gi_TRPM_Pulse_width:
  3037                           	opt stack 0
  3038  0005D2                     	ds	2
  3039  0005D4                     _RPM_Time_1:
  3040                           	opt stack 0
  3041  0005D4                     	ds	2
  3042  0005D6                     _Slave_Id:
  3043                           	opt stack 0
  3044  0005D6                     	ds	2
  3045  0005D8                     _T1:
  3046                           	opt stack 0
  3047  0005D8                     	ds	2
  3048  0005DA                     _TEMP_1:
  3049                           	opt stack 0
  3050  0005DA                     	ds	2
  3051  0005DC                     _Timer0_RS485_flag:
  3052                           	opt stack 0
  3053  0005DC                     	ds	2
  3054  0005DE                     _Timer0_counter:
  3055                           	opt stack 0
  3056  0005DE                     	ds	2
  3057  0005E0                     _VFD_Temp_counter:
  3058                           	opt stack 0
  3059  0005E0                     	ds	2
  3060  0005E2                     _counter:
  3061                           	opt stack 0
  3062  0005E2                     	ds	2
  3063  0005E4                     _data:
  3064                           	opt stack 0
  3065  0005E4                     	ds	2
  3066  0005E6                     _digit1:
  3067                           	opt stack 0
  3068  0005E6                     	ds	2
  3069  0005E8                     _digit2:
  3070                           	opt stack 0
  3071  0005E8                     	ds	2
  3072  0005EA                     _digit3:
  3073                           	opt stack 0
  3074  0005EA                     	ds	2
  3075  0005EC                     _digit4:
  3076                           	opt stack 0
  3077  0005EC                     	ds	2
  3078  0005EE                     _digit5:
  3079                           	opt stack 0
  3080  0005EE                     	ds	2
  3081  0005F0                     _errno:
  3082                           	opt stack 0
  3083  0005F0                     	ds	2
  3084  0005F2                     _rtc:
  3085                           	opt stack 0
  3086  0005F2                     	ds	7
  3087  0005F9                     _Mot_Frequency:
  3088                           	opt stack 0
  3089  0005F9                     	ds	3
  3090                           tblptru	equ	0xFF8
  3091                           tblptrh	equ	0xFF7
  3092                           tblptrl	equ	0xFF6
  3093                           tablat	equ	0xFF5
  3094                           postinc0	equ	0xFEE
  3095                           wreg	equ	0xFE8
  3096                           postdec1	equ	0xFE5
  3097                           fsr1h	equ	0xFE2
  3098                           fsr1l	equ	0xFE1
  3099                           
  3100                           	psect	dataBANK5
  3101  0005FC                     __pdataBANK5:
  3102                           	opt stack 0
  3103  0005FC                     _VFD_Counter:
  3104                           	opt stack 0
  3105  0005FC                     	ds	2
  3106                           tblptru	equ	0xFF8
  3107                           tblptrh	equ	0xFF7
  3108                           tblptrl	equ	0xFF6
  3109                           tablat	equ	0xFF5
  3110                           postinc0	equ	0xFEE
  3111                           wreg	equ	0xFE8
  3112                           postdec1	equ	0xFE5
  3113                           fsr1h	equ	0xFE2
  3114                           fsr1l	equ	0xFE1
  3115                           
  3116                           	psect	bssBANK6
  3117  000600                     __pbssBANK6:
  3118                           	opt stack 0
  3119  000600                     _Data:
  3120                           	opt stack 0
  3121  000600                     	ds	60
  3122  00063C                     _Avg_Current:
  3123                           	opt stack 0
  3124  00063C                     	ds	3
  3125  00063F                     _Avg_Voltage:
  3126                           	opt stack 0
  3127  00063F                     	ds	3
  3128  000642                     _B_Deg:
  3129                           	opt stack 0
  3130  000642                     	ds	3
  3131  000645                     _Bcurr_Old:
  3132                           	opt stack 0
  3133  000645                     	ds	3
  3134  000648                     _Gf_Blue_Current:
  3135                           	opt stack 0
  3136  000648                     	ds	3
  3137  00064B                     _Gf_Blue_Phase_Voltage:
  3138                           	opt stack 0
  3139  00064B                     	ds	3
  3140  00064E                     _Gf_Grid_Frequency:
  3141                           	opt stack 0
  3142  00064E                     	ds	3
  3143  000651                     _Gf_Motor_Slip:
  3144                           	opt stack 0
  3145  000651                     	ds	3
  3146  000654                     _Gf_Red_Current:
  3147                           	opt stack 0
  3148  000654                     	ds	3
  3149  000657                     _Gf_Red_Phase_Voltage:
  3150                           	opt stack 0
  3151  000657                     	ds	3
  3152  00065A                     _Gf_Rotor_Slip:
  3153                           	opt stack 0
  3154  00065A                     	ds	3
  3155  00065D                     _Gf_VFD_DC_Bus_Voltage:
  3156                           	opt stack 0
  3157  00065D                     	ds	3
  3158  000660                     _Gf_Yellow_Current:
  3159                           	opt stack 0
  3160  000660                     	ds	3
  3161  000663                     _Gf_Yellow_Phase_Voltage:
  3162                           	opt stack 0
  3163  000663                     	ds	3
  3164  000666                     _R_Deg:
  3165                           	opt stack 0
  3166  000666                     	ds	3
  3167  000669                     _Rcurr_Old:
  3168                           	opt stack 0
  3169  000669                     	ds	3
  3170  00066C                     _Temperature_Avg:
  3171                           	opt stack 0
  3172  00066C                     	ds	3
  3173  00066F                     _Y_Deg:
  3174                           	opt stack 0
  3175  00066F                     	ds	3
  3176  000672                     _Ycurr_Old:
  3177                           	opt stack 0
  3178  000672                     	ds	3
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           postinc0	equ	0xFEE
  3184                           wreg	equ	0xFE8
  3185                           postdec1	equ	0xFE5
  3186                           fsr1h	equ	0xFE2
  3187                           fsr1l	equ	0xFE1
  3188                           
  3189                           	psect	cstackBANK6
  3190  000675                     __pcstackBANK6:
  3191                           	opt stack 0
  3192  000675                     _R_PF_Avg$8061:
  3193                           	opt stack 0
  3194  000675                     _Y_PF_Avg$8090:
  3195                           	opt stack 0
  3196  000675                     _B_PF_Avg$8119:
  3197                           	opt stack 0
  3198                           
  3199                           ; 3 bytes @ 0x0
  3200  000675                     	ds	3
  3201  000678                     _R_PF_Avg$8062:
  3202                           	opt stack 0
  3203  000678                     _Y_PF_Avg$8091:
  3204                           	opt stack 0
  3205  000678                     _B_PF_Avg$8120:
  3206                           	opt stack 0
  3207                           
  3208                           ; 3 bytes @ 0x3
  3209  000678                     	ds	3
  3210  00067B                     _R_PF_Avg$8063:
  3211                           	opt stack 0
  3212  00067B                     _Y_PF_Avg$8092:
  3213                           	opt stack 0
  3214  00067B                     _B_PF_Avg$8121:
  3215                           	opt stack 0
  3216                           
  3217                           ; 3 bytes @ 0x6
  3218  00067B                     	ds	3
  3219  00067E                     _R_PF_Avg$8064:
  3220                           	opt stack 0
  3221  00067E                     _Y_PF_Avg$8093:
  3222                           	opt stack 0
  3223  00067E                     _B_PF_Avg$8122:
  3224                           	opt stack 0
  3225                           
  3226                           ; 3 bytes @ 0x9
  3227  00067E                     	ds	3
  3228  000681                     _R_PF_Avg$8065:
  3229                           	opt stack 0
  3230  000681                     _Y_PF_Avg$8094:
  3231                           	opt stack 0
  3232  000681                     _B_PF_Avg$8123:
  3233                           	opt stack 0
  3234                           
  3235                           ; 3 bytes @ 0xC
  3236  000681                     	ds	3
  3237  000684                     _R_PF_Avg$8066:
  3238                           	opt stack 0
  3239  000684                     _Y_PF_Avg$8095:
  3240                           	opt stack 0
  3241  000684                     _B_PF_Avg$8124:
  3242                           	opt stack 0
  3243                           
  3244                           ; 3 bytes @ 0xF
  3245  000684                     	ds	3
  3246  000687                     _R_PF_Avg$8067:
  3247                           	opt stack 0
  3248  000687                     _Y_PF_Avg$8096:
  3249                           	opt stack 0
  3250  000687                     _B_PF_Avg$8125:
  3251                           	opt stack 0
  3252                           
  3253                           ; 3 bytes @ 0x12
  3254  000687                     	ds	3
  3255  00068A                     _R_PF_Avg$8068:
  3256                           	opt stack 0
  3257  00068A                     _Y_PF_Avg$8097:
  3258                           	opt stack 0
  3259  00068A                     _B_PF_Avg$8126:
  3260                           	opt stack 0
  3261                           
  3262                           ; 3 bytes @ 0x15
  3263  00068A                     	ds	3
  3264  00068D                     _R_PF_Avg$8069:
  3265                           	opt stack 0
  3266  00068D                     _Y_PF_Avg$8098:
  3267                           	opt stack 0
  3268  00068D                     _B_PF_Avg$8127:
  3269                           	opt stack 0
  3270                           
  3271                           ; 3 bytes @ 0x18
  3272  00068D                     	ds	3
  3273  000690                     _R_PF_Avg$8070:
  3274                           	opt stack 0
  3275  000690                     _Y_PF_Avg$8099:
  3276                           	opt stack 0
  3277  000690                     _B_PF_Avg$8128:
  3278                           	opt stack 0
  3279                           
  3280                           ; 3 bytes @ 0x1B
  3281  000690                     	ds	3
  3282  000693                     _R_PF_Avg$8071:
  3283                           	opt stack 0
  3284  000693                     _Y_PF_Avg$8100:
  3285                           	opt stack 0
  3286  000693                     _B_PF_Avg$8129:
  3287                           	opt stack 0
  3288                           
  3289                           ; 3 bytes @ 0x1E
  3290  000693                     	ds	3
  3291  000696                     _R_PF_Avg$8072:
  3292                           	opt stack 0
  3293  000696                     _Y_PF_Avg$8101:
  3294                           	opt stack 0
  3295  000696                     _B_PF_Avg$8130:
  3296                           	opt stack 0
  3297                           
  3298                           ; 3 bytes @ 0x21
  3299  000696                     	ds	3
  3300  000699                     _R_PF_Avg$8073:
  3301                           	opt stack 0
  3302  000699                     _Y_PF_Avg$8102:
  3303                           	opt stack 0
  3304  000699                     _B_PF_Avg$8131:
  3305                           	opt stack 0
  3306                           
  3307                           ; 3 bytes @ 0x24
  3308  000699                     	ds	3
  3309  00069C                     _R_PF_Avg$8074:
  3310                           	opt stack 0
  3311  00069C                     _Y_PF_Avg$8103:
  3312                           	opt stack 0
  3313  00069C                     _B_PF_Avg$8132:
  3314                           	opt stack 0
  3315                           
  3316                           ; 3 bytes @ 0x27
  3317  00069C                     	ds	3
  3318  00069F                     _R_PF_Avg$8075:
  3319                           	opt stack 0
  3320  00069F                     _Y_PF_Avg$8104:
  3321                           	opt stack 0
  3322  00069F                     _B_PF_Avg$8133:
  3323                           	opt stack 0
  3324                           
  3325                           ; 3 bytes @ 0x2A
  3326  00069F                     	ds	3
  3327  0006A2                     _R_PF_Avg$8076:
  3328                           	opt stack 0
  3329  0006A2                     _Y_PF_Avg$8105:
  3330                           	opt stack 0
  3331  0006A2                     _B_PF_Avg$8134:
  3332                           	opt stack 0
  3333                           
  3334                           ; 3 bytes @ 0x2D
  3335  0006A2                     	ds	3
  3336  0006A5                     _R_PF_Avg$8077:
  3337                           	opt stack 0
  3338  0006A5                     _Y_PF_Avg$8106:
  3339                           	opt stack 0
  3340  0006A5                     _B_PF_Avg$8135:
  3341                           	opt stack 0
  3342                           
  3343                           ; 3 bytes @ 0x30
  3344  0006A5                     	ds	3
  3345  0006A8                     _R_PF_Avg$8078:
  3346                           	opt stack 0
  3347  0006A8                     _Y_PF_Avg$8107:
  3348                           	opt stack 0
  3349  0006A8                     _B_PF_Avg$8136:
  3350                           	opt stack 0
  3351                           
  3352                           ; 3 bytes @ 0x33
  3353  0006A8                     	ds	3
  3354  0006AB                     _R_PF_Avg$8079:
  3355                           	opt stack 0
  3356  0006AB                     _Y_PF_Avg$8108:
  3357                           	opt stack 0
  3358  0006AB                     _B_PF_Avg$8137:
  3359                           	opt stack 0
  3360                           
  3361                           ; 3 bytes @ 0x36
  3362  0006AB                     	ds	3
  3363  0006AE                     _R_PF_Avg$8080:
  3364                           	opt stack 0
  3365  0006AE                     _Y_PF_Avg$8109:
  3366                           	opt stack 0
  3367  0006AE                     _B_PF_Avg$8138:
  3368                           	opt stack 0
  3369                           
  3370                           ; 3 bytes @ 0x39
  3371  0006AE                     	ds	3
  3372  0006B1                     _R_PF_Avg$8081:
  3373                           	opt stack 0
  3374  0006B1                     _Y_PF_Avg$8110:
  3375                           	opt stack 0
  3376  0006B1                     _B_PF_Avg$8139:
  3377                           	opt stack 0
  3378                           
  3379                           ; 3 bytes @ 0x3C
  3380  0006B1                     	ds	3
  3381  0006B4                     _R_PF_Avg$8082:
  3382                           	opt stack 0
  3383  0006B4                     _Y_PF_Avg$8111:
  3384                           	opt stack 0
  3385  0006B4                     _B_PF_Avg$8140:
  3386                           	opt stack 0
  3387                           
  3388                           ; 3 bytes @ 0x3F
  3389  0006B4                     	ds	3
  3390  0006B7                     _R_PF_Avg$8083:
  3391                           	opt stack 0
  3392  0006B7                     _Y_PF_Avg$8112:
  3393                           	opt stack 0
  3394  0006B7                     _B_PF_Avg$8141:
  3395                           	opt stack 0
  3396                           
  3397                           ; 3 bytes @ 0x42
  3398  0006B7                     	ds	3
  3399  0006BA                     _R_PF_Avg$8084:
  3400                           	opt stack 0
  3401  0006BA                     _Y_PF_Avg$8113:
  3402                           	opt stack 0
  3403  0006BA                     _B_PF_Avg$8142:
  3404                           	opt stack 0
  3405                           
  3406                           ; 3 bytes @ 0x45
  3407  0006BA                     	ds	3
  3408  0006BD                     _R_PF_Avg$8085:
  3409                           	opt stack 0
  3410  0006BD                     _Y_PF_Avg$8114:
  3411                           	opt stack 0
  3412  0006BD                     _B_PF_Avg$8143:
  3413                           	opt stack 0
  3414                           
  3415                           ; 3 bytes @ 0x48
  3416  0006BD                     	ds	3
  3417  0006C0                     _R_PF_Avg$8058:
  3418                           	opt stack 0
  3419  0006C0                     _Y_PF_Avg$8087:
  3420                           	opt stack 0
  3421  0006C0                     _B_PF_Avg$8116:
  3422                           	opt stack 0
  3423                           
  3424                           ; 3 bytes @ 0x4B
  3425  0006C0                     	ds	3
  3426  0006C3                     _R_PF_Avg$8059:
  3427                           	opt stack 0
  3428  0006C3                     _Y_PF_Avg$8088:
  3429                           	opt stack 0
  3430  0006C3                     _B_PF_Avg$8117:
  3431                           	opt stack 0
  3432                           
  3433                           ; 3 bytes @ 0x4E
  3434  0006C3                     	ds	3
  3435  0006C6                     _R_PF_Avg$8060:
  3436                           	opt stack 0
  3437  0006C6                     _Y_PF_Avg$8089:
  3438                           	opt stack 0
  3439  0006C6                     _B_PF_Avg$8118:
  3440                           	opt stack 0
  3441                           
  3442                           ; 3 bytes @ 0x51
  3443  0006C6                     	ds	3
  3444                           tblptru	equ	0xFF8
  3445                           tblptrh	equ	0xFF7
  3446                           tblptrl	equ	0xFF6
  3447                           tablat	equ	0xFF5
  3448                           postinc0	equ	0xFEE
  3449                           wreg	equ	0xFE8
  3450                           postdec1	equ	0xFE5
  3451                           fsr1h	equ	0xFE2
  3452                           fsr1l	equ	0xFE1
  3453                           
  3454                           	psect	cstackBANK1
  3455  0001AA                     __pcstackBANK1:
  3456                           	opt stack 0
  3457  0001AA                     _Wind_Average$8043:
  3458                           	opt stack 0
  3459  0001AA                     _Power_Calc$8147:
  3460                           	opt stack 0
  3461  0001AA                     _printf$8151:
  3462                           	opt stack 0
  3463  0001AA                     _cos$8152:
  3464                           	opt stack 0
  3465                           
  3466                           ; 3 bytes @ 0x0
  3467  0001AA                     	ds	3
  3468  0001AD                     printf@cp:
  3469                           	opt stack 0
  3470  0001AD                     _Wind_Average$8044:
  3471                           	opt stack 0
  3472  0001AD                     _Power_Calc$8146:
  3473                           	opt stack 0
  3474                           
  3475                           ; 3 bytes @ 0x3
  3476  0001AD                     	ds	2
  3477  0001AF                     printf@ap:
  3478                           	opt stack 0
  3479                           
  3480                           ; 2 bytes @ 0x5
  3481  0001AF                     	ds	1
  3482  0001B0                     _Wind_Average$8045:
  3483                           	opt stack 0
  3484  0001B0                     _Power_Calc$8145:
  3485                           	opt stack 0
  3486                           
  3487                           ; 3 bytes @ 0x6
  3488  0001B0                     	ds	1
  3489  0001B1                     printf@len:
  3490                           	opt stack 0
  3491                           
  3492                           ; 2 bytes @ 0x7
  3493  0001B1                     	ds	2
  3494  0001B3                     printf@flag:
  3495                           	opt stack 0
  3496  0001B3                     _Wind_Average$8046:
  3497                           	opt stack 0
  3498                           
  3499                           ; 3 bytes @ 0x9
  3500  0001B3                     	ds	2
  3501  0001B5                     printf@tmpval:
  3502                           	opt stack 0
  3503                           
  3504                           ; 4 bytes @ 0xB
  3505  0001B5                     	ds	1
  3506  0001B6                     _Wind_Average$8047:
  3507                           	opt stack 0
  3508                           
  3509                           ; 3 bytes @ 0xC
  3510  0001B6                     	ds	3
  3511  0001B9                     _Wind_Average$8048:
  3512                           	opt stack 0
  3513  0001B9                     printf@val:
  3514                           	opt stack 0
  3515                           
  3516                           ; 4 bytes @ 0xF
  3517  0001B9                     	ds	3
  3518  0001BC                     _Wind_Average$8049:
  3519                           	opt stack 0
  3520                           
  3521                           ; 3 bytes @ 0x12
  3522  0001BC                     	ds	1
  3523  0001BD                     printf@exp:
  3524                           	opt stack 0
  3525                           
  3526                           ; 2 bytes @ 0x13
  3527  0001BD                     	ds	2
  3528  0001BF                     printf@width:
  3529                           	opt stack 0
  3530  0001BF                     _Wind_Average$8050:
  3531                           	opt stack 0
  3532                           
  3533                           ; 3 bytes @ 0x15
  3534  0001BF                     	ds	2
  3535  0001C1                     printf@fval:
  3536                           	opt stack 0
  3537                           
  3538                           ; 3 bytes @ 0x17
  3539  0001C1                     	ds	3
  3540  0001C4                     printf@prec:
  3541                           	opt stack 0
  3542                           
  3543                           ; 2 bytes @ 0x1A
  3544  0001C4                     	ds	2
  3545  0001C6                     printf@c:
  3546                           	opt stack 0
  3547                           
  3548                           ; 1 bytes @ 0x1C
  3549  0001C6                     	ds	1
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           postdec1	equ	0xFE5
  3557                           fsr1h	equ	0xFE2
  3558                           fsr1l	equ	0xFE1
  3559                           
  3560                           	psect	cstackBANK0
  3561  000060                     __pcstackBANK0:
  3562                           	opt stack 0
  3563  000060                     ??_Communication_Error:
  3564  000060                     ??_isdigit:
  3565  000060                     ?_int_eeprom_read:
  3566                           	opt stack 0
  3567  000060                     ?_Read_Adc:
  3568                           	opt stack 0
  3569  000060                     ?___awmod:
  3570                           	opt stack 0
  3571  000060                     ?___ftpack:
  3572                           	opt stack 0
  3573  000060                     ?__tdiv_to_l_:
  3574                           	opt stack 0
  3575  000060                     ?__div_to_l_:
  3576                           	opt stack 0
  3577  000060                     ?___lldiv:
  3578                           	opt stack 0
  3579  000060                     I2C_Read@v_ackOption_u8:
  3580                           	opt stack 0
  3581  000060                     I2C_Write@v_i2cData_u8:
  3582                           	opt stack 0
  3583  000060                     usart_str_1@str:
  3584                           	opt stack 0
  3585  000060                     putch@data:
  3586                           	opt stack 0
  3587  000060                     usart_str_2@str:
  3588                           	opt stack 0
  3589  000060                     usart_str@str:
  3590                           	opt stack 0
  3591  000060                     int_eeprom_read@adr:
  3592                           	opt stack 0
  3593  000060                     int_eeprom_write@adr:
  3594                           	opt stack 0
  3595  000060                     ___awmod@dividend:
  3596                           	opt stack 0
  3597  000060                     __div_to_l_@f1:
  3598                           	opt stack 0
  3599  000060                     ___ftpack@arg:
  3600                           	opt stack 0
  3601  000060                     __tdiv_to_l_@f1:
  3602                           	opt stack 0
  3603  000060                     frexp@value:
  3604                           	opt stack 0
  3605  000060                     ___lldiv@dividend:
  3606                           	opt stack 0
  3607                           
  3608                           ; 4 bytes @ 0x0
  3609  000060                     	ds	1
  3610  000061                     ??_RS485_Data_communication:
  3611  000061                     I2C_Read@v_i2cData_u8:
  3612                           	opt stack 0
  3613  000061                     _isdigit$7616:
  3614                           	opt stack 0
  3615                           
  3616                           ; 1 bytes @ 0x1
  3617  000061                     	ds	1
  3618  000062                     ??_Read_Adc:
  3619  000062                     isdigit@c:
  3620                           	opt stack 0
  3621  000062                     RTC_GetDateTime@rtc:
  3622                           	opt stack 0
  3623  000062                     int_eeprom_read@temp:
  3624                           	opt stack 0
  3625  000062                     int_eeprom_write@dat:
  3626                           	opt stack 0
  3627  000062                     ___awmod@divisor:
  3628                           	opt stack 0
  3629                           
  3630                           ; 2 bytes @ 0x2
  3631  000062                     	ds	1
  3632  000063                     ___ftpack@exp:
  3633                           	opt stack 0
  3634  000063                     frexp@eptr:
  3635                           	opt stack 0
  3636  000063                     __div_to_l_@f2:
  3637                           	opt stack 0
  3638  000063                     __tdiv_to_l_@f2:
  3639                           	opt stack 0
  3640                           
  3641                           ; 3 bytes @ 0x3
  3642  000063                     	ds	1
  3643  000064                     ??_EEPROM_Error_Stop:
  3644  000064                     Read_Adc@ch:
  3645                           	opt stack 0
  3646  000064                     ___awmod@counter:
  3647                           	opt stack 0
  3648  000064                     ___ftpack@sign:
  3649                           	opt stack 0
  3650  000064                     ___lldiv@divisor:
  3651                           	opt stack 0
  3652                           
  3653                           ; 4 bytes @ 0x4
  3654  000064                     	ds	1
  3655  000065                     ??___ftpack:
  3656  000065                     ??_frexp:
  3657  000065                     ___awmod@sign:
  3658                           	opt stack 0
  3659                           
  3660                           ; 1 bytes @ 0x5
  3661  000065                     	ds	1
  3662  000066                     ??__tdiv_to_l_:
  3663  000066                     ?___awdiv:
  3664                           	opt stack 0
  3665  000066                     ___awdiv@dividend:
  3666                           	opt stack 0
  3667  000066                     __div_to_l_@quot:
  3668                           	opt stack 0
  3669                           
  3670                           ; 4 bytes @ 0x6
  3671  000066                     	ds	2
  3672  000068                     ?___lbtoft:
  3673                           	opt stack 0
  3674  000068                     ?___lltoft:
  3675                           	opt stack 0
  3676  000068                     ?___lwtoft:
  3677                           	opt stack 0
  3678  000068                     ___awdiv@divisor:
  3679                           	opt stack 0
  3680  000068                     ___lwtoft@c:
  3681                           	opt stack 0
  3682  000068                     ___lldiv@quotient:
  3683                           	opt stack 0
  3684  000068                     ___lltoft@c:
  3685                           	opt stack 0
  3686                           
  3687                           ; 4 bytes @ 0x8
  3688  000068                     	ds	1
  3689  000069                     __tdiv_to_l_@quot:
  3690                           	opt stack 0
  3691                           
  3692                           ; 4 bytes @ 0x9
  3693  000069                     	ds	1
  3694  00006A                     ___awdiv@counter:
  3695                           	opt stack 0
  3696  00006A                     __div_to_l_@cntr:
  3697                           	opt stack 0
  3698                           
  3699                           ; 1 bytes @ 0xA
  3700  00006A                     	ds	1
  3701  00006B                     ___awdiv@sign:
  3702                           	opt stack 0
  3703  00006B                     __div_to_l_@exp1:
  3704                           	opt stack 0
  3705  00006B                     ___lbtoft@c:
  3706                           	opt stack 0
  3707                           
  3708                           ; 1 bytes @ 0xB
  3709  00006B                     	ds	1
  3710  00006C                     ??___lltoft:
  3711  00006C                     ___lldiv@counter:
  3712                           	opt stack 0
  3713  00006C                     ___awdiv@quotient:
  3714                           	opt stack 0
  3715                           
  3716                           ; 2 bytes @ 0xC
  3717  00006C                     	ds	1
  3718  00006D                     ?___llmod:
  3719                           	opt stack 0
  3720  00006D                     __tdiv_to_l_@cntr:
  3721                           	opt stack 0
  3722  00006D                     ___llmod@dividend:
  3723                           	opt stack 0
  3724                           
  3725                           ; 4 bytes @ 0xD
  3726  00006D                     	ds	1
  3727  00006E                     ?___wmul:
  3728                           	opt stack 0
  3729  00006E                     __tdiv_to_l_@exp1:
  3730                           	opt stack 0
  3731  00006E                     ___wmul@multiplier:
  3732                           	opt stack 0
  3733                           
  3734                           ; 2 bytes @ 0xE
  3735  00006E                     	ds	2
  3736  000070                     ___lltoft@exp:
  3737                           	opt stack 0
  3738  000070                     ___wmul@multiplicand:
  3739                           	opt stack 0
  3740                           
  3741                           ; 2 bytes @ 0x10
  3742  000070                     	ds	1
  3743  000071                     ___llmod@divisor:
  3744                           	opt stack 0
  3745                           
  3746                           ; 4 bytes @ 0x11
  3747  000071                     	ds	1
  3748  000072                     ___wmul@product:
  3749                           	opt stack 0
  3750                           
  3751                           ; 2 bytes @ 0x12
  3752  000072                     	ds	2
  3753  000074                     ?_BCDtoI:
  3754                           	opt stack 0
  3755  000074                     ?___ftmul:
  3756                           	opt stack 0
  3757  000074                     BCDtoI@BCD:
  3758                           	opt stack 0
  3759  000074                     ___ftmul@f1:
  3760                           	opt stack 0
  3761                           
  3762                           ; 3 bytes @ 0x14
  3763  000074                     	ds	1
  3764  000075                     ___llmod@counter:
  3765                           	opt stack 0
  3766                           
  3767                           ; 1 bytes @ 0x15
  3768  000075                     	ds	1
  3769  000076                     ??_BCDtoI:
  3770                           
  3771                           ; 1 bytes @ 0x16
  3772  000076                     	ds	1
  3773  000077                     ___ftmul@f2:
  3774                           	opt stack 0
  3775                           
  3776                           ; 3 bytes @ 0x17
  3777  000077                     	ds	2
  3778  000079                     BCDtoI@result:
  3779                           	opt stack 0
  3780                           
  3781                           ; 2 bytes @ 0x19
  3782  000079                     	ds	1
  3783  00007A                     ??___ftmul:
  3784                           
  3785                           ; 1 bytes @ 0x1A
  3786  00007A                     	ds	3
  3787  00007D                     ___ftmul@exp:
  3788                           	opt stack 0
  3789                           
  3790                           ; 1 bytes @ 0x1D
  3791  00007D                     	ds	1
  3792  00007E                     ___ftmul@f3_as_product:
  3793                           	opt stack 0
  3794                           
  3795                           ; 3 bytes @ 0x1E
  3796  00007E                     	ds	3
  3797  000081                     ___ftmul@cntr:
  3798                           	opt stack 0
  3799                           
  3800                           ; 1 bytes @ 0x21
  3801  000081                     	ds	1
  3802  000082                     ___ftmul@sign:
  3803                           	opt stack 0
  3804                           
  3805                           ; 1 bytes @ 0x22
  3806  000082                     	ds	1
  3807  000083                     ?_fround:
  3808                           	opt stack 0
  3809  000083                     ?_scale:
  3810                           	opt stack 0
  3811  000083                     ?___ftneg:
  3812                           	opt stack 0
  3813  000083                     ___ftneg@f1:
  3814                           	opt stack 0
  3815                           
  3816                           ; 3 bytes @ 0x23
  3817  000083                     	ds	3
  3818  000086                     _fround$8149:
  3819                           	opt stack 0
  3820  000086                     _scale$8150:
  3821                           	opt stack 0
  3822                           
  3823                           ; 3 bytes @ 0x26
  3824  000086                     	ds	3
  3825  000089                     scale@scl:
  3826                           	opt stack 0
  3827  000089                     _fround$8148:
  3828                           	opt stack 0
  3829                           
  3830                           ; 3 bytes @ 0x29
  3831  000089                     	ds	1
  3832  00008A                     ?___fttol:
  3833                           	opt stack 0
  3834  00008A                     ___fttol@f1:
  3835                           	opt stack 0
  3836                           
  3837                           ; 3 bytes @ 0x2A
  3838  00008A                     	ds	2
  3839  00008C                     fround@prec:
  3840                           	opt stack 0
  3841                           
  3842                           ; 1 bytes @ 0x2C
  3843  00008C                     	ds	1
  3844  00008D                     ?___ftadd:
  3845                           	opt stack 0
  3846  00008D                     ___ftadd@f1:
  3847                           	opt stack 0
  3848                           
  3849                           ; 3 bytes @ 0x2D
  3850  00008D                     	ds	1
  3851  00008E                     ??___fttol:
  3852                           
  3853                           ; 1 bytes @ 0x2E
  3854  00008E                     	ds	2
  3855  000090                     ___ftadd@f2:
  3856                           	opt stack 0
  3857                           
  3858                           ; 3 bytes @ 0x30
  3859  000090                     	ds	3
  3860  000093                     ??___ftadd:
  3861  000093                     ___fttol@sign1:
  3862                           	opt stack 0
  3863                           
  3864                           ; 1 bytes @ 0x33
  3865  000093                     	ds	1
  3866  000094                     ___fttol@lval:
  3867                           	opt stack 0
  3868                           
  3869                           ; 4 bytes @ 0x34
  3870  000094                     	ds	2
  3871  000096                     ___ftadd@sign:
  3872                           	opt stack 0
  3873                           
  3874                           ; 1 bytes @ 0x36
  3875  000096                     	ds	1
  3876  000097                     ___ftadd@exp2:
  3877                           	opt stack 0
  3878                           
  3879                           ; 1 bytes @ 0x37
  3880  000097                     	ds	1
  3881  000098                     ___ftadd@exp1:
  3882                           	opt stack 0
  3883  000098                     ___fttol@exp1:
  3884                           	opt stack 0
  3885                           
  3886                           ; 1 bytes @ 0x38
  3887  000098                     	ds	1
  3888  000099                     ?_eval_poly:
  3889                           	opt stack 0
  3890  000099                     ?___altoft:
  3891                           	opt stack 0
  3892  000099                     ___ftge@ff1:
  3893                           	opt stack 0
  3894  000099                     eval_poly@x:
  3895                           	opt stack 0
  3896  000099                     ___altoft@c:
  3897                           	opt stack 0
  3898                           
  3899                           ; 4 bytes @ 0x39
  3900  000099                     	ds	3
  3901  00009C                     eval_poly@d:
  3902                           	opt stack 0
  3903  00009C                     ___ftge@ff2:
  3904                           	opt stack 0
  3905                           
  3906                           ; 3 bytes @ 0x3C
  3907  00009C                     	ds	1
  3908  00009D                     ??___altoft:
  3909                           
  3910                           ; 1 bytes @ 0x3D
  3911  00009D                     	ds	1
  3912  00009E                     eval_poly@n:
  3913                           	opt stack 0
  3914                           
  3915                           ; 2 bytes @ 0x3E
  3916  00009E                     	ds	1
  3917  00009F                     ??___ftge:
  3918                           
  3919                           ; 1 bytes @ 0x3F
  3920  00009F                     	ds	1
  3921  0000A0                     ??_eval_poly:
  3922                           
  3923                           ; 1 bytes @ 0x40
  3924  0000A0                     	ds	1
  3925  0000A1                     ___altoft@exp:
  3926                           	opt stack 0
  3927                           
  3928                           ; 1 bytes @ 0x41
  3929  0000A1                     	ds	1
  3930  0000A2                     ___altoft@sign:
  3931                           	opt stack 0
  3932  0000A2                     eval_poly@res:
  3933                           	opt stack 0
  3934                           
  3935                           ; 3 bytes @ 0x42
  3936  0000A2                     	ds	1
  3937  0000A3                     ?_floor:
  3938                           	opt stack 0
  3939  0000A3                     floor@x:
  3940                           	opt stack 0
  3941                           
  3942                           ; 3 bytes @ 0x43
  3943  0000A3                     	ds	2
  3944  0000A5                     ?___ftdiv:
  3945                           	opt stack 0
  3946  0000A5                     ___ftdiv@f1:
  3947                           	opt stack 0
  3948                           
  3949                           ; 3 bytes @ 0x45
  3950  0000A5                     	ds	1
  3951  0000A6                     floor@i:
  3952                           	opt stack 0
  3953                           
  3954                           ; 3 bytes @ 0x46
  3955  0000A6                     	ds	2
  3956  0000A8                     ___ftdiv@f2:
  3957                           	opt stack 0
  3958                           
  3959                           ; 3 bytes @ 0x48
  3960  0000A8                     	ds	1
  3961  0000A9                     floor@expon:
  3962                           	opt stack 0
  3963                           
  3964                           ; 2 bytes @ 0x49
  3965  0000A9                     	ds	2
  3966  0000AB                     ??___ftdiv:
  3967  0000AB                     ?___ftsub:
  3968                           	opt stack 0
  3969  0000AB                     ___ftsub@f1:
  3970                           	opt stack 0
  3971                           
  3972                           ; 3 bytes @ 0x4B
  3973  0000AB                     	ds	3
  3974  0000AE                     ___ftdiv@cntr:
  3975                           	opt stack 0
  3976  0000AE                     ___ftsub@f2:
  3977                           	opt stack 0
  3978                           
  3979                           ; 3 bytes @ 0x4E
  3980  0000AE                     	ds	1
  3981  0000AF                     ___ftdiv@f3:
  3982                           	opt stack 0
  3983                           
  3984                           ; 3 bytes @ 0x4F
  3985  0000AF                     	ds	2
  3986  0000B1                     ?_printf:
  3987                           	opt stack 0
  3988  0000B1                     ?_sqrt:
  3989                           	opt stack 0
  3990  0000B1                     printf@f:
  3991                           	opt stack 0
  3992  0000B1                     sqrt@a:
  3993                           	opt stack 0
  3994                           
  3995                           ; 3 bytes @ 0x51
  3996  0000B1                     	ds	1
  3997  0000B2                     ___ftdiv@exp:
  3998                           	opt stack 0
  3999                           
  4000                           ; 1 bytes @ 0x52
  4001  0000B2                     	ds	1
  4002  0000B3                     ___ftdiv@sign:
  4003                           	opt stack 0
  4004                           
  4005                           ; 1 bytes @ 0x53
  4006  0000B3                     	ds	1
  4007  0000B4                     ??_Generator_RPM_Cal:
  4008  0000B4                     ??_Turbine_RPM_Cal:
  4009  0000B4                     ??_Wind_Speed_Cal:
  4010  0000B4                     ??_Wind_Speed_2_Cal:
  4011  0000B4                     ??_VFD_RS485_Data:
  4012  0000B4                     ??_RAMP_UP:
  4013  0000B4                     ??_sqrt:
  4014  0000B4                     ?_sin:
  4015                           	opt stack 0
  4016  0000B4                     sin@f:
  4017                           	opt stack 0
  4018  0000B4                     _Temp_Read$8051:
  4019                           	opt stack 0
  4020  0000B4                     _Volt_Curr_Avg$8055:
  4021                           	opt stack 0
  4022  0000B4                     _Freq_Calc$8056:
  4023                           	opt stack 0
  4024  0000B4                     _R_PF_Calc$8057:
  4025                           	opt stack 0
  4026  0000B4                     _Y_PF_Calc$8086:
  4027                           	opt stack 0
  4028  0000B4                     _B_PF_Calc$8115:
  4029                           	opt stack 0
  4030  0000B4                     _Power_Factor$8144:
  4031                           	opt stack 0
  4032                           
  4033                           ; 3 bytes @ 0x54
  4034  0000B4                     	ds	1
  4035  0000B5                     
  4036                           ; 1 bytes @ 0x55
  4037  0000B5                     	ds	1
  4038  0000B6                     ??_printf:
  4039  0000B6                     
  4040                           ; 1 bytes @ 0x56
  4041  0000B6                     	ds	1
  4042  0000B7                     sin@y:
  4043                           	opt stack 0
  4044  0000B7                     sqrt@og:
  4045                           	opt stack 0
  4046  0000B7                     _Temp_Read$8052:
  4047                           	opt stack 0
  4048                           
  4049                           ; 3 bytes @ 0x57
  4050  0000B7                     	ds	3
  4051  0000BA                     sqrt@z:
  4052                           	opt stack 0
  4053  0000BA                     _Temp_Read$8053:
  4054                           	opt stack 0
  4055  0000BA                     _sin$8153:
  4056                           	opt stack 0
  4057                           
  4058                           ; 3 bytes @ 0x5A
  4059  0000BA                     	ds	2
  4060  0000BC                     
  4061                           ; 1 bytes @ 0x5C
  4062  0000BC                     	ds	1
  4063  0000BD                     sqrt@i:
  4064                           	opt stack 0
  4065  0000BD                     sin@x2:
  4066                           	opt stack 0
  4067  0000BD                     _Temp_Read$8054:
  4068                           	opt stack 0
  4069                           
  4070                           ; 3 bytes @ 0x5D
  4071  0000BD                     	ds	1
  4072  0000BE                     sqrt@q:
  4073                           	opt stack 0
  4074                           
  4075                           ; 3 bytes @ 0x5E
  4076  0000BE                     	ds	2
  4077  0000C0                     sin@sgn:
  4078                           	opt stack 0
  4079                           
  4080                           ; 1 bytes @ 0x60
  4081  0000C0                     	ds	1
  4082  0000C1                     ?_cos:
  4083                           	opt stack 0
  4084  0000C1                     cos@f:
  4085                           	opt stack 0
  4086  0000C1                     sqrt@x:
  4087                           	opt stack 0
  4088                           
  4089                           ; 3 bytes @ 0x61
  4090  0000C1                     	ds	3
  4091  0000C4                     tblptru	equ	0xFF8
  4092                           tblptrh	equ	0xFF7
  4093                           tblptrl	equ	0xFF6
  4094                           tablat	equ	0xFF5
  4095                           postinc0	equ	0xFEE
  4096                           wreg	equ	0xFE8
  4097                           postdec1	equ	0xFE5
  4098                           fsr1h	equ	0xFE2
  4099                           fsr1l	equ	0xFE1
  4100                           
  4101                           ; 1 bytes @ 0x64
  4102                           
  4103                           	psect	cstackCOMRAM
  4104  000025                     __pcstackCOMRAM:
  4105                           	opt stack 0
  4106  000025                     ?i2___ftpack:
  4107                           	opt stack 0
  4108  000025                     i2___ftpack@arg:
  4109                           	opt stack 0
  4110  000025                     i2___ftge@ff1:
  4111                           	opt stack 0
  4112                           
  4113                           ; 3 bytes @ 0x0
  4114  000025                     	ds	3
  4115  000028                     i2___ftpack@exp:
  4116                           	opt stack 0
  4117  000028                     i2___ftge@ff2:
  4118                           	opt stack 0
  4119                           
  4120                           ; 3 bytes @ 0x3
  4121  000028                     	ds	1
  4122  000029                     i2___ftpack@sign:
  4123                           	opt stack 0
  4124                           
  4125                           ; 1 bytes @ 0x4
  4126  000029                     	ds	1
  4127  00002A                     ??i2___ftpack:
  4128                           
  4129                           ; 1 bytes @ 0x5
  4130  00002A                     	ds	1
  4131  00002B                     ??i2___ftge:
  4132                           
  4133                           ; 1 bytes @ 0x6
  4134  00002B                     	ds	2
  4135  00002D                     ?___awtoft:
  4136                           	opt stack 0
  4137  00002D                     ?i2___ftadd:
  4138                           	opt stack 0
  4139  00002D                     ___awtoft@c:
  4140                           	opt stack 0
  4141  00002D                     i2___ftadd@f1:
  4142                           	opt stack 0
  4143                           
  4144                           ; 3 bytes @ 0x8
  4145  00002D                     	ds	1
  4146  00002E                     
  4147                           ; 1 bytes @ 0x9
  4148  00002E                     	ds	2
  4149  000030                     ___awtoft@sign:
  4150                           	opt stack 0
  4151  000030                     i2___ftadd@f2:
  4152                           	opt stack 0
  4153                           
  4154                           ; 3 bytes @ 0xB
  4155  000030                     	ds	3
  4156  000033                     ??i2___ftadd:
  4157                           
  4158                           ; 1 bytes @ 0xE
  4159  000033                     	ds	3
  4160  000036                     i2___ftadd@sign:
  4161                           	opt stack 0
  4162                           
  4163                           ; 1 bytes @ 0x11
  4164  000036                     	ds	1
  4165  000037                     i2___ftadd@exp2:
  4166                           	opt stack 0
  4167                           
  4168                           ; 1 bytes @ 0x12
  4169  000037                     	ds	1
  4170  000038                     i2___ftadd@exp1:
  4171                           	opt stack 0
  4172                           
  4173                           ; 1 bytes @ 0x13
  4174  000038                     	ds	1
  4175  000039                     ??_ISR:
  4176                           
  4177                           ; 1 bytes @ 0x14
  4178  000039                     	ds	16
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           postinc0	equ	0xFEE
  4184                           wreg	equ	0xFE8
  4185                           postdec1	equ	0xFE5
  4186                           fsr1h	equ	0xFE2
  4187                           fsr1l	equ	0xFE1
  4188                           
  4189 ;;
  4190 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4191 ;;
  4192 ;; *************** function _main *****************
  4193 ;; Defined at:
  4194 ;;		line 30 in file "main_Logic.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;		None
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;  rtc             7    0        struct .
  4199 ;; Return value:  Size  Location     Type
  4200 ;;                  1    wreg      void 
  4201 ;; Registers used:
  4202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4203 ;; Tracked objects:
  4204 ;;		On entry : 0/0
  4205 ;;		On exit  : 0/0
  4206 ;;		Unchanged: 0/0
  4207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;Total ram usage:        0 bytes
  4213 ;; Hardware stack levels required when called:   10
  4214 ;; This function calls:
  4215 ;;		_B_PF_Avg
  4216 ;;		_B_PF_Calc
  4217 ;;		_Cons_Gene
  4218 ;;		_EEPROM_Error_Stop
  4219 ;;		_Freq_Calc
  4220 ;;		_Generator_RPM_Cal
  4221 ;;		_Generator_RPM_Initiate
  4222 ;;		_IO_Initiate
  4223 ;;		_OSCILLATOR
  4224 ;;		_PM_ADC_Initialization
  4225 ;;		_PM_IO_Initialization
  4226 ;;		_PM_Timer_Initialization
  4227 ;;		_Phase_Sequence
  4228 ;;		_Power_Calc
  4229 ;;		_Power_Factor
  4230 ;;		_RPM_Data_Kill
  4231 ;;		_RS485_Data_communication
  4232 ;;		_RTC_Init
  4233 ;;		_R_PF_Avg
  4234 ;;		_R_PF_Calc
  4235 ;;		_Rampup_state_function
  4236 ;;		_Temp_Read
  4237 ;;		_Timer0_OneSecond_Function
  4238 ;;		_Timer1_Initiate
  4239 ;;		_Timer7_Init
  4240 ;;		_Turbine_RPM_Cal
  4241 ;;		_Turbine_RPM_Initiate
  4242 ;;		_Volt_Curr_Avg
  4243 ;;		_Volt_Curr_Read
  4244 ;;		_Wind_Speed_2_Cal
  4245 ;;		_Wind_Speed_2_Initiate
  4246 ;;		_Wind_Speed_Cal
  4247 ;;		_Wind_Speed_Initiate
  4248 ;;		_Y_PF_Avg
  4249 ;;		_Y_PF_Calc
  4250 ;;		_startup_state_function
  4251 ;;		_usart_init
  4252 ;; This function is called by:
  4253 ;;		Startup code after reset
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text0
  4258  01739E                     __ptext0:
  4259                           	opt stack 0
  4260  01739E                     _main:
  4261                           	opt stack 21
  4262                           
  4263                           ;main_Logic.c: 32: OSCILLATOR();
  4264                           
  4265                           ;incstack = 0
  4266  01739E  EC7E  F0D8         	call	_OSCILLATOR	;wreg free
  4267                           
  4268                           ;main_Logic.c: 33: Timer1_Initiate();
  4269  0173A2  EC08  F0D8         	call	_Timer1_Initiate	;wreg free
  4270                           
  4271                           ;main_Logic.c: 34: Timer7_Init();
  4272  0173A6  EC37  F0D8         	call	_Timer7_Init	;wreg free
  4273                           
  4274                           ;main_Logic.c: 35: PEIE=1;
  4275  0173AA  8CF2               	bsf	intcon,6,c	;volatile
  4276                           
  4277                           ;main_Logic.c: 36: GIE=1;
  4278  0173AC  8EF2               	bsf	intcon,7,c	;volatile
  4279                           
  4280                           ;main_Logic.c: 38: if(Timer0_Initial_delay_flag)
  4281  0173AE  0101               	movlb	1	; () banked
  4282  0173B0  5185               	movf	_Timer0_Initial_delay_flag& (0+255),w,b
  4283  0173B2  B4D8               	btfsc	status,2,c
  4284  0173B4  EF22  F002         	goto	start
  4285                           
  4286                           ; BSR set to: 1
  4287                           ;main_Logic.c: 39: {
  4288                           ;main_Logic.c: 40: rtc_t rtc;
  4289                           ;main_Logic.c: 41: RTC_Init();
  4290  0173B8  ECB5  F0D7         	call	_RTC_Init	;wreg free
  4291                           
  4292                           ;main_Logic.c: 42: usart_init();
  4293  0173BC  ECC5  F0D7         	call	_usart_init	;wreg free
  4294                           
  4295                           ;main_Logic.c: 43: Generator_RPM_Initiate();
  4296  0173C0  EC24  F0D8         	call	_Generator_RPM_Initiate	;wreg free
  4297                           
  4298                           ;main_Logic.c: 44: Wind_Speed_Initiate();
  4299  0173C4  EC2B  F0D8         	call	_Wind_Speed_Initiate	;wreg free
  4300                           
  4301                           ;main_Logic.c: 45: Turbine_RPM_Initiate();
  4302  0173C8  EC31  F0D8         	call	_Turbine_RPM_Initiate	;wreg free
  4303                           
  4304                           ;main_Logic.c: 46: Wind_Speed_2_Initiate();
  4305  0173CC  EC01  F0D8         	call	_Wind_Speed_2_Initiate	;wreg free
  4306                           
  4307                           ;main_Logic.c: 47: IO_Initiate();
  4308  0173D0  ECC9  F0D5         	call	_IO_Initiate	;wreg free
  4309                           
  4310                           ;main_Logic.c: 48: PM_IO_Initialization();
  4311  0173D4  EC24  F0D4         	call	_PM_IO_Initialization	;wreg free
  4312                           
  4313                           ;main_Logic.c: 49: PM_Timer_Initialization();
  4314  0173D8  EC52  F0D8         	call	_PM_Timer_Initialization	;wreg free
  4315                           
  4316                           ;main_Logic.c: 50: PM_ADC_Initialization();
  4317  0173DC  EC57  F0D8         	call	_PM_ADC_Initialization	;wreg free
  4318                           
  4319                           ;main_Logic.c: 51: Phase_Sequence();
  4320  0173E0  ECF1  F0BF         	call	_Phase_Sequence	;wreg free
  4321                           
  4322                           ;main_Logic.c: 52: EEPROM_Error_Stop();
  4323  0173E4  EC77  F0AA         	call	_EEPROM_Error_Stop	;wreg free
  4324                           
  4325                           ;main_Logic.c: 54: counter_1 = 0;
  4326  0173E8  0E00               	movlw	0
  4327  0173EA  0100               	movlb	0	; () banked
  4328  0173EC  6FF3               	movwf	_counter_1& (0+255),b
  4329  0173EE                     l23069:
  4330                           
  4331                           ;main_Logic.c: 66: {
  4332                           ;main_Logic.c: 68: Temp_Read();
  4333  0173EE  EC12  F0BD         	call	_Temp_Read	;wreg free
  4334                           
  4335                           ;main_Logic.c: 70: if(Volt_Curr_Flag == 1)
  4336  0173F2  0101               	movlb	1	; () banked
  4337  0173F4  059A               	decf	_Volt_Curr_Flag& (0+255),w,b
  4338  0173F6  A4D8               	btfss	status,2,c
  4339  0173F8  D007               	goto	l23079
  4340                           
  4341                           ; BSR set to: 1
  4342                           ;main_Logic.c: 71: {
  4343                           ;main_Logic.c: 72: Volt_Curr_Flag = 0;
  4344  0173FA  0E00               	movlw	0
  4345  0173FC  0101               	movlb	1	; () banked
  4346  0173FE  6F9A               	movwf	_Volt_Curr_Flag& (0+255),b
  4347                           
  4348                           ; BSR set to: 1
  4349                           ;main_Logic.c: 73: Volt_Curr_Read();
  4350  017400  EC4B  F0A5         	call	_Volt_Curr_Read	;wreg free
  4351                           
  4352                           ;main_Logic.c: 74: Volt_Curr_Avg();
  4353  017404  EC24  F09C         	call	_Volt_Curr_Avg	;wreg free
  4354  017408                     l23079:
  4355                           
  4356                           ;main_Logic.c: 76: }
  4357                           ;main_Logic.c: 78: if(Freq_Flag == 1)
  4358  017408  0101               	movlb	1	; () banked
  4359  01740A  0558               	decf	_Freq_Flag& (0+255),w,b
  4360  01740C  A4D8               	btfss	status,2,c
  4361  01740E  D005               	goto	l23085
  4362                           
  4363                           ; BSR set to: 1
  4364                           ;main_Logic.c: 79: {
  4365                           ;main_Logic.c: 80: Freq_Flag = 0;
  4366  017410  0E00               	movlw	0
  4367  017412  0101               	movlb	1	; () banked
  4368  017414  6F58               	movwf	_Freq_Flag& (0+255),b
  4369                           
  4370                           ; BSR set to: 1
  4371                           ;main_Logic.c: 81: Freq_Calc();
  4372  017416  EC05  F0B8         	call	_Freq_Calc	;wreg free
  4373  01741A                     l23085:
  4374                           
  4375                           ;main_Logic.c: 82: }
  4376                           ;main_Logic.c: 84: if(R_PF_Flag == 1)
  4377  01741A  0101               	movlb	1	; () banked
  4378  01741C  0578               	decf	_R_PF_Flag& (0+255),w,b
  4379  01741E  A4D8               	btfss	status,2,c
  4380  017420  D007               	goto	l23093
  4381                           
  4382                           ; BSR set to: 1
  4383                           ;main_Logic.c: 85: {
  4384                           ;main_Logic.c: 86: R_PF_Flag = 0;
  4385  017422  0E00               	movlw	0
  4386  017424  0101               	movlb	1	; () banked
  4387  017426  6F78               	movwf	_R_PF_Flag& (0+255),b
  4388                           
  4389                           ; BSR set to: 1
  4390                           ;main_Logic.c: 87: R_PF_Calc();
  4391  017428  ECD7  F0B5         	call	_R_PF_Calc	;wreg free
  4392                           
  4393                           ;main_Logic.c: 88: R_PF_Avg();
  4394  01742C  ECCA  F090         	call	_R_PF_Avg	;wreg free
  4395  017430                     l23093:
  4396                           
  4397                           ;main_Logic.c: 89: }
  4398                           ;main_Logic.c: 91: if(Y_PF_Flag == 1)
  4399  017430  0101               	movlb	1	; () banked
  4400  017432  059D               	decf	_Y_PF_Flag& (0+255),w,b
  4401  017434  A4D8               	btfss	status,2,c
  4402  017436  D007               	goto	l23101
  4403                           
  4404                           ; BSR set to: 1
  4405                           ;main_Logic.c: 92: {
  4406                           ;main_Logic.c: 93: Y_PF_Flag = 0;
  4407  017438  0E00               	movlw	0
  4408  01743A  0101               	movlb	1	; () banked
  4409  01743C  6F9D               	movwf	_Y_PF_Flag& (0+255),b
  4410                           
  4411                           ; BSR set to: 1
  4412                           ;main_Logic.c: 94: Y_PF_Calc();
  4413  01743E  ECC0  F0B4         	call	_Y_PF_Calc	;wreg free
  4414                           
  4415                           ;main_Logic.c: 95: Y_PF_Avg();
  4416  017442  ECDF  F08C         	call	_Y_PF_Avg	;wreg free
  4417  017446                     l23101:
  4418                           
  4419                           ;main_Logic.c: 96: }
  4420                           ;main_Logic.c: 98: if(B_PF_Flag == 1)
  4421  017446  0101               	movlb	1	; () banked
  4422  017448  054A               	decf	_B_PF_Flag& (0+255),w,b
  4423  01744A  A4D8               	btfss	status,2,c
  4424  01744C  D007               	goto	l23109
  4425                           
  4426                           ; BSR set to: 1
  4427                           ;main_Logic.c: 99: {
  4428                           ;main_Logic.c: 100: B_PF_Flag = 0;
  4429  01744E  0E00               	movlw	0
  4430  017450  0101               	movlb	1	; () banked
  4431  017452  6F4A               	movwf	_B_PF_Flag& (0+255),b
  4432                           
  4433                           ; BSR set to: 1
  4434                           ;main_Logic.c: 101: B_PF_Calc();
  4435  017454  ECEE  F0B6         	call	_B_PF_Calc	;wreg free
  4436                           
  4437                           ;main_Logic.c: 102: B_PF_Avg();
  4438  017458  ECB5  F094         	call	_B_PF_Avg	;wreg free
  4439  01745C                     l23109:
  4440                           
  4441                           ;main_Logic.c: 103: }
  4442                           ;main_Logic.c: 105: Power_Factor();
  4443  01745C  EC4F  F0CB         	call	_Power_Factor	;wreg free
  4444                           
  4445                           ;main_Logic.c: 106: Power_Calc();
  4446  017460  EC9D  F0B3         	call	_Power_Calc	;wreg free
  4447                           
  4448                           ;main_Logic.c: 107: Cons_Gene();
  4449  017464  EC6C  F0C4         	call	_Cons_Gene	;wreg free
  4450                           
  4451                           ;main_Logic.c: 111: if (GRPM_Cap)
  4452  017468  0102               	movlb	2	; () banked
  4453  01746A  5184               	movf	_GRPM_Cap& (0+255),w,b
  4454  01746C  0102               	movlb	2	; () banked
  4455  01746E  1185               	iorwf	(_GRPM_Cap+1)& (0+255),w,b
  4456  017470  B4D8               	btfsc	status,2,c
  4457  017472  D007               	goto	l23121
  4458                           
  4459                           ; BSR set to: 2
  4460                           ;main_Logic.c: 112: {
  4461                           ;main_Logic.c: 113: Generator_RPM_Cal();
  4462  017474  EC1A  F0A7         	call	_Generator_RPM_Cal	;wreg free
  4463                           
  4464                           ;main_Logic.c: 114: GRPM_Cap = 0;
  4465  017478  0E00               	movlw	0
  4466  01747A  0102               	movlb	2	; () banked
  4467  01747C  6F85               	movwf	(_GRPM_Cap+1)& (0+255),b
  4468  01747E  0E00               	movlw	0
  4469  017480  6F84               	movwf	_GRPM_Cap& (0+255),b
  4470  017482                     l23121:
  4471                           
  4472                           ; BSR set to: 2
  4473                           ;main_Logic.c: 115: }
  4474                           ;main_Logic.c: 116: if(TRPM_Cal)
  4475  017482  0100               	movlb	0	; () banked
  4476  017484  51EA               	movf	_TRPM_Cal& (0+255),w,b
  4477  017486  B4D8               	btfsc	status,2,c
  4478  017488  D005               	goto	l23127
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;main_Logic.c: 117: {
  4482                           ;main_Logic.c: 118: Turbine_RPM_Cal();
  4483  01748A  EC71  F0A3         	call	_Turbine_RPM_Cal	;wreg free
  4484                           
  4485                           ;main_Logic.c: 119: TRPM_Cal = 0;
  4486  01748E  0E00               	movlw	0
  4487  017490  0100               	movlb	0	; () banked
  4488  017492  6FEA               	movwf	_TRPM_Cal& (0+255),b
  4489  017494                     l23127:
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;main_Logic.c: 120: }
  4493                           ;main_Logic.c: 121: if (Wind_Cap)
  4494  017494  0102               	movlb	2	; () banked
  4495  017496  51B0               	movf	_Wind_Cap& (0+255),w,b
  4496  017498  0102               	movlb	2	; () banked
  4497  01749A  11B1               	iorwf	(_Wind_Cap+1)& (0+255),w,b
  4498  01749C  B4D8               	btfsc	status,2,c
  4499  01749E  D007               	goto	l23133
  4500                           
  4501                           ; BSR set to: 2
  4502                           ;main_Logic.c: 122: {
  4503                           ;main_Logic.c: 123: Wind_Cap = 0;
  4504  0174A0  0E00               	movlw	0
  4505  0174A2  0102               	movlb	2	; () banked
  4506  0174A4  6FB1               	movwf	(_Wind_Cap+1)& (0+255),b
  4507  0174A6  0E00               	movlw	0
  4508  0174A8  6FB0               	movwf	_Wind_Cap& (0+255),b
  4509                           
  4510                           ; BSR set to: 2
  4511                           ;main_Logic.c: 124: Wind_Speed_Cal();
  4512  0174AA  ECFB  F0AF         	call	_Wind_Speed_Cal	;wreg free
  4513  0174AE                     l23133:
  4514                           
  4515                           ;main_Logic.c: 125: }
  4516                           ;main_Logic.c: 126: if(Wind_Cap_2)
  4517  0174AE  0102               	movlb	2	; () banked
  4518  0174B0  51B2               	movf	_Wind_Cap_2& (0+255),w,b
  4519  0174B2  0102               	movlb	2	; () banked
  4520  0174B4  11B3               	iorwf	(_Wind_Cap_2+1)& (0+255),w,b
  4521  0174B6  B4D8               	btfsc	status,2,c
  4522  0174B8  D007               	goto	l23139
  4523                           
  4524                           ; BSR set to: 2
  4525                           ;main_Logic.c: 127: {
  4526                           ;main_Logic.c: 128: Wind_Speed_2_Cal();
  4527  0174BA  EC32  F0B1         	call	_Wind_Speed_2_Cal	;wreg free
  4528                           
  4529                           ;main_Logic.c: 129: Wind_Cap_2 = 0;
  4530  0174BE  0E00               	movlw	0
  4531  0174C0  0102               	movlb	2	; () banked
  4532  0174C2  6FB3               	movwf	(_Wind_Cap_2+1)& (0+255),b
  4533  0174C4  0E00               	movlw	0
  4534  0174C6  6FB2               	movwf	_Wind_Cap_2& (0+255),b
  4535  0174C8                     l23139:
  4536                           
  4537                           ; BSR set to: 2
  4538                           ;main_Logic.c: 130: }
  4539                           ;main_Logic.c: 131: if(Timer1_interrupt_flag)
  4540  0174C8  0101               	movlb	1	; () banked
  4541  0174CA  5187               	movf	_Timer1_interrupt_flag& (0+255),w,b
  4542  0174CC  B4D8               	btfsc	status,2,c
  4543  0174CE  D021               	goto	l23163
  4544                           
  4545                           ; BSR set to: 1
  4546                           ;main_Logic.c: 132: {
  4547                           ;main_Logic.c: 133: Timer1_interrupt_flag = 0;
  4548  0174D0  0E00               	movlw	0
  4549  0174D2  0101               	movlb	1	; () banked
  4550  0174D4  6F87               	movwf	_Timer1_interrupt_flag& (0+255),b
  4551                           
  4552                           ; BSR set to: 1
  4553                           ;main_Logic.c: 134: RPM_Data_Kill();
  4554  0174D6  ECD0  F0BD         	call	_RPM_Data_Kill	;wreg free
  4555                           
  4556                           ;main_Logic.c: 135: }
  4557                           ;main_Logic.c: 136: switch(Turbine_state)
  4558  0174DA  D01B               	goto	l23163
  4559  0174DC                     l23145:
  4560                           
  4561                           ;main_Logic.c: 139: Desired_Frequency = (8);
  4562  0174DC  0E08               	movlw	8
  4563  0174DE  6E16               	movwf	_Desired_Frequency,c
  4564                           
  4565                           ;main_Logic.c: 140: startup_state_function();
  4566  0174E0  EC83  F0D7         	call	_startup_state_function	;wreg free
  4567                           
  4568                           ;main_Logic.c: 141: Pitch_Counter = 0;
  4569  0174E4  0E00               	movlw	0
  4570  0174E6  0102               	movlb	2	; () banked
  4571  0174E8  6F97               	movwf	(_Pitch_Counter+1)& (0+255),b
  4572  0174EA  0E00               	movlw	0
  4573  0174EC  6F96               	movwf	_Pitch_Counter& (0+255),b
  4574                           
  4575                           ; BSR set to: 2
  4576                           ;main_Logic.c: 142: Pitching_FlAG = 0;
  4577  0174EE  0E00               	movlw	0
  4578  0174F0  0102               	movlb	2	; () banked
  4579  0174F2  6F99               	movwf	(_Pitching_FlAG+1)& (0+255),b
  4580  0174F4  0E00               	movlw	0
  4581  0174F6  6F98               	movwf	_Pitching_FlAG& (0+255),b
  4582                           
  4583                           ; BSR set to: 2
  4584                           ;main_Logic.c: 143: Two_Delay_counter = 0;
  4585  0174F8  0E00               	movlw	0
  4586  0174FA  0101               	movlb	1	; () banked
  4587  0174FC  6F8C               	movwf	_Two_Delay_counter& (0+255),b
  4588                           
  4589                           ; BSR set to: 1
  4590                           ;main_Logic.c: 144: Two_Sec_Delay_vab = 0;
  4591  0174FE  0E00               	movlw	0
  4592  017500  0101               	movlb	1	; () banked
  4593  017502  6F8D               	movwf	_Two_Sec_Delay_vab& (0+255),b
  4594                           
  4595                           ; BSR set to: 1
  4596                           ;main_Logic.c: 145: Two_sec_Delay_Flag = 0;
  4597  017504  0E00               	movlw	0
  4598  017506  0101               	movlb	1	; () banked
  4599  017508  6F8E               	movwf	_Two_sec_Delay_Flag& (0+255),b
  4600                           
  4601                           ;main_Logic.c: 146: break;
  4602  01750A  D00E               	goto	l23165
  4603  01750C                     l23159:
  4604                           
  4605                           ;main_Logic.c: 149: Rampup_state_function();
  4606  01750C  EC7B  F0D8         	call	_Rampup_state_function	;wreg free
  4607                           
  4608                           ;main_Logic.c: 162: }
  4609                           
  4610                           ;main_Logic.c: 161: break;
  4611                           
  4612                           ;main_Logic.c: 160: default:
  4613                           
  4614                           ;main_Logic.c: 158: break;
  4615                           
  4616                           ;main_Logic.c: 156: case STOPPING_STATE:
  4617                           
  4618                           ;main_Logic.c: 154: break;
  4619                           
  4620                           ;main_Logic.c: 152: case RUNNING_STATE:
  4621                           
  4622                           ;main_Logic.c: 150: break;
  4623  017510  D00B               	goto	l23165
  4624  017512                     l23163:
  4625  017512  0100               	movlb	0	; () banked
  4626  017514  51F0               	movf	_Turbine_state& (0+255),w,b
  4627                           
  4628                           ; Switch size 1, requested type "space"
  4629                           ; Number of cases is 4, Range of values is 0 to 3
  4630                           ; switch strategies available:
  4631                           ; Name         Instructions Cycles
  4632                           ; simple_byte           13     7 (average)
  4633                           ;	Chosen strategy is simple_byte
  4634  017516  0A00               	xorlw	0	; case 0
  4635  017518  B4D8               	btfsc	status,2,c
  4636  01751A  D7E0               	goto	l23145
  4637  01751C  0A01               	xorlw	1	; case 1
  4638  01751E  B4D8               	btfsc	status,2,c
  4639  017520  D7F5               	goto	l23159
  4640  017522  0A03               	xorlw	3	; case 2
  4641  017524  A4D8               	btfss	status,2,c
  4642  017526  0A01               	xorlw	1	; case 3
  4643  017528                     l23165:
  4644                           
  4645                           ;main_Logic.c: 164: if(Timer0_1Sec_Flag)
  4646  017528  0103               	movlb	3	; () banked
  4647  01752A  51F0               	movf	_Timer0_1Sec_Flag& (0+255),w,b
  4648  01752C  0103               	movlb	3	; () banked
  4649  01752E  11F1               	iorwf	(_Timer0_1Sec_Flag+1)& (0+255),w,b
  4650  017530  B4D8               	btfsc	status,2,c
  4651  017532  D00C               	goto	l23173
  4652                           
  4653                           ; BSR set to: 3
  4654                           ;main_Logic.c: 165: {
  4655                           ;main_Logic.c: 166: Timer0_1Sec_Flag = 0;
  4656  017534  0E00               	movlw	0
  4657  017536  0103               	movlb	3	; () banked
  4658  017538  6FF1               	movwf	(_Timer0_1Sec_Flag+1)& (0+255),b
  4659  01753A  0E00               	movlw	0
  4660  01753C  6FF0               	movwf	_Timer0_1Sec_Flag& (0+255),b
  4661                           
  4662                           ; BSR set to: 3
  4663                           ;main_Logic.c: 167: Timer0_OneSecond_Function();
  4664  01753E  EC49  F0C9         	call	_Timer0_OneSecond_Function	;wreg free
  4665                           
  4666                           ;main_Logic.c: 168: RA4 = ~RA4;
  4667  017542  B880               	btfsc	3968,4,c	;volatile
  4668  017544  D002               	goto	u17960
  4669  017546  8880               	bsf	3968,4,c	;volatile
  4670  017548  D001               	goto	l23173
  4671  01754A                     u17960:
  4672  01754A  9880               	bcf	3968,4,c	;volatile
  4673  01754C                     l23173:
  4674                           
  4675                           ;main_Logic.c: 169: }
  4676                           ;main_Logic.c: 170: RS485_Data_communication();
  4677  01754C  EC98  F0D0         	call	_RS485_Data_communication	;wreg free
  4678  017550  D74E               	goto	l23069
  4679  017552                     __end_of_main:
  4680                           	opt stack 0
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           intcon	equ	0xFF2
  4686                           postinc0	equ	0xFEE
  4687                           wreg	equ	0xFE8
  4688                           postdec1	equ	0xFE5
  4689                           fsr1h	equ	0xFE2
  4690                           fsr1l	equ	0xFE1
  4691                           status	equ	0xFD8
  4692                           
  4693 ;; *************** function _usart_init *****************
  4694 ;; Defined at:
  4695 ;;		line 525 in file "UART.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;		None
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg, status,2
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;Total ram usage:        0 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    3
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_main
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text1
  4724  01AF8A                     __ptext1:
  4725                           	opt stack 0
  4726  01AF8A                     _usart_init:
  4727                           	opt stack 27
  4728                           
  4729                           ;UART.c: 528: TXSTAbits.SYNC = 0;
  4730                           
  4731                           ;incstack = 0
  4732  01AF8A  98AC               	bcf	4012,4,c	;volatile
  4733                           
  4734                           ;UART.c: 529: TXSTAbits.BRGH = 1;
  4735  01AF8C  84AC               	bsf	4012,2,c	;volatile
  4736                           
  4737                           ;UART.c: 530: BAUDCONbits.BRG16 = 0;
  4738  01AF8E  9665               	bcf	3941,3,c	;volatile
  4739                           
  4740                           ;UART.c: 531: TRISCbits.TRISC6 = 1;
  4741  01AF90  8C94               	bsf	3988,6,c	;volatile
  4742                           
  4743                           ;UART.c: 532: TRISCbits.TRISC7 = 1;
  4744  01AF92  8E94               	bsf	3988,7,c	;volatile
  4745                           
  4746                           ;UART.c: 533: TXSTAbits.TXEN = 1;
  4747  01AF94  8AAC               	bsf	4012,5,c	;volatile
  4748                           
  4749                           ;UART.c: 534: RCSTAbits.CREN = 0;
  4750  01AF96  98AB               	bcf	4011,4,c	;volatile
  4751                           
  4752                           ;UART.c: 535: RCSTAbits.SPEN = 1;
  4753  01AF98  8EAB               	bsf	4011,7,c	;volatile
  4754                           
  4755                           ;UART.c: 536: SPBRG1=8;
  4756  01AF9A  0E08               	movlw	8
  4757  01AF9C  6EAF               	movwf	4015,c	;volatile
  4758                           
  4759                           ;UART.c: 538: PIR1bits.RC1IF = 0;
  4760  01AF9E  9A9E               	bcf	3998,5,c	;volatile
  4761                           
  4762                           ;UART.c: 539: PIE1bits.RC1IE = 0;
  4763  01AFA0  9A9D               	bcf	3997,5,c	;volatile
  4764  01AFA2  0012               	return		;funcret
  4765  01AFA4                     __end_of_usart_init:
  4766                           	opt stack 0
  4767                           tblptru	equ	0xFF8
  4768                           tblptrh	equ	0xFF7
  4769                           tblptrl	equ	0xFF6
  4770                           tablat	equ	0xFF5
  4771                           intcon	equ	0xFF2
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           postdec1	equ	0xFE5
  4775                           fsr1h	equ	0xFE2
  4776                           fsr1l	equ	0xFE1
  4777                           status	equ	0xFD8
  4778                           
  4779 ;; *************** function _startup_state_function *****************
  4780 ;; Defined at:
  4781 ;;		line 16 in file "state.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  1    wreg      void 
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    3
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_main
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text2
  4810  01AF06                     __ptext2:
  4811                           	opt stack 0
  4812  01AF06                     _startup_state_function:
  4813                           	opt stack 27
  4814                           
  4815                           ;state.c: 18: if(Start_up_Error == 0)
  4816                           
  4817                           ;incstack = 0
  4818  01AF06  0101               	movlb	1	; () banked
  4819  01AF08  51C8               	movf	_Start_up_Error& (0+255),w,b
  4820  01AF0A  A4D8               	btfss	status,2,c
  4821  01AF0C  D006               	goto	l22937
  4822                           
  4823                           ; BSR set to: 1
  4824                           ;state.c: 19: {
  4825                           ;state.c: 20: Turbine_state = RAMPUP_STATE;
  4826  01AF0E  0E01               	movlw	1
  4827  01AF10  0100               	movlb	0	; () banked
  4828  01AF12  6FF0               	movwf	_Turbine_state& (0+255),b
  4829                           
  4830                           ;state.c: 21: VFD_RAMP = VFD_IN;
  4831  01AF14  0E00               	movlw	0
  4832  01AF16  0101               	movlb	1	; () banked
  4833  01AF18  6F97               	movwf	_VFD_RAMP& (0+255),b
  4834  01AF1A                     l22937:
  4835                           
  4836                           ; BSR set to: 1
  4837                           ;state.c: 22: }
  4838                           ;state.c: 23: if(Turbine_Restore_Error == 1)
  4839  01AF1A  0101               	movlb	1	; () banked
  4840  01AF1C  058A               	decf	_Turbine_Restore_Error& (0+255),w,b
  4841  01AF1E  A4D8               	btfss	status,2,c
  4842  01AF20  0012               	return	
  4843                           
  4844                           ; BSR set to: 1
  4845                           ;state.c: 24: {
  4846                           ;state.c: 25: Turbine_state = STOPPING_STATE;
  4847  01AF22  0E03               	movlw	3
  4848  01AF24  0100               	movlb	0	; () banked
  4849  01AF26  6FF0               	movwf	_Turbine_state& (0+255),b
  4850  01AF28  0012               	return	
  4851  01AF2A                     __end_of_startup_state_function:
  4852                           	opt stack 0
  4853                           tblptru	equ	0xFF8
  4854                           tblptrh	equ	0xFF7
  4855                           tblptrl	equ	0xFF6
  4856                           tablat	equ	0xFF5
  4857                           intcon	equ	0xFF2
  4858                           postinc0	equ	0xFEE
  4859                           wreg	equ	0xFE8
  4860                           postdec1	equ	0xFE5
  4861                           fsr1h	equ	0xFE2
  4862                           fsr1l	equ	0xFE1
  4863                           status	equ	0xFD8
  4864                           
  4865 ;; *************** function _Y_PF_Calc *****************
  4866 ;; Defined at:
  4867 ;;		line 435 in file "Power_Meter.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg, status,2, status,0, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;Total ram usage:        3 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    5
  4888 ;; This function calls:
  4889 ;;		___ftadd
  4890 ;;		___ftdiv
  4891 ;;		___ftge
  4892 ;;		___ftmul
  4893 ;;		___ftneg
  4894 ;; This function is called by:
  4895 ;;		_main
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text3
  4900  016980                     __ptext3:
  4901                           	opt stack 0
  4902  016980                     _Y_PF_Calc:
  4903                           	opt stack 25
  4904                           
  4905                           ;Power_Meter.c: 437: if(Ycurr_V_New < Ycurr_V_Old)
  4906                           
  4907                           ;incstack = 0
  4908  016980  C0FD  F099         	movff	_Ycurr_V_New,___ftge@ff1
  4909  016984  C0FE  F09A         	movff	_Ycurr_V_New+1,___ftge@ff1+1
  4910  016988  C0FF  F09B         	movff	_Ycurr_V_New+2,___ftge@ff1+2
  4911  01698C  C278  F09C         	movff	_Ycurr_V_Old,___ftge@ff2
  4912  016990  C279  F09D         	movff	_Ycurr_V_Old+1,___ftge@ff2+1
  4913  016994  C27A  F09E         	movff	_Ycurr_V_Old+2,___ftge@ff2+2
  4914  016998  ECEB  F0CA         	call	___ftge	;wreg free
  4915  01699C  0100               	movlb	0	; () banked
  4916  01699E  B0D8               	btfsc	status,0,c
  4917  0169A0  D02E               	goto	l22555
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;Power_Meter.c: 438: {
  4921                           ;Power_Meter.c: 439: Y_V_Gap = ((Ycurr_V_New - Ycurr_V_Old + 1) + 65536);
  4922  0169A2  C0FD  F090         	movff	_Ycurr_V_New,___ftadd@f2
  4923  0169A6  C0FE  F091         	movff	_Ycurr_V_New+1,___ftadd@f2+1
  4924  0169AA  C0FF  F092         	movff	_Ycurr_V_New+2,___ftadd@f2+2
  4925  0169AE  C278  F083         	movff	_Ycurr_V_Old,___ftneg@f1
  4926  0169B2  C279  F084         	movff	_Ycurr_V_Old+1,___ftneg@f1+1
  4927  0169B6  C27A  F085         	movff	_Ycurr_V_Old+2,___ftneg@f1+2
  4928  0169BA  ECBD  F0D6         	call	___ftneg	;wreg free
  4929  0169BE  C083  F08D         	movff	?___ftneg,___ftadd@f1
  4930  0169C2  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  4931  0169C6  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  4932  0169CA  EC69  F0B2         	call	___ftadd	;wreg free
  4933  0169CE  C08D  F0B4         	movff	?___ftadd,_Y_PF_Calc$8086
  4934  0169D2  C08E  F0B5         	movff	?___ftadd+1,_Y_PF_Calc$8086+1
  4935  0169D6  C08F  F0B6         	movff	?___ftadd+2,_Y_PF_Calc$8086+2
  4936                           
  4937                           ;Power_Meter.c: 438: {
  4938                           ;Power_Meter.c: 439: Y_V_Gap = ((Ycurr_V_New - Ycurr_V_Old + 1) + 65536);
  4939  0169DA  C0B4  F08D         	movff	_Y_PF_Calc$8086,___ftadd@f1
  4940  0169DE  C0B5  F08E         	movff	_Y_PF_Calc$8086+1,___ftadd@f1+1
  4941  0169E2  C0B6  F08F         	movff	_Y_PF_Calc$8086+2,___ftadd@f1+2
  4942  0169E6  0E01               	movlw	1
  4943  0169E8  0100               	movlb	0	; () banked
  4944  0169EA  6F90               	movwf	___ftadd@f2& (0+255),b
  4945  0169EC  0E80               	movlw	128
  4946  0169EE  0100               	movlb	0	; () banked
  4947  0169F0  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  4948  0169F2  0E47               	movlw	71
  4949  0169F4  0100               	movlb	0	; () banked
  4950  0169F6  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  4951  0169F8  EC69  F0B2         	call	___ftadd	;wreg free
  4952  0169FC  D088               	goto	L1
  4953  0169FE                     l22555:
  4954                           
  4955                           ;Power_Meter.c: 442: else if((Ycurr_New + 100) < Ycurr_V_New)
  4956  0169FE  0E00               	movlw	0
  4957  016A00  0100               	movlb	0	; () banked
  4958  016A02  6F90               	movwf	___ftadd@f2& (0+255),b
  4959  016A04  0EC8               	movlw	200
  4960  016A06  0100               	movlb	0	; () banked
  4961  016A08  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  4962  016A0A  0E42               	movlw	66
  4963  016A0C  0100               	movlb	0	; () banked
  4964  016A0E  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  4965  016A10  C1A7  F08D         	movff	_Ycurr_New,___ftadd@f1
  4966  016A14  C1A8  F08E         	movff	_Ycurr_New+1,___ftadd@f1+1
  4967  016A18  C1A9  F08F         	movff	_Ycurr_New+2,___ftadd@f1+2
  4968  016A1C  EC69  F0B2         	call	___ftadd	;wreg free
  4969  016A20  C08D  F099         	movff	?___ftadd,___ftge@ff1
  4970  016A24  C08E  F09A         	movff	?___ftadd+1,___ftge@ff1+1
  4971  016A28  C08F  F09B         	movff	?___ftadd+2,___ftge@ff1+2
  4972  016A2C  C0FD  F09C         	movff	_Ycurr_V_New,___ftge@ff2
  4973  016A30  C0FE  F09D         	movff	_Ycurr_V_New+1,___ftge@ff2+1
  4974  016A34  C0FF  F09E         	movff	_Ycurr_V_New+2,___ftge@ff2+2
  4975  016A38  ECEB  F0CA         	call	___ftge	;wreg free
  4976  016A3C  0100               	movlb	0	; () banked
  4977  016A3E  B0D8               	btfsc	status,0,c
  4978  016A40  D034               	goto	l22559
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;Power_Meter.c: 443: {
  4982                           ;Power_Meter.c: 444: Y_C_Gap = ((Ycurr_New - Ycurr_V_New + 1) + 65536);
  4983  016A42  C1A7  F090         	movff	_Ycurr_New,___ftadd@f2
  4984  016A46  C1A8  F091         	movff	_Ycurr_New+1,___ftadd@f2+1
  4985  016A4A  C1A9  F092         	movff	_Ycurr_New+2,___ftadd@f2+2
  4986  016A4E  C0FD  F083         	movff	_Ycurr_V_New,___ftneg@f1
  4987  016A52  C0FE  F084         	movff	_Ycurr_V_New+1,___ftneg@f1+1
  4988  016A56  C0FF  F085         	movff	_Ycurr_V_New+2,___ftneg@f1+2
  4989  016A5A  ECBD  F0D6         	call	___ftneg	;wreg free
  4990  016A5E  C083  F08D         	movff	?___ftneg,___ftadd@f1
  4991  016A62  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  4992  016A66  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  4993  016A6A  EC69  F0B2         	call	___ftadd	;wreg free
  4994  016A6E  C08D  F0B4         	movff	?___ftadd,_Y_PF_Calc$8086
  4995  016A72  C08E  F0B5         	movff	?___ftadd+1,_Y_PF_Calc$8086+1
  4996  016A76  C08F  F0B6         	movff	?___ftadd+2,_Y_PF_Calc$8086+2
  4997                           
  4998                           ;Power_Meter.c: 443: {
  4999                           ;Power_Meter.c: 444: Y_C_Gap = ((Ycurr_New - Ycurr_V_New + 1) + 65536);
  5000  016A7A  C0B4  F08D         	movff	_Y_PF_Calc$8086,___ftadd@f1
  5001  016A7E  C0B5  F08E         	movff	_Y_PF_Calc$8086+1,___ftadd@f1+1
  5002  016A82  C0B6  F08F         	movff	_Y_PF_Calc$8086+2,___ftadd@f1+2
  5003  016A86  0E01               	movlw	1
  5004  016A88  0100               	movlb	0	; () banked
  5005  016A8A  6F90               	movwf	___ftadd@f2& (0+255),b
  5006  016A8C  0E80               	movlw	128
  5007  016A8E  0100               	movlb	0	; () banked
  5008  016A90  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  5009  016A92  0E47               	movlw	71
  5010  016A94  0100               	movlb	0	; () banked
  5011  016A96  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  5012  016A98  EC69  F0B2         	call	___ftadd	;wreg free
  5013  016A9C  C08D  F5B5         	movff	?___ftadd,_Y_C_Gap
  5014  016AA0  C08E  F5B6         	movff	?___ftadd+1,_Y_C_Gap+1
  5015  016AA4  C08F  F5B7         	movff	?___ftadd+2,_Y_C_Gap+2
  5016                           
  5017                           ;Power_Meter.c: 445: }
  5018  016AA8  D038               	goto	l9239
  5019  016AAA                     l22559:
  5020                           
  5021                           ;Power_Meter.c: 447: else
  5022                           ;Power_Meter.c: 448: {
  5023                           ;Power_Meter.c: 449: Y_C_Gap = (Ycurr_New - Ycurr_V_New);
  5024  016AAA  C0FD  F083         	movff	_Ycurr_V_New,___ftneg@f1
  5025  016AAE  C0FE  F084         	movff	_Ycurr_V_New+1,___ftneg@f1+1
  5026  016AB2  C0FF  F085         	movff	_Ycurr_V_New+2,___ftneg@f1+2
  5027  016AB6  ECBD  F0D6         	call	___ftneg	;wreg free
  5028  016ABA  C083  F08D         	movff	?___ftneg,___ftadd@f1
  5029  016ABE  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  5030  016AC2  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  5031  016AC6  C1A7  F090         	movff	_Ycurr_New,___ftadd@f2
  5032  016ACA  C1A8  F091         	movff	_Ycurr_New+1,___ftadd@f2+1
  5033  016ACE  C1A9  F092         	movff	_Ycurr_New+2,___ftadd@f2+2
  5034  016AD2  EC69  F0B2         	call	___ftadd	;wreg free
  5035  016AD6  C08D  F5B5         	movff	?___ftadd,_Y_C_Gap
  5036  016ADA  C08E  F5B6         	movff	?___ftadd+1,_Y_C_Gap+1
  5037  016ADE  C08F  F5B7         	movff	?___ftadd+2,_Y_C_Gap+2
  5038                           
  5039                           ;Power_Meter.c: 450: Y_V_Gap = (Ycurr_V_New - Ycurr_V_Old);
  5040  016AE2  C278  F083         	movff	_Ycurr_V_Old,___ftneg@f1
  5041  016AE6  C279  F084         	movff	_Ycurr_V_Old+1,___ftneg@f1+1
  5042  016AEA  C27A  F085         	movff	_Ycurr_V_Old+2,___ftneg@f1+2
  5043  016AEE  ECBD  F0D6         	call	___ftneg	;wreg free
  5044  016AF2  C083  F08D         	movff	?___ftneg,___ftadd@f1
  5045  016AF6  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  5046  016AFA  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  5047  016AFE  C0FD  F090         	movff	_Ycurr_V_New,___ftadd@f2
  5048  016B02  C0FE  F091         	movff	_Ycurr_V_New+1,___ftadd@f2+1
  5049  016B06  C0FF  F092         	movff	_Ycurr_V_New+2,___ftadd@f2+2
  5050  016B0A  EC69  F0B2         	call	___ftadd	;wreg free
  5051  016B0E                     L1:
  5052  016B0E  C08D  F5C1         	movff	?___ftadd,_Y_V_Gap
  5053  016B12  C08E  F5C2         	movff	?___ftadd+1,_Y_V_Gap+1
  5054  016B16  C08F  F5C3         	movff	?___ftadd+2,_Y_V_Gap+2
  5055  016B1A                     l9239:
  5056                           
  5057                           ;Power_Meter.c: 451: }
  5058                           ;Power_Meter.c: 453: Y_Gap_Ratio = (Y_C_Gap / Y_V_Gap);
  5059  016B1A  C5B5  F0A5         	movff	_Y_C_Gap,___ftdiv@f1
  5060  016B1E  C5B6  F0A6         	movff	_Y_C_Gap+1,___ftdiv@f1+1
  5061  016B22  C5B7  F0A7         	movff	_Y_C_Gap+2,___ftdiv@f1+2
  5062  016B26  C5C1  F0A8         	movff	_Y_V_Gap,___ftdiv@f2
  5063  016B2A  C5C2  F0A9         	movff	_Y_V_Gap+1,___ftdiv@f2+1
  5064  016B2E  C5C3  F0AA         	movff	_Y_V_Gap+2,___ftdiv@f2+2
  5065  016B32  EC53  F0C1         	call	___ftdiv	;wreg free
  5066  016B36  C0A5  F11B         	movff	?___ftdiv,_Y_Gap_Ratio
  5067  016B3A  C0A6  F11C         	movff	?___ftdiv+1,_Y_Gap_Ratio+1
  5068  016B3E  C0A7  F11D         	movff	?___ftdiv+2,_Y_Gap_Ratio+2
  5069                           
  5070                           ;Power_Meter.c: 454: Y_Deg = Y_Gap_Ratio * 360;
  5071  016B42  C11B  F074         	movff	_Y_Gap_Ratio,___ftmul@f1
  5072  016B46  C11C  F075         	movff	_Y_Gap_Ratio+1,___ftmul@f1+1
  5073  016B4A  C11D  F076         	movff	_Y_Gap_Ratio+2,___ftmul@f1+2
  5074  016B4E  0E00               	movlw	0
  5075  016B50  0100               	movlb	0	; () banked
  5076  016B52  6F77               	movwf	___ftmul@f2& (0+255),b
  5077  016B54  0EB4               	movlw	180
  5078  016B56  0100               	movlb	0	; () banked
  5079  016B58  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5080  016B5A  0E43               	movlw	67
  5081  016B5C  0100               	movlb	0	; () banked
  5082  016B5E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5083  016B60  ECA4  F0C0         	call	___ftmul	;wreg free
  5084  016B64  C074  F66F         	movff	?___ftmul,_Y_Deg
  5085  016B68  C075  F670         	movff	?___ftmul+1,_Y_Deg+1
  5086  016B6C  C076  F671         	movff	?___ftmul+2,_Y_Deg+2
  5087                           
  5088                           ;Power_Meter.c: 456: YGR_Arr_1[4] = YGR_Arr_1[3];
  5089  016B70  C3DE  F3E1         	movff	_YGR_Arr_1+9,_YGR_Arr_1+12
  5090  016B74  C3DF  F3E2         	movff	_YGR_Arr_1+10,_YGR_Arr_1+13
  5091  016B78  C3E0  F3E3         	movff	_YGR_Arr_1+11,_YGR_Arr_1+14
  5092                           
  5093                           ;Power_Meter.c: 457: YGR_Arr_1[3] = YGR_Arr_1[2];
  5094  016B7C  C3DB  F3DE         	movff	_YGR_Arr_1+6,_YGR_Arr_1+9
  5095  016B80  C3DC  F3DF         	movff	_YGR_Arr_1+7,_YGR_Arr_1+10
  5096  016B84  C3DD  F3E0         	movff	_YGR_Arr_1+8,_YGR_Arr_1+11
  5097                           
  5098                           ;Power_Meter.c: 458: YGR_Arr_1[2] = YGR_Arr_1[1];
  5099  016B88  C3D8  F3DB         	movff	_YGR_Arr_1+3,_YGR_Arr_1+6
  5100  016B8C  C3D9  F3DC         	movff	_YGR_Arr_1+4,_YGR_Arr_1+7
  5101  016B90  C3DA  F3DD         	movff	_YGR_Arr_1+5,_YGR_Arr_1+8
  5102                           
  5103                           ;Power_Meter.c: 459: YGR_Arr_1[1] = YGR_Arr_1[0];
  5104  016B94  C3D5  F3D8         	movff	_YGR_Arr_1,_YGR_Arr_1+3
  5105  016B98  C3D6  F3D9         	movff	_YGR_Arr_1+1,_YGR_Arr_1+4
  5106  016B9C  C3D7  F3DA         	movff	_YGR_Arr_1+2,_YGR_Arr_1+5
  5107                           
  5108                           ;Power_Meter.c: 460: YGR_Arr_1[0] = Y_Gap_Ratio;
  5109  016BA0  C11B  F3D5         	movff	_Y_Gap_Ratio,_YGR_Arr_1
  5110  016BA4  C11C  F3D6         	movff	_Y_Gap_Ratio+1,_YGR_Arr_1+1
  5111  016BA8  C11D  F3D7         	movff	_Y_Gap_Ratio+2,_YGR_Arr_1+2
  5112  016BAC  0012               	return		;funcret
  5113  016BAE                     __end_of_Y_PF_Calc:
  5114                           	opt stack 0
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           intcon	equ	0xFF2
  5120                           postinc0	equ	0xFEE
  5121                           wreg	equ	0xFE8
  5122                           postdec1	equ	0xFE5
  5123                           fsr1h	equ	0xFE2
  5124                           fsr1l	equ	0xFE1
  5125                           status	equ	0xFD8
  5126                           
  5127 ;; *************** function _Y_PF_Avg *****************
  5128 ;; Defined at:
  5129 ;;		line 464 in file "Power_Meter.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;      Locals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5146 ;;      Totals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
  5147 ;;Total ram usage:       84 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    8
  5150 ;; This function calls:
  5151 ;;		___ftadd
  5152 ;;		___ftdiv
  5153 ;;		___ftge
  5154 ;;		___ftmul
  5155 ;;		_cos
  5156 ;; This function is called by:
  5157 ;;		_main
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text4
  5162  0119BE                     __ptext4:
  5163                           	opt stack 0
  5164  0119BE                     _Y_PF_Avg:
  5165                           	opt stack 22
  5166                           
  5167                           ;Power_Meter.c: 466: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5168                           
  5169                           ;incstack = 0
  5170  0119BE  C3DE  F090         	movff	_YGR_Arr_1+9,___ftadd@f2
  5171  0119C2  C3DF  F091         	movff	_YGR_Arr_1+10,___ftadd@f2+1
  5172  0119C6  C3E0  F092         	movff	_YGR_Arr_1+11,___ftadd@f2+2
  5173  0119CA  C3E1  F08D         	movff	_YGR_Arr_1+12,___ftadd@f1
  5174  0119CE  C3E2  F08E         	movff	_YGR_Arr_1+13,___ftadd@f1+1
  5175  0119D2  C3E3  F08F         	movff	_YGR_Arr_1+14,___ftadd@f1+2
  5176  0119D6  EC69  F0B2         	call	___ftadd	;wreg free
  5177  0119DA  C08D  F6C0         	movff	?___ftadd,_Y_PF_Avg$8087
  5178  0119DE  C08E  F6C1         	movff	?___ftadd+1,_Y_PF_Avg$8087+1
  5179  0119E2  C08F  F6C2         	movff	?___ftadd+2,_Y_PF_Avg$8087+2
  5180                           
  5181                           ;Power_Meter.c: 466: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5182  0119E6  C3DB  F090         	movff	_YGR_Arr_1+6,___ftadd@f2
  5183  0119EA  C3DC  F091         	movff	_YGR_Arr_1+7,___ftadd@f2+1
  5184  0119EE  C3DD  F092         	movff	_YGR_Arr_1+8,___ftadd@f2+2
  5185  0119F2  C6C0  F08D         	movff	_Y_PF_Avg$8087,___ftadd@f1
  5186  0119F6  C6C1  F08E         	movff	_Y_PF_Avg$8087+1,___ftadd@f1+1
  5187  0119FA  C6C2  F08F         	movff	_Y_PF_Avg$8087+2,___ftadd@f1+2
  5188  0119FE  EC69  F0B2         	call	___ftadd	;wreg free
  5189  011A02  C08D  F6C3         	movff	?___ftadd,_Y_PF_Avg$8088
  5190  011A06  C08E  F6C4         	movff	?___ftadd+1,_Y_PF_Avg$8088+1
  5191  011A0A  C08F  F6C5         	movff	?___ftadd+2,_Y_PF_Avg$8088+2
  5192                           
  5193                           ;Power_Meter.c: 466: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5194  011A0E  C3D8  F090         	movff	_YGR_Arr_1+3,___ftadd@f2
  5195  011A12  C3D9  F091         	movff	_YGR_Arr_1+4,___ftadd@f2+1
  5196  011A16  C3DA  F092         	movff	_YGR_Arr_1+5,___ftadd@f2+2
  5197  011A1A  C6C3  F08D         	movff	_Y_PF_Avg$8088,___ftadd@f1
  5198  011A1E  C6C4  F08E         	movff	_Y_PF_Avg$8088+1,___ftadd@f1+1
  5199  011A22  C6C5  F08F         	movff	_Y_PF_Avg$8088+2,___ftadd@f1+2
  5200  011A26  EC69  F0B2         	call	___ftadd	;wreg free
  5201  011A2A  C08D  F6C6         	movff	?___ftadd,_Y_PF_Avg$8089
  5202  011A2E  C08E  F6C7         	movff	?___ftadd+1,_Y_PF_Avg$8089+1
  5203  011A32  C08F  F6C8         	movff	?___ftadd+2,_Y_PF_Avg$8089+2
  5204                           
  5205                           ;Power_Meter.c: 466: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5206  011A36  C3D5  F090         	movff	_YGR_Arr_1,___ftadd@f2
  5207  011A3A  C3D6  F091         	movff	_YGR_Arr_1+1,___ftadd@f2+1
  5208  011A3E  C3D7  F092         	movff	_YGR_Arr_1+2,___ftadd@f2+2
  5209  011A42  C6C6  F08D         	movff	_Y_PF_Avg$8089,___ftadd@f1
  5210  011A46  C6C7  F08E         	movff	_Y_PF_Avg$8089+1,___ftadd@f1+1
  5211  011A4A  C6C8  F08F         	movff	_Y_PF_Avg$8089+2,___ftadd@f1+2
  5212  011A4E  EC69  F0B2         	call	___ftadd	;wreg free
  5213  011A52  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  5214  011A56  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  5215  011A5A  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  5216  011A5E  0E00               	movlw	0
  5217  011A60  0100               	movlb	0	; () banked
  5218  011A62  6FA8               	movwf	___ftdiv@f2& (0+255),b
  5219  011A64  0EA0               	movlw	160
  5220  011A66  0100               	movlb	0	; () banked
  5221  011A68  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  5222  011A6A  0E40               	movlw	64
  5223  011A6C  0100               	movlb	0	; () banked
  5224  011A6E  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  5225  011A70  EC53  F0C1         	call	___ftdiv	;wreg free
  5226  011A74  C0A5  F26C         	movff	?___ftdiv,_YGR_Avg_1
  5227  011A78  C0A6  F26D         	movff	?___ftdiv+1,_YGR_Avg_1+1
  5228  011A7C  C0A7  F26E         	movff	?___ftdiv+2,_YGR_Avg_1+2
  5229                           
  5230                           ;Power_Meter.c: 469: YGR_Arr[29] = YGR_Arr[28];
  5231  011A80  C3AE  F3B1         	movff	_YGR_Arr+84,_YGR_Arr+87
  5232  011A84  C3AF  F3B2         	movff	_YGR_Arr+85,_YGR_Arr+88
  5233  011A88  C3B0  F3B3         	movff	_YGR_Arr+86,_YGR_Arr+89
  5234                           
  5235                           ;Power_Meter.c: 470: YGR_Arr[28] = YGR_Arr[27];
  5236  011A8C  C3AB  F3AE         	movff	_YGR_Arr+81,_YGR_Arr+84
  5237  011A90  C3AC  F3AF         	movff	_YGR_Arr+82,_YGR_Arr+85
  5238  011A94  C3AD  F3B0         	movff	_YGR_Arr+83,_YGR_Arr+86
  5239                           
  5240                           ;Power_Meter.c: 471: YGR_Arr[27] = YGR_Arr[26];
  5241  011A98  C3A8  F3AB         	movff	_YGR_Arr+78,_YGR_Arr+81
  5242  011A9C  C3A9  F3AC         	movff	_YGR_Arr+79,_YGR_Arr+82
  5243  011AA0  C3AA  F3AD         	movff	_YGR_Arr+80,_YGR_Arr+83
  5244                           
  5245                           ;Power_Meter.c: 472: YGR_Arr[26] = YGR_Arr[25];
  5246  011AA4  C3A5  F3A8         	movff	_YGR_Arr+75,_YGR_Arr+78
  5247  011AA8  C3A6  F3A9         	movff	_YGR_Arr+76,_YGR_Arr+79
  5248  011AAC  C3A7  F3AA         	movff	_YGR_Arr+77,_YGR_Arr+80
  5249                           
  5250                           ;Power_Meter.c: 473: YGR_Arr[25] = YGR_Arr[24];
  5251  011AB0  C3A2  F3A5         	movff	_YGR_Arr+72,_YGR_Arr+75
  5252  011AB4  C3A3  F3A6         	movff	_YGR_Arr+73,_YGR_Arr+76
  5253  011AB8  C3A4  F3A7         	movff	_YGR_Arr+74,_YGR_Arr+77
  5254                           
  5255                           ;Power_Meter.c: 474: YGR_Arr[24] = YGR_Arr[23];
  5256  011ABC  C39F  F3A2         	movff	_YGR_Arr+69,_YGR_Arr+72
  5257  011AC0  C3A0  F3A3         	movff	_YGR_Arr+70,_YGR_Arr+73
  5258  011AC4  C3A1  F3A4         	movff	_YGR_Arr+71,_YGR_Arr+74
  5259                           
  5260                           ;Power_Meter.c: 475: YGR_Arr[23] = YGR_Arr[22];
  5261  011AC8  C39C  F39F         	movff	_YGR_Arr+66,_YGR_Arr+69
  5262  011ACC  C39D  F3A0         	movff	_YGR_Arr+67,_YGR_Arr+70
  5263  011AD0  C39E  F3A1         	movff	_YGR_Arr+68,_YGR_Arr+71
  5264                           
  5265                           ;Power_Meter.c: 476: YGR_Arr[22] = YGR_Arr[21];
  5266  011AD4  C399  F39C         	movff	_YGR_Arr+63,_YGR_Arr+66
  5267  011AD8  C39A  F39D         	movff	_YGR_Arr+64,_YGR_Arr+67
  5268  011ADC  C39B  F39E         	movff	_YGR_Arr+65,_YGR_Arr+68
  5269                           
  5270                           ;Power_Meter.c: 477: YGR_Arr[21] = YGR_Arr[20];
  5271  011AE0  C396  F399         	movff	_YGR_Arr+60,_YGR_Arr+63
  5272  011AE4  C397  F39A         	movff	_YGR_Arr+61,_YGR_Arr+64
  5273  011AE8  C398  F39B         	movff	_YGR_Arr+62,_YGR_Arr+65
  5274                           
  5275                           ;Power_Meter.c: 478: YGR_Arr[20] = YGR_Arr[19];
  5276  011AEC  C393  F396         	movff	_YGR_Arr+57,_YGR_Arr+60
  5277  011AF0  C394  F397         	movff	_YGR_Arr+58,_YGR_Arr+61
  5278  011AF4  C395  F398         	movff	_YGR_Arr+59,_YGR_Arr+62
  5279                           
  5280                           ;Power_Meter.c: 479: YGR_Arr[19] = YGR_Arr[18];
  5281  011AF8  C390  F393         	movff	_YGR_Arr+54,_YGR_Arr+57
  5282  011AFC  C391  F394         	movff	_YGR_Arr+55,_YGR_Arr+58
  5283  011B00  C392  F395         	movff	_YGR_Arr+56,_YGR_Arr+59
  5284                           
  5285                           ;Power_Meter.c: 480: YGR_Arr[18] = YGR_Arr[17];
  5286  011B04  C38D  F390         	movff	_YGR_Arr+51,_YGR_Arr+54
  5287  011B08  C38E  F391         	movff	_YGR_Arr+52,_YGR_Arr+55
  5288  011B0C  C38F  F392         	movff	_YGR_Arr+53,_YGR_Arr+56
  5289                           
  5290                           ;Power_Meter.c: 481: YGR_Arr[17] = YGR_Arr[16];
  5291  011B10  C38A  F38D         	movff	_YGR_Arr+48,_YGR_Arr+51
  5292  011B14  C38B  F38E         	movff	_YGR_Arr+49,_YGR_Arr+52
  5293  011B18  C38C  F38F         	movff	_YGR_Arr+50,_YGR_Arr+53
  5294                           
  5295                           ;Power_Meter.c: 482: YGR_Arr[16] = YGR_Arr[15];
  5296  011B1C  C387  F38A         	movff	_YGR_Arr+45,_YGR_Arr+48
  5297  011B20  C388  F38B         	movff	_YGR_Arr+46,_YGR_Arr+49
  5298  011B24  C389  F38C         	movff	_YGR_Arr+47,_YGR_Arr+50
  5299                           
  5300                           ;Power_Meter.c: 483: YGR_Arr[15] = YGR_Arr[14];
  5301  011B28  C384  F387         	movff	_YGR_Arr+42,_YGR_Arr+45
  5302  011B2C  C385  F388         	movff	_YGR_Arr+43,_YGR_Arr+46
  5303  011B30  C386  F389         	movff	_YGR_Arr+44,_YGR_Arr+47
  5304                           
  5305                           ;Power_Meter.c: 484: YGR_Arr[14] = YGR_Arr[13];
  5306  011B34  C381  F384         	movff	_YGR_Arr+39,_YGR_Arr+42
  5307  011B38  C382  F385         	movff	_YGR_Arr+40,_YGR_Arr+43
  5308  011B3C  C383  F386         	movff	_YGR_Arr+41,_YGR_Arr+44
  5309                           
  5310                           ;Power_Meter.c: 485: YGR_Arr[13] = YGR_Arr[12];
  5311  011B40  C37E  F381         	movff	_YGR_Arr+36,_YGR_Arr+39
  5312  011B44  C37F  F382         	movff	_YGR_Arr+37,_YGR_Arr+40
  5313  011B48  C380  F383         	movff	_YGR_Arr+38,_YGR_Arr+41
  5314                           
  5315                           ;Power_Meter.c: 486: YGR_Arr[12] = YGR_Arr[11];
  5316  011B4C  C37B  F37E         	movff	_YGR_Arr+33,_YGR_Arr+36
  5317  011B50  C37C  F37F         	movff	_YGR_Arr+34,_YGR_Arr+37
  5318  011B54  C37D  F380         	movff	_YGR_Arr+35,_YGR_Arr+38
  5319                           
  5320                           ;Power_Meter.c: 487: YGR_Arr[11] = YGR_Arr[10];
  5321  011B58  C378  F37B         	movff	_YGR_Arr+30,_YGR_Arr+33
  5322  011B5C  C379  F37C         	movff	_YGR_Arr+31,_YGR_Arr+34
  5323  011B60  C37A  F37D         	movff	_YGR_Arr+32,_YGR_Arr+35
  5324                           
  5325                           ;Power_Meter.c: 488: YGR_Arr[10] = YGR_Arr[9];
  5326  011B64  C375  F378         	movff	_YGR_Arr+27,_YGR_Arr+30
  5327  011B68  C376  F379         	movff	_YGR_Arr+28,_YGR_Arr+31
  5328  011B6C  C377  F37A         	movff	_YGR_Arr+29,_YGR_Arr+32
  5329                           
  5330                           ;Power_Meter.c: 489: YGR_Arr[9] = YGR_Arr[8];
  5331  011B70  C372  F375         	movff	_YGR_Arr+24,_YGR_Arr+27
  5332  011B74  C373  F376         	movff	_YGR_Arr+25,_YGR_Arr+28
  5333  011B78  C374  F377         	movff	_YGR_Arr+26,_YGR_Arr+29
  5334                           
  5335                           ;Power_Meter.c: 490: YGR_Arr[8] = YGR_Arr[7];
  5336  011B7C  C36F  F372         	movff	_YGR_Arr+21,_YGR_Arr+24
  5337  011B80  C370  F373         	movff	_YGR_Arr+22,_YGR_Arr+25
  5338  011B84  C371  F374         	movff	_YGR_Arr+23,_YGR_Arr+26
  5339                           
  5340                           ;Power_Meter.c: 491: YGR_Arr[7] = YGR_Arr[6];
  5341  011B88  C36C  F36F         	movff	_YGR_Arr+18,_YGR_Arr+21
  5342  011B8C  C36D  F370         	movff	_YGR_Arr+19,_YGR_Arr+22
  5343  011B90  C36E  F371         	movff	_YGR_Arr+20,_YGR_Arr+23
  5344                           
  5345                           ;Power_Meter.c: 492: YGR_Arr[6] = YGR_Arr[5];
  5346  011B94  C369  F36C         	movff	_YGR_Arr+15,_YGR_Arr+18
  5347  011B98  C36A  F36D         	movff	_YGR_Arr+16,_YGR_Arr+19
  5348  011B9C  C36B  F36E         	movff	_YGR_Arr+17,_YGR_Arr+20
  5349                           
  5350                           ;Power_Meter.c: 493: YGR_Arr[5] = YGR_Arr[4];
  5351  011BA0  C366  F369         	movff	_YGR_Arr+12,_YGR_Arr+15
  5352  011BA4  C367  F36A         	movff	_YGR_Arr+13,_YGR_Arr+16
  5353  011BA8  C368  F36B         	movff	_YGR_Arr+14,_YGR_Arr+17
  5354                           
  5355                           ;Power_Meter.c: 494: YGR_Arr[4] = YGR_Arr[3];
  5356  011BAC  C363  F366         	movff	_YGR_Arr+9,_YGR_Arr+12
  5357  011BB0  C364  F367         	movff	_YGR_Arr+10,_YGR_Arr+13
  5358  011BB4  C365  F368         	movff	_YGR_Arr+11,_YGR_Arr+14
  5359                           
  5360                           ;Power_Meter.c: 495: YGR_Arr[3] = YGR_Arr[2];
  5361  011BB8  C360  F363         	movff	_YGR_Arr+6,_YGR_Arr+9
  5362  011BBC  C361  F364         	movff	_YGR_Arr+7,_YGR_Arr+10
  5363  011BC0  C362  F365         	movff	_YGR_Arr+8,_YGR_Arr+11
  5364                           
  5365                           ;Power_Meter.c: 496: YGR_Arr[2] = YGR_Arr[1];
  5366  011BC4  C35D  F360         	movff	_YGR_Arr+3,_YGR_Arr+6
  5367  011BC8  C35E  F361         	movff	_YGR_Arr+4,_YGR_Arr+7
  5368  011BCC  C35F  F362         	movff	_YGR_Arr+5,_YGR_Arr+8
  5369                           
  5370                           ;Power_Meter.c: 497: YGR_Arr[1] = YGR_Arr[0];
  5371  011BD0  C35A  F35D         	movff	_YGR_Arr,_YGR_Arr+3
  5372  011BD4  C35B  F35E         	movff	_YGR_Arr+1,_YGR_Arr+4
  5373  011BD8  C35C  F35F         	movff	_YGR_Arr+2,_YGR_Arr+5
  5374                           
  5375                           ;Power_Meter.c: 500: if( (YGR_Avg_1 > (Y_Gap_Ratio * 0.8)) && (YGR_Avg_1 < (Y_Gap_Ratio 
      +                          * 1.2)) )
  5376  011BDC  0ECD               	movlw	205
  5377  011BDE  0100               	movlb	0	; () banked
  5378  011BE0  6F77               	movwf	___ftmul@f2& (0+255),b
  5379  011BE2  0E4C               	movlw	76
  5380  011BE4  0100               	movlb	0	; () banked
  5381  011BE6  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5382  011BE8  0E3F               	movlw	63
  5383  011BEA  0100               	movlb	0	; () banked
  5384  011BEC  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5385  011BEE  C11B  F074         	movff	_Y_Gap_Ratio,___ftmul@f1
  5386  011BF2  C11C  F075         	movff	_Y_Gap_Ratio+1,___ftmul@f1+1
  5387  011BF6  C11D  F076         	movff	_Y_Gap_Ratio+2,___ftmul@f1+2
  5388  011BFA  ECA4  F0C0         	call	___ftmul	;wreg free
  5389  011BFE  C074  F099         	movff	?___ftmul,___ftge@ff1
  5390  011C02  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
  5391  011C06  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
  5392  011C0A  C26C  F09C         	movff	_YGR_Avg_1,___ftge@ff2
  5393  011C0E  C26D  F09D         	movff	_YGR_Avg_1+1,___ftge@ff2+1
  5394  011C12  C26E  F09E         	movff	_YGR_Avg_1+2,___ftge@ff2+2
  5395  011C16  ECEB  F0CA         	call	___ftge	;wreg free
  5396  011C1A  0100               	movlb	0	; () banked
  5397  011C1C  B0D8               	btfsc	status,0,c
  5398  011C1E  D028               	goto	l22635
  5399                           
  5400                           ; BSR set to: 0
  5401  011C20  C26C  F099         	movff	_YGR_Avg_1,___ftge@ff1
  5402  011C24  C26D  F09A         	movff	_YGR_Avg_1+1,___ftge@ff1+1
  5403  011C28  C26E  F09B         	movff	_YGR_Avg_1+2,___ftge@ff1+2
  5404  011C2C  0E9A               	movlw	154
  5405  011C2E  0100               	movlb	0	; () banked
  5406  011C30  6F77               	movwf	___ftmul@f2& (0+255),b
  5407  011C32  0E99               	movlw	153
  5408  011C34  0100               	movlb	0	; () banked
  5409  011C36  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5410  011C38  0E3F               	movlw	63
  5411  011C3A  0100               	movlb	0	; () banked
  5412  011C3C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5413  011C3E  C11B  F074         	movff	_Y_Gap_Ratio,___ftmul@f1
  5414  011C42  C11C  F075         	movff	_Y_Gap_Ratio+1,___ftmul@f1+1
  5415  011C46  C11D  F076         	movff	_Y_Gap_Ratio+2,___ftmul@f1+2
  5416  011C4A  ECA4  F0C0         	call	___ftmul	;wreg free
  5417  011C4E  C074  F09C         	movff	?___ftmul,___ftge@ff2
  5418  011C52  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
  5419  011C56  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
  5420  011C5A  ECEB  F0CA         	call	___ftge	;wreg free
  5421  011C5E  0100               	movlb	0	; () banked
  5422  011C60  B0D8               	btfsc	status,0,c
  5423  011C62  D006               	goto	l22635
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;Power_Meter.c: 501: {
  5427                           ;Power_Meter.c: 502: YGR_Arr[0] = Y_Gap_Ratio;
  5428  011C64  C11B  F35A         	movff	_Y_Gap_Ratio,_YGR_Arr
  5429  011C68  C11C  F35B         	movff	_Y_Gap_Ratio+1,_YGR_Arr+1
  5430  011C6C  C11D  F35C         	movff	_Y_Gap_Ratio+2,_YGR_Arr+2
  5431  011C70                     l22635:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;Power_Meter.c: 503: }
  5435                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5436                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5437                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5438                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5439  011C70  C3AE  F090         	movff	_YGR_Arr+84,___ftadd@f2
  5440  011C74  C3AF  F091         	movff	_YGR_Arr+85,___ftadd@f2+1
  5441  011C78  C3B0  F092         	movff	_YGR_Arr+86,___ftadd@f2+2
  5442  011C7C  C3B1  F08D         	movff	_YGR_Arr+87,___ftadd@f1
  5443  011C80  C3B2  F08E         	movff	_YGR_Arr+88,___ftadd@f1+1
  5444  011C84  C3B3  F08F         	movff	_YGR_Arr+89,___ftadd@f1+2
  5445  011C88  EC69  F0B2         	call	___ftadd	;wreg free
  5446  011C8C  C08D  F6C0         	movff	?___ftadd,_Y_PF_Avg$8087
  5447  011C90  C08E  F6C1         	movff	?___ftadd+1,_Y_PF_Avg$8087+1
  5448  011C94  C08F  F6C2         	movff	?___ftadd+2,_Y_PF_Avg$8087+2
  5449                           
  5450                           ;Power_Meter.c: 503: }
  5451                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5452                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5453                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5454                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5455  011C98  C3AB  F090         	movff	_YGR_Arr+81,___ftadd@f2
  5456  011C9C  C3AC  F091         	movff	_YGR_Arr+82,___ftadd@f2+1
  5457  011CA0  C3AD  F092         	movff	_YGR_Arr+83,___ftadd@f2+2
  5458  011CA4  C6C0  F08D         	movff	_Y_PF_Avg$8087,___ftadd@f1
  5459  011CA8  C6C1  F08E         	movff	_Y_PF_Avg$8087+1,___ftadd@f1+1
  5460  011CAC  C6C2  F08F         	movff	_Y_PF_Avg$8087+2,___ftadd@f1+2
  5461  011CB0  EC69  F0B2         	call	___ftadd	;wreg free
  5462  011CB4  C08D  F6C3         	movff	?___ftadd,_Y_PF_Avg$8088
  5463  011CB8  C08E  F6C4         	movff	?___ftadd+1,_Y_PF_Avg$8088+1
  5464  011CBC  C08F  F6C5         	movff	?___ftadd+2,_Y_PF_Avg$8088+2
  5465                           
  5466                           ;Power_Meter.c: 503: }
  5467                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5468                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5469                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5470                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5471  011CC0  C3A8  F090         	movff	_YGR_Arr+78,___ftadd@f2
  5472  011CC4  C3A9  F091         	movff	_YGR_Arr+79,___ftadd@f2+1
  5473  011CC8  C3AA  F092         	movff	_YGR_Arr+80,___ftadd@f2+2
  5474  011CCC  C6C3  F08D         	movff	_Y_PF_Avg$8088,___ftadd@f1
  5475  011CD0  C6C4  F08E         	movff	_Y_PF_Avg$8088+1,___ftadd@f1+1
  5476  011CD4  C6C5  F08F         	movff	_Y_PF_Avg$8088+2,___ftadd@f1+2
  5477  011CD8  EC69  F0B2         	call	___ftadd	;wreg free
  5478  011CDC  C08D  F6C6         	movff	?___ftadd,_Y_PF_Avg$8089
  5479  011CE0  C08E  F6C7         	movff	?___ftadd+1,_Y_PF_Avg$8089+1
  5480  011CE4  C08F  F6C8         	movff	?___ftadd+2,_Y_PF_Avg$8089+2
  5481                           
  5482                           ;Power_Meter.c: 503: }
  5483                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5484                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5485                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5486                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5487  011CE8  C3A5  F090         	movff	_YGR_Arr+75,___ftadd@f2
  5488  011CEC  C3A6  F091         	movff	_YGR_Arr+76,___ftadd@f2+1
  5489  011CF0  C3A7  F092         	movff	_YGR_Arr+77,___ftadd@f2+2
  5490  011CF4  C6C6  F08D         	movff	_Y_PF_Avg$8089,___ftadd@f1
  5491  011CF8  C6C7  F08E         	movff	_Y_PF_Avg$8089+1,___ftadd@f1+1
  5492  011CFC  C6C8  F08F         	movff	_Y_PF_Avg$8089+2,___ftadd@f1+2
  5493  011D00  EC69  F0B2         	call	___ftadd	;wreg free
  5494  011D04  C08D  F675         	movff	?___ftadd,_Y_PF_Avg$8090
  5495  011D08  C08E  F676         	movff	?___ftadd+1,_Y_PF_Avg$8090+1
  5496  011D0C  C08F  F677         	movff	?___ftadd+2,_Y_PF_Avg$8090+2
  5497                           
  5498                           ;Power_Meter.c: 503: }
  5499                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5500                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5501                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5502                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5503  011D10  C3A2  F090         	movff	_YGR_Arr+72,___ftadd@f2
  5504  011D14  C3A3  F091         	movff	_YGR_Arr+73,___ftadd@f2+1
  5505  011D18  C3A4  F092         	movff	_YGR_Arr+74,___ftadd@f2+2
  5506  011D1C  C675  F08D         	movff	_Y_PF_Avg$8090,___ftadd@f1
  5507  011D20  C676  F08E         	movff	_Y_PF_Avg$8090+1,___ftadd@f1+1
  5508  011D24  C677  F08F         	movff	_Y_PF_Avg$8090+2,___ftadd@f1+2
  5509  011D28  EC69  F0B2         	call	___ftadd	;wreg free
  5510  011D2C  C08D  F678         	movff	?___ftadd,_Y_PF_Avg$8091
  5511  011D30  C08E  F679         	movff	?___ftadd+1,_Y_PF_Avg$8091+1
  5512  011D34  C08F  F67A         	movff	?___ftadd+2,_Y_PF_Avg$8091+2
  5513                           
  5514                           ;Power_Meter.c: 503: }
  5515                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5516                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5517                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5518                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5519  011D38  C39F  F090         	movff	_YGR_Arr+69,___ftadd@f2
  5520  011D3C  C3A0  F091         	movff	_YGR_Arr+70,___ftadd@f2+1
  5521  011D40  C3A1  F092         	movff	_YGR_Arr+71,___ftadd@f2+2
  5522  011D44  C678  F08D         	movff	_Y_PF_Avg$8091,___ftadd@f1
  5523  011D48  C679  F08E         	movff	_Y_PF_Avg$8091+1,___ftadd@f1+1
  5524  011D4C  C67A  F08F         	movff	_Y_PF_Avg$8091+2,___ftadd@f1+2
  5525  011D50  EC69  F0B2         	call	___ftadd	;wreg free
  5526  011D54  C08D  F67B         	movff	?___ftadd,_Y_PF_Avg$8092
  5527  011D58  C08E  F67C         	movff	?___ftadd+1,_Y_PF_Avg$8092+1
  5528  011D5C  C08F  F67D         	movff	?___ftadd+2,_Y_PF_Avg$8092+2
  5529                           
  5530                           ;Power_Meter.c: 503: }
  5531                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5532                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5533                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5534                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5535  011D60  C39C  F090         	movff	_YGR_Arr+66,___ftadd@f2
  5536  011D64  C39D  F091         	movff	_YGR_Arr+67,___ftadd@f2+1
  5537  011D68  C39E  F092         	movff	_YGR_Arr+68,___ftadd@f2+2
  5538  011D6C  C67B  F08D         	movff	_Y_PF_Avg$8092,___ftadd@f1
  5539  011D70  C67C  F08E         	movff	_Y_PF_Avg$8092+1,___ftadd@f1+1
  5540  011D74  C67D  F08F         	movff	_Y_PF_Avg$8092+2,___ftadd@f1+2
  5541  011D78  EC69  F0B2         	call	___ftadd	;wreg free
  5542  011D7C  C08D  F67E         	movff	?___ftadd,_Y_PF_Avg$8093
  5543  011D80  C08E  F67F         	movff	?___ftadd+1,_Y_PF_Avg$8093+1
  5544  011D84  C08F  F680         	movff	?___ftadd+2,_Y_PF_Avg$8093+2
  5545                           
  5546                           ;Power_Meter.c: 503: }
  5547                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5548                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5549                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5550                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5551  011D88  C399  F090         	movff	_YGR_Arr+63,___ftadd@f2
  5552  011D8C  C39A  F091         	movff	_YGR_Arr+64,___ftadd@f2+1
  5553  011D90  C39B  F092         	movff	_YGR_Arr+65,___ftadd@f2+2
  5554  011D94  C67E  F08D         	movff	_Y_PF_Avg$8093,___ftadd@f1
  5555  011D98  C67F  F08E         	movff	_Y_PF_Avg$8093+1,___ftadd@f1+1
  5556  011D9C  C680  F08F         	movff	_Y_PF_Avg$8093+2,___ftadd@f1+2
  5557  011DA0  EC69  F0B2         	call	___ftadd	;wreg free
  5558  011DA4  C08D  F681         	movff	?___ftadd,_Y_PF_Avg$8094
  5559  011DA8  C08E  F682         	movff	?___ftadd+1,_Y_PF_Avg$8094+1
  5560  011DAC  C08F  F683         	movff	?___ftadd+2,_Y_PF_Avg$8094+2
  5561                           
  5562                           ;Power_Meter.c: 503: }
  5563                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5564                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5565                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5566                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5567  011DB0  C396  F090         	movff	_YGR_Arr+60,___ftadd@f2
  5568  011DB4  C397  F091         	movff	_YGR_Arr+61,___ftadd@f2+1
  5569  011DB8  C398  F092         	movff	_YGR_Arr+62,___ftadd@f2+2
  5570  011DBC  C681  F08D         	movff	_Y_PF_Avg$8094,___ftadd@f1
  5571  011DC0  C682  F08E         	movff	_Y_PF_Avg$8094+1,___ftadd@f1+1
  5572  011DC4  C683  F08F         	movff	_Y_PF_Avg$8094+2,___ftadd@f1+2
  5573  011DC8  EC69  F0B2         	call	___ftadd	;wreg free
  5574  011DCC  C08D  F684         	movff	?___ftadd,_Y_PF_Avg$8095
  5575  011DD0  C08E  F685         	movff	?___ftadd+1,_Y_PF_Avg$8095+1
  5576  011DD4  C08F  F686         	movff	?___ftadd+2,_Y_PF_Avg$8095+2
  5577                           
  5578                           ;Power_Meter.c: 503: }
  5579                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5580                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5581                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5582                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5583  011DD8  C393  F090         	movff	_YGR_Arr+57,___ftadd@f2
  5584  011DDC  C394  F091         	movff	_YGR_Arr+58,___ftadd@f2+1
  5585  011DE0  C395  F092         	movff	_YGR_Arr+59,___ftadd@f2+2
  5586  011DE4  C684  F08D         	movff	_Y_PF_Avg$8095,___ftadd@f1
  5587  011DE8  C685  F08E         	movff	_Y_PF_Avg$8095+1,___ftadd@f1+1
  5588  011DEC  C686  F08F         	movff	_Y_PF_Avg$8095+2,___ftadd@f1+2
  5589  011DF0  EC69  F0B2         	call	___ftadd	;wreg free
  5590  011DF4  C08D  F687         	movff	?___ftadd,_Y_PF_Avg$8096
  5591  011DF8  C08E  F688         	movff	?___ftadd+1,_Y_PF_Avg$8096+1
  5592  011DFC  C08F  F689         	movff	?___ftadd+2,_Y_PF_Avg$8096+2
  5593                           
  5594                           ;Power_Meter.c: 503: }
  5595                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5596                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5597                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5598                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5599  011E00  C390  F090         	movff	_YGR_Arr+54,___ftadd@f2
  5600  011E04  C391  F091         	movff	_YGR_Arr+55,___ftadd@f2+1
  5601  011E08  C392  F092         	movff	_YGR_Arr+56,___ftadd@f2+2
  5602  011E0C  C687  F08D         	movff	_Y_PF_Avg$8096,___ftadd@f1
  5603  011E10  C688  F08E         	movff	_Y_PF_Avg$8096+1,___ftadd@f1+1
  5604  011E14  C689  F08F         	movff	_Y_PF_Avg$8096+2,___ftadd@f1+2
  5605  011E18  EC69  F0B2         	call	___ftadd	;wreg free
  5606  011E1C  C08D  F68A         	movff	?___ftadd,_Y_PF_Avg$8097
  5607  011E20  C08E  F68B         	movff	?___ftadd+1,_Y_PF_Avg$8097+1
  5608  011E24  C08F  F68C         	movff	?___ftadd+2,_Y_PF_Avg$8097+2
  5609                           
  5610                           ;Power_Meter.c: 503: }
  5611                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5612                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5613                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5614                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5615  011E28  C38D  F090         	movff	_YGR_Arr+51,___ftadd@f2
  5616  011E2C  C38E  F091         	movff	_YGR_Arr+52,___ftadd@f2+1
  5617  011E30  C38F  F092         	movff	_YGR_Arr+53,___ftadd@f2+2
  5618  011E34  C68A  F08D         	movff	_Y_PF_Avg$8097,___ftadd@f1
  5619  011E38  C68B  F08E         	movff	_Y_PF_Avg$8097+1,___ftadd@f1+1
  5620  011E3C  C68C  F08F         	movff	_Y_PF_Avg$8097+2,___ftadd@f1+2
  5621  011E40  EC69  F0B2         	call	___ftadd	;wreg free
  5622  011E44  C08D  F68D         	movff	?___ftadd,_Y_PF_Avg$8098
  5623  011E48  C08E  F68E         	movff	?___ftadd+1,_Y_PF_Avg$8098+1
  5624  011E4C  C08F  F68F         	movff	?___ftadd+2,_Y_PF_Avg$8098+2
  5625                           
  5626                           ;Power_Meter.c: 503: }
  5627                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5628                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5629                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5630                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5631  011E50  C38A  F090         	movff	_YGR_Arr+48,___ftadd@f2
  5632  011E54  C38B  F091         	movff	_YGR_Arr+49,___ftadd@f2+1
  5633  011E58  C38C  F092         	movff	_YGR_Arr+50,___ftadd@f2+2
  5634  011E5C  C68D  F08D         	movff	_Y_PF_Avg$8098,___ftadd@f1
  5635  011E60  C68E  F08E         	movff	_Y_PF_Avg$8098+1,___ftadd@f1+1
  5636  011E64  C68F  F08F         	movff	_Y_PF_Avg$8098+2,___ftadd@f1+2
  5637  011E68  EC69  F0B2         	call	___ftadd	;wreg free
  5638  011E6C  C08D  F690         	movff	?___ftadd,_Y_PF_Avg$8099
  5639  011E70  C08E  F691         	movff	?___ftadd+1,_Y_PF_Avg$8099+1
  5640  011E74  C08F  F692         	movff	?___ftadd+2,_Y_PF_Avg$8099+2
  5641                           
  5642                           ;Power_Meter.c: 503: }
  5643                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5644                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5645                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5646                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5647  011E78  C387  F090         	movff	_YGR_Arr+45,___ftadd@f2
  5648  011E7C  C388  F091         	movff	_YGR_Arr+46,___ftadd@f2+1
  5649  011E80  C389  F092         	movff	_YGR_Arr+47,___ftadd@f2+2
  5650  011E84  C690  F08D         	movff	_Y_PF_Avg$8099,___ftadd@f1
  5651  011E88  C691  F08E         	movff	_Y_PF_Avg$8099+1,___ftadd@f1+1
  5652  011E8C  C692  F08F         	movff	_Y_PF_Avg$8099+2,___ftadd@f1+2
  5653  011E90  EC69  F0B2         	call	___ftadd	;wreg free
  5654  011E94  C08D  F693         	movff	?___ftadd,_Y_PF_Avg$8100
  5655  011E98  C08E  F694         	movff	?___ftadd+1,_Y_PF_Avg$8100+1
  5656  011E9C  C08F  F695         	movff	?___ftadd+2,_Y_PF_Avg$8100+2
  5657                           
  5658                           ;Power_Meter.c: 503: }
  5659                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5660                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5661                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5662                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5663  011EA0  C384  F090         	movff	_YGR_Arr+42,___ftadd@f2
  5664  011EA4  C385  F091         	movff	_YGR_Arr+43,___ftadd@f2+1
  5665  011EA8  C386  F092         	movff	_YGR_Arr+44,___ftadd@f2+2
  5666  011EAC  C693  F08D         	movff	_Y_PF_Avg$8100,___ftadd@f1
  5667  011EB0  C694  F08E         	movff	_Y_PF_Avg$8100+1,___ftadd@f1+1
  5668  011EB4  C695  F08F         	movff	_Y_PF_Avg$8100+2,___ftadd@f1+2
  5669  011EB8  EC69  F0B2         	call	___ftadd	;wreg free
  5670  011EBC  C08D  F696         	movff	?___ftadd,_Y_PF_Avg$8101
  5671  011EC0  C08E  F697         	movff	?___ftadd+1,_Y_PF_Avg$8101+1
  5672  011EC4  C08F  F698         	movff	?___ftadd+2,_Y_PF_Avg$8101+2
  5673                           
  5674                           ;Power_Meter.c: 503: }
  5675                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5676                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5677                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5678                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5679  011EC8  C381  F090         	movff	_YGR_Arr+39,___ftadd@f2
  5680  011ECC  C382  F091         	movff	_YGR_Arr+40,___ftadd@f2+1
  5681  011ED0  C383  F092         	movff	_YGR_Arr+41,___ftadd@f2+2
  5682  011ED4  C696  F08D         	movff	_Y_PF_Avg$8101,___ftadd@f1
  5683  011ED8  C697  F08E         	movff	_Y_PF_Avg$8101+1,___ftadd@f1+1
  5684  011EDC  C698  F08F         	movff	_Y_PF_Avg$8101+2,___ftadd@f1+2
  5685  011EE0  EC69  F0B2         	call	___ftadd	;wreg free
  5686  011EE4  C08D  F699         	movff	?___ftadd,_Y_PF_Avg$8102
  5687  011EE8  C08E  F69A         	movff	?___ftadd+1,_Y_PF_Avg$8102+1
  5688  011EEC  C08F  F69B         	movff	?___ftadd+2,_Y_PF_Avg$8102+2
  5689                           
  5690                           ;Power_Meter.c: 503: }
  5691                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5692                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5693                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5694                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5695  011EF0  C37E  F090         	movff	_YGR_Arr+36,___ftadd@f2
  5696  011EF4  C37F  F091         	movff	_YGR_Arr+37,___ftadd@f2+1
  5697  011EF8  C380  F092         	movff	_YGR_Arr+38,___ftadd@f2+2
  5698  011EFC  C699  F08D         	movff	_Y_PF_Avg$8102,___ftadd@f1
  5699  011F00  C69A  F08E         	movff	_Y_PF_Avg$8102+1,___ftadd@f1+1
  5700  011F04  C69B  F08F         	movff	_Y_PF_Avg$8102+2,___ftadd@f1+2
  5701  011F08  EC69  F0B2         	call	___ftadd	;wreg free
  5702  011F0C  C08D  F69C         	movff	?___ftadd,_Y_PF_Avg$8103
  5703  011F10  C08E  F69D         	movff	?___ftadd+1,_Y_PF_Avg$8103+1
  5704  011F14  C08F  F69E         	movff	?___ftadd+2,_Y_PF_Avg$8103+2
  5705                           
  5706                           ;Power_Meter.c: 503: }
  5707                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5708                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5709                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5710                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5711  011F18  C37B  F090         	movff	_YGR_Arr+33,___ftadd@f2
  5712  011F1C  C37C  F091         	movff	_YGR_Arr+34,___ftadd@f2+1
  5713  011F20  C37D  F092         	movff	_YGR_Arr+35,___ftadd@f2+2
  5714  011F24  C69C  F08D         	movff	_Y_PF_Avg$8103,___ftadd@f1
  5715  011F28  C69D  F08E         	movff	_Y_PF_Avg$8103+1,___ftadd@f1+1
  5716  011F2C  C69E  F08F         	movff	_Y_PF_Avg$8103+2,___ftadd@f1+2
  5717  011F30  EC69  F0B2         	call	___ftadd	;wreg free
  5718  011F34  C08D  F69F         	movff	?___ftadd,_Y_PF_Avg$8104
  5719  011F38  C08E  F6A0         	movff	?___ftadd+1,_Y_PF_Avg$8104+1
  5720  011F3C  C08F  F6A1         	movff	?___ftadd+2,_Y_PF_Avg$8104+2
  5721                           
  5722                           ;Power_Meter.c: 503: }
  5723                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5724                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5725                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5726                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5727  011F40  C378  F090         	movff	_YGR_Arr+30,___ftadd@f2
  5728  011F44  C379  F091         	movff	_YGR_Arr+31,___ftadd@f2+1
  5729  011F48  C37A  F092         	movff	_YGR_Arr+32,___ftadd@f2+2
  5730  011F4C  C69F  F08D         	movff	_Y_PF_Avg$8104,___ftadd@f1
  5731  011F50  C6A0  F08E         	movff	_Y_PF_Avg$8104+1,___ftadd@f1+1
  5732  011F54  C6A1  F08F         	movff	_Y_PF_Avg$8104+2,___ftadd@f1+2
  5733  011F58  EC69  F0B2         	call	___ftadd	;wreg free
  5734  011F5C  C08D  F6A2         	movff	?___ftadd,_Y_PF_Avg$8105
  5735  011F60  C08E  F6A3         	movff	?___ftadd+1,_Y_PF_Avg$8105+1
  5736  011F64  C08F  F6A4         	movff	?___ftadd+2,_Y_PF_Avg$8105+2
  5737                           
  5738                           ;Power_Meter.c: 503: }
  5739                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5740                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5741                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5742                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5743  011F68  C375  F090         	movff	_YGR_Arr+27,___ftadd@f2
  5744  011F6C  C376  F091         	movff	_YGR_Arr+28,___ftadd@f2+1
  5745  011F70  C377  F092         	movff	_YGR_Arr+29,___ftadd@f2+2
  5746  011F74  C6A2  F08D         	movff	_Y_PF_Avg$8105,___ftadd@f1
  5747  011F78  C6A3  F08E         	movff	_Y_PF_Avg$8105+1,___ftadd@f1+1
  5748  011F7C  C6A4  F08F         	movff	_Y_PF_Avg$8105+2,___ftadd@f1+2
  5749  011F80  EC69  F0B2         	call	___ftadd	;wreg free
  5750  011F84  C08D  F6A5         	movff	?___ftadd,_Y_PF_Avg$8106
  5751  011F88  C08E  F6A6         	movff	?___ftadd+1,_Y_PF_Avg$8106+1
  5752  011F8C  C08F  F6A7         	movff	?___ftadd+2,_Y_PF_Avg$8106+2
  5753                           
  5754                           ;Power_Meter.c: 503: }
  5755                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5756                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5757                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5758                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5759  011F90  C372  F090         	movff	_YGR_Arr+24,___ftadd@f2
  5760  011F94  C373  F091         	movff	_YGR_Arr+25,___ftadd@f2+1
  5761  011F98  C374  F092         	movff	_YGR_Arr+26,___ftadd@f2+2
  5762  011F9C  C6A5  F08D         	movff	_Y_PF_Avg$8106,___ftadd@f1
  5763  011FA0  C6A6  F08E         	movff	_Y_PF_Avg$8106+1,___ftadd@f1+1
  5764  011FA4  C6A7  F08F         	movff	_Y_PF_Avg$8106+2,___ftadd@f1+2
  5765  011FA8  EC69  F0B2         	call	___ftadd	;wreg free
  5766  011FAC  C08D  F6A8         	movff	?___ftadd,_Y_PF_Avg$8107
  5767  011FB0  C08E  F6A9         	movff	?___ftadd+1,_Y_PF_Avg$8107+1
  5768  011FB4  C08F  F6AA         	movff	?___ftadd+2,_Y_PF_Avg$8107+2
  5769                           
  5770                           ;Power_Meter.c: 503: }
  5771                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5772                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5773                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5774                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5775  011FB8  C36F  F090         	movff	_YGR_Arr+21,___ftadd@f2
  5776  011FBC  C370  F091         	movff	_YGR_Arr+22,___ftadd@f2+1
  5777  011FC0  C371  F092         	movff	_YGR_Arr+23,___ftadd@f2+2
  5778  011FC4  C6A8  F08D         	movff	_Y_PF_Avg$8107,___ftadd@f1
  5779  011FC8  C6A9  F08E         	movff	_Y_PF_Avg$8107+1,___ftadd@f1+1
  5780  011FCC  C6AA  F08F         	movff	_Y_PF_Avg$8107+2,___ftadd@f1+2
  5781  011FD0  EC69  F0B2         	call	___ftadd	;wreg free
  5782  011FD4  C08D  F6AB         	movff	?___ftadd,_Y_PF_Avg$8108
  5783  011FD8  C08E  F6AC         	movff	?___ftadd+1,_Y_PF_Avg$8108+1
  5784  011FDC  C08F  F6AD         	movff	?___ftadd+2,_Y_PF_Avg$8108+2
  5785                           
  5786                           ;Power_Meter.c: 503: }
  5787                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5788                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5789                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5790                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5791  011FE0  C36C  F090         	movff	_YGR_Arr+18,___ftadd@f2
  5792  011FE4  C36D  F091         	movff	_YGR_Arr+19,___ftadd@f2+1
  5793  011FE8  C36E  F092         	movff	_YGR_Arr+20,___ftadd@f2+2
  5794  011FEC  C6AB  F08D         	movff	_Y_PF_Avg$8108,___ftadd@f1
  5795  011FF0  C6AC  F08E         	movff	_Y_PF_Avg$8108+1,___ftadd@f1+1
  5796  011FF4  C6AD  F08F         	movff	_Y_PF_Avg$8108+2,___ftadd@f1+2
  5797  011FF8  EC69  F0B2         	call	___ftadd	;wreg free
  5798  011FFC  C08D  F6AE         	movff	?___ftadd,_Y_PF_Avg$8109
  5799  012000  C08E  F6AF         	movff	?___ftadd+1,_Y_PF_Avg$8109+1
  5800  012004  C08F  F6B0         	movff	?___ftadd+2,_Y_PF_Avg$8109+2
  5801                           
  5802                           ;Power_Meter.c: 503: }
  5803                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5804                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5805                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5806                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5807  012008  C369  F090         	movff	_YGR_Arr+15,___ftadd@f2
  5808  01200C  C36A  F091         	movff	_YGR_Arr+16,___ftadd@f2+1
  5809  012010  C36B  F092         	movff	_YGR_Arr+17,___ftadd@f2+2
  5810  012014  C6AE  F08D         	movff	_Y_PF_Avg$8109,___ftadd@f1
  5811  012018  C6AF  F08E         	movff	_Y_PF_Avg$8109+1,___ftadd@f1+1
  5812  01201C  C6B0  F08F         	movff	_Y_PF_Avg$8109+2,___ftadd@f1+2
  5813  012020  EC69  F0B2         	call	___ftadd	;wreg free
  5814  012024  C08D  F6B1         	movff	?___ftadd,_Y_PF_Avg$8110
  5815  012028  C08E  F6B2         	movff	?___ftadd+1,_Y_PF_Avg$8110+1
  5816  01202C  C08F  F6B3         	movff	?___ftadd+2,_Y_PF_Avg$8110+2
  5817                           
  5818                           ;Power_Meter.c: 503: }
  5819                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5820                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5821                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5822                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5823  012030  C366  F090         	movff	_YGR_Arr+12,___ftadd@f2
  5824  012034  C367  F091         	movff	_YGR_Arr+13,___ftadd@f2+1
  5825  012038  C368  F092         	movff	_YGR_Arr+14,___ftadd@f2+2
  5826  01203C  C6B1  F08D         	movff	_Y_PF_Avg$8110,___ftadd@f1
  5827  012040  C6B2  F08E         	movff	_Y_PF_Avg$8110+1,___ftadd@f1+1
  5828  012044  C6B3  F08F         	movff	_Y_PF_Avg$8110+2,___ftadd@f1+2
  5829  012048  EC69  F0B2         	call	___ftadd	;wreg free
  5830  01204C  C08D  F6B4         	movff	?___ftadd,_Y_PF_Avg$8111
  5831  012050  C08E  F6B5         	movff	?___ftadd+1,_Y_PF_Avg$8111+1
  5832  012054  C08F  F6B6         	movff	?___ftadd+2,_Y_PF_Avg$8111+2
  5833                           
  5834                           ;Power_Meter.c: 503: }
  5835                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5836                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5837                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5838                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5839  012058  C363  F090         	movff	_YGR_Arr+9,___ftadd@f2
  5840  01205C  C364  F091         	movff	_YGR_Arr+10,___ftadd@f2+1
  5841  012060  C365  F092         	movff	_YGR_Arr+11,___ftadd@f2+2
  5842  012064  C6B4  F08D         	movff	_Y_PF_Avg$8111,___ftadd@f1
  5843  012068  C6B5  F08E         	movff	_Y_PF_Avg$8111+1,___ftadd@f1+1
  5844  01206C  C6B6  F08F         	movff	_Y_PF_Avg$8111+2,___ftadd@f1+2
  5845  012070  EC69  F0B2         	call	___ftadd	;wreg free
  5846  012074  C08D  F6B7         	movff	?___ftadd,_Y_PF_Avg$8112
  5847  012078  C08E  F6B8         	movff	?___ftadd+1,_Y_PF_Avg$8112+1
  5848  01207C  C08F  F6B9         	movff	?___ftadd+2,_Y_PF_Avg$8112+2
  5849                           
  5850                           ;Power_Meter.c: 503: }
  5851                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5852                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5853                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5854                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5855  012080  C360  F090         	movff	_YGR_Arr+6,___ftadd@f2
  5856  012084  C361  F091         	movff	_YGR_Arr+7,___ftadd@f2+1
  5857  012088  C362  F092         	movff	_YGR_Arr+8,___ftadd@f2+2
  5858  01208C  C6B7  F08D         	movff	_Y_PF_Avg$8112,___ftadd@f1
  5859  012090  C6B8  F08E         	movff	_Y_PF_Avg$8112+1,___ftadd@f1+1
  5860  012094  C6B9  F08F         	movff	_Y_PF_Avg$8112+2,___ftadd@f1+2
  5861  012098  EC69  F0B2         	call	___ftadd	;wreg free
  5862  01209C  C08D  F6BA         	movff	?___ftadd,_Y_PF_Avg$8113
  5863  0120A0  C08E  F6BB         	movff	?___ftadd+1,_Y_PF_Avg$8113+1
  5864  0120A4  C08F  F6BC         	movff	?___ftadd+2,_Y_PF_Avg$8113+2
  5865                           
  5866                           ;Power_Meter.c: 503: }
  5867                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5868                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5869                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5870                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5871  0120A8  C35D  F090         	movff	_YGR_Arr+3,___ftadd@f2
  5872  0120AC  C35E  F091         	movff	_YGR_Arr+4,___ftadd@f2+1
  5873  0120B0  C35F  F092         	movff	_YGR_Arr+5,___ftadd@f2+2
  5874  0120B4  C6BA  F08D         	movff	_Y_PF_Avg$8113,___ftadd@f1
  5875  0120B8  C6BB  F08E         	movff	_Y_PF_Avg$8113+1,___ftadd@f1+1
  5876  0120BC  C6BC  F08F         	movff	_Y_PF_Avg$8113+2,___ftadd@f1+2
  5877  0120C0  EC69  F0B2         	call	___ftadd	;wreg free
  5878  0120C4  C08D  F6BD         	movff	?___ftadd,_Y_PF_Avg$8114
  5879  0120C8  C08E  F6BE         	movff	?___ftadd+1,_Y_PF_Avg$8114+1
  5880  0120CC  C08F  F6BF         	movff	?___ftadd+2,_Y_PF_Avg$8114+2
  5881                           
  5882                           ;Power_Meter.c: 503: }
  5883                           ;Power_Meter.c: 505: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5884                           ;Power_Meter.c: 506: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5885                           ;Power_Meter.c: 507: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5886                           ;Power_Meter.c: 508: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5887  0120D0  C6BD  F08D         	movff	_Y_PF_Avg$8114,___ftadd@f1
  5888  0120D4  C6BE  F08E         	movff	_Y_PF_Avg$8114+1,___ftadd@f1+1
  5889  0120D8  C6BF  F08F         	movff	_Y_PF_Avg$8114+2,___ftadd@f1+2
  5890  0120DC  C35A  F090         	movff	_YGR_Arr,___ftadd@f2
  5891  0120E0  C35B  F091         	movff	_YGR_Arr+1,___ftadd@f2+1
  5892  0120E4  C35C  F092         	movff	_YGR_Arr+2,___ftadd@f2+2
  5893  0120E8  EC69  F0B2         	call	___ftadd	;wreg free
  5894  0120EC  C08D  F2EE         	movff	?___ftadd,_YGR_Avg
  5895  0120F0  C08E  F2EF         	movff	?___ftadd+1,_YGR_Avg+1
  5896  0120F4  C08F  F2F0         	movff	?___ftadd+2,_YGR_Avg+2
  5897                           
  5898                           ;Power_Meter.c: 510: YGR_Avg = (YGR_Avg / 30);
  5899  0120F8  C2EE  F0A5         	movff	_YGR_Avg,___ftdiv@f1
  5900  0120FC  C2EF  F0A6         	movff	_YGR_Avg+1,___ftdiv@f1+1
  5901  012100  C2F0  F0A7         	movff	_YGR_Avg+2,___ftdiv@f1+2
  5902  012104  0E00               	movlw	0
  5903  012106  0100               	movlb	0	; () banked
  5904  012108  6FA8               	movwf	___ftdiv@f2& (0+255),b
  5905  01210A  0EF0               	movlw	240
  5906  01210C  0100               	movlb	0	; () banked
  5907  01210E  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  5908  012110  0E41               	movlw	65
  5909  012112  0100               	movlb	0	; () banked
  5910  012114  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  5911  012116  EC53  F0C1         	call	___ftdiv	;wreg free
  5912  01211A  C0A5  F2EE         	movff	?___ftdiv,_YGR_Avg
  5913  01211E  C0A6  F2EF         	movff	?___ftdiv+1,_YGR_Avg+1
  5914  012122  C0A7  F2F0         	movff	?___ftdiv+2,_YGR_Avg+2
  5915                           
  5916                           ;Power_Meter.c: 511: Y_Rad = ((YGR_Avg * 2 * 3.1412) - (0.575959));
  5917  012126  0E09               	movlw	9
  5918  012128  0100               	movlb	0	; () banked
  5919  01212A  6F77               	movwf	___ftmul@f2& (0+255),b
  5920  01212C  0EC9               	movlw	201
  5921  01212E  0100               	movlb	0	; () banked
  5922  012130  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5923  012132  0E40               	movlw	64
  5924  012134  0100               	movlb	0	; () banked
  5925  012136  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5926  012138  C2EE  F074         	movff	_YGR_Avg,___ftmul@f1
  5927  01213C  C2EF  F075         	movff	_YGR_Avg+1,___ftmul@f1+1
  5928  012140  C2F0  F076         	movff	_YGR_Avg+2,___ftmul@f1+2
  5929  012144  ECA4  F0C0         	call	___ftmul	;wreg free
  5930  012148  C074  F08D         	movff	?___ftmul,___ftadd@f1
  5931  01214C  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  5932  012150  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  5933  012154  0E72               	movlw	114
  5934  012156  0100               	movlb	0	; () banked
  5935  012158  6F90               	movwf	___ftadd@f2& (0+255),b
  5936  01215A  0E13               	movlw	19
  5937  01215C  0100               	movlb	0	; () banked
  5938  01215E  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  5939  012160  0EBF               	movlw	191
  5940  012162  0100               	movlb	0	; () banked
  5941  012164  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  5942  012166  EC69  F0B2         	call	___ftadd	;wreg free
  5943  01216A  C08D  F5BE         	movff	?___ftadd,_Y_Rad
  5944  01216E  C08E  F5BF         	movff	?___ftadd+1,_Y_Rad+1
  5945  012172  C08F  F5C0         	movff	?___ftadd+2,_Y_Rad+2
  5946                           
  5947                           ;Power_Meter.c: 512: Y_Power_Factor = (cos(Y_Rad));
  5948  012176  C5BE  F0C1         	movff	_Y_Rad,cos@f
  5949  01217A  C5BF  F0C2         	movff	_Y_Rad+1,cos@f+1
  5950  01217E  C5C0  F0C3         	movff	_Y_Rad+2,cos@f+2
  5951  012182  ECB0  F0CB         	call	_cos	;wreg free
  5952  012186  C0C1  F272         	movff	?_cos,_Y_Power_Factor
  5953  01218A  C0C2  F273         	movff	?_cos+1,_Y_Power_Factor+1
  5954  01218E  C0C3  F274         	movff	?_cos+2,_Y_Power_Factor+2
  5955  012192  0012               	return		;funcret
  5956  012194                     __end_of_Y_PF_Avg:
  5957                           	opt stack 0
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           intcon	equ	0xFF2
  5963                           postinc0	equ	0xFEE
  5964                           wreg	equ	0xFE8
  5965                           postdec1	equ	0xFE5
  5966                           fsr1h	equ	0xFE2
  5967                           fsr1l	equ	0xFE1
  5968                           status	equ	0xFD8
  5969                           
  5970 ;; *************** function _Wind_Speed_Initiate *****************
  5971 ;; Defined at:
  5972 ;;		line 55 in file "Initialization.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;		None
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;		None
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  2   18[None  ] int 
  5979 ;; Registers used:
  5980 ;;		wreg, status,2
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;Total ram usage:        0 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    3
  5993 ;; This function calls:
  5994 ;;		Nothing
  5995 ;; This function is called by:
  5996 ;;		_main
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           	psect	text5
  6001  01B056                     __ptext5:
  6002                           	opt stack 0
  6003  01B056                     _Wind_Speed_Initiate:
  6004                           	opt stack 27
  6005                           
  6006                           ;Initialization.c: 57: TRISEbits.TRISE6=1;
  6007                           
  6008                           ;incstack = 0
  6009  01B056  8C96               	bsf	3990,6,c	;volatile
  6010                           
  6011                           ;Initialization.c: 58: CCP6CON = 0x04;
  6012  01B058  0E04               	movlw	4
  6013  01B05A  6E71               	movwf	3953,c	;volatile
  6014                           
  6015                           ;Initialization.c: 59: CCP6IE = 1;
  6016  01B05C  86B6               	bsf	4022,3,c	;volatile
  6017                           
  6018                           ;Initialization.c: 60: CCP6IF = 0;
  6019  01B05E  96B7               	bcf	4023,3,c	;volatile
  6020  01B060  0012               	return		;funcret
  6021  01B062                     __end_of_Wind_Speed_Initiate:
  6022                           	opt stack 0
  6023                           tblptru	equ	0xFF8
  6024                           tblptrh	equ	0xFF7
  6025                           tblptrl	equ	0xFF6
  6026                           tablat	equ	0xFF5
  6027                           intcon	equ	0xFF2
  6028                           postinc0	equ	0xFEE
  6029                           wreg	equ	0xFE8
  6030                           postdec1	equ	0xFE5
  6031                           fsr1h	equ	0xFE2
  6032                           fsr1l	equ	0xFE1
  6033                           status	equ	0xFD8
  6034                           
  6035 ;; *************** function _Wind_Speed_Cal *****************
  6036 ;; Defined at:
  6037 ;;		line 163 in file "RPM_Measurement.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;		None
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;		None
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      void 
  6044 ;; Registers used:
  6045 ;;		wreg, status,2, status,0, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;Total ram usage:        2 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    5
  6058 ;; This function calls:
  6059 ;;		___ftadd
  6060 ;;		___ftdiv
  6061 ;;		___ftmul
  6062 ;;		___lwtoft
  6063 ;; This function is called by:
  6064 ;;		_main
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text6
  6069  015FF6                     __ptext6:
  6070                           	opt stack 0
  6071  015FF6                     _Wind_Speed_Cal:
  6072                           	opt stack 25
  6073                           
  6074                           ;RPM_Measurement.c: 165: if(Wind_Cap_New > Wind_Cap_Old)
  6075                           
  6076                           ;incstack = 0
  6077  015FF6  0101               	movlb	1	; () banked
  6078  015FF8  5140               	movf	_Wind_Cap_New& (0+255),w,b
  6079  015FFA  0101               	movlb	1	; () banked
  6080  015FFC  5D44               	subwf	_Wind_Cap_Old& (0+255),w,b
  6081  015FFE  0101               	movlb	1	; () banked
  6082  016000  5141               	movf	(_Wind_Cap_New+1)& (0+255),w,b
  6083  016002  0101               	movlb	1	; () banked
  6084  016004  5945               	subwfb	(_Wind_Cap_Old+1)& (0+255),w,b
  6085  016006  B0D8               	btfsc	status,0,c
  6086  016008  D02F               	goto	l22869
  6087                           
  6088                           ; BSR set to: 1
  6089                           ;RPM_Measurement.c: 166: {
  6090                           ;RPM_Measurement.c: 167: Wind_Pulse_width = (Wind_Cap_New - Wind_Cap_Old + 1) ;
  6091  01600A  C144  F0B4         	movff	_Wind_Cap_Old,??_Wind_Speed_Cal
  6092  01600E  C145  F0B5         	movff	_Wind_Cap_Old+1,??_Wind_Speed_Cal+1
  6093  016012  0100               	movlb	0	; () banked
  6094  016014  1FB4               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6095  016016  1FB5               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6096  016018  4BB4               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6097  01601A  2BB5               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6098  01601C  0101               	movlb	1	; () banked
  6099  01601E  5140               	movf	_Wind_Cap_New& (0+255),w,b
  6100  016020  0100               	movlb	0	; () banked
  6101  016022  27B4               	addwf	??_Wind_Speed_Cal& (0+255),f,b
  6102  016024  0101               	movlb	1	; () banked
  6103  016026  5141               	movf	(_Wind_Cap_New+1)& (0+255),w,b
  6104  016028  0100               	movlb	0	; () banked
  6105  01602A  23B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6106  01602C  0E01               	movlw	1
  6107  01602E  0100               	movlb	0	; () banked
  6108  016030  25B4               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6109  016032  0102               	movlb	2	; () banked
  6110  016034  6FFC               	movwf	_Wind_Pulse_width& (0+255),b
  6111  016036  0E00               	movlw	0
  6112  016038  0100               	movlb	0	; () banked
  6113  01603A  21B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6114  01603C  0102               	movlb	2	; () banked
  6115  01603E  6FFD               	movwf	(_Wind_Pulse_width+1)& (0+255),b
  6116                           
  6117                           ;RPM_Measurement.c: 168: WRPM_Counter = (Timer1_OF_counter_Wind_temp_New - Timer1_OF_cou
      +                          nter_Wind_temp_Old);
  6118  016040  C2A6  F0B4         	movff	_Timer1_OF_counter_Wind_temp_Old,??_Wind_Speed_Cal
  6119  016044  C2A7  F0B5         	movff	_Timer1_OF_counter_Wind_temp_Old+1,??_Wind_Speed_Cal+1
  6120  016048  0100               	movlb	0	; () banked
  6121  01604A  1FB4               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6122  01604C  1FB5               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6123  01604E  4BB4               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6124  016050  2BB5               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6125  016052  0101               	movlb	1	; () banked
  6126  016054  513A               	movf	_Timer1_OF_counter_Wind_temp_New& (0+255),w,b
  6127  016056  0100               	movlb	0	; () banked
  6128  016058  25B4               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6129  01605A  0102               	movlb	2	; () banked
  6130  01605C  6FAC               	movwf	_WRPM_Counter& (0+255),b
  6131  01605E  0101               	movlb	1	; () banked
  6132  016060  513B               	movf	(_Timer1_OF_counter_Wind_temp_New+1)& (0+255),w,b
  6133  016062  0100               	movlb	0	; () banked
  6134  016064  21B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6135  016066  D038               	goto	L2
  6136  016068                     l22869:
  6137                           
  6138                           ;RPM_Measurement.c: 170: else
  6139                           ;RPM_Measurement.c: 171: {
  6140                           ;RPM_Measurement.c: 172: Wind_Pulse_width = (Wind_Cap_New - Wind_Cap_Old + 1) + 65536;
  6141  016068  C144  F0B4         	movff	_Wind_Cap_Old,??_Wind_Speed_Cal
  6142  01606C  C145  F0B5         	movff	_Wind_Cap_Old+1,??_Wind_Speed_Cal+1
  6143  016070  0100               	movlb	0	; () banked
  6144  016072  1FB4               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6145  016074  1FB5               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6146  016076  4BB4               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6147  016078  2BB5               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6148  01607A  0101               	movlb	1	; () banked
  6149  01607C  5140               	movf	_Wind_Cap_New& (0+255),w,b
  6150  01607E  0100               	movlb	0	; () banked
  6151  016080  27B4               	addwf	??_Wind_Speed_Cal& (0+255),f,b
  6152  016082  0101               	movlb	1	; () banked
  6153  016084  5141               	movf	(_Wind_Cap_New+1)& (0+255),w,b
  6154  016086  0100               	movlb	0	; () banked
  6155  016088  23B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6156  01608A  0E01               	movlw	1
  6157  01608C  0100               	movlb	0	; () banked
  6158  01608E  25B4               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6159  016090  0102               	movlb	2	; () banked
  6160  016092  6FFC               	movwf	_Wind_Pulse_width& (0+255),b
  6161  016094  0E00               	movlw	0
  6162  016096  0100               	movlb	0	; () banked
  6163  016098  21B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6164  01609A  0102               	movlb	2	; () banked
  6165  01609C  6FFD               	movwf	(_Wind_Pulse_width+1)& (0+255),b
  6166                           
  6167                           ;RPM_Measurement.c: 173: WRPM_Counter = (Timer1_OF_counter_Wind_temp_New - Timer1_OF_cou
      +                          nter_Wind_temp_Old);
  6168  01609E  C2A6  F0B4         	movff	_Timer1_OF_counter_Wind_temp_Old,??_Wind_Speed_Cal
  6169  0160A2  C2A7  F0B5         	movff	_Timer1_OF_counter_Wind_temp_Old+1,??_Wind_Speed_Cal+1
  6170  0160A6  0100               	movlb	0	; () banked
  6171  0160A8  1FB4               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6172  0160AA  1FB5               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6173  0160AC  4BB4               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6174  0160AE  2BB5               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6175  0160B0  0101               	movlb	1	; () banked
  6176  0160B2  513A               	movf	_Timer1_OF_counter_Wind_temp_New& (0+255),w,b
  6177  0160B4  0100               	movlb	0	; () banked
  6178  0160B6  25B4               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6179  0160B8  0102               	movlb	2	; () banked
  6180  0160BA  6FAC               	movwf	_WRPM_Counter& (0+255),b
  6181  0160BC  0101               	movlb	1	; () banked
  6182  0160BE  513B               	movf	(_Timer1_OF_counter_Wind_temp_New+1)& (0+255),w,b
  6183  0160C0  0100               	movlb	0	; () banked
  6184  0160C2  21B5               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6185  0160C4  0102               	movlb	2	; () banked
  6186  0160C6  6FAD               	movwf	(_WRPM_Counter+1)& (0+255),b
  6187                           
  6188                           ;RPM_Measurement.c: 174: WRPM_Counter = WRPM_Counter -1;
  6189  0160C8  0EFF               	movlw	255
  6190  0160CA  0102               	movlb	2	; () banked
  6191  0160CC  25AC               	addwf	_WRPM_Counter& (0+255),w,b
  6192  0160CE  0102               	movlb	2	; () banked
  6193  0160D0  6FAC               	movwf	_WRPM_Counter& (0+255),b
  6194  0160D2  0EFF               	movlw	255
  6195  0160D4  0102               	movlb	2	; () banked
  6196  0160D6  21AD               	addwfc	(_WRPM_Counter+1)& (0+255),w,b
  6197  0160D8                     L2:
  6198  0160D8  0102               	movlb	2	; () banked
  6199  0160DA  6FAD               	movwf	(_WRPM_Counter+1)& (0+255),b
  6200                           
  6201                           ; BSR set to: 2
  6202                           ;RPM_Measurement.c: 175: }
  6203                           ;RPM_Measurement.c: 177: Wind_Time = 0.000004 * Wind_Pulse_width;
  6204                           
  6205                           ; BSR set to: 2
  6206  0160DC  C2FC  F068         	movff	_Wind_Pulse_width,___lwtoft@c
  6207  0160E0  C2FD  F069         	movff	_Wind_Pulse_width+1,___lwtoft@c+1
  6208  0160E4  EC6E  F0D7         	call	___lwtoft	;wreg free
  6209  0160E8  C068  F074         	movff	?___lwtoft,___ftmul@f1
  6210  0160EC  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  6211  0160F0  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  6212  0160F4  0E38               	movlw	56
  6213  0160F6  0100               	movlb	0	; () banked
  6214  0160F8  6F77               	movwf	___ftmul@f2& (0+255),b
  6215  0160FA  0E86               	movlw	134
  6216  0160FC  0100               	movlb	0	; () banked
  6217  0160FE  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6218  016100  0E36               	movlw	54
  6219  016102  0100               	movlb	0	; () banked
  6220  016104  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6221  016106  ECA4  F0C0         	call	___ftmul	;wreg free
  6222  01610A  C074  F4C9         	movff	?___ftmul,_Wind_Time
  6223  01610E  C075  F4CA         	movff	?___ftmul+1,_Wind_Time+1
  6224  016112  C076  F4CB         	movff	?___ftmul+2,_Wind_Time+2
  6225                           
  6226                           ;RPM_Measurement.c: 179: Wind_Time_1 = Wind_Time + (0.262 * WRPM_Counter);
  6227  016116  0E25               	movlw	37
  6228  016118  0100               	movlb	0	; () banked
  6229  01611A  6F77               	movwf	___ftmul@f2& (0+255),b
  6230  01611C  0E86               	movlw	134
  6231  01611E  0100               	movlb	0	; () banked
  6232  016120  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6233  016122  0E3E               	movlw	62
  6234  016124  0100               	movlb	0	; () banked
  6235  016126  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6236  016128  C2AC  F068         	movff	_WRPM_Counter,___lwtoft@c
  6237  01612C  C2AD  F069         	movff	_WRPM_Counter+1,___lwtoft@c+1
  6238  016130  EC6E  F0D7         	call	___lwtoft	;wreg free
  6239  016134  C068  F074         	movff	?___lwtoft,___ftmul@f1
  6240  016138  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  6241  01613C  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  6242  016140  ECA4  F0C0         	call	___ftmul	;wreg free
  6243  016144  C074  F08D         	movff	?___ftmul,___ftadd@f1
  6244  016148  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  6245  01614C  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  6246  016150  C4C9  F090         	movff	_Wind_Time,___ftadd@f2
  6247  016154  C4CA  F091         	movff	_Wind_Time+1,___ftadd@f2+1
  6248  016158  C4CB  F092         	movff	_Wind_Time+2,___ftadd@f2+2
  6249  01615C  EC69  F0B2         	call	___ftadd	;wreg free
  6250  016160  C08D  F4F3         	movff	?___ftadd,_Wind_Time_1
  6251  016164  C08E  F4F4         	movff	?___ftadd+1,_Wind_Time_1+1
  6252  016168  C08F  F4F5         	movff	?___ftadd+2,_Wind_Time_1+2
  6253                           
  6254                           ;RPM_Measurement.c: 181: Wind_Frequency = (1/Wind_Time_1);
  6255  01616C  0E00               	movlw	0
  6256  01616E  0100               	movlb	0	; () banked
  6257  016170  6FA5               	movwf	___ftdiv@f1& (0+255),b
  6258  016172  0E80               	movlw	128
  6259  016174  0100               	movlb	0	; () banked
  6260  016176  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
  6261  016178  0E3F               	movlw	63
  6262  01617A  0100               	movlb	0	; () banked
  6263  01617C  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
  6264  01617E  C4F3  F0A8         	movff	_Wind_Time_1,___ftdiv@f2
  6265  016182  C4F4  F0A9         	movff	_Wind_Time_1+1,___ftdiv@f2+1
  6266  016186  C4F5  F0AA         	movff	_Wind_Time_1+2,___ftdiv@f2+2
  6267  01618A  EC53  F0C1         	call	___ftdiv	;wreg free
  6268  01618E  C0A5  F4BD         	movff	?___ftdiv,_Wind_Frequency
  6269  016192  C0A6  F4BE         	movff	?___ftdiv+1,_Wind_Frequency+1
  6270  016196  C0A7  F4BF         	movff	?___ftdiv+2,_Wind_Frequency+2
  6271                           
  6272                           ;RPM_Measurement.c: 182: Wind = (Wind_Frequency / 6);
  6273  01619A  C4BD  F0A5         	movff	_Wind_Frequency,___ftdiv@f1
  6274  01619E  C4BE  F0A6         	movff	_Wind_Frequency+1,___ftdiv@f1+1
  6275  0161A2  C4BF  F0A7         	movff	_Wind_Frequency+2,___ftdiv@f1+2
  6276  0161A6  0E00               	movlw	0
  6277  0161A8  0100               	movlb	0	; () banked
  6278  0161AA  6FA8               	movwf	___ftdiv@f2& (0+255),b
  6279  0161AC  0EC0               	movlw	192
  6280  0161AE  0100               	movlb	0	; () banked
  6281  0161B0  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  6282  0161B2  0E40               	movlw	64
  6283  0161B4  0100               	movlb	0	; () banked
  6284  0161B6  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  6285  0161B8  EC53  F0C1         	call	___ftdiv	;wreg free
  6286  0161BC  C0A5  F4BA         	movff	?___ftdiv,_Wind
  6287  0161C0  C0A6  F4BB         	movff	?___ftdiv+1,_Wind+1
  6288  0161C4  C0A7  F4BC         	movff	?___ftdiv+2,_Wind+2
  6289                           
  6290                           ;RPM_Measurement.c: 183: Wind_Speed = ((Wind * (143))/100);
  6291  0161C8  0E00               	movlw	0
  6292  0161CA  0100               	movlb	0	; () banked
  6293  0161CC  6F77               	movwf	___ftmul@f2& (0+255),b
  6294  0161CE  0E0F               	movlw	15
  6295  0161D0  0100               	movlb	0	; () banked
  6296  0161D2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6297  0161D4  0E43               	movlw	67
  6298  0161D6  0100               	movlb	0	; () banked
  6299  0161D8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6300  0161DA  C4BA  F074         	movff	_Wind,___ftmul@f1
  6301  0161DE  C4BB  F075         	movff	_Wind+1,___ftmul@f1+1
  6302  0161E2  C4BC  F076         	movff	_Wind+2,___ftmul@f1+2
  6303  0161E6  ECA4  F0C0         	call	___ftmul	;wreg free
  6304  0161EA  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
  6305  0161EE  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
  6306  0161F2  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
  6307  0161F6  0E00               	movlw	0
  6308  0161F8  0100               	movlb	0	; () banked
  6309  0161FA  6FA8               	movwf	___ftdiv@f2& (0+255),b
  6310  0161FC  0EC8               	movlw	200
  6311  0161FE  0100               	movlb	0	; () banked
  6312  016200  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  6313  016202  0E42               	movlw	66
  6314  016204  0100               	movlb	0	; () banked
  6315  016206  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  6316  016208  EC53  F0C1         	call	___ftdiv	;wreg free
  6317  01620C  C0A5  F233         	movff	?___ftdiv,_Wind_Speed
  6318  016210  C0A6  F234         	movff	?___ftdiv+1,_Wind_Speed+1
  6319  016214  C0A7  F235         	movff	?___ftdiv+2,_Wind_Speed+2
  6320                           
  6321                           ;RPM_Measurement.c: 185: Timer1_OF_counter_Wind = 0;
  6322  016218  0E00               	movlw	0
  6323  01621A  0103               	movlb	3	; () banked
  6324  01621C  6FF7               	movwf	(_Timer1_OF_counter_Wind+1)& (0+255),b
  6325  01621E  0E00               	movlw	0
  6326  016220  6FF6               	movwf	_Timer1_OF_counter_Wind& (0+255),b
  6327                           
  6328                           ; BSR set to: 3
  6329                           ;RPM_Measurement.c: 186: Wind_Frequency = 0;
  6330  016222  0E00               	movlw	0
  6331  016224  0104               	movlb	4	; () banked
  6332  016226  6FBD               	movwf	_Wind_Frequency& (0+255),b
  6333  016228  0E00               	movlw	0
  6334  01622A  0104               	movlb	4	; () banked
  6335  01622C  6FBE               	movwf	(_Wind_Frequency+1)& (0+255),b
  6336  01622E  0E00               	movlw	0
  6337  016230  0104               	movlb	4	; () banked
  6338  016232  6FBF               	movwf	(_Wind_Frequency+2)& (0+255),b
  6339                           
  6340                           ; BSR set to: 4
  6341                           ;RPM_Measurement.c: 187: Wind_Time_1 = 0;
  6342  016234  0E00               	movlw	0
  6343  016236  0104               	movlb	4	; () banked
  6344  016238  6FF3               	movwf	_Wind_Time_1& (0+255),b
  6345  01623A  0E00               	movlw	0
  6346  01623C  0104               	movlb	4	; () banked
  6347  01623E  6FF4               	movwf	(_Wind_Time_1+1)& (0+255),b
  6348  016240  0E00               	movlw	0
  6349  016242  0104               	movlb	4	; () banked
  6350  016244  6FF5               	movwf	(_Wind_Time_1+2)& (0+255),b
  6351                           
  6352                           ; BSR set to: 4
  6353                           ;RPM_Measurement.c: 188: Wind_Time = 0;
  6354  016246  0E00               	movlw	0
  6355  016248  0104               	movlb	4	; () banked
  6356  01624A  6FC9               	movwf	_Wind_Time& (0+255),b
  6357  01624C  0E00               	movlw	0
  6358  01624E  0104               	movlb	4	; () banked
  6359  016250  6FCA               	movwf	(_Wind_Time+1)& (0+255),b
  6360  016252  0E00               	movlw	0
  6361  016254  0104               	movlb	4	; () banked
  6362  016256  6FCB               	movwf	(_Wind_Time+2)& (0+255),b
  6363                           
  6364                           ; BSR set to: 4
  6365                           ;RPM_Measurement.c: 189: Wind_Pulse_width = 0;
  6366  016258  0E00               	movlw	0
  6367  01625A  0102               	movlb	2	; () banked
  6368  01625C  6FFD               	movwf	(_Wind_Pulse_width+1)& (0+255),b
  6369  01625E  0E00               	movlw	0
  6370  016260  6FFC               	movwf	_Wind_Pulse_width& (0+255),b
  6371                           
  6372                           ; BSR set to: 2
  6373  016262  0012               	return		;funcret
  6374  016264                     __end_of_Wind_Speed_Cal:
  6375                           	opt stack 0
  6376                           tblptru	equ	0xFF8
  6377                           tblptrh	equ	0xFF7
  6378                           tblptrl	equ	0xFF6
  6379                           tablat	equ	0xFF5
  6380                           intcon	equ	0xFF2
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           postdec1	equ	0xFE5
  6384                           fsr1h	equ	0xFE2
  6385                           fsr1l	equ	0xFE1
  6386                           status	equ	0xFD8
  6387                           
  6388 ;; *************** function _Wind_Speed_2_Initiate *****************
  6389 ;; Defined at:
  6390 ;;		line 48 in file "Initialization.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;		None
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;		None
  6395 ;; Return value:  Size  Location     Type
  6396 ;;                  1    wreg      void 
  6397 ;; Registers used:
  6398 ;;		wreg, status,2
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;Total ram usage:        0 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    3
  6411 ;; This function calls:
  6412 ;;		Nothing
  6413 ;; This function is called by:
  6414 ;;		_main
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           	psect	text7
  6419  01B002                     __ptext7:
  6420                           	opt stack 0
  6421  01B002                     _Wind_Speed_2_Initiate:
  6422                           	opt stack 27
  6423                           
  6424                           ;Initialization.c: 50: TRISEbits.TRISE2=1;
  6425                           
  6426                           ; BSR set to: 2
  6427                           ;incstack = 0
  6428  01B002  8496               	bsf	3990,2,c	;volatile
  6429                           
  6430                           ;Initialization.c: 51: CCP10CON = 0x04;
  6431  01B004  0E04               	movlw	4
  6432  01B006  010F               	movlb	15	; () banked
  6433  01B008  6F40               	movwf	64,b	;volatile
  6434                           
  6435                           ; BSR set to: 15
  6436                           ;Initialization.c: 52: CCP10IE = 1;
  6437  01B00A  8EB6               	bsf	4022,7,c	;volatile
  6438                           
  6439                           ; BSR set to: 15
  6440                           ;Initialization.c: 53: CCP10IF = 0;
  6441  01B00C  9EB7               	bcf	4023,7,c	;volatile
  6442                           
  6443                           ; BSR set to: 15
  6444  01B00E  0012               	return		;funcret
  6445  01B010                     __end_of_Wind_Speed_2_Initiate:
  6446                           	opt stack 0
  6447                           tblptru	equ	0xFF8
  6448                           tblptrh	equ	0xFF7
  6449                           tblptrl	equ	0xFF6
  6450                           tablat	equ	0xFF5
  6451                           intcon	equ	0xFF2
  6452                           postinc0	equ	0xFEE
  6453                           wreg	equ	0xFE8
  6454                           postdec1	equ	0xFE5
  6455                           fsr1h	equ	0xFE2
  6456                           fsr1l	equ	0xFE1
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function _Wind_Speed_2_Cal *****************
  6460 ;; Defined at:
  6461 ;;		line 192 in file "RPM_Measurement.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;		None
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;		None
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  2   68[None  ] int 
  6468 ;; Registers used:
  6469 ;;		wreg, status,2, status,0, cstack
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;Total ram usage:        2 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    5
  6482 ;; This function calls:
  6483 ;;		___ftadd
  6484 ;;		___ftdiv
  6485 ;;		___ftmul
  6486 ;;		___lwtoft
  6487 ;; This function is called by:
  6488 ;;		_main
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text8
  6493  016264                     __ptext8:
  6494                           	opt stack 0
  6495  016264                     _Wind_Speed_2_Cal:
  6496                           	opt stack 25
  6497                           
  6498                           ;RPM_Measurement.c: 194: if(Wind_Cap_New_2 > Wind_Cap_Old_2)
  6499                           
  6500                           ; BSR set to: 15
  6501                           ;incstack = 0
  6502  016264  0101               	movlb	1	; () banked
  6503  016266  5142               	movf	_Wind_Cap_New_2& (0+255),w,b
  6504  016268  0101               	movlb	1	; () banked
  6505  01626A  5D46               	subwf	_Wind_Cap_Old_2& (0+255),w,b
  6506  01626C  0101               	movlb	1	; () banked
  6507  01626E  5143               	movf	(_Wind_Cap_New_2+1)& (0+255),w,b
  6508  016270  0101               	movlb	1	; () banked
  6509  016272  5947               	subwfb	(_Wind_Cap_Old_2+1)& (0+255),w,b
  6510  016274  B0D8               	btfsc	status,0,c
  6511  016276  D02F               	goto	l22895
  6512                           
  6513                           ; BSR set to: 1
  6514                           ;RPM_Measurement.c: 195: {
  6515                           ;RPM_Measurement.c: 196: Wind_Pulse_width_2 = (Wind_Cap_New_2 - Wind_Cap_Old_2 + 1) ;
  6516  016278  C146  F0B4         	movff	_Wind_Cap_Old_2,??_Wind_Speed_2_Cal
  6517  01627C  C147  F0B5         	movff	_Wind_Cap_Old_2+1,??_Wind_Speed_2_Cal+1
  6518  016280  0100               	movlb	0	; () banked
  6519  016282  1FB4               	comf	??_Wind_Speed_2_Cal& (0+255),f,b
  6520  016284  1FB5               	comf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6521  016286  4BB4               	infsnz	??_Wind_Speed_2_Cal& (0+255),f,b
  6522  016288  2BB5               	incf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6523  01628A  0101               	movlb	1	; () banked
  6524  01628C  5142               	movf	_Wind_Cap_New_2& (0+255),w,b
  6525  01628E  0100               	movlb	0	; () banked
  6526  016290  27B4               	addwf	??_Wind_Speed_2_Cal& (0+255),f,b
  6527  016292  0101               	movlb	1	; () banked
  6528  016294  5143               	movf	(_Wind_Cap_New_2+1)& (0+255),w,b
  6529  016296  0100               	movlb	0	; () banked
  6530  016298  23B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6531  01629A  0E01               	movlw	1
  6532  01629C  0100               	movlb	0	; () banked
  6533  01629E  25B4               	addwf	??_Wind_Speed_2_Cal& (0+255),w,b
  6534  0162A0  0102               	movlb	2	; () banked
  6535  0162A2  6FFE               	movwf	_Wind_Pulse_width_2& (0+255),b
  6536  0162A4  0E00               	movlw	0
  6537  0162A6  0100               	movlb	0	; () banked
  6538  0162A8  21B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),w,b
  6539  0162AA  0102               	movlb	2	; () banked
  6540  0162AC  6FFF               	movwf	(_Wind_Pulse_width_2+1)& (0+255),b
  6541                           
  6542                           ;RPM_Measurement.c: 197: WRPM_Counter_1 = (Timer1_OF_counter_Wind_2_temp_New - Timer1_OF
      +                          _counter_Wind_2_temp_Old);
  6543  0162AE  C2A4  F0B4         	movff	_Timer1_OF_counter_Wind_2_temp_Old,??_Wind_Speed_2_Cal
  6544  0162B2  C2A5  F0B5         	movff	_Timer1_OF_counter_Wind_2_temp_Old+1,??_Wind_Speed_2_Cal+1
  6545  0162B6  0100               	movlb	0	; () banked
  6546  0162B8  1FB4               	comf	??_Wind_Speed_2_Cal& (0+255),f,b
  6547  0162BA  1FB5               	comf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6548  0162BC  4BB4               	infsnz	??_Wind_Speed_2_Cal& (0+255),f,b
  6549  0162BE  2BB5               	incf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6550  0162C0  0101               	movlb	1	; () banked
  6551  0162C2  5138               	movf	_Timer1_OF_counter_Wind_2_temp_New& (0+255),w,b
  6552  0162C4  0100               	movlb	0	; () banked
  6553  0162C6  25B4               	addwf	??_Wind_Speed_2_Cal& (0+255),w,b
  6554  0162C8  0102               	movlb	2	; () banked
  6555  0162CA  6FAE               	movwf	_WRPM_Counter_1& (0+255),b
  6556  0162CC  0101               	movlb	1	; () banked
  6557  0162CE  5139               	movf	(_Timer1_OF_counter_Wind_2_temp_New+1)& (0+255),w,b
  6558  0162D0  0100               	movlb	0	; () banked
  6559  0162D2  21B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),w,b
  6560  0162D4  D038               	goto	L3
  6561  0162D6                     l22895:
  6562                           
  6563                           ;RPM_Measurement.c: 199: else
  6564                           ;RPM_Measurement.c: 200: {
  6565                           ;RPM_Measurement.c: 201: Wind_Pulse_width_2 = (Wind_Cap_New_2 - Wind_Cap_Old_2 + 1) + 65
      +                          536;
  6566  0162D6  C146  F0B4         	movff	_Wind_Cap_Old_2,??_Wind_Speed_2_Cal
  6567  0162DA  C147  F0B5         	movff	_Wind_Cap_Old_2+1,??_Wind_Speed_2_Cal+1
  6568  0162DE  0100               	movlb	0	; () banked
  6569  0162E0  1FB4               	comf	??_Wind_Speed_2_Cal& (0+255),f,b
  6570  0162E2  1FB5               	comf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6571  0162E4  4BB4               	infsnz	??_Wind_Speed_2_Cal& (0+255),f,b
  6572  0162E6  2BB5               	incf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6573  0162E8  0101               	movlb	1	; () banked
  6574  0162EA  5142               	movf	_Wind_Cap_New_2& (0+255),w,b
  6575  0162EC  0100               	movlb	0	; () banked
  6576  0162EE  27B4               	addwf	??_Wind_Speed_2_Cal& (0+255),f,b
  6577  0162F0  0101               	movlb	1	; () banked
  6578  0162F2  5143               	movf	(_Wind_Cap_New_2+1)& (0+255),w,b
  6579  0162F4  0100               	movlb	0	; () banked
  6580  0162F6  23B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6581  0162F8  0E01               	movlw	1
  6582  0162FA  0100               	movlb	0	; () banked
  6583  0162FC  25B4               	addwf	??_Wind_Speed_2_Cal& (0+255),w,b
  6584  0162FE  0102               	movlb	2	; () banked
  6585  016300  6FFE               	movwf	_Wind_Pulse_width_2& (0+255),b
  6586  016302  0E00               	movlw	0
  6587  016304  0100               	movlb	0	; () banked
  6588  016306  21B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),w,b
  6589  016308  0102               	movlb	2	; () banked
  6590  01630A  6FFF               	movwf	(_Wind_Pulse_width_2+1)& (0+255),b
  6591                           
  6592                           ;RPM_Measurement.c: 202: WRPM_Counter_1 = (Timer1_OF_counter_Wind_2_temp_New - Timer1_OF
      +                          _counter_Wind_2_temp_Old);
  6593  01630C  C2A4  F0B4         	movff	_Timer1_OF_counter_Wind_2_temp_Old,??_Wind_Speed_2_Cal
  6594  016310  C2A5  F0B5         	movff	_Timer1_OF_counter_Wind_2_temp_Old+1,??_Wind_Speed_2_Cal+1
  6595  016314  0100               	movlb	0	; () banked
  6596  016316  1FB4               	comf	??_Wind_Speed_2_Cal& (0+255),f,b
  6597  016318  1FB5               	comf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6598  01631A  4BB4               	infsnz	??_Wind_Speed_2_Cal& (0+255),f,b
  6599  01631C  2BB5               	incf	(??_Wind_Speed_2_Cal+1)& (0+255),f,b
  6600  01631E  0101               	movlb	1	; () banked
  6601  016320  5138               	movf	_Timer1_OF_counter_Wind_2_temp_New& (0+255),w,b
  6602  016322  0100               	movlb	0	; () banked
  6603  016324  25B4               	addwf	??_Wind_Speed_2_Cal& (0+255),w,b
  6604  016326  0102               	movlb	2	; () banked
  6605  016328  6FAE               	movwf	_WRPM_Counter_1& (0+255),b
  6606  01632A  0101               	movlb	1	; () banked
  6607  01632C  5139               	movf	(_Timer1_OF_counter_Wind_2_temp_New+1)& (0+255),w,b
  6608  01632E  0100               	movlb	0	; () banked
  6609  016330  21B5               	addwfc	(??_Wind_Speed_2_Cal+1)& (0+255),w,b
  6610  016332  0102               	movlb	2	; () banked
  6611  016334  6FAF               	movwf	(_WRPM_Counter_1+1)& (0+255),b
  6612                           
  6613                           ;RPM_Measurement.c: 203: WRPM_Counter_1 = WRPM_Counter_1 -1;
  6614  016336  0EFF               	movlw	255
  6615  016338  0102               	movlb	2	; () banked
  6616  01633A  25AE               	addwf	_WRPM_Counter_1& (0+255),w,b
  6617  01633C  0102               	movlb	2	; () banked
  6618  01633E  6FAE               	movwf	_WRPM_Counter_1& (0+255),b
  6619  016340  0EFF               	movlw	255
  6620  016342  0102               	movlb	2	; () banked
  6621  016344  21AF               	addwfc	(_WRPM_Counter_1+1)& (0+255),w,b
  6622  016346                     L3:
  6623  016346  0102               	movlb	2	; () banked
  6624  016348  6FAF               	movwf	(_WRPM_Counter_1+1)& (0+255),b
  6625                           
  6626                           ; BSR set to: 2
  6627                           ;RPM_Measurement.c: 204: }
  6628                           ;RPM_Measurement.c: 207: Wind_Time_2 = 0.000004 * Wind_Pulse_width_2;
  6629                           
  6630                           ; BSR set to: 2
  6631  01634A  C2FE  F068         	movff	_Wind_Pulse_width_2,___lwtoft@c
  6632  01634E  C2FF  F069         	movff	_Wind_Pulse_width_2+1,___lwtoft@c+1
  6633  016352  EC6E  F0D7         	call	___lwtoft	;wreg free
  6634  016356  C068  F074         	movff	?___lwtoft,___ftmul@f1
  6635  01635A  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  6636  01635E  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  6637  016362  0E38               	movlw	56
  6638  016364  0100               	movlb	0	; () banked
  6639  016366  6F77               	movwf	___ftmul@f2& (0+255),b
  6640  016368  0E86               	movlw	134
  6641  01636A  0100               	movlb	0	; () banked
  6642  01636C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6643  01636E  0E36               	movlw	54
  6644  016370  0100               	movlb	0	; () banked
  6645  016372  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6646  016374  ECA4  F0C0         	call	___ftmul	;wreg free
  6647  016378  C074  F4CC         	movff	?___ftmul,_Wind_Time_2
  6648  01637C  C075  F4CD         	movff	?___ftmul+1,_Wind_Time_2+1
  6649  016380  C076  F4CE         	movff	?___ftmul+2,_Wind_Time_2+2
  6650                           
  6651                           ;RPM_Measurement.c: 209: wind_Time_1_2 = Wind_Time_2 + (0.262 * WRPM_Counter_1);
  6652  016384  0E25               	movlw	37
  6653  016386  0100               	movlb	0	; () banked
  6654  016388  6F77               	movwf	___ftmul@f2& (0+255),b
  6655  01638A  0E86               	movlw	134
  6656  01638C  0100               	movlb	0	; () banked
  6657  01638E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6658  016390  0E3E               	movlw	62
  6659  016392  0100               	movlb	0	; () banked
  6660  016394  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6661  016396  C2AE  F068         	movff	_WRPM_Counter_1,___lwtoft@c
  6662  01639A  C2AF  F069         	movff	_WRPM_Counter_1+1,___lwtoft@c+1
  6663  01639E  EC6E  F0D7         	call	___lwtoft	;wreg free
  6664  0163A2  C068  F074         	movff	?___lwtoft,___ftmul@f1
  6665  0163A6  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  6666  0163AA  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  6667  0163AE  ECA4  F0C0         	call	___ftmul	;wreg free
  6668  0163B2  C074  F08D         	movff	?___ftmul,___ftadd@f1
  6669  0163B6  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  6670  0163BA  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  6671  0163BE  C4CC  F090         	movff	_Wind_Time_2,___ftadd@f2
  6672  0163C2  C4CD  F091         	movff	_Wind_Time_2+1,___ftadd@f2+1
  6673  0163C6  C4CE  F092         	movff	_Wind_Time_2+2,___ftadd@f2+2
  6674  0163CA  EC69  F0B2         	call	___ftadd	;wreg free
  6675  0163CE  C08D  F4FC         	movff	?___ftadd,_wind_Time_1_2
  6676  0163D2  C08E  F4FD         	movff	?___ftadd+1,_wind_Time_1_2+1
  6677  0163D6  C08F  F4FE         	movff	?___ftadd+2,_wind_Time_1_2+2
  6678                           
  6679                           ;RPM_Measurement.c: 211: wind_Frequency_2 = (1/wind_Time_1_2);
  6680  0163DA  0E00               	movlw	0
  6681  0163DC  0100               	movlb	0	; () banked
  6682  0163DE  6FA5               	movwf	___ftdiv@f1& (0+255),b
  6683  0163E0  0E80               	movlw	128
  6684  0163E2  0100               	movlb	0	; () banked
  6685  0163E4  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
  6686  0163E6  0E3F               	movlw	63
  6687  0163E8  0100               	movlb	0	; () banked
  6688  0163EA  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
  6689  0163EC  C4FC  F0A8         	movff	_wind_Time_1_2,___ftdiv@f2
  6690  0163F0  C4FD  F0A9         	movff	_wind_Time_1_2+1,___ftdiv@f2+1
  6691  0163F4  C4FE  F0AA         	movff	_wind_Time_1_2+2,___ftdiv@f2+2
  6692  0163F8  EC53  F0C1         	call	___ftdiv	;wreg free
  6693  0163FC  C0A5  F4D8         	movff	?___ftdiv,_wind_Frequency_2
  6694  016400  C0A6  F4D9         	movff	?___ftdiv+1,_wind_Frequency_2+1
  6695  016404  C0A7  F4DA         	movff	?___ftdiv+2,_wind_Frequency_2+2
  6696                           
  6697                           ;RPM_Measurement.c: 212: wind_2 = (wind_Frequency_2 / 6);
  6698  016408  C4D8  F0A5         	movff	_wind_Frequency_2,___ftdiv@f1
  6699  01640C  C4D9  F0A6         	movff	_wind_Frequency_2+1,___ftdiv@f1+1
  6700  016410  C4DA  F0A7         	movff	_wind_Frequency_2+2,___ftdiv@f1+2
  6701  016414  0E00               	movlw	0
  6702  016416  0100               	movlb	0	; () banked
  6703  016418  6FA8               	movwf	___ftdiv@f2& (0+255),b
  6704  01641A  0EC0               	movlw	192
  6705  01641C  0100               	movlb	0	; () banked
  6706  01641E  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  6707  016420  0E40               	movlw	64
  6708  016422  0100               	movlb	0	; () banked
  6709  016424  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  6710  016426  EC53  F0C1         	call	___ftdiv	;wreg free
  6711  01642A  C0A5  F4D5         	movff	?___ftdiv,_wind_2
  6712  01642E  C0A6  F4D6         	movff	?___ftdiv+1,_wind_2+1
  6713  016432  C0A7  F4D7         	movff	?___ftdiv+2,_wind_2+2
  6714                           
  6715                           ;RPM_Measurement.c: 213: Wind_Speed_2 = ((wind_2 * (143))/100);
  6716  016436  0E00               	movlw	0
  6717  016438  0100               	movlb	0	; () banked
  6718  01643A  6F77               	movwf	___ftmul@f2& (0+255),b
  6719  01643C  0E0F               	movlw	15
  6720  01643E  0100               	movlb	0	; () banked
  6721  016440  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6722  016442  0E43               	movlw	67
  6723  016444  0100               	movlb	0	; () banked
  6724  016446  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6725  016448  C4D5  F074         	movff	_wind_2,___ftmul@f1
  6726  01644C  C4D6  F075         	movff	_wind_2+1,___ftmul@f1+1
  6727  016450  C4D7  F076         	movff	_wind_2+2,___ftmul@f1+2
  6728  016454  ECA4  F0C0         	call	___ftmul	;wreg free
  6729  016458  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
  6730  01645C  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
  6731  016460  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
  6732  016464  0E00               	movlw	0
  6733  016466  0100               	movlb	0	; () banked
  6734  016468  6FA8               	movwf	___ftdiv@f2& (0+255),b
  6735  01646A  0EC8               	movlw	200
  6736  01646C  0100               	movlb	0	; () banked
  6737  01646E  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  6738  016470  0E42               	movlw	66
  6739  016472  0100               	movlb	0	; () banked
  6740  016474  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  6741  016476  EC53  F0C1         	call	___ftdiv	;wreg free
  6742  01647A  C0A5  F242         	movff	?___ftdiv,_Wind_Speed_2
  6743  01647E  C0A6  F243         	movff	?___ftdiv+1,_Wind_Speed_2+1
  6744  016482  C0A7  F244         	movff	?___ftdiv+2,_Wind_Speed_2+2
  6745                           
  6746                           ;RPM_Measurement.c: 215: Timer1_OF_counter_Wind_2 = 0;
  6747  016486  0E00               	movlw	0
  6748  016488  0103               	movlb	3	; () banked
  6749  01648A  6FF9               	movwf	(_Timer1_OF_counter_Wind_2+1)& (0+255),b
  6750  01648C  0E00               	movlw	0
  6751  01648E  6FF8               	movwf	_Timer1_OF_counter_Wind_2& (0+255),b
  6752                           
  6753                           ; BSR set to: 3
  6754                           ;RPM_Measurement.c: 216: wind_Frequency_2 = 0;
  6755  016490  0E00               	movlw	0
  6756  016492  0104               	movlb	4	; () banked
  6757  016494  6FD8               	movwf	_wind_Frequency_2& (0+255),b
  6758  016496  0E00               	movlw	0
  6759  016498  0104               	movlb	4	; () banked
  6760  01649A  6FD9               	movwf	(_wind_Frequency_2+1)& (0+255),b
  6761  01649C  0E00               	movlw	0
  6762  01649E  0104               	movlb	4	; () banked
  6763  0164A0  6FDA               	movwf	(_wind_Frequency_2+2)& (0+255),b
  6764                           
  6765                           ; BSR set to: 4
  6766                           ;RPM_Measurement.c: 217: wind_Time_1_2 = 0;
  6767  0164A2  0E00               	movlw	0
  6768  0164A4  0104               	movlb	4	; () banked
  6769  0164A6  6FFC               	movwf	_wind_Time_1_2& (0+255),b
  6770  0164A8  0E00               	movlw	0
  6771  0164AA  0104               	movlb	4	; () banked
  6772  0164AC  6FFD               	movwf	(_wind_Time_1_2+1)& (0+255),b
  6773  0164AE  0E00               	movlw	0
  6774  0164B0  0104               	movlb	4	; () banked
  6775  0164B2  6FFE               	movwf	(_wind_Time_1_2+2)& (0+255),b
  6776                           
  6777                           ; BSR set to: 4
  6778                           ;RPM_Measurement.c: 218: Wind_Time_2 = 0;
  6779  0164B4  0E00               	movlw	0
  6780  0164B6  0104               	movlb	4	; () banked
  6781  0164B8  6FCC               	movwf	_Wind_Time_2& (0+255),b
  6782  0164BA  0E00               	movlw	0
  6783  0164BC  0104               	movlb	4	; () banked
  6784  0164BE  6FCD               	movwf	(_Wind_Time_2+1)& (0+255),b
  6785  0164C0  0E00               	movlw	0
  6786  0164C2  0104               	movlb	4	; () banked
  6787  0164C4  6FCE               	movwf	(_Wind_Time_2+2)& (0+255),b
  6788                           
  6789                           ; BSR set to: 4
  6790                           ;RPM_Measurement.c: 219: Wind_Pulse_width_2 = 0;
  6791  0164C6  0E00               	movlw	0
  6792  0164C8  0102               	movlb	2	; () banked
  6793  0164CA  6FFF               	movwf	(_Wind_Pulse_width_2+1)& (0+255),b
  6794  0164CC  0E00               	movlw	0
  6795  0164CE  6FFE               	movwf	_Wind_Pulse_width_2& (0+255),b
  6796                           
  6797                           ; BSR set to: 2
  6798  0164D0  0012               	return		;funcret
  6799  0164D2                     __end_of_Wind_Speed_2_Cal:
  6800                           	opt stack 0
  6801                           tblptru	equ	0xFF8
  6802                           tblptrh	equ	0xFF7
  6803                           tblptrl	equ	0xFF6
  6804                           tablat	equ	0xFF5
  6805                           intcon	equ	0xFF2
  6806                           postinc0	equ	0xFEE
  6807                           wreg	equ	0xFE8
  6808                           postdec1	equ	0xFE5
  6809                           fsr1h	equ	0xFE2
  6810                           fsr1l	equ	0xFE1
  6811                           status	equ	0xFD8
  6812                           
  6813 ;; *************** function _Volt_Curr_Read *****************
  6814 ;; Defined at:
  6815 ;;		line 140 in file "Power_Meter.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;		None
  6818 ;; Auto vars:     Size  Location     Type
  6819 ;;		None
  6820 ;; Return value:  Size  Location     Type
  6821 ;;                  1    wreg      void 
  6822 ;; Registers used:
  6823 ;;		wreg, status,2, status,0, cstack
  6824 ;; Tracked objects:
  6825 ;;		On entry : 0/0
  6826 ;;		On exit  : 0/0
  6827 ;;		Unchanged: 0/0
  6828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;Total ram usage:        0 bytes
  6834 ;; Hardware stack levels used:    1
  6835 ;; Hardware stack levels required when called:    5
  6836 ;; This function calls:
  6837 ;;		_Read_Adc
  6838 ;;		___ftge
  6839 ;;		___lwtoft
  6840 ;; This function is called by:
  6841 ;;		_main
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text9
  6846  014A96                     __ptext9:
  6847                           	opt stack 0
  6848  014A96                     _Volt_Curr_Read:
  6849                           	opt stack 25
  6850                           
  6851                           ;Power_Meter.c: 143: switch (Case_Call)
  6852                           
  6853                           ; BSR set to: 2
  6854                           ;incstack = 0
  6855  014A96  D1C2               	goto	l22447
  6856  014A98                     l22397:
  6857                           
  6858                           ;Power_Meter.c: 147: Case_Call = 2;
  6859  014A98  0E02               	movlw	2
  6860  014A9A  0101               	movlb	1	; () banked
  6861  014A9C  6FC7               	movwf	_Case_Call& (0+255),b
  6862                           
  6863                           ;Power_Meter.c: 149: R_V_Max = 0;
  6864  014A9E  0E00               	movlw	0
  6865  014AA0  0101               	movlb	1	; () banked
  6866  014AA2  6F12               	movwf	_R_V_Max& (0+255),b
  6867  014AA4  0E00               	movlw	0
  6868  014AA6  0101               	movlb	1	; () banked
  6869  014AA8  6F13               	movwf	(_R_V_Max+1)& (0+255),b
  6870  014AAA  0E00               	movlw	0
  6871  014AAC  0101               	movlb	1	; () banked
  6872  014AAE  6F14               	movwf	(_R_V_Max+2)& (0+255),b
  6873                           
  6874                           ;Power_Meter.c: 150: R_C_Max = 0;
  6875  014AB0  0E00               	movlw	0
  6876  014AB2  0101               	movlb	1	; () banked
  6877  014AB4  6F0C               	movwf	_R_C_Max& (0+255),b
  6878  014AB6  0E00               	movlw	0
  6879  014AB8  0101               	movlb	1	; () banked
  6880  014ABA  6F0D               	movwf	(_R_C_Max+1)& (0+255),b
  6881  014ABC  0E00               	movlw	0
  6882  014ABE  0101               	movlb	1	; () banked
  6883  014AC0  6F0E               	movwf	(_R_C_Max+2)& (0+255),b
  6884                           
  6885                           ;Power_Meter.c: 152: for(i=0; i<70; i++)
  6886  014AC2  0E00               	movlw	0
  6887  014AC4  6E21               	movwf	_i,c
  6888  014AC6                     l22399:
  6889                           
  6890                           ; BSR set to: 1
  6891  014AC6  0E45               	movlw	69
  6892  014AC8  6421               	cpfsgt	_i,c
  6893  014ACA  D001               	goto	l22403
  6894  014ACC  D056               	goto	l9179
  6895  014ACE                     l22403:
  6896                           
  6897                           ;Power_Meter.c: 153: {
  6898                           ;Power_Meter.c: 154: R_V = Read_Adc(1);
  6899  014ACE  0E01               	movlw	1
  6900  014AD0  ECA9  F0D5         	call	_Read_Adc
  6901  014AD4  C060  F29E         	movff	?_Read_Adc,_R_V
  6902  014AD8  C061  F29F         	movff	?_Read_Adc+1,_R_V+1
  6903                           
  6904                           ;Power_Meter.c: 155: R_C = Read_Adc(9);
  6905  014ADC  0E09               	movlw	9
  6906  014ADE  ECA9  F0D5         	call	_Read_Adc
  6907  014AE2  C060  F29C         	movff	?_Read_Adc,_R_C
  6908  014AE6  C061  F29D         	movff	?_Read_Adc+1,_R_C+1
  6909                           
  6910                           ;Power_Meter.c: 157: if(R_V_Max < R_V)
  6911  014AEA  C112  F099         	movff	_R_V_Max,___ftge@ff1
  6912  014AEE  C113  F09A         	movff	_R_V_Max+1,___ftge@ff1+1
  6913  014AF2  C114  F09B         	movff	_R_V_Max+2,___ftge@ff1+2
  6914  014AF6  C29E  F068         	movff	_R_V,___lwtoft@c
  6915  014AFA  C29F  F069         	movff	_R_V+1,___lwtoft@c+1
  6916  014AFE  EC6E  F0D7         	call	___lwtoft	;wreg free
  6917  014B02  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  6918  014B06  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  6919  014B0A  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  6920  014B0E  ECEB  F0CA         	call	___ftge	;wreg free
  6921  014B12  0100               	movlb	0	; () banked
  6922  014B14  B0D8               	btfsc	status,0,c
  6923  014B16  D00C               	goto	l9180
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;Power_Meter.c: 158: {
  6927                           ;Power_Meter.c: 159: R_V_Max = R_V;
  6928  014B18  C29E  F068         	movff	_R_V,___lwtoft@c
  6929  014B1C  C29F  F069         	movff	_R_V+1,___lwtoft@c+1
  6930  014B20  EC6E  F0D7         	call	___lwtoft	;wreg free
  6931  014B24  C068  F112         	movff	?___lwtoft,_R_V_Max
  6932  014B28  C069  F113         	movff	?___lwtoft+1,_R_V_Max+1
  6933  014B2C  C06A  F114         	movff	?___lwtoft+2,_R_V_Max+2
  6934  014B30                     l9180:
  6935                           
  6936                           ;Power_Meter.c: 160: }
  6937                           ;Power_Meter.c: 162: if(R_C_Max < R_C)
  6938  014B30  C10C  F099         	movff	_R_C_Max,___ftge@ff1
  6939  014B34  C10D  F09A         	movff	_R_C_Max+1,___ftge@ff1+1
  6940  014B38  C10E  F09B         	movff	_R_C_Max+2,___ftge@ff1+2
  6941  014B3C  C29C  F068         	movff	_R_C,___lwtoft@c
  6942  014B40  C29D  F069         	movff	_R_C+1,___lwtoft@c+1
  6943  014B44  EC6E  F0D7         	call	___lwtoft	;wreg free
  6944  014B48  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  6945  014B4C  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  6946  014B50  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  6947  014B54  ECEB  F0CA         	call	___ftge	;wreg free
  6948  014B58  0100               	movlb	0	; () banked
  6949  014B5A  B0D8               	btfsc	status,0,c
  6950  014B5C  D00C               	goto	l22409
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;Power_Meter.c: 163: {
  6954                           ;Power_Meter.c: 164: R_C_Max = R_C;
  6955  014B5E  C29C  F068         	movff	_R_C,___lwtoft@c
  6956  014B62  C29D  F069         	movff	_R_C+1,___lwtoft@c+1
  6957  014B66  EC6E  F0D7         	call	___lwtoft	;wreg free
  6958  014B6A  C068  F10C         	movff	?___lwtoft,_R_C_Max
  6959  014B6E  C069  F10D         	movff	?___lwtoft+1,_R_C_Max+1
  6960  014B72  C06A  F10E         	movff	?___lwtoft+2,_R_C_Max+2
  6961  014B76                     l22409:
  6962  014B76  2A21               	incf	_i,f,c
  6963  014B78  D7A6               	goto	l22399
  6964  014B7A                     l9179:
  6965                           
  6966                           ;Power_Meter.c: 165: }
  6967                           ;Power_Meter.c: 166: }
  6968                           ;Power_Meter.c: 168: R_V_Arr[2] = R_V_Arr[1];
  6969  014B7A  C487  F48A         	movff	_R_V_Arr+3,_R_V_Arr+6
  6970  014B7E  C488  F48B         	movff	_R_V_Arr+4,_R_V_Arr+7
  6971  014B82  C489  F48C         	movff	_R_V_Arr+5,_R_V_Arr+8
  6972                           
  6973                           ;Power_Meter.c: 169: R_V_Arr[1] = R_V_Arr[0];
  6974  014B86  C484  F487         	movff	_R_V_Arr,_R_V_Arr+3
  6975  014B8A  C485  F488         	movff	_R_V_Arr+1,_R_V_Arr+4
  6976  014B8E  C486  F489         	movff	_R_V_Arr+2,_R_V_Arr+5
  6977                           
  6978                           ;Power_Meter.c: 170: R_V_Arr[0] = R_V_Max;
  6979  014B92  C112  F484         	movff	_R_V_Max,_R_V_Arr
  6980  014B96  C113  F485         	movff	_R_V_Max+1,_R_V_Arr+1
  6981  014B9A  C114  F486         	movff	_R_V_Max+2,_R_V_Arr+2
  6982                           
  6983                           ;Power_Meter.c: 172: R_C_Arr[2] = R_C_Arr[1];
  6984  014B9E  C47E  F481         	movff	_R_C_Arr+3,_R_C_Arr+6
  6985  014BA2  C47F  F482         	movff	_R_C_Arr+4,_R_C_Arr+7
  6986  014BA6  C480  F483         	movff	_R_C_Arr+5,_R_C_Arr+8
  6987                           
  6988                           ;Power_Meter.c: 173: R_C_Arr[1] = R_C_Arr[0];
  6989  014BAA  C47B  F47E         	movff	_R_C_Arr,_R_C_Arr+3
  6990  014BAE  C47C  F47F         	movff	_R_C_Arr+1,_R_C_Arr+4
  6991  014BB2  C47D  F480         	movff	_R_C_Arr+2,_R_C_Arr+5
  6992                           
  6993                           ;Power_Meter.c: 174: R_C_Arr[0] = R_C_Max;
  6994  014BB6  C10C  F47B         	movff	_R_C_Max,_R_C_Arr
  6995  014BBA  C10D  F47C         	movff	_R_C_Max+1,_R_C_Arr+1
  6996  014BBE  C10E  F47D         	movff	_R_C_Max+2,_R_C_Arr+2
  6997                           
  6998                           ;Power_Meter.c: 176: break;
  6999  014BC2  0012               	return	
  7000  014BC4                     l22413:
  7001                           
  7002                           ;Power_Meter.c: 180: Case_Call = 3;
  7003  014BC4  0E03               	movlw	3
  7004  014BC6  0101               	movlb	1	; () banked
  7005  014BC8  6FC7               	movwf	_Case_Call& (0+255),b
  7006                           
  7007                           ;Power_Meter.c: 182: Y_V_Max = 0;
  7008  014BCA  0E00               	movlw	0
  7009  014BCC  0102               	movlb	2	; () banked
  7010  014BCE  6F75               	movwf	_Y_V_Max& (0+255),b
  7011  014BD0  0E00               	movlw	0
  7012  014BD2  0102               	movlb	2	; () banked
  7013  014BD4  6F76               	movwf	(_Y_V_Max+1)& (0+255),b
  7014  014BD6  0E00               	movlw	0
  7015  014BD8  0102               	movlb	2	; () banked
  7016  014BDA  6F77               	movwf	(_Y_V_Max+2)& (0+255),b
  7017                           
  7018                           ;Power_Meter.c: 183: Y_C_Max = 0;
  7019  014BDC  0E00               	movlw	0
  7020  014BDE  0102               	movlb	2	; () banked
  7021  014BE0  6F6F               	movwf	_Y_C_Max& (0+255),b
  7022  014BE2  0E00               	movlw	0
  7023  014BE4  0102               	movlb	2	; () banked
  7024  014BE6  6F70               	movwf	(_Y_C_Max+1)& (0+255),b
  7025  014BE8  0E00               	movlw	0
  7026  014BEA  0102               	movlb	2	; () banked
  7027  014BEC  6F71               	movwf	(_Y_C_Max+2)& (0+255),b
  7028                           
  7029                           ;Power_Meter.c: 185: for(i=0; i<70; i++)
  7030  014BEE  0E00               	movlw	0
  7031  014BF0  6E21               	movwf	_i,c
  7032  014BF2                     l22415:
  7033                           
  7034                           ; BSR set to: 2
  7035  014BF2  0E45               	movlw	69
  7036  014BF4  6421               	cpfsgt	_i,c
  7037  014BF6  D001               	goto	l22419
  7038  014BF8  D056               	goto	l9185
  7039  014BFA                     l22419:
  7040                           
  7041                           ;Power_Meter.c: 186: {
  7042                           ;Power_Meter.c: 187: Y_V = Read_Adc(2);
  7043  014BFA  0E02               	movlw	2
  7044  014BFC  ECA9  F0D5         	call	_Read_Adc
  7045  014C00  C060  F2B8         	movff	?_Read_Adc,_Y_V
  7046  014C04  C061  F2B9         	movff	?_Read_Adc+1,_Y_V+1
  7047                           
  7048                           ;Power_Meter.c: 188: Y_C = Read_Adc(10);
  7049  014C08  0E0A               	movlw	10
  7050  014C0A  ECA9  F0D5         	call	_Read_Adc
  7051  014C0E  C060  F2B6         	movff	?_Read_Adc,_Y_C
  7052  014C12  C061  F2B7         	movff	?_Read_Adc+1,_Y_C+1
  7053                           
  7054                           ;Power_Meter.c: 190: if(Y_V_Max < Y_V)
  7055  014C16  C275  F099         	movff	_Y_V_Max,___ftge@ff1
  7056  014C1A  C276  F09A         	movff	_Y_V_Max+1,___ftge@ff1+1
  7057  014C1E  C277  F09B         	movff	_Y_V_Max+2,___ftge@ff1+2
  7058  014C22  C2B8  F068         	movff	_Y_V,___lwtoft@c
  7059  014C26  C2B9  F069         	movff	_Y_V+1,___lwtoft@c+1
  7060  014C2A  EC6E  F0D7         	call	___lwtoft	;wreg free
  7061  014C2E  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  7062  014C32  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  7063  014C36  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  7064  014C3A  ECEB  F0CA         	call	___ftge	;wreg free
  7065  014C3E  0100               	movlb	0	; () banked
  7066  014C40  B0D8               	btfsc	status,0,c
  7067  014C42  D00C               	goto	l9186
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;Power_Meter.c: 191: {
  7071                           ;Power_Meter.c: 192: Y_V_Max = Y_V;
  7072  014C44  C2B8  F068         	movff	_Y_V,___lwtoft@c
  7073  014C48  C2B9  F069         	movff	_Y_V+1,___lwtoft@c+1
  7074  014C4C  EC6E  F0D7         	call	___lwtoft	;wreg free
  7075  014C50  C068  F275         	movff	?___lwtoft,_Y_V_Max
  7076  014C54  C069  F276         	movff	?___lwtoft+1,_Y_V_Max+1
  7077  014C58  C06A  F277         	movff	?___lwtoft+2,_Y_V_Max+2
  7078  014C5C                     l9186:
  7079                           
  7080                           ;Power_Meter.c: 193: }
  7081                           ;Power_Meter.c: 195: if(Y_C_Max < Y_C)
  7082  014C5C  C26F  F099         	movff	_Y_C_Max,___ftge@ff1
  7083  014C60  C270  F09A         	movff	_Y_C_Max+1,___ftge@ff1+1
  7084  014C64  C271  F09B         	movff	_Y_C_Max+2,___ftge@ff1+2
  7085  014C68  C2B6  F068         	movff	_Y_C,___lwtoft@c
  7086  014C6C  C2B7  F069         	movff	_Y_C+1,___lwtoft@c+1
  7087  014C70  EC6E  F0D7         	call	___lwtoft	;wreg free
  7088  014C74  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  7089  014C78  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  7090  014C7C  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  7091  014C80  ECEB  F0CA         	call	___ftge	;wreg free
  7092  014C84  0100               	movlb	0	; () banked
  7093  014C86  B0D8               	btfsc	status,0,c
  7094  014C88  D00C               	goto	l22425
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;Power_Meter.c: 196: {
  7098                           ;Power_Meter.c: 197: Y_C_Max = Y_C;
  7099  014C8A  C2B6  F068         	movff	_Y_C,___lwtoft@c
  7100  014C8E  C2B7  F069         	movff	_Y_C+1,___lwtoft@c+1
  7101  014C92  EC6E  F0D7         	call	___lwtoft	;wreg free
  7102  014C96  C068  F26F         	movff	?___lwtoft,_Y_C_Max
  7103  014C9A  C069  F270         	movff	?___lwtoft+1,_Y_C_Max+1
  7104  014C9E  C06A  F271         	movff	?___lwtoft+2,_Y_C_Max+2
  7105  014CA2                     l22425:
  7106  014CA2  2A21               	incf	_i,f,c
  7107  014CA4  D7A6               	goto	l22415
  7108  014CA6                     l9185:
  7109                           
  7110                           ;Power_Meter.c: 198: }
  7111                           ;Power_Meter.c: 199: }
  7112                           ;Power_Meter.c: 201: Y_V_Arr[2] = Y_V_Arr[1];
  7113  014CA6  C499  F49C         	movff	_Y_V_Arr+3,_Y_V_Arr+6
  7114  014CAA  C49A  F49D         	movff	_Y_V_Arr+4,_Y_V_Arr+7
  7115  014CAE  C49B  F49E         	movff	_Y_V_Arr+5,_Y_V_Arr+8
  7116                           
  7117                           ;Power_Meter.c: 202: Y_V_Arr[1] = Y_V_Arr[0];
  7118  014CB2  C496  F499         	movff	_Y_V_Arr,_Y_V_Arr+3
  7119  014CB6  C497  F49A         	movff	_Y_V_Arr+1,_Y_V_Arr+4
  7120  014CBA  C498  F49B         	movff	_Y_V_Arr+2,_Y_V_Arr+5
  7121                           
  7122                           ;Power_Meter.c: 203: Y_V_Arr[0] = Y_V_Max;
  7123  014CBE  C275  F496         	movff	_Y_V_Max,_Y_V_Arr
  7124  014CC2  C276  F497         	movff	_Y_V_Max+1,_Y_V_Arr+1
  7125  014CC6  C277  F498         	movff	_Y_V_Max+2,_Y_V_Arr+2
  7126                           
  7127                           ;Power_Meter.c: 205: Y_C_Arr[2] = Y_C_Arr[1];
  7128  014CCA  C490  F493         	movff	_Y_C_Arr+3,_Y_C_Arr+6
  7129  014CCE  C491  F494         	movff	_Y_C_Arr+4,_Y_C_Arr+7
  7130  014CD2  C492  F495         	movff	_Y_C_Arr+5,_Y_C_Arr+8
  7131                           
  7132                           ;Power_Meter.c: 206: Y_C_Arr[1] = Y_C_Arr[0];
  7133  014CD6  C48D  F490         	movff	_Y_C_Arr,_Y_C_Arr+3
  7134  014CDA  C48E  F491         	movff	_Y_C_Arr+1,_Y_C_Arr+4
  7135  014CDE  C48F  F492         	movff	_Y_C_Arr+2,_Y_C_Arr+5
  7136                           
  7137                           ;Power_Meter.c: 207: Y_C_Arr[0] = Y_C_Max;
  7138  014CE2  C26F  F48D         	movff	_Y_C_Max,_Y_C_Arr
  7139  014CE6  C270  F48E         	movff	_Y_C_Max+1,_Y_C_Arr+1
  7140  014CEA  C271  F48F         	movff	_Y_C_Max+2,_Y_C_Arr+2
  7141                           
  7142                           ;Power_Meter.c: 209: break;
  7143  014CEE  0012               	return	
  7144  014CF0                     l22429:
  7145                           
  7146                           ;Power_Meter.c: 213: Case_Call = 1;
  7147  014CF0  0E01               	movlw	1
  7148  014CF2  0101               	movlb	1	; () banked
  7149  014CF4  6FC7               	movwf	_Case_Call& (0+255),b
  7150                           
  7151                           ;Power_Meter.c: 215: B_V_Max=0;
  7152  014CF6  0E00               	movlw	0
  7153  014CF8  0102               	movlb	2	; () banked
  7154  014CFA  6F09               	movwf	_B_V_Max& (0+255),b
  7155  014CFC  0E00               	movlw	0
  7156  014CFE  0102               	movlb	2	; () banked
  7157  014D00  6F0A               	movwf	(_B_V_Max+1)& (0+255),b
  7158  014D02  0E00               	movlw	0
  7159  014D04  0102               	movlb	2	; () banked
  7160  014D06  6F0B               	movwf	(_B_V_Max+2)& (0+255),b
  7161                           
  7162                           ;Power_Meter.c: 216: B_C_Max=0;
  7163  014D08  0E00               	movlw	0
  7164  014D0A  0102               	movlb	2	; () banked
  7165  014D0C  6F06               	movwf	_B_C_Max& (0+255),b
  7166  014D0E  0E00               	movlw	0
  7167  014D10  0102               	movlb	2	; () banked
  7168  014D12  6F07               	movwf	(_B_C_Max+1)& (0+255),b
  7169  014D14  0E00               	movlw	0
  7170  014D16  0102               	movlb	2	; () banked
  7171  014D18  6F08               	movwf	(_B_C_Max+2)& (0+255),b
  7172                           
  7173                           ;Power_Meter.c: 218: for(i=0; i<70; i++)
  7174  014D1A  0E00               	movlw	0
  7175  014D1C  6E21               	movwf	_i,c
  7176  014D1E                     l22431:
  7177                           
  7178                           ; BSR set to: 2
  7179  014D1E  0E45               	movlw	69
  7180  014D20  6421               	cpfsgt	_i,c
  7181  014D22  D001               	goto	l22435
  7182  014D24  D056               	goto	l9190
  7183  014D26                     l22435:
  7184                           
  7185                           ;Power_Meter.c: 219: {
  7186                           ;Power_Meter.c: 220: B_V = Read_Adc(3);
  7187  014D26  0E03               	movlw	3
  7188  014D28  ECA9  F0D5         	call	_Read_Adc
  7189  014D2C  C060  F282         	movff	?_Read_Adc,_B_V
  7190  014D30  C061  F283         	movff	?_Read_Adc+1,_B_V+1
  7191                           
  7192                           ;Power_Meter.c: 221: B_C = Read_Adc(11);
  7193  014D34  0E0B               	movlw	11
  7194  014D36  ECA9  F0D5         	call	_Read_Adc
  7195  014D3A  C060  F280         	movff	?_Read_Adc,_B_C
  7196  014D3E  C061  F281         	movff	?_Read_Adc+1,_B_C+1
  7197                           
  7198                           ;Power_Meter.c: 223: if(B_V_Max < B_V)
  7199  014D42  C209  F099         	movff	_B_V_Max,___ftge@ff1
  7200  014D46  C20A  F09A         	movff	_B_V_Max+1,___ftge@ff1+1
  7201  014D4A  C20B  F09B         	movff	_B_V_Max+2,___ftge@ff1+2
  7202  014D4E  C282  F068         	movff	_B_V,___lwtoft@c
  7203  014D52  C283  F069         	movff	_B_V+1,___lwtoft@c+1
  7204  014D56  EC6E  F0D7         	call	___lwtoft	;wreg free
  7205  014D5A  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  7206  014D5E  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  7207  014D62  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  7208  014D66  ECEB  F0CA         	call	___ftge	;wreg free
  7209  014D6A  0100               	movlb	0	; () banked
  7210  014D6C  B0D8               	btfsc	status,0,c
  7211  014D6E  D00C               	goto	l9191
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;Power_Meter.c: 224: {
  7215                           ;Power_Meter.c: 225: B_V_Max = B_V;
  7216  014D70  C282  F068         	movff	_B_V,___lwtoft@c
  7217  014D74  C283  F069         	movff	_B_V+1,___lwtoft@c+1
  7218  014D78  EC6E  F0D7         	call	___lwtoft	;wreg free
  7219  014D7C  C068  F209         	movff	?___lwtoft,_B_V_Max
  7220  014D80  C069  F20A         	movff	?___lwtoft+1,_B_V_Max+1
  7221  014D84  C06A  F20B         	movff	?___lwtoft+2,_B_V_Max+2
  7222  014D88                     l9191:
  7223                           
  7224                           ;Power_Meter.c: 226: }
  7225                           ;Power_Meter.c: 228: if(B_C_Max < B_C)
  7226  014D88  C206  F099         	movff	_B_C_Max,___ftge@ff1
  7227  014D8C  C207  F09A         	movff	_B_C_Max+1,___ftge@ff1+1
  7228  014D90  C208  F09B         	movff	_B_C_Max+2,___ftge@ff1+2
  7229  014D94  C280  F068         	movff	_B_C,___lwtoft@c
  7230  014D98  C281  F069         	movff	_B_C+1,___lwtoft@c+1
  7231  014D9C  EC6E  F0D7         	call	___lwtoft	;wreg free
  7232  014DA0  C068  F09C         	movff	?___lwtoft,___ftge@ff2
  7233  014DA4  C069  F09D         	movff	?___lwtoft+1,___ftge@ff2+1
  7234  014DA8  C06A  F09E         	movff	?___lwtoft+2,___ftge@ff2+2
  7235  014DAC  ECEB  F0CA         	call	___ftge	;wreg free
  7236  014DB0  0100               	movlb	0	; () banked
  7237  014DB2  B0D8               	btfsc	status,0,c
  7238  014DB4  D00C               	goto	l22441
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;Power_Meter.c: 229: {
  7242                           ;Power_Meter.c: 230: B_C_Max = B_C;
  7243  014DB6  C280  F068         	movff	_B_C,___lwtoft@c
  7244  014DBA  C281  F069         	movff	_B_C+1,___lwtoft@c+1
  7245  014DBE  EC6E  F0D7         	call	___lwtoft	;wreg free
  7246  014DC2  C068  F206         	movff	?___lwtoft,_B_C_Max
  7247  014DC6  C069  F207         	movff	?___lwtoft+1,_B_C_Max+1
  7248  014DCA  C06A  F208         	movff	?___lwtoft+2,_B_C_Max+2
  7249  014DCE                     l22441:
  7250  014DCE  2A21               	incf	_i,f,c
  7251  014DD0  D7A6               	goto	l22431
  7252  014DD2                     l9190:
  7253                           
  7254                           ;Power_Meter.c: 231: }
  7255                           ;Power_Meter.c: 232: }
  7256                           ;Power_Meter.c: 234: B_V_Arr[2] = B_V_Arr[1];
  7257  014DD2  C475  F478         	movff	_B_V_Arr+3,_B_V_Arr+6
  7258  014DD6  C476  F479         	movff	_B_V_Arr+4,_B_V_Arr+7
  7259  014DDA  C477  F47A         	movff	_B_V_Arr+5,_B_V_Arr+8
  7260                           
  7261                           ;Power_Meter.c: 235: B_V_Arr[1] = B_V_Arr[0];
  7262  014DDE  C472  F475         	movff	_B_V_Arr,_B_V_Arr+3
  7263  014DE2  C473  F476         	movff	_B_V_Arr+1,_B_V_Arr+4
  7264  014DE6  C474  F477         	movff	_B_V_Arr+2,_B_V_Arr+5
  7265                           
  7266                           ;Power_Meter.c: 236: B_V_Arr[0] = B_V_Max;
  7267  014DEA  C209  F472         	movff	_B_V_Max,_B_V_Arr
  7268  014DEE  C20A  F473         	movff	_B_V_Max+1,_B_V_Arr+1
  7269  014DF2  C20B  F474         	movff	_B_V_Max+2,_B_V_Arr+2
  7270                           
  7271                           ;Power_Meter.c: 238: B_C_Arr[2] = B_C_Arr[1];
  7272  014DF6  C46C  F46F         	movff	_B_C_Arr+3,_B_C_Arr+6
  7273  014DFA  C46D  F470         	movff	_B_C_Arr+4,_B_C_Arr+7
  7274  014DFE  C46E  F471         	movff	_B_C_Arr+5,_B_C_Arr+8
  7275                           
  7276                           ;Power_Meter.c: 239: B_C_Arr[1] = B_C_Arr[0];
  7277  014E02  C469  F46C         	movff	_B_C_Arr,_B_C_Arr+3
  7278  014E06  C46A  F46D         	movff	_B_C_Arr+1,_B_C_Arr+4
  7279  014E0A  C46B  F46E         	movff	_B_C_Arr+2,_B_C_Arr+5
  7280                           
  7281                           ;Power_Meter.c: 240: B_C_Arr[0] = B_C_Max;
  7282  014E0E  C206  F469         	movff	_B_C_Max,_B_C_Arr
  7283  014E12  C207  F46A         	movff	_B_C_Max+1,_B_C_Arr+1
  7284  014E16  C208  F46B         	movff	_B_C_Max+2,_B_C_Arr+2
  7285                           
  7286                           ;Power_Meter.c: 243: }
  7287                           
  7288                           ;Power_Meter.c: 242: break;
  7289  014E1A  0012               	return	
  7290  014E1C                     l22447:
  7291  014E1C  0101               	movlb	1	; () banked
  7292  014E1E  51C7               	movf	_Case_Call& (0+255),w,b
  7293                           
  7294                           ; Switch size 1, requested type "space"
  7295                           ; Number of cases is 3, Range of values is 1 to 3
  7296                           ; switch strategies available:
  7297                           ; Name         Instructions Cycles
  7298                           ; simple_byte           10     6 (average)
  7299                           ;	Chosen strategy is simple_byte
  7300  014E20  0A01               	xorlw	1	; case 1
  7301  014E22  B4D8               	btfsc	status,2,c
  7302  014E24  D639               	goto	l22397
  7303  014E26  0A03               	xorlw	3	; case 2
  7304  014E28  B4D8               	btfsc	status,2,c
  7305  014E2A  D6CC               	goto	l22413
  7306  014E2C  0A01               	xorlw	1	; case 3
  7307  014E2E  A4D8               	btfss	status,2,c
  7308  014E30  0012               	return	
  7309  014E32  D75E               	goto	l22429
  7310  014E34                     __end_of_Volt_Curr_Read:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           intcon	equ	0xFF2
  7317                           postinc0	equ	0xFEE
  7318                           wreg	equ	0xFE8
  7319                           postdec1	equ	0xFE5
  7320                           fsr1h	equ	0xFE2
  7321                           fsr1l	equ	0xFE1
  7322                           status	equ	0xFD8
  7323                           
  7324 ;; *************** function _Volt_Curr_Avg *****************
  7325 ;; Defined at:
  7326 ;;		line 246 in file "Power_Meter.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;		None
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  1    wreg      void 
  7333 ;; Registers used:
  7334 ;;		wreg, status,2, status,0, cstack
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;Total ram usage:        3 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    5
  7347 ;; This function calls:
  7348 ;;		___ftadd
  7349 ;;		___ftdiv
  7350 ;;		___ftmul
  7351 ;; This function is called by:
  7352 ;;		_main
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           	psect	text10
  7357  013848                     __ptext10:
  7358                           	opt stack 0
  7359  013848                     _Volt_Curr_Avg:
  7360                           	opt stack 25
  7361                           
  7362                           ;Power_Meter.c: 248: R_V_Avg_Steps = ((R_V_Arr[0] + R_V_Arr[1] + R_V_Arr[2] ) / 3);
  7363                           
  7364                           ;incstack = 0
  7365  013848  C48A  F090         	movff	_R_V_Arr+6,___ftadd@f2
  7366  01384C  C48B  F091         	movff	_R_V_Arr+7,___ftadd@f2+1
  7367  013850  C48C  F092         	movff	_R_V_Arr+8,___ftadd@f2+2
  7368  013854  C487  F08D         	movff	_R_V_Arr+3,___ftadd@f1
  7369  013858  C488  F08E         	movff	_R_V_Arr+4,___ftadd@f1+1
  7370  01385C  C489  F08F         	movff	_R_V_Arr+5,___ftadd@f1+2
  7371  013860  EC69  F0B2         	call	___ftadd	;wreg free
  7372  013864  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8055
  7373  013868  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8055+1
  7374  01386C  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8055+2
  7375                           
  7376                           ;Power_Meter.c: 248: R_V_Avg_Steps = ((R_V_Arr[0] + R_V_Arr[1] + R_V_Arr[2] ) / 3);
  7377  013870  C484  F090         	movff	_R_V_Arr,___ftadd@f2
  7378  013874  C485  F091         	movff	_R_V_Arr+1,___ftadd@f2+1
  7379  013878  C486  F092         	movff	_R_V_Arr+2,___ftadd@f2+2
  7380  01387C  C0B4  F08D         	movff	_Volt_Curr_Avg$8055,___ftadd@f1
  7381  013880  C0B5  F08E         	movff	_Volt_Curr_Avg$8055+1,___ftadd@f1+1
  7382  013884  C0B6  F08F         	movff	_Volt_Curr_Avg$8055+2,___ftadd@f1+2
  7383  013888  EC69  F0B2         	call	___ftadd	;wreg free
  7384  01388C  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7385  013890  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7386  013894  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7387  013898  0E00               	movlw	0
  7388  01389A  0100               	movlb	0	; () banked
  7389  01389C  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7390  01389E  0E40               	movlw	64
  7391  0138A0  0100               	movlb	0	; () banked
  7392  0138A2  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7393  0138A4  0E40               	movlw	64
  7394  0138A6  0100               	movlb	0	; () banked
  7395  0138A8  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7396  0138AA  EC53  F0C1         	call	___ftdiv	;wreg free
  7397  0138AE  C0A5  F4E7         	movff	?___ftdiv,_R_V_Avg_Steps
  7398  0138B2  C0A6  F4E8         	movff	?___ftdiv+1,_R_V_Avg_Steps+1
  7399  0138B6  C0A7  F4E9         	movff	?___ftdiv+2,_R_V_Avg_Steps+2
  7400                           
  7401                           ;Power_Meter.c: 249: R_Volt = ((R_V_Avg_Steps - (2119)) * (0.89172)) * 0.707106781;
  7402  0138BA  0E70               	movlw	112
  7403  0138BC  0100               	movlb	0	; () banked
  7404  0138BE  6F90               	movwf	___ftadd@f2& (0+255),b
  7405  0138C0  0E04               	movlw	4
  7406  0138C2  0100               	movlb	0	; () banked
  7407  0138C4  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7408  0138C6  0EC5               	movlw	197
  7409  0138C8  0100               	movlb	0	; () banked
  7410  0138CA  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7411  0138CC  C4E7  F08D         	movff	_R_V_Avg_Steps,___ftadd@f1
  7412  0138D0  C4E8  F08E         	movff	_R_V_Avg_Steps+1,___ftadd@f1+1
  7413  0138D4  C4E9  F08F         	movff	_R_V_Avg_Steps+2,___ftadd@f1+2
  7414  0138D8  EC69  F0B2         	call	___ftadd	;wreg free
  7415  0138DC  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7416  0138E0  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7417  0138E4  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7418  0138E8  0E6B               	movlw	107
  7419  0138EA  0100               	movlb	0	; () banked
  7420  0138EC  6F77               	movwf	___ftmul@f2& (0+255),b
  7421  0138EE  0E21               	movlw	33
  7422  0138F0  0100               	movlb	0	; () banked
  7423  0138F2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7424  0138F4  0E3F               	movlw	63
  7425  0138F6  0100               	movlb	0	; () banked
  7426  0138F8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7427  0138FA  ECA4  F0C0         	call	___ftmul	;wreg free
  7428  0138FE  C074  F007         	movff	?___ftmul,_R_Volt
  7429  013902  C075  F008         	movff	?___ftmul+1,_R_Volt+1
  7430  013906  C076  F009         	movff	?___ftmul+2,_R_Volt+2
  7431                           
  7432                           ;Power_Meter.c: 251: R_C_Avg_Steps = ((R_C_Arr[0]+R_C_Arr[1] + R_C_Arr[2] ) / 3);
  7433  01390A  C481  F090         	movff	_R_C_Arr+6,___ftadd@f2
  7434  01390E  C482  F091         	movff	_R_C_Arr+7,___ftadd@f2+1
  7435  013912  C483  F092         	movff	_R_C_Arr+8,___ftadd@f2+2
  7436  013916  C47E  F08D         	movff	_R_C_Arr+3,___ftadd@f1
  7437  01391A  C47F  F08E         	movff	_R_C_Arr+4,___ftadd@f1+1
  7438  01391E  C480  F08F         	movff	_R_C_Arr+5,___ftadd@f1+2
  7439  013922  EC69  F0B2         	call	___ftadd	;wreg free
  7440  013926  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8055
  7441  01392A  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8055+1
  7442  01392E  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8055+2
  7443                           
  7444                           ;Power_Meter.c: 251: R_C_Avg_Steps = ((R_C_Arr[0]+R_C_Arr[1] + R_C_Arr[2] ) / 3);
  7445  013932  C47B  F090         	movff	_R_C_Arr,___ftadd@f2
  7446  013936  C47C  F091         	movff	_R_C_Arr+1,___ftadd@f2+1
  7447  01393A  C47D  F092         	movff	_R_C_Arr+2,___ftadd@f2+2
  7448  01393E  C0B4  F08D         	movff	_Volt_Curr_Avg$8055,___ftadd@f1
  7449  013942  C0B5  F08E         	movff	_Volt_Curr_Avg$8055+1,___ftadd@f1+1
  7450  013946  C0B6  F08F         	movff	_Volt_Curr_Avg$8055+2,___ftadd@f1+2
  7451  01394A  EC69  F0B2         	call	___ftadd	;wreg free
  7452  01394E  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7453  013952  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7454  013956  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7455  01395A  0E00               	movlw	0
  7456  01395C  0100               	movlb	0	; () banked
  7457  01395E  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7458  013960  0E40               	movlw	64
  7459  013962  0100               	movlb	0	; () banked
  7460  013964  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7461  013966  0E40               	movlw	64
  7462  013968  0100               	movlb	0	; () banked
  7463  01396A  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7464  01396C  EC53  F0C1         	call	___ftdiv	;wreg free
  7465  013970  C0A5  F4E4         	movff	?___ftdiv,_R_C_Avg_Steps
  7466  013974  C0A6  F4E5         	movff	?___ftdiv+1,_R_C_Avg_Steps+1
  7467  013978  C0A7  F4E6         	movff	?___ftdiv+2,_R_C_Avg_Steps+2
  7468                           
  7469                           ;Power_Meter.c: 252: R_Curr = ((R_C_Avg_Steps - (2119)) * (0.036912)) * 0.707106781;
  7470  01397C  0E70               	movlw	112
  7471  01397E  0100               	movlb	0	; () banked
  7472  013980  6F90               	movwf	___ftadd@f2& (0+255),b
  7473  013982  0E04               	movlw	4
  7474  013984  0100               	movlb	0	; () banked
  7475  013986  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7476  013988  0EC5               	movlw	197
  7477  01398A  0100               	movlb	0	; () banked
  7478  01398C  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7479  01398E  C4E4  F08D         	movff	_R_C_Avg_Steps,___ftadd@f1
  7480  013992  C4E5  F08E         	movff	_R_C_Avg_Steps+1,___ftadd@f1+1
  7481  013996  C4E6  F08F         	movff	_R_C_Avg_Steps+2,___ftadd@f1+2
  7482  01399A  EC69  F0B2         	call	___ftadd	;wreg free
  7483  01399E  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7484  0139A2  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7485  0139A6  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7486  0139AA  0ED1               	movlw	209
  7487  0139AC  0100               	movlb	0	; () banked
  7488  0139AE  6F77               	movwf	___ftmul@f2& (0+255),b
  7489  0139B0  0ED5               	movlw	213
  7490  0139B2  0100               	movlb	0	; () banked
  7491  0139B4  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7492  0139B6  0E3C               	movlw	60
  7493  0139B8  0100               	movlb	0	; () banked
  7494  0139BA  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7495  0139BC  ECA4  F0C0         	call	___ftmul	;wreg free
  7496  0139C0  C074  F0CD         	movff	?___ftmul,_R_Curr
  7497  0139C4  C075  F0CE         	movff	?___ftmul+1,_R_Curr+1
  7498  0139C8  C076  F0CF         	movff	?___ftmul+2,_R_Curr+2
  7499                           
  7500                           ;Power_Meter.c: 254: Y_V_Avg_Steps = ((Y_V_Arr[0] + Y_V_Arr[1] + Y_V_Arr[2] ) / 3);
  7501  0139CC  C49C  F090         	movff	_Y_V_Arr+6,___ftadd@f2
  7502  0139D0  C49D  F091         	movff	_Y_V_Arr+7,___ftadd@f2+1
  7503  0139D4  C49E  F092         	movff	_Y_V_Arr+8,___ftadd@f2+2
  7504  0139D8  C499  F08D         	movff	_Y_V_Arr+3,___ftadd@f1
  7505  0139DC  C49A  F08E         	movff	_Y_V_Arr+4,___ftadd@f1+1
  7506  0139E0  C49B  F08F         	movff	_Y_V_Arr+5,___ftadd@f1+2
  7507  0139E4  EC69  F0B2         	call	___ftadd	;wreg free
  7508  0139E8  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8055
  7509  0139EC  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8055+1
  7510  0139F0  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8055+2
  7511                           
  7512                           ;Power_Meter.c: 254: Y_V_Avg_Steps = ((Y_V_Arr[0] + Y_V_Arr[1] + Y_V_Arr[2] ) / 3);
  7513  0139F4  C496  F090         	movff	_Y_V_Arr,___ftadd@f2
  7514  0139F8  C497  F091         	movff	_Y_V_Arr+1,___ftadd@f2+1
  7515  0139FC  C498  F092         	movff	_Y_V_Arr+2,___ftadd@f2+2
  7516  013A00  C0B4  F08D         	movff	_Volt_Curr_Avg$8055,___ftadd@f1
  7517  013A04  C0B5  F08E         	movff	_Volt_Curr_Avg$8055+1,___ftadd@f1+1
  7518  013A08  C0B6  F08F         	movff	_Volt_Curr_Avg$8055+2,___ftadd@f1+2
  7519  013A0C  EC69  F0B2         	call	___ftadd	;wreg free
  7520  013A10  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7521  013A14  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7522  013A18  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7523  013A1C  0E00               	movlw	0
  7524  013A1E  0100               	movlb	0	; () banked
  7525  013A20  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7526  013A22  0E40               	movlw	64
  7527  013A24  0100               	movlb	0	; () banked
  7528  013A26  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7529  013A28  0E40               	movlw	64
  7530  013A2A  0100               	movlb	0	; () banked
  7531  013A2C  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7532  013A2E  EC53  F0C1         	call	___ftdiv	;wreg free
  7533  013A32  C0A5  F4F9         	movff	?___ftdiv,_Y_V_Avg_Steps
  7534  013A36  C0A6  F4FA         	movff	?___ftdiv+1,_Y_V_Avg_Steps+1
  7535  013A3A  C0A7  F4FB         	movff	?___ftdiv+2,_Y_V_Avg_Steps+2
  7536                           
  7537                           ;Power_Meter.c: 255: Y_Volt = ((Y_V_Avg_Steps - (2119)) * (0.89172)) * 0.707106781;
  7538  013A3E  0E70               	movlw	112
  7539  013A40  0100               	movlb	0	; () banked
  7540  013A42  6F90               	movwf	___ftadd@f2& (0+255),b
  7541  013A44  0E04               	movlw	4
  7542  013A46  0100               	movlb	0	; () banked
  7543  013A48  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7544  013A4A  0EC5               	movlw	197
  7545  013A4C  0100               	movlb	0	; () banked
  7546  013A4E  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7547  013A50  C4F9  F08D         	movff	_Y_V_Avg_Steps,___ftadd@f1
  7548  013A54  C4FA  F08E         	movff	_Y_V_Avg_Steps+1,___ftadd@f1+1
  7549  013A58  C4FB  F08F         	movff	_Y_V_Avg_Steps+2,___ftadd@f1+2
  7550  013A5C  EC69  F0B2         	call	___ftadd	;wreg free
  7551  013A60  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7552  013A64  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7553  013A68  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7554  013A6C  0E6B               	movlw	107
  7555  013A6E  0100               	movlb	0	; () banked
  7556  013A70  6F77               	movwf	___ftmul@f2& (0+255),b
  7557  013A72  0E21               	movlw	33
  7558  013A74  0100               	movlb	0	; () banked
  7559  013A76  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7560  013A78  0E3F               	movlw	63
  7561  013A7A  0100               	movlb	0	; () banked
  7562  013A7C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7563  013A7E  ECA4  F0C0         	call	___ftmul	;wreg free
  7564  013A82  C074  F010         	movff	?___ftmul,_Y_Volt
  7565  013A86  C075  F011         	movff	?___ftmul+1,_Y_Volt+1
  7566  013A8A  C076  F012         	movff	?___ftmul+2,_Y_Volt+2
  7567                           
  7568                           ;Power_Meter.c: 257: Y_C_Avg_Steps = ((Y_C_Arr[0] + Y_C_Arr[1] + Y_C_Arr[2] ) / 3);
  7569  013A8E  C493  F090         	movff	_Y_C_Arr+6,___ftadd@f2
  7570  013A92  C494  F091         	movff	_Y_C_Arr+7,___ftadd@f2+1
  7571  013A96  C495  F092         	movff	_Y_C_Arr+8,___ftadd@f2+2
  7572  013A9A  C490  F08D         	movff	_Y_C_Arr+3,___ftadd@f1
  7573  013A9E  C491  F08E         	movff	_Y_C_Arr+4,___ftadd@f1+1
  7574  013AA2  C492  F08F         	movff	_Y_C_Arr+5,___ftadd@f1+2
  7575  013AA6  EC69  F0B2         	call	___ftadd	;wreg free
  7576  013AAA  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8055
  7577  013AAE  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8055+1
  7578  013AB2  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8055+2
  7579                           
  7580                           ;Power_Meter.c: 257: Y_C_Avg_Steps = ((Y_C_Arr[0] + Y_C_Arr[1] + Y_C_Arr[2] ) / 3);
  7581  013AB6  C48D  F090         	movff	_Y_C_Arr,___ftadd@f2
  7582  013ABA  C48E  F091         	movff	_Y_C_Arr+1,___ftadd@f2+1
  7583  013ABE  C48F  F092         	movff	_Y_C_Arr+2,___ftadd@f2+2
  7584  013AC2  C0B4  F08D         	movff	_Volt_Curr_Avg$8055,___ftadd@f1
  7585  013AC6  C0B5  F08E         	movff	_Volt_Curr_Avg$8055+1,___ftadd@f1+1
  7586  013ACA  C0B6  F08F         	movff	_Volt_Curr_Avg$8055+2,___ftadd@f1+2
  7587  013ACE  EC69  F0B2         	call	___ftadd	;wreg free
  7588  013AD2  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7589  013AD6  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7590  013ADA  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7591  013ADE  0E00               	movlw	0
  7592  013AE0  0100               	movlb	0	; () banked
  7593  013AE2  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7594  013AE4  0E40               	movlw	64
  7595  013AE6  0100               	movlb	0	; () banked
  7596  013AE8  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7597  013AEA  0E40               	movlw	64
  7598  013AEC  0100               	movlb	0	; () banked
  7599  013AEE  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7600  013AF0  EC53  F0C1         	call	___ftdiv	;wreg free
  7601  013AF4  C0A5  F4F6         	movff	?___ftdiv,_Y_C_Avg_Steps
  7602  013AF8  C0A6  F4F7         	movff	?___ftdiv+1,_Y_C_Avg_Steps+1
  7603  013AFC  C0A7  F4F8         	movff	?___ftdiv+2,_Y_C_Avg_Steps+2
  7604                           
  7605                           ;Power_Meter.c: 258: Y_Curr = ((Y_C_Avg_Steps - (2119)) * (0.036912)) * 0.707106781;
  7606  013B00  0E70               	movlw	112
  7607  013B02  0100               	movlb	0	; () banked
  7608  013B04  6F90               	movwf	___ftadd@f2& (0+255),b
  7609  013B06  0E04               	movlw	4
  7610  013B08  0100               	movlb	0	; () banked
  7611  013B0A  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7612  013B0C  0EC5               	movlw	197
  7613  013B0E  0100               	movlb	0	; () banked
  7614  013B10  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7615  013B12  C4F6  F08D         	movff	_Y_C_Avg_Steps,___ftadd@f1
  7616  013B16  C4F7  F08E         	movff	_Y_C_Avg_Steps+1,___ftadd@f1+1
  7617  013B1A  C4F8  F08F         	movff	_Y_C_Avg_Steps+2,___ftadd@f1+2
  7618  013B1E  EC69  F0B2         	call	___ftadd	;wreg free
  7619  013B22  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7620  013B26  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7621  013B2A  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7622  013B2E  0ED1               	movlw	209
  7623  013B30  0100               	movlb	0	; () banked
  7624  013B32  6F77               	movwf	___ftmul@f2& (0+255),b
  7625  013B34  0ED5               	movlw	213
  7626  013B36  0100               	movlb	0	; () banked
  7627  013B38  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7628  013B3A  0E3C               	movlw	60
  7629  013B3C  0100               	movlb	0	; () banked
  7630  013B3E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7631  013B40  ECA4  F0C0         	call	___ftmul	;wreg free
  7632  013B44  C074  F0D6         	movff	?___ftmul,_Y_Curr
  7633  013B48  C075  F0D7         	movff	?___ftmul+1,_Y_Curr+1
  7634  013B4C  C076  F0D8         	movff	?___ftmul+2,_Y_Curr+2
  7635                           
  7636                           ;Power_Meter.c: 260: B_V_Avg_Steps = ((B_V_Arr[0] + B_V_Arr[1] + B_V_Arr[2] ) / 3);
  7637  013B50  C478  F090         	movff	_B_V_Arr+6,___ftadd@f2
  7638  013B54  C479  F091         	movff	_B_V_Arr+7,___ftadd@f2+1
  7639  013B58  C47A  F092         	movff	_B_V_Arr+8,___ftadd@f2+2
  7640  013B5C  C475  F08D         	movff	_B_V_Arr+3,___ftadd@f1
  7641  013B60  C476  F08E         	movff	_B_V_Arr+4,___ftadd@f1+1
  7642  013B64  C477  F08F         	movff	_B_V_Arr+5,___ftadd@f1+2
  7643  013B68  EC69  F0B2         	call	___ftadd	;wreg free
  7644  013B6C  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8055
  7645  013B70  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8055+1
  7646  013B74  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8055+2
  7647                           
  7648                           ;Power_Meter.c: 260: B_V_Avg_Steps = ((B_V_Arr[0] + B_V_Arr[1] + B_V_Arr[2] ) / 3);
  7649  013B78  C472  F090         	movff	_B_V_Arr,___ftadd@f2
  7650  013B7C  C473  F091         	movff	_B_V_Arr+1,___ftadd@f2+1
  7651  013B80  C474  F092         	movff	_B_V_Arr+2,___ftadd@f2+2
  7652  013B84  C0B4  F08D         	movff	_Volt_Curr_Avg$8055,___ftadd@f1
  7653  013B88  C0B5  F08E         	movff	_Volt_Curr_Avg$8055+1,___ftadd@f1+1
  7654  013B8C  C0B6  F08F         	movff	_Volt_Curr_Avg$8055+2,___ftadd@f1+2
  7655  013B90  EC69  F0B2         	call	___ftadd	;wreg free
  7656  013B94  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7657  013B98  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7658  013B9C  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7659  013BA0  0E00               	movlw	0
  7660  013BA2  0100               	movlb	0	; () banked
  7661  013BA4  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7662  013BA6  0E40               	movlw	64
  7663  013BA8  0100               	movlb	0	; () banked
  7664  013BAA  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7665  013BAC  0E40               	movlw	64
  7666  013BAE  0100               	movlb	0	; () banked
  7667  013BB0  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7668  013BB2  EC53  F0C1         	call	___ftdiv	;wreg free
  7669  013BB6  C0A5  F4DE         	movff	?___ftdiv,_B_V_Avg_Steps
  7670  013BBA  C0A6  F4DF         	movff	?___ftdiv+1,_B_V_Avg_Steps+1
  7671  013BBE  C0A7  F4E0         	movff	?___ftdiv+2,_B_V_Avg_Steps+2
  7672                           
  7673                           ;Power_Meter.c: 261: B_Volt = ((B_V_Avg_Steps - (2119)) * (0.89172)) * 0.707106781;
  7674  013BC2  0E70               	movlw	112
  7675  013BC4  0100               	movlb	0	; () banked
  7676  013BC6  6F90               	movwf	___ftadd@f2& (0+255),b
  7677  013BC8  0E04               	movlw	4
  7678  013BCA  0100               	movlb	0	; () banked
  7679  013BCC  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7680  013BCE  0EC5               	movlw	197
  7681  013BD0  0100               	movlb	0	; () banked
  7682  013BD2  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7683  013BD4  C4DE  F08D         	movff	_B_V_Avg_Steps,___ftadd@f1
  7684  013BD8  C4DF  F08E         	movff	_B_V_Avg_Steps+1,___ftadd@f1+1
  7685  013BDC  C4E0  F08F         	movff	_B_V_Avg_Steps+2,___ftadd@f1+2
  7686  013BE0  EC69  F0B2         	call	___ftadd	;wreg free
  7687  013BE4  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7688  013BE8  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7689  013BEC  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7690  013BF0  0E6B               	movlw	107
  7691  013BF2  0100               	movlb	0	; () banked
  7692  013BF4  6F77               	movwf	___ftmul@f2& (0+255),b
  7693  013BF6  0E21               	movlw	33
  7694  013BF8  0100               	movlb	0	; () banked
  7695  013BFA  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7696  013BFC  0E3F               	movlw	63
  7697  013BFE  0100               	movlb	0	; () banked
  7698  013C00  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7699  013C02  ECA4  F0C0         	call	___ftmul	;wreg free
  7700  013C06  C074  F001         	movff	?___ftmul,_B_Volt
  7701  013C0A  C075  F002         	movff	?___ftmul+1,_B_Volt+1
  7702  013C0E  C076  F003         	movff	?___ftmul+2,_B_Volt+2
  7703                           
  7704                           ;Power_Meter.c: 263: B_C_Avg_Steps = ((B_C_Arr[0] + B_C_Arr[1] + B_C_Arr[2] ) / 3);
  7705  013C12  C46F  F090         	movff	_B_C_Arr+6,___ftadd@f2
  7706  013C16  C470  F091         	movff	_B_C_Arr+7,___ftadd@f2+1
  7707  013C1A  C471  F092         	movff	_B_C_Arr+8,___ftadd@f2+2
  7708  013C1E  C46C  F08D         	movff	_B_C_Arr+3,___ftadd@f1
  7709  013C22  C46D  F08E         	movff	_B_C_Arr+4,___ftadd@f1+1
  7710  013C26  C46E  F08F         	movff	_B_C_Arr+5,___ftadd@f1+2
  7711  013C2A  EC69  F0B2         	call	___ftadd	;wreg free
  7712  013C2E  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8055
  7713  013C32  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8055+1
  7714  013C36  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8055+2
  7715                           
  7716                           ;Power_Meter.c: 263: B_C_Avg_Steps = ((B_C_Arr[0] + B_C_Arr[1] + B_C_Arr[2] ) / 3);
  7717  013C3A  C469  F090         	movff	_B_C_Arr,___ftadd@f2
  7718  013C3E  C46A  F091         	movff	_B_C_Arr+1,___ftadd@f2+1
  7719  013C42  C46B  F092         	movff	_B_C_Arr+2,___ftadd@f2+2
  7720  013C46  C0B4  F08D         	movff	_Volt_Curr_Avg$8055,___ftadd@f1
  7721  013C4A  C0B5  F08E         	movff	_Volt_Curr_Avg$8055+1,___ftadd@f1+1
  7722  013C4E  C0B6  F08F         	movff	_Volt_Curr_Avg$8055+2,___ftadd@f1+2
  7723  013C52  EC69  F0B2         	call	___ftadd	;wreg free
  7724  013C56  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7725  013C5A  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7726  013C5E  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7727  013C62  0E00               	movlw	0
  7728  013C64  0100               	movlb	0	; () banked
  7729  013C66  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7730  013C68  0E40               	movlw	64
  7731  013C6A  0100               	movlb	0	; () banked
  7732  013C6C  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7733  013C6E  0E40               	movlw	64
  7734  013C70  0100               	movlb	0	; () banked
  7735  013C72  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7736  013C74  EC53  F0C1         	call	___ftdiv	;wreg free
  7737  013C78  C0A5  F4DB         	movff	?___ftdiv,_B_C_Avg_Steps
  7738  013C7C  C0A6  F4DC         	movff	?___ftdiv+1,_B_C_Avg_Steps+1
  7739  013C80  C0A7  F4DD         	movff	?___ftdiv+2,_B_C_Avg_Steps+2
  7740                           
  7741                           ;Power_Meter.c: 264: B_Curr = ((B_C_Avg_Steps - (2119)) * (0.036912)) * 0.707106781;
  7742  013C84  0E70               	movlw	112
  7743  013C86  0100               	movlb	0	; () banked
  7744  013C88  6F90               	movwf	___ftadd@f2& (0+255),b
  7745  013C8A  0E04               	movlw	4
  7746  013C8C  0100               	movlb	0	; () banked
  7747  013C8E  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7748  013C90  0EC5               	movlw	197
  7749  013C92  0100               	movlb	0	; () banked
  7750  013C94  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7751  013C96  C4DB  F08D         	movff	_B_C_Avg_Steps,___ftadd@f1
  7752  013C9A  C4DC  F08E         	movff	_B_C_Avg_Steps+1,___ftadd@f1+1
  7753  013C9E  C4DD  F08F         	movff	_B_C_Avg_Steps+2,___ftadd@f1+2
  7754  013CA2  EC69  F0B2         	call	___ftadd	;wreg free
  7755  013CA6  C08D  F074         	movff	?___ftadd,___ftmul@f1
  7756  013CAA  C08E  F075         	movff	?___ftadd+1,___ftmul@f1+1
  7757  013CAE  C08F  F076         	movff	?___ftadd+2,___ftmul@f1+2
  7758  013CB2  0ED1               	movlw	209
  7759  013CB4  0100               	movlb	0	; () banked
  7760  013CB6  6F77               	movwf	___ftmul@f2& (0+255),b
  7761  013CB8  0ED5               	movlw	213
  7762  013CBA  0100               	movlb	0	; () banked
  7763  013CBC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7764  013CBE  0E3C               	movlw	60
  7765  013CC0  0100               	movlb	0	; () banked
  7766  013CC2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7767  013CC4  ECA4  F0C0         	call	___ftmul	;wreg free
  7768  013CC8  C074  F0C4         	movff	?___ftmul,_B_Curr
  7769  013CCC  C075  F0C5         	movff	?___ftmul+1,_B_Curr+1
  7770  013CD0  C076  F0C6         	movff	?___ftmul+2,_B_Curr+2
  7771                           
  7772                           ;Power_Meter.c: 266: Avg_RYB_Voltage = ((R_Volt + Y_Volt + B_Volt) / 3);
  7773  013CD4  C010  F090         	movff	_Y_Volt,___ftadd@f2
  7774  013CD8  C011  F091         	movff	_Y_Volt+1,___ftadd@f2+1
  7775  013CDC  C012  F092         	movff	_Y_Volt+2,___ftadd@f2+2
  7776  013CE0  C007  F08D         	movff	_R_Volt,___ftadd@f1
  7777  013CE4  C008  F08E         	movff	_R_Volt+1,___ftadd@f1+1
  7778  013CE8  C009  F08F         	movff	_R_Volt+2,___ftadd@f1+2
  7779  013CEC  EC69  F0B2         	call	___ftadd	;wreg free
  7780  013CF0  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8055
  7781  013CF4  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8055+1
  7782  013CF8  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8055+2
  7783                           
  7784                           ;Power_Meter.c: 266: Avg_RYB_Voltage = ((R_Volt + Y_Volt + B_Volt) / 3);
  7785  013CFC  C001  F090         	movff	_B_Volt,___ftadd@f2
  7786  013D00  C002  F091         	movff	_B_Volt+1,___ftadd@f2+1
  7787  013D04  C003  F092         	movff	_B_Volt+2,___ftadd@f2+2
  7788  013D08  C0B4  F08D         	movff	_Volt_Curr_Avg$8055,___ftadd@f1
  7789  013D0C  C0B5  F08E         	movff	_Volt_Curr_Avg$8055+1,___ftadd@f1+1
  7790  013D10  C0B6  F08F         	movff	_Volt_Curr_Avg$8055+2,___ftadd@f1+2
  7791  013D14  EC69  F0B2         	call	___ftadd	;wreg free
  7792  013D18  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7793  013D1C  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7794  013D20  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7795  013D24  0E00               	movlw	0
  7796  013D26  0100               	movlb	0	; () banked
  7797  013D28  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7798  013D2A  0E40               	movlw	64
  7799  013D2C  0100               	movlb	0	; () banked
  7800  013D2E  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7801  013D30  0E40               	movlw	64
  7802  013D32  0100               	movlb	0	; () banked
  7803  013D34  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7804  013D36  EC53  F0C1         	call	___ftdiv	;wreg free
  7805  013D3A  C0A5  F200         	movff	?___ftdiv,_Avg_RYB_Voltage
  7806  013D3E  C0A6  F201         	movff	?___ftdiv+1,_Avg_RYB_Voltage+1
  7807  013D42  C0A7  F202         	movff	?___ftdiv+2,_Avg_RYB_Voltage+2
  7808                           
  7809                           ;Power_Meter.c: 267: Avg_RYB_Current = ((R_Curr + Y_Curr + B_Curr) / 3);
  7810  013D46  C0D6  F090         	movff	_Y_Curr,___ftadd@f2
  7811  013D4A  C0D7  F091         	movff	_Y_Curr+1,___ftadd@f2+1
  7812  013D4E  C0D8  F092         	movff	_Y_Curr+2,___ftadd@f2+2
  7813  013D52  C0CD  F08D         	movff	_R_Curr,___ftadd@f1
  7814  013D56  C0CE  F08E         	movff	_R_Curr+1,___ftadd@f1+1
  7815  013D5A  C0CF  F08F         	movff	_R_Curr+2,___ftadd@f1+2
  7816  013D5E  EC69  F0B2         	call	___ftadd	;wreg free
  7817  013D62  C08D  F0B4         	movff	?___ftadd,_Volt_Curr_Avg$8055
  7818  013D66  C08E  F0B5         	movff	?___ftadd+1,_Volt_Curr_Avg$8055+1
  7819  013D6A  C08F  F0B6         	movff	?___ftadd+2,_Volt_Curr_Avg$8055+2
  7820                           
  7821                           ;Power_Meter.c: 267: Avg_RYB_Current = ((R_Curr + Y_Curr + B_Curr) / 3);
  7822  013D6E  C0C4  F090         	movff	_B_Curr,___ftadd@f2
  7823  013D72  C0C5  F091         	movff	_B_Curr+1,___ftadd@f2+1
  7824  013D76  C0C6  F092         	movff	_B_Curr+2,___ftadd@f2+2
  7825  013D7A  C0B4  F08D         	movff	_Volt_Curr_Avg$8055,___ftadd@f1
  7826  013D7E  C0B5  F08E         	movff	_Volt_Curr_Avg$8055+1,___ftadd@f1+1
  7827  013D82  C0B6  F08F         	movff	_Volt_Curr_Avg$8055+2,___ftadd@f1+2
  7828  013D86  EC69  F0B2         	call	___ftadd	;wreg free
  7829  013D8A  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  7830  013D8E  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  7831  013D92  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  7832  013D96  0E00               	movlw	0
  7833  013D98  0100               	movlb	0	; () banked
  7834  013D9A  6FA8               	movwf	___ftdiv@f2& (0+255),b
  7835  013D9C  0E40               	movlw	64
  7836  013D9E  0100               	movlb	0	; () banked
  7837  013DA0  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  7838  013DA2  0E40               	movlw	64
  7839  013DA4  0100               	movlb	0	; () banked
  7840  013DA6  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  7841  013DA8  EC53  F0C1         	call	___ftdiv	;wreg free
  7842  013DAC  C0A5  F100         	movff	?___ftdiv,_Avg_RYB_Current
  7843  013DB0  C0A6  F101         	movff	?___ftdiv+1,_Avg_RYB_Current+1
  7844  013DB4  C0A7  F102         	movff	?___ftdiv+2,_Avg_RYB_Current+2
  7845  013DB8  0012               	return		;funcret
  7846  013DBA                     __end_of_Volt_Curr_Avg:
  7847                           	opt stack 0
  7848                           tblptru	equ	0xFF8
  7849                           tblptrh	equ	0xFF7
  7850                           tblptrl	equ	0xFF6
  7851                           tablat	equ	0xFF5
  7852                           intcon	equ	0xFF2
  7853                           postinc0	equ	0xFEE
  7854                           wreg	equ	0xFE8
  7855                           postdec1	equ	0xFE5
  7856                           fsr1h	equ	0xFE2
  7857                           fsr1l	equ	0xFE1
  7858                           status	equ	0xFD8
  7859                           
  7860 ;; *************** function _Turbine_RPM_Initiate *****************
  7861 ;; Defined at:
  7862 ;;		line 34 in file "Initialization.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;		None
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;		None
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      void 
  7869 ;; Registers used:
  7870 ;;		wreg, status,2
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;Total ram usage:        0 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    3
  7883 ;; This function calls:
  7884 ;;		Nothing
  7885 ;; This function is called by:
  7886 ;;		_main
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text11
  7891  01B062                     __ptext11:
  7892                           	opt stack 0
  7893  01B062                     _Turbine_RPM_Initiate:
  7894                           	opt stack 27
  7895                           
  7896                           ;Initialization.c: 36: TRISEbits.TRISE5=1;
  7897                           
  7898                           ;incstack = 0
  7899  01B062  8A96               	bsf	3990,5,c	;volatile
  7900                           
  7901                           ;Initialization.c: 37: CCP7CON = 0x04;
  7902  01B064  0E04               	movlw	4
  7903  01B066  6E6E               	movwf	3950,c	;volatile
  7904                           
  7905                           ;Initialization.c: 38: CCP7IE = 1;
  7906  01B068  88B6               	bsf	4022,4,c	;volatile
  7907                           
  7908                           ;Initialization.c: 39: CCP7IF = 0;
  7909  01B06A  98B7               	bcf	4023,4,c	;volatile
  7910  01B06C  0012               	return		;funcret
  7911  01B06E                     __end_of_Turbine_RPM_Initiate:
  7912                           	opt stack 0
  7913                           tblptru	equ	0xFF8
  7914                           tblptrh	equ	0xFF7
  7915                           tblptrl	equ	0xFF6
  7916                           tablat	equ	0xFF5
  7917                           intcon	equ	0xFF2
  7918                           postinc0	equ	0xFEE
  7919                           wreg	equ	0xFE8
  7920                           postdec1	equ	0xFE5
  7921                           fsr1h	equ	0xFE2
  7922                           fsr1l	equ	0xFE1
  7923                           status	equ	0xFD8
  7924                           
  7925 ;; *************** function _Turbine_RPM_Cal *****************
  7926 ;; Defined at:
  7927 ;;		line 16 in file "RPM_Measurement.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  1    wreg      void 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;Total ram usage:        2 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    5
  7948 ;; This function calls:
  7949 ;;		___ftadd
  7950 ;;		___ftdiv
  7951 ;;		___ftge
  7952 ;;		___ftmul
  7953 ;;		___lwtoft
  7954 ;; This function is called by:
  7955 ;;		_main
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text12
  7960  0146E2                     __ptext12:
  7961                           	opt stack 0
  7962  0146E2                     _Turbine_RPM_Cal:
  7963                           	opt stack 25
  7964                           
  7965                           ;RPM_Measurement.c: 18: if(TRPM_Cal)
  7966                           
  7967                           ;incstack = 0
  7968  0146E2  0100               	movlb	0	; () banked
  7969  0146E4  51EA               	movf	_TRPM_Cal& (0+255),w,b
  7970  0146E6  B4D8               	btfsc	status,2,c
  7971  0146E8  0012               	return	
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;RPM_Measurement.c: 19: {
  7975                           ;RPM_Measurement.c: 20: TRPM_Cal = 0;
  7976  0146EA  0E00               	movlw	0
  7977  0146EC  0100               	movlb	0	; () banked
  7978  0146EE  6FEA               	movwf	_TRPM_Cal& (0+255),b
  7979                           
  7980                           ; BSR set to: 0
  7981                           ;RPM_Measurement.c: 21: CCP7IE = 0;
  7982  0146F0  98B6               	bcf	4022,4,c	;volatile
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;RPM_Measurement.c: 22: if(TRPM_Cap_New > TRPM_Cap_Old)
  7986  0146F2  0101               	movlb	1	; () banked
  7987  0146F4  5130               	movf	_TRPM_Cap_New& (0+255),w,b
  7988  0146F6  0101               	movlb	1	; () banked
  7989  0146F8  5D32               	subwf	_TRPM_Cap_Old& (0+255),w,b
  7990  0146FA  0101               	movlb	1	; () banked
  7991  0146FC  5131               	movf	(_TRPM_Cap_New+1)& (0+255),w,b
  7992  0146FE  0101               	movlb	1	; () banked
  7993  014700  5933               	subwfb	(_TRPM_Cap_Old+1)& (0+255),w,b
  7994  014702  B0D8               	btfsc	status,0,c
  7995  014704  D035               	goto	l22811
  7996                           
  7997                           ; BSR set to: 1
  7998                           ;RPM_Measurement.c: 23: {
  7999                           ;RPM_Measurement.c: 24: RPM_PWM = (TRPM_Cap_New - TRPM_Cap_Old + 1) ;
  8000  014706  C132  F0B4         	movff	_TRPM_Cap_Old,??_Turbine_RPM_Cal
  8001  01470A  C133  F0B5         	movff	_TRPM_Cap_Old+1,??_Turbine_RPM_Cal+1
  8002  01470E  0100               	movlb	0	; () banked
  8003  014710  1FB4               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  8004  014712  1FB5               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8005  014714  4BB4               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  8006  014716  2BB5               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8007  014718  0101               	movlb	1	; () banked
  8008  01471A  5130               	movf	_TRPM_Cap_New& (0+255),w,b
  8009  01471C  0100               	movlb	0	; () banked
  8010  01471E  27B4               	addwf	??_Turbine_RPM_Cal& (0+255),f,b
  8011  014720  0101               	movlb	1	; () banked
  8012  014722  5131               	movf	(_TRPM_Cap_New+1)& (0+255),w,b
  8013  014724  0100               	movlb	0	; () banked
  8014  014726  23B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8015  014728  0E01               	movlw	1
  8016  01472A  0100               	movlb	0	; () banked
  8017  01472C  25B4               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  8018  01472E  0102               	movlb	2	; () banked
  8019  014730  6FFA               	movwf	_RPM_PWM& (0+255),b
  8020  014732  0E00               	movlw	0
  8021  014734  0100               	movlb	0	; () banked
  8022  014736  21B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  8023  014738  0102               	movlb	2	; () banked
  8024  01473A  6FFB               	movwf	(_RPM_PWM+1)& (0+255),b
  8025                           
  8026                           ;RPM_Measurement.c: 25: RPM_Time = (Timer1_OF_counter_New - Timer1_OF_counter_Old);
  8027  01473C  C2A2  F0B4         	movff	_Timer1_OF_counter_Old,??_Turbine_RPM_Cal
  8028  014740  C2A3  F0B5         	movff	_Timer1_OF_counter_Old+1,??_Turbine_RPM_Cal+1
  8029  014744  0100               	movlb	0	; () banked
  8030  014746  1FB4               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  8031  014748  1FB5               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8032  01474A  4BB4               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  8033  01474C  2BB5               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8034  01474E  0101               	movlb	1	; () banked
  8035  014750  5136               	movf	_Timer1_OF_counter_New& (0+255),w,b
  8036  014752  0100               	movlb	0	; () banked
  8037  014754  25B4               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  8038  014756  0101               	movlb	1	; () banked
  8039  014758  6F2C               	movwf	_RPM_Time& (0+255),b
  8040  01475A  0101               	movlb	1	; () banked
  8041  01475C  5137               	movf	(_Timer1_OF_counter_New+1)& (0+255),w,b
  8042  01475E  0100               	movlb	0	; () banked
  8043  014760  21B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  8044  014762  0101               	movlb	1	; () banked
  8045  014764  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
  8046                           
  8047                           ; BSR set to: 1
  8048                           ;RPM_Measurement.c: 26: Flag_temp = 0;
  8049  014766  0E00               	movlw	0
  8050  014768  0105               	movlb	5	; () banked
  8051  01476A  6FC7               	movwf	(_Flag_temp+1)& (0+255),b
  8052  01476C  0E00               	movlw	0
  8053  01476E  D03E               	goto	L4
  8054  014770                     l22811:
  8055                           
  8056                           ;RPM_Measurement.c: 28: else
  8057                           ;RPM_Measurement.c: 29: {
  8058                           ;RPM_Measurement.c: 30: RPM_PWM = (TRPM_Cap_New - TRPM_Cap_Old + 1) + 65536;
  8059  014770  C132  F0B4         	movff	_TRPM_Cap_Old,??_Turbine_RPM_Cal
  8060  014774  C133  F0B5         	movff	_TRPM_Cap_Old+1,??_Turbine_RPM_Cal+1
  8061  014778  0100               	movlb	0	; () banked
  8062  01477A  1FB4               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  8063  01477C  1FB5               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8064  01477E  4BB4               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  8065  014780  2BB5               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8066  014782  0101               	movlb	1	; () banked
  8067  014784  5130               	movf	_TRPM_Cap_New& (0+255),w,b
  8068  014786  0100               	movlb	0	; () banked
  8069  014788  27B4               	addwf	??_Turbine_RPM_Cal& (0+255),f,b
  8070  01478A  0101               	movlb	1	; () banked
  8071  01478C  5131               	movf	(_TRPM_Cap_New+1)& (0+255),w,b
  8072  01478E  0100               	movlb	0	; () banked
  8073  014790  23B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8074  014792  0E01               	movlw	1
  8075  014794  0100               	movlb	0	; () banked
  8076  014796  25B4               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  8077  014798  0102               	movlb	2	; () banked
  8078  01479A  6FFA               	movwf	_RPM_PWM& (0+255),b
  8079  01479C  0E00               	movlw	0
  8080  01479E  0100               	movlb	0	; () banked
  8081  0147A0  21B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  8082  0147A2  0102               	movlb	2	; () banked
  8083  0147A4  6FFB               	movwf	(_RPM_PWM+1)& (0+255),b
  8084                           
  8085                           ;RPM_Measurement.c: 31: RPM_Time = (Timer1_OF_counter_New - Timer1_OF_counter_Old);
  8086  0147A6  C2A2  F0B4         	movff	_Timer1_OF_counter_Old,??_Turbine_RPM_Cal
  8087  0147AA  C2A3  F0B5         	movff	_Timer1_OF_counter_Old+1,??_Turbine_RPM_Cal+1
  8088  0147AE  0100               	movlb	0	; () banked
  8089  0147B0  1FB4               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  8090  0147B2  1FB5               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8091  0147B4  4BB4               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  8092  0147B6  2BB5               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  8093  0147B8  0101               	movlb	1	; () banked
  8094  0147BA  5136               	movf	_Timer1_OF_counter_New& (0+255),w,b
  8095  0147BC  0100               	movlb	0	; () banked
  8096  0147BE  25B4               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  8097  0147C0  0101               	movlb	1	; () banked
  8098  0147C2  6F2C               	movwf	_RPM_Time& (0+255),b
  8099  0147C4  0101               	movlb	1	; () banked
  8100  0147C6  5137               	movf	(_Timer1_OF_counter_New+1)& (0+255),w,b
  8101  0147C8  0100               	movlb	0	; () banked
  8102  0147CA  21B5               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  8103  0147CC  0101               	movlb	1	; () banked
  8104  0147CE  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
  8105                           
  8106                           ;RPM_Measurement.c: 32: RPM_Time = RPM_Time -1;
  8107  0147D0  0EFF               	movlw	255
  8108  0147D2  0101               	movlb	1	; () banked
  8109  0147D4  252C               	addwf	_RPM_Time& (0+255),w,b
  8110  0147D6  0101               	movlb	1	; () banked
  8111  0147D8  6F2C               	movwf	_RPM_Time& (0+255),b
  8112  0147DA  0EFF               	movlw	255
  8113  0147DC  0101               	movlb	1	; () banked
  8114  0147DE  212D               	addwfc	(_RPM_Time+1)& (0+255),w,b
  8115  0147E0  0101               	movlb	1	; () banked
  8116  0147E2  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
  8117                           
  8118                           ; BSR set to: 1
  8119                           ;RPM_Measurement.c: 33: Flag_temp = 1;
  8120  0147E4  0E00               	movlw	0
  8121  0147E6  0105               	movlb	5	; () banked
  8122  0147E8  6FC7               	movwf	(_Flag_temp+1)& (0+255),b
  8123  0147EA  0E01               	movlw	1
  8124  0147EC                     L4:
  8125  0147EC  6FC6               	movwf	_Flag_temp& (0+255),b
  8126                           
  8127                           ; BSR set to: 5
  8128                           ;RPM_Measurement.c: 34: }
  8129                           ;RPM_Measurement.c: 35: PWM_Temp = (0.000004 * RPM_PWM);
  8130                           
  8131                           ; BSR set to: 5
  8132  0147EE  C2FA  F068         	movff	_RPM_PWM,___lwtoft@c
  8133  0147F2  C2FB  F069         	movff	_RPM_PWM+1,___lwtoft@c+1
  8134  0147F6  EC6E  F0D7         	call	___lwtoft	;wreg free
  8135  0147FA  C068  F074         	movff	?___lwtoft,___ftmul@f1
  8136  0147FE  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  8137  014802  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  8138  014806  0E38               	movlw	56
  8139  014808  0100               	movlb	0	; () banked
  8140  01480A  6F77               	movwf	___ftmul@f2& (0+255),b
  8141  01480C  0E86               	movlw	134
  8142  01480E  0100               	movlb	0	; () banked
  8143  014810  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8144  014812  0E36               	movlw	54
  8145  014814  0100               	movlb	0	; () banked
  8146  014816  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8147  014818  ECA4  F0C0         	call	___ftmul	;wreg free
  8148  01481C  C074  F4A8         	movff	?___ftmul,_PWM_Temp
  8149  014820  C075  F4A9         	movff	?___ftmul+1,_PWM_Temp+1
  8150  014824  C076  F4AA         	movff	?___ftmul+2,_PWM_Temp+2
  8151                           
  8152                           ;RPM_Measurement.c: 37: TRPM_Time = PWM_Temp + (0.262 * RPM_Time);
  8153  014828  0E25               	movlw	37
  8154  01482A  0100               	movlb	0	; () banked
  8155  01482C  6F77               	movwf	___ftmul@f2& (0+255),b
  8156  01482E  0E86               	movlw	134
  8157  014830  0100               	movlb	0	; () banked
  8158  014832  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8159  014834  0E3E               	movlw	62
  8160  014836  0100               	movlb	0	; () banked
  8161  014838  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8162  01483A  C12C  F068         	movff	_RPM_Time,___lwtoft@c
  8163  01483E  C12D  F069         	movff	_RPM_Time+1,___lwtoft@c+1
  8164  014842  EC6E  F0D7         	call	___lwtoft	;wreg free
  8165  014846  C068  F074         	movff	?___lwtoft,___ftmul@f1
  8166  01484A  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  8167  01484E  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  8168  014852  ECA4  F0C0         	call	___ftmul	;wreg free
  8169  014856  C074  F08D         	movff	?___ftmul,___ftadd@f1
  8170  01485A  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  8171  01485E  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  8172  014862  C4A8  F090         	movff	_PWM_Temp,___ftadd@f2
  8173  014866  C4A9  F091         	movff	_PWM_Temp+1,___ftadd@f2+1
  8174  01486A  C4AA  F092         	movff	_PWM_Temp+2,___ftadd@f2+2
  8175  01486E  EC69  F0B2         	call	___ftadd	;wreg free
  8176  014872  C08D  F4ED         	movff	?___ftadd,_TRPM_Time
  8177  014876  C08E  F4EE         	movff	?___ftadd+1,_TRPM_Time+1
  8178  01487A  C08F  F4EF         	movff	?___ftadd+2,_TRPM_Time+2
  8179                           
  8180                           ;RPM_Measurement.c: 39: TRPM_Frequency = 1/TRPM_Time;
  8181  01487E  0E00               	movlw	0
  8182  014880  0100               	movlb	0	; () banked
  8183  014882  6FA5               	movwf	___ftdiv@f1& (0+255),b
  8184  014884  0E80               	movlw	128
  8185  014886  0100               	movlb	0	; () banked
  8186  014888  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
  8187  01488A  0E3F               	movlw	63
  8188  01488C  0100               	movlb	0	; () banked
  8189  01488E  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
  8190  014890  C4ED  F0A8         	movff	_TRPM_Time,___ftdiv@f2
  8191  014894  C4EE  F0A9         	movff	_TRPM_Time+1,___ftdiv@f2+1
  8192  014898  C4EF  F0AA         	movff	_TRPM_Time+2,___ftdiv@f2+2
  8193  01489C  EC53  F0C1         	call	___ftdiv	;wreg free
  8194  0148A0  C0A5  F4EA         	movff	?___ftdiv,_TRPM_Frequency
  8195  0148A4  C0A6  F4EB         	movff	?___ftdiv+1,_TRPM_Frequency+1
  8196  0148A8  C0A7  F4EC         	movff	?___ftdiv+2,_TRPM_Frequency+2
  8197                           
  8198                           ;RPM_Measurement.c: 41: if(RPM_counter < 2)
  8199  0148AC  0E02               	movlw	2
  8200  0148AE  0100               	movlb	0	; () banked
  8201  0148B0  61E9               	cpfslt	_RPM_counter& (0+255),b
  8202  0148B2  D002               	goto	l22825
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;RPM_Measurement.c: 42: {
  8206                           ;RPM_Measurement.c: 43: RPM_counter++;
  8207  0148B4  0100               	movlb	0	; () banked
  8208  0148B6  2BE9               	incf	_RPM_counter& (0+255),f,b
  8209  0148B8                     l22825:
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;RPM_Measurement.c: 44: }
  8213                           ;RPM_Measurement.c: 46: if(RPM_counter == 2)
  8214  0148B8  0E02               	movlw	2
  8215  0148BA  0100               	movlb	0	; () banked
  8216  0148BC  19E9               	xorwf	_RPM_counter& (0+255),w,b
  8217  0148BE  A4D8               	btfss	status,2,c
  8218  0148C0  D09D               	goto	l22845
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;RPM_Measurement.c: 47: {
  8222                           ;RPM_Measurement.c: 48: Turb_RPM = (60 * TRPM_Frequency) / 1;
  8223  0148C2  0E00               	movlw	0
  8224  0148C4  0100               	movlb	0	; () banked
  8225  0148C6  6F77               	movwf	___ftmul@f2& (0+255),b
  8226  0148C8  0E70               	movlw	112
  8227  0148CA  0100               	movlb	0	; () banked
  8228  0148CC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8229  0148CE  0E42               	movlw	66
  8230  0148D0  0100               	movlb	0	; () banked
  8231  0148D2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8232  0148D4  C4EA  F074         	movff	_TRPM_Frequency,___ftmul@f1
  8233  0148D8  C4EB  F075         	movff	_TRPM_Frequency+1,___ftmul@f1+1
  8234  0148DC  C4EC  F076         	movff	_TRPM_Frequency+2,___ftmul@f1+2
  8235  0148E0  ECA4  F0C0         	call	___ftmul	;wreg free
  8236  0148E4  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
  8237  0148E8  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
  8238  0148EC  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
  8239  0148F0  0E00               	movlw	0
  8240  0148F2  0100               	movlb	0	; () banked
  8241  0148F4  6FA8               	movwf	___ftdiv@f2& (0+255),b
  8242  0148F6  0E80               	movlw	128
  8243  0148F8  0100               	movlb	0	; () banked
  8244  0148FA  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  8245  0148FC  0E3F               	movlw	63
  8246  0148FE  0100               	movlb	0	; () banked
  8247  014900  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  8248  014902  EC53  F0C1         	call	___ftdiv	;wreg free
  8249  014906  C0A5  F4B7         	movff	?___ftdiv,_Turb_RPM
  8250  01490A  C0A6  F4B8         	movff	?___ftdiv+1,_Turb_RPM+1
  8251  01490E  C0A7  F4B9         	movff	?___ftdiv+2,_Turb_RPM+2
  8252                           
  8253                           ;RPM_Measurement.c: 49: Turbine_RPM_Old = Turbine_RPM_New;
  8254  014912  C115  F118         	movff	_Turbine_RPM_New,_Turbine_RPM_Old
  8255  014916  C116  F119         	movff	_Turbine_RPM_New+1,_Turbine_RPM_Old+1
  8256  01491A  C117  F11A         	movff	_Turbine_RPM_New+2,_Turbine_RPM_Old+2
  8257                           
  8258                           ;RPM_Measurement.c: 50: Turbine_RPM_New = Turb_RPM;
  8259  01491E  C4B7  F115         	movff	_Turb_RPM,_Turbine_RPM_New
  8260  014922  C4B8  F116         	movff	_Turb_RPM+1,_Turbine_RPM_New+1
  8261  014926  C4B9  F117         	movff	_Turb_RPM+2,_Turbine_RPM_New+2
  8262                           
  8263                           ;RPM_Measurement.c: 52: if(Turbine_state == RAMPUP_STATE || Turbine_state == RUNNING_STA
      +                          TE)
  8264  01492A  0100               	movlb	0	; () banked
  8265  01492C  05F0               	decf	_Turbine_state& (0+255),w,b
  8266  01492E  B4D8               	btfsc	status,2,c
  8267  014930  D005               	goto	l22837
  8268                           
  8269                           ; BSR set to: 0
  8270  014932  0E02               	movlw	2
  8271  014934  0100               	movlb	0	; () banked
  8272  014936  19F0               	xorwf	_Turbine_state& (0+255),w,b
  8273  014938  A4D8               	btfss	status,2,c
  8274  01493A  D051               	goto	l22841
  8275  01493C                     l22837:
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;RPM_Measurement.c: 53: {
  8279                           ;RPM_Measurement.c: 54: if( Turbine_RPM_New > (Turbine_RPM_Old + 10) || (Turbine_RPM_New
      +                           < (Turbine_RPM_Old - 10) ) )
  8280  01493C  0E00               	movlw	0
  8281  01493E  0100               	movlb	0	; () banked
  8282  014940  6F90               	movwf	___ftadd@f2& (0+255),b
  8283  014942  0E20               	movlw	32
  8284  014944  0100               	movlb	0	; () banked
  8285  014946  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  8286  014948  0E41               	movlw	65
  8287  01494A  0100               	movlb	0	; () banked
  8288  01494C  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  8289  01494E  C118  F08D         	movff	_Turbine_RPM_Old,___ftadd@f1
  8290  014952  C119  F08E         	movff	_Turbine_RPM_Old+1,___ftadd@f1+1
  8291  014956  C11A  F08F         	movff	_Turbine_RPM_Old+2,___ftadd@f1+2
  8292  01495A  EC69  F0B2         	call	___ftadd	;wreg free
  8293  01495E  C08D  F099         	movff	?___ftadd,___ftge@ff1
  8294  014962  C08E  F09A         	movff	?___ftadd+1,___ftge@ff1+1
  8295  014966  C08F  F09B         	movff	?___ftadd+2,___ftge@ff1+2
  8296  01496A  C115  F09C         	movff	_Turbine_RPM_New,___ftge@ff2
  8297  01496E  C116  F09D         	movff	_Turbine_RPM_New+1,___ftge@ff2+1
  8298  014972  C117  F09E         	movff	_Turbine_RPM_New+2,___ftge@ff2+2
  8299  014976  ECEB  F0CA         	call	___ftge	;wreg free
  8300  01497A  0100               	movlb	0	; () banked
  8301  01497C  A0D8               	btfss	status,0,c
  8302  01497E  D022               	goto	l3762
  8303                           
  8304                           ; BSR set to: 0
  8305  014980  C115  F099         	movff	_Turbine_RPM_New,___ftge@ff1
  8306  014984  C116  F09A         	movff	_Turbine_RPM_New+1,___ftge@ff1+1
  8307  014988  C117  F09B         	movff	_Turbine_RPM_New+2,___ftge@ff1+2
  8308  01498C  0E00               	movlw	0
  8309  01498E  0100               	movlb	0	; () banked
  8310  014990  6F90               	movwf	___ftadd@f2& (0+255),b
  8311  014992  0E20               	movlw	32
  8312  014994  0100               	movlb	0	; () banked
  8313  014996  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  8314  014998  0EC1               	movlw	193
  8315  01499A  0100               	movlb	0	; () banked
  8316  01499C  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  8317  01499E  C118  F08D         	movff	_Turbine_RPM_Old,___ftadd@f1
  8318  0149A2  C119  F08E         	movff	_Turbine_RPM_Old+1,___ftadd@f1+1
  8319  0149A6  C11A  F08F         	movff	_Turbine_RPM_Old+2,___ftadd@f1+2
  8320  0149AA  EC69  F0B2         	call	___ftadd	;wreg free
  8321  0149AE  C08D  F09C         	movff	?___ftadd,___ftge@ff2
  8322  0149B2  C08E  F09D         	movff	?___ftadd+1,___ftge@ff2+1
  8323  0149B6  C08F  F09E         	movff	?___ftadd+2,___ftge@ff2+2
  8324  0149BA  ECEB  F0CA         	call	___ftge	;wreg free
  8325  0149BE  0100               	movlb	0	; () banked
  8326  0149C0  B0D8               	btfsc	status,0,c
  8327  0149C2  D016               	goto	l3767
  8328  0149C4                     l3762:
  8329                           
  8330                           ; BSR set to: 0
  8331                           ;RPM_Measurement.c: 55: {
  8332                           ;RPM_Measurement.c: 56: Turbine_RPM = Turbine_RPM_Old;
  8333  0149C4  C118  F00A         	movff	_Turbine_RPM_Old,_Turbine_RPM
  8334  0149C8  C119  F00B         	movff	_Turbine_RPM_Old+1,_Turbine_RPM+1
  8335  0149CC  C11A  F00C         	movff	_Turbine_RPM_Old+2,_Turbine_RPM+2
  8336                           
  8337                           ;RPM_Measurement.c: 57: Turbine_RPM_New = Turbine_RPM_Old;
  8338  0149D0  C118  F115         	movff	_Turbine_RPM_Old,_Turbine_RPM_New
  8339  0149D4  C119  F116         	movff	_Turbine_RPM_Old+1,_Turbine_RPM_New+1
  8340  0149D8  C11A  F117         	movff	_Turbine_RPM_Old+2,_Turbine_RPM_New+2
  8341                           
  8342                           ;RPM_Measurement.c: 58: }
  8343  0149DC  D00F               	goto	l22845
  8344  0149DE                     l22841:
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;RPM_Measurement.c: 64: else if(Turbine_state == STARTUP_STATE || Turbine_state == STOPP
      +                          ING_STATE)
  8348  0149DE  0100               	movlb	0	; () banked
  8349  0149E0  51F0               	movf	_Turbine_state& (0+255),w,b
  8350  0149E2  B4D8               	btfsc	status,2,c
  8351  0149E4  D005               	goto	l3767
  8352                           
  8353                           ; BSR set to: 0
  8354  0149E6  0E03               	movlw	3
  8355  0149E8  0100               	movlb	0	; () banked
  8356  0149EA  19F0               	xorwf	_Turbine_state& (0+255),w,b
  8357  0149EC  A4D8               	btfss	status,2,c
  8358  0149EE  D006               	goto	l22845
  8359  0149F0                     l3767:
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;RPM_Measurement.c: 65: {
  8363                           ;RPM_Measurement.c: 66: Turbine_RPM = Turbine_RPM_New;
  8364  0149F0  C115  F00A         	movff	_Turbine_RPM_New,_Turbine_RPM
  8365  0149F4  C116  F00B         	movff	_Turbine_RPM_New+1,_Turbine_RPM+1
  8366  0149F8  C117  F00C         	movff	_Turbine_RPM_New+2,_Turbine_RPM+2
  8367  0149FC                     l22845:
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;RPM_Measurement.c: 67: }
  8371                           ;RPM_Measurement.c: 70: }
  8372                           ;RPM_Measurement.c: 71: if(Turbine_state == RAMPUP_STATE)
  8373  0149FC  0100               	movlb	0	; () banked
  8374  0149FE  05F0               	decf	_Turbine_state& (0+255),w,b
  8375  014A00  A4D8               	btfss	status,2,c
  8376  014A02  D00C               	goto	l22851
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;RPM_Measurement.c: 72: {
  8380                           ;RPM_Measurement.c: 73: if(Pitch_Counter < 2)
  8381  014A04  0102               	movlb	2	; () banked
  8382  014A06  5197               	movf	(_Pitch_Counter+1)& (0+255),w,b
  8383  014A08  E112               	bnz	l22855
  8384  014A0A  0E02               	movlw	2
  8385  014A0C  0102               	movlb	2	; () banked
  8386  014A0E  5D96               	subwf	_Pitch_Counter& (0+255),w,b
  8387  014A10  B0D8               	btfsc	status,0,c
  8388  014A12  D00D               	goto	l22855
  8389                           
  8390                           ; BSR set to: 2
  8391                           ;RPM_Measurement.c: 74: {
  8392                           ;RPM_Measurement.c: 75: Pitch_Counter++;
  8393  014A14  0102               	movlb	2	; () banked
  8394  014A16  4B96               	infsnz	_Pitch_Counter& (0+255),f,b
  8395  014A18  2B97               	incf	(_Pitch_Counter+1)& (0+255),f,b
  8396                           
  8397                           ; BSR set to: 2
  8398                           ;RPM_Measurement.c: 76: }
  8399                           ;RPM_Measurement.c: 77: }
  8400  014A1A  D009               	goto	l22855
  8401  014A1C                     l22851:
  8402                           
  8403                           ;RPM_Measurement.c: 78: else if(Turbine_state != RAMPUP_STATE)
  8404  014A1C  0100               	movlb	0	; () banked
  8405  014A1E  05F0               	decf	_Turbine_state& (0+255),w,b
  8406  014A20  B4D8               	btfsc	status,2,c
  8407  014A22  D005               	goto	l22855
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;RPM_Measurement.c: 79: {
  8411                           ;RPM_Measurement.c: 80: Pitch_Counter = 0;
  8412  014A24  0E00               	movlw	0
  8413  014A26  0102               	movlb	2	; () banked
  8414  014A28  6F97               	movwf	(_Pitch_Counter+1)& (0+255),b
  8415  014A2A  0E00               	movlw	0
  8416  014A2C  6F96               	movwf	_Pitch_Counter& (0+255),b
  8417  014A2E                     l22855:
  8418                           
  8419                           ;RPM_Measurement.c: 82: }
  8420                           ;RPM_Measurement.c: 83: if(Pitch_Counter == 2)
  8421  014A2E  0E02               	movlw	2
  8422  014A30  0102               	movlb	2	; () banked
  8423  014A32  1996               	xorwf	_Pitch_Counter& (0+255),w,b
  8424  014A34  0102               	movlb	2	; () banked
  8425  014A36  1197               	iorwf	(_Pitch_Counter+1)& (0+255),w,b
  8426  014A38  A4D8               	btfss	status,2,c
  8427  014A3A  D005               	goto	l3772
  8428                           
  8429                           ; BSR set to: 2
  8430                           ;RPM_Measurement.c: 84: {
  8431                           ;RPM_Measurement.c: 85: Pitching_FlAG = 1;
  8432  014A3C  0E00               	movlw	0
  8433  014A3E  0102               	movlb	2	; () banked
  8434  014A40  6F99               	movwf	(_Pitching_FlAG+1)& (0+255),b
  8435  014A42  0E01               	movlw	1
  8436  014A44  6F98               	movwf	_Pitching_FlAG& (0+255),b
  8437  014A46                     l3772:
  8438                           
  8439                           ; BSR set to: 2
  8440                           ;RPM_Measurement.c: 86: }
  8441                           ;RPM_Measurement.c: 88: Timer1_OF_counter_Turbine = 0;
  8442  014A46  0E00               	movlw	0
  8443  014A48  0103               	movlb	3	; () banked
  8444  014A4A  6FF5               	movwf	(_Timer1_OF_counter_Turbine+1)& (0+255),b
  8445  014A4C  0E00               	movlw	0
  8446  014A4E  6FF4               	movwf	_Timer1_OF_counter_Turbine& (0+255),b
  8447                           
  8448                           ; BSR set to: 3
  8449                           ;RPM_Measurement.c: 89: RPM_Time_1 = RPM_Time;
  8450  014A50  C12C  F5D4         	movff	_RPM_Time,_RPM_Time_1
  8451  014A54  C12D  F5D5         	movff	_RPM_Time+1,_RPM_Time_1+1
  8452                           
  8453                           ;RPM_Measurement.c: 91: RPM_PWM = 0;
  8454  014A58  0E00               	movlw	0
  8455  014A5A  0102               	movlb	2	; () banked
  8456  014A5C  6FFB               	movwf	(_RPM_PWM+1)& (0+255),b
  8457  014A5E  0E00               	movlw	0
  8458  014A60  6FFA               	movwf	_RPM_PWM& (0+255),b
  8459                           
  8460                           ;RPM_Measurement.c: 92: RPM_Time = 0;
  8461  014A62  0E00               	movlw	0
  8462  014A64  0101               	movlb	1	; () banked
  8463  014A66  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
  8464  014A68  0E00               	movlw	0
  8465  014A6A  6F2C               	movwf	_RPM_Time& (0+255),b
  8466                           
  8467                           ;RPM_Measurement.c: 93: TRPM_Frequency = 0;
  8468  014A6C  0E00               	movlw	0
  8469  014A6E  0104               	movlb	4	; () banked
  8470  014A70  6FEA               	movwf	_TRPM_Frequency& (0+255),b
  8471  014A72  0E00               	movlw	0
  8472  014A74  0104               	movlb	4	; () banked
  8473  014A76  6FEB               	movwf	(_TRPM_Frequency+1)& (0+255),b
  8474  014A78  0E00               	movlw	0
  8475  014A7A  0104               	movlb	4	; () banked
  8476  014A7C  6FEC               	movwf	(_TRPM_Frequency+2)& (0+255),b
  8477                           
  8478                           ;RPM_Measurement.c: 94: TRPM_Time = 0;
  8479  014A7E  0E00               	movlw	0
  8480  014A80  0104               	movlb	4	; () banked
  8481  014A82  6FED               	movwf	_TRPM_Time& (0+255),b
  8482  014A84  0E00               	movlw	0
  8483  014A86  0104               	movlb	4	; () banked
  8484  014A88  6FEE               	movwf	(_TRPM_Time+1)& (0+255),b
  8485  014A8A  0E00               	movlw	0
  8486  014A8C  0104               	movlb	4	; () banked
  8487  014A8E  6FEF               	movwf	(_TRPM_Time+2)& (0+255),b
  8488                           
  8489                           ; BSR set to: 4
  8490                           ;RPM_Measurement.c: 95: CCP7IE = 1;
  8491  014A90  88B6               	bsf	4022,4,c	;volatile
  8492                           
  8493                           ; BSR set to: 4
  8494                           ;RPM_Measurement.c: 96: CCP7IF = 0;
  8495  014A92  98B7               	bcf	4023,4,c	;volatile
  8496  014A94  0012               	return	
  8497  014A96                     __end_of_Turbine_RPM_Cal:
  8498                           	opt stack 0
  8499                           tblptru	equ	0xFF8
  8500                           tblptrh	equ	0xFF7
  8501                           tblptrl	equ	0xFF6
  8502                           tablat	equ	0xFF5
  8503                           intcon	equ	0xFF2
  8504                           postinc0	equ	0xFEE
  8505                           wreg	equ	0xFE8
  8506                           postdec1	equ	0xFE5
  8507                           fsr1h	equ	0xFE2
  8508                           fsr1l	equ	0xFE1
  8509                           status	equ	0xFD8
  8510                           
  8511 ;; *************** function _Timer7_Init *****************
  8512 ;; Defined at:
  8513 ;;		line 27 in file "Initialization.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;		None
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;		None
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  1    wreg      void 
  8520 ;; Registers used:
  8521 ;;		wreg, status,2
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;Total ram usage:        0 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    3
  8534 ;; This function calls:
  8535 ;;		Nothing
  8536 ;; This function is called by:
  8537 ;;		_main
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           	psect	text13
  8542  01B06E                     __ptext13:
  8543                           	opt stack 0
  8544  01B06E                     _Timer7_Init:
  8545                           	opt stack 27
  8546                           
  8547                           ;Initialization.c: 29: T7CON = 0b00110101;
  8548                           
  8549                           ;incstack = 0
  8550  01B06E  0E35               	movlw	53
  8551  01B070  010F               	movlb	15	; () banked
  8552  01B072  6F3D               	movwf	61,b	;volatile
  8553                           
  8554                           ; BSR set to: 15
  8555                           ;Initialization.c: 31: TMR7IE = 1;
  8556  01B074  86B9               	bsf	4025,3,c	;volatile
  8557                           
  8558                           ; BSR set to: 15
  8559                           ;Initialization.c: 32: TMR7IF = 0;
  8560  01B076  96BA               	bcf	4026,3,c	;volatile
  8561                           
  8562                           ; BSR set to: 15
  8563  01B078  0012               	return		;funcret
  8564  01B07A                     __end_of_Timer7_Init:
  8565                           	opt stack 0
  8566                           tblptru	equ	0xFF8
  8567                           tblptrh	equ	0xFF7
  8568                           tblptrl	equ	0xFF6
  8569                           tablat	equ	0xFF5
  8570                           intcon	equ	0xFF2
  8571                           postinc0	equ	0xFEE
  8572                           wreg	equ	0xFE8
  8573                           postdec1	equ	0xFE5
  8574                           fsr1h	equ	0xFE2
  8575                           fsr1l	equ	0xFE1
  8576                           status	equ	0xFD8
  8577                           
  8578 ;; *************** function _Timer1_Initiate *****************
  8579 ;; Defined at:
  8580 ;;		line 17 in file "Initialization.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;		None
  8583 ;; Auto vars:     Size  Location     Type
  8584 ;;		None
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  1    wreg      void 
  8587 ;; Registers used:
  8588 ;;		None
  8589 ;; Tracked objects:
  8590 ;;		On entry : 0/0
  8591 ;;		On exit  : 0/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;Total ram usage:        0 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    3
  8601 ;; This function calls:
  8602 ;;		Nothing
  8603 ;; This function is called by:
  8604 ;;		_main
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           	psect	text14
  8609  01B010                     __ptext14:
  8610                           	opt stack 0
  8611  01B010                     _Timer1_Initiate:
  8612                           	opt stack 27
  8613                           
  8614                           ;Initialization.c: 20: T1CKPS1= 1;
  8615                           
  8616                           ; BSR set to: 15
  8617                           ;incstack = 0
  8618  01B010  8ACD               	bsf	4045,5,c	;volatile
  8619                           
  8620                           ;Initialization.c: 21: T1CKPS0 = 1;
  8621  01B012  88CD               	bsf	4045,4,c	;volatile
  8622                           
  8623                           ;Initialization.c: 22: T1CONbits.RD16 = 0;
  8624  01B014  92CD               	bcf	4045,1,c	;volatile
  8625                           
  8626                           ;Initialization.c: 23: TMR1ON = 1;
  8627  01B016  80CD               	bsf	4045,0,c	;volatile
  8628                           
  8629                           ;Initialization.c: 24: TMR1IF = 0;
  8630  01B018  909E               	bcf	3998,0,c	;volatile
  8631                           
  8632                           ;Initialization.c: 25: TMR1IE = 1;
  8633  01B01A  809D               	bsf	3997,0,c	;volatile
  8634  01B01C  0012               	return		;funcret
  8635  01B01E                     __end_of_Timer1_Initiate:
  8636                           	opt stack 0
  8637                           tblptru	equ	0xFF8
  8638                           tblptrh	equ	0xFF7
  8639                           tblptrl	equ	0xFF6
  8640                           tablat	equ	0xFF5
  8641                           intcon	equ	0xFF2
  8642                           postinc0	equ	0xFEE
  8643                           wreg	equ	0xFE8
  8644                           postdec1	equ	0xFE5
  8645                           fsr1h	equ	0xFE2
  8646                           fsr1l	equ	0xFE1
  8647                           status	equ	0xFD8
  8648                           
  8649 ;; *************** function _Timer0_OneSecond_Function *****************
  8650 ;; Defined at:
  8651 ;;		line 22 in file "OneSecond_Function.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;		None
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;		None
  8656 ;; Return value:  Size  Location     Type
  8657 ;;                  1    wreg      void 
  8658 ;; Registers used:
  8659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;Total ram usage:        0 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; Hardware stack levels required when called:    9
  8672 ;; This function calls:
  8673 ;;		_EEPROM_Error_Monitor
  8674 ;;		_Error_Checking_One_Second
  8675 ;;		_Error_Scan_Running
  8676 ;;		_Last_Five_Error
  8677 ;;		_Stopping_state_function
  8678 ;;		_Turbine_Ramp_up_1_Second
  8679 ;;		_Turbine_Start_up_1_Second
  8680 ;;		_Two_Sec_Delay
  8681 ;;		_UART_Data
  8682 ;;		_VFD_RS485_Data
  8683 ;;		_VFD_RS485_Data_filter
  8684 ;;		_Wind_Average
  8685 ;; This function is called by:
  8686 ;;		_main
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           	psect	text15
  8691  019292                     __ptext15:
  8692                           	opt stack 0
  8693  019292                     _Timer0_OneSecond_Function:
  8694                           	opt stack 21
  8695                           
  8696                           ;OneSecond_Function.c: 26: if(Data_1[8] == 0x40)
  8697                           
  8698                           ;incstack = 0
  8699  019292  0E40               	movlw	64
  8700  019294  0105               	movlb	5	; () banked
  8701  019296  1910               	xorwf	(_Data_1+16)& (0+255),w,b
  8702  019298  0105               	movlb	5	; () banked
  8703  01929A  1111               	iorwf	(_Data_1+17)& (0+255),w,b
  8704  01929C  B4D8               	btfsc	status,2,c
  8705                           
  8706                           ; BSR set to: 5
  8707                           ;OneSecond_Function.c: 27: {
  8708                           ;OneSecond_Function.c: 28: VFD_RS485_Data();
  8709  01929E  EC4C  F0D3         	call	_VFD_RS485_Data	;wreg free
  8710                           
  8711                           ;OneSecond_Function.c: 29: }
  8712                           ;OneSecond_Function.c: 30: VFD_RS485_Data_filter();
  8713  0192A2  EC56  F0D2         	call	_VFD_RS485_Data_filter	;wreg free
  8714                           
  8715                           ;OneSecond_Function.c: 32: Error_Checking_One_Second();
  8716  0192A6  EC1E  F0CA         	call	_Error_Checking_One_Second	;wreg free
  8717                           
  8718                           ;OneSecond_Function.c: 34: if(Turbine_state == STARTUP_STATE)
  8719  0192AA  0100               	movlb	0	; () banked
  8720  0192AC  51F0               	movf	_Turbine_state& (0+255),w,b
  8721  0192AE  B4D8               	btfsc	status,2,c
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;OneSecond_Function.c: 35: {
  8725                           ;OneSecond_Function.c: 36: Turbine_Start_up_1_Second();
  8726  0192B0  EC4D  F0D8         	call	_Turbine_Start_up_1_Second	;wreg free
  8727                           
  8728                           ;OneSecond_Function.c: 37: }
  8729                           ;OneSecond_Function.c: 39: if(Turbine_state == RAMPUP_STATE)
  8730  0192B4  0100               	movlb	0	; () banked
  8731  0192B6  05F0               	decf	_Turbine_state& (0+255),w,b
  8732  0192B8  B4D8               	btfsc	status,2,c
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;OneSecond_Function.c: 40: {
  8736                           ;OneSecond_Function.c: 41: Turbine_Ramp_up_1_Second();
  8737  0192BA  ECDE  F0D7         	call	_Turbine_Ramp_up_1_Second	;wreg free
  8738                           
  8739                           ;OneSecond_Function.c: 42: }
  8740                           ;OneSecond_Function.c: 44: if(Turbine_state == RUNNING_STATE)
  8741  0192BE  0E02               	movlw	2
  8742  0192C0  0100               	movlb	0	; () banked
  8743  0192C2  19F0               	xorwf	_Turbine_state& (0+255),w,b
  8744  0192C4  A4D8               	btfss	status,2,c
  8745  0192C6  D004               	goto	l22961
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;OneSecond_Function.c: 45: {
  8749                           ;OneSecond_Function.c: 46: Error_Scan_Running();
  8750  0192C8  ECEE  F0CE         	call	_Error_Scan_Running	;wreg free
  8751                           
  8752                           ;OneSecond_Function.c: 47: Two_Sec_Delay();
  8753  0192CC  EC44  F0D7         	call	_Two_Sec_Delay	;wreg free
  8754  0192D0                     l22961:
  8755                           
  8756                           ;OneSecond_Function.c: 48: }
  8757                           ;OneSecond_Function.c: 50: if(Turbine_state == STOPPING_STATE)
  8758  0192D0  0E03               	movlw	3
  8759  0192D2  0100               	movlb	0	; () banked
  8760  0192D4  19F0               	xorwf	_Turbine_state& (0+255),w,b
  8761  0192D6  B4D8               	btfsc	status,2,c
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;OneSecond_Function.c: 51: {
  8765                           ;OneSecond_Function.c: 52: Stopping_state_function();
  8766  0192D8  ECF4  F0CF         	call	_Stopping_state_function	;wreg free
  8767                           
  8768                           ;OneSecond_Function.c: 53: }
  8769                           ;OneSecond_Function.c: 55: if(Timer0_RAMPUP_Counter < (10) && Turbine_state == RAMPUP_ST
      +                          ATE)
  8770  0192DC  0E0A               	movlw	10
  8771  0192DE  0100               	movlb	0	; () banked
  8772  0192E0  61EE               	cpfslt	_Timer0_RAMPUP_Counter& (0+255),b
  8773  0192E2  D007               	goto	l22971
  8774                           
  8775                           ; BSR set to: 0
  8776  0192E4  0100               	movlb	0	; () banked
  8777  0192E6  05F0               	decf	_Turbine_state& (0+255),w,b
  8778  0192E8  A4D8               	btfss	status,2,c
  8779  0192EA  D003               	goto	l22971
  8780                           
  8781                           ; BSR set to: 0
  8782                           ;OneSecond_Function.c: 56: {
  8783                           ;OneSecond_Function.c: 57: Timer0_RAMPUP_Counter++;
  8784  0192EC  0100               	movlb	0	; () banked
  8785  0192EE  2BEE               	incf	_Timer0_RAMPUP_Counter& (0+255),f,b
  8786                           
  8787                           ;OneSecond_Function.c: 58: }
  8788  0192F0  D00A               	goto	l22975
  8789  0192F2                     l22971:
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;OneSecond_Function.c: 59: else if(Turbine_state != RAMPUP_STATE )
  8793  0192F2  0100               	movlb	0	; () banked
  8794  0192F4  05F0               	decf	_Turbine_state& (0+255),w,b
  8795  0192F6  B4D8               	btfsc	status,2,c
  8796  0192F8  D006               	goto	l22975
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;OneSecond_Function.c: 60: {
  8800                           ;OneSecond_Function.c: 61: Ten_Sec_RampUp_Flag = 0;
  8801  0192FA  0E00               	movlw	0
  8802  0192FC  0100               	movlb	0	; () banked
  8803  0192FE  6FED               	movwf	_Ten_Sec_RampUp_Flag& (0+255),b
  8804                           
  8805                           ;OneSecond_Function.c: 62: Timer0_RAMPUP_Counter = 0;
  8806  019300  0E00               	movlw	0
  8807  019302  0100               	movlb	0	; () banked
  8808  019304  6FEE               	movwf	_Timer0_RAMPUP_Counter& (0+255),b
  8809  019306                     l22975:
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;OneSecond_Function.c: 63: }
  8813                           ;OneSecond_Function.c: 64: if(Timer0_RAMPUP_Counter == (10) && Turbine_state == RAMPUP_S
      +                          TATE)
  8814  019306  0E0A               	movlw	10
  8815  019308  0100               	movlb	0	; () banked
  8816  01930A  19EE               	xorwf	_Timer0_RAMPUP_Counter& (0+255),w,b
  8817  01930C  A4D8               	btfss	status,2,c
  8818  01930E  D006               	goto	l22981
  8819                           
  8820                           ; BSR set to: 0
  8821  019310  0100               	movlb	0	; () banked
  8822  019312  05F0               	decf	_Turbine_state& (0+255),w,b
  8823  019314  A4D8               	btfss	status,2,c
  8824  019316  D002               	goto	l22981
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;OneSecond_Function.c: 65: {
  8828                           ;OneSecond_Function.c: 66: Ten_Sec_RampUp_Flag = 1;
  8829  019318  0E01               	movlw	1
  8830  01931A  D009               	goto	L5
  8831  01931C                     l22981:
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;OneSecond_Function.c: 68: else if(Ten_Sec_RampUp_Flag < (10) || Turbine_state != RAMPUP
      +                          _STATE)
  8835  01931C  0E09               	movlw	9
  8836  01931E  0100               	movlb	0	; () banked
  8837  019320  65ED               	cpfsgt	_Ten_Sec_RampUp_Flag& (0+255),b
  8838  019322  D004               	goto	l22985
  8839                           
  8840                           ; BSR set to: 0
  8841  019324  0100               	movlb	0	; () banked
  8842  019326  05F0               	decf	_Turbine_state& (0+255),w,b
  8843  019328  B4D8               	btfsc	status,2,c
  8844  01932A  D003               	goto	l22987
  8845  01932C                     l22985:
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;OneSecond_Function.c: 69: {
  8849                           ;OneSecond_Function.c: 70: Ten_Sec_RampUp_Flag = 0;
  8850  01932C  0E00               	movlw	0
  8851  01932E                     L5:
  8852  01932E  0100               	movlb	0	; () banked
  8853  019330  6FED               	movwf	_Ten_Sec_RampUp_Flag& (0+255),b
  8854  019332                     l22987:
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;OneSecond_Function.c: 71: }
  8858                           ;OneSecond_Function.c: 73: Last_Five_Error();
  8859  019332  EC95  F0D7         	call	_Last_Five_Error	;wreg free
  8860                           
  8861                           ;OneSecond_Function.c: 74: Wind_Average();
  8862  019336  EC58  F0A1         	call	_Wind_Average	;wreg free
  8863                           
  8864                           ;OneSecond_Function.c: 75: EEPROM_Error_Monitor();
  8865  01933A  ECC2  F0AE         	call	_EEPROM_Error_Monitor	;wreg free
  8866                           
  8867                           ;OneSecond_Function.c: 77: Serial_No = Serial_No + 1;
  8868  01933E  0E01               	movlw	1
  8869  019340  0100               	movlb	0	; () banked
  8870  019342  25DF               	addwf	_Serial_No& (0+255),w,b
  8871  019344  0100               	movlb	0	; () banked
  8872  019346  6FDF               	movwf	_Serial_No& (0+255),b
  8873  019348  0E00               	movlw	0
  8874  01934A  0100               	movlb	0	; () banked
  8875  01934C  21E0               	addwfc	(_Serial_No+1)& (0+255),w,b
  8876  01934E  0100               	movlb	0	; () banked
  8877  019350  6FE0               	movwf	(_Serial_No+1)& (0+255),b
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;OneSecond_Function.c: 78: if(Serial_No > 2)
  8881  019352  0100               	movlb	0	; () banked
  8882  019354  51E0               	movf	(_Serial_No+1)& (0+255),w,b
  8883  019356  E105               	bnz	u17780
  8884  019358  0E03               	movlw	3
  8885  01935A  0100               	movlb	0	; () banked
  8886  01935C  5DDF               	subwf	_Serial_No& (0+255),w,b
  8887  01935E  A0D8               	btfss	status,0,c
  8888  019360  0012               	return	
  8889  019362                     u17780:
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;OneSecond_Function.c: 79: {
  8893                           ;OneSecond_Function.c: 80: UART_Data();
  8894  019362  EC72  F086         	call	_UART_Data	;wreg free
  8895  019366  0012               	return	
  8896  019368                     __end_of_Timer0_OneSecond_Function:
  8897                           	opt stack 0
  8898                           tblptru	equ	0xFF8
  8899                           tblptrh	equ	0xFF7
  8900                           tblptrl	equ	0xFF6
  8901                           tablat	equ	0xFF5
  8902                           intcon	equ	0xFF2
  8903                           postinc0	equ	0xFEE
  8904                           wreg	equ	0xFE8
  8905                           postdec1	equ	0xFE5
  8906                           fsr1h	equ	0xFE2
  8907                           fsr1l	equ	0xFE1
  8908                           status	equ	0xFD8
  8909                           
  8910 ;; *************** function _Wind_Average *****************
  8911 ;; Defined at:
  8912 ;;		line 221 in file "RPM_Measurement.c"
  8913 ;; Parameters:    Size  Location     Type
  8914 ;;		None
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;		None
  8917 ;; Return value:  Size  Location     Type
  8918 ;;                  1    wreg      void 
  8919 ;; Registers used:
  8920 ;;		wreg, status,2, status,0, cstack
  8921 ;; Tracked objects:
  8922 ;;		On entry : 0/0
  8923 ;;		On exit  : 0/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8929 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8930 ;;Total ram usage:       24 bytes
  8931 ;; Hardware stack levels used:    1
  8932 ;; Hardware stack levels required when called:    5
  8933 ;; This function calls:
  8934 ;;		___ftadd
  8935 ;;		___ftdiv
  8936 ;; This function is called by:
  8937 ;;		_Timer0_OneSecond_Function
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           	psect	text16
  8942  0142B0                     __ptext16:
  8943                           	opt stack 0
  8944  0142B0                     _Wind_Average:
  8945                           	opt stack 24
  8946                           
  8947                           ;RPM_Measurement.c: 223: Wind_Speed_9 = Wind_Speed_8;
  8948                           
  8949                           ;incstack = 0
  8950  0142B0  C266  F4C0         	movff	_Wind_Speed_8,_Wind_Speed_9
  8951  0142B4  C267  F4C1         	movff	_Wind_Speed_8+1,_Wind_Speed_9+1
  8952  0142B8  C268  F4C2         	movff	_Wind_Speed_8+2,_Wind_Speed_9+2
  8953                           
  8954                           ;RPM_Measurement.c: 224: Wind_Speed_8 = Wind_Speed_7;
  8955  0142BC  C260  F266         	movff	_Wind_Speed_7,_Wind_Speed_8
  8956  0142C0  C261  F267         	movff	_Wind_Speed_7+1,_Wind_Speed_8+1
  8957  0142C4  C262  F268         	movff	_Wind_Speed_7+2,_Wind_Speed_8+2
  8958                           
  8959                           ;RPM_Measurement.c: 225: Wind_Speed_7 = Wind_Speed_6;
  8960  0142C8  C25A  F260         	movff	_Wind_Speed_6,_Wind_Speed_7
  8961  0142CC  C25B  F261         	movff	_Wind_Speed_6+1,_Wind_Speed_7+1
  8962  0142D0  C25C  F262         	movff	_Wind_Speed_6+2,_Wind_Speed_7+2
  8963                           
  8964                           ;RPM_Measurement.c: 226: Wind_Speed_6 = Wind_Speed_5;
  8965  0142D4  C254  F25A         	movff	_Wind_Speed_5,_Wind_Speed_6
  8966  0142D8  C255  F25B         	movff	_Wind_Speed_5+1,_Wind_Speed_6+1
  8967  0142DC  C256  F25C         	movff	_Wind_Speed_5+2,_Wind_Speed_6+2
  8968                           
  8969                           ;RPM_Measurement.c: 227: Wind_Speed_5 = Wind_Speed_4;
  8970  0142E0  C24E  F254         	movff	_Wind_Speed_4,_Wind_Speed_5
  8971  0142E4  C24F  F255         	movff	_Wind_Speed_4+1,_Wind_Speed_5+1
  8972  0142E8  C250  F256         	movff	_Wind_Speed_4+2,_Wind_Speed_5+2
  8973                           
  8974                           ;RPM_Measurement.c: 228: Wind_Speed_4 = Wind_Speed_3;
  8975  0142EC  C248  F24E         	movff	_Wind_Speed_3,_Wind_Speed_4
  8976  0142F0  C249  F24F         	movff	_Wind_Speed_3+1,_Wind_Speed_4+1
  8977  0142F4  C24A  F250         	movff	_Wind_Speed_3+2,_Wind_Speed_4+2
  8978                           
  8979                           ;RPM_Measurement.c: 229: Wind_Speed_3 = Wind_Spd_2;
  8980  0142F8  C230  F248         	movff	_Wind_Spd_2,_Wind_Speed_3
  8981  0142FC  C231  F249         	movff	_Wind_Spd_2+1,_Wind_Speed_3+1
  8982  014300  C232  F24A         	movff	_Wind_Spd_2+2,_Wind_Speed_3+2
  8983                           
  8984                           ;RPM_Measurement.c: 230: Wind_Spd_2 = Wind_Speed_1;
  8985  014304  C23C  F230         	movff	_Wind_Speed_1,_Wind_Spd_2
  8986  014308  C23D  F231         	movff	_Wind_Speed_1+1,_Wind_Spd_2+1
  8987  01430C  C23E  F232         	movff	_Wind_Speed_1+2,_Wind_Spd_2+2
  8988                           
  8989                           ;RPM_Measurement.c: 231: Wind_Speed_1 = Wind_Speed_0;
  8990  014310  C236  F23C         	movff	_Wind_Speed_0,_Wind_Speed_1
  8991  014314  C237  F23D         	movff	_Wind_Speed_0+1,_Wind_Speed_1+1
  8992  014318  C238  F23E         	movff	_Wind_Speed_0+2,_Wind_Speed_1+2
  8993                           
  8994                           ;RPM_Measurement.c: 232: Wind_Speed_0 = Wind_Speed;
  8995  01431C  C233  F236         	movff	_Wind_Speed,_Wind_Speed_0
  8996  014320  C234  F237         	movff	_Wind_Speed+1,_Wind_Speed_0+1
  8997  014324  C235  F238         	movff	_Wind_Speed+2,_Wind_Speed_0+2
  8998                           
  8999                           ;RPM_Measurement.c: 234: if(Ten_Sec_Counter < (10))
  9000  014328  0E0A               	movlw	10
  9001  01432A  0100               	movlb	0	; () banked
  9002  01432C  61EB               	cpfslt	_Ten_Sec_Counter& (0+255),b
  9003  01432E  D002               	goto	l22001
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;RPM_Measurement.c: 235: {
  9007                           ;RPM_Measurement.c: 236: Ten_Sec_Counter++;
  9008  014330  0100               	movlb	0	; () banked
  9009  014332  2BEB               	incf	_Ten_Sec_Counter& (0+255),f,b
  9010  014334                     l22001:
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;RPM_Measurement.c: 237: }
  9014                           ;RPM_Measurement.c: 238: if(Ten_Sec_Counter == (10))
  9015  014334  0E0A               	movlw	10
  9016  014336  0100               	movlb	0	; () banked
  9017  014338  19EB               	xorwf	_Ten_Sec_Counter& (0+255),w,b
  9018  01433A  A4D8               	btfss	status,2,c
  9019  01433C  D0C5               	goto	l22005
  9020                           
  9021                           ; BSR set to: 0
  9022                           ;RPM_Measurement.c: 239: {
  9023                           ;RPM_Measurement.c: 240: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9024  01433E  C266  F090         	movff	_Wind_Speed_8,___ftadd@f2
  9025  014342  C267  F091         	movff	_Wind_Speed_8+1,___ftadd@f2+1
  9026  014346  C268  F092         	movff	_Wind_Speed_8+2,___ftadd@f2+2
  9027  01434A  C4C0  F08D         	movff	_Wind_Speed_9,___ftadd@f1
  9028  01434E  C4C1  F08E         	movff	_Wind_Speed_9+1,___ftadd@f1+1
  9029  014352  C4C2  F08F         	movff	_Wind_Speed_9+2,___ftadd@f1+2
  9030  014356  EC69  F0B2         	call	___ftadd	;wreg free
  9031  01435A  C08D  F1AA         	movff	?___ftadd,_Wind_Average$8043
  9032  01435E  C08E  F1AB         	movff	?___ftadd+1,_Wind_Average$8043+1
  9033  014362  C08F  F1AC         	movff	?___ftadd+2,_Wind_Average$8043+2
  9034                           
  9035                           ;RPM_Measurement.c: 239: {
  9036                           ;RPM_Measurement.c: 240: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9037  014366  C260  F090         	movff	_Wind_Speed_7,___ftadd@f2
  9038  01436A  C261  F091         	movff	_Wind_Speed_7+1,___ftadd@f2+1
  9039  01436E  C262  F092         	movff	_Wind_Speed_7+2,___ftadd@f2+2
  9040  014372  C1AA  F08D         	movff	_Wind_Average$8043,___ftadd@f1
  9041  014376  C1AB  F08E         	movff	_Wind_Average$8043+1,___ftadd@f1+1
  9042  01437A  C1AC  F08F         	movff	_Wind_Average$8043+2,___ftadd@f1+2
  9043  01437E  EC69  F0B2         	call	___ftadd	;wreg free
  9044  014382  C08D  F1AD         	movff	?___ftadd,_Wind_Average$8044
  9045  014386  C08E  F1AE         	movff	?___ftadd+1,_Wind_Average$8044+1
  9046  01438A  C08F  F1AF         	movff	?___ftadd+2,_Wind_Average$8044+2
  9047                           
  9048                           ;RPM_Measurement.c: 239: {
  9049                           ;RPM_Measurement.c: 240: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9050  01438E  C25A  F090         	movff	_Wind_Speed_6,___ftadd@f2
  9051  014392  C25B  F091         	movff	_Wind_Speed_6+1,___ftadd@f2+1
  9052  014396  C25C  F092         	movff	_Wind_Speed_6+2,___ftadd@f2+2
  9053  01439A  C1AD  F08D         	movff	_Wind_Average$8044,___ftadd@f1
  9054  01439E  C1AE  F08E         	movff	_Wind_Average$8044+1,___ftadd@f1+1
  9055  0143A2  C1AF  F08F         	movff	_Wind_Average$8044+2,___ftadd@f1+2
  9056  0143A6  EC69  F0B2         	call	___ftadd	;wreg free
  9057  0143AA  C08D  F1B0         	movff	?___ftadd,_Wind_Average$8045
  9058  0143AE  C08E  F1B1         	movff	?___ftadd+1,_Wind_Average$8045+1
  9059  0143B2  C08F  F1B2         	movff	?___ftadd+2,_Wind_Average$8045+2
  9060                           
  9061                           ;RPM_Measurement.c: 239: {
  9062                           ;RPM_Measurement.c: 240: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9063  0143B6  C254  F090         	movff	_Wind_Speed_5,___ftadd@f2
  9064  0143BA  C255  F091         	movff	_Wind_Speed_5+1,___ftadd@f2+1
  9065  0143BE  C256  F092         	movff	_Wind_Speed_5+2,___ftadd@f2+2
  9066  0143C2  C1B0  F08D         	movff	_Wind_Average$8045,___ftadd@f1
  9067  0143C6  C1B1  F08E         	movff	_Wind_Average$8045+1,___ftadd@f1+1
  9068  0143CA  C1B2  F08F         	movff	_Wind_Average$8045+2,___ftadd@f1+2
  9069  0143CE  EC69  F0B2         	call	___ftadd	;wreg free
  9070  0143D2  C08D  F1B3         	movff	?___ftadd,_Wind_Average$8046
  9071  0143D6  C08E  F1B4         	movff	?___ftadd+1,_Wind_Average$8046+1
  9072  0143DA  C08F  F1B5         	movff	?___ftadd+2,_Wind_Average$8046+2
  9073                           
  9074                           ;RPM_Measurement.c: 239: {
  9075                           ;RPM_Measurement.c: 240: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9076  0143DE  C24E  F090         	movff	_Wind_Speed_4,___ftadd@f2
  9077  0143E2  C24F  F091         	movff	_Wind_Speed_4+1,___ftadd@f2+1
  9078  0143E6  C250  F092         	movff	_Wind_Speed_4+2,___ftadd@f2+2
  9079  0143EA  C1B3  F08D         	movff	_Wind_Average$8046,___ftadd@f1
  9080  0143EE  C1B4  F08E         	movff	_Wind_Average$8046+1,___ftadd@f1+1
  9081  0143F2  C1B5  F08F         	movff	_Wind_Average$8046+2,___ftadd@f1+2
  9082  0143F6  EC69  F0B2         	call	___ftadd	;wreg free
  9083  0143FA  C08D  F1B6         	movff	?___ftadd,_Wind_Average$8047
  9084  0143FE  C08E  F1B7         	movff	?___ftadd+1,_Wind_Average$8047+1
  9085  014402  C08F  F1B8         	movff	?___ftadd+2,_Wind_Average$8047+2
  9086                           
  9087                           ;RPM_Measurement.c: 239: {
  9088                           ;RPM_Measurement.c: 240: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9089  014406  C248  F090         	movff	_Wind_Speed_3,___ftadd@f2
  9090  01440A  C249  F091         	movff	_Wind_Speed_3+1,___ftadd@f2+1
  9091  01440E  C24A  F092         	movff	_Wind_Speed_3+2,___ftadd@f2+2
  9092  014412  C1B6  F08D         	movff	_Wind_Average$8047,___ftadd@f1
  9093  014416  C1B7  F08E         	movff	_Wind_Average$8047+1,___ftadd@f1+1
  9094  01441A  C1B8  F08F         	movff	_Wind_Average$8047+2,___ftadd@f1+2
  9095  01441E  EC69  F0B2         	call	___ftadd	;wreg free
  9096  014422  C08D  F1B9         	movff	?___ftadd,_Wind_Average$8048
  9097  014426  C08E  F1BA         	movff	?___ftadd+1,_Wind_Average$8048+1
  9098  01442A  C08F  F1BB         	movff	?___ftadd+2,_Wind_Average$8048+2
  9099                           
  9100                           ;RPM_Measurement.c: 239: {
  9101                           ;RPM_Measurement.c: 240: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9102  01442E  C230  F090         	movff	_Wind_Spd_2,___ftadd@f2
  9103  014432  C231  F091         	movff	_Wind_Spd_2+1,___ftadd@f2+1
  9104  014436  C232  F092         	movff	_Wind_Spd_2+2,___ftadd@f2+2
  9105  01443A  C1B9  F08D         	movff	_Wind_Average$8048,___ftadd@f1
  9106  01443E  C1BA  F08E         	movff	_Wind_Average$8048+1,___ftadd@f1+1
  9107  014442  C1BB  F08F         	movff	_Wind_Average$8048+2,___ftadd@f1+2
  9108  014446  EC69  F0B2         	call	___ftadd	;wreg free
  9109  01444A  C08D  F1BC         	movff	?___ftadd,_Wind_Average$8049
  9110  01444E  C08E  F1BD         	movff	?___ftadd+1,_Wind_Average$8049+1
  9111  014452  C08F  F1BE         	movff	?___ftadd+2,_Wind_Average$8049+2
  9112                           
  9113                           ;RPM_Measurement.c: 239: {
  9114                           ;RPM_Measurement.c: 240: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9115  014456  C23C  F090         	movff	_Wind_Speed_1,___ftadd@f2
  9116  01445A  C23D  F091         	movff	_Wind_Speed_1+1,___ftadd@f2+1
  9117  01445E  C23E  F092         	movff	_Wind_Speed_1+2,___ftadd@f2+2
  9118  014462  C1BC  F08D         	movff	_Wind_Average$8049,___ftadd@f1
  9119  014466  C1BD  F08E         	movff	_Wind_Average$8049+1,___ftadd@f1+1
  9120  01446A  C1BE  F08F         	movff	_Wind_Average$8049+2,___ftadd@f1+2
  9121  01446E  EC69  F0B2         	call	___ftadd	;wreg free
  9122  014472  C08D  F1BF         	movff	?___ftadd,_Wind_Average$8050
  9123  014476  C08E  F1C0         	movff	?___ftadd+1,_Wind_Average$8050+1
  9124  01447A  C08F  F1C1         	movff	?___ftadd+2,_Wind_Average$8050+2
  9125                           
  9126                           ;RPM_Measurement.c: 239: {
  9127                           ;RPM_Measurement.c: 240: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  9128  01447E  C236  F090         	movff	_Wind_Speed_0,___ftadd@f2
  9129  014482  C237  F091         	movff	_Wind_Speed_0+1,___ftadd@f2+1
  9130  014486  C238  F092         	movff	_Wind_Speed_0+2,___ftadd@f2+2
  9131  01448A  C1BF  F08D         	movff	_Wind_Average$8050,___ftadd@f1
  9132  01448E  C1C0  F08E         	movff	_Wind_Average$8050+1,___ftadd@f1+1
  9133  014492  C1C1  F08F         	movff	_Wind_Average$8050+2,___ftadd@f1+2
  9134  014496  EC69  F0B2         	call	___ftadd	;wreg free
  9135  01449A  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  9136  01449E  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  9137  0144A2  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  9138  0144A6  0E00               	movlw	0
  9139  0144A8  0100               	movlb	0	; () banked
  9140  0144AA  6FA8               	movwf	___ftdiv@f2& (0+255),b
  9141  0144AC  0E20               	movlw	32
  9142  0144AE  0100               	movlb	0	; () banked
  9143  0144B0  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  9144  0144B2  0E41               	movlw	65
  9145  0144B4  0100               	movlb	0	; () banked
  9146  0144B6  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  9147  0144B8  EC53  F0C1         	call	___ftdiv	;wreg free
  9148  0144BC  C0A5  F00D         	movff	?___ftdiv,_Wind_Speed_Avg
  9149  0144C0  C0A6  F00E         	movff	?___ftdiv+1,_Wind_Speed_Avg+1
  9150  0144C4  C0A7  F00F         	movff	?___ftdiv+2,_Wind_Speed_Avg+2
  9151  0144C8                     l22005:
  9152                           
  9153                           ;RPM_Measurement.c: 241: }
  9154                           ;RPM_Measurement.c: 244: Wind_Speed_9_2 = Wind_Speed_8_2;
  9155  0144C8  C269  F4C3         	movff	_Wind_Speed_8_2,_Wind_Speed_9_2
  9156  0144CC  C26A  F4C4         	movff	_Wind_Speed_8_2+1,_Wind_Speed_9_2+1
  9157  0144D0  C26B  F4C5         	movff	_Wind_Speed_8_2+2,_Wind_Speed_9_2+2
  9158                           
  9159                           ;RPM_Measurement.c: 245: Wind_Speed_8_2 = Wind_Speed_7_2;
  9160  0144D4  C263  F269         	movff	_Wind_Speed_7_2,_Wind_Speed_8_2
  9161  0144D8  C264  F26A         	movff	_Wind_Speed_7_2+1,_Wind_Speed_8_2+1
  9162  0144DC  C265  F26B         	movff	_Wind_Speed_7_2+2,_Wind_Speed_8_2+2
  9163                           
  9164                           ;RPM_Measurement.c: 246: Wind_Speed_7_2 = Wind_Speed_6_2;
  9165  0144E0  C25D  F263         	movff	_Wind_Speed_6_2,_Wind_Speed_7_2
  9166  0144E4  C25E  F264         	movff	_Wind_Speed_6_2+1,_Wind_Speed_7_2+1
  9167  0144E8  C25F  F265         	movff	_Wind_Speed_6_2+2,_Wind_Speed_7_2+2
  9168                           
  9169                           ;RPM_Measurement.c: 247: Wind_Speed_6_2 = Wind_Speed_5_2;
  9170  0144EC  C257  F25D         	movff	_Wind_Speed_5_2,_Wind_Speed_6_2
  9171  0144F0  C258  F25E         	movff	_Wind_Speed_5_2+1,_Wind_Speed_6_2+1
  9172  0144F4  C259  F25F         	movff	_Wind_Speed_5_2+2,_Wind_Speed_6_2+2
  9173                           
  9174                           ;RPM_Measurement.c: 248: Wind_Speed_5_2 = Wind_Speed_4_2;
  9175  0144F8  C251  F257         	movff	_Wind_Speed_4_2,_Wind_Speed_5_2
  9176  0144FC  C252  F258         	movff	_Wind_Speed_4_2+1,_Wind_Speed_5_2+1
  9177  014500  C253  F259         	movff	_Wind_Speed_4_2+2,_Wind_Speed_5_2+2
  9178                           
  9179                           ;RPM_Measurement.c: 249: Wind_Speed_4_2 = Wind_Speed_3_2;
  9180  014504  C24B  F251         	movff	_Wind_Speed_3_2,_Wind_Speed_4_2
  9181  014508  C24C  F252         	movff	_Wind_Speed_3_2+1,_Wind_Speed_4_2+1
  9182  01450C  C24D  F253         	movff	_Wind_Speed_3_2+2,_Wind_Speed_4_2+2
  9183                           
  9184                           ;RPM_Measurement.c: 250: Wind_Speed_3_2 = Wind_Speed_2_2;
  9185  014510  C245  F24B         	movff	_Wind_Speed_2_2,_Wind_Speed_3_2
  9186  014514  C246  F24C         	movff	_Wind_Speed_2_2+1,_Wind_Speed_3_2+1
  9187  014518  C247  F24D         	movff	_Wind_Speed_2_2+2,_Wind_Speed_3_2+2
  9188                           
  9189                           ;RPM_Measurement.c: 251: Wind_Speed_2_2 = Wind_Speed_1_2;
  9190  01451C  C23F  F245         	movff	_Wind_Speed_1_2,_Wind_Speed_2_2
  9191  014520  C240  F246         	movff	_Wind_Speed_1_2+1,_Wind_Speed_2_2+1
  9192  014524  C241  F247         	movff	_Wind_Speed_1_2+2,_Wind_Speed_2_2+2
  9193                           
  9194                           ;RPM_Measurement.c: 252: Wind_Speed_1_2 = Wind_Speed_0_2;
  9195  014528  C239  F23F         	movff	_Wind_Speed_0_2,_Wind_Speed_1_2
  9196  01452C  C23A  F240         	movff	_Wind_Speed_0_2+1,_Wind_Speed_1_2+1
  9197  014530  C23B  F241         	movff	_Wind_Speed_0_2+2,_Wind_Speed_1_2+2
  9198                           
  9199                           ;RPM_Measurement.c: 253: Wind_Speed_0_2 = Wind_Speed_2;
  9200  014534  C242  F239         	movff	_Wind_Speed_2,_Wind_Speed_0_2
  9201  014538  C243  F23A         	movff	_Wind_Speed_2+1,_Wind_Speed_0_2+1
  9202  01453C  C244  F23B         	movff	_Wind_Speed_2+2,_Wind_Speed_0_2+2
  9203                           
  9204                           ;RPM_Measurement.c: 255: if(Ten_Sec_Counter_2 < (10))
  9205  014540  0E0A               	movlw	10
  9206  014542  0100               	movlb	0	; () banked
  9207  014544  61EC               	cpfslt	_Ten_Sec_Counter_2& (0+255),b
  9208  014546  D002               	goto	l22029
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;RPM_Measurement.c: 256: {
  9212                           ;RPM_Measurement.c: 257: Ten_Sec_Counter_2++;
  9213  014548  0100               	movlb	0	; () banked
  9214  01454A  2BEC               	incf	_Ten_Sec_Counter_2& (0+255),f,b
  9215  01454C                     l22029:
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;RPM_Measurement.c: 258: }
  9219                           ;RPM_Measurement.c: 259: if(Ten_Sec_Counter_2 == (10))
  9220  01454C  0E0A               	movlw	10
  9221  01454E  0100               	movlb	0	; () banked
  9222  014550  19EC               	xorwf	_Ten_Sec_Counter_2& (0+255),w,b
  9223  014552  A4D8               	btfss	status,2,c
  9224  014554  0012               	return	
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;RPM_Measurement.c: 260: {
  9228                           ;RPM_Measurement.c: 261: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9229  014556  C269  F090         	movff	_Wind_Speed_8_2,___ftadd@f2
  9230  01455A  C26A  F091         	movff	_Wind_Speed_8_2+1,___ftadd@f2+1
  9231  01455E  C26B  F092         	movff	_Wind_Speed_8_2+2,___ftadd@f2+2
  9232  014562  C4C3  F08D         	movff	_Wind_Speed_9_2,___ftadd@f1
  9233  014566  C4C4  F08E         	movff	_Wind_Speed_9_2+1,___ftadd@f1+1
  9234  01456A  C4C5  F08F         	movff	_Wind_Speed_9_2+2,___ftadd@f1+2
  9235  01456E  EC69  F0B2         	call	___ftadd	;wreg free
  9236  014572  C08D  F1AA         	movff	?___ftadd,_Wind_Average$8043
  9237  014576  C08E  F1AB         	movff	?___ftadd+1,_Wind_Average$8043+1
  9238  01457A  C08F  F1AC         	movff	?___ftadd+2,_Wind_Average$8043+2
  9239                           
  9240                           ;RPM_Measurement.c: 260: {
  9241                           ;RPM_Measurement.c: 261: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9242  01457E  C263  F090         	movff	_Wind_Speed_7_2,___ftadd@f2
  9243  014582  C264  F091         	movff	_Wind_Speed_7_2+1,___ftadd@f2+1
  9244  014586  C265  F092         	movff	_Wind_Speed_7_2+2,___ftadd@f2+2
  9245  01458A  C1AA  F08D         	movff	_Wind_Average$8043,___ftadd@f1
  9246  01458E  C1AB  F08E         	movff	_Wind_Average$8043+1,___ftadd@f1+1
  9247  014592  C1AC  F08F         	movff	_Wind_Average$8043+2,___ftadd@f1+2
  9248  014596  EC69  F0B2         	call	___ftadd	;wreg free
  9249  01459A  C08D  F1AD         	movff	?___ftadd,_Wind_Average$8044
  9250  01459E  C08E  F1AE         	movff	?___ftadd+1,_Wind_Average$8044+1
  9251  0145A2  C08F  F1AF         	movff	?___ftadd+2,_Wind_Average$8044+2
  9252                           
  9253                           ;RPM_Measurement.c: 260: {
  9254                           ;RPM_Measurement.c: 261: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9255  0145A6  C25D  F090         	movff	_Wind_Speed_6_2,___ftadd@f2
  9256  0145AA  C25E  F091         	movff	_Wind_Speed_6_2+1,___ftadd@f2+1
  9257  0145AE  C25F  F092         	movff	_Wind_Speed_6_2+2,___ftadd@f2+2
  9258  0145B2  C1AD  F08D         	movff	_Wind_Average$8044,___ftadd@f1
  9259  0145B6  C1AE  F08E         	movff	_Wind_Average$8044+1,___ftadd@f1+1
  9260  0145BA  C1AF  F08F         	movff	_Wind_Average$8044+2,___ftadd@f1+2
  9261  0145BE  EC69  F0B2         	call	___ftadd	;wreg free
  9262  0145C2  C08D  F1B0         	movff	?___ftadd,_Wind_Average$8045
  9263  0145C6  C08E  F1B1         	movff	?___ftadd+1,_Wind_Average$8045+1
  9264  0145CA  C08F  F1B2         	movff	?___ftadd+2,_Wind_Average$8045+2
  9265                           
  9266                           ;RPM_Measurement.c: 260: {
  9267                           ;RPM_Measurement.c: 261: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9268  0145CE  C257  F090         	movff	_Wind_Speed_5_2,___ftadd@f2
  9269  0145D2  C258  F091         	movff	_Wind_Speed_5_2+1,___ftadd@f2+1
  9270  0145D6  C259  F092         	movff	_Wind_Speed_5_2+2,___ftadd@f2+2
  9271  0145DA  C1B0  F08D         	movff	_Wind_Average$8045,___ftadd@f1
  9272  0145DE  C1B1  F08E         	movff	_Wind_Average$8045+1,___ftadd@f1+1
  9273  0145E2  C1B2  F08F         	movff	_Wind_Average$8045+2,___ftadd@f1+2
  9274  0145E6  EC69  F0B2         	call	___ftadd	;wreg free
  9275  0145EA  C08D  F1B3         	movff	?___ftadd,_Wind_Average$8046
  9276  0145EE  C08E  F1B4         	movff	?___ftadd+1,_Wind_Average$8046+1
  9277  0145F2  C08F  F1B5         	movff	?___ftadd+2,_Wind_Average$8046+2
  9278                           
  9279                           ;RPM_Measurement.c: 260: {
  9280                           ;RPM_Measurement.c: 261: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9281  0145F6  C251  F090         	movff	_Wind_Speed_4_2,___ftadd@f2
  9282  0145FA  C252  F091         	movff	_Wind_Speed_4_2+1,___ftadd@f2+1
  9283  0145FE  C253  F092         	movff	_Wind_Speed_4_2+2,___ftadd@f2+2
  9284  014602  C1B3  F08D         	movff	_Wind_Average$8046,___ftadd@f1
  9285  014606  C1B4  F08E         	movff	_Wind_Average$8046+1,___ftadd@f1+1
  9286  01460A  C1B5  F08F         	movff	_Wind_Average$8046+2,___ftadd@f1+2
  9287  01460E  EC69  F0B2         	call	___ftadd	;wreg free
  9288  014612  C08D  F1B6         	movff	?___ftadd,_Wind_Average$8047
  9289  014616  C08E  F1B7         	movff	?___ftadd+1,_Wind_Average$8047+1
  9290  01461A  C08F  F1B8         	movff	?___ftadd+2,_Wind_Average$8047+2
  9291                           
  9292                           ;RPM_Measurement.c: 260: {
  9293                           ;RPM_Measurement.c: 261: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9294  01461E  C24B  F090         	movff	_Wind_Speed_3_2,___ftadd@f2
  9295  014622  C24C  F091         	movff	_Wind_Speed_3_2+1,___ftadd@f2+1
  9296  014626  C24D  F092         	movff	_Wind_Speed_3_2+2,___ftadd@f2+2
  9297  01462A  C1B6  F08D         	movff	_Wind_Average$8047,___ftadd@f1
  9298  01462E  C1B7  F08E         	movff	_Wind_Average$8047+1,___ftadd@f1+1
  9299  014632  C1B8  F08F         	movff	_Wind_Average$8047+2,___ftadd@f1+2
  9300  014636  EC69  F0B2         	call	___ftadd	;wreg free
  9301  01463A  C08D  F1B9         	movff	?___ftadd,_Wind_Average$8048
  9302  01463E  C08E  F1BA         	movff	?___ftadd+1,_Wind_Average$8048+1
  9303  014642  C08F  F1BB         	movff	?___ftadd+2,_Wind_Average$8048+2
  9304                           
  9305                           ;RPM_Measurement.c: 260: {
  9306                           ;RPM_Measurement.c: 261: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9307  014646  C245  F090         	movff	_Wind_Speed_2_2,___ftadd@f2
  9308  01464A  C246  F091         	movff	_Wind_Speed_2_2+1,___ftadd@f2+1
  9309  01464E  C247  F092         	movff	_Wind_Speed_2_2+2,___ftadd@f2+2
  9310  014652  C1B9  F08D         	movff	_Wind_Average$8048,___ftadd@f1
  9311  014656  C1BA  F08E         	movff	_Wind_Average$8048+1,___ftadd@f1+1
  9312  01465A  C1BB  F08F         	movff	_Wind_Average$8048+2,___ftadd@f1+2
  9313  01465E  EC69  F0B2         	call	___ftadd	;wreg free
  9314  014662  C08D  F1BC         	movff	?___ftadd,_Wind_Average$8049
  9315  014666  C08E  F1BD         	movff	?___ftadd+1,_Wind_Average$8049+1
  9316  01466A  C08F  F1BE         	movff	?___ftadd+2,_Wind_Average$8049+2
  9317                           
  9318                           ;RPM_Measurement.c: 260: {
  9319                           ;RPM_Measurement.c: 261: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9320  01466E  C23F  F090         	movff	_Wind_Speed_1_2,___ftadd@f2
  9321  014672  C240  F091         	movff	_Wind_Speed_1_2+1,___ftadd@f2+1
  9322  014676  C241  F092         	movff	_Wind_Speed_1_2+2,___ftadd@f2+2
  9323  01467A  C1BC  F08D         	movff	_Wind_Average$8049,___ftadd@f1
  9324  01467E  C1BD  F08E         	movff	_Wind_Average$8049+1,___ftadd@f1+1
  9325  014682  C1BE  F08F         	movff	_Wind_Average$8049+2,___ftadd@f1+2
  9326  014686  EC69  F0B2         	call	___ftadd	;wreg free
  9327  01468A  C08D  F1BF         	movff	?___ftadd,_Wind_Average$8050
  9328  01468E  C08E  F1C0         	movff	?___ftadd+1,_Wind_Average$8050+1
  9329  014692  C08F  F1C1         	movff	?___ftadd+2,_Wind_Average$8050+2
  9330                           
  9331                           ;RPM_Measurement.c: 260: {
  9332                           ;RPM_Measurement.c: 261: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  9333  014696  C239  F090         	movff	_Wind_Speed_0_2,___ftadd@f2
  9334  01469A  C23A  F091         	movff	_Wind_Speed_0_2+1,___ftadd@f2+1
  9335  01469E  C23B  F092         	movff	_Wind_Speed_0_2+2,___ftadd@f2+2
  9336  0146A2  C1BF  F08D         	movff	_Wind_Average$8050,___ftadd@f1
  9337  0146A6  C1C0  F08E         	movff	_Wind_Average$8050+1,___ftadd@f1+1
  9338  0146AA  C1C1  F08F         	movff	_Wind_Average$8050+2,___ftadd@f1+2
  9339  0146AE  EC69  F0B2         	call	___ftadd	;wreg free
  9340  0146B2  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
  9341  0146B6  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
  9342  0146BA  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
  9343  0146BE  0E00               	movlw	0
  9344  0146C0  0100               	movlb	0	; () banked
  9345  0146C2  6FA8               	movwf	___ftdiv@f2& (0+255),b
  9346  0146C4  0E20               	movlw	32
  9347  0146C6  0100               	movlb	0	; () banked
  9348  0146C8  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  9349  0146CA  0E41               	movlw	65
  9350  0146CC  0100               	movlb	0	; () banked
  9351  0146CE  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  9352  0146D0  EC53  F0C1         	call	___ftdiv	;wreg free
  9353  0146D4  C0A5  F4C6         	movff	?___ftdiv,_Wind_Speed_Avg_2
  9354  0146D8  C0A6  F4C7         	movff	?___ftdiv+1,_Wind_Speed_Avg_2+1
  9355  0146DC  C0A7  F4C8         	movff	?___ftdiv+2,_Wind_Speed_Avg_2+2
  9356  0146E0  0012               	return	
  9357  0146E2                     __end_of_Wind_Average:
  9358                           	opt stack 0
  9359                           tblptru	equ	0xFF8
  9360                           tblptrh	equ	0xFF7
  9361                           tblptrl	equ	0xFF6
  9362                           tablat	equ	0xFF5
  9363                           intcon	equ	0xFF2
  9364                           postinc0	equ	0xFEE
  9365                           wreg	equ	0xFE8
  9366                           postdec1	equ	0xFE5
  9367                           fsr1h	equ	0xFE2
  9368                           fsr1l	equ	0xFE1
  9369                           status	equ	0xFD8
  9370                           
  9371 ;; *************** function _VFD_RS485_Data_filter *****************
  9372 ;; Defined at:
  9373 ;;		line 67 in file "RS485_COMMUNICATION.c"
  9374 ;; Parameters:    Size  Location     Type
  9375 ;;		None
  9376 ;; Auto vars:     Size  Location     Type
  9377 ;;		None
  9378 ;; Return value:  Size  Location     Type
  9379 ;;                  1    wreg      void 
  9380 ;; Registers used:
  9381 ;;		wreg, status,2, status,0, cstack
  9382 ;; Tracked objects:
  9383 ;;		On entry : 0/0
  9384 ;;		On exit  : 0/0
  9385 ;;		Unchanged: 0/0
  9386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;Total ram usage:        0 bytes
  9392 ;; Hardware stack levels used:    1
  9393 ;; Hardware stack levels required when called:    6
  9394 ;; This function calls:
  9395 ;;		_VFD_RS485_Data
  9396 ;; This function is called by:
  9397 ;;		_Timer0_OneSecond_Function
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           	psect	text17
  9402  01A4AC                     __ptext17:
  9403                           	opt stack 0
  9404  01A4AC                     _VFD_RS485_Data_filter:
  9405                           	opt stack 23
  9406                           
  9407                           ;RS485_COMMUNICATION.c: 69: if(Data_1[1] == Data_1[7])
  9408                           
  9409                           ;incstack = 0
  9410  01A4AC  0105               	movlb	5	; () banked
  9411  01A4AE  510E               	movf	(_Data_1+14)& (0+255),w,b
  9412  01A4B0  0105               	movlb	5	; () banked
  9413  01A4B2  1902               	xorwf	(_Data_1+2)& (0+255),w,b
  9414  01A4B4  E109               	bnz	l21909
  9415  01A4B6  0105               	movlb	5	; () banked
  9416  01A4B8  510F               	movf	(_Data_1+15)& (0+255),w,b
  9417  01A4BA  0105               	movlb	5	; () banked
  9418  01A4BC  1903               	xorwf	(_Data_1+3)& (0+255),w,b
  9419  01A4BE  A4D8               	btfss	status,2,c
  9420  01A4C0  D003               	goto	l21909
  9421                           
  9422                           ; BSR set to: 5
  9423                           ;RS485_COMMUNICATION.c: 70: {
  9424                           ;RS485_COMMUNICATION.c: 71: VFD_RS485_Data();
  9425  01A4C2  EC4C  F0D3         	call	_VFD_RS485_Data	;wreg free
  9426                           
  9427                           ;RS485_COMMUNICATION.c: 73: }
  9428  01A4C6  0012               	return	
  9429  01A4C8                     l21909:
  9430                           
  9431                           ;RS485_COMMUNICATION.c: 74: else
  9432                           ;RS485_COMMUNICATION.c: 75: {
  9433                           ;RS485_COMMUNICATION.c: 76: Data_1[0] = 0; Data_1[1] = 0; Data_1[2] = 0; Data_1[3] = 0; 
      +                          Data_1[9] = 0;
  9434  01A4C8  0E00               	movlw	0
  9435  01A4CA  0105               	movlb	5	; () banked
  9436  01A4CC  6F01               	movwf	(_Data_1+1)& (0+255),b
  9437  01A4CE  0E00               	movlw	0
  9438  01A4D0  6F00               	movwf	_Data_1& (0+255),b
  9439  01A4D2  0E00               	movlw	0
  9440  01A4D4  0105               	movlb	5	; () banked
  9441  01A4D6  6F03               	movwf	(_Data_1+3)& (0+255),b
  9442  01A4D8  0E00               	movlw	0
  9443  01A4DA  6F02               	movwf	(_Data_1+2)& (0+255),b
  9444  01A4DC  0E00               	movlw	0
  9445  01A4DE  0105               	movlb	5	; () banked
  9446  01A4E0  6F05               	movwf	(_Data_1+5)& (0+255),b
  9447  01A4E2  0E00               	movlw	0
  9448  01A4E4  6F04               	movwf	(_Data_1+4)& (0+255),b
  9449  01A4E6  0E00               	movlw	0
  9450  01A4E8  0105               	movlb	5	; () banked
  9451  01A4EA  6F07               	movwf	(_Data_1+7)& (0+255),b
  9452  01A4EC  0E00               	movlw	0
  9453  01A4EE  6F06               	movwf	(_Data_1+6)& (0+255),b
  9454  01A4F0  0E00               	movlw	0
  9455  01A4F2  0105               	movlb	5	; () banked
  9456  01A4F4  6F13               	movwf	(_Data_1+19)& (0+255),b
  9457  01A4F6  0E00               	movlw	0
  9458  01A4F8  6F12               	movwf	(_Data_1+18)& (0+255),b
  9459                           
  9460                           ;RS485_COMMUNICATION.c: 77: Data_1[4] = 0; Data_1[5] = 0; Data_1[6] = 0; Data_1[7] = 0; 
      +                          Data_1[8] = 0;
  9461  01A4FA  0E00               	movlw	0
  9462  01A4FC  0105               	movlb	5	; () banked
  9463  01A4FE  6F09               	movwf	(_Data_1+9)& (0+255),b
  9464  01A500  0E00               	movlw	0
  9465  01A502  6F08               	movwf	(_Data_1+8)& (0+255),b
  9466  01A504  0E00               	movlw	0
  9467  01A506  0105               	movlb	5	; () banked
  9468  01A508  6F0B               	movwf	(_Data_1+11)& (0+255),b
  9469  01A50A  0E00               	movlw	0
  9470  01A50C  6F0A               	movwf	(_Data_1+10)& (0+255),b
  9471  01A50E  0E00               	movlw	0
  9472  01A510  0105               	movlb	5	; () banked
  9473  01A512  6F0D               	movwf	(_Data_1+13)& (0+255),b
  9474  01A514  0E00               	movlw	0
  9475  01A516  6F0C               	movwf	(_Data_1+12)& (0+255),b
  9476  01A518  0E00               	movlw	0
  9477  01A51A  0105               	movlb	5	; () banked
  9478  01A51C  6F0F               	movwf	(_Data_1+15)& (0+255),b
  9479  01A51E  0E00               	movlw	0
  9480  01A520  6F0E               	movwf	(_Data_1+14)& (0+255),b
  9481  01A522  0E00               	movlw	0
  9482  01A524  0105               	movlb	5	; () banked
  9483  01A526  6F11               	movwf	(_Data_1+17)& (0+255),b
  9484  01A528  0E00               	movlw	0
  9485  01A52A  6F10               	movwf	(_Data_1+16)& (0+255),b
  9486  01A52C  0012               	return	
  9487  01A52E                     __end_of_VFD_RS485_Data_filter:
  9488                           	opt stack 0
  9489                           tblptru	equ	0xFF8
  9490                           tblptrh	equ	0xFF7
  9491                           tblptrl	equ	0xFF6
  9492                           tablat	equ	0xFF5
  9493                           intcon	equ	0xFF2
  9494                           postinc0	equ	0xFEE
  9495                           wreg	equ	0xFE8
  9496                           postdec1	equ	0xFE5
  9497                           fsr1h	equ	0xFE2
  9498                           fsr1l	equ	0xFE1
  9499                           status	equ	0xFD8
  9500                           
  9501 ;; *************** function _VFD_RS485_Data *****************
  9502 ;; Defined at:
  9503 ;;		line 56 in file "RS485_COMMUNICATION.c"
  9504 ;; Parameters:    Size  Location     Type
  9505 ;;		None
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;		None
  9508 ;; Return value:  Size  Location     Type
  9509 ;;                  1    wreg      void 
  9510 ;; Registers used:
  9511 ;;		wreg, status,2, status,0, cstack
  9512 ;; Tracked objects:
  9513 ;;		On entry : 0/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9520 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;Total ram usage:        2 bytes
  9522 ;; Hardware stack levels used:    1
  9523 ;; Hardware stack levels required when called:    5
  9524 ;; This function calls:
  9525 ;;		___ftdiv
  9526 ;;		___lwtoft
  9527 ;; This function is called by:
  9528 ;;		_Timer0_OneSecond_Function
  9529 ;;		_VFD_RS485_Data_filter
  9530 ;; This function uses a non-reentrant model
  9531 ;;
  9532                           
  9533                           	psect	text18
  9534  01A698                     __ptext18:
  9535                           	opt stack 0
  9536  01A698                     _VFD_RS485_Data:
  9537                           	opt stack 23
  9538                           
  9539                           ;RS485_COMMUNICATION.c: 60: VFD_Frequency = Data_1[2];
  9540                           
  9541                           ;incstack = 0
  9542  01A698  C504  F194         	movff	_Data_1+4,_VFD_Frequency
  9543                           
  9544                           ;RS485_COMMUNICATION.c: 61: VFD_Bus_Voltage = Data_1[3] + (Data_1[4] * 256);
  9545  01A69C  0105               	movlb	5	; () banked
  9546  01A69E  5108               	movf	(_Data_1+8)& (0+255),w,b
  9547  01A6A0  0100               	movlb	0	; () banked
  9548  01A6A2  6FB5               	movwf	(??_VFD_RS485_Data+1)& (0+255),b
  9549  01A6A4  6BB4               	clrf	??_VFD_RS485_Data& (0+255),b
  9550  01A6A6  0105               	movlb	5	; () banked
  9551  01A6A8  5106               	movf	(_Data_1+6)& (0+255),w,b
  9552  01A6AA  0100               	movlb	0	; () banked
  9553  01A6AC  25B4               	addwf	??_VFD_RS485_Data& (0+255),w,b
  9554  01A6AE  0101               	movlb	1	; () banked
  9555  01A6B0  6F3C               	movwf	_VFD_Bus_Voltage& (0+255),b
  9556  01A6B2  0105               	movlb	5	; () banked
  9557  01A6B4  5107               	movf	(_Data_1+7)& (0+255),w,b
  9558  01A6B6  0100               	movlb	0	; () banked
  9559  01A6B8  21B5               	addwfc	(??_VFD_RS485_Data+1)& (0+255),w,b
  9560  01A6BA  0101               	movlb	1	; () banked
  9561  01A6BC  6F3D               	movwf	(_VFD_Bus_Voltage+1)& (0+255),b
  9562                           
  9563                           ; BSR set to: 1
  9564                           ;RS485_COMMUNICATION.c: 62: DC_Bus_Current = Data_1[5];
  9565  01A6BE  C50A  F068         	movff	_Data_1+10,___lwtoft@c
  9566  01A6C2  C50B  F069         	movff	_Data_1+11,___lwtoft@c+1
  9567  01A6C6  EC6E  F0D7         	call	___lwtoft	;wreg free
  9568  01A6CA  C068  F20F         	movff	?___lwtoft,_DC_Bus_Current
  9569  01A6CE  C069  F210         	movff	?___lwtoft+1,_DC_Bus_Current+1
  9570  01A6D2  C06A  F211         	movff	?___lwtoft+2,_DC_Bus_Current+2
  9571                           
  9572                           ;RS485_COMMUNICATION.c: 63: DC_Bus_Current = DC_Bus_Current / 10;
  9573  01A6D6  C20F  F0A5         	movff	_DC_Bus_Current,___ftdiv@f1
  9574  01A6DA  C210  F0A6         	movff	_DC_Bus_Current+1,___ftdiv@f1+1
  9575  01A6DE  C211  F0A7         	movff	_DC_Bus_Current+2,___ftdiv@f1+2
  9576  01A6E2  0E00               	movlw	0
  9577  01A6E4  0100               	movlb	0	; () banked
  9578  01A6E6  6FA8               	movwf	___ftdiv@f2& (0+255),b
  9579  01A6E8  0E20               	movlw	32
  9580  01A6EA  0100               	movlb	0	; () banked
  9581  01A6EC  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
  9582  01A6EE  0E41               	movlw	65
  9583  01A6F0  0100               	movlb	0	; () banked
  9584  01A6F2  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
  9585  01A6F4  EC53  F0C1         	call	___ftdiv	;wreg free
  9586  01A6F8  C0A5  F20F         	movff	?___ftdiv,_DC_Bus_Current
  9587  01A6FC  C0A6  F210         	movff	?___ftdiv+1,_DC_Bus_Current+1
  9588  01A700  C0A7  F211         	movff	?___ftdiv+2,_DC_Bus_Current+2
  9589                           
  9590                           ;RS485_COMMUNICATION.c: 65: VFD_Error_No = Data_1[6];
  9591  01A704  C50C  F020         	movff	_Data_1+12,_VFD_Error_No
  9592  01A708  0012               	return		;funcret
  9593  01A70A                     __end_of_VFD_RS485_Data:
  9594                           	opt stack 0
  9595                           tblptru	equ	0xFF8
  9596                           tblptrh	equ	0xFF7
  9597                           tblptrl	equ	0xFF6
  9598                           tablat	equ	0xFF5
  9599                           intcon	equ	0xFF2
  9600                           postinc0	equ	0xFEE
  9601                           wreg	equ	0xFE8
  9602                           postdec1	equ	0xFE5
  9603                           fsr1h	equ	0xFE2
  9604                           fsr1l	equ	0xFE1
  9605                           status	equ	0xFD8
  9606                           
  9607 ;; *************** function _UART_Data *****************
  9608 ;; Defined at:
  9609 ;;		line 22 in file "UART.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;		None
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;		None
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  1    wreg      void 
  9616 ;; Registers used:
  9617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;Total ram usage:        0 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    8
  9630 ;; This function calls:
  9631 ;;		_BCDtoI
  9632 ;;		_RTC_GetDateTime
  9633 ;;		_UART_Data_String
  9634 ;;		_printf
  9635 ;;		_usart_str
  9636 ;;		_usart_str_1
  9637 ;; This function is called by:
  9638 ;;		_Timer0_OneSecond_Function
  9639 ;; This function uses a non-reentrant model
  9640 ;;
  9641                           
  9642                           	psect	text19
  9643  010CE4                     __ptext19:
  9644                           	opt stack 0
  9645  010CE4                     _UART_Data:
  9646                           	opt stack 21
  9647                           
  9648                           ;UART.c: 24: if(Serial_No == 3)
  9649                           
  9650                           ;incstack = 0
  9651  010CE4  0E03               	movlw	3
  9652  010CE6  0100               	movlb	0	; () banked
  9653  010CE8  19DF               	xorwf	_Serial_No& (0+255),w,b
  9654  010CEA  0100               	movlb	0	; () banked
  9655  010CEC  11E0               	iorwf	(_Serial_No+1)& (0+255),w,b
  9656  010CEE  B4D8               	btfsc	status,2,c
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;UART.c: 25: {
  9660                           ;UART.c: 26: UART_Data_String();
  9661  010CF0  ECA0  F098         	call	_UART_Data_String	;wreg free
  9662                           
  9663                           ;UART.c: 27: }
  9664                           ;UART.c: 29: printf("%u",Serial_No);
  9665  010CF4  0EF7               	movlw	low STR_1
  9666  010CF6  0100               	movlb	0	; () banked
  9667  010CF8  6FB1               	movwf	printf@f& (0+255),b
  9668  010CFA  0EFF               	movlw	high STR_1
  9669  010CFC  0100               	movlb	0	; () banked
  9670  010CFE  6FB2               	movwf	(printf@f+1)& (0+255),b
  9671  010D00  C0DF  F0B3         	movff	_Serial_No,?_printf+2
  9672  010D04  C0E0  F0B4         	movff	_Serial_No+1,?_printf+3
  9673  010D08  EC00  F080         	call	_printf	;wreg free
  9674                           
  9675                           ;UART.c: 30: usart_str_1(',');
  9676  010D0C  0E2C               	movlw	44
  9677  010D0E  EC0F  F0D8         	call	_usart_str_1
  9678                           
  9679                           ;UART.c: 32: printf("%s","RT01 Rv3 KAVANOOR");
  9680  010D12  0EF4               	movlw	low STR_2
  9681  010D14  0100               	movlb	0	; () banked
  9682  010D16  6FB1               	movwf	printf@f& (0+255),b
  9683  010D18  0EFF               	movlw	high STR_2
  9684  010D1A  0100               	movlb	0	; () banked
  9685  010D1C  6FB2               	movwf	(printf@f+1)& (0+255),b
  9686  010D1E  0EEB               	movlw	low STR_3
  9687  010D20  0100               	movlb	0	; () banked
  9688  010D22  6FB3               	movwf	(?_printf+2)& (0+255),b
  9689  010D24  0EFC               	movlw	high STR_3
  9690  010D26  0100               	movlb	0	; () banked
  9691  010D28  6FB4               	movwf	(?_printf+3)& (0+255),b
  9692  010D2A  EC00  F080         	call	_printf	;wreg free
  9693                           
  9694                           ;UART.c: 33: usart_str_1(',');
  9695  010D2E  0E2C               	movlw	44
  9696  010D30  EC0F  F0D8         	call	_usart_str_1
  9697                           
  9698                           ;UART.c: 35: printf("%4.02f",Wind_Speed);
  9699  010D34  0EC5               	movlw	low STR_4
  9700  010D36  0100               	movlb	0	; () banked
  9701  010D38  6FB1               	movwf	printf@f& (0+255),b
  9702  010D3A  0EFF               	movlw	high STR_4
  9703  010D3C  0100               	movlb	0	; () banked
  9704  010D3E  6FB2               	movwf	(printf@f+1)& (0+255),b
  9705  010D40  C233  F0B3         	movff	_Wind_Speed,?_printf+2
  9706  010D44  C234  F0B4         	movff	_Wind_Speed+1,?_printf+3
  9707  010D48  C235  F0B5         	movff	_Wind_Speed+2,?_printf+4
  9708  010D4C  EC00  F080         	call	_printf	;wreg free
  9709                           
  9710                           ;UART.c: 36: usart_str_1(',');
  9711  010D50  0E2C               	movlw	44
  9712  010D52  EC0F  F0D8         	call	_usart_str_1
  9713                           
  9714                           ;UART.c: 38: printf("%4.02f",Wind_Speed_Avg);
  9715  010D56  0EC5               	movlw	low STR_4
  9716  010D58  0100               	movlb	0	; () banked
  9717  010D5A  6FB1               	movwf	printf@f& (0+255),b
  9718  010D5C  0EFF               	movlw	high STR_4
  9719  010D5E  0100               	movlb	0	; () banked
  9720  010D60  6FB2               	movwf	(printf@f+1)& (0+255),b
  9721  010D62  C00D  F0B3         	movff	_Wind_Speed_Avg,?_printf+2
  9722  010D66  C00E  F0B4         	movff	_Wind_Speed_Avg+1,?_printf+3
  9723  010D6A  C00F  F0B5         	movff	_Wind_Speed_Avg+2,?_printf+4
  9724  010D6E  EC00  F080         	call	_printf	;wreg free
  9725                           
  9726                           ;UART.c: 39: usart_str_1(',');
  9727  010D72  0E2C               	movlw	44
  9728  010D74  EC0F  F0D8         	call	_usart_str_1
  9729                           
  9730                           ;UART.c: 41: printf("%4.02f",Wind_Speed_2);
  9731  010D78  0EC5               	movlw	low STR_4
  9732  010D7A  0100               	movlb	0	; () banked
  9733  010D7C  6FB1               	movwf	printf@f& (0+255),b
  9734  010D7E  0EFF               	movlw	high STR_4
  9735  010D80  0100               	movlb	0	; () banked
  9736  010D82  6FB2               	movwf	(printf@f+1)& (0+255),b
  9737  010D84  C242  F0B3         	movff	_Wind_Speed_2,?_printf+2
  9738  010D88  C243  F0B4         	movff	_Wind_Speed_2+1,?_printf+3
  9739  010D8C  C244  F0B5         	movff	_Wind_Speed_2+2,?_printf+4
  9740  010D90  EC00  F080         	call	_printf	;wreg free
  9741                           
  9742                           ;UART.c: 42: usart_str_1(',');
  9743  010D94  0E2C               	movlw	44
  9744  010D96  EC0F  F0D8         	call	_usart_str_1
  9745                           
  9746                           ;UART.c: 44: printf("%4.02f",Wind_Speed_Avg_2);
  9747  010D9A  0EC5               	movlw	low STR_4
  9748  010D9C  0100               	movlb	0	; () banked
  9749  010D9E  6FB1               	movwf	printf@f& (0+255),b
  9750  010DA0  0EFF               	movlw	high STR_4
  9751  010DA2  0100               	movlb	0	; () banked
  9752  010DA4  6FB2               	movwf	(printf@f+1)& (0+255),b
  9753  010DA6  C4C6  F0B3         	movff	_Wind_Speed_Avg_2,?_printf+2
  9754  010DAA  C4C7  F0B4         	movff	_Wind_Speed_Avg_2+1,?_printf+3
  9755  010DAE  C4C8  F0B5         	movff	_Wind_Speed_Avg_2+2,?_printf+4
  9756  010DB2  EC00  F080         	call	_printf	;wreg free
  9757                           
  9758                           ;UART.c: 45: usart_str_1(',');
  9759  010DB6  0E2C               	movlw	44
  9760  010DB8  EC0F  F0D8         	call	_usart_str_1
  9761                           
  9762                           ;UART.c: 47: printf("%4.02f",Turbine_RPM);
  9763  010DBC  0EC5               	movlw	low STR_4
  9764  010DBE  0100               	movlb	0	; () banked
  9765  010DC0  6FB1               	movwf	printf@f& (0+255),b
  9766  010DC2  0EFF               	movlw	high STR_4
  9767  010DC4  0100               	movlb	0	; () banked
  9768  010DC6  6FB2               	movwf	(printf@f+1)& (0+255),b
  9769  010DC8  C00A  F0B3         	movff	_Turbine_RPM,?_printf+2
  9770  010DCC  C00B  F0B4         	movff	_Turbine_RPM+1,?_printf+3
  9771  010DD0  C00C  F0B5         	movff	_Turbine_RPM+2,?_printf+4
  9772  010DD4  EC00  F080         	call	_printf	;wreg free
  9773                           
  9774                           ;UART.c: 48: usart_str_1(',');
  9775  010DD8  0E2C               	movlw	44
  9776  010DDA  EC0F  F0D8         	call	_usart_str_1
  9777                           
  9778                           ;UART.c: 50: printf("%d",Generator_RPM_INT);
  9779  010DDE  0EF1               	movlw	low STR_9
  9780  010DE0  0100               	movlb	0	; () banked
  9781  010DE2  6FB1               	movwf	printf@f& (0+255),b
  9782  010DE4  0EFF               	movlw	high STR_9
  9783  010DE6  0100               	movlb	0	; () banked
  9784  010DE8  6FB2               	movwf	(printf@f+1)& (0+255),b
  9785  010DEA  C288  F0B3         	movff	_Generator_RPM_INT,?_printf+2
  9786  010DEE  C289  F0B4         	movff	_Generator_RPM_INT+1,?_printf+3
  9787  010DF2  EC00  F080         	call	_printf	;wreg free
  9788                           
  9789                           ;UART.c: 51: usart_str_1(',');
  9790  010DF6  0E2C               	movlw	44
  9791  010DF8  EC0F  F0D8         	call	_usart_str_1
  9792                           
  9793                           ;UART.c: 53: printf("%4.02f",Motor_slip);
  9794  010DFC  0EC5               	movlw	low STR_4
  9795  010DFE  0100               	movlb	0	; () banked
  9796  010E00  6FB1               	movwf	printf@f& (0+255),b
  9797  010E02  0EFF               	movlw	high STR_4
  9798  010E04  0100               	movlb	0	; () banked
  9799  010E06  6FB2               	movwf	(printf@f+1)& (0+255),b
  9800  010E08  C0CA  F0B3         	movff	_Motor_slip,?_printf+2
  9801  010E0C  C0CB  F0B4         	movff	_Motor_slip+1,?_printf+3
  9802  010E10  C0CC  F0B5         	movff	_Motor_slip+2,?_printf+4
  9803  010E14  EC00  F080         	call	_printf	;wreg free
  9804                           
  9805                           ;UART.c: 54: usart_str_1(',');
  9806  010E18  0E2C               	movlw	44
  9807  010E1A  EC0F  F0D8         	call	_usart_str_1
  9808                           
  9809                           ;UART.c: 56: printf("%4.02f",Rotor_slip);
  9810  010E1E  0EC5               	movlw	low STR_4
  9811  010E20  0100               	movlb	0	; () banked
  9812  010E22  6FB1               	movwf	printf@f& (0+255),b
  9813  010E24  0EFF               	movlw	high STR_4
  9814  010E26  0100               	movlb	0	; () banked
  9815  010E28  6FB2               	movwf	(printf@f+1)& (0+255),b
  9816  010E2A  C0D3  F0B3         	movff	_Rotor_slip,?_printf+2
  9817  010E2E  C0D4  F0B4         	movff	_Rotor_slip+1,?_printf+3
  9818  010E32  C0D5  F0B5         	movff	_Rotor_slip+2,?_printf+4
  9819  010E36  EC00  F080         	call	_printf	;wreg free
  9820                           
  9821                           ;UART.c: 57: usart_str_1(',');
  9822  010E3A  0E2C               	movlw	44
  9823  010E3C  EC0F  F0D8         	call	_usart_str_1
  9824                           
  9825                           ;UART.c: 59: printf("%d",Desired_Frequency);
  9826  010E40  0EF1               	movlw	low STR_9
  9827  010E42  0100               	movlb	0	; () banked
  9828  010E44  6FB1               	movwf	printf@f& (0+255),b
  9829  010E46  0EFF               	movlw	high STR_9
  9830  010E48  0100               	movlb	0	; () banked
  9831  010E4A  6FB2               	movwf	(printf@f+1)& (0+255),b
  9832  010E4C  C016  F0B3         	movff	_Desired_Frequency,?_printf+2
  9833  010E50  0100               	movlb	0	; () banked
  9834  010E52  6BB4               	clrf	(?_printf+3)& (0+255),b
  9835  010E54  EC00  F080         	call	_printf	;wreg free
  9836                           
  9837                           ;UART.c: 60: usart_str_1(',');
  9838  010E58  0E2C               	movlw	44
  9839  010E5A  EC0F  F0D8         	call	_usart_str_1
  9840                           
  9841                           ;UART.c: 62: printf("%d",VFD_Bus_Voltage);
  9842  010E5E  0EF1               	movlw	low STR_9
  9843  010E60  0100               	movlb	0	; () banked
  9844  010E62  6FB1               	movwf	printf@f& (0+255),b
  9845  010E64  0EFF               	movlw	high STR_9
  9846  010E66  0100               	movlb	0	; () banked
  9847  010E68  6FB2               	movwf	(printf@f+1)& (0+255),b
  9848  010E6A  C13C  F0B3         	movff	_VFD_Bus_Voltage,?_printf+2
  9849  010E6E  C13D  F0B4         	movff	_VFD_Bus_Voltage+1,?_printf+3
  9850  010E72  EC00  F080         	call	_printf	;wreg free
  9851                           
  9852                           ;UART.c: 63: usart_str_1(',');
  9853  010E76  0E2C               	movlw	44
  9854  010E78  EC0F  F0D8         	call	_usart_str_1
  9855                           
  9856                           ;UART.c: 65: printf("%4.01f",DC_Bus_Current);
  9857  010E7C  0EBE               	movlw	low STR_14
  9858  010E7E  0100               	movlb	0	; () banked
  9859  010E80  6FB1               	movwf	printf@f& (0+255),b
  9860  010E82  0EFF               	movlw	high STR_14
  9861  010E84  0100               	movlb	0	; () banked
  9862  010E86  6FB2               	movwf	(printf@f+1)& (0+255),b
  9863  010E88  C20F  F0B3         	movff	_DC_Bus_Current,?_printf+2
  9864  010E8C  C210  F0B4         	movff	_DC_Bus_Current+1,?_printf+3
  9865  010E90  C211  F0B5         	movff	_DC_Bus_Current+2,?_printf+4
  9866  010E94  EC00  F080         	call	_printf	;wreg free
  9867                           
  9868                           ;UART.c: 66: usart_str_1(',');
  9869  010E98  0E2C               	movlw	44
  9870  010E9A  EC0F  F0D8         	call	_usart_str_1
  9871                           
  9872                           ;UART.c: 68: printf("%4.0f",R_Volt);
  9873  010E9E  0ED3               	movlw	low STR_15
  9874  010EA0  0100               	movlb	0	; () banked
  9875  010EA2  6FB1               	movwf	printf@f& (0+255),b
  9876  010EA4  0EFF               	movlw	high STR_15
  9877  010EA6  0100               	movlb	0	; () banked
  9878  010EA8  6FB2               	movwf	(printf@f+1)& (0+255),b
  9879  010EAA  C007  F0B3         	movff	_R_Volt,?_printf+2
  9880  010EAE  C008  F0B4         	movff	_R_Volt+1,?_printf+3
  9881  010EB2  C009  F0B5         	movff	_R_Volt+2,?_printf+4
  9882  010EB6  EC00  F080         	call	_printf	;wreg free
  9883                           
  9884                           ;UART.c: 69: usart_str_1(',');
  9885  010EBA  0E2C               	movlw	44
  9886  010EBC  EC0F  F0D8         	call	_usart_str_1
  9887                           
  9888                           ;UART.c: 71: printf("%4.0f",Y_Volt);
  9889  010EC0  0ED3               	movlw	low STR_15
  9890  010EC2  0100               	movlb	0	; () banked
  9891  010EC4  6FB1               	movwf	printf@f& (0+255),b
  9892  010EC6  0EFF               	movlw	high STR_15
  9893  010EC8  0100               	movlb	0	; () banked
  9894  010ECA  6FB2               	movwf	(printf@f+1)& (0+255),b
  9895  010ECC  C010  F0B3         	movff	_Y_Volt,?_printf+2
  9896  010ED0  C011  F0B4         	movff	_Y_Volt+1,?_printf+3
  9897  010ED4  C012  F0B5         	movff	_Y_Volt+2,?_printf+4
  9898  010ED8  EC00  F080         	call	_printf	;wreg free
  9899                           
  9900                           ;UART.c: 72: usart_str_1(',');
  9901  010EDC  0E2C               	movlw	44
  9902  010EDE  EC0F  F0D8         	call	_usart_str_1
  9903                           
  9904                           ;UART.c: 74: printf("%4.0f",B_Volt);
  9905  010EE2  0ED3               	movlw	low STR_15
  9906  010EE4  0100               	movlb	0	; () banked
  9907  010EE6  6FB1               	movwf	printf@f& (0+255),b
  9908  010EE8  0EFF               	movlw	high STR_15
  9909  010EEA  0100               	movlb	0	; () banked
  9910  010EEC  6FB2               	movwf	(printf@f+1)& (0+255),b
  9911  010EEE  C001  F0B3         	movff	_B_Volt,?_printf+2
  9912  010EF2  C002  F0B4         	movff	_B_Volt+1,?_printf+3
  9913  010EF6  C003  F0B5         	movff	_B_Volt+2,?_printf+4
  9914  010EFA  EC00  F080         	call	_printf	;wreg free
  9915                           
  9916                           ;UART.c: 75: usart_str_1(',');
  9917  010EFE  0E2C               	movlw	44
  9918  010F00  EC0F  F0D8         	call	_usart_str_1
  9919                           
  9920                           ;UART.c: 77: printf("%4.01f",R_Curr);
  9921  010F04  0EBE               	movlw	low STR_14
  9922  010F06  0100               	movlb	0	; () banked
  9923  010F08  6FB1               	movwf	printf@f& (0+255),b
  9924  010F0A  0EFF               	movlw	high STR_14
  9925  010F0C  0100               	movlb	0	; () banked
  9926  010F0E  6FB2               	movwf	(printf@f+1)& (0+255),b
  9927  010F10  C0CD  F0B3         	movff	_R_Curr,?_printf+2
  9928  010F14  C0CE  F0B4         	movff	_R_Curr+1,?_printf+3
  9929  010F18  C0CF  F0B5         	movff	_R_Curr+2,?_printf+4
  9930  010F1C  EC00  F080         	call	_printf	;wreg free
  9931                           
  9932                           ;UART.c: 78: usart_str_1(',');
  9933  010F20  0E2C               	movlw	44
  9934  010F22  EC0F  F0D8         	call	_usart_str_1
  9935                           
  9936                           ;UART.c: 80: printf("%4.01f",Y_Curr);
  9937  010F26  0EBE               	movlw	low STR_14
  9938  010F28  0100               	movlb	0	; () banked
  9939  010F2A  6FB1               	movwf	printf@f& (0+255),b
  9940  010F2C  0EFF               	movlw	high STR_14
  9941  010F2E  0100               	movlb	0	; () banked
  9942  010F30  6FB2               	movwf	(printf@f+1)& (0+255),b
  9943  010F32  C0D6  F0B3         	movff	_Y_Curr,?_printf+2
  9944  010F36  C0D7  F0B4         	movff	_Y_Curr+1,?_printf+3
  9945  010F3A  C0D8  F0B5         	movff	_Y_Curr+2,?_printf+4
  9946  010F3E  EC00  F080         	call	_printf	;wreg free
  9947                           
  9948                           ;UART.c: 81: usart_str_1(',');
  9949  010F42  0E2C               	movlw	44
  9950  010F44  EC0F  F0D8         	call	_usart_str_1
  9951                           
  9952                           ;UART.c: 83: printf("%4.01f",B_Curr);
  9953  010F48  0EBE               	movlw	low STR_14
  9954  010F4A  0100               	movlb	0	; () banked
  9955  010F4C  6FB1               	movwf	printf@f& (0+255),b
  9956  010F4E  0EFF               	movlw	high STR_14
  9957  010F50  0100               	movlb	0	; () banked
  9958  010F52  6FB2               	movwf	(printf@f+1)& (0+255),b
  9959  010F54  C0C4  F0B3         	movff	_B_Curr,?_printf+2
  9960  010F58  C0C5  F0B4         	movff	_B_Curr+1,?_printf+3
  9961  010F5C  C0C6  F0B5         	movff	_B_Curr+2,?_printf+4
  9962  010F60  EC00  F080         	call	_printf	;wreg free
  9963                           
  9964                           ;UART.c: 84: usart_str_1(',');
  9965  010F64  0E2C               	movlw	44
  9966  010F66  EC0F  F0D8         	call	_usart_str_1
  9967                           
  9968                           ;UART.c: 86: printf("%4.02f",KW);
  9969  010F6A  0EC5               	movlw	low STR_4
  9970  010F6C  0100               	movlb	0	; () banked
  9971  010F6E  6FB1               	movwf	printf@f& (0+255),b
  9972  010F70  0EFF               	movlw	high STR_4
  9973  010F72  0100               	movlb	0	; () banked
  9974  010F74  6FB2               	movwf	(printf@f+1)& (0+255),b
  9975  010F76  C022  F0B3         	movff	_KW,?_printf+2
  9976  010F7A  C023  F0B4         	movff	_KW+1,?_printf+3
  9977  010F7E  C024  F0B5         	movff	_KW+2,?_printf+4
  9978  010F82  EC00  F080         	call	_printf	;wreg free
  9979                           
  9980                           ;UART.c: 87: usart_str_1(',');
  9981  010F86  0E2C               	movlw	44
  9982  010F88  EC0F  F0D8         	call	_usart_str_1
  9983                           
  9984                           ;UART.c: 89: printf("%4.02f",Y_KW);
  9985  010F8C  0EC5               	movlw	low STR_4
  9986  010F8E  0100               	movlb	0	; () banked
  9987  010F90  6FB1               	movwf	printf@f& (0+255),b
  9988  010F92  0EFF               	movlw	high STR_4
  9989  010F94  0100               	movlb	0	; () banked
  9990  010F96  6FB2               	movwf	(printf@f+1)& (0+255),b
  9991  010F98  C2F1  F0B3         	movff	_Y_KW,?_printf+2
  9992  010F9C  C2F2  F0B4         	movff	_Y_KW+1,?_printf+3
  9993  010FA0  C2F3  F0B5         	movff	_Y_KW+2,?_printf+4
  9994  010FA4  EC00  F080         	call	_printf	;wreg free
  9995                           
  9996                           ;UART.c: 90: usart_str_1(',');
  9997  010FA8  0E2C               	movlw	44
  9998  010FAA  EC0F  F0D8         	call	_usart_str_1
  9999                           
 10000                           ;UART.c: 92: printf("%4.02f",KVA);
 10001  010FAE  0EC5               	movlw	low STR_4
 10002  010FB0  0100               	movlb	0	; () banked
 10003  010FB2  6FB1               	movwf	printf@f& (0+255),b
 10004  010FB4  0EFF               	movlw	high STR_4
 10005  010FB6  0100               	movlb	0	; () banked
 10006  010FB8  6FB2               	movwf	(printf@f+1)& (0+255),b
 10007  010FBA  C218  F0B3         	movff	_KVA,?_printf+2
 10008  010FBE  C219  F0B4         	movff	_KVA+1,?_printf+3
 10009  010FC2  C21A  F0B5         	movff	_KVA+2,?_printf+4
 10010  010FC6  EC00  F080         	call	_printf	;wreg free
 10011                           
 10012                           ;UART.c: 93: usart_str_1(',');
 10013  010FCA  0E2C               	movlw	44
 10014  010FCC  EC0F  F0D8         	call	_usart_str_1
 10015                           
 10016                           ;UART.c: 95: printf("%4.02f",KVAr);
 10017  010FD0  0EC5               	movlw	low STR_4
 10018  010FD2  0100               	movlb	0	; () banked
 10019  010FD4  6FB1               	movwf	printf@f& (0+255),b
 10020  010FD6  0EFF               	movlw	high STR_4
 10021  010FD8  0100               	movlb	0	; () banked
 10022  010FDA  6FB2               	movwf	(printf@f+1)& (0+255),b
 10023  010FDC  C4A5  F0B3         	movff	_KVAr,?_printf+2
 10024  010FE0  C4A6  F0B4         	movff	_KVAr+1,?_printf+3
 10025  010FE4  C4A7  F0B5         	movff	_KVAr+2,?_printf+4
 10026  010FE8  EC00  F080         	call	_printf	;wreg free
 10027                           
 10028                           ;UART.c: 96: usart_str_1(',');
 10029  010FEC  0E2C               	movlw	44
 10030  010FEE  EC0F  F0D8         	call	_usart_str_1
 10031                           
 10032                           ;UART.c: 98: printf("%4.02f",Total_Power_Factor);
 10033  010FF2  0EC5               	movlw	low STR_4
 10034  010FF4  0100               	movlb	0	; () banked
 10035  010FF6  6FB1               	movwf	printf@f& (0+255),b
 10036  010FF8  0EFF               	movlw	high STR_4
 10037  010FFA  0100               	movlb	0	; () banked
 10038  010FFC  6FB2               	movwf	(printf@f+1)& (0+255),b
 10039  010FFE  C22A  F0B3         	movff	_Total_Power_Factor,?_printf+2
 10040  011002  C22B  F0B4         	movff	_Total_Power_Factor+1,?_printf+3
 10041  011006  C22C  F0B5         	movff	_Total_Power_Factor+2,?_printf+4
 10042  01100A  EC00  F080         	call	_printf	;wreg free
 10043                           
 10044                           ;UART.c: 99: usart_str_1(',');
 10045  01100E  0E2C               	movlw	44
 10046  011010  EC0F  F0D8         	call	_usart_str_1
 10047                           
 10048                           ;UART.c: 101: printf("%4.02f",Y_Power_Factor);
 10049  011014  0EC5               	movlw	low STR_4
 10050  011016  0100               	movlb	0	; () banked
 10051  011018  6FB1               	movwf	printf@f& (0+255),b
 10052  01101A  0EFF               	movlw	high STR_4
 10053  01101C  0100               	movlb	0	; () banked
 10054  01101E  6FB2               	movwf	(printf@f+1)& (0+255),b
 10055  011020  C272  F0B3         	movff	_Y_Power_Factor,?_printf+2
 10056  011024  C273  F0B4         	movff	_Y_Power_Factor+1,?_printf+3
 10057  011028  C274  F0B5         	movff	_Y_Power_Factor+2,?_printf+4
 10058  01102C  EC00  F080         	call	_printf	;wreg free
 10059                           
 10060                           ;UART.c: 102: usart_str_1(',');
 10061  011030  0E2C               	movlw	44
 10062  011032  EC0F  F0D8         	call	_usart_str_1
 10063                           
 10064                           ;UART.c: 104: printf("%4.02f",Frequency);
 10065  011036  0EC5               	movlw	low STR_4
 10066  011038  0100               	movlb	0	; () banked
 10067  01103A  6FB1               	movwf	printf@f& (0+255),b
 10068  01103C  0EFF               	movlw	high STR_4
 10069  01103E  0100               	movlb	0	; () banked
 10070  011040  6FB2               	movwf	(printf@f+1)& (0+255),b
 10071  011042  C0C7  F0B3         	movff	_Frequency,?_printf+2
 10072  011046  C0C8  F0B4         	movff	_Frequency+1,?_printf+3
 10073  01104A  C0C9  F0B5         	movff	_Frequency+2,?_printf+4
 10074  01104E  EC00  F080         	call	_printf	;wreg free
 10075                           
 10076                           ;UART.c: 105: usart_str_1(',');
 10077  011052  0E2C               	movlw	44
 10078  011054  EC0F  F0D8         	call	_usart_str_1
 10079                           
 10080                           ;UART.c: 107: printf("%d",Phase_Sequence_Ok);
 10081  011058  0EF1               	movlw	low STR_9
 10082  01105A  0100               	movlb	0	; () banked
 10083  01105C  6FB1               	movwf	printf@f& (0+255),b
 10084  01105E  0EFF               	movlw	high STR_9
 10085  011060  0100               	movlb	0	; () banked
 10086  011062  6FB2               	movwf	(printf@f+1)& (0+255),b
 10087  011064  C01E  F0B3         	movff	_Phase_Sequence_Ok,?_printf+2
 10088  011068  0100               	movlb	0	; () banked
 10089  01106A  6BB4               	clrf	(?_printf+3)& (0+255),b
 10090  01106C  EC00  F080         	call	_printf	;wreg free
 10091                           
 10092                           ;UART.c: 108: usart_str_1(',');
 10093  011070  0E2C               	movlw	44
 10094  011072  EC0F  F0D8         	call	_usart_str_1
 10095                           
 10096                           ;UART.c: 110: printf("%d",VFD_Error_No);
 10097  011076  0EF1               	movlw	low STR_9
 10098  011078  0100               	movlb	0	; () banked
 10099  01107A  6FB1               	movwf	printf@f& (0+255),b
 10100  01107C  0EFF               	movlw	high STR_9
 10101  01107E  0100               	movlb	0	; () banked
 10102  011080  6FB2               	movwf	(printf@f+1)& (0+255),b
 10103  011082  C020  F0B3         	movff	_VFD_Error_No,?_printf+2
 10104  011086  0100               	movlb	0	; () banked
 10105  011088  6BB4               	clrf	(?_printf+3)& (0+255),b
 10106  01108A  EC00  F080         	call	_printf	;wreg free
 10107                           
 10108                           ;UART.c: 111: usart_str_1(',');
 10109  01108E  0E2C               	movlw	44
 10110  011090  EC0F  F0D8         	call	_usart_str_1
 10111                           
 10112                           ;UART.c: 113: printf("%d",Initial_Delay_Second);
 10113  011094  0EF1               	movlw	low STR_9
 10114  011096  0100               	movlb	0	; () banked
 10115  011098  6FB1               	movwf	printf@f& (0+255),b
 10116  01109A  0EFF               	movlw	high STR_9
 10117  01109C  0100               	movlb	0	; () banked
 10118  01109E  6FB2               	movwf	(printf@f+1)& (0+255),b
 10119  0110A0  C12A  F0B3         	movff	_Initial_Delay_Second,?_printf+2
 10120  0110A4  C12B  F0B4         	movff	_Initial_Delay_Second+1,?_printf+3
 10121  0110A8  EC00  F080         	call	_printf	;wreg free
 10122                           
 10123                           ;UART.c: 114: usart_str_1(',');
 10124  0110AC  0E2C               	movlw	44
 10125  0110AE  EC0F  F0D8         	call	_usart_str_1
 10126                           
 10127                           ;UART.c: 116: printf("%d",Errors);
 10128  0110B2  0EF1               	movlw	low STR_9
 10129  0110B4  0100               	movlb	0	; () banked
 10130  0110B6  6FB1               	movwf	printf@f& (0+255),b
 10131  0110B8  0EFF               	movlw	high STR_9
 10132  0110BA  0100               	movlb	0	; () banked
 10133  0110BC  6FB2               	movwf	(printf@f+1)& (0+255),b
 10134  0110BE  C01B  F0B3         	movff	_Errors,?_printf+2
 10135  0110C2  0100               	movlb	0	; () banked
 10136  0110C4  6BB4               	clrf	(?_printf+3)& (0+255),b
 10137  0110C6  EC00  F080         	call	_printf	;wreg free
 10138                           
 10139                           ;UART.c: 117: usart_str_1(',');
 10140  0110CA  0E2C               	movlw	44
 10141  0110CC  EC0F  F0D8         	call	_usart_str_1
 10142                           
 10143                           ;UART.c: 119: switch(Errors)
 10144  0110D0  D1C2               	goto	l21741
 10145  0110D2                     l21639:
 10146                           
 10147                           ;UART.c: 122: printf("%s","NO_ERROR");
 10148  0110D2  0EF4               	movlw	low STR_2
 10149  0110D4  0100               	movlb	0	; () banked
 10150  0110D6  6FB1               	movwf	printf@f& (0+255),b
 10151  0110D8  0EFF               	movlw	high STR_2
 10152  0110DA  0100               	movlb	0	; () banked
 10153  0110DC  6FB2               	movwf	(printf@f+1)& (0+255),b
 10154  0110DE  0E54               	movlw	low STR_33
 10155  0110E0  0100               	movlb	0	; () banked
 10156  0110E2  6FB3               	movwf	(?_printf+2)& (0+255),b
 10157  0110E4  0EFF               	movlw	high STR_33
 10158  0110E6  0100               	movlb	0	; () banked
 10159  0110E8  6FB4               	movwf	(?_printf+3)& (0+255),b
 10160  0110EA  EC00  F080         	call	_printf	;wreg free
 10161                           
 10162                           ;UART.c: 123: usart_str_1(',');
 10163  0110EE  0E2C               	movlw	44
 10164  0110F0  EC0F  F0D8         	call	_usart_str_1
 10165                           
 10166                           ;UART.c: 124: break;
 10167  0110F4  D245               	goto	l21761
 10168  0110F6                     l21643:
 10169                           
 10170                           ;UART.c: 127: printf("%s","WS_MIN_MAX");
 10171  0110F6  0EF4               	movlw	low STR_2
 10172  0110F8  0100               	movlb	0	; () banked
 10173  0110FA  6FB1               	movwf	printf@f& (0+255),b
 10174  0110FC  0EFF               	movlw	high STR_2
 10175  0110FE  0100               	movlb	0	; () banked
 10176  011100  6FB2               	movwf	(printf@f+1)& (0+255),b
 10177  011102  0EA3               	movlw	low STR_35
 10178  011104  0100               	movlb	0	; () banked
 10179  011106  6FB3               	movwf	(?_printf+2)& (0+255),b
 10180  011108  0EFE               	movlw	high STR_35
 10181  01110A  0100               	movlb	0	; () banked
 10182  01110C  6FB4               	movwf	(?_printf+3)& (0+255),b
 10183  01110E  EC00  F080         	call	_printf	;wreg free
 10184                           
 10185                           ;UART.c: 128: usart_str_1(',');
 10186  011112  0E2C               	movlw	44
 10187  011114  EC0F  F0D8         	call	_usart_str_1
 10188                           
 10189                           ;UART.c: 129: break;
 10190  011118  D233               	goto	l21761
 10191  01111A                     l21647:
 10192                           
 10193                           ;UART.c: 132: printf("%s","VOLT_HIGH");
 10194  01111A  0EF4               	movlw	low STR_2
 10195  01111C  0100               	movlb	0	; () banked
 10196  01111E  6FB1               	movwf	printf@f& (0+255),b
 10197  011120  0EFF               	movlw	high STR_2
 10198  011122  0100               	movlb	0	; () banked
 10199  011124  6FB2               	movwf	(printf@f+1)& (0+255),b
 10200  011126  0EAE               	movlw	low STR_37
 10201  011128  0100               	movlb	0	; () banked
 10202  01112A  6FB3               	movwf	(?_printf+2)& (0+255),b
 10203  01112C  0EFE               	movlw	high STR_37
 10204  01112E  0100               	movlb	0	; () banked
 10205  011130  6FB4               	movwf	(?_printf+3)& (0+255),b
 10206  011132  EC00  F080         	call	_printf	;wreg free
 10207                           
 10208                           ;UART.c: 133: usart_str_1(',');
 10209  011136  0E2C               	movlw	44
 10210  011138  EC0F  F0D8         	call	_usart_str_1
 10211                           
 10212                           ;UART.c: 134: break;
 10213  01113C  D221               	goto	l21761
 10214  01113E                     l21651:
 10215                           
 10216                           ;UART.c: 137: printf("%s","VOLT_LOW");
 10217  01113E  0EF4               	movlw	low STR_2
 10218  011140  0100               	movlb	0	; () banked
 10219  011142  6FB1               	movwf	printf@f& (0+255),b
 10220  011144  0EFF               	movlw	high STR_2
 10221  011146  0100               	movlb	0	; () banked
 10222  011148  6FB2               	movwf	(printf@f+1)& (0+255),b
 10223  01114A  0E5D               	movlw	low STR_39
 10224  01114C  0100               	movlb	0	; () banked
 10225  01114E  6FB3               	movwf	(?_printf+2)& (0+255),b
 10226  011150  0EFF               	movlw	high STR_39
 10227  011152  0100               	movlb	0	; () banked
 10228  011154  6FB4               	movwf	(?_printf+3)& (0+255),b
 10229  011156  EC00  F080         	call	_printf	;wreg free
 10230                           
 10231                           ;UART.c: 138: usart_str_1(',');
 10232  01115A  0E2C               	movlw	44
 10233  01115C  EC0F  F0D8         	call	_usart_str_1
 10234                           
 10235                           ;UART.c: 139: break;
 10236  011160  D20F               	goto	l21761
 10237  011162                     l21655:
 10238                           
 10239                           ;UART.c: 142: printf("%s","VFD_SHORT_CIRCUIT");
 10240  011162  0EF4               	movlw	low STR_2
 10241  011164  0100               	movlb	0	; () banked
 10242  011166  6FB1               	movwf	printf@f& (0+255),b
 10243  011168  0EFF               	movlw	high STR_2
 10244  01116A  0100               	movlb	0	; () banked
 10245  01116C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10246  01116E  0EFD               	movlw	low STR_41
 10247  011170  0100               	movlb	0	; () banked
 10248  011172  6FB3               	movwf	(?_printf+2)& (0+255),b
 10249  011174  0EFC               	movlw	high STR_41
 10250  011176  0100               	movlb	0	; () banked
 10251  011178  6FB4               	movwf	(?_printf+3)& (0+255),b
 10252  01117A  EC00  F080         	call	_printf	;wreg free
 10253                           
 10254                           ;UART.c: 143: usart_str_1(',');
 10255  01117E  0E2C               	movlw	44
 10256  011180  EC0F  F0D8         	call	_usart_str_1
 10257                           
 10258                           ;UART.c: 144: break;
 10259  011184  D1FD               	goto	l21761
 10260  011186                     l21659:
 10261                           
 10262                           ;UART.c: 147: printf("%s","PHASE_SEQ");
 10263  011186  0EF4               	movlw	low STR_2
 10264  011188  0100               	movlb	0	; () banked
 10265  01118A  6FB1               	movwf	printf@f& (0+255),b
 10266  01118C  0EFF               	movlw	high STR_2
 10267  01118E  0100               	movlb	0	; () banked
 10268  011190  6FB2               	movwf	(printf@f+1)& (0+255),b
 10269  011192  0ED6               	movlw	low STR_43
 10270  011194  0100               	movlb	0	; () banked
 10271  011196  6FB3               	movwf	(?_printf+2)& (0+255),b
 10272  011198  0EFE               	movlw	high STR_43
 10273  01119A  0100               	movlb	0	; () banked
 10274  01119C  6FB4               	movwf	(?_printf+3)& (0+255),b
 10275  01119E  EC00  F080         	call	_printf	;wreg free
 10276                           
 10277                           ;UART.c: 148: usart_str_1(',');
 10278  0111A2  0E2C               	movlw	44
 10279  0111A4  EC0F  F0D8         	call	_usart_str_1
 10280                           
 10281                           ;UART.c: 149: break;
 10282  0111A8  D1EB               	goto	l21761
 10283  0111AA                     l21663:
 10284                           
 10285                           ;UART.c: 152: printf("%s","FREQ");
 10286  0111AA  0EF4               	movlw	low STR_2
 10287  0111AC  0100               	movlb	0	; () banked
 10288  0111AE  6FB1               	movwf	printf@f& (0+255),b
 10289  0111B0  0EFF               	movlw	high STR_2
 10290  0111B2  0100               	movlb	0	; () banked
 10291  0111B4  6FB2               	movwf	(printf@f+1)& (0+255),b
 10292  0111B6  0EDE               	movlw	low STR_45
 10293  0111B8  0100               	movlb	0	; () banked
 10294  0111BA  6FB3               	movwf	(?_printf+2)& (0+255),b
 10295  0111BC  0EFF               	movlw	high STR_45
 10296  0111BE  0100               	movlb	0	; () banked
 10297  0111C0  6FB4               	movwf	(?_printf+3)& (0+255),b
 10298  0111C2  EC00  F080         	call	_printf	;wreg free
 10299                           
 10300                           ;UART.c: 153: usart_str_1(',');
 10301  0111C6  0E2C               	movlw	44
 10302  0111C8  EC0F  F0D8         	call	_usart_str_1
 10303                           
 10304                           ;UART.c: 154: break;
 10305  0111CC  D1D9               	goto	l21761
 10306  0111CE                     l21667:
 10307                           
 10308                           ;UART.c: 157: printf("%s","TURBINE_NR");
 10309  0111CE  0EF4               	movlw	low STR_2
 10310  0111D0  0100               	movlb	0	; () banked
 10311  0111D2  6FB1               	movwf	printf@f& (0+255),b
 10312  0111D4  0EFF               	movlw	high STR_2
 10313  0111D6  0100               	movlb	0	; () banked
 10314  0111D8  6FB2               	movwf	(printf@f+1)& (0+255),b
 10315  0111DA  0E77               	movlw	low STR_47
 10316  0111DC  0100               	movlb	0	; () banked
 10317  0111DE  6FB3               	movwf	(?_printf+2)& (0+255),b
 10318  0111E0  0EFE               	movlw	high STR_47
 10319  0111E2  0100               	movlb	0	; () banked
 10320  0111E4  6FB4               	movwf	(?_printf+3)& (0+255),b
 10321  0111E6  EC00  F080         	call	_printf	;wreg free
 10322                           
 10323                           ;UART.c: 158: usart_str_1(',');
 10324  0111EA  0E2C               	movlw	44
 10325  0111EC  EC0F  F0D8         	call	_usart_str_1
 10326                           
 10327                           ;UART.c: 159: break;
 10328  0111F0  D1C7               	goto	l21761
 10329  0111F2                     l21671:
 10330                           
 10331                           ;UART.c: 162: printf("%s","VFD_RUN_TIME");
 10332  0111F2  0EF4               	movlw	low STR_2
 10333  0111F4  0100               	movlb	0	; () banked
 10334  0111F6  6FB1               	movwf	printf@f& (0+255),b
 10335  0111F8  0EFF               	movlw	high STR_2
 10336  0111FA  0100               	movlb	0	; () banked
 10337  0111FC  6FB2               	movwf	(printf@f+1)& (0+255),b
 10338  0111FE  0ECF               	movlw	low STR_49
 10339  011200  0100               	movlb	0	; () banked
 10340  011202  6FB3               	movwf	(?_printf+2)& (0+255),b
 10341  011204  0EFD               	movlw	high STR_49
 10342  011206  0100               	movlb	0	; () banked
 10343  011208  6FB4               	movwf	(?_printf+3)& (0+255),b
 10344  01120A  EC00  F080         	call	_printf	;wreg free
 10345                           
 10346                           ;UART.c: 163: usart_str_1(',');
 10347  01120E  0E2C               	movlw	44
 10348  011210  EC0F  F0D8         	call	_usart_str_1
 10349                           
 10350                           ;UART.c: 164: break;
 10351  011214  D1B5               	goto	l21761
 10352  011216                     l21675:
 10353                           
 10354                           ;UART.c: 167: printf("%s","DCB_L_H");
 10355  011216  0EF4               	movlw	low STR_2
 10356  011218  0100               	movlb	0	; () banked
 10357  01121A  6FB1               	movwf	printf@f& (0+255),b
 10358  01121C  0EFF               	movlw	high STR_2
 10359  01121E  0100               	movlb	0	; () banked
 10360  011220  6FB2               	movwf	(printf@f+1)& (0+255),b
 10361  011222  0E6E               	movlw	low STR_51
 10362  011224  0100               	movlb	0	; () banked
 10363  011226  6FB3               	movwf	(?_printf+2)& (0+255),b
 10364  011228  0EFF               	movlw	high STR_51
 10365  01122A  0100               	movlb	0	; () banked
 10366  01122C  6FB4               	movwf	(?_printf+3)& (0+255),b
 10367  01122E  EC00  F080         	call	_printf	;wreg free
 10368                           
 10369                           ;UART.c: 168: usart_str_1(',');
 10370  011232  0E2C               	movlw	44
 10371  011234  EC0F  F0D8         	call	_usart_str_1
 10372                           
 10373                           ;UART.c: 169: break;
 10374  011238  D1A3               	goto	l21761
 10375  01123A                     l21679:
 10376                           
 10377                           ;UART.c: 172: printf("%s","VFD_OC");
 10378  01123A  0EF4               	movlw	low STR_2
 10379  01123C  0100               	movlb	0	; () banked
 10380  01123E  6FB1               	movwf	printf@f& (0+255),b
 10381  011240  0EFF               	movlw	high STR_2
 10382  011242  0100               	movlb	0	; () banked
 10383  011244  6FB2               	movwf	(printf@f+1)& (0+255),b
 10384  011246  0E94               	movlw	low STR_53
 10385  011248  0100               	movlb	0	; () banked
 10386  01124A  6FB3               	movwf	(?_printf+2)& (0+255),b
 10387  01124C  0EFF               	movlw	high STR_53
 10388  01124E  0100               	movlb	0	; () banked
 10389  011250  6FB4               	movwf	(?_printf+3)& (0+255),b
 10390  011252  EC00  F080         	call	_printf	;wreg free
 10391                           
 10392                           ;UART.c: 173: usart_str_1(',');
 10393  011256  0E2C               	movlw	44
 10394  011258  EC0F  F0D8         	call	_usart_str_1
 10395                           
 10396                           ;UART.c: 174: break;
 10397  01125C  D191               	goto	l21761
 10398  01125E                     l21683:
 10399                           
 10400                           ;UART.c: 177: printf("%s","ROTOR_SLIP");
 10401  01125E  0EF4               	movlw	low STR_2
 10402  011260  0100               	movlb	0	; () banked
 10403  011262  6FB1               	movwf	printf@f& (0+255),b
 10404  011264  0EFF               	movlw	high STR_2
 10405  011266  0100               	movlb	0	; () banked
 10406  011268  6FB2               	movwf	(printf@f+1)& (0+255),b
 10407  01126A  0E6C               	movlw	low STR_55
 10408  01126C  0100               	movlb	0	; () banked
 10409  01126E  6FB3               	movwf	(?_printf+2)& (0+255),b
 10410  011270  0EFE               	movlw	high STR_55
 10411  011272  0100               	movlb	0	; () banked
 10412  011274  6FB4               	movwf	(?_printf+3)& (0+255),b
 10413  011276  EC00  F080         	call	_printf	;wreg free
 10414                           
 10415                           ;UART.c: 178: usart_str_1(',');
 10416  01127A  0E2C               	movlw	44
 10417  01127C  EC0F  F0D8         	call	_usart_str_1
 10418                           
 10419                           ;UART.c: 179: break;
 10420  011280  D17F               	goto	l21761
 10421  011282                     l21687:
 10422                           
 10423                           ;UART.c: 182: printf("%s","MOTOR_SLIP");
 10424  011282  0EF4               	movlw	low STR_2
 10425  011284  0100               	movlb	0	; () banked
 10426  011286  6FB1               	movwf	printf@f& (0+255),b
 10427  011288  0EFF               	movlw	high STR_2
 10428  01128A  0100               	movlb	0	; () banked
 10429  01128C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10430  01128E  0E61               	movlw	low STR_57
 10431  011290  0100               	movlb	0	; () banked
 10432  011292  6FB3               	movwf	(?_printf+2)& (0+255),b
 10433  011294  0EFE               	movlw	high STR_57
 10434  011296  0100               	movlb	0	; () banked
 10435  011298  6FB4               	movwf	(?_printf+3)& (0+255),b
 10436  01129A  EC00  F080         	call	_printf	;wreg free
 10437                           
 10438                           ;UART.c: 183: usart_str_1(',');
 10439  01129E  0E2C               	movlw	44
 10440  0112A0  EC0F  F0D8         	call	_usart_str_1
 10441                           
 10442                           ;UART.c: 184: break;
 10443  0112A4  D16D               	goto	l21761
 10444  0112A6                     l21691:
 10445                           
 10446                           ;UART.c: 187: printf("%s","TURBINE_US_OS");
 10447  0112A6  0EF4               	movlw	low STR_2
 10448  0112A8  0100               	movlb	0	; () banked
 10449  0112AA  6FB1               	movwf	printf@f& (0+255),b
 10450  0112AC  0EFF               	movlw	high STR_2
 10451  0112AE  0100               	movlb	0	; () banked
 10452  0112B0  6FB2               	movwf	(printf@f+1)& (0+255),b
 10453  0112B2  0EB3               	movlw	low STR_59
 10454  0112B4  0100               	movlb	0	; () banked
 10455  0112B6  6FB3               	movwf	(?_printf+2)& (0+255),b
 10456  0112B8  0EFD               	movlw	high STR_59
 10457  0112BA  0100               	movlb	0	; () banked
 10458  0112BC  6FB4               	movwf	(?_printf+3)& (0+255),b
 10459  0112BE  EC00  F080         	call	_printf	;wreg free
 10460                           
 10461                           ;UART.c: 188: usart_str_1(',');
 10462  0112C2  0E2C               	movlw	44
 10463  0112C4  EC0F  F0D8         	call	_usart_str_1
 10464                           
 10465                           ;UART.c: 189: break;
 10466  0112C8  D15B               	goto	l21761
 10467  0112CA                     l21695:
 10468                           
 10469                           ;UART.c: 192: printf("%s","GEN_OS");
 10470  0112CA  0EF4               	movlw	low STR_2
 10471  0112CC  0100               	movlb	0	; () banked
 10472  0112CE  6FB1               	movwf	printf@f& (0+255),b
 10473  0112D0  0EFF               	movlw	high STR_2
 10474  0112D2  0100               	movlb	0	; () banked
 10475  0112D4  6FB2               	movwf	(printf@f+1)& (0+255),b
 10476  0112D6  0EA2               	movlw	low STR_61
 10477  0112D8  0100               	movlb	0	; () banked
 10478  0112DA  6FB3               	movwf	(?_printf+2)& (0+255),b
 10479  0112DC  0EFF               	movlw	high STR_61
 10480  0112DE  0100               	movlb	0	; () banked
 10481  0112E0  6FB4               	movwf	(?_printf+3)& (0+255),b
 10482  0112E2  EC00  F080         	call	_printf	;wreg free
 10483                           
 10484                           ;UART.c: 193: usart_str_1(',');
 10485  0112E6  0E2C               	movlw	44
 10486  0112E8  EC0F  F0D8         	call	_usart_str_1
 10487                           
 10488                           ;UART.c: 194: break;
 10489  0112EC  D149               	goto	l21761
 10490  0112EE                     l21699:
 10491                           
 10492                           ;UART.c: 197: printf("%s","CURRENT_H");
 10493  0112EE  0EF4               	movlw	low STR_2
 10494  0112F0  0100               	movlb	0	; () banked
 10495  0112F2  6FB1               	movwf	printf@f& (0+255),b
 10496  0112F4  0EFF               	movlw	high STR_2
 10497  0112F6  0100               	movlb	0	; () banked
 10498  0112F8  6FB2               	movwf	(printf@f+1)& (0+255),b
 10499  0112FA  0EB8               	movlw	low STR_63
 10500  0112FC  0100               	movlb	0	; () banked
 10501  0112FE  6FB3               	movwf	(?_printf+2)& (0+255),b
 10502  011300  0EFE               	movlw	high STR_63
 10503  011302  0100               	movlb	0	; () banked
 10504  011304  6FB4               	movwf	(?_printf+3)& (0+255),b
 10505  011306  EC00  F080         	call	_printf	;wreg free
 10506                           
 10507                           ;UART.c: 198: usart_str_1(',');
 10508  01130A  0E2C               	movlw	44
 10509  01130C  EC0F  F0D8         	call	_usart_str_1
 10510                           
 10511                           ;UART.c: 199: break;
 10512  011310  D137               	goto	l21761
 10513  011312                     l21703:
 10514                           
 10515                           ;UART.c: 202: printf("%s","POWER_MAX");
 10516  011312  0EF4               	movlw	low STR_2
 10517  011314  0100               	movlb	0	; () banked
 10518  011316  6FB1               	movwf	printf@f& (0+255),b
 10519  011318  0EFF               	movlw	high STR_2
 10520  01131A  0100               	movlb	0	; () banked
 10521  01131C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10522  01131E  0E12               	movlw	low STR_65
 10523  011320  0100               	movlb	0	; () banked
 10524  011322  6FB3               	movwf	(?_printf+2)& (0+255),b
 10525  011324  0EFF               	movlw	high STR_65
 10526  011326  0100               	movlb	0	; () banked
 10527  011328  6FB4               	movwf	(?_printf+3)& (0+255),b
 10528  01132A  EC00  F080         	call	_printf	;wreg free
 10529                           
 10530                           ;UART.c: 203: usart_str_1(',');
 10531  01132E  0E2C               	movlw	44
 10532  011330  EC0F  F0D8         	call	_usart_str_1
 10533                           
 10534                           ;UART.c: 204: break;
 10535  011334  D125               	goto	l21761
 10536  011336                     l21707:
 10537                           
 10538                           ;UART.c: 207: printf("%s","POWER_MIN");
 10539  011336  0EF4               	movlw	low STR_2
 10540  011338  0100               	movlb	0	; () banked
 10541  01133A  6FB1               	movwf	printf@f& (0+255),b
 10542  01133C  0EFF               	movlw	high STR_2
 10543  01133E  0100               	movlb	0	; () banked
 10544  011340  6FB2               	movwf	(printf@f+1)& (0+255),b
 10545  011342  0EC2               	movlw	low STR_67
 10546  011344  0100               	movlb	0	; () banked
 10547  011346  6FB3               	movwf	(?_printf+2)& (0+255),b
 10548  011348  0EFE               	movlw	high STR_67
 10549  01134A  0100               	movlb	0	; () banked
 10550  01134C  6FB4               	movwf	(?_printf+3)& (0+255),b
 10551  01134E  EC00  F080         	call	_printf	;wreg free
 10552                           
 10553                           ;UART.c: 208: usart_str_1(',');
 10554  011352  0E2C               	movlw	44
 10555  011354  EC0F  F0D8         	call	_usart_str_1
 10556                           
 10557                           ;UART.c: 209: break;
 10558  011358  D113               	goto	l21761
 10559  01135A                     l21711:
 10560                           
 10561                           ;UART.c: 212: printf("%s","TURBINE_OL");
 10562  01135A  0EF4               	movlw	low STR_2
 10563  01135C  0100               	movlb	0	; () banked
 10564  01135E  6FB1               	movwf	printf@f& (0+255),b
 10565  011360  0EFF               	movlw	high STR_2
 10566  011362  0100               	movlb	0	; () banked
 10567  011364  6FB2               	movwf	(printf@f+1)& (0+255),b
 10568  011366  0E56               	movlw	low STR_69
 10569  011368  0100               	movlb	0	; () banked
 10570  01136A  6FB3               	movwf	(?_printf+2)& (0+255),b
 10571  01136C  0EFE               	movlw	high STR_69
 10572  01136E  0100               	movlb	0	; () banked
 10573  011370  6FB4               	movwf	(?_printf+3)& (0+255),b
 10574  011372  EC00  F080         	call	_printf	;wreg free
 10575                           
 10576                           ;UART.c: 213: usart_str_1(',');
 10577  011376  0E2C               	movlw	44
 10578  011378  EC0F  F0D8         	call	_usart_str_1
 10579                           
 10580                           ;UART.c: 214: break;
 10581  01137C  D101               	goto	l21761
 10582  01137E                     l21715:
 10583                           
 10584                           ;UART.c: 217: printf("%s","DC_EXT_LOW");
 10585  01137E  0EF4               	movlw	low STR_2
 10586  011380  0100               	movlb	0	; () banked
 10587  011382  6FB1               	movwf	printf@f& (0+255),b
 10588  011384  0EFF               	movlw	high STR_2
 10589  011386  0100               	movlb	0	; () banked
 10590  011388  6FB2               	movwf	(printf@f+1)& (0+255),b
 10591  01138A  0E98               	movlw	low STR_71
 10592  01138C  0100               	movlb	0	; () banked
 10593  01138E  6FB3               	movwf	(?_printf+2)& (0+255),b
 10594  011390  0EFE               	movlw	high STR_71
 10595  011392  0100               	movlb	0	; () banked
 10596  011394  6FB4               	movwf	(?_printf+3)& (0+255),b
 10597  011396  EC00  F080         	call	_printf	;wreg free
 10598                           
 10599                           ;UART.c: 218: usart_str_1(',');
 10600  01139A  0E2C               	movlw	44
 10601  01139C  EC0F  F0D8         	call	_usart_str_1
 10602                           
 10603                           ;UART.c: 219: break;
 10604  0113A0  D0EF               	goto	l21761
 10605  0113A2                     l21719:
 10606                           
 10607                           ;UART.c: 222: printf("%s","PITCH_FB");
 10608  0113A2  0EF4               	movlw	low STR_2
 10609  0113A4  0100               	movlb	0	; () banked
 10610  0113A6  6FB1               	movwf	printf@f& (0+255),b
 10611  0113A8  0EFF               	movlw	high STR_2
 10612  0113AA  0100               	movlb	0	; () banked
 10613  0113AC  6FB2               	movwf	(printf@f+1)& (0+255),b
 10614  0113AE  0E30               	movlw	low STR_73
 10615  0113B0  0100               	movlb	0	; () banked
 10616  0113B2  6FB3               	movwf	(?_printf+2)& (0+255),b
 10617  0113B4  0EFF               	movlw	high STR_73
 10618  0113B6  0100               	movlb	0	; () banked
 10619  0113B8  6FB4               	movwf	(?_printf+3)& (0+255),b
 10620  0113BA  EC00  F080         	call	_printf	;wreg free
 10621                           
 10622                           ;UART.c: 223: usart_str_1(',');
 10623  0113BE  0E2C               	movlw	44
 10624  0113C0  EC0F  F0D8         	call	_usart_str_1
 10625                           
 10626                           ;UART.c: 224: break;
 10627  0113C4  D0DD               	goto	l21761
 10628  0113C6                     l21723:
 10629                           
 10630                           ;UART.c: 227: printf("%s","GEN_FB");
 10631  0113C6  0EF4               	movlw	low STR_2
 10632  0113C8  0100               	movlb	0	; () banked
 10633  0113CA  6FB1               	movwf	printf@f& (0+255),b
 10634  0113CC  0EFF               	movlw	high STR_2
 10635  0113CE  0100               	movlb	0	; () banked
 10636  0113D0  6FB2               	movwf	(printf@f+1)& (0+255),b
 10637  0113D2  0E8D               	movlw	low STR_75
 10638  0113D4  0100               	movlb	0	; () banked
 10639  0113D6  6FB3               	movwf	(?_printf+2)& (0+255),b
 10640  0113D8  0EFF               	movlw	high STR_75
 10641  0113DA  0100               	movlb	0	; () banked
 10642  0113DC  6FB4               	movwf	(?_printf+3)& (0+255),b
 10643  0113DE  EC00  F080         	call	_printf	;wreg free
 10644                           
 10645                           ;UART.c: 228: usart_str_1(',');
 10646  0113E2  0E2C               	movlw	44
 10647  0113E4  EC0F  F0D8         	call	_usart_str_1
 10648                           
 10649                           ;UART.c: 229: break;
 10650  0113E8  D0CB               	goto	l21761
 10651  0113EA                     l21727:
 10652                           
 10653                           ;UART.c: 232: printf("%s","MANUAL_STOP");
 10654  0113EA  0EF4               	movlw	low STR_2
 10655  0113EC  0100               	movlb	0	; () banked
 10656  0113EE  6FB1               	movwf	printf@f& (0+255),b
 10657  0113F0  0EFF               	movlw	high STR_2
 10658  0113F2  0100               	movlb	0	; () banked
 10659  0113F4  6FB2               	movwf	(printf@f+1)& (0+255),b
 10660  0113F6  0E34               	movlw	low STR_77
 10661  0113F8  0100               	movlb	0	; () banked
 10662  0113FA  6FB3               	movwf	(?_printf+2)& (0+255),b
 10663  0113FC  0EFE               	movlw	high STR_77
 10664  0113FE  0100               	movlb	0	; () banked
 10665  011400  6FB4               	movwf	(?_printf+3)& (0+255),b
 10666  011402  EC00  F080         	call	_printf	;wreg free
 10667                           
 10668                           ;UART.c: 233: usart_str_1(',');
 10669  011406  0E2C               	movlw	44
 10670  011408  EC0F  F0D8         	call	_usart_str_1
 10671                           
 10672                           ;UART.c: 234: break;
 10673  01140C  D0B9               	goto	l21761
 10674  01140E                     l21731:
 10675                           
 10676                           ;UART.c: 237: printf("%s","VFD_COMMU_ERR");
 10677  01140E  0EF4               	movlw	low STR_2
 10678  011410  0100               	movlb	0	; () banked
 10679  011412  6FB1               	movwf	printf@f& (0+255),b
 10680  011414  0EFF               	movlw	high STR_2
 10681  011416  0100               	movlb	0	; () banked
 10682  011418  6FB2               	movwf	(printf@f+1)& (0+255),b
 10683  01141A  0EA5               	movlw	low STR_79
 10684  01141C  0100               	movlb	0	; () banked
 10685  01141E  6FB3               	movwf	(?_printf+2)& (0+255),b
 10686  011420  0EFD               	movlw	high STR_79
 10687  011422  0100               	movlb	0	; () banked
 10688  011424  6FB4               	movwf	(?_printf+3)& (0+255),b
 10689  011426  EC00  F080         	call	_printf	;wreg free
 10690                           
 10691                           ;UART.c: 238: usart_str_1(',');
 10692  01142A  0E2C               	movlw	44
 10693  01142C  EC0F  F0D8         	call	_usart_str_1
 10694                           
 10695                           ;UART.c: 239: break;
 10696  011430  D0A7               	goto	l21761
 10697  011432                     l21735:
 10698                           
 10699                           ;UART.c: 242: printf("%s","MEAURE_ERR");
 10700  011432  0EF4               	movlw	low STR_2
 10701  011434  0100               	movlb	0	; () banked
 10702  011436  6FB1               	movwf	printf@f& (0+255),b
 10703  011438  0EFF               	movlw	high STR_2
 10704  01143A  0100               	movlb	0	; () banked
 10705  01143C  6FB2               	movwf	(printf@f+1)& (0+255),b
 10706  01143E  0E82               	movlw	low STR_81
 10707  011440  0100               	movlb	0	; () banked
 10708  011442  6FB3               	movwf	(?_printf+2)& (0+255),b
 10709  011444  0EFE               	movlw	high STR_81
 10710  011446  0100               	movlb	0	; () banked
 10711  011448  6FB4               	movwf	(?_printf+3)& (0+255),b
 10712  01144A  EC00  F080         	call	_printf	;wreg free
 10713                           
 10714                           ;UART.c: 243: usart_str_1(',');
 10715  01144E  0E2C               	movlw	44
 10716  011450  EC0F  F0D8         	call	_usart_str_1
 10717                           
 10718                           ;UART.c: 245: }
 10719                           
 10720                           ;UART.c: 244: break;
 10721  011454  D095               	goto	l21761
 10722  011456                     l21741:
 10723  011456  501B               	movf	_Errors,w,c
 10724                           
 10725                           ; Switch size 1, requested type "space"
 10726                           ; Number of cases is 25, Range of values is 0 to 24
 10727                           ; switch strategies available:
 10728                           ; Name         Instructions Cycles
 10729                           ; simple_byte           76    39 (average)
 10730                           ;	Chosen strategy is simple_byte
 10731  011458  0A00               	xorlw	0	; case 0
 10732  01145A  B4D8               	btfsc	status,2,c
 10733  01145C  D63A               	goto	l21639
 10734  01145E  0A01               	xorlw	1	; case 1
 10735  011460  B4D8               	btfsc	status,2,c
 10736  011462  D649               	goto	l21643
 10737  011464  0A03               	xorlw	3	; case 2
 10738  011466  B4D8               	btfsc	status,2,c
 10739  011468  D66A               	goto	l21651
 10740  01146A  0A01               	xorlw	1	; case 3
 10741  01146C  B4D8               	btfsc	status,2,c
 10742  01146E  D6D3               	goto	l21675
 10743  011470  0A07               	xorlw	7	; case 4
 10744  011472  B4D8               	btfsc	status,2,c
 10745  011474  D6BE               	goto	l21671
 10746  011476  0A01               	xorlw	1	; case 5
 10747  011478  B4D8               	btfsc	status,2,c
 10748  01147A  D7C9               	goto	l21731
 10749  01147C  0A03               	xorlw	3	; case 6
 10750  01147E  B4D8               	btfsc	status,2,c
 10751  011480  D670               	goto	l21655
 10752  011482  0A01               	xorlw	1	; case 7
 10753  011484  B4D8               	btfsc	status,2,c
 10754  011486  D77B               	goto	l21715
 10755  011488  0A0F               	xorlw	15	; case 8
 10756  01148A  B4D8               	btfsc	status,2,c
 10757  01148C  D6D6               	goto	l21679
 10758  01148E  0A01               	xorlw	1	; case 9
 10759  011490  B4D8               	btfsc	status,2,c
 10760  011492  D72D               	goto	l21699
 10761  011494  0A03               	xorlw	3	; case 10
 10762  011496  B4D8               	btfsc	status,2,c
 10763  011498  D706               	goto	l21691
 10764  01149A  0A01               	xorlw	1	; case 11
 10765  01149C  B4D8               	btfsc	status,2,c
 10766  01149E  D715               	goto	l21695
 10767  0114A0  0A07               	xorlw	7	; case 12
 10768  0114A2  B4D8               	btfsc	status,2,c
 10769  0114A4  D682               	goto	l21663
 10770  0114A6  0A01               	xorlw	1	; case 13
 10771  0114A8  B4D8               	btfsc	status,2,c
 10772  0114AA  D66D               	goto	l21659
 10773  0114AC  0A03               	xorlw	3	; case 14
 10774  0114AE  B4D8               	btfsc	status,2,c
 10775  0114B0  D730               	goto	l21703
 10776  0114B2  0A01               	xorlw	1	; case 15
 10777  0114B4  B4D8               	btfsc	status,2,c
 10778  0114B6  D73F               	goto	l21707
 10779  0114B8  0A1F               	xorlw	31	; case 16
 10780  0114BA  B4D8               	btfsc	status,2,c
 10781  0114BC  D6E2               	goto	l21687
 10782  0114BE  0A01               	xorlw	1	; case 17
 10783  0114C0  B4D8               	btfsc	status,2,c
 10784  0114C2  D6CD               	goto	l21683
 10785  0114C4  0A03               	xorlw	3	; case 18
 10786  0114C6  B4D8               	btfsc	status,2,c
 10787  0114C8  D748               	goto	l21711
 10788  0114CA  0A01               	xorlw	1	; case 19
 10789  0114CC  B4D8               	btfsc	status,2,c
 10790  0114CE  D78D               	goto	l21727
 10791  0114D0  0A07               	xorlw	7	; case 20
 10792  0114D2  B4D8               	btfsc	status,2,c
 10793  0114D4  D778               	goto	l21723
 10794  0114D6  0A01               	xorlw	1	; case 21
 10795  0114D8  B4D8               	btfsc	status,2,c
 10796  0114DA  D763               	goto	l21719
 10797  0114DC  0A03               	xorlw	3	; case 22
 10798  0114DE  B4D8               	btfsc	status,2,c
 10799  0114E0  D7A8               	goto	l21735
 10800  0114E2  0A01               	xorlw	1	; case 23
 10801  0114E4  B4D8               	btfsc	status,2,c
 10802  0114E6  D673               	goto	l21667
 10803  0114E8  0A0F               	xorlw	15	; case 24
 10804  0114EA  B4D8               	btfsc	status,2,c
 10805  0114EC  D616               	goto	l21647
 10806                           
 10807                           ;UART.c: 247: switch(Turbine_state)
 10808  0114EE  D048               	goto	l21761
 10809  0114F0                     l21743:
 10810                           
 10811                           ;UART.c: 250: printf("%s","STARTUP");
 10812  0114F0  0EF4               	movlw	low STR_2
 10813  0114F2  0100               	movlb	0	; () banked
 10814  0114F4  6FB1               	movwf	printf@f& (0+255),b
 10815  0114F6  0EFF               	movlw	high STR_2
 10816  0114F8  0100               	movlb	0	; () banked
 10817  0114FA  6FB2               	movwf	(printf@f+1)& (0+255),b
 10818  0114FC  0E7E               	movlw	low STR_83
 10819  0114FE  0100               	movlb	0	; () banked
 10820  011500  6FB3               	movwf	(?_printf+2)& (0+255),b
 10821  011502  0EFF               	movlw	high STR_83
 10822  011504  0100               	movlb	0	; () banked
 10823  011506  6FB4               	movwf	(?_printf+3)& (0+255),b
 10824  011508  EC00  F080         	call	_printf	;wreg free
 10825                           
 10826                           ;UART.c: 251: usart_str_1(',');
 10827  01150C  0E2C               	movlw	44
 10828  01150E  EC0F  F0D8         	call	_usart_str_1
 10829                           
 10830                           ;UART.c: 252: break;
 10831  011512  D044               	goto	l21763
 10832  011514                     l21747:
 10833                           
 10834                           ;UART.c: 255: printf("%s","RAMPUP");
 10835  011514  0EF4               	movlw	low STR_2
 10836  011516  0100               	movlb	0	; () banked
 10837  011518  6FB1               	movwf	printf@f& (0+255),b
 10838  01151A  0EFF               	movlw	high STR_2
 10839  01151C  0100               	movlb	0	; () banked
 10840  01151E  6FB2               	movwf	(printf@f+1)& (0+255),b
 10841  011520  0E9B               	movlw	low STR_85
 10842  011522  0100               	movlb	0	; () banked
 10843  011524  6FB3               	movwf	(?_printf+2)& (0+255),b
 10844  011526  0EFF               	movlw	high STR_85
 10845  011528  0100               	movlb	0	; () banked
 10846  01152A  6FB4               	movwf	(?_printf+3)& (0+255),b
 10847  01152C  EC00  F080         	call	_printf	;wreg free
 10848                           
 10849                           ;UART.c: 256: usart_str_1(',');
 10850  011530  0E2C               	movlw	44
 10851  011532  EC0F  F0D8         	call	_usart_str_1
 10852                           
 10853                           ;UART.c: 257: break;
 10854  011536  D032               	goto	l21763
 10855  011538                     l21751:
 10856                           
 10857                           ;UART.c: 260: printf("%s","RUNNING");
 10858  011538  0EF4               	movlw	low STR_2
 10859  01153A  0100               	movlb	0	; () banked
 10860  01153C  6FB1               	movwf	printf@f& (0+255),b
 10861  01153E  0EFF               	movlw	high STR_2
 10862  011540  0100               	movlb	0	; () banked
 10863  011542  6FB2               	movwf	(printf@f+1)& (0+255),b
 10864  011544  0E66               	movlw	low STR_87
 10865  011546  0100               	movlb	0	; () banked
 10866  011548  6FB3               	movwf	(?_printf+2)& (0+255),b
 10867  01154A  0EFF               	movlw	high STR_87
 10868  01154C  0100               	movlb	0	; () banked
 10869  01154E  6FB4               	movwf	(?_printf+3)& (0+255),b
 10870  011550  EC00  F080         	call	_printf	;wreg free
 10871                           
 10872                           ;UART.c: 261: usart_str_1(',');
 10873  011554  0E2C               	movlw	44
 10874  011556  EC0F  F0D8         	call	_usart_str_1
 10875                           
 10876                           ;UART.c: 262: break;
 10877  01155A  D020               	goto	l21763
 10878  01155C                     l21755:
 10879                           
 10880                           ;UART.c: 265: printf("%s","STOPPING");
 10881  01155C  0EF4               	movlw	low STR_2
 10882  01155E  0100               	movlb	0	; () banked
 10883  011560  6FB1               	movwf	printf@f& (0+255),b
 10884  011562  0EFF               	movlw	high STR_2
 10885  011564  0100               	movlb	0	; () banked
 10886  011566  6FB2               	movwf	(printf@f+1)& (0+255),b
 10887  011568  0E39               	movlw	low STR_89
 10888  01156A  0100               	movlb	0	; () banked
 10889  01156C  6FB3               	movwf	(?_printf+2)& (0+255),b
 10890  01156E  0EFF               	movlw	high STR_89
 10891  011570  0100               	movlb	0	; () banked
 10892  011572  6FB4               	movwf	(?_printf+3)& (0+255),b
 10893  011574  EC00  F080         	call	_printf	;wreg free
 10894                           
 10895                           ;UART.c: 266: usart_str_1(',');
 10896  011578  0E2C               	movlw	44
 10897  01157A  EC0F  F0D8         	call	_usart_str_1
 10898                           
 10899                           ;UART.c: 268: }
 10900                           
 10901                           ;UART.c: 267: break;
 10902  01157E  D00E               	goto	l21763
 10903  011580                     l21761:
 10904  011580  0100               	movlb	0	; () banked
 10905  011582  51F0               	movf	_Turbine_state& (0+255),w,b
 10906                           
 10907                           ; Switch size 1, requested type "space"
 10908                           ; Number of cases is 4, Range of values is 0 to 3
 10909                           ; switch strategies available:
 10910                           ; Name         Instructions Cycles
 10911                           ; simple_byte           13     7 (average)
 10912                           ;	Chosen strategy is simple_byte
 10913  011584  0A00               	xorlw	0	; case 0
 10914  011586  B4D8               	btfsc	status,2,c
 10915  011588  D7B3               	goto	l21743
 10916  01158A  0A01               	xorlw	1	; case 1
 10917  01158C  B4D8               	btfsc	status,2,c
 10918  01158E  D7C2               	goto	l21747
 10919  011590  0A03               	xorlw	3	; case 2
 10920  011592  B4D8               	btfsc	status,2,c
 10921  011594  D7D1               	goto	l21751
 10922  011596  0A01               	xorlw	1	; case 3
 10923  011598  B4D8               	btfsc	status,2,c
 10924  01159A  D7E0               	goto	l21755
 10925  01159C                     l21763:
 10926                           
 10927                           ;UART.c: 271: RTC_GetDateTime(&rtc);
 10928  01159C  0EF2               	movlw	low _rtc
 10929  01159E  0100               	movlb	0	; () banked
 10930  0115A0  6F62               	movwf	RTC_GetDateTime@rtc& (0+255),b
 10931  0115A2  0E05               	movlw	high _rtc
 10932  0115A4  0100               	movlb	0	; () banked
 10933  0115A6  6F63               	movwf	(RTC_GetDateTime@rtc+1)& (0+255),b
 10934  0115A8  EC2C  F0CD         	call	_RTC_GetDateTime	;wreg free
 10935                           
 10936                           ;UART.c: 272: GiHours = BCDtoI(rtc.hour);
 10937  0115AC  C5F4  F074         	movff	_rtc+2,BCDtoI@BCD
 10938  0115B0  0100               	movlb	0	; () banked
 10939  0115B2  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10940  0115B4  ECB4  F0C9         	call	_BCDtoI	;wreg free
 10941  0115B8  C074  F28C         	movff	?_BCDtoI,_GiHours
 10942  0115BC  C075  F28D         	movff	?_BCDtoI+1,_GiHours+1
 10943                           
 10944                           ;UART.c: 273: GiMinutes = BCDtoI(rtc.min);
 10945  0115C0  C5F3  F074         	movff	_rtc+1,BCDtoI@BCD
 10946  0115C4  0100               	movlb	0	; () banked
 10947  0115C6  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10948  0115C8  ECB4  F0C9         	call	_BCDtoI	;wreg free
 10949  0115CC  C074  F28E         	movff	?_BCDtoI,_GiMinutes
 10950  0115D0  C075  F28F         	movff	?_BCDtoI+1,_GiMinutes+1
 10951                           
 10952                           ;UART.c: 274: GiSeconds = BCDtoI(rtc.sec);
 10953  0115D4  C5F2  F074         	movff	_rtc,BCDtoI@BCD
 10954  0115D8  0100               	movlb	0	; () banked
 10955  0115DA  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10956  0115DC  ECB4  F0C9         	call	_BCDtoI	;wreg free
 10957  0115E0  C074  F292         	movff	?_BCDtoI,_GiSeconds
 10958  0115E4  C075  F293         	movff	?_BCDtoI+1,_GiSeconds+1
 10959                           
 10960                           ;UART.c: 275: GiData = BCDtoI(rtc.date);
 10961  0115E8  C5F6  F074         	movff	_rtc+4,BCDtoI@BCD
 10962  0115EC  0100               	movlb	0	; () banked
 10963  0115EE  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10964  0115F0  ECB4  F0C9         	call	_BCDtoI	;wreg free
 10965  0115F4  C074  F28A         	movff	?_BCDtoI,_GiData
 10966  0115F8  C075  F28B         	movff	?_BCDtoI+1,_GiData+1
 10967                           
 10968                           ;UART.c: 276: GiMonth = BCDtoI(rtc.month);
 10969  0115FC  C5F7  F074         	movff	_rtc+5,BCDtoI@BCD
 10970  011600  0100               	movlb	0	; () banked
 10971  011602  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10972  011604  ECB4  F0C9         	call	_BCDtoI	;wreg free
 10973  011608  C074  F290         	movff	?_BCDtoI,_GiMonth
 10974  01160C  C075  F291         	movff	?_BCDtoI+1,_GiMonth+1
 10975                           
 10976                           ;UART.c: 277: GiYear = BCDtoI(rtc.year);
 10977  011610  C5F8  F074         	movff	_rtc+6,BCDtoI@BCD
 10978  011614  0100               	movlb	0	; () banked
 10979  011616  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10980  011618  ECB4  F0C9         	call	_BCDtoI	;wreg free
 10981  01161C  C074  F3E6         	movff	?_BCDtoI,_GiYear
 10982  011620  C075  F3E7         	movff	?_BCDtoI+1,_GiYear+1
 10983                           
 10984                           ;UART.c: 278: GiDay = BCDtoI(rtc.weekDay);
 10985  011624  C5F5  F074         	movff	_rtc+3,BCDtoI@BCD
 10986  011628  0100               	movlb	0	; () banked
 10987  01162A  6B75               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10988  01162C  ECB4  F0C9         	call	_BCDtoI	;wreg free
 10989  011630  C074  F5CA         	movff	?_BCDtoI,_GiDay
 10990  011634  C075  F5CB         	movff	?_BCDtoI+1,_GiDay+1
 10991                           
 10992                           ;UART.c: 280: printf("%d",GiData);
 10993  011638  0EF1               	movlw	low STR_9
 10994  01163A  0100               	movlb	0	; () banked
 10995  01163C  6FB1               	movwf	printf@f& (0+255),b
 10996  01163E  0EFF               	movlw	high STR_9
 10997  011640  0100               	movlb	0	; () banked
 10998  011642  6FB2               	movwf	(printf@f+1)& (0+255),b
 10999  011644  C28A  F0B3         	movff	_GiData,?_printf+2
 11000  011648  C28B  F0B4         	movff	_GiData+1,?_printf+3
 11001  01164C  EC00  F080         	call	_printf	;wreg free
 11002                           
 11003                           ;UART.c: 281: usart_str_1('-');
 11004  011650  0E2D               	movlw	45
 11005  011652  EC0F  F0D8         	call	_usart_str_1
 11006                           
 11007                           ;UART.c: 282: printf("%d",GiMonth);
 11008  011656  0EF1               	movlw	low STR_9
 11009  011658  0100               	movlb	0	; () banked
 11010  01165A  6FB1               	movwf	printf@f& (0+255),b
 11011  01165C  0EFF               	movlw	high STR_9
 11012  01165E  0100               	movlb	0	; () banked
 11013  011660  6FB2               	movwf	(printf@f+1)& (0+255),b
 11014  011662  C290  F0B3         	movff	_GiMonth,?_printf+2
 11015  011666  C291  F0B4         	movff	_GiMonth+1,?_printf+3
 11016  01166A  EC00  F080         	call	_printf	;wreg free
 11017                           
 11018                           ;UART.c: 283: usart_str_1('-');
 11019  01166E  0E2D               	movlw	45
 11020  011670  EC0F  F0D8         	call	_usart_str_1
 11021                           
 11022                           ;UART.c: 284: printf("%d",GiYear);
 11023  011674  0EF1               	movlw	low STR_9
 11024  011676  0100               	movlb	0	; () banked
 11025  011678  6FB1               	movwf	printf@f& (0+255),b
 11026  01167A  0EFF               	movlw	high STR_9
 11027  01167C  0100               	movlb	0	; () banked
 11028  01167E  6FB2               	movwf	(printf@f+1)& (0+255),b
 11029  011680  C3E6  F0B3         	movff	_GiYear,?_printf+2
 11030  011684  C3E7  F0B4         	movff	_GiYear+1,?_printf+3
 11031  011688  EC00  F080         	call	_printf	;wreg free
 11032                           
 11033                           ;UART.c: 285: usart_str_1(',');
 11034  01168C  0E2C               	movlw	44
 11035  01168E  EC0F  F0D8         	call	_usart_str_1
 11036                           
 11037                           ;UART.c: 287: printf("%d",GiHours);
 11038  011692  0EF1               	movlw	low STR_9
 11039  011694  0100               	movlb	0	; () banked
 11040  011696  6FB1               	movwf	printf@f& (0+255),b
 11041  011698  0EFF               	movlw	high STR_9
 11042  01169A  0100               	movlb	0	; () banked
 11043  01169C  6FB2               	movwf	(printf@f+1)& (0+255),b
 11044  01169E  C28C  F0B3         	movff	_GiHours,?_printf+2
 11045  0116A2  C28D  F0B4         	movff	_GiHours+1,?_printf+3
 11046  0116A6  EC00  F080         	call	_printf	;wreg free
 11047                           
 11048                           ;UART.c: 288: usart_str_1(':');
 11049  0116AA  0E3A               	movlw	58
 11050  0116AC  EC0F  F0D8         	call	_usart_str_1
 11051                           
 11052                           ;UART.c: 289: printf("%d",GiMinutes);
 11053  0116B0  0EF1               	movlw	low STR_9
 11054  0116B2  0100               	movlb	0	; () banked
 11055  0116B4  6FB1               	movwf	printf@f& (0+255),b
 11056  0116B6  0EFF               	movlw	high STR_9
 11057  0116B8  0100               	movlb	0	; () banked
 11058  0116BA  6FB2               	movwf	(printf@f+1)& (0+255),b
 11059  0116BC  C28E  F0B3         	movff	_GiMinutes,?_printf+2
 11060  0116C0  C28F  F0B4         	movff	_GiMinutes+1,?_printf+3
 11061  0116C4  EC00  F080         	call	_printf	;wreg free
 11062                           
 11063                           ;UART.c: 290: usart_str_1(':');
 11064  0116C8  0E3A               	movlw	58
 11065  0116CA  EC0F  F0D8         	call	_usart_str_1
 11066                           
 11067                           ;UART.c: 291: printf("%d",GiSeconds);
 11068  0116CE  0EF1               	movlw	low STR_9
 11069  0116D0  0100               	movlb	0	; () banked
 11070  0116D2  6FB1               	movwf	printf@f& (0+255),b
 11071  0116D4  0EFF               	movlw	high STR_9
 11072  0116D6  0100               	movlb	0	; () banked
 11073  0116D8  6FB2               	movwf	(printf@f+1)& (0+255),b
 11074  0116DA  C292  F0B3         	movff	_GiSeconds,?_printf+2
 11075  0116DE  C293  F0B4         	movff	_GiSeconds+1,?_printf+3
 11076  0116E2  EC00  F080         	call	_printf	;wreg free
 11077                           
 11078                           ;UART.c: 292: usart_str_1(',');
 11079  0116E6  0E2C               	movlw	44
 11080  0116E8  EC0F  F0D8         	call	_usart_str_1
 11081                           
 11082                           ;UART.c: 294: printf("%4.01f",Temprature);
 11083  0116EC  0EBE               	movlw	low STR_14
 11084  0116EE  0100               	movlb	0	; () banked
 11085  0116F0  6FB1               	movwf	printf@f& (0+255),b
 11086  0116F2  0EFF               	movlw	high STR_14
 11087  0116F4  0100               	movlb	0	; () banked
 11088  0116F6  6FB2               	movwf	(printf@f+1)& (0+255),b
 11089  0116F8  C224  F0B3         	movff	_Temprature,?_printf+2
 11090  0116FC  C225  F0B4         	movff	_Temprature+1,?_printf+3
 11091  011700  C226  F0B5         	movff	_Temprature+2,?_printf+4
 11092  011704  EC00  F080         	call	_printf	;wreg free
 11093                           
 11094                           ;UART.c: 295: usart_str_1(',');
 11095  011708  0E2C               	movlw	44
 11096  01170A  EC0F  F0D8         	call	_usart_str_1
 11097                           
 11098                           ;UART.c: 298: printf("%d",Errors1);
 11099  01170E  0EF1               	movlw	low STR_9
 11100  011710  0100               	movlb	0	; () banked
 11101  011712  6FB1               	movwf	printf@f& (0+255),b
 11102  011714  0EFF               	movlw	high STR_9
 11103  011716  0100               	movlb	0	; () banked
 11104  011718  6FB2               	movwf	(printf@f+1)& (0+255),b
 11105  01171A  C0E1  F0B3         	movff	_Errors1,?_printf+2
 11106  01171E  0100               	movlb	0	; () banked
 11107  011720  6BB4               	clrf	(?_printf+3)& (0+255),b
 11108  011722  EC00  F080         	call	_printf	;wreg free
 11109                           
 11110                           ;UART.c: 299: usart_str_1('.');
 11111  011726  0E2E               	movlw	46
 11112  011728  EC0F  F0D8         	call	_usart_str_1
 11113                           
 11114                           ;UART.c: 300: printf("%d",Errors2);
 11115  01172C  0EF1               	movlw	low STR_9
 11116  01172E  0100               	movlb	0	; () banked
 11117  011730  6FB1               	movwf	printf@f& (0+255),b
 11118  011732  0EFF               	movlw	high STR_9
 11119  011734  0100               	movlb	0	; () banked
 11120  011736  6FB2               	movwf	(printf@f+1)& (0+255),b
 11121  011738  C150  F0B3         	movff	_Errors2,?_printf+2
 11122  01173C  0100               	movlb	0	; () banked
 11123  01173E  6BB4               	clrf	(?_printf+3)& (0+255),b
 11124  011740  EC00  F080         	call	_printf	;wreg free
 11125                           
 11126                           ;UART.c: 301: usart_str_1('.');
 11127  011744  0E2E               	movlw	46
 11128  011746  EC0F  F0D8         	call	_usart_str_1
 11129                           
 11130                           ;UART.c: 302: printf("%d",Errors3);
 11131  01174A  0EF1               	movlw	low STR_9
 11132  01174C  0100               	movlb	0	; () banked
 11133  01174E  6FB1               	movwf	printf@f& (0+255),b
 11134  011750  0EFF               	movlw	high STR_9
 11135  011752  0100               	movlb	0	; () banked
 11136  011754  6FB2               	movwf	(printf@f+1)& (0+255),b
 11137  011756  C151  F0B3         	movff	_Errors3,?_printf+2
 11138  01175A  0100               	movlb	0	; () banked
 11139  01175C  6BB4               	clrf	(?_printf+3)& (0+255),b
 11140  01175E  EC00  F080         	call	_printf	;wreg free
 11141                           
 11142                           ;UART.c: 303: usart_str_1('.');
 11143  011762  0E2E               	movlw	46
 11144  011764  EC0F  F0D8         	call	_usart_str_1
 11145                           
 11146                           ;UART.c: 304: printf("%d",Errors4);
 11147  011768  0EF1               	movlw	low STR_9
 11148  01176A  0100               	movlb	0	; () banked
 11149  01176C  6FB1               	movwf	printf@f& (0+255),b
 11150  01176E  0EFF               	movlw	high STR_9
 11151  011770  0100               	movlb	0	; () banked
 11152  011772  6FB2               	movwf	(printf@f+1)& (0+255),b
 11153  011774  C152  F0B3         	movff	_Errors4,?_printf+2
 11154  011778  0100               	movlb	0	; () banked
 11155  01177A  6BB4               	clrf	(?_printf+3)& (0+255),b
 11156  01177C  EC00  F080         	call	_printf	;wreg free
 11157                           
 11158                           ;UART.c: 305: usart_str_1('.');
 11159  011780  0E2E               	movlw	46
 11160  011782  EC0F  F0D8         	call	_usart_str_1
 11161                           
 11162                           ;UART.c: 306: printf("%d",Errors5);
 11163  011786  0EF1               	movlw	low STR_9
 11164  011788  0100               	movlb	0	; () banked
 11165  01178A  6FB1               	movwf	printf@f& (0+255),b
 11166  01178C  0EFF               	movlw	high STR_9
 11167  01178E  0100               	movlb	0	; () banked
 11168  011790  6FB2               	movwf	(printf@f+1)& (0+255),b
 11169  011792  C153  F0B3         	movff	_Errors5,?_printf+2
 11170  011796  0100               	movlb	0	; () banked
 11171  011798  6BB4               	clrf	(?_printf+3)& (0+255),b
 11172  01179A  EC00  F080         	call	_printf	;wreg free
 11173                           
 11174                           ;UART.c: 307: usart_str_1(',');
 11175  01179E  0E2C               	movlw	44
 11176  0117A0  EC0F  F0D8         	call	_usart_str_1
 11177                           
 11178                           ;UART.c: 311: printf("%d",PORTD);
 11179  0117A4  0EF1               	movlw	low STR_9
 11180  0117A6  0100               	movlb	0	; () banked
 11181  0117A8  6FB1               	movwf	printf@f& (0+255),b
 11182  0117AA  0EFF               	movlw	high STR_9
 11183  0117AC  0100               	movlb	0	; () banked
 11184  0117AE  6FB2               	movwf	(printf@f+1)& (0+255),b
 11185  0117B0  CF83 F0B3          	movff	3971,?_printf+2	;volatile
 11186  0117B4  0100               	movlb	0	; () banked
 11187  0117B6  6BB4               	clrf	(?_printf+3)& (0+255),b
 11188  0117B8  EC00  F080         	call	_printf	;wreg free
 11189                           
 11190                           ;UART.c: 312: usart_str_1(',');
 11191  0117BC  0E2C               	movlw	44
 11192  0117BE  EC0F  F0D8         	call	_usart_str_1
 11193                           
 11194                           ;UART.c: 314: printf("%d",VFD_RAMP);
 11195  0117C2  0EF1               	movlw	low STR_9
 11196  0117C4  0100               	movlb	0	; () banked
 11197  0117C6  6FB1               	movwf	printf@f& (0+255),b
 11198  0117C8  0EFF               	movlw	high STR_9
 11199  0117CA  0100               	movlb	0	; () banked
 11200  0117CC  6FB2               	movwf	(printf@f+1)& (0+255),b
 11201  0117CE  C197  F0B3         	movff	_VFD_RAMP,?_printf+2
 11202  0117D2  0100               	movlb	0	; () banked
 11203  0117D4  6BB4               	clrf	(?_printf+3)& (0+255),b
 11204  0117D6  EC00  F080         	call	_printf	;wreg free
 11205                           
 11206                           ;UART.c: 315: usart_str_1(',');
 11207  0117DA  0E2C               	movlw	44
 11208  0117DC  EC0F  F0D8         	call	_usart_str_1
 11209                           
 11210                           ;UART.c: 317: printf("%d",VFD_Run_Time_Counter);
 11211  0117E0  0EF1               	movlw	low STR_9
 11212  0117E2  0100               	movlb	0	; () banked
 11213  0117E4  6FB1               	movwf	printf@f& (0+255),b
 11214  0117E6  0EFF               	movlw	high STR_9
 11215  0117E8  0100               	movlb	0	; () banked
 11216  0117EA  6FB2               	movwf	(printf@f+1)& (0+255),b
 11217  0117EC  C13E  F0B3         	movff	_VFD_Run_Time_Counter,?_printf+2
 11218  0117F0  C13F  F0B4         	movff	_VFD_Run_Time_Counter+1,?_printf+3
 11219  0117F4  EC00  F080         	call	_printf	;wreg free
 11220                           
 11221                           ;UART.c: 318: usart_str_1(',');
 11222  0117F8  0E2C               	movlw	44
 11223  0117FA  EC0F  F0D8         	call	_usart_str_1
 11224                           
 11225                           ;UART.c: 320: printf("%d",Slip_Error_Counter);
 11226  0117FE  0EF1               	movlw	low STR_9
 11227  011800  0100               	movlb	0	; () banked
 11228  011802  6FB1               	movwf	printf@f& (0+255),b
 11229  011804  0EFF               	movlw	high STR_9
 11230  011806  0100               	movlb	0	; () banked
 11231  011808  6FB2               	movwf	(printf@f+1)& (0+255),b
 11232  01180A  C17B  F0B3         	movff	_Slip_Error_Counter,?_printf+2
 11233  01180E  0100               	movlb	0	; () banked
 11234  011810  6BB4               	clrf	(?_printf+3)& (0+255),b
 11235  011812  EC00  F080         	call	_printf	;wreg free
 11236                           
 11237                           ;UART.c: 321: usart_str_1(',');
 11238  011816  0E2C               	movlw	44
 11239  011818  EC0F  F0D8         	call	_usart_str_1
 11240                           
 11241                           ;UART.c: 323: printf("%d",Slip_Error_Counter_1);
 11242  01181C  0EF1               	movlw	low STR_9
 11243  01181E  0100               	movlb	0	; () banked
 11244  011820  6FB1               	movwf	printf@f& (0+255),b
 11245  011822  0EFF               	movlw	high STR_9
 11246  011824  0100               	movlb	0	; () banked
 11247  011826  6FB2               	movwf	(printf@f+1)& (0+255),b
 11248  011828  C17C  F0B3         	movff	_Slip_Error_Counter_1,?_printf+2
 11249  01182C  0100               	movlb	0	; () banked
 11250  01182E  6BB4               	clrf	(?_printf+3)& (0+255),b
 11251  011830  EC00  F080         	call	_printf	;wreg free
 11252                           
 11253                           ;UART.c: 324: usart_str_1(',');
 11254  011834  0E2C               	movlw	44
 11255  011836  EC0F  F0D8         	call	_usart_str_1
 11256                           
 11257                           ;UART.c: 326: printf("%d",Data_1[1]);
 11258  01183A  0EF1               	movlw	low STR_9
 11259  01183C  0100               	movlb	0	; () banked
 11260  01183E  6FB1               	movwf	printf@f& (0+255),b
 11261  011840  0EFF               	movlw	high STR_9
 11262  011842  0100               	movlb	0	; () banked
 11263  011844  6FB2               	movwf	(printf@f+1)& (0+255),b
 11264  011846  C502  F0B3         	movff	_Data_1+2,?_printf+2
 11265  01184A  C503  F0B4         	movff	_Data_1+3,?_printf+3
 11266  01184E  EC00  F080         	call	_printf	;wreg free
 11267                           
 11268                           ;UART.c: 327: usart_str_1(',');
 11269  011852  0E2C               	movlw	44
 11270  011854  EC0F  F0D8         	call	_usart_str_1
 11271                           
 11272                           ;UART.c: 329: printf("%d",Data_1[7]);
 11273  011858  0EF1               	movlw	low STR_9
 11274  01185A  0100               	movlb	0	; () banked
 11275  01185C  6FB1               	movwf	printf@f& (0+255),b
 11276  01185E  0EFF               	movlw	high STR_9
 11277  011860  0100               	movlb	0	; () banked
 11278  011862  6FB2               	movwf	(printf@f+1)& (0+255),b
 11279  011864  C50E  F0B3         	movff	_Data_1+14,?_printf+2
 11280  011868  C50F  F0B4         	movff	_Data_1+15,?_printf+3
 11281  01186C  EC00  F080         	call	_printf	;wreg free
 11282                           
 11283                           ;UART.c: 330: usart_str_1(',');
 11284  011870  0E2C               	movlw	44
 11285  011872  EC0F  F0D8         	call	_usart_str_1
 11286                           
 11287                           ;UART.c: 332: printf("%d",Communication_OTP);
 11288  011876  0EF1               	movlw	low STR_9
 11289  011878  0100               	movlb	0	; () banked
 11290  01187A  6FB1               	movwf	printf@f& (0+255),b
 11291  01187C  0EFF               	movlw	high STR_9
 11292  01187E  0100               	movlb	0	; () banked
 11293  011880  6FB2               	movwf	(printf@f+1)& (0+255),b
 11294  011882  C015  F0B3         	movff	_Communication_OTP,?_printf+2
 11295  011886  0100               	movlb	0	; () banked
 11296  011888  6BB4               	clrf	(?_printf+3)& (0+255),b
 11297  01188A  EC00  F080         	call	_printf	;wreg free
 11298                           
 11299                           ;UART.c: 333: usart_str_1(',');
 11300  01188E  0E2C               	movlw	44
 11301  011890  EC0F  F0D8         	call	_usart_str_1
 11302                           
 11303                           ;UART.c: 335: printf("%d",Data_1[9]);
 11304  011894  0EF1               	movlw	low STR_9
 11305  011896  0100               	movlb	0	; () banked
 11306  011898  6FB1               	movwf	printf@f& (0+255),b
 11307  01189A  0EFF               	movlw	high STR_9
 11308  01189C  0100               	movlb	0	; () banked
 11309  01189E  6FB2               	movwf	(printf@f+1)& (0+255),b
 11310  0118A0  C512  F0B3         	movff	_Data_1+18,?_printf+2
 11311  0118A4  C513  F0B4         	movff	_Data_1+19,?_printf+3
 11312  0118A8  EC00  F080         	call	_printf	;wreg free
 11313                           
 11314                           ;UART.c: 336: usart_str_1(',');
 11315  0118AC  0E2C               	movlw	44
 11316  0118AE  EC0F  F0D8         	call	_usart_str_1
 11317                           
 11318                           ;UART.c: 338: printf("%d",Gen_EP_Err_Flag);
 11319  0118B2  0EF1               	movlw	low STR_9
 11320  0118B4  0100               	movlb	0	; () banked
 11321  0118B6  6FB1               	movwf	printf@f& (0+255),b
 11322  0118B8  0EFF               	movlw	high STR_9
 11323  0118BA  0100               	movlb	0	; () banked
 11324  0118BC  6FB2               	movwf	(printf@f+1)& (0+255),b
 11325  0118BE  C0E3  F0B3         	movff	_Gen_EP_Err_Flag,?_printf+2
 11326  0118C2  0100               	movlb	0	; () banked
 11327  0118C4  6BB4               	clrf	(?_printf+3)& (0+255),b
 11328  0118C6  EC00  F080         	call	_printf	;wreg free
 11329                           
 11330                           ;UART.c: 339: usart_str_1(',');
 11331  0118CA  0E2C               	movlw	44
 11332  0118CC  EC0F  F0D8         	call	_usart_str_1
 11333                           
 11334                           ;UART.c: 341: printf("%d",Pitch_EP_Err_Flag);
 11335  0118D0  0EF1               	movlw	low STR_9
 11336  0118D2  0100               	movlb	0	; () banked
 11337  0118D4  6FB1               	movwf	printf@f& (0+255),b
 11338  0118D6  0EFF               	movlw	high STR_9
 11339  0118D8  0100               	movlb	0	; () banked
 11340  0118DA  6FB2               	movwf	(printf@f+1)& (0+255),b
 11341  0118DC  C0E7  F0B3         	movff	_Pitch_EP_Err_Flag,?_printf+2
 11342  0118E0  0100               	movlb	0	; () banked
 11343  0118E2  6BB4               	clrf	(?_printf+3)& (0+255),b
 11344  0118E4  EC00  F080         	call	_printf	;wreg free
 11345                           
 11346                           ;UART.c: 342: usart_str_1(',');
 11347  0118E8  0E2C               	movlw	44
 11348  0118EA  EC0F  F0D8         	call	_usart_str_1
 11349                           
 11350                           ;UART.c: 344: printf("%d",Total_Min);
 11351  0118EE  0EF1               	movlw	low STR_9
 11352  0118F0  0100               	movlb	0	; () banked
 11353  0118F2  6FB1               	movwf	printf@f& (0+255),b
 11354  0118F4  0EFF               	movlw	high STR_9
 11355  0118F6  0100               	movlb	0	; () banked
 11356  0118F8  6FB2               	movwf	(printf@f+1)& (0+255),b
 11357  0118FA  C188  F0B3         	movff	_Total_Min,?_printf+2
 11358  0118FE  0100               	movlb	0	; () banked
 11359  011900  6BB4               	clrf	(?_printf+3)& (0+255),b
 11360  011902  EC00  F080         	call	_printf	;wreg free
 11361                           
 11362                           ;UART.c: 345: usart_str_1(',');
 11363  011906  0E2C               	movlw	44
 11364  011908  EC0F  F0D8         	call	_usart_str_1
 11365                           
 11366                           ;UART.c: 347: printf("%d",EEPROM_Error_Flag);
 11367  01190C  0EF1               	movlw	low STR_9
 11368  01190E  0100               	movlb	0	; () banked
 11369  011910  6FB1               	movwf	printf@f& (0+255),b
 11370  011912  0EFF               	movlw	high STR_9
 11371  011914  0100               	movlb	0	; () banked
 11372  011916  6FB2               	movwf	(printf@f+1)& (0+255),b
 11373  011918  C017  F0B3         	movff	_EEPROM_Error_Flag,?_printf+2
 11374  01191C  0100               	movlb	0	; () banked
 11375  01191E  6BB4               	clrf	(?_printf+3)& (0+255),b
 11376  011920  EC00  F080         	call	_printf	;wreg free
 11377                           
 11378                           ;UART.c: 348: usart_str_1(',');
 11379  011924  0E2C               	movlw	44
 11380  011926  EC0F  F0D8         	call	_usart_str_1
 11381                           
 11382                           ;UART.c: 351: printf("%d",EP_Errors1);
 11383  01192A  0EF1               	movlw	low STR_9
 11384  01192C  0100               	movlb	0	; () banked
 11385  01192E  6FB1               	movwf	printf@f& (0+255),b
 11386  011930  0EFF               	movlw	high STR_9
 11387  011932  0100               	movlb	0	; () banked
 11388  011934  6FB2               	movwf	(printf@f+1)& (0+255),b
 11389  011936  C018  F0B3         	movff	_EP_Errors1,?_printf+2
 11390  01193A  0100               	movlb	0	; () banked
 11391  01193C  6BB4               	clrf	(?_printf+3)& (0+255),b
 11392  01193E  EC00  F080         	call	_printf	;wreg free
 11393                           
 11394                           ;UART.c: 352: usart_str_1('.');
 11395  011942  0E2E               	movlw	46
 11396  011944  EC0F  F0D8         	call	_usart_str_1
 11397                           
 11398                           ;UART.c: 353: printf("%d",EP_Errors2);
 11399  011948  0EF1               	movlw	low STR_9
 11400  01194A  0100               	movlb	0	; () banked
 11401  01194C  6FB1               	movwf	printf@f& (0+255),b
 11402  01194E  0EFF               	movlw	high STR_9
 11403  011950  0100               	movlb	0	; () banked
 11404  011952  6FB2               	movwf	(printf@f+1)& (0+255),b
 11405  011954  C019  F0B3         	movff	_EP_Errors2,?_printf+2
 11406  011958  0100               	movlb	0	; () banked
 11407  01195A  6BB4               	clrf	(?_printf+3)& (0+255),b
 11408  01195C  EC00  F080         	call	_printf	;wreg free
 11409                           
 11410                           ;UART.c: 354: usart_str_1('.');
 11411  011960  0E2E               	movlw	46
 11412  011962  EC0F  F0D8         	call	_usart_str_1
 11413                           
 11414                           ;UART.c: 355: printf("%d",EP_Errors3);
 11415  011966  0EF1               	movlw	low STR_9
 11416  011968  0100               	movlb	0	; () banked
 11417  01196A  6FB1               	movwf	printf@f& (0+255),b
 11418  01196C  0EFF               	movlw	high STR_9
 11419  01196E  0100               	movlb	0	; () banked
 11420  011970  6FB2               	movwf	(printf@f+1)& (0+255),b
 11421  011972  C01A  F0B3         	movff	_EP_Errors3,?_printf+2
 11422  011976  0100               	movlb	0	; () banked
 11423  011978  6BB4               	clrf	(?_printf+3)& (0+255),b
 11424  01197A  EC00  F080         	call	_printf	;wreg free
 11425                           
 11426                           ;UART.c: 356: usart_str_1(',');
 11427  01197E  0E2C               	movlw	44
 11428  011980  EC0F  F0D8         	call	_usart_str_1
 11429                           
 11430                           ;UART.c: 358: printf("%d",Start_Stop_Flag);
 11431  011984  0EF1               	movlw	low STR_9
 11432  011986  0100               	movlb	0	; () banked
 11433  011988  6FB1               	movwf	printf@f& (0+255),b
 11434  01198A  0EFF               	movlw	high STR_9
 11435  01198C  0100               	movlb	0	; () banked
 11436  01198E  6FB2               	movwf	(printf@f+1)& (0+255),b
 11437  011990  C01F  F0B3         	movff	_Start_Stop_Flag,?_printf+2
 11438  011994  0100               	movlb	0	; () banked
 11439  011996  6BB4               	clrf	(?_printf+3)& (0+255),b
 11440  011998  EC00  F080         	call	_printf	;wreg free
 11441                           
 11442                           ;UART.c: 361: usart_str("\r");
 11443  01199C  0EFC               	movlw	low STR_119
 11444  01199E  0100               	movlb	0	; () banked
 11445  0119A0  6F60               	movwf	usart_str@str& (0+255),b
 11446  0119A2  0EFF               	movlw	high STR_119
 11447  0119A4  0100               	movlb	0	; () banked
 11448  0119A6  6F61               	movwf	(usart_str@str+1)& (0+255),b
 11449  0119A8  EC23  F0D6         	call	_usart_str	;wreg free
 11450                           
 11451                           ;UART.c: 362: usart_str("\n");
 11452  0119AC  0EFA               	movlw	low STR_120
 11453  0119AE  0100               	movlb	0	; () banked
 11454  0119B0  6F60               	movwf	usart_str@str& (0+255),b
 11455  0119B2  0EFF               	movlw	high STR_120
 11456  0119B4  0100               	movlb	0	; () banked
 11457  0119B6  6F61               	movwf	(usart_str@str+1)& (0+255),b
 11458  0119B8  EC23  F0D6         	call	_usart_str	;wreg free
 11459  0119BC  0012               	return		;funcret
 11460  0119BE                     __end_of_UART_Data:
 11461                           	opt stack 0
 11462                           tblptru	equ	0xFF8
 11463                           tblptrh	equ	0xFF7
 11464                           tblptrl	equ	0xFF6
 11465                           tablat	equ	0xFF5
 11466                           intcon	equ	0xFF2
 11467                           postinc0	equ	0xFEE
 11468                           wreg	equ	0xFE8
 11469                           postdec1	equ	0xFE5
 11470                           fsr1h	equ	0xFE2
 11471                           fsr1l	equ	0xFE1
 11472                           status	equ	0xFD8
 11473                           
 11474 ;; *************** function _UART_Data_String *****************
 11475 ;; Defined at:
 11476 ;;		line 364 in file "UART.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;		None
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;		None
 11481 ;; Return value:  Size  Location     Type
 11482 ;;                  1    wreg      void 
 11483 ;; Registers used:
 11484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11485 ;; Tracked objects:
 11486 ;;		On entry : 0/0
 11487 ;;		On exit  : 0/0
 11488 ;;		Unchanged: 0/0
 11489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;Total ram usage:        0 bytes
 11495 ;; Hardware stack levels used:    1
 11496 ;; Hardware stack levels required when called:    7
 11497 ;; This function calls:
 11498 ;;		_printf
 11499 ;;		_usart_str
 11500 ;;		_usart_str_1
 11501 ;; This function is called by:
 11502 ;;		_UART_Data
 11503 ;; This function uses a non-reentrant model
 11504 ;;
 11505                           
 11506                           	psect	text20
 11507  013140                     __ptext20:
 11508                           	opt stack 0
 11509  013140                     _UART_Data_String:
 11510                           	opt stack 21
 11511                           
 11512                           ;UART.c: 366: usart_str("\r");
 11513                           
 11514                           ;incstack = 0
 11515  013140  0EFC               	movlw	low STR_119
 11516  013142  0100               	movlb	0	; () banked
 11517  013144  6F60               	movwf	usart_str@str& (0+255),b
 11518  013146  0EFF               	movlw	high STR_119
 11519  013148  0100               	movlb	0	; () banked
 11520  01314A  6F61               	movwf	(usart_str@str+1)& (0+255),b
 11521  01314C  EC23  F0D6         	call	_usart_str	;wreg free
 11522                           
 11523                           ;UART.c: 367: usart_str("\n");
 11524  013150  0EFA               	movlw	low STR_120
 11525  013152  0100               	movlb	0	; () banked
 11526  013154  6F60               	movwf	usart_str@str& (0+255),b
 11527  013156  0EFF               	movlw	high STR_120
 11528  013158  0100               	movlb	0	; () banked
 11529  01315A  6F61               	movwf	(usart_str@str+1)& (0+255),b
 11530  01315C  EC23  F0D6         	call	_usart_str	;wreg free
 11531                           
 11532                           ;UART.c: 369: printf("%s","Serial No");
 11533  013160  0EF4               	movlw	low STR_2
 11534  013162  0100               	movlb	0	; () banked
 11535  013164  6FB1               	movwf	printf@f& (0+255),b
 11536  013166  0EFF               	movlw	high STR_2
 11537  013168  0100               	movlb	0	; () banked
 11538  01316A  6FB2               	movwf	(printf@f+1)& (0+255),b
 11539  01316C  0E26               	movlw	low STR_124
 11540  01316E  0100               	movlb	0	; () banked
 11541  013170  6FB3               	movwf	(?_printf+2)& (0+255),b
 11542  013172  0EFF               	movlw	high STR_124
 11543  013174  0100               	movlb	0	; () banked
 11544  013176  6FB4               	movwf	(?_printf+3)& (0+255),b
 11545  013178  EC00  F080         	call	_printf	;wreg free
 11546                           
 11547                           ;UART.c: 370: usart_str_1(',');
 11548  01317C  0E2C               	movlw	44
 11549  01317E  EC0F  F0D8         	call	_usart_str_1
 11550                           
 11551                           ;UART.c: 372: printf("%s","TURBINE ID");
 11552  013182  0EF4               	movlw	low STR_2
 11553  013184  0100               	movlb	0	; () banked
 11554  013186  6FB1               	movwf	printf@f& (0+255),b
 11555  013188  0EFF               	movlw	high STR_2
 11556  01318A  0100               	movlb	0	; () banked
 11557  01318C  6FB2               	movwf	(printf@f+1)& (0+255),b
 11558  01318E  0E40               	movlw	low STR_126
 11559  013190  0100               	movlb	0	; () banked
 11560  013192  6FB3               	movwf	(?_printf+2)& (0+255),b
 11561  013194  0EFE               	movlw	high STR_126
 11562  013196  0100               	movlb	0	; () banked
 11563  013198  6FB4               	movwf	(?_printf+3)& (0+255),b
 11564  01319A  EC00  F080         	call	_printf	;wreg free
 11565                           
 11566                           ;UART.c: 373: usart_str_1(',');
 11567  01319E  0E2C               	movlw	44
 11568  0131A0  EC0F  F0D8         	call	_usart_str_1
 11569                           
 11570                           ;UART.c: 375: printf("%s","WIND_INSTANT");
 11571  0131A4  0EF4               	movlw	low STR_2
 11572  0131A6  0100               	movlb	0	; () banked
 11573  0131A8  6FB1               	movwf	printf@f& (0+255),b
 11574  0131AA  0EFF               	movlw	high STR_2
 11575  0131AC  0100               	movlb	0	; () banked
 11576  0131AE  6FB2               	movwf	(printf@f+1)& (0+255),b
 11577  0131B0  0EF6               	movlw	low STR_128
 11578  0131B2  0100               	movlb	0	; () banked
 11579  0131B4  6FB3               	movwf	(?_printf+2)& (0+255),b
 11580  0131B6  0EFD               	movlw	high STR_128
 11581  0131B8  0100               	movlb	0	; () banked
 11582  0131BA  6FB4               	movwf	(?_printf+3)& (0+255),b
 11583  0131BC  EC00  F080         	call	_printf	;wreg free
 11584                           
 11585                           ;UART.c: 376: usart_str_1(',');
 11586  0131C0  0E2C               	movlw	44
 11587  0131C2  EC0F  F0D8         	call	_usart_str_1
 11588                           
 11589                           ;UART.c: 378: printf("%s","WIND AVG");
 11590  0131C6  0EF4               	movlw	low STR_2
 11591  0131C8  0100               	movlb	0	; () banked
 11592  0131CA  6FB1               	movwf	printf@f& (0+255),b
 11593  0131CC  0EFF               	movlw	high STR_2
 11594  0131CE  0100               	movlb	0	; () banked
 11595  0131D0  6FB2               	movwf	(printf@f+1)& (0+255),b
 11596  0131D2  0E42               	movlw	low STR_130
 11597  0131D4  0100               	movlb	0	; () banked
 11598  0131D6  6FB3               	movwf	(?_printf+2)& (0+255),b
 11599  0131D8  0EFF               	movlw	high STR_130
 11600  0131DA  0100               	movlb	0	; () banked
 11601  0131DC  6FB4               	movwf	(?_printf+3)& (0+255),b
 11602  0131DE  EC00  F080         	call	_printf	;wreg free
 11603                           
 11604                           ;UART.c: 379: usart_str_1(',');
 11605  0131E2  0E2C               	movlw	44
 11606  0131E4  EC0F  F0D8         	call	_usart_str_1
 11607                           
 11608                           ;UART.c: 381: printf("%s","WIND 2 INSTANT");
 11609  0131E8  0EF4               	movlw	low STR_2
 11610  0131EA  0100               	movlb	0	; () banked
 11611  0131EC  6FB1               	movwf	printf@f& (0+255),b
 11612  0131EE  0EFF               	movlw	high STR_2
 11613  0131F0  0100               	movlb	0	; () banked
 11614  0131F2  6FB2               	movwf	(printf@f+1)& (0+255),b
 11615  0131F4  0E6B               	movlw	low STR_132
 11616  0131F6  0100               	movlb	0	; () banked
 11617  0131F8  6FB3               	movwf	(?_printf+2)& (0+255),b
 11618  0131FA  0EFD               	movlw	high STR_132
 11619  0131FC  0100               	movlb	0	; () banked
 11620  0131FE  6FB4               	movwf	(?_printf+3)& (0+255),b
 11621  013200  EC00  F080         	call	_printf	;wreg free
 11622                           
 11623                           ;UART.c: 382: usart_str_1(',');
 11624  013204  0E2C               	movlw	44
 11625  013206  EC0F  F0D8         	call	_usart_str_1
 11626                           
 11627                           ;UART.c: 384: printf("%s","WIND 2 AVG");
 11628  01320A  0EF4               	movlw	low STR_2
 11629  01320C  0100               	movlb	0	; () banked
 11630  01320E  6FB1               	movwf	printf@f& (0+255),b
 11631  013210  0EFF               	movlw	high STR_2
 11632  013212  0100               	movlb	0	; () banked
 11633  013214  6FB2               	movwf	(printf@f+1)& (0+255),b
 11634  013216  0E4B               	movlw	low STR_134
 11635  013218  0100               	movlb	0	; () banked
 11636  01321A  6FB3               	movwf	(?_printf+2)& (0+255),b
 11637  01321C  0EFE               	movlw	high STR_134
 11638  01321E  0100               	movlb	0	; () banked
 11639  013220  6FB4               	movwf	(?_printf+3)& (0+255),b
 11640  013222  EC00  F080         	call	_printf	;wreg free
 11641                           
 11642                           ;UART.c: 385: usart_str_1(',');
 11643  013226  0E2C               	movlw	44
 11644  013228  EC0F  F0D8         	call	_usart_str_1
 11645                           
 11646                           ;UART.c: 387: printf("%s","TURBINE RPM");
 11647  01322C  0EF4               	movlw	low STR_2
 11648  01322E  0100               	movlb	0	; () banked
 11649  013230  6FB1               	movwf	printf@f& (0+255),b
 11650  013232  0EFF               	movlw	high STR_2
 11651  013234  0100               	movlb	0	; () banked
 11652  013236  6FB2               	movwf	(printf@f+1)& (0+255),b
 11653  013238  0E28               	movlw	low STR_136
 11654  01323A  0100               	movlb	0	; () banked
 11655  01323C  6FB3               	movwf	(?_printf+2)& (0+255),b
 11656  01323E  0EFE               	movlw	high STR_136
 11657  013240  0100               	movlb	0	; () banked
 11658  013242  6FB4               	movwf	(?_printf+3)& (0+255),b
 11659  013244  EC00  F080         	call	_printf	;wreg free
 11660                           
 11661                           ;UART.c: 388: usart_str_1(',');
 11662  013248  0E2C               	movlw	44
 11663  01324A  EC0F  F0D8         	call	_usart_str_1
 11664                           
 11665                           ;UART.c: 390: printf("%s","GENERATOR RPM");
 11666  01324E  0EF4               	movlw	low STR_2
 11667  013250  0100               	movlb	0	; () banked
 11668  013252  6FB1               	movwf	printf@f& (0+255),b
 11669  013254  0EFF               	movlw	high STR_2
 11670  013256  0100               	movlb	0	; () banked
 11671  013258  6FB2               	movwf	(printf@f+1)& (0+255),b
 11672  01325A  0E97               	movlw	low STR_138
 11673  01325C  0100               	movlb	0	; () banked
 11674  01325E  6FB3               	movwf	(?_printf+2)& (0+255),b
 11675  013260  0EFD               	movlw	high STR_138
 11676  013262  0100               	movlb	0	; () banked
 11677  013264  6FB4               	movwf	(?_printf+3)& (0+255),b
 11678  013266  EC00  F080         	call	_printf	;wreg free
 11679                           
 11680                           ;UART.c: 391: usart_str_1(',');
 11681  01326A  0E2C               	movlw	44
 11682  01326C  EC0F  F0D8         	call	_usart_str_1
 11683                           
 11684                           ;UART.c: 393: printf("%s","MOTOR SLIP RPM");
 11685  013270  0EF4               	movlw	low STR_2
 11686  013272  0100               	movlb	0	; () banked
 11687  013274  6FB1               	movwf	printf@f& (0+255),b
 11688  013276  0EFF               	movlw	high STR_2
 11689  013278  0100               	movlb	0	; () banked
 11690  01327A  6FB2               	movwf	(printf@f+1)& (0+255),b
 11691  01327C  0E3E               	movlw	low STR_140
 11692  01327E  0100               	movlb	0	; () banked
 11693  013280  6FB3               	movwf	(?_printf+2)& (0+255),b
 11694  013282  0EFD               	movlw	high STR_140
 11695  013284  0100               	movlb	0	; () banked
 11696  013286  6FB4               	movwf	(?_printf+3)& (0+255),b
 11697  013288  EC00  F080         	call	_printf	;wreg free
 11698                           
 11699                           ;UART.c: 394: usart_str_1(',');
 11700  01328C  0E2C               	movlw	44
 11701  01328E  EC0F  F0D8         	call	_usart_str_1
 11702                           
 11703                           ;UART.c: 396: printf("%s","ROTOR SLIP RPM");
 11704  013292  0EF4               	movlw	low STR_2
 11705  013294  0100               	movlb	0	; () banked
 11706  013296  6FB1               	movwf	printf@f& (0+255),b
 11707  013298  0EFF               	movlw	high STR_2
 11708  01329A  0100               	movlb	0	; () banked
 11709  01329C  6FB2               	movwf	(printf@f+1)& (0+255),b
 11710  01329E  0E4D               	movlw	low STR_142
 11711  0132A0  0100               	movlb	0	; () banked
 11712  0132A2  6FB3               	movwf	(?_printf+2)& (0+255),b
 11713  0132A4  0EFD               	movlw	high STR_142
 11714  0132A6  0100               	movlb	0	; () banked
 11715  0132A8  6FB4               	movwf	(?_printf+3)& (0+255),b
 11716  0132AA  EC00  F080         	call	_printf	;wreg free
 11717                           
 11718                           ;UART.c: 397: usart_str_1(',');
 11719  0132AE  0E2C               	movlw	44
 11720  0132B0  EC0F  F0D8         	call	_usart_str_1
 11721                           
 11722                           ;UART.c: 399: printf("%s","VFD Hz");
 11723  0132B4  0EF4               	movlw	low STR_2
 11724  0132B6  0100               	movlb	0	; () banked
 11725  0132B8  6FB1               	movwf	printf@f& (0+255),b
 11726  0132BA  0EFF               	movlw	high STR_2
 11727  0132BC  0100               	movlb	0	; () banked
 11728  0132BE  6FB2               	movwf	(printf@f+1)& (0+255),b
 11729  0132C0  0ECC               	movlw	low STR_144
 11730  0132C2  0100               	movlb	0	; () banked
 11731  0132C4  6FB3               	movwf	(?_printf+2)& (0+255),b
 11732  0132C6  0EFF               	movlw	high STR_144
 11733  0132C8  0100               	movlb	0	; () banked
 11734  0132CA  6FB4               	movwf	(?_printf+3)& (0+255),b
 11735  0132CC  EC00  F080         	call	_printf	;wreg free
 11736                           
 11737                           ;UART.c: 400: usart_str_1(',');
 11738  0132D0  0E2C               	movlw	44
 11739  0132D2  EC0F  F0D8         	call	_usart_str_1
 11740                           
 11741                           ;UART.c: 402: printf("%s","DC BUS VOLTAGE");
 11742  0132D6  0EF4               	movlw	low STR_2
 11743  0132D8  0100               	movlb	0	; () banked
 11744  0132DA  6FB1               	movwf	printf@f& (0+255),b
 11745  0132DC  0EFF               	movlw	high STR_2
 11746  0132DE  0100               	movlb	0	; () banked
 11747  0132E0  6FB2               	movwf	(printf@f+1)& (0+255),b
 11748  0132E2  0E2F               	movlw	low STR_146
 11749  0132E4  0100               	movlb	0	; () banked
 11750  0132E6  6FB3               	movwf	(?_printf+2)& (0+255),b
 11751  0132E8  0EFD               	movlw	high STR_146
 11752  0132EA  0100               	movlb	0	; () banked
 11753  0132EC  6FB4               	movwf	(?_printf+3)& (0+255),b
 11754  0132EE  EC00  F080         	call	_printf	;wreg free
 11755                           
 11756                           ;UART.c: 403: usart_str_1(',');
 11757  0132F2  0E2C               	movlw	44
 11758  0132F4  EC0F  F0D8         	call	_usart_str_1
 11759                           
 11760                           ;UART.c: 405: printf("%s","DC BUS CURRENT");
 11761  0132F8  0EF4               	movlw	low STR_2
 11762  0132FA  0100               	movlb	0	; () banked
 11763  0132FC  6FB1               	movwf	printf@f& (0+255),b
 11764  0132FE  0EFF               	movlw	high STR_2
 11765  013300  0100               	movlb	0	; () banked
 11766  013302  6FB2               	movwf	(printf@f+1)& (0+255),b
 11767  013304  0E7A               	movlw	low STR_148
 11768  013306  0100               	movlb	0	; () banked
 11769  013308  6FB3               	movwf	(?_printf+2)& (0+255),b
 11770  01330A  0EFD               	movlw	high STR_148
 11771  01330C  0100               	movlb	0	; () banked
 11772  01330E  6FB4               	movwf	(?_printf+3)& (0+255),b
 11773  013310  EC00  F080         	call	_printf	;wreg free
 11774                           
 11775                           ;UART.c: 406: usart_str_1(',');
 11776  013314  0E2C               	movlw	44
 11777  013316  EC0F  F0D8         	call	_usart_str_1
 11778                           
 11779                           ;UART.c: 408: printf("%s","R VOLT");
 11780  01331A  0EF4               	movlw	low STR_2
 11781  01331C  0100               	movlb	0	; () banked
 11782  01331E  6FB1               	movwf	printf@f& (0+255),b
 11783  013320  0EFF               	movlw	high STR_2
 11784  013322  0100               	movlb	0	; () banked
 11785  013324  6FB2               	movwf	(printf@f+1)& (0+255),b
 11786  013326  0EB0               	movlw	low STR_150
 11787  013328  0100               	movlb	0	; () banked
 11788  01332A  6FB3               	movwf	(?_printf+2)& (0+255),b
 11789  01332C  0EFF               	movlw	high STR_150
 11790  01332E  0100               	movlb	0	; () banked
 11791  013330  6FB4               	movwf	(?_printf+3)& (0+255),b
 11792  013332  EC00  F080         	call	_printf	;wreg free
 11793                           
 11794                           ;UART.c: 409: usart_str_1(',');
 11795  013336  0E2C               	movlw	44
 11796  013338  EC0F  F0D8         	call	_usart_str_1
 11797                           
 11798                           ;UART.c: 411: printf("%s","Y VOLT");
 11799  01333C  0EF4               	movlw	low STR_2
 11800  01333E  0100               	movlb	0	; () banked
 11801  013340  6FB1               	movwf	printf@f& (0+255),b
 11802  013342  0EFF               	movlw	high STR_2
 11803  013344  0100               	movlb	0	; () banked
 11804  013346  6FB2               	movwf	(printf@f+1)& (0+255),b
 11805  013348  0EB7               	movlw	low STR_152
 11806  01334A  0100               	movlb	0	; () banked
 11807  01334C  6FB3               	movwf	(?_printf+2)& (0+255),b
 11808  01334E  0EFF               	movlw	high STR_152
 11809  013350  0100               	movlb	0	; () banked
 11810  013352  6FB4               	movwf	(?_printf+3)& (0+255),b
 11811  013354  EC00  F080         	call	_printf	;wreg free
 11812                           
 11813                           ;UART.c: 412: usart_str_1(',');
 11814  013358  0E2C               	movlw	44
 11815  01335A  EC0F  F0D8         	call	_usart_str_1
 11816                           
 11817                           ;UART.c: 414: printf("%s","B VOLT");
 11818  01335E  0EF4               	movlw	low STR_2
 11819  013360  0100               	movlb	0	; () banked
 11820  013362  6FB1               	movwf	printf@f& (0+255),b
 11821  013364  0EFF               	movlw	high STR_2
 11822  013366  0100               	movlb	0	; () banked
 11823  013368  6FB2               	movwf	(printf@f+1)& (0+255),b
 11824  01336A  0EA9               	movlw	low STR_154
 11825  01336C  0100               	movlb	0	; () banked
 11826  01336E  6FB3               	movwf	(?_printf+2)& (0+255),b
 11827  013370  0EFF               	movlw	high STR_154
 11828  013372  0100               	movlb	0	; () banked
 11829  013374  6FB4               	movwf	(?_printf+3)& (0+255),b
 11830  013376  EC00  F080         	call	_printf	;wreg free
 11831                           
 11832                           ;UART.c: 415: usart_str_1(',');
 11833  01337A  0E2C               	movlw	44
 11834  01337C  EC0F  F0D8         	call	_usart_str_1
 11835                           
 11836                           ;UART.c: 417: printf("%s","R CURRENT");
 11837  013380  0EF4               	movlw	low STR_2
 11838  013382  0100               	movlb	0	; () banked
 11839  013384  6FB1               	movwf	printf@f& (0+255),b
 11840  013386  0EFF               	movlw	high STR_2
 11841  013388  0100               	movlb	0	; () banked
 11842  01338A  6FB2               	movwf	(printf@f+1)& (0+255),b
 11843  01338C  0EFE               	movlw	low STR_156
 11844  01338E  0100               	movlb	0	; () banked
 11845  013390  6FB3               	movwf	(?_printf+2)& (0+255),b
 11846  013392  0EFE               	movlw	high STR_156
 11847  013394  0100               	movlb	0	; () banked
 11848  013396  6FB4               	movwf	(?_printf+3)& (0+255),b
 11849  013398  EC00  F080         	call	_printf	;wreg free
 11850                           
 11851                           ;UART.c: 418: usart_str_1(',');
 11852  01339C  0E2C               	movlw	44
 11853  01339E  EC0F  F0D8         	call	_usart_str_1
 11854                           
 11855                           ;UART.c: 420: printf("%s","Y CURRENT");
 11856  0133A2  0EF4               	movlw	low STR_2
 11857  0133A4  0100               	movlb	0	; () banked
 11858  0133A6  6FB1               	movwf	printf@f& (0+255),b
 11859  0133A8  0EFF               	movlw	high STR_2
 11860  0133AA  0100               	movlb	0	; () banked
 11861  0133AC  6FB2               	movwf	(printf@f+1)& (0+255),b
 11862  0133AE  0E08               	movlw	low STR_158
 11863  0133B0  0100               	movlb	0	; () banked
 11864  0133B2  6FB3               	movwf	(?_printf+2)& (0+255),b
 11865  0133B4  0EFF               	movlw	high STR_158
 11866  0133B6  0100               	movlb	0	; () banked
 11867  0133B8  6FB4               	movwf	(?_printf+3)& (0+255),b
 11868  0133BA  EC00  F080         	call	_printf	;wreg free
 11869                           
 11870                           ;UART.c: 421: usart_str_1(',');
 11871  0133BE  0E2C               	movlw	44
 11872  0133C0  EC0F  F0D8         	call	_usart_str_1
 11873                           
 11874                           ;UART.c: 423: printf("%s","B CURRENT");
 11875  0133C4  0EF4               	movlw	low STR_2
 11876  0133C6  0100               	movlb	0	; () banked
 11877  0133C8  6FB1               	movwf	printf@f& (0+255),b
 11878  0133CA  0EFF               	movlw	high STR_2
 11879  0133CC  0100               	movlb	0	; () banked
 11880  0133CE  6FB2               	movwf	(printf@f+1)& (0+255),b
 11881  0133D0  0EF4               	movlw	low STR_160
 11882  0133D2  0100               	movlb	0	; () banked
 11883  0133D4  6FB3               	movwf	(?_printf+2)& (0+255),b
 11884  0133D6  0EFE               	movlw	high STR_160
 11885  0133D8  0100               	movlb	0	; () banked
 11886  0133DA  6FB4               	movwf	(?_printf+3)& (0+255),b
 11887  0133DC  EC00  F080         	call	_printf	;wreg free
 11888                           
 11889                           ;UART.c: 424: usart_str_1(',');
 11890  0133E0  0E2C               	movlw	44
 11891  0133E2  EC0F  F0D8         	call	_usart_str_1
 11892                           
 11893                           ;UART.c: 426: printf("%s","KW");
 11894  0133E6  0EF4               	movlw	low STR_2
 11895  0133E8  0100               	movlb	0	; () banked
 11896  0133EA  6FB1               	movwf	printf@f& (0+255),b
 11897  0133EC  0EFF               	movlw	high STR_2
 11898  0133EE  0100               	movlb	0	; () banked
 11899  0133F0  6FB2               	movwf	(printf@f+1)& (0+255),b
 11900  0133F2  0EEA               	movlw	low (STR_164+2)
 11901  0133F4  0100               	movlb	0	; () banked
 11902  0133F6  6FB3               	movwf	(?_printf+2)& (0+255),b
 11903  0133F8  0EFF               	movlw	high (STR_164+2)
 11904  0133FA  0100               	movlb	0	; () banked
 11905  0133FC  6FB4               	movwf	(?_printf+3)& (0+255),b
 11906  0133FE  EC00  F080         	call	_printf	;wreg free
 11907                           
 11908                           ;UART.c: 427: usart_str_1(',');
 11909  013402  0E2C               	movlw	44
 11910  013404  EC0F  F0D8         	call	_usart_str_1
 11911                           
 11912                           ;UART.c: 429: printf("%s","Y-KW");
 11913  013408  0EF4               	movlw	low STR_2
 11914  01340A  0100               	movlb	0	; () banked
 11915  01340C  6FB1               	movwf	printf@f& (0+255),b
 11916  01340E  0EFF               	movlw	high STR_2
 11917  013410  0100               	movlb	0	; () banked
 11918  013412  6FB2               	movwf	(printf@f+1)& (0+255),b
 11919  013414  0EE8               	movlw	low STR_164
 11920  013416  0100               	movlb	0	; () banked
 11921  013418  6FB3               	movwf	(?_printf+2)& (0+255),b
 11922  01341A  0EFF               	movlw	high STR_164
 11923  01341C  0100               	movlb	0	; () banked
 11924  01341E  6FB4               	movwf	(?_printf+3)& (0+255),b
 11925  013420  EC00  F080         	call	_printf	;wreg free
 11926                           
 11927                           ;UART.c: 430: usart_str_1(',');
 11928  013424  0E2C               	movlw	44
 11929  013426  EC0F  F0D8         	call	_usart_str_1
 11930                           
 11931                           ;UART.c: 432: printf("%s","KVA");
 11932  01342A  0EF4               	movlw	low STR_2
 11933  01342C  0100               	movlb	0	; () banked
 11934  01342E  6FB1               	movwf	printf@f& (0+255),b
 11935  013430  0EFF               	movlw	high STR_2
 11936  013432  0100               	movlb	0	; () banked
 11937  013434  6FB2               	movwf	(printf@f+1)& (0+255),b
 11938  013436  0EED               	movlw	low STR_166
 11939  013438  0100               	movlb	0	; () banked
 11940  01343A  6FB3               	movwf	(?_printf+2)& (0+255),b
 11941  01343C  0EFF               	movlw	high STR_166
 11942  01343E  0100               	movlb	0	; () banked
 11943  013440  6FB4               	movwf	(?_printf+3)& (0+255),b
 11944  013442  EC00  F080         	call	_printf	;wreg free
 11945                           
 11946                           ;UART.c: 433: usart_str_1(',');
 11947  013446  0E2C               	movlw	44
 11948  013448  EC0F  F0D8         	call	_usart_str_1
 11949                           
 11950                           ;UART.c: 435: printf("%s","KVAR");
 11951  01344C  0EF4               	movlw	low STR_2
 11952  01344E  0100               	movlb	0	; () banked
 11953  013450  6FB1               	movwf	printf@f& (0+255),b
 11954  013452  0EFF               	movlw	high STR_2
 11955  013454  0100               	movlb	0	; () banked
 11956  013456  6FB2               	movwf	(printf@f+1)& (0+255),b
 11957  013458  0EE3               	movlw	low STR_168
 11958  01345A  0100               	movlb	0	; () banked
 11959  01345C  6FB3               	movwf	(?_printf+2)& (0+255),b
 11960  01345E  0EFF               	movlw	high STR_168
 11961  013460  0100               	movlb	0	; () banked
 11962  013462  6FB4               	movwf	(?_printf+3)& (0+255),b
 11963  013464  EC00  F080         	call	_printf	;wreg free
 11964                           
 11965                           ;UART.c: 436: usart_str_1(',');
 11966  013468  0E2C               	movlw	44
 11967  01346A  EC0F  F0D8         	call	_usart_str_1
 11968                           
 11969                           ;UART.c: 438: printf("%s","POWER FACTOR");
 11970  01346E  0EF4               	movlw	low STR_2
 11971  013470  0100               	movlb	0	; () banked
 11972  013472  6FB1               	movwf	printf@f& (0+255),b
 11973  013474  0EFF               	movlw	high STR_2
 11974  013476  0100               	movlb	0	; () banked
 11975  013478  6FB2               	movwf	(printf@f+1)& (0+255),b
 11976  01347A  0E5E               	movlw	low (STR_172+2)
 11977  01347C  0100               	movlb	0	; () banked
 11978  01347E  6FB3               	movwf	(?_printf+2)& (0+255),b
 11979  013480  0EFD               	movlw	high (STR_172+2)
 11980  013482  0100               	movlb	0	; () banked
 11981  013484  6FB4               	movwf	(?_printf+3)& (0+255),b
 11982  013486  EC00  F080         	call	_printf	;wreg free
 11983                           
 11984                           ;UART.c: 439: usart_str_1(',');
 11985  01348A  0E2C               	movlw	44
 11986  01348C  EC0F  F0D8         	call	_usart_str_1
 11987                           
 11988                           ;UART.c: 441: printf("%s","Y-POWER FACTOR");
 11989  013490  0EF4               	movlw	low STR_2
 11990  013492  0100               	movlb	0	; () banked
 11991  013494  6FB1               	movwf	printf@f& (0+255),b
 11992  013496  0EFF               	movlw	high STR_2
 11993  013498  0100               	movlb	0	; () banked
 11994  01349A  6FB2               	movwf	(printf@f+1)& (0+255),b
 11995  01349C  0E5C               	movlw	low STR_172
 11996  01349E  0100               	movlb	0	; () banked
 11997  0134A0  6FB3               	movwf	(?_printf+2)& (0+255),b
 11998  0134A2  0EFD               	movlw	high STR_172
 11999  0134A4  0100               	movlb	0	; () banked
 12000  0134A6  6FB4               	movwf	(?_printf+3)& (0+255),b
 12001  0134A8  EC00  F080         	call	_printf	;wreg free
 12002                           
 12003                           ;UART.c: 442: usart_str_1(',');
 12004  0134AC  0E2C               	movlw	44
 12005  0134AE  EC0F  F0D8         	call	_usart_str_1
 12006                           
 12007                           ;UART.c: 444: printf("%s","FREQUENCY");
 12008  0134B2  0EF4               	movlw	low STR_2
 12009  0134B4  0100               	movlb	0	; () banked
 12010  0134B6  6FB1               	movwf	printf@f& (0+255),b
 12011  0134B8  0EFF               	movlw	high STR_2
 12012  0134BA  0100               	movlb	0	; () banked
 12013  0134BC  6FB2               	movwf	(printf@f+1)& (0+255),b
 12014  0134BE  0E1C               	movlw	low STR_174
 12015  0134C0  0100               	movlb	0	; () banked
 12016  0134C2  6FB3               	movwf	(?_printf+2)& (0+255),b
 12017  0134C4  0EFF               	movlw	high STR_174
 12018  0134C6  0100               	movlb	0	; () banked
 12019  0134C8  6FB4               	movwf	(?_printf+3)& (0+255),b
 12020  0134CA  EC00  F080         	call	_printf	;wreg free
 12021                           
 12022                           ;UART.c: 445: usart_str_1(',');
 12023  0134CE  0E2C               	movlw	44
 12024  0134D0  EC0F  F0D8         	call	_usart_str_1
 12025                           
 12026                           ;UART.c: 447: printf("%s","PHASE ANGLE");
 12027  0134D4  0EF4               	movlw	low STR_2
 12028  0134D6  0100               	movlb	0	; () banked
 12029  0134D8  6FB1               	movwf	printf@f& (0+255),b
 12030  0134DA  0EFF               	movlw	high STR_2
 12031  0134DC  0100               	movlb	0	; () banked
 12032  0134DE  6FB2               	movwf	(printf@f+1)& (0+255),b
 12033  0134E0  0E10               	movlw	low STR_176
 12034  0134E2  0100               	movlb	0	; () banked
 12035  0134E4  6FB3               	movwf	(?_printf+2)& (0+255),b
 12036  0134E6  0EFE               	movlw	high STR_176
 12037  0134E8  0100               	movlb	0	; () banked
 12038  0134EA  6FB4               	movwf	(?_printf+3)& (0+255),b
 12039  0134EC  EC00  F080         	call	_printf	;wreg free
 12040                           
 12041                           ;UART.c: 448: usart_str_1(',');
 12042  0134F0  0E2C               	movlw	44
 12043  0134F2  EC0F  F0D8         	call	_usart_str_1
 12044                           
 12045                           ;UART.c: 450: printf("%s","VFD ERROR");
 12046  0134F6  0EF4               	movlw	low STR_2
 12047  0134F8  0100               	movlb	0	; () banked
 12048  0134FA  6FB1               	movwf	printf@f& (0+255),b
 12049  0134FC  0EFF               	movlw	high STR_2
 12050  0134FE  0100               	movlb	0	; () banked
 12051  013500  6FB2               	movwf	(printf@f+1)& (0+255),b
 12052  013502  0EE0               	movlw	low STR_178
 12053  013504  0100               	movlb	0	; () banked
 12054  013506  6FB3               	movwf	(?_printf+2)& (0+255),b
 12055  013508  0EFE               	movlw	high STR_178
 12056  01350A  0100               	movlb	0	; () banked
 12057  01350C  6FB4               	movwf	(?_printf+3)& (0+255),b
 12058  01350E  EC00  F080         	call	_printf	;wreg free
 12059                           
 12060                           ;UART.c: 451: usart_str_1(',');
 12061  013512  0E2C               	movlw	44
 12062  013514  EC0F  F0D8         	call	_usart_str_1
 12063                           
 12064                           ;UART.c: 453: printf("%s","INITAL DELAY");
 12065  013518  0EF4               	movlw	low STR_2
 12066  01351A  0100               	movlb	0	; () banked
 12067  01351C  6FB1               	movwf	printf@f& (0+255),b
 12068  01351E  0EFF               	movlw	high STR_2
 12069  013520  0100               	movlb	0	; () banked
 12070  013522  6FB2               	movwf	(printf@f+1)& (0+255),b
 12071  013524  0E03               	movlw	low STR_180
 12072  013526  0100               	movlb	0	; () banked
 12073  013528  6FB3               	movwf	(?_printf+2)& (0+255),b
 12074  01352A  0EFE               	movlw	high STR_180
 12075  01352C  0100               	movlb	0	; () banked
 12076  01352E  6FB4               	movwf	(?_printf+3)& (0+255),b
 12077  013530  EC00  F080         	call	_printf	;wreg free
 12078                           
 12079                           ;UART.c: 454: usart_str_1(',');
 12080  013534  0E2C               	movlw	44
 12081  013536  EC0F  F0D8         	call	_usart_str_1
 12082                           
 12083                           ;UART.c: 456: printf("%s","ERROR NO");
 12084  01353A  0EF4               	movlw	low STR_2
 12085  01353C  0100               	movlb	0	; () banked
 12086  01353E  6FB1               	movwf	printf@f& (0+255),b
 12087  013540  0EFF               	movlw	high STR_2
 12088  013542  0100               	movlb	0	; () banked
 12089  013544  6FB2               	movwf	(printf@f+1)& (0+255),b
 12090  013546  0E4B               	movlw	low STR_182
 12091  013548  0100               	movlb	0	; () banked
 12092  01354A  6FB3               	movwf	(?_printf+2)& (0+255),b
 12093  01354C  0EFF               	movlw	high STR_182
 12094  01354E  0100               	movlb	0	; () banked
 12095  013550  6FB4               	movwf	(?_printf+3)& (0+255),b
 12096  013552  EC00  F080         	call	_printf	;wreg free
 12097                           
 12098                           ;UART.c: 457: usart_str_1(',');
 12099  013556  0E2C               	movlw	44
 12100  013558  EC0F  F0D8         	call	_usart_str_1
 12101                           
 12102                           ;UART.c: 459: printf("%s","ERROR IN STRING");
 12103  01355C  0EF4               	movlw	low STR_2
 12104  01355E  0100               	movlb	0	; () banked
 12105  013560  6FB1               	movwf	printf@f& (0+255),b
 12106  013562  0EFF               	movlw	high STR_2
 12107  013564  0100               	movlb	0	; () banked
 12108  013566  6FB2               	movwf	(printf@f+1)& (0+255),b
 12109  013568  0E1F               	movlw	low STR_184
 12110  01356A  0100               	movlb	0	; () banked
 12111  01356C  6FB3               	movwf	(?_printf+2)& (0+255),b
 12112  01356E  0EFD               	movlw	high STR_184
 12113  013570  0100               	movlb	0	; () banked
 12114  013572  6FB4               	movwf	(?_printf+3)& (0+255),b
 12115  013574  EC00  F080         	call	_printf	;wreg free
 12116                           
 12117                           ;UART.c: 460: usart_str_1(',');
 12118  013578  0E2C               	movlw	44
 12119  01357A  EC0F  F0D8         	call	_usart_str_1
 12120                           
 12121                           ;UART.c: 462: printf("%s","TURBINE STATE");
 12122  01357E  0EF4               	movlw	low STR_2
 12123  013580  0100               	movlb	0	; () banked
 12124  013582  6FB1               	movwf	printf@f& (0+255),b
 12125  013584  0EFF               	movlw	high STR_2
 12126  013586  0100               	movlb	0	; () banked
 12127  013588  6FB2               	movwf	(printf@f+1)& (0+255),b
 12128  01358A  0E89               	movlw	low STR_186
 12129  01358C  0100               	movlb	0	; () banked
 12130  01358E  6FB3               	movwf	(?_printf+2)& (0+255),b
 12131  013590  0EFD               	movlw	high STR_186
 12132  013592  0100               	movlb	0	; () banked
 12133  013594  6FB4               	movwf	(?_printf+3)& (0+255),b
 12134  013596  EC00  F080         	call	_printf	;wreg free
 12135                           
 12136                           ;UART.c: 463: usart_str_1(',');
 12137  01359A  0E2C               	movlw	44
 12138  01359C  EC0F  F0D8         	call	_usart_str_1
 12139                           
 12140                           ;UART.c: 465: printf("%s","DATE");
 12141  0135A0  0EF4               	movlw	low STR_2
 12142  0135A2  0100               	movlb	0	; () banked
 12143  0135A4  6FB1               	movwf	printf@f& (0+255),b
 12144  0135A6  0EFF               	movlw	high STR_2
 12145  0135A8  0100               	movlb	0	; () banked
 12146  0135AA  6FB2               	movwf	(printf@f+1)& (0+255),b
 12147  0135AC  0ED9               	movlw	low STR_188
 12148  0135AE  0100               	movlb	0	; () banked
 12149  0135B0  6FB3               	movwf	(?_printf+2)& (0+255),b
 12150  0135B2  0EFF               	movlw	high STR_188
 12151  0135B4  0100               	movlb	0	; () banked
 12152  0135B6  6FB4               	movwf	(?_printf+3)& (0+255),b
 12153  0135B8  EC00  F080         	call	_printf	;wreg free
 12154                           
 12155                           ;UART.c: 466: usart_str_1(',');
 12156  0135BC  0E2C               	movlw	44
 12157  0135BE  EC0F  F0D8         	call	_usart_str_1
 12158                           
 12159                           ;UART.c: 468: printf("%s","TIME");
 12160  0135C2  0EF4               	movlw	low STR_2
 12161  0135C4  0100               	movlb	0	; () banked
 12162  0135C6  6FB1               	movwf	printf@f& (0+255),b
 12163  0135C8  0EFF               	movlw	high STR_2
 12164  0135CA  0100               	movlb	0	; () banked
 12165  0135CC  6FB2               	movwf	(printf@f+1)& (0+255),b
 12166  0135CE  0EC2               	movlw	low (STR_218+13)
 12167  0135D0  0100               	movlb	0	; () banked
 12168  0135D2  6FB3               	movwf	(?_printf+2)& (0+255),b
 12169  0135D4  0EFC               	movlw	high (STR_218+13)
 12170  0135D6  0100               	movlb	0	; () banked
 12171  0135D8  6FB4               	movwf	(?_printf+3)& (0+255),b
 12172  0135DA  EC00  F080         	call	_printf	;wreg free
 12173                           
 12174                           ;UART.c: 469: usart_str_1(',');
 12175  0135DE  0E2C               	movlw	44
 12176  0135E0  EC0F  F0D8         	call	_usart_str_1
 12177                           
 12178                           ;UART.c: 471: printf("%s","TEMPERATURE");
 12179  0135E4  0EF4               	movlw	low STR_2
 12180  0135E6  0100               	movlb	0	; () banked
 12181  0135E8  6FB1               	movwf	printf@f& (0+255),b
 12182  0135EA  0EFF               	movlw	high STR_2
 12183  0135EC  0100               	movlb	0	; () banked
 12184  0135EE  6FB2               	movwf	(printf@f+1)& (0+255),b
 12185  0135F0  0E1C               	movlw	low STR_192
 12186  0135F2  0100               	movlb	0	; () banked
 12187  0135F4  6FB3               	movwf	(?_printf+2)& (0+255),b
 12188  0135F6  0EFE               	movlw	high STR_192
 12189  0135F8  0100               	movlb	0	; () banked
 12190  0135FA  6FB4               	movwf	(?_printf+3)& (0+255),b
 12191  0135FC  EC00  F080         	call	_printf	;wreg free
 12192                           
 12193                           ;UART.c: 472: usart_str_1(',');
 12194  013600  0E2C               	movlw	44
 12195  013602  EC0F  F0D8         	call	_usart_str_1
 12196                           
 12197                           ;UART.c: 474: printf("%s","LAST 5 ERROR");
 12198  013606  0EF4               	movlw	low STR_2
 12199  013608  0100               	movlb	0	; () banked
 12200  01360A  6FB1               	movwf	printf@f& (0+255),b
 12201  01360C  0EFF               	movlw	high STR_2
 12202  01360E  0100               	movlb	0	; () banked
 12203  013610  6FB2               	movwf	(printf@f+1)& (0+255),b
 12204  013612  0EE9               	movlw	low STR_194
 12205  013614  0100               	movlb	0	; () banked
 12206  013616  6FB3               	movwf	(?_printf+2)& (0+255),b
 12207  013618  0EFD               	movlw	high STR_194
 12208  01361A  0100               	movlb	0	; () banked
 12209  01361C  6FB4               	movwf	(?_printf+3)& (0+255),b
 12210  01361E  EC00  F080         	call	_printf	;wreg free
 12211                           
 12212                           ;UART.c: 475: usart_str_1(',');
 12213  013622  0E2C               	movlw	44
 12214  013624  EC0F  F0D8         	call	_usart_str_1
 12215                           
 12216                           ;UART.c: 477: printf("%s","CONTACTOR");
 12217  013628  0EF4               	movlw	low STR_2
 12218  01362A  0100               	movlb	0	; () banked
 12219  01362C  6FB1               	movwf	printf@f& (0+255),b
 12220  01362E  0EFF               	movlw	high STR_2
 12221  013630  0100               	movlb	0	; () banked
 12222  013632  6FB2               	movwf	(printf@f+1)& (0+255),b
 12223  013634  0EEA               	movlw	low STR_196
 12224  013636  0100               	movlb	0	; () banked
 12225  013638  6FB3               	movwf	(?_printf+2)& (0+255),b
 12226  01363A  0EFE               	movlw	high STR_196
 12227  01363C  0100               	movlb	0	; () banked
 12228  01363E  6FB4               	movwf	(?_printf+3)& (0+255),b
 12229  013640  EC00  F080         	call	_printf	;wreg free
 12230                           
 12231                           ;UART.c: 478: usart_str_1(',');
 12232  013644  0E2C               	movlw	44
 12233  013646  EC0F  F0D8         	call	_usart_str_1
 12234                           
 12235                           ;UART.c: 480: printf("%s","RAMP UP LOOP");
 12236  01364A  0EF4               	movlw	low STR_2
 12237  01364C  0100               	movlb	0	; () banked
 12238  01364E  6FB1               	movwf	printf@f& (0+255),b
 12239  013650  0EFF               	movlw	high STR_2
 12240  013652  0100               	movlb	0	; () banked
 12241  013654  6FB2               	movwf	(printf@f+1)& (0+255),b
 12242  013656  0EDC               	movlw	low STR_198
 12243  013658  0100               	movlb	0	; () banked
 12244  01365A  6FB3               	movwf	(?_printf+2)& (0+255),b
 12245  01365C  0EFD               	movlw	high STR_198
 12246  01365E  0100               	movlb	0	; () banked
 12247  013660  6FB4               	movwf	(?_printf+3)& (0+255),b
 12248  013662  EC00  F080         	call	_printf	;wreg free
 12249                           
 12250                           ;UART.c: 481: usart_str_1(',');
 12251  013666  0E2C               	movlw	44
 12252  013668  EC0F  F0D8         	call	_usart_str_1
 12253                           
 12254                           ;UART.c: 483: printf("%s","VFD RUN TIME ERROR COUNTER");
 12255  01366C  0EF4               	movlw	low STR_2
 12256  01366E  0100               	movlb	0	; () banked
 12257  013670  6FB1               	movwf	printf@f& (0+255),b
 12258  013672  0EFF               	movlw	high STR_2
 12259  013674  0100               	movlb	0	; () banked
 12260  013676  6FB2               	movwf	(printf@f+1)& (0+255),b
 12261  013678  0E48               	movlw	low STR_200
 12262  01367A  0100               	movlb	0	; () banked
 12263  01367C  6FB3               	movwf	(?_printf+2)& (0+255),b
 12264  01367E  0EFC               	movlw	high STR_200
 12265  013680  0100               	movlb	0	; () banked
 12266  013682  6FB4               	movwf	(?_printf+3)& (0+255),b
 12267  013684  EC00  F080         	call	_printf	;wreg free
 12268                           
 12269                           ;UART.c: 484: usart_str_1(',');
 12270  013688  0E2C               	movlw	44
 12271  01368A  EC0F  F0D8         	call	_usart_str_1
 12272                           
 12273                           ;UART.c: 486: printf("%s","ROTOR SLIP COUNTER");
 12274  01368E  0EF4               	movlw	low STR_2
 12275  013690  0100               	movlb	0	; () banked
 12276  013692  6FB1               	movwf	printf@f& (0+255),b
 12277  013694  0EFF               	movlw	high STR_2
 12278  013696  0100               	movlb	0	; () banked
 12279  013698  6FB2               	movwf	(printf@f+1)& (0+255),b
 12280  01369A  0EA2               	movlw	low STR_202
 12281  01369C  0100               	movlb	0	; () banked
 12282  01369E  6FB3               	movwf	(?_printf+2)& (0+255),b
 12283  0136A0  0EFC               	movlw	high STR_202
 12284  0136A2  0100               	movlb	0	; () banked
 12285  0136A4  6FB4               	movwf	(?_printf+3)& (0+255),b
 12286  0136A6  EC00  F080         	call	_printf	;wreg free
 12287                           
 12288                           ;UART.c: 487: usart_str_1(',');
 12289  0136AA  0E2C               	movlw	44
 12290  0136AC  EC0F  F0D8         	call	_usart_str_1
 12291                           
 12292                           ;UART.c: 489: printf("%s","MOTOR SLIP COUNTER");
 12293  0136B0  0EF4               	movlw	low STR_2
 12294  0136B2  0100               	movlb	0	; () banked
 12295  0136B4  6FB1               	movwf	printf@f& (0+255),b
 12296  0136B6  0EFF               	movlw	high STR_2
 12297  0136B8  0100               	movlb	0	; () banked
 12298  0136BA  6FB2               	movwf	(printf@f+1)& (0+255),b
 12299  0136BC  0E8F               	movlw	low STR_204
 12300  0136BE  0100               	movlb	0	; () banked
 12301  0136C0  6FB3               	movwf	(?_printf+2)& (0+255),b
 12302  0136C2  0EFC               	movlw	high STR_204
 12303  0136C4  0100               	movlb	0	; () banked
 12304  0136C6  6FB4               	movwf	(?_printf+3)& (0+255),b
 12305  0136C8  EC00  F080         	call	_printf	;wreg free
 12306                           
 12307                           ;UART.c: 490: usart_str_1(',');
 12308  0136CC  0E2C               	movlw	44
 12309  0136CE  EC0F  F0D8         	call	_usart_str_1
 12310                           
 12311                           ;UART.c: 492: printf("%s","VFD TOP CT");
 12312  0136D2  0EF4               	movlw	low STR_2
 12313  0136D4  0100               	movlb	0	; () banked
 12314  0136D6  6FB1               	movwf	printf@f& (0+255),b
 12315  0136D8  0EFF               	movlw	high STR_2
 12316  0136DA  0100               	movlb	0	; () banked
 12317  0136DC  6FB2               	movwf	(printf@f+1)& (0+255),b
 12318  0136DE  0E8D               	movlw	low STR_206
 12319  0136E0  0100               	movlb	0	; () banked
 12320  0136E2  6FB3               	movwf	(?_printf+2)& (0+255),b
 12321  0136E4  0EFE               	movlw	high STR_206
 12322  0136E6  0100               	movlb	0	; () banked
 12323  0136E8  6FB4               	movwf	(?_printf+3)& (0+255),b
 12324  0136EA  EC00  F080         	call	_printf	;wreg free
 12325                           
 12326                           ;UART.c: 493: usart_str_1(',');
 12327  0136EE  0E2C               	movlw	44
 12328  0136F0  EC0F  F0D8         	call	_usart_str_1
 12329                           
 12330                           ;UART.c: 495: printf("%s","VFD BOTTOM CT");
 12331  0136F4  0EF4               	movlw	low STR_2
 12332  0136F6  0100               	movlb	0	; () banked
 12333  0136F8  6FB1               	movwf	printf@f& (0+255),b
 12334  0136FA  0EFF               	movlw	high STR_2
 12335  0136FC  0100               	movlb	0	; () banked
 12336  0136FE  6FB2               	movwf	(printf@f+1)& (0+255),b
 12337  013700  0EC1               	movlw	low STR_208
 12338  013702  0100               	movlb	0	; () banked
 12339  013704  6FB3               	movwf	(?_printf+2)& (0+255),b
 12340  013706  0EFD               	movlw	high STR_208
 12341  013708  0100               	movlb	0	; () banked
 12342  01370A  6FB4               	movwf	(?_printf+3)& (0+255),b
 12343  01370C  EC00  F080         	call	_printf	;wreg free
 12344                           
 12345                           ;UART.c: 496: usart_str_1(',');
 12346  013710  0E2C               	movlw	44
 12347  013712  EC0F  F0D8         	call	_usart_str_1
 12348                           
 12349                           ;UART.c: 498: printf("%s","LOGIC OTP");
 12350  013716  0EF4               	movlw	low STR_2
 12351  013718  0100               	movlb	0	; () banked
 12352  01371A  6FB1               	movwf	printf@f& (0+255),b
 12353  01371C  0EFF               	movlw	high STR_2
 12354  01371E  0100               	movlb	0	; () banked
 12355  013720  6FB2               	movwf	(printf@f+1)& (0+255),b
 12356  013722  0ECC               	movlw	low STR_210
 12357  013724  0100               	movlb	0	; () banked
 12358  013726  6FB3               	movwf	(?_printf+2)& (0+255),b
 12359  013728  0EFE               	movlw	high STR_210
 12360  01372A  0100               	movlb	0	; () banked
 12361  01372C  6FB4               	movwf	(?_printf+3)& (0+255),b
 12362  01372E  EC00  F080         	call	_printf	;wreg free
 12363                           
 12364                           ;UART.c: 499: usart_str_1(',');
 12365  013732  0E2C               	movlw	44
 12366  013734  EC0F  F0D8         	call	_usart_str_1
 12367                           
 12368                           ;UART.c: 501: printf("%s","VFD OTP");
 12369  013738  0EF4               	movlw	low STR_2
 12370  01373A  0100               	movlb	0	; () banked
 12371  01373C  6FB1               	movwf	printf@f& (0+255),b
 12372  01373E  0EFF               	movlw	high STR_2
 12373  013740  0100               	movlb	0	; () banked
 12374  013742  6FB2               	movwf	(printf@f+1)& (0+255),b
 12375  013744  0E76               	movlw	low STR_212
 12376  013746  0100               	movlb	0	; () banked
 12377  013748  6FB3               	movwf	(?_printf+2)& (0+255),b
 12378  01374A  0EFF               	movlw	high STR_212
 12379  01374C  0100               	movlb	0	; () banked
 12380  01374E  6FB4               	movwf	(?_printf+3)& (0+255),b
 12381  013750  EC00  F080         	call	_printf	;wreg free
 12382                           
 12383                           ;UART.c: 502: usart_str_1(',');
 12384  013754  0E2C               	movlw	44
 12385  013756  EC0F  F0D8         	call	_usart_str_1
 12386                           
 12387                           ;UART.c: 504: printf("%s","GEN EEPROM FLAG");
 12388  01375A  0EF4               	movlw	low STR_2
 12389  01375C  0100               	movlb	0	; () banked
 12390  01375E  6FB1               	movwf	printf@f& (0+255),b
 12391  013760  0EFF               	movlw	high STR_2
 12392  013762  0100               	movlb	0	; () banked
 12393  013764  6FB2               	movwf	(printf@f+1)& (0+255),b
 12394  013766  0E0F               	movlw	low STR_214
 12395  013768  0100               	movlb	0	; () banked
 12396  01376A  6FB3               	movwf	(?_printf+2)& (0+255),b
 12397  01376C  0EFD               	movlw	high STR_214
 12398  01376E  0100               	movlb	0	; () banked
 12399  013770  6FB4               	movwf	(?_printf+3)& (0+255),b
 12400  013772  EC00  F080         	call	_printf	;wreg free
 12401                           
 12402                           ;UART.c: 505: usart_str_1(',');
 12403  013776  0E2C               	movlw	44
 12404  013778  EC0F  F0D8         	call	_usart_str_1
 12405                           
 12406                           ;UART.c: 507: printf("%s","PITCH EEPROM FLAG");
 12407  01377C  0EF4               	movlw	low STR_2
 12408  01377E  0100               	movlb	0	; () banked
 12409  013780  6FB1               	movwf	printf@f& (0+255),b
 12410  013782  0EFF               	movlw	high STR_2
 12411  013784  0100               	movlb	0	; () banked
 12412  013786  6FB2               	movwf	(printf@f+1)& (0+255),b
 12413  013788  0EC7               	movlw	low STR_216
 12414  01378A  0100               	movlb	0	; () banked
 12415  01378C  6FB3               	movwf	(?_printf+2)& (0+255),b
 12416  01378E  0EFC               	movlw	high STR_216
 12417  013790  0100               	movlb	0	; () banked
 12418  013792  6FB4               	movwf	(?_printf+3)& (0+255),b
 12419  013794  EC00  F080         	call	_printf	;wreg free
 12420                           
 12421                           ;UART.c: 508: usart_str_1(',');
 12422  013798  0E2C               	movlw	44
 12423  01379A  EC0F  F0D8         	call	_usart_str_1
 12424                           
 12425                           ;UART.c: 510: printf("%s","EEPROM ERROR TIME");
 12426  01379E  0EF4               	movlw	low STR_2
 12427  0137A0  0100               	movlb	0	; () banked
 12428  0137A2  6FB1               	movwf	printf@f& (0+255),b
 12429  0137A4  0EFF               	movlw	high STR_2
 12430  0137A6  0100               	movlb	0	; () banked
 12431  0137A8  6FB2               	movwf	(printf@f+1)& (0+255),b
 12432  0137AA  0EB5               	movlw	low STR_218
 12433  0137AC  0100               	movlb	0	; () banked
 12434  0137AE  6FB3               	movwf	(?_printf+2)& (0+255),b
 12435  0137B0  0EFC               	movlw	high STR_218
 12436  0137B2  0100               	movlb	0	; () banked
 12437  0137B4  6FB4               	movwf	(?_printf+3)& (0+255),b
 12438  0137B6  EC00  F080         	call	_printf	;wreg free
 12439                           
 12440                           ;UART.c: 511: usart_str_1(',');
 12441  0137BA  0E2C               	movlw	44
 12442  0137BC  EC0F  F0D8         	call	_usart_str_1
 12443                           
 12444                           ;UART.c: 513: printf("%s","EEPROM ERROR FLAG");
 12445  0137C0  0EF4               	movlw	low STR_2
 12446  0137C2  0100               	movlb	0	; () banked
 12447  0137C4  6FB1               	movwf	printf@f& (0+255),b
 12448  0137C6  0EFF               	movlw	high STR_2
 12449  0137C8  0100               	movlb	0	; () banked
 12450  0137CA  6FB2               	movwf	(printf@f+1)& (0+255),b
 12451  0137CC  0ED9               	movlw	low STR_220
 12452  0137CE  0100               	movlb	0	; () banked
 12453  0137D0  6FB3               	movwf	(?_printf+2)& (0+255),b
 12454  0137D2  0EFC               	movlw	high STR_220
 12455  0137D4  0100               	movlb	0	; () banked
 12456  0137D6  6FB4               	movwf	(?_printf+3)& (0+255),b
 12457  0137D8  EC00  F080         	call	_printf	;wreg free
 12458                           
 12459                           ;UART.c: 514: usart_str_1(',');
 12460  0137DC  0E2C               	movlw	44
 12461  0137DE  EC0F  F0D8         	call	_usart_str_1
 12462                           
 12463                           ;UART.c: 516: printf("%s","EEPROM LAST THREE ERROR");
 12464  0137E2  0EF4               	movlw	low STR_2
 12465  0137E4  0100               	movlb	0	; () banked
 12466  0137E6  6FB1               	movwf	printf@f& (0+255),b
 12467  0137E8  0EFF               	movlw	high STR_2
 12468  0137EA  0100               	movlb	0	; () banked
 12469  0137EC  6FB2               	movwf	(printf@f+1)& (0+255),b
 12470  0137EE  0E63               	movlw	low STR_222
 12471  0137F0  0100               	movlb	0	; () banked
 12472  0137F2  6FB3               	movwf	(?_printf+2)& (0+255),b
 12473  0137F4  0EFC               	movlw	high STR_222
 12474  0137F6  0100               	movlb	0	; () banked
 12475  0137F8  6FB4               	movwf	(?_printf+3)& (0+255),b
 12476  0137FA  EC00  F080         	call	_printf	;wreg free
 12477                           
 12478                           ;UART.c: 517: usart_str_1(',');
 12479  0137FE  0E2C               	movlw	44
 12480  013800  EC0F  F0D8         	call	_usart_str_1
 12481                           
 12482                           ;UART.c: 519: printf("%s","START/STOP KEY FLAG");
 12483  013804  0EF4               	movlw	low STR_2
 12484  013806  0100               	movlb	0	; () banked
 12485  013808  6FB1               	movwf	printf@f& (0+255),b
 12486  01380A  0EFF               	movlw	high STR_2
 12487  01380C  0100               	movlb	0	; () banked
 12488  01380E  6FB2               	movwf	(printf@f+1)& (0+255),b
 12489  013810  0E7B               	movlw	low STR_224
 12490  013812  0100               	movlb	0	; () banked
 12491  013814  6FB3               	movwf	(?_printf+2)& (0+255),b
 12492  013816  0EFC               	movlw	high STR_224
 12493  013818  0100               	movlb	0	; () banked
 12494  01381A  6FB4               	movwf	(?_printf+3)& (0+255),b
 12495  01381C  EC00  F080         	call	_printf	;wreg free
 12496                           
 12497                           ;UART.c: 520: usart_str_1(',');
 12498  013820  0E2C               	movlw	44
 12499  013822  EC0F  F0D8         	call	_usart_str_1
 12500                           
 12501                           ;UART.c: 522: usart_str("\r");
 12502  013826  0EFC               	movlw	low STR_119
 12503  013828  0100               	movlb	0	; () banked
 12504  01382A  6F60               	movwf	usart_str@str& (0+255),b
 12505  01382C  0EFF               	movlw	high STR_119
 12506  01382E  0100               	movlb	0	; () banked
 12507  013830  6F61               	movwf	(usart_str@str+1)& (0+255),b
 12508  013832  EC23  F0D6         	call	_usart_str	;wreg free
 12509                           
 12510                           ;UART.c: 523: usart_str("\n");
 12511  013836  0EFA               	movlw	low STR_120
 12512  013838  0100               	movlb	0	; () banked
 12513  01383A  6F60               	movwf	usart_str@str& (0+255),b
 12514  01383C  0EFF               	movlw	high STR_120
 12515  01383E  0100               	movlb	0	; () banked
 12516  013840  6F61               	movwf	(usart_str@str+1)& (0+255),b
 12517  013842  EC23  F0D6         	call	_usart_str	;wreg free
 12518  013846  0012               	return		;funcret
 12519  013848                     __end_of_UART_Data_String:
 12520                           	opt stack 0
 12521                           tblptru	equ	0xFF8
 12522                           tblptrh	equ	0xFF7
 12523                           tblptrl	equ	0xFF6
 12524                           tablat	equ	0xFF5
 12525                           intcon	equ	0xFF2
 12526                           postinc0	equ	0xFEE
 12527                           wreg	equ	0xFE8
 12528                           postdec1	equ	0xFE5
 12529                           fsr1h	equ	0xFE2
 12530                           fsr1l	equ	0xFE1
 12531                           status	equ	0xFD8
 12532                           
 12533 ;; *************** function _usart_str_1 *****************
 12534 ;; Defined at:
 12535 ;;		line 570 in file "UART.c"
 12536 ;; Parameters:    Size  Location     Type
 12537 ;;  str             1    wreg     const unsigned char 
 12538 ;; Auto vars:     Size  Location     Type
 12539 ;;  str             1    0[BANK0 ] const unsigned char 
 12540 ;; Return value:  Size  Location     Type
 12541 ;;                  1    wreg      void 
 12542 ;; Registers used:
 12543 ;;		wreg
 12544 ;; Tracked objects:
 12545 ;;		On entry : 0/0
 12546 ;;		On exit  : 0/0
 12547 ;;		Unchanged: 0/0
 12548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12552 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12553 ;;Total ram usage:        1 bytes
 12554 ;; Hardware stack levels used:    1
 12555 ;; Hardware stack levels required when called:    3
 12556 ;; This function calls:
 12557 ;;		Nothing
 12558 ;; This function is called by:
 12559 ;;		_UART_Data
 12560 ;;		_UART_Data_String
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           	psect	text21
 12565  01B01E                     __ptext21:
 12566                           	opt stack 0
 12567  01B01E                     _usart_str_1:
 12568                           	opt stack 25
 12569                           
 12570                           ;incstack = 0
 12571                           ;usart_str_1@str stored from wreg
 12572  01B01E  0100               	movlb	0	; () banked
 12573  01B020  6F60               	movwf	usart_str_1@str& (0+255),b
 12574  01B022                     l2439:
 12575  01B022  A89E               	btfss	3998,4,c	;volatile
 12576  01B024  D7FE               	goto	l2439
 12577                           
 12578                           ;UART.c: 573: TXREG=(str);
 12579  01B026  C060  FFAD         	movff	usart_str_1@str,4013	;volatile
 12580  01B02A  0012               	return		;funcret
 12581  01B02C                     __end_of_usart_str_1:
 12582                           	opt stack 0
 12583                           tblptru	equ	0xFF8
 12584                           tblptrh	equ	0xFF7
 12585                           tblptrl	equ	0xFF6
 12586                           tablat	equ	0xFF5
 12587                           intcon	equ	0xFF2
 12588                           postinc0	equ	0xFEE
 12589                           wreg	equ	0xFE8
 12590                           postdec1	equ	0xFE5
 12591                           fsr1h	equ	0xFE2
 12592                           fsr1l	equ	0xFE1
 12593                           status	equ	0xFD8
 12594                           
 12595 ;; *************** function _usart_str *****************
 12596 ;; Defined at:
 12597 ;;		line 561 in file "UART.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;  str             2    0[BANK0 ] PTR const unsigned char 
 12600 ;;		 -> STR_226(2), STR_225(2), STR_122(2), STR_121(2), 
 12601 ;;		 -> STR_120(2), STR_119(2), 
 12602 ;; Auto vars:     Size  Location     Type
 12603 ;;		None
 12604 ;; Return value:  Size  Location     Type
 12605 ;;                  1    wreg      void 
 12606 ;; Registers used:
 12607 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12608 ;; Tracked objects:
 12609 ;;		On entry : 0/0
 12610 ;;		On exit  : 0/0
 12611 ;;		Unchanged: 0/0
 12612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12613 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12617 ;;Total ram usage:        2 bytes
 12618 ;; Hardware stack levels used:    1
 12619 ;; Hardware stack levels required when called:    3
 12620 ;; This function calls:
 12621 ;;		Nothing
 12622 ;; This function is called by:
 12623 ;;		_UART_Data
 12624 ;;		_UART_Data_String
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           	psect	text22
 12629  01AC46                     __ptext22:
 12630                           	opt stack 0
 12631  01AC46                     _usart_str:
 12632                           	opt stack 25
 12633                           
 12634                           ;UART.c: 563: while((*str)!='\0')
 12635                           
 12636                           ;incstack = 0
 12637  01AC46  D00E               	goto	l20497
 12638  01AC48                     l2432:
 12639  01AC48  A89E               	btfss	3998,4,c	;volatile
 12640  01AC4A  D7FE               	goto	l2432
 12641                           
 12642                           ;UART.c: 566: TXREG=(*str);
 12643  01AC4C  C060  FFF6         	movff	usart_str@str,tblptrl
 12644  01AC50  C061  FFF7         	movff	usart_str@str+1,tblptrh
 12645  01AC54                     	if	0	;tblptru may be non-zero
 12646  01AC54                     	endif
 12647  01AC54                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12648  01AC54  0E00               	movlw	low (__mediumconst shr (0+16))
 12649  01AC56  6EF8               	movwf	tblptru,c
 12650  01AC58                     	endif
 12651  01AC58  0008               	tblrd		*
 12652  01AC5A  CFF5 FFAD          	movff	tablat,4013	;volatile
 12653                           
 12654                           ;UART.c: 567: str++;
 12655  01AC5E  0100               	movlb	0	; () banked
 12656  01AC60  4B60               	infsnz	usart_str@str& (0+255),f,b
 12657  01AC62  2B61               	incf	(usart_str@str+1)& (0+255),f,b
 12658  01AC64                     l20497:
 12659  01AC64  C060  FFF6         	movff	usart_str@str,tblptrl
 12660  01AC68  C061  FFF7         	movff	usart_str@str+1,tblptrh
 12661  01AC6C                     	if	0	;tblptru may be non-zero
 12662  01AC6C                     	endif
 12663  01AC6C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12664  01AC6C  0E00               	movlw	low (__mediumconst shr (0+16))
 12665  01AC6E  6EF8               	movwf	tblptru,c
 12666  01AC70                     	endif
 12667  01AC70  0008               	tblrd		*
 12668  01AC72  50F5               	movf	tablat,w,c
 12669  01AC74  0900               	iorlw	0
 12670  01AC76  B4D8               	btfsc	status,2,c
 12671  01AC78  0012               	return	
 12672  01AC7A  D7E6               	goto	l2432
 12673  01AC7C                     __end_of_usart_str:
 12674                           	opt stack 0
 12675                           tblptru	equ	0xFF8
 12676                           tblptrh	equ	0xFF7
 12677                           tblptrl	equ	0xFF6
 12678                           tablat	equ	0xFF5
 12679                           intcon	equ	0xFF2
 12680                           postinc0	equ	0xFEE
 12681                           wreg	equ	0xFE8
 12682                           postdec1	equ	0xFE5
 12683                           fsr1h	equ	0xFE2
 12684                           fsr1l	equ	0xFE1
 12685                           status	equ	0xFD8
 12686                           
 12687 ;; *************** function _printf *****************
 12688 ;; Defined at:
 12689 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 12690 ;; Parameters:    Size  Location     Type
 12691 ;;  f               2   81[BANK0 ] PTR const unsigned char 
 12692 ;;		 -> STR_223(3), STR_221(3), STR_219(3), STR_217(3), 
 12693 ;;		 -> STR_215(3), STR_213(3), STR_211(3), STR_209(3), 
 12694 ;;		 -> STR_207(3), STR_205(3), STR_203(3), STR_201(3), 
 12695 ;;		 -> STR_199(3), STR_197(3), STR_195(3), STR_193(3), 
 12696 ;;		 -> STR_191(3), STR_189(3), STR_187(3), STR_185(3), 
 12697 ;;		 -> STR_183(3), STR_181(3), STR_179(3), STR_177(3), 
 12698 ;;		 -> STR_175(3), STR_173(3), STR_171(3), STR_169(3), 
 12699 ;;		 -> STR_167(3), STR_165(3), STR_163(3), STR_161(3), 
 12700 ;;		 -> STR_159(3), STR_157(3), STR_155(3), STR_153(3), 
 12701 ;;		 -> STR_151(3), STR_149(3), STR_147(3), STR_145(3), 
 12702 ;;		 -> STR_143(3), STR_141(3), STR_139(3), STR_137(3), 
 12703 ;;		 -> STR_135(3), STR_133(3), STR_131(3), STR_129(3), 
 12704 ;;		 -> STR_127(3), STR_125(3), STR_123(3), STR_118(3), 
 12705 ;;		 -> STR_117(3), STR_116(3), STR_115(3), STR_114(3), 
 12706 ;;		 -> STR_113(3), STR_112(3), STR_111(3), STR_110(3), 
 12707 ;;		 -> STR_109(3), STR_108(3), STR_107(3), STR_106(3), 
 12708 ;;		 -> STR_105(3), STR_104(3), STR_103(3), STR_102(3), 
 12709 ;;		 -> STR_101(3), STR_100(3), STR_99(3), STR_98(3), 
 12710 ;;		 -> STR_97(3), STR_96(7), STR_95(3), STR_94(3), 
 12711 ;;		 -> STR_93(3), STR_92(3), STR_91(3), STR_90(3), 
 12712 ;;		 -> STR_88(3), STR_86(3), STR_84(3), STR_82(3), 
 12713 ;;		 -> STR_80(3), STR_78(3), STR_76(3), STR_74(3), 
 12714 ;;		 -> STR_72(3), STR_70(3), STR_68(3), STR_66(3), 
 12715 ;;		 -> STR_64(3), STR_62(3), STR_60(3), STR_58(3), 
 12716 ;;		 -> STR_56(3), STR_54(3), STR_52(3), STR_50(3), 
 12717 ;;		 -> STR_48(3), STR_46(3), STR_44(3), STR_42(3), 
 12718 ;;		 -> STR_40(3), STR_38(3), STR_36(3), STR_34(3), 
 12719 ;;		 -> STR_32(3), STR_31(3), STR_30(3), STR_29(3), 
 12720 ;;		 -> STR_28(3), STR_27(7), STR_26(7), STR_25(7), 
 12721 ;;		 -> STR_24(7), STR_23(7), STR_22(7), STR_21(7), 
 12722 ;;		 -> STR_20(7), STR_19(7), STR_18(7), STR_17(6), 
 12723 ;;		 -> STR_16(6), STR_15(6), STR_14(7), STR_13(3), 
 12724 ;;		 -> STR_12(3), STR_11(7), STR_10(7), STR_9(3), 
 12725 ;;		 -> STR_8(7), STR_7(7), STR_6(7), STR_5(7), 
 12726 ;;		 -> STR_4(7), STR_2(3), STR_1(3), 
 12727 ;; Auto vars:     Size  Location     Type
 12728 ;;  val             4   15[BANK1 ] unsigned long 
 12729 ;;  tmpval          4   11[BANK1 ] struct .
 12730 ;;  fval            3   23[BANK1 ] struct .
 12731 ;;  prec            2   26[BANK1 ] int 
 12732 ;;  width           2   21[BANK1 ] int 
 12733 ;;  exp             2   19[BANK1 ] int 
 12734 ;;  flag            2    9[BANK1 ] unsigned short 
 12735 ;;  len             2    7[BANK1 ] unsigned int 
 12736 ;;  ap              2    5[BANK1 ] PTR void [1]
 12737 ;;		 -> ?_printf(2), 
 12738 ;;  cp              2    3[BANK1 ] PTR const unsigned char 
 12739 ;;		 -> STR_227(7), Hours_2(2), Mot_Frequency(3), Time_New(3), 
 12740 ;;		 -> wind_Time_1_2(3), Wind_Time_1(3), GRPM_Frequency(3), GRPM_Time_1(3), 
 12741 ;;		 -> TRPM_Frequency(3), TRPM_Time(3), STR_224(20), STR_222(24), 
 12742 ;;		 -> STR_220(18), STR_218(18), STR_216(18), STR_214(16), 
 12743 ;;		 -> STR_212(8), STR_210(10), STR_208(14), STR_206(11), 
 12744 ;;		 -> STR_204(19), STR_202(19), STR_200(27), STR_198(13), 
 12745 ;;		 -> STR_196(10), STR_194(13), STR_192(12), STR_190(5), 
 12746 ;;		 -> STR_188(5), STR_186(14), STR_184(16), STR_182(9), 
 12747 ;;		 -> STR_180(13), STR_178(10), STR_176(12), STR_174(10), 
 12748 ;;		 -> STR_172(15), STR_170(13), STR_168(5), STR_166(4), 
 12749 ;;		 -> STR_164(5), STR_162(3), STR_160(10), STR_158(10), 
 12750 ;;		 -> STR_156(10), STR_154(7), STR_152(7), STR_150(7), 
 12751 ;;		 -> STR_148(15), STR_146(15), STR_144(7), STR_142(15), 
 12752 ;;		 -> STR_140(15), STR_138(14), STR_136(12), STR_134(11), 
 12753 ;;		 -> STR_132(15), STR_130(9), STR_128(13), STR_126(11), 
 12754 ;;		 -> STR_124(10), STR_89(9), STR_87(8), STR_85(7), 
 12755 ;;		 -> STR_83(8), STR_81(11), STR_79(14), STR_77(12), 
 12756 ;;		 -> STR_75(7), STR_73(9), STR_71(11), STR_69(11), 
 12757 ;;		 -> STR_67(10), STR_65(10), STR_63(10), STR_61(7), 
 12758 ;;		 -> STR_59(14), STR_57(11), STR_55(11), STR_53(7), 
 12759 ;;		 -> STR_51(8), STR_49(13), STR_47(11), STR_45(5), 
 12760 ;;		 -> STR_43(10), STR_41(18), STR_39(9), STR_37(10), 
 12761 ;;		 -> STR_35(11), STR_33(9), Y_KW(3), KW(3), 
 12762 ;;		 -> STR_3(18), 
 12763 ;;  c               1   28[BANK1 ] char 
 12764 ;;  d               1    0        unsigned char 
 12765 ;; Return value:  Size  Location     Type
 12766 ;;                  2   81[BANK0 ] int 
 12767 ;; Registers used:
 12768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12769 ;; Tracked objects:
 12770 ;;		On entry : 0/0
 12771 ;;		On exit  : 0/0
 12772 ;;		Unchanged: 0/0
 12773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12774 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12775 ;;      Locals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12776 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12777 ;;      Totals:         0      11      29       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12778 ;;Total ram usage:       40 bytes
 12779 ;; Hardware stack levels used:    1
 12780 ;; Hardware stack levels required when called:    6
 12781 ;; This function calls:
 12782 ;;		___awdiv
 12783 ;;		___ftadd
 12784 ;;		___ftge
 12785 ;;		___ftmul
 12786 ;;		___ftneg
 12787 ;;		___ftsub
 12788 ;;		___fttol
 12789 ;;		___lldiv
 12790 ;;		___llmod
 12791 ;;		___lltoft
 12792 ;;		___wmul
 12793 ;;		__div_to_l_
 12794 ;;		__tdiv_to_l_
 12795 ;;		_fround
 12796 ;;		_isdigit
 12797 ;;		_putch
 12798 ;;		_scale
 12799 ;; This function is called by:
 12800 ;;		_UART_Data
 12801 ;;		_UART_Data_String
 12802 ;; This function uses a non-reentrant model
 12803 ;;
 12804                           
 12805                           	psect	text23
 12806  010000                     __ptext23:
 12807                           	opt stack 0
 12808  010000                     _printf:
 12809                           	opt stack 22
 12810                           
 12811                           ;doprnt.c: 466: va_list ap;
 12812                           ;doprnt.c: 499: signed char c;
 12813                           ;doprnt.c: 501: int width;
 12814                           ;doprnt.c: 504: int prec;
 12815                           ;doprnt.c: 508: unsigned short flag;
 12816                           ;doprnt.c: 515: char d;
 12817                           ;doprnt.c: 516: double fval;
 12818                           ;doprnt.c: 517: int exp;
 12819                           ;doprnt.c: 523: union {
 12820                           ;doprnt.c: 524: unsigned long vd;
 12821                           ;doprnt.c: 525: double integ;
 12822                           ;doprnt.c: 526: } tmpval;
 12823                           ;doprnt.c: 528: unsigned long val;
 12824                           ;doprnt.c: 529: unsigned len;
 12825                           ;doprnt.c: 530: const char * cp;
 12826                           ;doprnt.c: 533: *ap = __va_start();
 12827                           
 12828                           ;incstack = 0
 12829  010000  0EB3               	movlw	low (?_printf+2)
 12830  010002  0101               	movlb	1	; () banked
 12831  010004  6FAF               	movwf	printf@ap& (0+255),b
 12832  010006  0E00               	movlw	high (?_printf+2)
 12833  010008  0101               	movlb	1	; () banked
 12834  01000A  6FB0               	movwf	(printf@ap+1)& (0+255),b
 12835                           
 12836                           ;doprnt.c: 536: while(c = *f++) {
 12837  01000C  EF60  F086         	goto	l20485
 12838  010010                     l20181:
 12839                           
 12840                           ; BSR set to: 1
 12841                           ;doprnt.c: 538: if(c != '%')
 12842  010010  0E25               	movlw	37
 12843  010012  0101               	movlb	1	; () banked
 12844  010014  19C6               	xorwf	printf@c& (0+255),w,b
 12845  010016  B4D8               	btfsc	status,2,c
 12846  010018  D006               	goto	l20185
 12847                           
 12848                           ; BSR set to: 1
 12849                           ;doprnt.c: 540: {
 12850                           ;doprnt.c: 541: (putch(c) );
 12851  01001A  0101               	movlb	1	; () banked
 12852  01001C  51C6               	movf	printf@c& (0+255),w,b
 12853  01001E  EC16  F0D8         	call	_putch
 12854                           
 12855                           ;doprnt.c: 542: continue;
 12856  010022  EF60  F086         	goto	l20485
 12857  010026                     l20185:
 12858                           
 12859                           ;doprnt.c: 543: }
 12860                           ;doprnt.c: 546: width = 0;
 12861  010026  0E00               	movlw	0
 12862  010028  0101               	movlb	1	; () banked
 12863  01002A  6FC0               	movwf	(printf@width+1)& (0+255),b
 12864  01002C  0E00               	movlw	0
 12865  01002E  6FBF               	movwf	printf@width& (0+255),b
 12866                           
 12867                           ;doprnt.c: 548: flag = 0;
 12868  010030  0E00               	movlw	0
 12869  010032  0101               	movlb	1	; () banked
 12870  010034  6FB4               	movwf	(printf@flag+1)& (0+255),b
 12871  010036  0E00               	movlw	0
 12872  010038  6FB3               	movwf	printf@flag& (0+255),b
 12873                           
 12874                           ; BSR set to: 1
 12875                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12876  01003A  C0B1  FFF6         	movff	printf@f,tblptrl
 12877  01003E  C0B2  FFF7         	movff	printf@f+1,tblptrh
 12878  010042                     	if	0	;tblptru may be non-zero
 12879  010042                     	endif
 12880  010042                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12881  010042  0E00               	movlw	low (__mediumconst shr (0+16))
 12882  010044  6EF8               	movwf	tblptru,c
 12883  010046                     	endif
 12884  010046  0008               	tblrd		*
 12885  010048  50F5               	movf	tablat,w,c
 12886  01004A  EC2F  F0D7         	call	_isdigit
 12887  01004E  A0D8               	btfss	status,0,c
 12888  010050  D044               	goto	l20199
 12889                           
 12890                           ;doprnt.c: 598: width = 0;
 12891  010052  0E00               	movlw	0
 12892  010054  0101               	movlb	1	; () banked
 12893  010056  6FC0               	movwf	(printf@width+1)& (0+255),b
 12894  010058  0E00               	movlw	0
 12895  01005A  6FBF               	movwf	printf@width& (0+255),b
 12896  01005C                     l20191:
 12897                           
 12898                           ;doprnt.c: 600: width *= 10;
 12899  01005C  C1BF  F06E         	movff	printf@width,___wmul@multiplier
 12900  010060  C1C0  F06F         	movff	printf@width+1,___wmul@multiplier+1
 12901  010064  0E00               	movlw	0
 12902  010066  0100               	movlb	0	; () banked
 12903  010068  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12904  01006A  0E0A               	movlw	10
 12905  01006C  6F70               	movwf	___wmul@multiplicand& (0+255),b
 12906  01006E  EC59  F0D6         	call	___wmul	;wreg free
 12907  010072  C06E  F1BF         	movff	?___wmul,printf@width
 12908  010076  C06F  F1C0         	movff	?___wmul+1,printf@width+1
 12909                           
 12910                           ;doprnt.c: 601: width += *f++ - '0';
 12911  01007A  0ED0               	movlw	208
 12912  01007C  0100               	movlb	0	; () banked
 12913  01007E  6FB6               	movwf	??_printf& (0+255),b
 12914  010080  0EFF               	movlw	255
 12915  010082  0100               	movlb	0	; () banked
 12916  010084  6FB7               	movwf	(??_printf+1)& (0+255),b
 12917  010086  C0B1  FFF6         	movff	printf@f,tblptrl
 12918  01008A  C0B2  FFF7         	movff	printf@f+1,tblptrh
 12919  01008E                     	if	0	;tblptru may be non-zero
 12920  01008E                     	endif
 12921  01008E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12922  01008E  0E00               	movlw	low (__mediumconst shr (0+16))
 12923  010090  6EF8               	movwf	tblptru,c
 12924  010092                     	endif
 12925  010092  0008               	tblrd		*
 12926  010094  50F5               	movf	tablat,w,c
 12927  010096  0100               	movlb	0	; () banked
 12928  010098  6FB8               	movwf	(??_printf+2)& (0+255),b
 12929  01009A  6BB9               	clrf	(??_printf+3)& (0+255),b
 12930  01009C  0100               	movlb	0	; () banked
 12931  01009E  51B6               	movf	??_printf& (0+255),w,b
 12932  0100A0  0100               	movlb	0	; () banked
 12933  0100A2  27B8               	addwf	(??_printf+2)& (0+255),f,b
 12934  0100A4  0100               	movlb	0	; () banked
 12935  0100A6  51B7               	movf	(??_printf+1)& (0+255),w,b
 12936  0100A8  0100               	movlb	0	; () banked
 12937  0100AA  23B9               	addwfc	(??_printf+3)& (0+255),f,b
 12938  0100AC  0100               	movlb	0	; () banked
 12939  0100AE  51B8               	movf	(??_printf+2)& (0+255),w,b
 12940  0100B0  0101               	movlb	1	; () banked
 12941  0100B2  27BF               	addwf	printf@width& (0+255),f,b
 12942  0100B4  0100               	movlb	0	; () banked
 12943  0100B6  51B9               	movf	(??_printf+3)& (0+255),w,b
 12944  0100B8  0101               	movlb	1	; () banked
 12945  0100BA  23C0               	addwfc	(printf@width+1)& (0+255),f,b
 12946                           
 12947                           ; BSR set to: 1
 12948  0100BC  0100               	movlb	0	; () banked
 12949  0100BE  4BB1               	infsnz	printf@f& (0+255),f,b
 12950  0100C0  2BB2               	incf	(printf@f+1)& (0+255),f,b
 12951                           
 12952                           ; BSR set to: 0
 12953                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12954  0100C2  C0B1  FFF6         	movff	printf@f,tblptrl
 12955  0100C6  C0B2  FFF7         	movff	printf@f+1,tblptrh
 12956  0100CA                     	if	0	;tblptru may be non-zero
 12957  0100CA                     	endif
 12958  0100CA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12959  0100CA  0E00               	movlw	low (__mediumconst shr (0+16))
 12960  0100CC  6EF8               	movwf	tblptru,c
 12961  0100CE                     	endif
 12962  0100CE  0008               	tblrd		*
 12963  0100D0  50F5               	movf	tablat,w,c
 12964  0100D2  EC2F  F0D7         	call	_isdigit
 12965  0100D6  B0D8               	btfsc	status,0,c
 12966  0100D8  D7C1               	goto	l20191
 12967  0100DA                     l20199:
 12968                           
 12969                           ;doprnt.c: 608: }
 12970                           ;doprnt.c: 611: if(*f == '.') {
 12971  0100DA  C0B1  FFF6         	movff	printf@f,tblptrl
 12972  0100DE  C0B2  FFF7         	movff	printf@f+1,tblptrh
 12973  0100E2                     	if	0	;tblptru may be non-zero
 12974  0100E2                     	endif
 12975  0100E2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12976  0100E2  0E00               	movlw	low (__mediumconst shr (0+16))
 12977  0100E4  6EF8               	movwf	tblptru,c
 12978  0100E6                     	endif
 12979  0100E6  0008               	tblrd		*
 12980  0100E8  50F5               	movf	tablat,w,c
 12981  0100EA  0A2E               	xorlw	46
 12982  0100EC  A4D8               	btfss	status,2,c
 12983  0100EE  D03D               	goto	l20211
 12984                           
 12985                           ;doprnt.c: 612: flag |= 0x4000;
 12986  0100F0  0101               	movlb	1	; () banked
 12987  0100F2  8DB4               	bsf	(printf@flag+1)& (0+255),6,b
 12988                           
 12989                           ;doprnt.c: 613: f++;
 12990  0100F4  0100               	movlb	0	; () banked
 12991  0100F6  4BB1               	infsnz	printf@f& (0+255),f,b
 12992  0100F8  2BB2               	incf	(printf@f+1)& (0+255),f,b
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;doprnt.c: 620: {
 12996                           ;doprnt.c: 621: prec = 0;
 12997  0100FA  0E00               	movlw	0
 12998  0100FC  0101               	movlb	1	; () banked
 12999  0100FE  6FC5               	movwf	(printf@prec+1)& (0+255),b
 13000  010100  0E00               	movlw	0
 13001  010102  6FC4               	movwf	printf@prec& (0+255),b
 13002                           
 13003                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 13004  010104  D025               	goto	l20209
 13005  010106                     l20205:
 13006                           
 13007                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 13008  010106  C1C4  F06E         	movff	printf@prec,___wmul@multiplier
 13009  01010A  C1C5  F06F         	movff	printf@prec+1,___wmul@multiplier+1
 13010  01010E  0E00               	movlw	0
 13011  010110  0100               	movlb	0	; () banked
 13012  010112  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13013  010114  0E0A               	movlw	10
 13014  010116  6F70               	movwf	___wmul@multiplicand& (0+255),b
 13015  010118  EC59  F0D6         	call	___wmul	;wreg free
 13016  01011C  C0B1  FFF6         	movff	printf@f,tblptrl
 13017  010120  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13018  010124                     	if	0	;tblptru may be non-zero
 13019  010124                     	endif
 13020  010124                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13021  010124  0E00               	movlw	low (__mediumconst shr (0+16))
 13022  010126  6EF8               	movwf	tblptru,c
 13023  010128                     	endif
 13024  010128  0008               	tblrd		*
 13025  01012A  50F5               	movf	tablat,w,c
 13026  01012C  0100               	movlb	0	; () banked
 13027  01012E  276E               	addwf	?___wmul& (0+255),f,b
 13028  010130  0E00               	movlw	0
 13029  010132  0100               	movlb	0	; () banked
 13030  010134  236F               	addwfc	(?___wmul+1)& (0+255),f,b
 13031  010136  0ED0               	movlw	208
 13032  010138  0100               	movlb	0	; () banked
 13033  01013A  256E               	addwf	?___wmul& (0+255),w,b
 13034  01013C  0101               	movlb	1	; () banked
 13035  01013E  6FC4               	movwf	printf@prec& (0+255),b
 13036  010140  0EFF               	movlw	255
 13037  010142  0100               	movlb	0	; () banked
 13038  010144  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 13039  010146  0101               	movlb	1	; () banked
 13040  010148  6FC5               	movwf	(printf@prec+1)& (0+255),b
 13041                           
 13042                           ; BSR set to: 1
 13043  01014A  0100               	movlb	0	; () banked
 13044  01014C  4BB1               	infsnz	printf@f& (0+255),f,b
 13045  01014E  2BB2               	incf	(printf@f+1)& (0+255),f,b
 13046  010150                     l20209:
 13047  010150  C0B1  FFF6         	movff	printf@f,tblptrl
 13048  010154  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13049  010158                     	if	0	;tblptru may be non-zero
 13050  010158                     	endif
 13051  010158                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13052  010158  0E00               	movlw	low (__mediumconst shr (0+16))
 13053  01015A  6EF8               	movwf	tblptru,c
 13054  01015C                     	endif
 13055  01015C  0008               	tblrd		*
 13056  01015E  50F5               	movf	tablat,w,c
 13057  010160  EC2F  F0D7         	call	_isdigit
 13058  010164  A0D8               	btfss	status,0,c
 13059  010166  D0B0               	goto	l20257
 13060  010168  D7CE               	goto	l20205
 13061  01016A                     l20211:
 13062                           
 13063                           ;doprnt.c: 626: prec = 0;
 13064  01016A  0E00               	movlw	0
 13065  01016C  0101               	movlb	1	; () banked
 13066  01016E  6FC5               	movwf	(printf@prec+1)& (0+255),b
 13067  010170  0E00               	movlw	0
 13068  010172  6FC4               	movwf	printf@prec& (0+255),b
 13069                           
 13070                           ; BSR set to: 1
 13071                           ;doprnt.c: 628: flag |= 0x1000;
 13072  010174  0101               	movlb	1	; () banked
 13073  010176  89B4               	bsf	(printf@flag+1)& (0+255),4,b
 13074                           
 13075                           ; BSR set to: 1
 13076                           ;doprnt.c: 630: }
 13077                           ;doprnt.c: 635: switch(c = *f++) {
 13078  010178  D0A7               	goto	l20257
 13079  01017A                     l20215:
 13080                           
 13081                           ; BSR set to: 1
 13082                           ;doprnt.c: 663: flag |= 0x400;
 13083  01017A  0101               	movlb	1	; () banked
 13084  01017C  85B4               	bsf	(printf@flag+1)& (0+255),2,b
 13085                           
 13086                           ; BSR set to: 1
 13087                           ;doprnt.c: 698: case 'i':
 13088                           ;doprnt.c: 699: break;
 13089                           
 13090                           ; BSR set to: 1
 13091                           
 13092                           ;doprnt.c: 697: case 'd':
 13093                           
 13094                           ;doprnt.c: 664: break;
 13095  01017E  D0C6               	goto	l20259
 13096  010180                     l20217:
 13097                           
 13098                           ; BSR set to: 1
 13099                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13100  010180  C1AF  FFD9         	movff	printf@ap,fsr2l
 13101  010184  C1B0  FFDA         	movff	printf@ap+1,fsr2h
 13102  010188  CFDE F1AD          	movff	postinc2,printf@cp
 13103  01018C  CFDD F1AE          	movff	postdec2,printf@cp+1
 13104                           
 13105                           ; BSR set to: 1
 13106  010190  0E02               	movlw	2
 13107  010192  0101               	movlb	1	; () banked
 13108  010194  27AF               	addwf	printf@ap& (0+255),f,b
 13109  010196  0E00               	movlw	0
 13110  010198  23B0               	addwfc	(printf@ap+1)& (0+255),f,b
 13111                           
 13112                           ; BSR set to: 1
 13113                           ;doprnt.c: 740: if(!cp)
 13114  01019A  0101               	movlb	1	; () banked
 13115  01019C  51AD               	movf	printf@cp& (0+255),w,b
 13116  01019E  0101               	movlb	1	; () banked
 13117  0101A0  11AE               	iorwf	(printf@cp+1)& (0+255),w,b
 13118  0101A2  A4D8               	btfss	status,2,c
 13119  0101A4  D006               	goto	l20225
 13120                           
 13121                           ; BSR set to: 1
 13122                           ;doprnt.c: 741: cp = "(null)";
 13123  0101A6  0E86               	movlw	low STR_227
 13124  0101A8  0101               	movlb	1	; () banked
 13125  0101AA  6FAD               	movwf	printf@cp& (0+255),b
 13126  0101AC  0EFF               	movlw	high STR_227
 13127  0101AE  0101               	movlb	1	; () banked
 13128  0101B0  6FAE               	movwf	(printf@cp+1)& (0+255),b
 13129  0101B2                     l20225:
 13130                           
 13131                           ; BSR set to: 1
 13132                           ;doprnt.c: 745: len = 0;
 13133  0101B2  0E00               	movlw	0
 13134  0101B4  0101               	movlb	1	; () banked
 13135  0101B6  6FB2               	movwf	(printf@len+1)& (0+255),b
 13136  0101B8  0E00               	movlw	0
 13137  0101BA  6FB1               	movwf	printf@len& (0+255),b
 13138                           
 13139                           ;doprnt.c: 746: while(cp[len])
 13140  0101BC  D003               	goto	l20229
 13141  0101BE                     l20227:
 13142                           
 13143                           ;doprnt.c: 747: len++;
 13144  0101BE  0101               	movlb	1	; () banked
 13145  0101C0  4BB1               	infsnz	printf@len& (0+255),f,b
 13146  0101C2  2BB2               	incf	(printf@len+1)& (0+255),f,b
 13147  0101C4                     l20229:
 13148                           
 13149                           ; BSR set to: 1
 13150  0101C4  0101               	movlb	1	; () banked
 13151  0101C6  51B1               	movf	printf@len& (0+255),w,b
 13152  0101C8  0101               	movlb	1	; () banked
 13153  0101CA  25AD               	addwf	printf@cp& (0+255),w,b
 13154  0101CC  0100               	movlb	0	; () banked
 13155  0101CE  6FB6               	movwf	??_printf& (0+255),b
 13156  0101D0  0101               	movlb	1	; () banked
 13157  0101D2  51B2               	movf	(printf@len+1)& (0+255),w,b
 13158  0101D4  0101               	movlb	1	; () banked
 13159  0101D6  21AE               	addwfc	(printf@cp+1)& (0+255),w,b
 13160  0101D8  0100               	movlb	0	; () banked
 13161  0101DA  6FB7               	movwf	(??_printf+1)& (0+255),b
 13162  0101DC  C0B6  FFF6         	movff	??_printf,tblptrl
 13163  0101E0  C0B7  FFF7         	movff	??_printf+1,tblptrh
 13164  0101E4  0E00               	movlw	low (__mediumconst shr (0+16))
 13165  0101E6  6EF8               	movwf	tblptru,c
 13166  0101E8  0E0F               	movlw	(high __ramtop+-1)
 13167  0101EA  64F7               	cpfsgt	tblptrh,c
 13168  0101EC  D003               	bra	u13917
 13169  0101EE  0008               	tblrd		*
 13170  0101F0  50F5               	movf	tablat,w,c
 13171  0101F2  D005               	bra	u13910
 13172  0101F4                     u13917:
 13173  0101F4  CFF6 FFD9          	movff	tblptrl,fsr2l
 13174  0101F8  CFF7 FFDA          	movff	tblptrh,fsr2h
 13175  0101FC  50DF               	movf	indf2,w,c
 13176  0101FE                     u13910:
 13177  0101FE  0900               	iorlw	0
 13178  010200  A4D8               	btfss	status,2,c
 13179  010202  D7DD               	goto	l20227
 13180                           
 13181                           ;doprnt.c: 753: if(prec && prec < len)
 13182  010204  0101               	movlb	1	; () banked
 13183  010206  51C4               	movf	printf@prec& (0+255),w,b
 13184  010208  0101               	movlb	1	; () banked
 13185  01020A  11C5               	iorwf	(printf@prec+1)& (0+255),w,b
 13186  01020C  B4D8               	btfsc	status,2,c
 13187  01020E  D00E               	goto	l20237
 13188                           
 13189                           ; BSR set to: 1
 13190  010210  0101               	movlb	1	; () banked
 13191  010212  51B1               	movf	printf@len& (0+255),w,b
 13192  010214  0101               	movlb	1	; () banked
 13193  010216  5DC4               	subwf	printf@prec& (0+255),w,b
 13194  010218  0101               	movlb	1	; () banked
 13195  01021A  51B2               	movf	(printf@len+1)& (0+255),w,b
 13196  01021C  0101               	movlb	1	; () banked
 13197  01021E  59C5               	subwfb	(printf@prec+1)& (0+255),w,b
 13198  010220  B0D8               	btfsc	status,0,c
 13199  010222  D004               	goto	l20237
 13200                           
 13201                           ; BSR set to: 1
 13202                           ;doprnt.c: 754: len = prec;
 13203  010224  C1C4  F1B1         	movff	printf@prec,printf@len
 13204  010228  C1C5  F1B2         	movff	printf@prec+1,printf@len+1
 13205  01022C                     l20237:
 13206                           
 13207                           ; BSR set to: 1
 13208                           ;doprnt.c: 757: if(width > len)
 13209  01022C  0101               	movlb	1	; () banked
 13210  01022E  51BF               	movf	printf@width& (0+255),w,b
 13211  010230  0101               	movlb	1	; () banked
 13212  010232  5DB1               	subwf	printf@len& (0+255),w,b
 13213  010234  0101               	movlb	1	; () banked
 13214  010236  51C0               	movf	(printf@width+1)& (0+255),w,b
 13215  010238  0101               	movlb	1	; () banked
 13216  01023A  59B2               	subwfb	(printf@len+1)& (0+255),w,b
 13217  01023C  B0D8               	btfsc	status,0,c
 13218  01023E  D009               	goto	l20241
 13219                           
 13220                           ; BSR set to: 1
 13221                           ;doprnt.c: 758: width -= len;
 13222  010240  0101               	movlb	1	; () banked
 13223  010242  51B1               	movf	printf@len& (0+255),w,b
 13224  010244  0101               	movlb	1	; () banked
 13225  010246  5FBF               	subwf	printf@width& (0+255),f,b
 13226  010248  0101               	movlb	1	; () banked
 13227  01024A  51B2               	movf	(printf@len+1)& (0+255),w,b
 13228  01024C  0101               	movlb	1	; () banked
 13229  01024E  5BC0               	subwfb	(printf@width+1)& (0+255),f,b
 13230  010250  D009               	goto	l20245
 13231  010252                     l20241:
 13232                           
 13233                           ; BSR set to: 1
 13234                           ;doprnt.c: 759: else
 13235                           ;doprnt.c: 760: width = 0;
 13236  010252  0E00               	movlw	0
 13237  010254  0101               	movlb	1	; () banked
 13238  010256  6FC0               	movwf	(printf@width+1)& (0+255),b
 13239  010258  0E00               	movlw	0
 13240  01025A  6FBF               	movwf	printf@width& (0+255),b
 13241                           
 13242                           ; BSR set to: 1
 13243                           ;doprnt.c: 764: while(width--)
 13244  01025C  D003               	goto	l20245
 13245  01025E                     l20243:
 13246                           
 13247                           ; BSR set to: 1
 13248                           ;doprnt.c: 765: (putch(' ') );
 13249  01025E  0E20               	movlw	32
 13250  010260  EC16  F0D8         	call	_putch
 13251  010264                     l20245:
 13252  010264  0101               	movlb	1	; () banked
 13253  010266  07BF               	decf	printf@width& (0+255),f,b
 13254  010268  A0D8               	btfss	status,0,c
 13255  01026A  07C0               	decf	(printf@width+1)& (0+255),f,b
 13256  01026C  0101               	movlb	1	; () banked
 13257  01026E  29BF               	incf	printf@width& (0+255),w,b
 13258  010270  E1F6               	bnz	l20243
 13259  010272  0101               	movlb	1	; () banked
 13260  010274  29C0               	incf	(printf@width+1)& (0+255),w,b
 13261  010276  B4D8               	btfsc	status,2,c
 13262  010278  D017               	goto	l20251
 13263  01027A  D7F1               	goto	l20243
 13264  01027C                     l20247:
 13265                           
 13266                           ; BSR set to: 1
 13267                           ;doprnt.c: 768: (putch(*cp++) );
 13268  01027C  C1AD  FFF6         	movff	printf@cp,tblptrl
 13269  010280  C1AE  FFF7         	movff	printf@cp+1,tblptrh
 13270  010284  0E00               	movlw	low (__mediumconst shr (0+16))
 13271  010286  6EF8               	movwf	tblptru,c
 13272  010288  0E0F               	movlw	(high __ramtop+-1)
 13273  01028A  64F7               	cpfsgt	tblptrh,c
 13274  01028C  D003               	bra	u13977
 13275  01028E  0008               	tblrd		*
 13276  010290  50F5               	movf	tablat,w,c
 13277  010292  D005               	bra	u13970
 13278  010294                     u13977:
 13279  010294  CFF6 FFD9          	movff	tblptrl,fsr2l
 13280  010298  CFF7 FFDA          	movff	tblptrh,fsr2h
 13281  01029C  50DF               	movf	indf2,w,c
 13282  01029E                     u13970:
 13283  01029E  EC16  F0D8         	call	_putch
 13284  0102A2  0101               	movlb	1	; () banked
 13285  0102A4  4BAD               	infsnz	printf@cp& (0+255),f,b
 13286  0102A6  2BAE               	incf	(printf@cp+1)& (0+255),f,b
 13287  0102A8                     l20251:
 13288                           
 13289                           ; BSR set to: 1
 13290  0102A8  0101               	movlb	1	; () banked
 13291  0102AA  07B1               	decf	printf@len& (0+255),f,b
 13292  0102AC  A0D8               	btfss	status,0,c
 13293  0102AE  07B2               	decf	(printf@len+1)& (0+255),f,b
 13294  0102B0  0101               	movlb	1	; () banked
 13295  0102B2  29B1               	incf	printf@len& (0+255),w,b
 13296  0102B4  E1E3               	bnz	l20247
 13297  0102B6  0101               	movlb	1	; () banked
 13298  0102B8  29B2               	incf	(printf@len+1)& (0+255),w,b
 13299  0102BA  B4D8               	btfsc	status,2,c
 13300  0102BC  EF60  F086         	goto	l20485
 13301  0102C0  D7DD               	goto	l20247
 13302  0102C2                     l20253:
 13303                           
 13304                           ; BSR set to: 1
 13305                           ;doprnt.c: 818: flag |= 0x40;
 13306  0102C2  0101               	movlb	1	; () banked
 13307  0102C4  8DB3               	bsf	printf@flag& (0+255),6,b
 13308                           
 13309                           ; BSR set to: 1
 13310                           ;doprnt.c: 822: }
 13311                           
 13312                           ;doprnt.c: 819: break;
 13313  0102C6  D022               	goto	l20259
 13314  0102C8                     l20257:
 13315  0102C8  C0B1  FFF6         	movff	printf@f,tblptrl
 13316  0102CC  C0B2  FFF7         	movff	printf@f+1,tblptrh
 13317  0102D0  0100               	movlb	0	; () banked
 13318  0102D2  4BB1               	infsnz	printf@f& (0+255),f,b
 13319  0102D4  2BB2               	incf	(printf@f+1)& (0+255),f,b
 13320  0102D6                     	if	0	;tblptru may be non-zero
 13321  0102D6                     	endif
 13322  0102D6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13323  0102D6  0E00               	movlw	low (__mediumconst shr (0+16))
 13324  0102D8  6EF8               	movwf	tblptru,c
 13325  0102DA                     	endif
 13326  0102DA  0008               	tblrd		*
 13327  0102DC  CFF5 F1C6          	movff	tablat,printf@c
 13328  0102E0  0101               	movlb	1	; () banked
 13329  0102E2  51C6               	movf	printf@c& (0+255),w,b
 13330                           
 13331                           ; Switch size 1, requested type "space"
 13332                           ; Number of cases is 6, Range of values is 0 to 117
 13333                           ; switch strategies available:
 13334                           ; Name         Instructions Cycles
 13335                           ; simple_byte           19    10 (average)
 13336                           ;	Chosen strategy is simple_byte
 13337  0102E4  0A00               	xorlw	0	; case 0
 13338  0102E6  B4D8               	btfsc	status,2,c
 13339  0102E8  0012               	return	
 13340  0102EA  0A64               	xorlw	100	; case 100
 13341  0102EC  B4D8               	btfsc	status,2,c
 13342  0102EE  D00E               	goto	l20259
 13343  0102F0  0A02               	xorlw	2	; case 102
 13344  0102F2  B4D8               	btfsc	status,2,c
 13345  0102F4  D742               	goto	l20215
 13346  0102F6  0A0F               	xorlw	15	; case 105
 13347  0102F8  B4D8               	btfsc	status,2,c
 13348  0102FA  D008               	goto	l20259
 13349  0102FC  0A1A               	xorlw	26	; case 115
 13350  0102FE  B4D8               	btfsc	status,2,c
 13351  010300  D73F               	goto	l20217
 13352  010302  0A06               	xorlw	6	; case 117
 13353  010304  B4D8               	btfsc	status,2,c
 13354  010306  D7DD               	goto	l20253
 13355  010308  EF60  F086         	goto	l20485
 13356  01030C                     l20259:
 13357                           
 13358                           ; BSR set to: 1
 13359                           ;doprnt.c: 825: if(flag & (0x700)) {
 13360  01030C  0E07               	movlw	7
 13361  01030E  0101               	movlb	1	; () banked
 13362  010310  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 13363  010312  B4D8               	btfsc	status,2,c
 13364  010314  D35D               	goto	l10288
 13365                           
 13366                           ; BSR set to: 1
 13367                           ;doprnt.c: 827: if(flag & 0x1000)
 13368  010316  0101               	movlb	1	; () banked
 13369  010318  A9B4               	btfss	(printf@flag+1)& (0+255),4,b
 13370  01031A  D005               	goto	l20265
 13371                           
 13372                           ; BSR set to: 1
 13373                           ;doprnt.c: 829: prec = 6;
 13374  01031C  0E00               	movlw	0
 13375  01031E  0101               	movlb	1	; () banked
 13376  010320  6FC5               	movwf	(printf@prec+1)& (0+255),b
 13377  010322  0E06               	movlw	6
 13378  010324  6FC4               	movwf	printf@prec& (0+255),b
 13379  010326                     l20265:
 13380                           
 13381                           ; BSR set to: 1
 13382                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13383  010326  C1AF  FFD9         	movff	printf@ap,fsr2l
 13384  01032A  C1B0  FFDA         	movff	printf@ap+1,fsr2h
 13385  01032E  CFDE F1C1          	movff	postinc2,printf@fval
 13386  010332  CFDE F1C2          	movff	postinc2,printf@fval+1
 13387  010336  CFDD F1C3          	movff	postdec2,printf@fval+2
 13388                           
 13389                           ; BSR set to: 1
 13390  01033A  0E03               	movlw	3
 13391  01033C  0101               	movlb	1	; () banked
 13392  01033E  27AF               	addwf	printf@ap& (0+255),f,b
 13393  010340  0E00               	movlw	0
 13394  010342  23B0               	addwfc	(printf@ap+1)& (0+255),f,b
 13395                           
 13396                           ; BSR set to: 1
 13397                           ;doprnt.c: 831: if(fval < 0.0) {
 13398  010344  0101               	movlb	1	; () banked
 13399  010346  AFC3               	btfss	(printf@fval+2)& (0+255),7,b
 13400  010348  D011               	goto	l20275
 13401                           
 13402                           ; BSR set to: 1
 13403                           ;doprnt.c: 832: fval = -fval;
 13404  01034A  C1C1  F083         	movff	printf@fval,___ftneg@f1
 13405  01034E  C1C2  F084         	movff	printf@fval+1,___ftneg@f1+1
 13406  010352  C1C3  F085         	movff	printf@fval+2,___ftneg@f1+2
 13407  010356  ECBD  F0D6         	call	___ftneg	;wreg free
 13408  01035A  C083  F1C1         	movff	?___ftneg,printf@fval
 13409  01035E  C084  F1C2         	movff	?___ftneg+1,printf@fval+1
 13410  010362  C085  F1C3         	movff	?___ftneg+2,printf@fval+2
 13411                           
 13412                           ;doprnt.c: 833: flag |= 0x03;
 13413  010366  0E03               	movlw	3
 13414  010368  0101               	movlb	1	; () banked
 13415  01036A  13B3               	iorwf	printf@flag& (0+255),f,b
 13416  01036C                     l20275:
 13417                           
 13418                           ; BSR set to: 1
 13419                           ;doprnt.c: 834: }
 13420                           ;doprnt.c: 835: exp = 0;
 13421  01036C  0E00               	movlw	0
 13422  01036E  0101               	movlb	1	; () banked
 13423  010370  6FBE               	movwf	(printf@exp+1)& (0+255),b
 13424  010372  0E00               	movlw	0
 13425  010374  6FBD               	movwf	printf@exp& (0+255),b
 13426                           
 13427                           ; BSR set to: 1
 13428                           ;doprnt.c: 836: if( fval!=0) {
 13429  010376  0101               	movlb	1	; () banked
 13430  010378  51C1               	movf	printf@fval& (0+255),w,b
 13431  01037A  0101               	movlb	1	; () banked
 13432  01037C  11C2               	iorwf	(printf@fval+1)& (0+255),w,b
 13433  01037E  0101               	movlb	1	; () banked
 13434  010380  11C3               	iorwf	(printf@fval+2)& (0+255),w,b
 13435  010382  B4D8               	btfsc	status,2,c
 13436  010384  D09B               	goto	l20303
 13437                           
 13438                           ; BSR set to: 1
 13439                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13440  010386  0E82               	movlw	130
 13441  010388  0100               	movlb	0	; () banked
 13442  01038A  6FB6               	movwf	??_printf& (0+255),b
 13443  01038C  0EFF               	movlw	255
 13444  01038E  0100               	movlb	0	; () banked
 13445  010390  6FB7               	movwf	(??_printf+1)& (0+255),b
 13446  010392  C1C1  F0B8         	movff	printf@fval,??_printf+2
 13447  010396  C1C2  F0B9         	movff	printf@fval+1,??_printf+3
 13448  01039A  C1C3  F0BA         	movff	printf@fval+2,??_printf+4
 13449  01039E  C1C4  F0BB         	movff	printf@fval+3,??_printf+5
 13450  0103A2  0E10               	movlw	16
 13451  0103A4  D006               	goto	u14030
 13452  0103A6                     u14035:
 13453  0103A6  0100               	movlb	0	; () banked
 13454  0103A8  90D8               	bcf	status,0,c
 13455  0103AA  33BB               	rrcf	(??_printf+5)& (0+255),f,b
 13456  0103AC  33BA               	rrcf	(??_printf+4)& (0+255),f,b
 13457  0103AE  33B9               	rrcf	(??_printf+3)& (0+255),f,b
 13458  0103B0  33B8               	rrcf	(??_printf+2)& (0+255),f,b
 13459  0103B2                     u14030:
 13460  0103B2  2EE8               	decfsz	wreg,f,c
 13461  0103B4  D7F8               	goto	u14035
 13462  0103B6  0100               	movlb	0	; () banked
 13463  0103B8  51B8               	movf	(??_printf+2)& (0+255),w,b
 13464  0103BA  0100               	movlb	0	; () banked
 13465  0103BC  25B6               	addwf	??_printf& (0+255),w,b
 13466  0103BE  0101               	movlb	1	; () banked
 13467  0103C0  6FBD               	movwf	printf@exp& (0+255),b
 13468  0103C2  0E00               	movlw	0
 13469  0103C4  0100               	movlb	0	; () banked
 13470  0103C6  21B7               	addwfc	(??_printf+1)& (0+255),w,b
 13471  0103C8  0101               	movlb	1	; () banked
 13472  0103CA  6FBE               	movwf	(printf@exp+1)& (0+255),b
 13473                           
 13474                           ; BSR set to: 1
 13475                           ;doprnt.c: 838: exp--;
 13476  0103CC  0101               	movlb	1	; () banked
 13477  0103CE  07BD               	decf	printf@exp& (0+255),f,b
 13478  0103D0  A0D8               	btfss	status,0,c
 13479  0103D2  07BE               	decf	(printf@exp+1)& (0+255),f,b
 13480                           
 13481                           ; BSR set to: 1
 13482                           ;doprnt.c: 839: exp *= 3;
 13483  0103D4  C1BD  F06E         	movff	printf@exp,___wmul@multiplier
 13484  0103D8  C1BE  F06F         	movff	printf@exp+1,___wmul@multiplier+1
 13485  0103DC  0E00               	movlw	0
 13486  0103DE  0100               	movlb	0	; () banked
 13487  0103E0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13488  0103E2  0E03               	movlw	3
 13489  0103E4  6F70               	movwf	___wmul@multiplicand& (0+255),b
 13490  0103E6  EC59  F0D6         	call	___wmul	;wreg free
 13491  0103EA  C06E  F1BD         	movff	?___wmul,printf@exp
 13492  0103EE  C06F  F1BE         	movff	?___wmul+1,printf@exp+1
 13493                           
 13494                           ;doprnt.c: 840: exp /= 10;
 13495  0103F2  C1BD  F066         	movff	printf@exp,___awdiv@dividend
 13496  0103F6  C1BE  F067         	movff	printf@exp+1,___awdiv@dividend+1
 13497  0103FA  0E00               	movlw	0
 13498  0103FC  0100               	movlb	0	; () banked
 13499  0103FE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 13500  010400  0E0A               	movlw	10
 13501  010402  6F68               	movwf	___awdiv@divisor& (0+255),b
 13502  010404  EC10  F0CC         	call	___awdiv	;wreg free
 13503  010408  C066  F1BD         	movff	?___awdiv,printf@exp
 13504  01040C  C067  F1BE         	movff	?___awdiv+1,printf@exp+1
 13505                           
 13506                           ;doprnt.c: 841: if(exp < 0)
 13507  010410  0101               	movlb	1	; () banked
 13508  010412  AFBE               	btfss	(printf@exp+1)& (0+255),7,b
 13509  010414  D004               	goto	l20291
 13510                           
 13511                           ; BSR set to: 1
 13512                           ;doprnt.c: 842: exp--;
 13513  010416  0101               	movlb	1	; () banked
 13514  010418  07BD               	decf	printf@exp& (0+255),f,b
 13515  01041A  A0D8               	btfss	status,0,c
 13516  01041C  07BE               	decf	(printf@exp+1)& (0+255),f,b
 13517  01041E                     l20291:
 13518                           
 13519                           ; BSR set to: 1
 13520                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13521  01041E  0101               	movlb	1	; () banked
 13522  010420  51BD               	movf	printf@exp& (0+255),w,b
 13523  010422  0800               	sublw	0
 13524  010424  ECDD  F09E         	call	_scale
 13525  010428  C083  F1B5         	movff	?_scale,printf@tmpval
 13526  01042C  C084  F1B6         	movff	?_scale+1,printf@tmpval+1
 13527  010430  C085  F1B7         	movff	?_scale+2,printf@tmpval+2
 13528                           
 13529                           ;doprnt.c: 847: tmpval.integ *= fval;
 13530  010434  C1B5  F074         	movff	printf@tmpval,___ftmul@f1
 13531  010438  C1B6  F075         	movff	printf@tmpval+1,___ftmul@f1+1
 13532  01043C  C1B7  F076         	movff	printf@tmpval+2,___ftmul@f1+2
 13533  010440  C1C1  F077         	movff	printf@fval,___ftmul@f2
 13534  010444  C1C2  F078         	movff	printf@fval+1,___ftmul@f2+1
 13535  010448  C1C3  F079         	movff	printf@fval+2,___ftmul@f2+2
 13536  01044C  ECA4  F0C0         	call	___ftmul	;wreg free
 13537  010450  C074  F1B5         	movff	?___ftmul,printf@tmpval
 13538  010454  C075  F1B6         	movff	?___ftmul+1,printf@tmpval+1
 13539  010458  C076  F1B7         	movff	?___ftmul+2,printf@tmpval+2
 13540                           
 13541                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13542  01045C  C1B5  F099         	movff	printf@tmpval,___ftge@ff1
 13543  010460  C1B6  F09A         	movff	printf@tmpval+1,___ftge@ff1+1
 13544  010464  C1B7  F09B         	movff	printf@tmpval+2,___ftge@ff1+2
 13545  010468  0E00               	movlw	0
 13546  01046A  0100               	movlb	0	; () banked
 13547  01046C  6F9C               	movwf	___ftge@ff2& (0+255),b
 13548  01046E  0E80               	movlw	128
 13549  010470  0100               	movlb	0	; () banked
 13550  010472  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 13551  010474  0E3F               	movlw	63
 13552  010476  0100               	movlb	0	; () banked
 13553  010478  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 13554  01047A  ECEB  F0CA         	call	___ftge	;wreg free
 13555  01047E  0100               	movlb	0	; () banked
 13556  010480  B0D8               	btfsc	status,0,c
 13557  010482  D005               	goto	l20299
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;doprnt.c: 849: exp--;
 13561  010484  0101               	movlb	1	; () banked
 13562  010486  07BD               	decf	printf@exp& (0+255),f,b
 13563  010488  A0D8               	btfss	status,0,c
 13564  01048A  07BE               	decf	(printf@exp+1)& (0+255),f,b
 13565  01048C  D017               	goto	l20303
 13566  01048E                     l20299:
 13567                           
 13568                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13569  01048E  C1B5  F099         	movff	printf@tmpval,___ftge@ff1
 13570  010492  C1B6  F09A         	movff	printf@tmpval+1,___ftge@ff1+1
 13571  010496  C1B7  F09B         	movff	printf@tmpval+2,___ftge@ff1+2
 13572  01049A  0E00               	movlw	0
 13573  01049C  0100               	movlb	0	; () banked
 13574  01049E  6F9C               	movwf	___ftge@ff2& (0+255),b
 13575  0104A0  0E20               	movlw	32
 13576  0104A2  0100               	movlb	0	; () banked
 13577  0104A4  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 13578  0104A6  0E41               	movlw	65
 13579  0104A8  0100               	movlb	0	; () banked
 13580  0104AA  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 13581  0104AC  ECEB  F0CA         	call	___ftge	;wreg free
 13582  0104B0  0100               	movlb	0	; () banked
 13583  0104B2  A0D8               	btfss	status,0,c
 13584  0104B4  D003               	goto	l20303
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;doprnt.c: 851: exp++;
 13588  0104B6  0101               	movlb	1	; () banked
 13589  0104B8  4BBD               	infsnz	printf@exp& (0+255),f,b
 13590  0104BA  2BBE               	incf	(printf@exp+1)& (0+255),f,b
 13591  0104BC                     l20303:
 13592                           
 13593                           ;doprnt.c: 852: }
 13594                           ;doprnt.c: 1112: if(prec <= 12)
 13595  0104BC  0101               	movlb	1	; () banked
 13596  0104BE  BFC5               	btfsc	(printf@prec+1)& (0+255),7,b
 13597  0104C0  D008               	goto	l20305
 13598  0104C2  0101               	movlb	1	; () banked
 13599  0104C4  51C5               	movf	(printf@prec+1)& (0+255),w,b
 13600  0104C6  E11D               	bnz	l20307
 13601  0104C8  0E0D               	movlw	13
 13602  0104CA  0101               	movlb	1	; () banked
 13603  0104CC  5DC4               	subwf	printf@prec& (0+255),w,b
 13604  0104CE  B0D8               	btfsc	status,0,c
 13605  0104D0  D018               	goto	l20307
 13606  0104D2                     l20305:
 13607                           
 13608                           ; BSR set to: 1
 13609                           ;doprnt.c: 1113: fval += fround(prec);
 13610  0104D2  C1C1  F08D         	movff	printf@fval,___ftadd@f1
 13611  0104D6  C1C2  F08E         	movff	printf@fval+1,___ftadd@f1+1
 13612  0104DA  C1C3  F08F         	movff	printf@fval+2,___ftadd@f1+2
 13613  0104DE  0101               	movlb	1	; () banked
 13614  0104E0  51C4               	movf	printf@prec& (0+255),w,b
 13615  0104E2  EC0E  F0AC         	call	_fround
 13616  0104E6  C083  F090         	movff	?_fround,___ftadd@f2
 13617  0104EA  C084  F091         	movff	?_fround+1,___ftadd@f2+1
 13618  0104EE  C085  F092         	movff	?_fround+2,___ftadd@f2+2
 13619  0104F2  EC69  F0B2         	call	___ftadd	;wreg free
 13620  0104F6  C08D  F1C1         	movff	?___ftadd,printf@fval
 13621  0104FA  C08E  F1C2         	movff	?___ftadd+1,printf@fval+1
 13622  0104FE  C08F  F1C3         	movff	?___ftadd+2,printf@fval+2
 13623  010502                     l20307:
 13624                           
 13625                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13626  010502  0101               	movlb	1	; () banked
 13627  010504  BFBE               	btfsc	(printf@exp+1)& (0+255),7,b
 13628  010506  D008               	goto	l20309
 13629  010508  0101               	movlb	1	; () banked
 13630  01050A  51BE               	movf	(printf@exp+1)& (0+255),w,b
 13631  01050C  E12A               	bnz	l20315
 13632  01050E  0E0A               	movlw	10
 13633  010510  0101               	movlb	1	; () banked
 13634  010512  5DBD               	subwf	printf@exp& (0+255),w,b
 13635  010514  B0D8               	btfsc	status,0,c
 13636  010516  D025               	goto	l20315
 13637  010518                     l20309:
 13638                           
 13639                           ; BSR set to: 1
 13640  010518  0101               	movlb	1	; () banked
 13641  01051A  51C1               	movf	printf@fval& (0+255),w,b
 13642  01051C  0101               	movlb	1	; () banked
 13643  01051E  11C2               	iorwf	(printf@fval+1)& (0+255),w,b
 13644  010520  0101               	movlb	1	; () banked
 13645  010522  11C3               	iorwf	(printf@fval+2)& (0+255),w,b
 13646  010524  B4D8               	btfsc	status,2,c
 13647  010526  D063               	goto	l20329
 13648                           
 13649                           ; BSR set to: 1
 13650  010528  C1C1  F08A         	movff	printf@fval,___fttol@f1
 13651  01052C  C1C2  F08B         	movff	printf@fval+1,___fttol@f1+1
 13652  010530  C1C3  F08C         	movff	printf@fval+2,___fttol@f1+2
 13653  010534  ECF9  F0C1         	call	___fttol	;wreg free
 13654  010538  0100               	movlb	0	; () banked
 13655  01053A  518A               	movf	?___fttol& (0+255),w,b
 13656  01053C  0100               	movlb	0	; () banked
 13657  01053E  118B               	iorwf	(?___fttol+1)& (0+255),w,b
 13658  010540  0100               	movlb	0	; () banked
 13659  010542  118C               	iorwf	(?___fttol+2)& (0+255),w,b
 13660  010544  0100               	movlb	0	; () banked
 13661  010546  118D               	iorwf	(?___fttol+3)& (0+255),w,b
 13662  010548  A4D8               	btfss	status,2,c
 13663  01054A  D051               	goto	l20329
 13664                           
 13665                           ; BSR set to: 0
 13666  01054C  0101               	movlb	1	; () banked
 13667  01054E  BFBE               	btfsc	(printf@exp+1)& (0+255),7,b
 13668  010550  D04E               	goto	l20329
 13669  010552  0101               	movlb	1	; () banked
 13670  010554  51BE               	movf	(printf@exp+1)& (0+255),w,b
 13671  010556  E105               	bnz	l20315
 13672  010558  0E02               	movlw	2
 13673  01055A  0101               	movlb	1	; () banked
 13674  01055C  5DBD               	subwf	printf@exp& (0+255),w,b
 13675  01055E  A0D8               	btfss	status,0,c
 13676  010560  D046               	goto	l20329
 13677  010562                     l20315:
 13678                           
 13679                           ; BSR set to: 1
 13680                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13681  010562  C1B5  F099         	movff	printf@tmpval,___ftge@ff1
 13682  010566  C1B6  F09A         	movff	printf@tmpval+1,___ftge@ff1+1
 13683  01056A  C1B7  F09B         	movff	printf@tmpval+2,___ftge@ff1+2
 13684  01056E  0E70               	movlw	112
 13685  010570  0100               	movlb	0	; () banked
 13686  010572  6F9C               	movwf	___ftge@ff2& (0+255),b
 13687  010574  0E89               	movlw	137
 13688  010576  0100               	movlb	0	; () banked
 13689  010578  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 13690  01057A  0E40               	movlw	64
 13691  01057C  0100               	movlb	0	; () banked
 13692  01057E  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 13693  010580  ECEB  F0CA         	call	___ftge	;wreg free
 13694  010584  0100               	movlb	0	; () banked
 13695  010586  B0D8               	btfsc	status,0,c
 13696  010588  D003               	goto	l20319
 13697                           
 13698                           ; BSR set to: 0
 13699                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13700  01058A  0101               	movlb	1	; () banked
 13701  01058C  0EF7               	movlw	247
 13702  01058E  D002               	goto	L6
 13703  010590                     l20319:
 13704                           
 13705                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13706  010590  0101               	movlb	1	; () banked
 13707  010592  0EF8               	movlw	248
 13708  010594                     L6:
 13709  010594  27BD               	addwf	printf@exp& (0+255),f,b
 13710  010596  0EFF               	movlw	255
 13711  010598  23BE               	addwfc	(printf@exp+1)& (0+255),f,b
 13712                           
 13713                           ; BSR set to: 1
 13714                           ;doprnt.c: 1124: }
 13715                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13716                           
 13717                           ; BSR set to: 1
 13718  01059A  0101               	movlb	1	; () banked
 13719  01059C  51BD               	movf	printf@exp& (0+255),w,b
 13720  01059E  ECDD  F09E         	call	_scale
 13721  0105A2  C083  F1B5         	movff	?_scale,printf@tmpval
 13722  0105A6  C084  F1B6         	movff	?_scale+1,printf@tmpval+1
 13723  0105AA  C085  F1B7         	movff	?_scale+2,printf@tmpval+2
 13724                           
 13725                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13726  0105AE  C1C1  F060         	movff	printf@fval,__tdiv_to_l_@f1
 13727  0105B2  C1C2  F061         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 13728  0105B6  C1C3  F062         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 13729  0105BA  C1B5  F063         	movff	printf@tmpval,__tdiv_to_l_@f2
 13730  0105BE  C1B6  F064         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 13731  0105C2  C1B7  F065         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 13732  0105C6  EC7F  F0BB         	call	__tdiv_to_l_	;wreg free
 13733  0105CA  C060  F1B9         	movff	?__tdiv_to_l_,printf@val
 13734  0105CE  C061  F1BA         	movff	?__tdiv_to_l_+1,printf@val+1
 13735  0105D2  C062  F1BB         	movff	?__tdiv_to_l_+2,printf@val+2
 13736  0105D6  C063  F1BC         	movff	?__tdiv_to_l_+3,printf@val+3
 13737                           
 13738                           ;doprnt.c: 1129: fval = 0.0;
 13739  0105DA  0E00               	movlw	0
 13740  0105DC  0101               	movlb	1	; () banked
 13741  0105DE  6FC1               	movwf	printf@fval& (0+255),b
 13742  0105E0  0E00               	movlw	0
 13743  0105E2  0101               	movlb	1	; () banked
 13744  0105E4  6FC2               	movwf	(printf@fval+1)& (0+255),b
 13745  0105E6  0E00               	movlw	0
 13746  0105E8  0101               	movlb	1	; () banked
 13747  0105EA  6FC3               	movwf	(printf@fval+2)& (0+255),b
 13748                           
 13749                           ;doprnt.c: 1130: } else {
 13750  0105EC  D033               	goto	l20333
 13751  0105EE                     l20329:
 13752                           
 13753                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13754  0105EE  C1C1  F08A         	movff	printf@fval,___fttol@f1
 13755  0105F2  C1C2  F08B         	movff	printf@fval+1,___fttol@f1+1
 13756  0105F6  C1C3  F08C         	movff	printf@fval+2,___fttol@f1+2
 13757  0105FA  ECF9  F0C1         	call	___fttol	;wreg free
 13758  0105FE  C08A  F1B9         	movff	?___fttol,printf@val
 13759  010602  C08B  F1BA         	movff	?___fttol+1,printf@val+1
 13760  010606  C08C  F1BB         	movff	?___fttol+2,printf@val+2
 13761  01060A  C08D  F1BC         	movff	?___fttol+3,printf@val+3
 13762                           
 13763                           ;doprnt.c: 1132: fval -= (double)val;
 13764  01060E  C1C1  F0AB         	movff	printf@fval,___ftsub@f1
 13765  010612  C1C2  F0AC         	movff	printf@fval+1,___ftsub@f1+1
 13766  010616  C1C3  F0AD         	movff	printf@fval+2,___ftsub@f1+2
 13767  01061A  C1B9  F068         	movff	printf@val,___lltoft@c
 13768  01061E  C1BA  F069         	movff	printf@val+1,___lltoft@c+1
 13769  010622  C1BB  F06A         	movff	printf@val+2,___lltoft@c+2
 13770  010626  C1BC  F06B         	movff	printf@val+3,___lltoft@c+3
 13771  01062A  EC97  F0D2         	call	___lltoft	;wreg free
 13772  01062E  C068  F0AE         	movff	?___lltoft,___ftsub@f2
 13773  010632  C069  F0AF         	movff	?___lltoft+1,___ftsub@f2+1
 13774  010636  C06A  F0B0         	movff	?___lltoft+2,___ftsub@f2+2
 13775  01063A  EC61  F0D5         	call	___ftsub	;wreg free
 13776  01063E  C0AB  F1C1         	movff	?___ftsub,printf@fval
 13777  010642  C0AC  F1C2         	movff	?___ftsub+1,printf@fval+1
 13778  010646  C0AD  F1C3         	movff	?___ftsub+2,printf@fval+2
 13779                           
 13780                           ;doprnt.c: 1133: exp = 0;
 13781  01064A  0E00               	movlw	0
 13782  01064C  0101               	movlb	1	; () banked
 13783  01064E  6FBE               	movwf	(printf@exp+1)& (0+255),b
 13784  010650  0E00               	movlw	0
 13785  010652  6FBD               	movwf	printf@exp& (0+255),b
 13786  010654                     l20333:
 13787                           
 13788                           ; BSR set to: 1
 13789                           ;doprnt.c: 1134: }
 13790                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13791  010654  0E01               	movlw	1
 13792  010656  0101               	movlb	1	; () banked
 13793  010658  6FC6               	movwf	printf@c& (0+255),b
 13794  01065A                     l20335:
 13795                           
 13796                           ; BSR set to: 1
 13797  01065A  0E0A               	movlw	10
 13798  01065C  0101               	movlb	1	; () banked
 13799  01065E  19C6               	xorwf	printf@c& (0+255),w,b
 13800  010660  B4D8               	btfsc	status,2,c
 13801  010662  D021               	goto	l20347
 13802                           
 13803                           ; BSR set to: 1
 13804                           ;doprnt.c: 1137: if(val < dpowers[c])
 13805                           
 13806                           ; BSR set to: 1
 13807                           
 13808                           ; BSR set to: 1
 13809  010664  0101               	movlb	1	; () banked
 13810  010666  51C6               	movf	printf@c& (0+255),w,b
 13811  010668  0D04               	mullw	4
 13812  01066A  0EB7               	movlw	low _dpowers
 13813  01066C  24F3               	addwf	prodl,w,c
 13814  01066E  6EF6               	movwf	tblptrl,c
 13815  010670  0EFB               	movlw	high _dpowers
 13816  010672  20F4               	addwfc	prodh,w,c
 13817  010674  6EF7               	movwf	tblptrh,c
 13818  010676                     	if	1	;There are 3 active tblptr bytes
 13819  010676  6AF8               	clrf	tblptru,c
 13820  010678  0E00               	movlw	low (__mediumconst shr (0+16))
 13821  01067A  22F8               	addwfc	tblptru,f,c
 13822  01067C                     	endif
 13823  01067C  0009               	tblrd		*+
 13824  01067E  50F5               	movf	tablat,w,c
 13825  010680  0101               	movlb	1	; () banked
 13826  010682  5DB9               	subwf	printf@val& (0+255),w,b
 13827  010684  0009               	tblrd		*+
 13828  010686  50F5               	movf	tablat,w,c
 13829  010688  0101               	movlb	1	; () banked
 13830  01068A  59BA               	subwfb	(printf@val+1)& (0+255),w,b
 13831  01068C  0009               	tblrd		*+
 13832  01068E  50F5               	movf	tablat,w,c
 13833  010690  0101               	movlb	1	; () banked
 13834  010692  59BB               	subwfb	(printf@val+2)& (0+255),w,b
 13835  010694  0009               	tblrd		*+
 13836  010696  50F5               	movf	tablat,w,c
 13837  010698  0101               	movlb	1	; () banked
 13838  01069A  59BC               	subwfb	(printf@val+3)& (0+255),w,b
 13839  01069C  A0D8               	btfss	status,0,c
 13840  01069E  D003               	goto	l20347
 13841                           
 13842                           ; BSR set to: 1
 13843                           
 13844                           ; BSR set to: 1
 13845                           
 13846                           ; BSR set to: 1
 13847                           ;doprnt.c: 1138: break;
 13848  0106A0  0101               	movlb	1	; () banked
 13849  0106A2  2BC6               	incf	printf@c& (0+255),f,b
 13850  0106A4  D7DA               	goto	l20335
 13851  0106A6                     l20347:
 13852                           
 13853                           ; BSR set to: 1
 13854                           ;doprnt.c: 1142: width -= prec + c + exp;
 13855  0106A6  C1C6  F0B6         	movff	printf@c,??_printf
 13856  0106AA  0100               	movlb	0	; () banked
 13857  0106AC  6BB7               	clrf	(??_printf+1)& (0+255),b
 13858  0106AE  BFB6               	btfsc	??_printf& (0+255),7,b
 13859  0106B0  07B7               	decf	(??_printf+1)& (0+255),f,b
 13860  0106B2  0101               	movlb	1	; () banked
 13861  0106B4  51C4               	movf	printf@prec& (0+255),w,b
 13862  0106B6  0100               	movlb	0	; () banked
 13863  0106B8  27B6               	addwf	??_printf& (0+255),f,b
 13864  0106BA  0101               	movlb	1	; () banked
 13865  0106BC  51C5               	movf	(printf@prec+1)& (0+255),w,b
 13866  0106BE  0100               	movlb	0	; () banked
 13867  0106C0  23B7               	addwfc	(??_printf+1)& (0+255),f,b
 13868  0106C2  0101               	movlb	1	; () banked
 13869  0106C4  51BD               	movf	printf@exp& (0+255),w,b
 13870  0106C6  0100               	movlb	0	; () banked
 13871  0106C8  27B6               	addwf	??_printf& (0+255),f,b
 13872  0106CA  0101               	movlb	1	; () banked
 13873  0106CC  51BE               	movf	(printf@exp+1)& (0+255),w,b
 13874  0106CE  0100               	movlb	0	; () banked
 13875  0106D0  23B7               	addwfc	(??_printf+1)& (0+255),f,b
 13876  0106D2  0100               	movlb	0	; () banked
 13877  0106D4  51B6               	movf	??_printf& (0+255),w,b
 13878  0106D6  0101               	movlb	1	; () banked
 13879  0106D8  5FBF               	subwf	printf@width& (0+255),f,b
 13880  0106DA  0100               	movlb	0	; () banked
 13881  0106DC  51B7               	movf	(??_printf+1)& (0+255),w,b
 13882  0106DE  0101               	movlb	1	; () banked
 13883  0106E0  5BC0               	subwfb	(printf@width+1)& (0+255),f,b
 13884                           
 13885                           ;doprnt.c: 1143: if(
 13886                           ;doprnt.c: 1147: prec)
 13887  0106E2  0101               	movlb	1	; () banked
 13888  0106E4  51C4               	movf	printf@prec& (0+255),w,b
 13889  0106E6  0101               	movlb	1	; () banked
 13890  0106E8  11C5               	iorwf	(printf@prec+1)& (0+255),w,b
 13891  0106EA  B4D8               	btfsc	status,2,c
 13892  0106EC  D004               	goto	l20351
 13893                           
 13894                           ; BSR set to: 1
 13895                           ;doprnt.c: 1148: width--;
 13896  0106EE  0101               	movlb	1	; () banked
 13897  0106F0  07BF               	decf	printf@width& (0+255),f,b
 13898  0106F2  A0D8               	btfss	status,0,c
 13899  0106F4  07C0               	decf	(printf@width+1)& (0+255),f,b
 13900  0106F6                     l20351:
 13901                           
 13902                           ; BSR set to: 1
 13903                           ;doprnt.c: 1149: if(flag & 0x03)
 13904  0106F6  0E03               	movlw	3
 13905  0106F8  0101               	movlb	1	; () banked
 13906  0106FA  15B3               	andwf	printf@flag& (0+255),w,b
 13907  0106FC  0100               	movlb	0	; () banked
 13908  0106FE  6FB6               	movwf	??_printf& (0+255),b
 13909  010700  0E00               	movlw	0
 13910  010702  0101               	movlb	1	; () banked
 13911  010704  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 13912  010706  0100               	movlb	0	; () banked
 13913  010708  6FB7               	movwf	(??_printf+1)& (0+255),b
 13914  01070A  0100               	movlb	0	; () banked
 13915  01070C  51B6               	movf	??_printf& (0+255),w,b
 13916  01070E  0100               	movlb	0	; () banked
 13917  010710  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 13918  010712  B4D8               	btfsc	status,2,c
 13919  010714  D008               	goto	l20359
 13920  010716  D003               	goto	l20357
 13921  010718                     l20355:
 13922                           
 13923                           ; BSR set to: 1
 13924                           ;doprnt.c: 1181: (putch(' ') );
 13925  010718  0E20               	movlw	32
 13926  01071A  EC16  F0D8         	call	_putch
 13927  01071E                     l20357:
 13928                           
 13929                           ;doprnt.c: 1182: width--;
 13930  01071E  0101               	movlb	1	; () banked
 13931  010720  07BF               	decf	printf@width& (0+255),f,b
 13932  010722  A0D8               	btfss	status,0,c
 13933  010724  07C0               	decf	(printf@width+1)& (0+255),f,b
 13934  010726                     l20359:
 13935  010726  0101               	movlb	1	; () banked
 13936  010728  BFC0               	btfsc	(printf@width+1)& (0+255),7,b
 13937  01072A  D007               	goto	l20361
 13938  01072C  0101               	movlb	1	; () banked
 13939  01072E  51C0               	movf	(printf@width+1)& (0+255),w,b
 13940  010730  E1F3               	bnz	l20355
 13941  010732  0101               	movlb	1	; () banked
 13942  010734  05BF               	decf	printf@width& (0+255),w,b
 13943  010736  B0D8               	btfsc	status,0,c
 13944  010738  D7EF               	goto	l20355
 13945  01073A                     l20361:
 13946                           
 13947                           ; BSR set to: 1
 13948                           ;doprnt.c: 1183: }
 13949                           ;doprnt.c: 1188: if(flag & 0x03)
 13950  01073A  0E03               	movlw	3
 13951  01073C  0101               	movlb	1	; () banked
 13952  01073E  15B3               	andwf	printf@flag& (0+255),w,b
 13953  010740  0100               	movlb	0	; () banked
 13954  010742  6FB6               	movwf	??_printf& (0+255),b
 13955  010744  0E00               	movlw	0
 13956  010746  0101               	movlb	1	; () banked
 13957  010748  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 13958  01074A  0100               	movlb	0	; () banked
 13959  01074C  6FB7               	movwf	(??_printf+1)& (0+255),b
 13960  01074E  0100               	movlb	0	; () banked
 13961  010750  51B6               	movf	??_printf& (0+255),w,b
 13962  010752  0100               	movlb	0	; () banked
 13963  010754  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 13964  010756  B4D8               	btfsc	status,2,c
 13965  010758  D04E               	goto	l20371
 13966                           
 13967                           ; BSR set to: 0
 13968                           ;doprnt.c: 1190: (putch('-') );
 13969  01075A  0E2D               	movlw	45
 13970  01075C  EC16  F0D8         	call	_putch
 13971                           
 13972                           ;doprnt.c: 1195: }
 13973                           ;doprnt.c: 1196: while(c--) {
 13974  010760  D04A               	goto	l20371
 13975  010762                     l20365:
 13976                           
 13977                           ;doprnt.c: 1200: {
 13978                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 13979  010762  C1B9  F060         	movff	printf@val,___lldiv@dividend
 13980  010766  C1BA  F061         	movff	printf@val+1,___lldiv@dividend+1
 13981  01076A  C1BB  F062         	movff	printf@val+2,___lldiv@dividend+2
 13982  01076E  C1BC  F063         	movff	printf@val+3,___lldiv@dividend+3
 13983  010772  0101               	movlb	1	; () banked
 13984  010774  51C6               	movf	printf@c& (0+255),w,b
 13985  010776  0D04               	mullw	4
 13986  010778  0EB7               	movlw	low _dpowers
 13987  01077A  24F3               	addwf	prodl,w,c
 13988  01077C  6EF6               	movwf	tblptrl,c
 13989  01077E  0EFB               	movlw	high _dpowers
 13990  010780  20F4               	addwfc	prodh,w,c
 13991  010782  6EF7               	movwf	tblptrh,c
 13992  010784                     	if	1	;There are 3 active tblptr bytes
 13993  010784  6AF8               	clrf	tblptru,c
 13994  010786  0E00               	movlw	low (__mediumconst shr (0+16))
 13995  010788  22F8               	addwfc	tblptru,f,c
 13996  01078A                     	endif
 13997  01078A  0009               	tblrd		*+
 13998  01078C  CFF5 F064          	movff	tablat,___lldiv@divisor
 13999  010790  0009               	tblrd		*+
 14000  010792  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 14001  010796  0009               	tblrd		*+
 14002  010798  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 14003  01079C  000A               	tblrd		*-
 14004  01079E  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 14005  0107A2  ECCE  F0CC         	call	___lldiv	;wreg free
 14006  0107A6  C060  F1B5         	movff	?___lldiv,printf@tmpval
 14007  0107AA  C061  F1B6         	movff	?___lldiv+1,printf@tmpval+1
 14008  0107AE  C062  F1B7         	movff	?___lldiv+2,printf@tmpval+2
 14009  0107B2  C063  F1B8         	movff	?___lldiv+3,printf@tmpval+3
 14010                           
 14011                           ;doprnt.c: 1202: tmpval.vd %= 10;
 14012  0107B6  C1B5  F06D         	movff	printf@tmpval,___llmod@dividend
 14013  0107BA  C1B6  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
 14014  0107BE  C1B7  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
 14015  0107C2  C1B8  F070         	movff	printf@tmpval+3,___llmod@dividend+3
 14016  0107C6  0E0A               	movlw	10
 14017  0107C8  0100               	movlb	0	; () banked
 14018  0107CA  6F71               	movwf	___llmod@divisor& (0+255),b
 14019  0107CC  0E00               	movlw	0
 14020  0107CE  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 14021  0107D0  0E00               	movlw	0
 14022  0107D2  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 14023  0107D4  0E00               	movlw	0
 14024  0107D6  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 14025  0107D8  EC37  F0D1         	call	___llmod	;wreg free
 14026  0107DC  C06D  F1B5         	movff	?___llmod,printf@tmpval
 14027  0107E0  C06E  F1B6         	movff	?___llmod+1,printf@tmpval+1
 14028  0107E4  C06F  F1B7         	movff	?___llmod+2,printf@tmpval+2
 14029  0107E8  C070  F1B8         	movff	?___llmod+3,printf@tmpval+3
 14030                           
 14031                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 14032  0107EC  0101               	movlb	1	; () banked
 14033  0107EE  51B5               	movf	printf@tmpval& (0+255),w,b
 14034  0107F0  0F30               	addlw	48
 14035  0107F2  EC16  F0D8         	call	_putch
 14036  0107F6                     l20371:
 14037  0107F6  0101               	movlb	1	; () banked
 14038  0107F8  07C6               	decf	printf@c& (0+255),f,b
 14039  0107FA  0101               	movlb	1	; () banked
 14040  0107FC  29C6               	incf	printf@c& (0+255),w,b
 14041  0107FE  B4D8               	btfsc	status,2,c
 14042  010800  D008               	goto	l20377
 14043  010802  D7AF               	goto	l20365
 14044  010804                     l20373:
 14045                           
 14046                           ; BSR set to: 1
 14047                           ;doprnt.c: 1208: (putch('0') );
 14048  010804  0E30               	movlw	48
 14049  010806  EC16  F0D8         	call	_putch
 14050                           
 14051                           ;doprnt.c: 1209: exp--;
 14052  01080A  0101               	movlb	1	; () banked
 14053  01080C  07BD               	decf	printf@exp& (0+255),f,b
 14054  01080E  A0D8               	btfss	status,0,c
 14055  010810  07BE               	decf	(printf@exp+1)& (0+255),f,b
 14056  010812                     l20377:
 14057                           
 14058                           ; BSR set to: 1
 14059  010812  0101               	movlb	1	; () banked
 14060  010814  BFBE               	btfsc	(printf@exp+1)& (0+255),7,b
 14061  010816  D007               	goto	l20379
 14062  010818  0101               	movlb	1	; () banked
 14063  01081A  51BE               	movf	(printf@exp+1)& (0+255),w,b
 14064  01081C  E1F3               	bnz	l20373
 14065  01081E  0101               	movlb	1	; () banked
 14066  010820  05BD               	decf	printf@exp& (0+255),w,b
 14067  010822  B0D8               	btfsc	status,0,c
 14068  010824  D7EF               	goto	l20373
 14069  010826                     l20379:
 14070                           
 14071                           ; BSR set to: 1
 14072                           ;doprnt.c: 1210: }
 14073                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 14074  010826  0101               	movlb	1	; () banked
 14075  010828  BFC5               	btfsc	(printf@prec+1)& (0+255),7,b
 14076  01082A  D00C               	goto	l10322
 14077  01082C  0101               	movlb	1	; () banked
 14078  01082E  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14079  010830  E105               	bnz	u14220
 14080  010832  0E09               	movlw	9
 14081  010834  0101               	movlb	1	; () banked
 14082  010836  5DC4               	subwf	printf@prec& (0+255),w,b
 14083  010838  A0D8               	btfss	status,0,c
 14084  01083A  D004               	goto	l10322
 14085  01083C                     u14220:
 14086                           
 14087                           ; BSR set to: 1
 14088                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 14089  01083C  0E08               	movlw	8
 14090  01083E  0101               	movlb	1	; () banked
 14091  010840  6FC6               	movwf	printf@c& (0+255),b
 14092  010842  D002               	goto	l20383
 14093  010844                     l10322:
 14094                           
 14095                           ; BSR set to: 1
 14096                           ;doprnt.c: 1213: else
 14097                           ;doprnt.c: 1214: c = prec;
 14098  010844  C1C4  F1C6         	movff	printf@prec,printf@c
 14099  010848                     l20383:
 14100                           
 14101                           ; BSR set to: 1
 14102                           ;doprnt.c: 1215: prec -= c;
 14103  010848  0101               	movlb	1	; () banked
 14104  01084A  51C6               	movf	printf@c& (0+255),w,b
 14105  01084C  0101               	movlb	1	; () banked
 14106  01084E  5FC4               	subwf	printf@prec& (0+255),f,b
 14107  010850  0E00               	movlw	0
 14108  010852  0101               	movlb	1	; () banked
 14109  010854  BFC6               	btfsc	printf@c& (0+255),7,b
 14110  010856  0EFF               	movlw	255
 14111  010858  0101               	movlb	1	; () banked
 14112  01085A  5BC5               	subwfb	(printf@prec+1)& (0+255),f,b
 14113                           
 14114                           ; BSR set to: 1
 14115                           ;doprnt.c: 1219: if(c)
 14116  01085C  0101               	movlb	1	; () banked
 14117  01085E  51C6               	movf	printf@c& (0+255),w,b
 14118  010860  0101               	movlb	1	; () banked
 14119  010862  B4D8               	btfsc	status,2,c
 14120  010864  D003               	goto	l20389
 14121                           
 14122                           ; BSR set to: 1
 14123                           ;doprnt.c: 1221: (putch('.') );
 14124  010866  0E2E               	movlw	46
 14125  010868  EC16  F0D8         	call	_putch
 14126  01086C                     l20389:
 14127                           
 14128                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14129  01086C  0101               	movlb	1	; () banked
 14130  01086E  51C6               	movf	printf@c& (0+255),w,b
 14131  010870  ECDD  F09E         	call	_scale
 14132  010874  C083  F1AA         	movff	?_scale,_printf$8151
 14133  010878  C084  F1AB         	movff	?_scale+1,_printf$8151+1
 14134  01087C  C085  F1AC         	movff	?_scale+2,_printf$8151+2
 14135                           
 14136                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 14137  010880  C1C1  F077         	movff	printf@fval,___ftmul@f2
 14138  010884  C1C2  F078         	movff	printf@fval+1,___ftmul@f2+1
 14139  010888  C1C3  F079         	movff	printf@fval+2,___ftmul@f2+2
 14140  01088C  C1AA  F074         	movff	_printf$8151,___ftmul@f1
 14141  010890  C1AB  F075         	movff	_printf$8151+1,___ftmul@f1+1
 14142  010894  C1AC  F076         	movff	_printf$8151+2,___ftmul@f1+2
 14143  010898  ECA4  F0C0         	call	___ftmul	;wreg free
 14144  01089C  C074  F08A         	movff	?___ftmul,___fttol@f1
 14145  0108A0  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
 14146  0108A4  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
 14147  0108A8  ECF9  F0C1         	call	___fttol	;wreg free
 14148  0108AC  C08A  F1B9         	movff	?___fttol,printf@val
 14149  0108B0  C08B  F1BA         	movff	?___fttol+1,printf@val+1
 14150  0108B4  C08C  F1BB         	movff	?___fttol+2,printf@val+2
 14151  0108B8  C08D  F1BC         	movff	?___fttol+3,printf@val+3
 14152                           
 14153                           ;doprnt.c: 1228: while(c--) {
 14154  0108BC  D074               	goto	l20399
 14155  0108BE                     l20393:
 14156                           
 14157                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 14158  0108BE  C1B9  F060         	movff	printf@val,___lldiv@dividend
 14159  0108C2  C1BA  F061         	movff	printf@val+1,___lldiv@dividend+1
 14160  0108C6  C1BB  F062         	movff	printf@val+2,___lldiv@dividend+2
 14161  0108CA  C1BC  F063         	movff	printf@val+3,___lldiv@dividend+3
 14162  0108CE  0101               	movlb	1	; () banked
 14163  0108D0  51C6               	movf	printf@c& (0+255),w,b
 14164  0108D2  0D04               	mullw	4
 14165  0108D4  0EB7               	movlw	low _dpowers
 14166  0108D6  24F3               	addwf	prodl,w,c
 14167  0108D8  6EF6               	movwf	tblptrl,c
 14168  0108DA  0EFB               	movlw	high _dpowers
 14169  0108DC  20F4               	addwfc	prodh,w,c
 14170  0108DE  6EF7               	movwf	tblptrh,c
 14171  0108E0                     	if	1	;There are 3 active tblptr bytes
 14172  0108E0  6AF8               	clrf	tblptru,c
 14173  0108E2  0E00               	movlw	low (__mediumconst shr (0+16))
 14174  0108E4  22F8               	addwfc	tblptru,f,c
 14175  0108E6                     	endif
 14176  0108E6  0009               	tblrd		*+
 14177  0108E8  CFF5 F064          	movff	tablat,___lldiv@divisor
 14178  0108EC  0009               	tblrd		*+
 14179  0108EE  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 14180  0108F2  0009               	tblrd		*+
 14181  0108F4  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 14182  0108F8  000A               	tblrd		*-
 14183  0108FA  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 14184  0108FE  ECCE  F0CC         	call	___lldiv	;wreg free
 14185  010902  C060  F1B5         	movff	?___lldiv,printf@tmpval
 14186  010906  C061  F1B6         	movff	?___lldiv+1,printf@tmpval+1
 14187  01090A  C062  F1B7         	movff	?___lldiv+2,printf@tmpval+2
 14188  01090E  C063  F1B8         	movff	?___lldiv+3,printf@tmpval+3
 14189                           
 14190                           ;doprnt.c: 1230: tmpval.vd %= 10;
 14191  010912  C1B5  F06D         	movff	printf@tmpval,___llmod@dividend
 14192  010916  C1B6  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
 14193  01091A  C1B7  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
 14194  01091E  C1B8  F070         	movff	printf@tmpval+3,___llmod@dividend+3
 14195  010922  0E0A               	movlw	10
 14196  010924  0100               	movlb	0	; () banked
 14197  010926  6F71               	movwf	___llmod@divisor& (0+255),b
 14198  010928  0E00               	movlw	0
 14199  01092A  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 14200  01092C  0E00               	movlw	0
 14201  01092E  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 14202  010930  0E00               	movlw	0
 14203  010932  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 14204  010934  EC37  F0D1         	call	___llmod	;wreg free
 14205  010938  C06D  F1B5         	movff	?___llmod,printf@tmpval
 14206  01093C  C06E  F1B6         	movff	?___llmod+1,printf@tmpval+1
 14207  010940  C06F  F1B7         	movff	?___llmod+2,printf@tmpval+2
 14208  010944  C070  F1B8         	movff	?___llmod+3,printf@tmpval+3
 14209                           
 14210                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 14211  010948  0101               	movlb	1	; () banked
 14212  01094A  51B5               	movf	printf@tmpval& (0+255),w,b
 14213  01094C  0F30               	addlw	48
 14214  01094E  EC16  F0D8         	call	_putch
 14215                           
 14216                           ;doprnt.c: 1232: val %= dpowers[c];
 14217  010952  C1B9  F06D         	movff	printf@val,___llmod@dividend
 14218  010956  C1BA  F06E         	movff	printf@val+1,___llmod@dividend+1
 14219  01095A  C1BB  F06F         	movff	printf@val+2,___llmod@dividend+2
 14220  01095E  C1BC  F070         	movff	printf@val+3,___llmod@dividend+3
 14221  010962  0101               	movlb	1	; () banked
 14222  010964  51C6               	movf	printf@c& (0+255),w,b
 14223  010966  0D04               	mullw	4
 14224  010968  0EB7               	movlw	low _dpowers
 14225  01096A  24F3               	addwf	prodl,w,c
 14226  01096C  6EF6               	movwf	tblptrl,c
 14227  01096E  0EFB               	movlw	high _dpowers
 14228  010970  20F4               	addwfc	prodh,w,c
 14229  010972  6EF7               	movwf	tblptrh,c
 14230  010974                     	if	1	;There are 3 active tblptr bytes
 14231  010974  6AF8               	clrf	tblptru,c
 14232  010976  0E00               	movlw	low (__mediumconst shr (0+16))
 14233  010978  22F8               	addwfc	tblptru,f,c
 14234  01097A                     	endif
 14235  01097A  0009               	tblrd		*+
 14236  01097C  CFF5 F071          	movff	tablat,___llmod@divisor
 14237  010980  0009               	tblrd		*+
 14238  010982  CFF5 F072          	movff	tablat,___llmod@divisor+1
 14239  010986  0009               	tblrd		*+
 14240  010988  CFF5 F073          	movff	tablat,___llmod@divisor+2
 14241  01098C  000A               	tblrd		*-
 14242  01098E  CFF5 F074          	movff	tablat,___llmod@divisor+3
 14243  010992  EC37  F0D1         	call	___llmod	;wreg free
 14244  010996  C06D  F1B9         	movff	?___llmod,printf@val
 14245  01099A  C06E  F1BA         	movff	?___llmod+1,printf@val+1
 14246  01099E  C06F  F1BB         	movff	?___llmod+2,printf@val+2
 14247  0109A2  C070  F1BC         	movff	?___llmod+3,printf@val+3
 14248  0109A6                     l20399:
 14249  0109A6  0101               	movlb	1	; () banked
 14250  0109A8  07C6               	decf	printf@c& (0+255),f,b
 14251  0109AA  0101               	movlb	1	; () banked
 14252  0109AC  29C6               	incf	printf@c& (0+255),w,b
 14253  0109AE  B4D8               	btfsc	status,2,c
 14254  0109B0  D008               	goto	l20405
 14255  0109B2  D785               	goto	l20393
 14256  0109B4                     l20401:
 14257                           
 14258                           ; BSR set to: 1
 14259                           ;doprnt.c: 1236: (putch('0') );
 14260  0109B4  0E30               	movlw	48
 14261  0109B6  EC16  F0D8         	call	_putch
 14262                           
 14263                           ;doprnt.c: 1237: prec--;
 14264  0109BA  0101               	movlb	1	; () banked
 14265  0109BC  07C4               	decf	printf@prec& (0+255),f,b
 14266  0109BE  A0D8               	btfss	status,0,c
 14267  0109C0  07C5               	decf	(printf@prec+1)& (0+255),f,b
 14268  0109C2                     l20405:
 14269                           
 14270                           ; BSR set to: 1
 14271  0109C2  0101               	movlb	1	; () banked
 14272  0109C4  51C4               	movf	printf@prec& (0+255),w,b
 14273  0109C6  0101               	movlb	1	; () banked
 14274  0109C8  11C5               	iorwf	(printf@prec+1)& (0+255),w,b
 14275  0109CA  B4D8               	btfsc	status,2,c
 14276  0109CC  D179               	goto	l20485
 14277  0109CE  D7F2               	goto	l20401
 14278  0109D0                     l10288:
 14279                           
 14280                           ; BSR set to: 1
 14281                           ;doprnt.c: 1246: }
 14282                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14283  0109D0  0101               	movlb	1	; () banked
 14284  0109D2  BDB3               	btfsc	printf@flag& (0+255),6,b
 14285  0109D4  D023               	goto	l20417
 14286                           
 14287                           ; BSR set to: 1
 14288                           ;doprnt.c: 1253: {
 14289                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 14290  0109D6  C1AF  FFD9         	movff	printf@ap,fsr2l
 14291  0109DA  C1B0  FFDA         	movff	printf@ap+1,fsr2h
 14292  0109DE  CFDE F1B9          	movff	postinc2,printf@val
 14293  0109E2  CFDD F1BA          	movff	postdec2,printf@val+1
 14294  0109E6  0101               	movlb	1	; () banked
 14295  0109E8  0E00               	movlw	0
 14296  0109EA  BFBA               	btfsc	(printf@val+1)& (0+255),7,b
 14297  0109EC  0EFF               	movlw	-1
 14298  0109EE  6FBB               	movwf	(printf@val+2)& (0+255),b
 14299  0109F0  6FBC               	movwf	(printf@val+3)& (0+255),b
 14300                           
 14301                           ; BSR set to: 1
 14302  0109F2  0E02               	movlw	2
 14303  0109F4  0101               	movlb	1	; () banked
 14304  0109F6  27AF               	addwf	printf@ap& (0+255),f,b
 14305  0109F8  0E00               	movlw	0
 14306  0109FA  23B0               	addwfc	(printf@ap+1)& (0+255),f,b
 14307                           
 14308                           ; BSR set to: 1
 14309                           ;doprnt.c: 1261: if((long)val < 0) {
 14310  0109FC  0101               	movlb	1	; () banked
 14311  0109FE  AFBC               	btfss	(printf@val+3)& (0+255),7,b
 14312  010A00  D021               	goto	l20421
 14313                           
 14314                           ; BSR set to: 1
 14315                           ;doprnt.c: 1262: flag |= 0x03;
 14316  010A02  0E03               	movlw	3
 14317  010A04  0101               	movlb	1	; () banked
 14318  010A06  13B3               	iorwf	printf@flag& (0+255),f,b
 14319                           
 14320                           ; BSR set to: 1
 14321                           ;doprnt.c: 1263: val = -val;
 14322  010A08  0101               	movlb	1	; () banked
 14323  010A0A  1FBC               	comf	(printf@val+3)& (0+255),f,b
 14324  010A0C  1FBB               	comf	(printf@val+2)& (0+255),f,b
 14325  010A0E  1FBA               	comf	(printf@val+1)& (0+255),f,b
 14326  010A10  6DB9               	negf	printf@val& (0+255),b
 14327  010A12  0E00               	movlw	0
 14328  010A14  23BA               	addwfc	(printf@val+1)& (0+255),f,b
 14329  010A16  23BB               	addwfc	(printf@val+2)& (0+255),f,b
 14330  010A18  23BC               	addwfc	(printf@val+3)& (0+255),f,b
 14331                           
 14332                           ; BSR set to: 1
 14333                           ;doprnt.c: 1264: }
 14334                           ;doprnt.c: 1266: }
 14335  010A1A  D014               	goto	l20421
 14336  010A1C                     l20417:
 14337                           
 14338                           ; BSR set to: 1
 14339                           ;doprnt.c: 1268: else
 14340                           ;doprnt.c: 1273: {
 14341                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14342  010A1C  C1AF  FFD9         	movff	printf@ap,fsr2l
 14343  010A20  C1B0  FFDA         	movff	printf@ap+1,fsr2h
 14344  010A24  CFDE F0B6          	movff	postinc2,??_printf
 14345  010A28  CFDD F0B7          	movff	postdec2,??_printf+1
 14346  010A2C  C0B6  F1B9         	movff	??_printf,printf@val
 14347  010A30  C0B7  F1BA         	movff	??_printf+1,printf@val+1
 14348  010A34  0101               	movlb	1	; () banked
 14349  010A36  6BBB               	clrf	(printf@val+2)& (0+255),b
 14350  010A38  6BBC               	clrf	(printf@val+3)& (0+255),b
 14351                           
 14352                           ; BSR set to: 1
 14353  010A3A  0E02               	movlw	2
 14354  010A3C  0101               	movlb	1	; () banked
 14355  010A3E  27AF               	addwf	printf@ap& (0+255),f,b
 14356  010A40  0E00               	movlw	0
 14357  010A42  23B0               	addwfc	(printf@ap+1)& (0+255),f,b
 14358  010A44                     l20421:
 14359                           
 14360                           ; BSR set to: 1
 14361                           ;doprnt.c: 1287: }
 14362                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 14363  010A44  0101               	movlb	1	; () banked
 14364  010A46  51C4               	movf	printf@prec& (0+255),w,b
 14365  010A48  0101               	movlb	1	; () banked
 14366  010A4A  11C5               	iorwf	(printf@prec+1)& (0+255),w,b
 14367  010A4C  A4D8               	btfss	status,2,c
 14368  010A4E  D00D               	goto	l20427
 14369                           
 14370                           ; BSR set to: 1
 14371  010A50  0101               	movlb	1	; () banked
 14372  010A52  51B9               	movf	printf@val& (0+255),w,b
 14373  010A54  0101               	movlb	1	; () banked
 14374  010A56  11BA               	iorwf	(printf@val+1)& (0+255),w,b
 14375  010A58  0101               	movlb	1	; () banked
 14376  010A5A  11BB               	iorwf	(printf@val+2)& (0+255),w,b
 14377  010A5C  0101               	movlb	1	; () banked
 14378  010A5E  11BC               	iorwf	(printf@val+3)& (0+255),w,b
 14379  010A60  A4D8               	btfss	status,2,c
 14380  010A62  D003               	goto	l20427
 14381                           
 14382                           ; BSR set to: 1
 14383                           ;doprnt.c: 1291: prec++;
 14384  010A64  0101               	movlb	1	; () banked
 14385  010A66  4BC4               	infsnz	printf@prec& (0+255),f,b
 14386  010A68  2BC5               	incf	(printf@prec+1)& (0+255),f,b
 14387  010A6A                     l20427:
 14388                           
 14389                           ; BSR set to: 1
 14390                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14391  010A6A  0E01               	movlw	1
 14392  010A6C  0101               	movlb	1	; () banked
 14393  010A6E  6FC6               	movwf	printf@c& (0+255),b
 14394  010A70                     l20429:
 14395                           
 14396                           ; BSR set to: 1
 14397  010A70  0E0A               	movlw	10
 14398  010A72  0101               	movlb	1	; () banked
 14399  010A74  19C6               	xorwf	printf@c& (0+255),w,b
 14400  010A76  B4D8               	btfsc	status,2,c
 14401  010A78  D021               	goto	l20441
 14402                           
 14403                           ; BSR set to: 1
 14404                           ;doprnt.c: 1306: if(val < dpowers[c])
 14405                           
 14406                           ; BSR set to: 1
 14407                           
 14408                           ; BSR set to: 1
 14409  010A7A  0101               	movlb	1	; () banked
 14410  010A7C  51C6               	movf	printf@c& (0+255),w,b
 14411  010A7E  0D04               	mullw	4
 14412  010A80  0EB7               	movlw	low _dpowers
 14413  010A82  24F3               	addwf	prodl,w,c
 14414  010A84  6EF6               	movwf	tblptrl,c
 14415  010A86  0EFB               	movlw	high _dpowers
 14416  010A88  20F4               	addwfc	prodh,w,c
 14417  010A8A  6EF7               	movwf	tblptrh,c
 14418  010A8C                     	if	1	;There are 3 active tblptr bytes
 14419  010A8C  6AF8               	clrf	tblptru,c
 14420  010A8E  0E00               	movlw	low (__mediumconst shr (0+16))
 14421  010A90  22F8               	addwfc	tblptru,f,c
 14422  010A92                     	endif
 14423  010A92  0009               	tblrd		*+
 14424  010A94  50F5               	movf	tablat,w,c
 14425  010A96  0101               	movlb	1	; () banked
 14426  010A98  5DB9               	subwf	printf@val& (0+255),w,b
 14427  010A9A  0009               	tblrd		*+
 14428  010A9C  50F5               	movf	tablat,w,c
 14429  010A9E  0101               	movlb	1	; () banked
 14430  010AA0  59BA               	subwfb	(printf@val+1)& (0+255),w,b
 14431  010AA2  0009               	tblrd		*+
 14432  010AA4  50F5               	movf	tablat,w,c
 14433  010AA6  0101               	movlb	1	; () banked
 14434  010AA8  59BB               	subwfb	(printf@val+2)& (0+255),w,b
 14435  010AAA  0009               	tblrd		*+
 14436  010AAC  50F5               	movf	tablat,w,c
 14437  010AAE  0101               	movlb	1	; () banked
 14438  010AB0  59BC               	subwfb	(printf@val+3)& (0+255),w,b
 14439  010AB2  A0D8               	btfss	status,0,c
 14440  010AB4  D003               	goto	l20441
 14441                           
 14442                           ; BSR set to: 1
 14443                           
 14444                           ; BSR set to: 1
 14445                           
 14446                           ; BSR set to: 1
 14447                           ;doprnt.c: 1307: break;
 14448  010AB6  0101               	movlb	1	; () banked
 14449  010AB8  2BC6               	incf	printf@c& (0+255),f,b
 14450  010ABA  D7DA               	goto	l20429
 14451  010ABC                     l20441:
 14452                           
 14453                           ; BSR set to: 1
 14454                           ;doprnt.c: 1339: if(c < prec)
 14455  010ABC  0E80               	movlw	128
 14456  010ABE  0101               	movlb	1	; () banked
 14457  010AC0  BFC6               	btfsc	printf@c& (0+255),7,b
 14458  010AC2  0E7F               	movlw	127
 14459  010AC4  0100               	movlb	0	; () banked
 14460  010AC6  6FB6               	movwf	??_printf& (0+255),b
 14461  010AC8  0101               	movlb	1	; () banked
 14462  010ACA  51C4               	movf	printf@prec& (0+255),w,b
 14463  010ACC  0101               	movlb	1	; () banked
 14464  010ACE  5DC6               	subwf	printf@c& (0+255),w,b
 14465  010AD0  0101               	movlb	1	; () banked
 14466  010AD2  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14467  010AD4  0A80               	xorlw	128
 14468  010AD6  0100               	movlb	0	; () banked
 14469  010AD8  59B6               	subwfb	??_printf& (0+255),w,b
 14470  010ADA  B0D8               	btfsc	status,0,c
 14471  010ADC  D003               	goto	l20445
 14472                           
 14473                           ; BSR set to: 0
 14474                           ;doprnt.c: 1340: c = prec;
 14475  010ADE  C1C4  F1C6         	movff	printf@prec,printf@c
 14476  010AE2  D018               	goto	l20449
 14477  010AE4                     l20445:
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;doprnt.c: 1341: else if(prec < c)
 14481  010AE4  0101               	movlb	1	; () banked
 14482  010AE6  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14483  010AE8  0A80               	xorlw	128
 14484  010AEA  0100               	movlb	0	; () banked
 14485  010AEC  6FB6               	movwf	??_printf& (0+255),b
 14486  010AEE  0101               	movlb	1	; () banked
 14487  010AF0  51C6               	movf	printf@c& (0+255),w,b
 14488  010AF2  0101               	movlb	1	; () banked
 14489  010AF4  5DC4               	subwf	printf@prec& (0+255),w,b
 14490  010AF6  0E80               	movlw	128
 14491  010AF8  0101               	movlb	1	; () banked
 14492  010AFA  BFC6               	btfsc	printf@c& (0+255),7,b
 14493  010AFC  0E7F               	movlw	127
 14494  010AFE  0100               	movlb	0	; () banked
 14495  010B00  59B6               	subwfb	??_printf& (0+255),w,b
 14496  010B02  B0D8               	btfsc	status,0,c
 14497  010B04  D007               	goto	l20449
 14498                           
 14499                           ; BSR set to: 0
 14500                           ;doprnt.c: 1342: prec = c;
 14501  010B06  0101               	movlb	1	; () banked
 14502  010B08  51C6               	movf	printf@c& (0+255),w,b
 14503  010B0A  0101               	movlb	1	; () banked
 14504  010B0C  6FC4               	movwf	printf@prec& (0+255),b
 14505  010B0E  6BC5               	clrf	(printf@prec+1)& (0+255),b
 14506  010B10  BFC4               	btfsc	printf@prec& (0+255),7,b
 14507  010B12  07C5               	decf	(printf@prec+1)& (0+255),f,b
 14508  010B14                     l20449:
 14509                           
 14510                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14511  010B14  0101               	movlb	1	; () banked
 14512  010B16  51BF               	movf	printf@width& (0+255),w,b
 14513  010B18  0101               	movlb	1	; () banked
 14514  010B1A  11C0               	iorwf	(printf@width+1)& (0+255),w,b
 14515  010B1C  B4D8               	btfsc	status,2,c
 14516  010B1E  D014               	goto	l20455
 14517                           
 14518                           ; BSR set to: 1
 14519  010B20  0E03               	movlw	3
 14520  010B22  0101               	movlb	1	; () banked
 14521  010B24  15B3               	andwf	printf@flag& (0+255),w,b
 14522  010B26  0100               	movlb	0	; () banked
 14523  010B28  6FB6               	movwf	??_printf& (0+255),b
 14524  010B2A  0E00               	movlw	0
 14525  010B2C  0101               	movlb	1	; () banked
 14526  010B2E  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 14527  010B30  0100               	movlb	0	; () banked
 14528  010B32  6FB7               	movwf	(??_printf+1)& (0+255),b
 14529  010B34  0100               	movlb	0	; () banked
 14530  010B36  51B6               	movf	??_printf& (0+255),w,b
 14531  010B38  0100               	movlb	0	; () banked
 14532  010B3A  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 14533  010B3C  B4D8               	btfsc	status,2,c
 14534  010B3E  D004               	goto	l20455
 14535                           
 14536                           ; BSR set to: 0
 14537                           ;doprnt.c: 1346: width--;
 14538  010B40  0101               	movlb	1	; () banked
 14539  010B42  07BF               	decf	printf@width& (0+255),f,b
 14540  010B44  A0D8               	btfss	status,0,c
 14541  010B46  07C0               	decf	(printf@width+1)& (0+255),f,b
 14542  010B48                     l20455:
 14543                           
 14544                           ;doprnt.c: 1348: if(flag & 0x4000) {
 14545  010B48  0101               	movlb	1	; () banked
 14546  010B4A  ADB4               	btfss	(printf@flag+1)& (0+255),6,b
 14547  010B4C  D01E               	goto	l20463
 14548                           
 14549                           ; BSR set to: 1
 14550                           ;doprnt.c: 1349: if(width > prec)
 14551  010B4E  0101               	movlb	1	; () banked
 14552  010B50  51BF               	movf	printf@width& (0+255),w,b
 14553  010B52  0101               	movlb	1	; () banked
 14554  010B54  5DC4               	subwf	printf@prec& (0+255),w,b
 14555  010B56  0101               	movlb	1	; () banked
 14556  010B58  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14557  010B5A  0A80               	xorlw	128
 14558  010B5C  0100               	movlb	0	; () banked
 14559  010B5E  6FB6               	movwf	??_printf& (0+255),b
 14560  010B60  0101               	movlb	1	; () banked
 14561  010B62  51C0               	movf	(printf@width+1)& (0+255),w,b
 14562  010B64  0A80               	xorlw	128
 14563  010B66  0100               	movlb	0	; () banked
 14564  010B68  59B6               	subwfb	??_printf& (0+255),w,b
 14565  010B6A  B0D8               	btfsc	status,0,c
 14566  010B6C  D009               	goto	l20461
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;doprnt.c: 1350: width -= prec;
 14570  010B6E  0101               	movlb	1	; () banked
 14571  010B70  51C4               	movf	printf@prec& (0+255),w,b
 14572  010B72  0101               	movlb	1	; () banked
 14573  010B74  5FBF               	subwf	printf@width& (0+255),f,b
 14574  010B76  0101               	movlb	1	; () banked
 14575  010B78  51C5               	movf	(printf@prec+1)& (0+255),w,b
 14576  010B7A  0101               	movlb	1	; () banked
 14577  010B7C  5BC0               	subwfb	(printf@width+1)& (0+255),f,b
 14578  010B7E  D005               	goto	l20463
 14579  010B80                     l20461:
 14580                           
 14581                           ;doprnt.c: 1351: else
 14582                           ;doprnt.c: 1352: width = 0;
 14583  010B80  0E00               	movlw	0
 14584  010B82  0101               	movlb	1	; () banked
 14585  010B84  6FC0               	movwf	(printf@width+1)& (0+255),b
 14586  010B86  0E00               	movlw	0
 14587  010B88  6FBF               	movwf	printf@width& (0+255),b
 14588  010B8A                     l20463:
 14589                           
 14590                           ; BSR set to: 1
 14591                           ;doprnt.c: 1353: }
 14592                           ;doprnt.c: 1381: if(width > c)
 14593  010B8A  0E80               	movlw	128
 14594  010B8C  0101               	movlb	1	; () banked
 14595  010B8E  BFC6               	btfsc	printf@c& (0+255),7,b
 14596  010B90  0E7F               	movlw	127
 14597  010B92  0100               	movlb	0	; () banked
 14598  010B94  6FB6               	movwf	??_printf& (0+255),b
 14599  010B96  0101               	movlb	1	; () banked
 14600  010B98  51BF               	movf	printf@width& (0+255),w,b
 14601  010B9A  0101               	movlb	1	; () banked
 14602  010B9C  5DC6               	subwf	printf@c& (0+255),w,b
 14603  010B9E  0101               	movlb	1	; () banked
 14604  010BA0  51C0               	movf	(printf@width+1)& (0+255),w,b
 14605  010BA2  0A80               	xorlw	128
 14606  010BA4  0100               	movlb	0	; () banked
 14607  010BA6  59B6               	subwfb	??_printf& (0+255),w,b
 14608  010BA8  B0D8               	btfsc	status,0,c
 14609  010BAA  D00B               	goto	l20467
 14610                           
 14611                           ; BSR set to: 0
 14612                           ;doprnt.c: 1382: width -= c;
 14613  010BAC  0101               	movlb	1	; () banked
 14614  010BAE  51C6               	movf	printf@c& (0+255),w,b
 14615  010BB0  0101               	movlb	1	; () banked
 14616  010BB2  5FBF               	subwf	printf@width& (0+255),f,b
 14617  010BB4  0E00               	movlw	0
 14618  010BB6  0101               	movlb	1	; () banked
 14619  010BB8  BFC6               	btfsc	printf@c& (0+255),7,b
 14620  010BBA  0EFF               	movlw	255
 14621  010BBC  0101               	movlb	1	; () banked
 14622  010BBE  5BC0               	subwfb	(printf@width+1)& (0+255),f,b
 14623  010BC0  D005               	goto	l20469
 14624  010BC2                     l20467:
 14625                           
 14626                           ;doprnt.c: 1383: else
 14627                           ;doprnt.c: 1384: width = 0;
 14628  010BC2  0E00               	movlw	0
 14629  010BC4  0101               	movlb	1	; () banked
 14630  010BC6  6FC0               	movwf	(printf@width+1)& (0+255),b
 14631  010BC8  0E00               	movlw	0
 14632  010BCA  6FBF               	movwf	printf@width& (0+255),b
 14633  010BCC                     l20469:
 14634                           
 14635                           ; BSR set to: 1
 14636                           ;doprnt.c: 1422: {
 14637                           ;doprnt.c: 1424: if(width
 14638                           ;doprnt.c: 1428: )
 14639  010BCC  0101               	movlb	1	; () banked
 14640  010BCE  51BF               	movf	printf@width& (0+255),w,b
 14641  010BD0  0101               	movlb	1	; () banked
 14642  010BD2  11C0               	iorwf	(printf@width+1)& (0+255),w,b
 14643  010BD4  B4D8               	btfsc	status,2,c
 14644  010BD6  D00D               	goto	l20475
 14645  010BD8                     l20471:
 14646                           
 14647                           ; BSR set to: 1
 14648                           ;doprnt.c: 1430: (putch(' ') );
 14649  010BD8  0E20               	movlw	32
 14650  010BDA  EC16  F0D8         	call	_putch
 14651                           
 14652                           ;doprnt.c: 1431: while(--width);
 14653  010BDE  0101               	movlb	1	; () banked
 14654  010BE0  07BF               	decf	printf@width& (0+255),f,b
 14655  010BE2  A0D8               	btfss	status,0,c
 14656  010BE4  07C0               	decf	(printf@width+1)& (0+255),f,b
 14657  010BE6  0101               	movlb	1	; () banked
 14658  010BE8  51BF               	movf	printf@width& (0+255),w,b
 14659  010BEA  0101               	movlb	1	; () banked
 14660  010BEC  11C0               	iorwf	(printf@width+1)& (0+255),w,b
 14661  010BEE  A4D8               	btfss	status,2,c
 14662  010BF0  D7F3               	goto	l20471
 14663  010BF2                     l20475:
 14664                           
 14665                           ; BSR set to: 1
 14666                           ;doprnt.c: 1438: if(flag & 0x03)
 14667  010BF2  0E03               	movlw	3
 14668  010BF4  0101               	movlb	1	; () banked
 14669  010BF6  15B3               	andwf	printf@flag& (0+255),w,b
 14670  010BF8  0100               	movlb	0	; () banked
 14671  010BFA  6FB6               	movwf	??_printf& (0+255),b
 14672  010BFC  0E00               	movlw	0
 14673  010BFE  0101               	movlb	1	; () banked
 14674  010C00  15B4               	andwf	(printf@flag+1)& (0+255),w,b
 14675  010C02  0100               	movlb	0	; () banked
 14676  010C04  6FB7               	movwf	(??_printf+1)& (0+255),b
 14677  010C06  0100               	movlb	0	; () banked
 14678  010C08  51B6               	movf	??_printf& (0+255),w,b
 14679  010C0A  0100               	movlb	0	; () banked
 14680  010C0C  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 14681  010C0E  B4D8               	btfsc	status,2,c
 14682  010C10  D04C               	goto	l20483
 14683                           
 14684                           ; BSR set to: 0
 14685                           ;doprnt.c: 1439: (putch('-') );
 14686  010C12  0E2D               	movlw	45
 14687  010C14  EC16  F0D8         	call	_putch
 14688                           
 14689                           ;doprnt.c: 1469: }
 14690                           ;doprnt.c: 1474: while(prec--) {
 14691  010C18  D048               	goto	l20483
 14692  010C1A                     l20479:
 14693                           
 14694                           ;doprnt.c: 1478: {
 14695                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14696  010C1A  C1C4  F0B6         	movff	printf@prec,??_printf
 14697  010C1E  C1C5  F0B7         	movff	printf@prec+1,??_printf+1
 14698  010C22  0100               	movlb	0	; () banked
 14699  010C24  90D8               	bcf	status,0,c
 14700  010C26  37B6               	rlcf	??_printf& (0+255),f,b
 14701  010C28  37B7               	rlcf	(??_printf+1)& (0+255),f,b
 14702  010C2A  0100               	movlb	0	; () banked
 14703  010C2C  90D8               	bcf	status,0,c
 14704  010C2E  37B6               	rlcf	??_printf& (0+255),f,b
 14705  010C30  37B7               	rlcf	(??_printf+1)& (0+255),f,b
 14706  010C32  0EB7               	movlw	low _dpowers
 14707  010C34  0100               	movlb	0	; () banked
 14708  010C36  25B6               	addwf	??_printf& (0+255),w,b
 14709  010C38  6EF6               	movwf	tblptrl,c
 14710  010C3A  0EFB               	movlw	high _dpowers
 14711  010C3C  21B7               	addwfc	(??_printf+1)& (0+255),w,b
 14712  010C3E  6EF7               	movwf	tblptrh,c
 14713  010C40                     	if	1	;There are 3 active tblptr bytes
 14714  010C40  6AF8               	clrf	tblptru,c
 14715  010C42  0E00               	movlw	low (__mediumconst shr (0+16))
 14716  010C44  22F8               	addwfc	tblptru,f,c
 14717  010C46                     	endif
 14718  010C46  0009               	tblrd		*+
 14719  010C48  CFF5 F064          	movff	tablat,___lldiv@divisor
 14720  010C4C  0009               	tblrd		*+
 14721  010C4E  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 14722  010C52  0009               	tblrd		*+
 14723  010C54  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 14724  010C58  000A               	tblrd		*-
 14725  010C5A  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 14726  010C5E  C1B9  F060         	movff	printf@val,___lldiv@dividend
 14727  010C62  C1BA  F061         	movff	printf@val+1,___lldiv@dividend+1
 14728  010C66  C1BB  F062         	movff	printf@val+2,___lldiv@dividend+2
 14729  010C6A  C1BC  F063         	movff	printf@val+3,___lldiv@dividend+3
 14730  010C6E  ECCE  F0CC         	call	___lldiv	;wreg free
 14731  010C72  C060  F06D         	movff	?___lldiv,___llmod@dividend
 14732  010C76  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
 14733  010C7A  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
 14734  010C7E  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
 14735  010C82  0E0A               	movlw	10
 14736  010C84  0100               	movlb	0	; () banked
 14737  010C86  6F71               	movwf	___llmod@divisor& (0+255),b
 14738  010C88  0E00               	movlw	0
 14739  010C8A  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 14740  010C8C  0E00               	movlw	0
 14741  010C8E  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 14742  010C90  0E00               	movlw	0
 14743  010C92  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 14744  010C94  EC37  F0D1         	call	___llmod	;wreg free
 14745  010C98  0100               	movlb	0	; () banked
 14746  010C9A  516D               	movf	?___llmod& (0+255),w,b
 14747  010C9C  0F30               	addlw	48
 14748  010C9E  0101               	movlb	1	; () banked
 14749  010CA0  6FC6               	movwf	printf@c& (0+255),b
 14750                           
 14751                           ; BSR set to: 1
 14752                           ;doprnt.c: 1523: }
 14753                           ;doprnt.c: 1524: (putch(c) );
 14754  010CA2  0101               	movlb	1	; () banked
 14755  010CA4  51C6               	movf	printf@c& (0+255),w,b
 14756  010CA6  EC16  F0D8         	call	_putch
 14757  010CAA                     l20483:
 14758  010CAA  0101               	movlb	1	; () banked
 14759  010CAC  07C4               	decf	printf@prec& (0+255),f,b
 14760  010CAE  A0D8               	btfss	status,0,c
 14761  010CB0  07C5               	decf	(printf@prec+1)& (0+255),f,b
 14762  010CB2  0101               	movlb	1	; () banked
 14763  010CB4  29C4               	incf	printf@prec& (0+255),w,b
 14764  010CB6  E1B1               	bnz	l20479
 14765  010CB8  0101               	movlb	1	; () banked
 14766  010CBA  29C5               	incf	(printf@prec+1)& (0+255),w,b
 14767  010CBC  A4D8               	btfss	status,2,c
 14768  010CBE  D7AD               	goto	l20479
 14769  010CC0                     l20485:
 14770  010CC0  C0B1  FFF6         	movff	printf@f,tblptrl
 14771  010CC4  C0B2  FFF7         	movff	printf@f+1,tblptrh
 14772  010CC8  0100               	movlb	0	; () banked
 14773  010CCA  4BB1               	infsnz	printf@f& (0+255),f,b
 14774  010CCC  2BB2               	incf	(printf@f+1)& (0+255),f,b
 14775  010CCE                     	if	0	;tblptru may be non-zero
 14776  010CCE                     	endif
 14777  010CCE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 14778  010CCE  0E00               	movlw	low (__mediumconst shr (0+16))
 14779  010CD0  6EF8               	movwf	tblptru,c
 14780  010CD2                     	endif
 14781  010CD2  0008               	tblrd		*
 14782  010CD4  CFF5 F1C6          	movff	tablat,printf@c
 14783  010CD8  0101               	movlb	1	; () banked
 14784  010CDA  51C6               	movf	printf@c& (0+255),w,b
 14785  010CDC  B4D8               	btfsc	status,2,c
 14786  010CDE  0012               	return	
 14787  010CE0  EF08  F080         	goto	l20181
 14788  010CE4                     __end_of_printf:
 14789                           	opt stack 0
 14790                           tblptru	equ	0xFF8
 14791                           tblptrh	equ	0xFF7
 14792                           tblptrl	equ	0xFF6
 14793                           tablat	equ	0xFF5
 14794                           prodh	equ	0xFF4
 14795                           prodl	equ	0xFF3
 14796                           intcon	equ	0xFF2
 14797                           postinc0	equ	0xFEE
 14798                           wreg	equ	0xFE8
 14799                           postdec1	equ	0xFE5
 14800                           fsr1h	equ	0xFE2
 14801                           fsr1l	equ	0xFE1
 14802                           indf2	equ	0xFDF
 14803                           postinc2	equ	0xFDE
 14804                           postdec2	equ	0xFDD
 14805                           fsr2h	equ	0xFDA
 14806                           fsr2l	equ	0xFD9
 14807                           status	equ	0xFD8
 14808                           
 14809 ;; *************** function _scale *****************
 14810 ;; Defined at:
 14811 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 14812 ;; Parameters:    Size  Location     Type
 14813 ;;  scl             1    wreg     char 
 14814 ;; Auto vars:     Size  Location     Type
 14815 ;;  scl             1   41[BANK0 ] char 
 14816 ;; Return value:  Size  Location     Type
 14817 ;;                  3   35[BANK0 ] char 
 14818 ;; Registers used:
 14819 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14820 ;; Tracked objects:
 14821 ;;		On entry : 0/0
 14822 ;;		On exit  : 0/0
 14823 ;;		Unchanged: 0/0
 14824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14825 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14826 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14828 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14829 ;;Total ram usage:        7 bytes
 14830 ;; Hardware stack levels used:    1
 14831 ;; Hardware stack levels required when called:    5
 14832 ;; This function calls:
 14833 ;;		___awdiv
 14834 ;;		___awmod
 14835 ;;		___ftmul
 14836 ;;		___wmul
 14837 ;; This function is called by:
 14838 ;;		_printf
 14839 ;; This function uses a non-reentrant model
 14840 ;;
 14841                           
 14842                           	psect	text24
 14843  013DBA                     __ptext24:
 14844                           	opt stack 0
 14845  013DBA                     _scale:
 14846                           	opt stack 22
 14847                           
 14848                           ; BSR set to: 1
 14849                           ;incstack = 0
 14850                           ;scale@scl stored from wreg
 14851  013DBA  0100               	movlb	0	; () banked
 14852  013DBC  6F89               	movwf	scale@scl& (0+255),b
 14853                           
 14854                           ;doprnt.c: 428: if(scl < 0) {
 14855  013DBE  0100               	movlb	0	; () banked
 14856  013DC0  AF89               	btfss	scale@scl& (0+255),7,b
 14857  013DC2  D13C               	goto	l19793
 14858                           
 14859                           ; BSR set to: 0
 14860                           ;doprnt.c: 429: scl = -scl;
 14861  013DC4  0100               	movlb	0	; () banked
 14862  013DC6  6D89               	negf	scale@scl& (0+255),b
 14863                           
 14864                           ;doprnt.c: 430: if(scl>=110)
 14865  013DC8  0100               	movlb	0	; () banked
 14866  013DCA  5189               	movf	scale@scl& (0+255),w,b
 14867  013DCC  0A80               	xorlw	128
 14868  013DCE  0F12               	addlw	-238
 14869  013DD0  A0D8               	btfss	status,0,c
 14870  013DD2  D0B5               	goto	l19783
 14871                           
 14872                           ; BSR set to: 0
 14873                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14874  013DD4  0E00               	movlw	0
 14875  013DD6  0100               	movlb	0	; () banked
 14876  013DD8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14877  013DDA  0E03               	movlw	3
 14878  013DDC  6F70               	movwf	___wmul@multiplicand& (0+255),b
 14879  013DDE  0E00               	movlw	0
 14880  013DE0  0100               	movlb	0	; () banked
 14881  013DE2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 14882  013DE4  0E0A               	movlw	10
 14883  013DE6  6F68               	movwf	___awdiv@divisor& (0+255),b
 14884  013DE8  0E00               	movlw	0
 14885  013DEA  0100               	movlb	0	; () banked
 14886  013DEC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 14887  013DEE  0E64               	movlw	100
 14888  013DF0  6F62               	movwf	___awmod@divisor& (0+255),b
 14889  013DF2  0100               	movlb	0	; () banked
 14890  013DF4  5189               	movf	scale@scl& (0+255),w,b
 14891  013DF6  0100               	movlb	0	; () banked
 14892  013DF8  6F60               	movwf	___awmod@dividend& (0+255),b
 14893  013DFA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 14894  013DFC  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 14895  013DFE  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 14896  013E00  EC47  F0D0         	call	___awmod	;wreg free
 14897  013E04  C060  F066         	movff	?___awmod,___awdiv@dividend
 14898  013E08  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 14899  013E0C  EC10  F0CC         	call	___awdiv	;wreg free
 14900  013E10  0E09               	movlw	9
 14901  013E12  0100               	movlb	0	; () banked
 14902  013E14  2566               	addwf	?___awdiv& (0+255),w,b
 14903  013E16  0100               	movlb	0	; () banked
 14904  013E18  6F6E               	movwf	___wmul@multiplier& (0+255),b
 14905  013E1A  0E00               	movlw	0
 14906  013E1C  0100               	movlb	0	; () banked
 14907  013E1E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 14908  013E20  0100               	movlb	0	; () banked
 14909  013E22  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 14910  013E24  EC59  F0D6         	call	___wmul	;wreg free
 14911  013E28  0EDF               	movlw	low __npowers_
 14912  013E2A  0100               	movlb	0	; () banked
 14913  013E2C  256E               	addwf	?___wmul& (0+255),w,b
 14914  013E2E  6EF6               	movwf	tblptrl,c
 14915  013E30  0EFB               	movlw	high __npowers_
 14916  013E32  0100               	movlb	0	; () banked
 14917  013E34  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 14918  013E36  6EF7               	movwf	tblptrh,c
 14919  013E38                     	if	1	;There are 3 active tblptr bytes
 14920  013E38  6AF8               	clrf	tblptru,c
 14921  013E3A  0E00               	movlw	low (__mediumconst shr (0+16))
 14922  013E3C  22F8               	addwfc	tblptru,f,c
 14923  013E3E                     	endif
 14924  013E3E  0009               	tblrd		*+
 14925  013E40  CFF5 F077          	movff	tablat,___ftmul@f2
 14926  013E44  0009               	tblrd		*+
 14927  013E46  CFF5 F078          	movff	tablat,___ftmul@f2+1
 14928  013E4A  000A               	tblrd		*-
 14929  013E4C  CFF5 F079          	movff	tablat,___ftmul@f2+2
 14930  013E50  0E00               	movlw	0
 14931  013E52  0100               	movlb	0	; () banked
 14932  013E54  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 14933  013E56  0E64               	movlw	100
 14934  013E58  6F68               	movwf	___awdiv@divisor& (0+255),b
 14935  013E5A  0100               	movlb	0	; () banked
 14936  013E5C  5189               	movf	scale@scl& (0+255),w,b
 14937  013E5E  0100               	movlb	0	; () banked
 14938  013E60  6F66               	movwf	___awdiv@dividend& (0+255),b
 14939  013E62  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 14940  013E64  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 14941  013E66  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 14942  013E68  EC10  F0CC         	call	___awdiv	;wreg free
 14943  013E6C  0E12               	movlw	18
 14944  013E6E  0100               	movlb	0	; () banked
 14945  013E70  2566               	addwf	?___awdiv& (0+255),w,b
 14946  013E72  0100               	movlb	0	; () banked
 14947  013E74  6F6E               	movwf	___wmul@multiplier& (0+255),b
 14948  013E76  0E00               	movlw	0
 14949  013E78  0100               	movlb	0	; () banked
 14950  013E7A  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 14951  013E7C  0100               	movlb	0	; () banked
 14952  013E7E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 14953  013E80  0E00               	movlw	0
 14954  013E82  0100               	movlb	0	; () banked
 14955  013E84  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14956  013E86  0E03               	movlw	3
 14957  013E88  6F70               	movwf	___wmul@multiplicand& (0+255),b
 14958  013E8A  EC59  F0D6         	call	___wmul	;wreg free
 14959  013E8E  0EDF               	movlw	low __npowers_
 14960  013E90  0100               	movlb	0	; () banked
 14961  013E92  256E               	addwf	?___wmul& (0+255),w,b
 14962  013E94  6EF6               	movwf	tblptrl,c
 14963  013E96  0EFB               	movlw	high __npowers_
 14964  013E98  0100               	movlb	0	; () banked
 14965  013E9A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 14966  013E9C  6EF7               	movwf	tblptrh,c
 14967  013E9E                     	if	1	;There are 3 active tblptr bytes
 14968  013E9E  6AF8               	clrf	tblptru,c
 14969  013EA0  0E00               	movlw	low (__mediumconst shr (0+16))
 14970  013EA2  22F8               	addwfc	tblptru,f,c
 14971  013EA4                     	endif
 14972  013EA4  0009               	tblrd		*+
 14973  013EA6  CFF5 F074          	movff	tablat,___ftmul@f1
 14974  013EAA  0009               	tblrd		*+
 14975  013EAC  CFF5 F075          	movff	tablat,___ftmul@f1+1
 14976  013EB0  000A               	tblrd		*-
 14977  013EB2  CFF5 F076          	movff	tablat,___ftmul@f1+2
 14978  013EB6  ECA4  F0C0         	call	___ftmul	;wreg free
 14979  013EBA  C074  F086         	movff	?___ftmul,_scale$8150
 14980  013EBE  C075  F087         	movff	?___ftmul+1,_scale$8150+1
 14981  013EC2  C076  F088         	movff	?___ftmul+2,_scale$8150+2
 14982                           
 14983                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14984  013EC6  C086  F074         	movff	_scale$8150,___ftmul@f1
 14985  013ECA  C087  F075         	movff	_scale$8150+1,___ftmul@f1+1
 14986  013ECE  C088  F076         	movff	_scale$8150+2,___ftmul@f1+2
 14987  013ED2  0E00               	movlw	0
 14988  013ED4  0100               	movlb	0	; () banked
 14989  013ED6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14990  013ED8  0E03               	movlw	3
 14991  013EDA  6F70               	movwf	___wmul@multiplicand& (0+255),b
 14992  013EDC  0E00               	movlw	0
 14993  013EDE  0100               	movlb	0	; () banked
 14994  013EE0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 14995  013EE2  0E0A               	movlw	10
 14996  013EE4  6F62               	movwf	___awmod@divisor& (0+255),b
 14997  013EE6  0100               	movlb	0	; () banked
 14998  013EE8  5189               	movf	scale@scl& (0+255),w,b
 14999  013EEA  0100               	movlb	0	; () banked
 15000  013EEC  6F60               	movwf	___awmod@dividend& (0+255),b
 15001  013EEE  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15002  013EF0  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15003  013EF2  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15004  013EF4  EC47  F0D0         	call	___awmod	;wreg free
 15005  013EF8  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15006  013EFC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15007  013F00  EC59  F0D6         	call	___wmul	;wreg free
 15008  013F04  0EDF               	movlw	low __npowers_
 15009  013F06  0100               	movlb	0	; () banked
 15010  013F08  256E               	addwf	?___wmul& (0+255),w,b
 15011  013F0A  6EF6               	movwf	tblptrl,c
 15012  013F0C  0EFB               	movlw	high __npowers_
 15013  013F0E  0100               	movlb	0	; () banked
 15014  013F10  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15015  013F12  6EF7               	movwf	tblptrh,c
 15016  013F14                     	if	1	;There are 3 active tblptr bytes
 15017  013F14  6AF8               	clrf	tblptru,c
 15018  013F16  0E00               	movlw	low (__mediumconst shr (0+16))
 15019  013F18  22F8               	addwfc	tblptru,f,c
 15020  013F1A                     	endif
 15021  013F1A  0009               	tblrd		*+
 15022  013F1C  CFF5 F077          	movff	tablat,___ftmul@f2
 15023  013F20  0009               	tblrd		*+
 15024  013F22  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15025  013F26  000A               	tblrd		*-
 15026  013F28  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15027  013F2C  ECA4  F0C0         	call	___ftmul	;wreg free
 15028  013F30  C074  F083         	movff	?___ftmul,?_scale
 15029  013F34  C075  F084         	movff	?___ftmul+1,?_scale+1
 15030  013F38  C076  F085         	movff	?___ftmul+2,?_scale+2
 15031  013F3C  0012               	return	
 15032  013F3E                     l19783:
 15033                           
 15034                           ;doprnt.c: 432: else if(scl > 10)
 15035  013F3E  0100               	movlb	0	; () banked
 15036  013F40  5189               	movf	scale@scl& (0+255),w,b
 15037  013F42  0A80               	xorlw	128
 15038  013F44  0F75               	addlw	-139
 15039  013F46  A0D8               	btfss	status,0,c
 15040  013F48  D063               	goto	l19789
 15041                           
 15042                           ; BSR set to: 0
 15043                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 15044  013F4A  0E00               	movlw	0
 15045  013F4C  0100               	movlb	0	; () banked
 15046  013F4E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15047  013F50  0E0A               	movlw	10
 15048  013F52  6F68               	movwf	___awdiv@divisor& (0+255),b
 15049  013F54  0100               	movlb	0	; () banked
 15050  013F56  5189               	movf	scale@scl& (0+255),w,b
 15051  013F58  0100               	movlb	0	; () banked
 15052  013F5A  6F66               	movwf	___awdiv@dividend& (0+255),b
 15053  013F5C  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15054  013F5E  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 15055  013F60  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 15056  013F62  EC10  F0CC         	call	___awdiv	;wreg free
 15057  013F66  0E09               	movlw	9
 15058  013F68  0100               	movlb	0	; () banked
 15059  013F6A  2566               	addwf	?___awdiv& (0+255),w,b
 15060  013F6C  0100               	movlb	0	; () banked
 15061  013F6E  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15062  013F70  0E00               	movlw	0
 15063  013F72  0100               	movlb	0	; () banked
 15064  013F74  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15065  013F76  0100               	movlb	0	; () banked
 15066  013F78  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15067  013F7A  0E00               	movlw	0
 15068  013F7C  0100               	movlb	0	; () banked
 15069  013F7E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15070  013F80  0E03               	movlw	3
 15071  013F82  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15072  013F84  EC59  F0D6         	call	___wmul	;wreg free
 15073  013F88  0EDF               	movlw	low __npowers_
 15074  013F8A  0100               	movlb	0	; () banked
 15075  013F8C  256E               	addwf	?___wmul& (0+255),w,b
 15076  013F8E  6EF6               	movwf	tblptrl,c
 15077  013F90  0EFB               	movlw	high __npowers_
 15078  013F92  0100               	movlb	0	; () banked
 15079  013F94  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15080  013F96  6EF7               	movwf	tblptrh,c
 15081  013F98                     	if	1	;There are 3 active tblptr bytes
 15082  013F98  6AF8               	clrf	tblptru,c
 15083  013F9A  0E00               	movlw	low (__mediumconst shr (0+16))
 15084  013F9C  22F8               	addwfc	tblptru,f,c
 15085  013F9E                     	endif
 15086  013F9E  0009               	tblrd		*+
 15087  013FA0  CFF5 F074          	movff	tablat,___ftmul@f1
 15088  013FA4  0009               	tblrd		*+
 15089  013FA6  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15090  013FAA  000A               	tblrd		*-
 15091  013FAC  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15092  013FB0  0E00               	movlw	0
 15093  013FB2  0100               	movlb	0	; () banked
 15094  013FB4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15095  013FB6  0E03               	movlw	3
 15096  013FB8  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15097  013FBA  0E00               	movlw	0
 15098  013FBC  0100               	movlb	0	; () banked
 15099  013FBE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15100  013FC0  0E0A               	movlw	10
 15101  013FC2  6F62               	movwf	___awmod@divisor& (0+255),b
 15102  013FC4  0100               	movlb	0	; () banked
 15103  013FC6  5189               	movf	scale@scl& (0+255),w,b
 15104  013FC8  0100               	movlb	0	; () banked
 15105  013FCA  6F60               	movwf	___awmod@dividend& (0+255),b
 15106  013FCC  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15107  013FCE  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15108  013FD0  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15109  013FD2  EC47  F0D0         	call	___awmod	;wreg free
 15110  013FD6  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15111  013FDA  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15112  013FDE  EC59  F0D6         	call	___wmul	;wreg free
 15113  013FE2  0EDF               	movlw	low __npowers_
 15114  013FE4  0100               	movlb	0	; () banked
 15115  013FE6  256E               	addwf	?___wmul& (0+255),w,b
 15116  013FE8  6EF6               	movwf	tblptrl,c
 15117  013FEA  0EFB               	movlw	high __npowers_
 15118  013FEC  0100               	movlb	0	; () banked
 15119  013FEE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15120  013FF0  6EF7               	movwf	tblptrh,c
 15121  013FF2                     	if	1	;There are 3 active tblptr bytes
 15122  013FF2  6AF8               	clrf	tblptru,c
 15123  013FF4  0E00               	movlw	low (__mediumconst shr (0+16))
 15124  013FF6  22F8               	addwfc	tblptru,f,c
 15125  013FF8                     	endif
 15126  013FF8  0009               	tblrd		*+
 15127  013FFA  CFF5 F077          	movff	tablat,___ftmul@f2
 15128  013FFE  0009               	tblrd		*+
 15129  014000  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15130  014004  000A               	tblrd		*-
 15131  014006  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15132  01400A  ECA4  F0C0         	call	___ftmul	;wreg free
 15133  01400E  D790               	goto	L7
 15134  014010                     l19789:
 15135                           
 15136                           ;doprnt.c: 434: return _npowers_[scl];
 15137  014010  0100               	movlb	0	; () banked
 15138  014012  5189               	movf	scale@scl& (0+255),w,b
 15139  014014  0D03               	mullw	3
 15140  014016  0EDF               	movlw	low __npowers_
 15141  014018  24F3               	addwf	prodl,w,c
 15142  01401A  6EF6               	movwf	tblptrl,c
 15143  01401C  0EFB               	movlw	high __npowers_
 15144  01401E  20F4               	addwfc	prodh,w,c
 15145  014020  6EF7               	movwf	tblptrh,c
 15146  014022                     	if	1	;There are 3 active tblptr bytes
 15147  014022  6AF8               	clrf	tblptru,c
 15148  014024  0E00               	movlw	low (__mediumconst shr (0+16))
 15149  014026  22F8               	addwfc	tblptru,f,c
 15150  014028                     	endif
 15151  014028  0009               	tblrd		*+
 15152  01402A  CFF5 F083          	movff	tablat,?_scale
 15153  01402E  0009               	tblrd		*+
 15154  014030  CFF5 F084          	movff	tablat,?_scale+1
 15155  014034  000A               	tblrd		*-
 15156  014036  CFF5 F085          	movff	tablat,?_scale+2
 15157                           
 15158                           ; BSR set to: 0
 15159  01403A  0012               	return	
 15160  01403C                     l19793:
 15161                           
 15162                           ; BSR set to: 0
 15163                           ;doprnt.c: 435: }
 15164                           ;doprnt.c: 436: if(scl>=110)
 15165  01403C  0100               	movlb	0	; () banked
 15166  01403E  5189               	movf	scale@scl& (0+255),w,b
 15167  014040  0A80               	xorlw	128
 15168  014042  0F12               	addlw	-238
 15169  014044  A0D8               	btfss	status,0,c
 15170  014046  D0B5               	goto	l19801
 15171                           
 15172                           ; BSR set to: 0
 15173                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15174  014048  0E00               	movlw	0
 15175  01404A  0100               	movlb	0	; () banked
 15176  01404C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15177  01404E  0E03               	movlw	3
 15178  014050  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15179  014052  0E00               	movlw	0
 15180  014054  0100               	movlb	0	; () banked
 15181  014056  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15182  014058  0E0A               	movlw	10
 15183  01405A  6F68               	movwf	___awdiv@divisor& (0+255),b
 15184  01405C  0E00               	movlw	0
 15185  01405E  0100               	movlb	0	; () banked
 15186  014060  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15187  014062  0E64               	movlw	100
 15188  014064  6F62               	movwf	___awmod@divisor& (0+255),b
 15189  014066  0100               	movlb	0	; () banked
 15190  014068  5189               	movf	scale@scl& (0+255),w,b
 15191  01406A  0100               	movlb	0	; () banked
 15192  01406C  6F60               	movwf	___awmod@dividend& (0+255),b
 15193  01406E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15194  014070  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15195  014072  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15196  014074  EC47  F0D0         	call	___awmod	;wreg free
 15197  014078  C060  F066         	movff	?___awmod,___awdiv@dividend
 15198  01407C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 15199  014080  EC10  F0CC         	call	___awdiv	;wreg free
 15200  014084  0E09               	movlw	9
 15201  014086  0100               	movlb	0	; () banked
 15202  014088  2566               	addwf	?___awdiv& (0+255),w,b
 15203  01408A  0100               	movlb	0	; () banked
 15204  01408C  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15205  01408E  0E00               	movlw	0
 15206  014090  0100               	movlb	0	; () banked
 15207  014092  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15208  014094  0100               	movlb	0	; () banked
 15209  014096  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15210  014098  EC59  F0D6         	call	___wmul	;wreg free
 15211  01409C  0E06               	movlw	low __powers_
 15212  01409E  0100               	movlb	0	; () banked
 15213  0140A0  256E               	addwf	?___wmul& (0+255),w,b
 15214  0140A2  6EF6               	movwf	tblptrl,c
 15215  0140A4  0EFC               	movlw	high __powers_
 15216  0140A6  0100               	movlb	0	; () banked
 15217  0140A8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15218  0140AA  6EF7               	movwf	tblptrh,c
 15219  0140AC                     	if	1	;There are 3 active tblptr bytes
 15220  0140AC  6AF8               	clrf	tblptru,c
 15221  0140AE  0E00               	movlw	low (__mediumconst shr (0+16))
 15222  0140B0  22F8               	addwfc	tblptru,f,c
 15223  0140B2                     	endif
 15224  0140B2  0009               	tblrd		*+
 15225  0140B4  CFF5 F077          	movff	tablat,___ftmul@f2
 15226  0140B8  0009               	tblrd		*+
 15227  0140BA  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15228  0140BE  000A               	tblrd		*-
 15229  0140C0  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15230  0140C4  0E00               	movlw	0
 15231  0140C6  0100               	movlb	0	; () banked
 15232  0140C8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15233  0140CA  0E64               	movlw	100
 15234  0140CC  6F68               	movwf	___awdiv@divisor& (0+255),b
 15235  0140CE  0100               	movlb	0	; () banked
 15236  0140D0  5189               	movf	scale@scl& (0+255),w,b
 15237  0140D2  0100               	movlb	0	; () banked
 15238  0140D4  6F66               	movwf	___awdiv@dividend& (0+255),b
 15239  0140D6  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15240  0140D8  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 15241  0140DA  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 15242  0140DC  EC10  F0CC         	call	___awdiv	;wreg free
 15243  0140E0  0E12               	movlw	18
 15244  0140E2  0100               	movlb	0	; () banked
 15245  0140E4  2566               	addwf	?___awdiv& (0+255),w,b
 15246  0140E6  0100               	movlb	0	; () banked
 15247  0140E8  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15248  0140EA  0E00               	movlw	0
 15249  0140EC  0100               	movlb	0	; () banked
 15250  0140EE  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15251  0140F0  0100               	movlb	0	; () banked
 15252  0140F2  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15253  0140F4  0E00               	movlw	0
 15254  0140F6  0100               	movlb	0	; () banked
 15255  0140F8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15256  0140FA  0E03               	movlw	3
 15257  0140FC  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15258  0140FE  EC59  F0D6         	call	___wmul	;wreg free
 15259  014102  0E06               	movlw	low __powers_
 15260  014104  0100               	movlb	0	; () banked
 15261  014106  256E               	addwf	?___wmul& (0+255),w,b
 15262  014108  6EF6               	movwf	tblptrl,c
 15263  01410A  0EFC               	movlw	high __powers_
 15264  01410C  0100               	movlb	0	; () banked
 15265  01410E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15266  014110  6EF7               	movwf	tblptrh,c
 15267  014112                     	if	1	;There are 3 active tblptr bytes
 15268  014112  6AF8               	clrf	tblptru,c
 15269  014114  0E00               	movlw	low (__mediumconst shr (0+16))
 15270  014116  22F8               	addwfc	tblptru,f,c
 15271  014118                     	endif
 15272  014118  0009               	tblrd		*+
 15273  01411A  CFF5 F074          	movff	tablat,___ftmul@f1
 15274  01411E  0009               	tblrd		*+
 15275  014120  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15276  014124  000A               	tblrd		*-
 15277  014126  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15278  01412A  ECA4  F0C0         	call	___ftmul	;wreg free
 15279  01412E  C074  F086         	movff	?___ftmul,_scale$8150
 15280  014132  C075  F087         	movff	?___ftmul+1,_scale$8150+1
 15281  014136  C076  F088         	movff	?___ftmul+2,_scale$8150+2
 15282                           
 15283                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 15284  01413A  C086  F074         	movff	_scale$8150,___ftmul@f1
 15285  01413E  C087  F075         	movff	_scale$8150+1,___ftmul@f1+1
 15286  014142  C088  F076         	movff	_scale$8150+2,___ftmul@f1+2
 15287  014146  0E00               	movlw	0
 15288  014148  0100               	movlb	0	; () banked
 15289  01414A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15290  01414C  0E03               	movlw	3
 15291  01414E  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15292  014150  0E00               	movlw	0
 15293  014152  0100               	movlb	0	; () banked
 15294  014154  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15295  014156  0E0A               	movlw	10
 15296  014158  6F62               	movwf	___awmod@divisor& (0+255),b
 15297  01415A  0100               	movlb	0	; () banked
 15298  01415C  5189               	movf	scale@scl& (0+255),w,b
 15299  01415E  0100               	movlb	0	; () banked
 15300  014160  6F60               	movwf	___awmod@dividend& (0+255),b
 15301  014162  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15302  014164  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15303  014166  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15304  014168  EC47  F0D0         	call	___awmod	;wreg free
 15305  01416C  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15306  014170  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15307  014174  EC59  F0D6         	call	___wmul	;wreg free
 15308  014178  0E06               	movlw	low __powers_
 15309  01417A  0100               	movlb	0	; () banked
 15310  01417C  256E               	addwf	?___wmul& (0+255),w,b
 15311  01417E  6EF6               	movwf	tblptrl,c
 15312  014180  0EFC               	movlw	high __powers_
 15313  014182  0100               	movlb	0	; () banked
 15314  014184  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15315  014186  6EF7               	movwf	tblptrh,c
 15316  014188                     	if	1	;There are 3 active tblptr bytes
 15317  014188  6AF8               	clrf	tblptru,c
 15318  01418A  0E00               	movlw	low (__mediumconst shr (0+16))
 15319  01418C  22F8               	addwfc	tblptru,f,c
 15320  01418E                     	endif
 15321  01418E  0009               	tblrd		*+
 15322  014190  CFF5 F077          	movff	tablat,___ftmul@f2
 15323  014194  0009               	tblrd		*+
 15324  014196  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15325  01419A  000A               	tblrd		*-
 15326  01419C  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15327  0141A0  ECA4  F0C0         	call	___ftmul	;wreg free
 15328  0141A4  C074  F083         	movff	?___ftmul,?_scale
 15329  0141A8  C075  F084         	movff	?___ftmul+1,?_scale+1
 15330  0141AC  C076  F085         	movff	?___ftmul+2,?_scale+2
 15331  0141B0  0012               	return	
 15332  0141B2                     l19801:
 15333                           
 15334                           ;doprnt.c: 438: else if(scl > 10)
 15335  0141B2  0100               	movlb	0	; () banked
 15336  0141B4  5189               	movf	scale@scl& (0+255),w,b
 15337  0141B6  0A80               	xorlw	128
 15338  0141B8  0F75               	addlw	-139
 15339  0141BA  A0D8               	btfss	status,0,c
 15340  0141BC  D063               	goto	l19807
 15341                           
 15342                           ; BSR set to: 0
 15343                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 15344  0141BE  0E00               	movlw	0
 15345  0141C0  0100               	movlb	0	; () banked
 15346  0141C2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15347  0141C4  0E0A               	movlw	10
 15348  0141C6  6F68               	movwf	___awdiv@divisor& (0+255),b
 15349  0141C8  0100               	movlb	0	; () banked
 15350  0141CA  5189               	movf	scale@scl& (0+255),w,b
 15351  0141CC  0100               	movlb	0	; () banked
 15352  0141CE  6F66               	movwf	___awdiv@dividend& (0+255),b
 15353  0141D0  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15354  0141D2  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 15355  0141D4  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 15356  0141D6  EC10  F0CC         	call	___awdiv	;wreg free
 15357  0141DA  0E09               	movlw	9
 15358  0141DC  0100               	movlb	0	; () banked
 15359  0141DE  2566               	addwf	?___awdiv& (0+255),w,b
 15360  0141E0  0100               	movlb	0	; () banked
 15361  0141E2  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15362  0141E4  0E00               	movlw	0
 15363  0141E6  0100               	movlb	0	; () banked
 15364  0141E8  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15365  0141EA  0100               	movlb	0	; () banked
 15366  0141EC  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15367  0141EE  0E00               	movlw	0
 15368  0141F0  0100               	movlb	0	; () banked
 15369  0141F2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15370  0141F4  0E03               	movlw	3
 15371  0141F6  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15372  0141F8  EC59  F0D6         	call	___wmul	;wreg free
 15373  0141FC  0E06               	movlw	low __powers_
 15374  0141FE  0100               	movlb	0	; () banked
 15375  014200  256E               	addwf	?___wmul& (0+255),w,b
 15376  014202  6EF6               	movwf	tblptrl,c
 15377  014204  0EFC               	movlw	high __powers_
 15378  014206  0100               	movlb	0	; () banked
 15379  014208  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15380  01420A  6EF7               	movwf	tblptrh,c
 15381  01420C                     	if	1	;There are 3 active tblptr bytes
 15382  01420C  6AF8               	clrf	tblptru,c
 15383  01420E  0E00               	movlw	low (__mediumconst shr (0+16))
 15384  014210  22F8               	addwfc	tblptru,f,c
 15385  014212                     	endif
 15386  014212  0009               	tblrd		*+
 15387  014214  CFF5 F074          	movff	tablat,___ftmul@f1
 15388  014218  0009               	tblrd		*+
 15389  01421A  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15390  01421E  000A               	tblrd		*-
 15391  014220  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15392  014224  0E00               	movlw	0
 15393  014226  0100               	movlb	0	; () banked
 15394  014228  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15395  01422A  0E03               	movlw	3
 15396  01422C  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15397  01422E  0E00               	movlw	0
 15398  014230  0100               	movlb	0	; () banked
 15399  014232  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15400  014234  0E0A               	movlw	10
 15401  014236  6F62               	movwf	___awmod@divisor& (0+255),b
 15402  014238  0100               	movlb	0	; () banked
 15403  01423A  5189               	movf	scale@scl& (0+255),w,b
 15404  01423C  0100               	movlb	0	; () banked
 15405  01423E  6F60               	movwf	___awmod@dividend& (0+255),b
 15406  014240  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15407  014242  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 15408  014244  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 15409  014246  EC47  F0D0         	call	___awmod	;wreg free
 15410  01424A  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15411  01424E  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15412  014252  EC59  F0D6         	call	___wmul	;wreg free
 15413  014256  0E06               	movlw	low __powers_
 15414  014258  0100               	movlb	0	; () banked
 15415  01425A  256E               	addwf	?___wmul& (0+255),w,b
 15416  01425C  6EF6               	movwf	tblptrl,c
 15417  01425E  0EFC               	movlw	high __powers_
 15418  014260  0100               	movlb	0	; () banked
 15419  014262  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15420  014264  6EF7               	movwf	tblptrh,c
 15421  014266                     	if	1	;There are 3 active tblptr bytes
 15422  014266  6AF8               	clrf	tblptru,c
 15423  014268  0E00               	movlw	low (__mediumconst shr (0+16))
 15424  01426A  22F8               	addwfc	tblptru,f,c
 15425  01426C                     	endif
 15426  01426C  0009               	tblrd		*+
 15427  01426E  CFF5 F077          	movff	tablat,___ftmul@f2
 15428  014272  0009               	tblrd		*+
 15429  014274  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15430  014278  000A               	tblrd		*-
 15431  01427A  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15432  01427E  ECA4  F0C0         	call	___ftmul	;wreg free
 15433  014282  D790               	goto	L8
 15434  014284                     l19807:
 15435                           
 15436                           ;doprnt.c: 440: return _powers_[scl];
 15437  014284  0100               	movlb	0	; () banked
 15438  014286  5189               	movf	scale@scl& (0+255),w,b
 15439  014288  0D03               	mullw	3
 15440  01428A  0E06               	movlw	low __powers_
 15441  01428C  24F3               	addwf	prodl,w,c
 15442  01428E  6EF6               	movwf	tblptrl,c
 15443  014290  0EFC               	movlw	high __powers_
 15444  014292  20F4               	addwfc	prodh,w,c
 15445  014294  6EF7               	movwf	tblptrh,c
 15446  014296                     	if	1	;There are 3 active tblptr bytes
 15447  014296  6AF8               	clrf	tblptru,c
 15448  014298  0E00               	movlw	low (__mediumconst shr (0+16))
 15449  01429A  22F8               	addwfc	tblptru,f,c
 15450  01429C                     	endif
 15451  01429C  0009               	tblrd		*+
 15452  01429E  CFF5 F083          	movff	tablat,?_scale
 15453  0142A2  0009               	tblrd		*+
 15454  0142A4  CFF5 F084          	movff	tablat,?_scale+1
 15455  0142A8  000A               	tblrd		*-
 15456  0142AA  CFF5 F085          	movff	tablat,?_scale+2
 15457  0142AE  0012               	return	
 15458  0142B0                     __end_of_scale:
 15459                           	opt stack 0
 15460                           tblptru	equ	0xFF8
 15461                           tblptrh	equ	0xFF7
 15462                           tblptrl	equ	0xFF6
 15463                           tablat	equ	0xFF5
 15464                           prodh	equ	0xFF4
 15465                           prodl	equ	0xFF3
 15466                           intcon	equ	0xFF2
 15467                           postinc0	equ	0xFEE
 15468                           wreg	equ	0xFE8
 15469                           postdec1	equ	0xFE5
 15470                           fsr1h	equ	0xFE2
 15471                           fsr1l	equ	0xFE1
 15472                           indf2	equ	0xFDF
 15473                           postinc2	equ	0xFDE
 15474                           postdec2	equ	0xFDD
 15475                           fsr2h	equ	0xFDA
 15476                           fsr2l	equ	0xFD9
 15477                           status	equ	0xFD8
 15478                           
 15479 ;; *************** function _putch *****************
 15480 ;; Defined at:
 15481 ;;		line 575 in file "UART.c"
 15482 ;; Parameters:    Size  Location     Type
 15483 ;;  data            1    wreg     unsigned char 
 15484 ;; Auto vars:     Size  Location     Type
 15485 ;;  data            1    0[BANK0 ] unsigned char 
 15486 ;; Return value:  Size  Location     Type
 15487 ;;                  1    wreg      void 
 15488 ;; Registers used:
 15489 ;;		wreg
 15490 ;; Tracked objects:
 15491 ;;		On entry : 0/0
 15492 ;;		On exit  : 0/0
 15493 ;;		Unchanged: 0/0
 15494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15499 ;;Total ram usage:        1 bytes
 15500 ;; Hardware stack levels used:    1
 15501 ;; Hardware stack levels required when called:    3
 15502 ;; This function calls:
 15503 ;;		Nothing
 15504 ;; This function is called by:
 15505 ;;		_printf
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           	psect	text25
 15510  01B02C                     __ptext25:
 15511                           	opt stack 0
 15512  01B02C                     _putch:
 15513                           	opt stack 24
 15514                           
 15515                           ;incstack = 0
 15516                           ;putch@data stored from wreg
 15517  01B02C  0100               	movlb	0	; () banked
 15518  01B02E  6F60               	movwf	putch@data& (0+255),b
 15519  01B030                     l2445:
 15520  01B030  A89E               	btfss	3998,4,c	;volatile
 15521  01B032  D7FE               	goto	l2445
 15522                           
 15523                           ;UART.c: 579: TXREG1 = data;
 15524  01B034  C060  FFAD         	movff	putch@data,4013	;volatile
 15525  01B038  0012               	return		;funcret
 15526  01B03A                     __end_of_putch:
 15527                           	opt stack 0
 15528                           tblptru	equ	0xFF8
 15529                           tblptrh	equ	0xFF7
 15530                           tblptrl	equ	0xFF6
 15531                           tablat	equ	0xFF5
 15532                           prodh	equ	0xFF4
 15533                           prodl	equ	0xFF3
 15534                           intcon	equ	0xFF2
 15535                           postinc0	equ	0xFEE
 15536                           wreg	equ	0xFE8
 15537                           postdec1	equ	0xFE5
 15538                           fsr1h	equ	0xFE2
 15539                           fsr1l	equ	0xFE1
 15540                           indf2	equ	0xFDF
 15541                           postinc2	equ	0xFDE
 15542                           postdec2	equ	0xFDD
 15543                           fsr2h	equ	0xFDA
 15544                           fsr2l	equ	0xFD9
 15545                           status	equ	0xFD8
 15546                           
 15547 ;; *************** function _isdigit *****************
 15548 ;; Defined at:
 15549 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
 15550 ;; Parameters:    Size  Location     Type
 15551 ;;  c               1    wreg     unsigned char 
 15552 ;; Auto vars:     Size  Location     Type
 15553 ;;  c               1    2[BANK0 ] unsigned char 
 15554 ;; Return value:  Size  Location     Type
 15555 ;;		None               void
 15556 ;; Registers used:
 15557 ;;		wreg, status,2, status,0
 15558 ;; Tracked objects:
 15559 ;;		On entry : 0/0
 15560 ;;		On exit  : 0/0
 15561 ;;		Unchanged: 0/0
 15562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15566 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15567 ;;Total ram usage:        3 bytes
 15568 ;; Hardware stack levels used:    1
 15569 ;; Hardware stack levels required when called:    3
 15570 ;; This function calls:
 15571 ;;		Nothing
 15572 ;; This function is called by:
 15573 ;;		_printf
 15574 ;; This function uses a non-reentrant model
 15575 ;;
 15576                           
 15577                           	psect	text26
 15578  01AE5E                     __ptext26:
 15579                           	opt stack 0
 15580  01AE5E                     _isdigit:
 15581                           	opt stack 24
 15582                           
 15583                           ;incstack = 0
 15584                           ;isdigit@c stored from wreg
 15585  01AE5E  0100               	movlb	0	; () banked
 15586  01AE60  6F62               	movwf	isdigit@c& (0+255),b
 15587  01AE62  0E00               	movlw	0
 15588  01AE64  0100               	movlb	0	; () banked
 15589  01AE66  6F61               	movwf	_isdigit$7616& (0+255),b
 15590                           
 15591                           ; BSR set to: 0
 15592  01AE68  0E3A               	movlw	58
 15593  01AE6A  0100               	movlb	0	; () banked
 15594  01AE6C  6162               	cpfslt	isdigit@c& (0+255),b
 15595  01AE6E  D007               	goto	l19819
 15596                           
 15597                           ; BSR set to: 0
 15598  01AE70  0E2F               	movlw	47
 15599  01AE72  0100               	movlb	0	; () banked
 15600  01AE74  6562               	cpfsgt	isdigit@c& (0+255),b
 15601  01AE76  D003               	goto	l19819
 15602                           
 15603                           ; BSR set to: 0
 15604  01AE78  0E01               	movlw	1
 15605  01AE7A  0100               	movlb	0	; () banked
 15606  01AE7C  6F61               	movwf	_isdigit$7616& (0+255),b
 15607  01AE7E                     l19819:
 15608                           
 15609                           ; BSR set to: 0
 15610  01AE7E  C061  F060         	movff	_isdigit$7616,??_isdigit
 15611  01AE82  0100               	movlb	0	; () banked
 15612  01AE84  3160               	rrcf	??_isdigit& (0+255),w,b
 15613  01AE86  0012               	return	
 15614  01AE88                     __end_of_isdigit:
 15615                           	opt stack 0
 15616                           tblptru	equ	0xFF8
 15617                           tblptrh	equ	0xFF7
 15618                           tblptrl	equ	0xFF6
 15619                           tablat	equ	0xFF5
 15620                           prodh	equ	0xFF4
 15621                           prodl	equ	0xFF3
 15622                           intcon	equ	0xFF2
 15623                           postinc0	equ	0xFEE
 15624                           wreg	equ	0xFE8
 15625                           postdec1	equ	0xFE5
 15626                           fsr1h	equ	0xFE2
 15627                           fsr1l	equ	0xFE1
 15628                           indf2	equ	0xFDF
 15629                           postinc2	equ	0xFDE
 15630                           postdec2	equ	0xFDD
 15631                           fsr2h	equ	0xFDA
 15632                           fsr2l	equ	0xFD9
 15633                           status	equ	0xFD8
 15634                           
 15635 ;; *************** function _fround *****************
 15636 ;; Defined at:
 15637 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;  prec            1    wreg     unsigned char 
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;  prec            1   44[BANK0 ] unsigned char 
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  3   35[BANK0 ] unsigned char 
 15644 ;; Registers used:
 15645 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15651 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15652 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15654 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15655 ;;Total ram usage:       10 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; Hardware stack levels required when called:    5
 15658 ;; This function calls:
 15659 ;;		___awdiv
 15660 ;;		___awmod
 15661 ;;		___ftmul
 15662 ;;		___wmul
 15663 ;; This function is called by:
 15664 ;;		_printf
 15665 ;; This function uses a non-reentrant model
 15666 ;;
 15667                           
 15668                           	psect	text27
 15669  01581C                     __ptext27:
 15670                           	opt stack 0
 15671  01581C                     _fround:
 15672                           	opt stack 22
 15673                           
 15674                           ; BSR set to: 0
 15675                           ;incstack = 0
 15676                           ;fround@prec stored from wreg
 15677  01581C  0100               	movlb	0	; () banked
 15678  01581E  6F8C               	movwf	fround@prec& (0+255),b
 15679                           
 15680                           ;doprnt.c: 413: if(prec>=110)
 15681  015820  0E6D               	movlw	109
 15682  015822  0100               	movlb	0	; () banked
 15683  015824  658C               	cpfsgt	fround@prec& (0+255),b
 15684  015826  D0C3               	goto	l19761
 15685                           
 15686                           ; BSR set to: 0
 15687                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15688  015828  0E00               	movlw	0
 15689  01582A  0100               	movlb	0	; () banked
 15690  01582C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15691  01582E  0E03               	movlw	3
 15692  015830  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15693  015832  0E00               	movlw	0
 15694  015834  0100               	movlb	0	; () banked
 15695  015836  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15696  015838  0E0A               	movlw	10
 15697  01583A  6F68               	movwf	___awdiv@divisor& (0+255),b
 15698  01583C  0E00               	movlw	0
 15699  01583E  0100               	movlb	0	; () banked
 15700  015840  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15701  015842  0E64               	movlw	100
 15702  015844  6F62               	movwf	___awmod@divisor& (0+255),b
 15703  015846  C08C  F060         	movff	fround@prec,___awmod@dividend
 15704  01584A  0100               	movlb	0	; () banked
 15705  01584C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15706  01584E  EC47  F0D0         	call	___awmod	;wreg free
 15707  015852  C060  F066         	movff	?___awmod,___awdiv@dividend
 15708  015856  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 15709  01585A  EC10  F0CC         	call	___awdiv	;wreg free
 15710  01585E  0E09               	movlw	9
 15711  015860  0100               	movlb	0	; () banked
 15712  015862  2566               	addwf	?___awdiv& (0+255),w,b
 15713  015864  0100               	movlb	0	; () banked
 15714  015866  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15715  015868  0E00               	movlw	0
 15716  01586A  0100               	movlb	0	; () banked
 15717  01586C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15718  01586E  0100               	movlb	0	; () banked
 15719  015870  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15720  015872  EC59  F0D6         	call	___wmul	;wreg free
 15721  015876  0EDF               	movlw	low __npowers_
 15722  015878  0100               	movlb	0	; () banked
 15723  01587A  256E               	addwf	?___wmul& (0+255),w,b
 15724  01587C  6EF6               	movwf	tblptrl,c
 15725  01587E  0EFB               	movlw	high __npowers_
 15726  015880  0100               	movlb	0	; () banked
 15727  015882  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15728  015884  6EF7               	movwf	tblptrh,c
 15729  015886                     	if	1	;There are 3 active tblptr bytes
 15730  015886  6AF8               	clrf	tblptru,c
 15731  015888  0E00               	movlw	low (__mediumconst shr (0+16))
 15732  01588A  22F8               	addwfc	tblptru,f,c
 15733  01588C                     	endif
 15734  01588C  0009               	tblrd		*+
 15735  01588E  CFF5 F077          	movff	tablat,___ftmul@f2
 15736  015892  0009               	tblrd		*+
 15737  015894  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15738  015898  000A               	tblrd		*-
 15739  01589A  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15740  01589E  0E00               	movlw	0
 15741  0158A0  0100               	movlb	0	; () banked
 15742  0158A2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15743  0158A4  0E64               	movlw	100
 15744  0158A6  6F68               	movwf	___awdiv@divisor& (0+255),b
 15745  0158A8  C08C  F066         	movff	fround@prec,___awdiv@dividend
 15746  0158AC  0100               	movlb	0	; () banked
 15747  0158AE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15748  0158B0  EC10  F0CC         	call	___awdiv	;wreg free
 15749  0158B4  0E12               	movlw	18
 15750  0158B6  0100               	movlb	0	; () banked
 15751  0158B8  2566               	addwf	?___awdiv& (0+255),w,b
 15752  0158BA  0100               	movlb	0	; () banked
 15753  0158BC  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15754  0158BE  0E00               	movlw	0
 15755  0158C0  0100               	movlb	0	; () banked
 15756  0158C2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15757  0158C4  0100               	movlb	0	; () banked
 15758  0158C6  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15759  0158C8  0E00               	movlw	0
 15760  0158CA  0100               	movlb	0	; () banked
 15761  0158CC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15762  0158CE  0E03               	movlw	3
 15763  0158D0  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15764  0158D2  EC59  F0D6         	call	___wmul	;wreg free
 15765  0158D6  0EDF               	movlw	low __npowers_
 15766  0158D8  0100               	movlb	0	; () banked
 15767  0158DA  256E               	addwf	?___wmul& (0+255),w,b
 15768  0158DC  6EF6               	movwf	tblptrl,c
 15769  0158DE  0EFB               	movlw	high __npowers_
 15770  0158E0  0100               	movlb	0	; () banked
 15771  0158E2  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15772  0158E4  6EF7               	movwf	tblptrh,c
 15773  0158E6                     	if	1	;There are 3 active tblptr bytes
 15774  0158E6  6AF8               	clrf	tblptru,c
 15775  0158E8  0E00               	movlw	low (__mediumconst shr (0+16))
 15776  0158EA  22F8               	addwfc	tblptru,f,c
 15777  0158EC                     	endif
 15778  0158EC  0009               	tblrd		*+
 15779  0158EE  CFF5 F074          	movff	tablat,___ftmul@f1
 15780  0158F2  0009               	tblrd		*+
 15781  0158F4  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15782  0158F8  000A               	tblrd		*-
 15783  0158FA  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15784  0158FE  ECA4  F0C0         	call	___ftmul	;wreg free
 15785  015902  C074  F089         	movff	?___ftmul,_fround$8148
 15786  015906  C075  F08A         	movff	?___ftmul+1,_fround$8148+1
 15787  01590A  C076  F08B         	movff	?___ftmul+2,_fround$8148+2
 15788                           
 15789                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15790  01590E  0E00               	movlw	0
 15791  015910  0100               	movlb	0	; () banked
 15792  015912  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15793  015914  0E03               	movlw	3
 15794  015916  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15795  015918  0E00               	movlw	0
 15796  01591A  0100               	movlb	0	; () banked
 15797  01591C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15798  01591E  0E0A               	movlw	10
 15799  015920  6F62               	movwf	___awmod@divisor& (0+255),b
 15800  015922  C08C  F060         	movff	fround@prec,___awmod@dividend
 15801  015926  0100               	movlb	0	; () banked
 15802  015928  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15803  01592A  EC47  F0D0         	call	___awmod	;wreg free
 15804  01592E  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15805  015932  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15806  015936  EC59  F0D6         	call	___wmul	;wreg free
 15807  01593A  0EDF               	movlw	low __npowers_
 15808  01593C  0100               	movlb	0	; () banked
 15809  01593E  256E               	addwf	?___wmul& (0+255),w,b
 15810  015940  6EF6               	movwf	tblptrl,c
 15811  015942  0EFB               	movlw	high __npowers_
 15812  015944  0100               	movlb	0	; () banked
 15813  015946  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15814  015948  6EF7               	movwf	tblptrh,c
 15815  01594A                     	if	1	;There are 3 active tblptr bytes
 15816  01594A  6AF8               	clrf	tblptru,c
 15817  01594C  0E00               	movlw	low (__mediumconst shr (0+16))
 15818  01594E  22F8               	addwfc	tblptru,f,c
 15819  015950                     	endif
 15820  015950  0009               	tblrd		*+
 15821  015952  CFF5 F077          	movff	tablat,___ftmul@f2
 15822  015956  0009               	tblrd		*+
 15823  015958  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15824  01595C  000A               	tblrd		*-
 15825  01595E  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15826  015962  C089  F074         	movff	_fround$8148,___ftmul@f1
 15827  015966  C08A  F075         	movff	_fround$8148+1,___ftmul@f1+1
 15828  01596A  C08B  F076         	movff	_fround$8148+2,___ftmul@f1+2
 15829  01596E  ECA4  F0C0         	call	___ftmul	;wreg free
 15830  015972  C074  F086         	movff	?___ftmul,_fround$8149
 15831  015976  C075  F087         	movff	?___ftmul+1,_fround$8149+1
 15832  01597A  C076  F088         	movff	?___ftmul+2,_fround$8149+2
 15833                           
 15834                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15835  01597E  C086  F074         	movff	_fround$8149,___ftmul@f1
 15836  015982  C087  F075         	movff	_fround$8149+1,___ftmul@f1+1
 15837  015986  C088  F076         	movff	_fround$8149+2,___ftmul@f1+2
 15838  01598A  0E00               	movlw	0
 15839  01598C  0100               	movlb	0	; () banked
 15840  01598E  6F77               	movwf	___ftmul@f2& (0+255),b
 15841  015990  0E00               	movlw	0
 15842  015992  0100               	movlb	0	; () banked
 15843  015994  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 15844  015996  0E3F               	movlw	63
 15845  015998  0100               	movlb	0	; () banked
 15846  01599A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 15847  01599C  ECA4  F0C0         	call	___ftmul	;wreg free
 15848  0159A0  C074  F083         	movff	?___ftmul,?_fround
 15849  0159A4  C075  F084         	movff	?___ftmul+1,?_fround+1
 15850  0159A8  C076  F085         	movff	?___ftmul+2,?_fround+2
 15851  0159AC  0012               	return	
 15852  0159AE                     l19761:
 15853                           
 15854                           ;doprnt.c: 415: else if(prec > 10)
 15855  0159AE  0E0A               	movlw	10
 15856  0159B0  0100               	movlb	0	; () banked
 15857  0159B2  658C               	cpfsgt	fround@prec& (0+255),b
 15858  0159B4  D074               	goto	l19769
 15859                           
 15860                           ; BSR set to: 0
 15861                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15862  0159B6  0E00               	movlw	0
 15863  0159B8  0100               	movlb	0	; () banked
 15864  0159BA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15865  0159BC  0E03               	movlw	3
 15866  0159BE  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15867  0159C0  0E00               	movlw	0
 15868  0159C2  0100               	movlb	0	; () banked
 15869  0159C4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 15870  0159C6  0E0A               	movlw	10
 15871  0159C8  6F62               	movwf	___awmod@divisor& (0+255),b
 15872  0159CA  C08C  F060         	movff	fround@prec,___awmod@dividend
 15873  0159CE  0100               	movlb	0	; () banked
 15874  0159D0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 15875  0159D2  EC47  F0D0         	call	___awmod	;wreg free
 15876  0159D6  C060  F06E         	movff	?___awmod,___wmul@multiplier
 15877  0159DA  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
 15878  0159DE  EC59  F0D6         	call	___wmul	;wreg free
 15879  0159E2  0EDF               	movlw	low __npowers_
 15880  0159E4  0100               	movlb	0	; () banked
 15881  0159E6  256E               	addwf	?___wmul& (0+255),w,b
 15882  0159E8  6EF6               	movwf	tblptrl,c
 15883  0159EA  0EFB               	movlw	high __npowers_
 15884  0159EC  0100               	movlb	0	; () banked
 15885  0159EE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15886  0159F0  6EF7               	movwf	tblptrh,c
 15887  0159F2                     	if	1	;There are 3 active tblptr bytes
 15888  0159F2  6AF8               	clrf	tblptru,c
 15889  0159F4  0E00               	movlw	low (__mediumconst shr (0+16))
 15890  0159F6  22F8               	addwfc	tblptru,f,c
 15891  0159F8                     	endif
 15892  0159F8  0009               	tblrd		*+
 15893  0159FA  CFF5 F077          	movff	tablat,___ftmul@f2
 15894  0159FE  0009               	tblrd		*+
 15895  015A00  CFF5 F078          	movff	tablat,___ftmul@f2+1
 15896  015A04  000A               	tblrd		*-
 15897  015A06  CFF5 F079          	movff	tablat,___ftmul@f2+2
 15898  015A0A  0E00               	movlw	0
 15899  015A0C  0100               	movlb	0	; () banked
 15900  015A0E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 15901  015A10  0E0A               	movlw	10
 15902  015A12  6F68               	movwf	___awdiv@divisor& (0+255),b
 15903  015A14  C08C  F066         	movff	fround@prec,___awdiv@dividend
 15904  015A18  0100               	movlb	0	; () banked
 15905  015A1A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 15906  015A1C  EC10  F0CC         	call	___awdiv	;wreg free
 15907  015A20  0E09               	movlw	9
 15908  015A22  0100               	movlb	0	; () banked
 15909  015A24  2566               	addwf	?___awdiv& (0+255),w,b
 15910  015A26  0100               	movlb	0	; () banked
 15911  015A28  6F6E               	movwf	___wmul@multiplier& (0+255),b
 15912  015A2A  0E00               	movlw	0
 15913  015A2C  0100               	movlb	0	; () banked
 15914  015A2E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 15915  015A30  0100               	movlb	0	; () banked
 15916  015A32  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
 15917  015A34  0E00               	movlw	0
 15918  015A36  0100               	movlb	0	; () banked
 15919  015A38  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15920  015A3A  0E03               	movlw	3
 15921  015A3C  6F70               	movwf	___wmul@multiplicand& (0+255),b
 15922  015A3E  EC59  F0D6         	call	___wmul	;wreg free
 15923  015A42  0EDF               	movlw	low __npowers_
 15924  015A44  0100               	movlb	0	; () banked
 15925  015A46  256E               	addwf	?___wmul& (0+255),w,b
 15926  015A48  6EF6               	movwf	tblptrl,c
 15927  015A4A  0EFB               	movlw	high __npowers_
 15928  015A4C  0100               	movlb	0	; () banked
 15929  015A4E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 15930  015A50  6EF7               	movwf	tblptrh,c
 15931  015A52                     	if	1	;There are 3 active tblptr bytes
 15932  015A52  6AF8               	clrf	tblptru,c
 15933  015A54  0E00               	movlw	low (__mediumconst shr (0+16))
 15934  015A56  22F8               	addwfc	tblptru,f,c
 15935  015A58                     	endif
 15936  015A58  0009               	tblrd		*+
 15937  015A5A  CFF5 F074          	movff	tablat,___ftmul@f1
 15938  015A5E  0009               	tblrd		*+
 15939  015A60  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15940  015A64  000A               	tblrd		*-
 15941  015A66  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15942  015A6A  ECA4  F0C0         	call	___ftmul	;wreg free
 15943  015A6E  C074  F089         	movff	?___ftmul,_fround$8148
 15944  015A72  C075  F08A         	movff	?___ftmul+1,_fround$8148+1
 15945  015A76  C076  F08B         	movff	?___ftmul+2,_fround$8148+2
 15946                           
 15947                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15948  015A7A  C089  F074         	movff	_fround$8148,___ftmul@f1
 15949  015A7E  C08A  F075         	movff	_fround$8148+1,___ftmul@f1+1
 15950  015A82  C08B  F076         	movff	_fround$8148+2,___ftmul@f1+2
 15951  015A86  0E00               	movlw	0
 15952  015A88  0100               	movlb	0	; () banked
 15953  015A8A  6F77               	movwf	___ftmul@f2& (0+255),b
 15954  015A8C  0E00               	movlw	0
 15955  015A8E  0100               	movlb	0	; () banked
 15956  015A90  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 15957  015A92  0E3F               	movlw	63
 15958  015A94  0100               	movlb	0	; () banked
 15959  015A96  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 15960  015A98  ECA4  F0C0         	call	___ftmul	;wreg free
 15961  015A9C  D781               	goto	L9
 15962  015A9E                     l19769:
 15963                           
 15964                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 15965  015A9E  0100               	movlb	0	; () banked
 15966  015AA0  518C               	movf	fround@prec& (0+255),w,b
 15967  015AA2  0D03               	mullw	3
 15968  015AA4  0EDF               	movlw	low __npowers_
 15969  015AA6  24F3               	addwf	prodl,w,c
 15970  015AA8  6EF6               	movwf	tblptrl,c
 15971  015AAA  0EFB               	movlw	high __npowers_
 15972  015AAC  20F4               	addwfc	prodh,w,c
 15973  015AAE  6EF7               	movwf	tblptrh,c
 15974  015AB0                     	if	1	;There are 3 active tblptr bytes
 15975  015AB0  6AF8               	clrf	tblptru,c
 15976  015AB2  0E00               	movlw	low (__mediumconst shr (0+16))
 15977  015AB4  22F8               	addwfc	tblptru,f,c
 15978  015AB6                     	endif
 15979  015AB6  0009               	tblrd		*+
 15980  015AB8  CFF5 F074          	movff	tablat,___ftmul@f1
 15981  015ABC  0009               	tblrd		*+
 15982  015ABE  CFF5 F075          	movff	tablat,___ftmul@f1+1
 15983  015AC2  000A               	tblrd		*-
 15984  015AC4  CFF5 F076          	movff	tablat,___ftmul@f1+2
 15985  015AC8  0E00               	movlw	0
 15986  015ACA  0100               	movlb	0	; () banked
 15987  015ACC  6F77               	movwf	___ftmul@f2& (0+255),b
 15988  015ACE  0E00               	movlw	0
 15989  015AD0  0100               	movlb	0	; () banked
 15990  015AD2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 15991  015AD4  0E3F               	movlw	63
 15992  015AD6  0100               	movlb	0	; () banked
 15993  015AD8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 15994  015ADA  ECA4  F0C0         	call	___ftmul	;wreg free
 15995  015ADE  C074  F083         	movff	?___ftmul,?_fround
 15996  015AE2  C075  F084         	movff	?___ftmul+1,?_fround+1
 15997  015AE6  C076  F085         	movff	?___ftmul+2,?_fround+2
 15998  015AEA  0012               	return	
 15999  015AEC                     __end_of_fround:
 16000                           	opt stack 0
 16001                           tblptru	equ	0xFF8
 16002                           tblptrh	equ	0xFF7
 16003                           tblptrl	equ	0xFF6
 16004                           tablat	equ	0xFF5
 16005                           prodh	equ	0xFF4
 16006                           prodl	equ	0xFF3
 16007                           intcon	equ	0xFF2
 16008                           postinc0	equ	0xFEE
 16009                           wreg	equ	0xFE8
 16010                           postdec1	equ	0xFE5
 16011                           fsr1h	equ	0xFE2
 16012                           fsr1l	equ	0xFE1
 16013                           indf2	equ	0xFDF
 16014                           postinc2	equ	0xFDE
 16015                           postdec2	equ	0xFDD
 16016                           fsr2h	equ	0xFDA
 16017                           fsr2l	equ	0xFD9
 16018                           status	equ	0xFD8
 16019                           
 16020 ;; *************** function ___awmod *****************
 16021 ;; Defined at:
 16022 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 16023 ;; Parameters:    Size  Location     Type
 16024 ;;  dividend        2    0[BANK0 ] int 
 16025 ;;  divisor         2    2[BANK0 ] int 
 16026 ;; Auto vars:     Size  Location     Type
 16027 ;;  sign            1    5[BANK0 ] unsigned char 
 16028 ;;  counter         1    4[BANK0 ] unsigned char 
 16029 ;; Return value:  Size  Location     Type
 16030 ;;                  2    0[BANK0 ] int 
 16031 ;; Registers used:
 16032 ;;		wreg, status,2, status,0
 16033 ;; Tracked objects:
 16034 ;;		On entry : 0/0
 16035 ;;		On exit  : 0/0
 16036 ;;		Unchanged: 0/0
 16037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16038 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16039 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16041 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16042 ;;Total ram usage:        6 bytes
 16043 ;; Hardware stack levels used:    1
 16044 ;; Hardware stack levels required when called:    3
 16045 ;; This function calls:
 16046 ;;		Nothing
 16047 ;; This function is called by:
 16048 ;;		_fround
 16049 ;;		_scale
 16050 ;; This function uses a non-reentrant model
 16051 ;;
 16052                           
 16053                           	psect	text28
 16054  01A08E                     __ptext28:
 16055                           	opt stack 0
 16056  01A08E                     ___awmod:
 16057                           	opt stack 23
 16058                           
 16059                           ;incstack = 0
 16060  01A08E  0E00               	movlw	0
 16061  01A090  0100               	movlb	0	; () banked
 16062  01A092  6F65               	movwf	___awmod@sign& (0+255),b
 16063                           
 16064                           ; BSR set to: 0
 16065  01A094  0100               	movlb	0	; () banked
 16066  01A096  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
 16067  01A098  D008               	goto	l19667
 16068                           
 16069                           ; BSR set to: 0
 16070  01A09A  0100               	movlb	0	; () banked
 16071  01A09C  6D60               	negf	___awmod@dividend& (0+255),b
 16072  01A09E  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 16073  01A0A0  B0D8               	btfsc	status,0,c
 16074  01A0A2  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 16075                           
 16076                           ; BSR set to: 0
 16077  01A0A4  0E01               	movlw	1
 16078  01A0A6  0100               	movlb	0	; () banked
 16079  01A0A8  6F65               	movwf	___awmod@sign& (0+255),b
 16080  01A0AA                     l19667:
 16081                           
 16082                           ; BSR set to: 0
 16083  01A0AA  0100               	movlb	0	; () banked
 16084  01A0AC  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 16085  01A0AE  D005               	goto	l19671
 16086                           
 16087                           ; BSR set to: 0
 16088  01A0B0  0100               	movlb	0	; () banked
 16089  01A0B2  6D62               	negf	___awmod@divisor& (0+255),b
 16090  01A0B4  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
 16091  01A0B6  B0D8               	btfsc	status,0,c
 16092  01A0B8  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
 16093  01A0BA                     l19671:
 16094                           
 16095                           ; BSR set to: 0
 16096  01A0BA  0100               	movlb	0	; () banked
 16097  01A0BC  5162               	movf	___awmod@divisor& (0+255),w,b
 16098  01A0BE  0100               	movlb	0	; () banked
 16099  01A0C0  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 16100  01A0C2  B4D8               	btfsc	status,2,c
 16101  01A0C4  D026               	goto	l19687
 16102                           
 16103                           ; BSR set to: 0
 16104  01A0C6  0E01               	movlw	1
 16105  01A0C8  0100               	movlb	0	; () banked
 16106  01A0CA  6F64               	movwf	___awmod@counter& (0+255),b
 16107  01A0CC  D006               	goto	l19677
 16108  01A0CE                     l19675:
 16109                           
 16110                           ; BSR set to: 0
 16111  01A0CE  0100               	movlb	0	; () banked
 16112  01A0D0  90D8               	bcf	status,0,c
 16113  01A0D2  3762               	rlcf	___awmod@divisor& (0+255),f,b
 16114  01A0D4  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 16115  01A0D6  0100               	movlb	0	; () banked
 16116  01A0D8  2B64               	incf	___awmod@counter& (0+255),f,b
 16117  01A0DA                     l19677:
 16118                           
 16119                           ; BSR set to: 0
 16120  01A0DA  0100               	movlb	0	; () banked
 16121  01A0DC  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 16122  01A0DE  D7F7               	goto	l19675
 16123  01A0E0                     l19679:
 16124                           
 16125                           ; BSR set to: 0
 16126  01A0E0  0100               	movlb	0	; () banked
 16127  01A0E2  5162               	movf	___awmod@divisor& (0+255),w,b
 16128  01A0E4  0100               	movlb	0	; () banked
 16129  01A0E6  5D60               	subwf	___awmod@dividend& (0+255),w,b
 16130  01A0E8  0100               	movlb	0	; () banked
 16131  01A0EA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 16132  01A0EC  0100               	movlb	0	; () banked
 16133  01A0EE  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 16134  01A0F0  A0D8               	btfss	status,0,c
 16135  01A0F2  D008               	goto	l19683
 16136                           
 16137                           ; BSR set to: 0
 16138  01A0F4  0100               	movlb	0	; () banked
 16139  01A0F6  5162               	movf	___awmod@divisor& (0+255),w,b
 16140  01A0F8  0100               	movlb	0	; () banked
 16141  01A0FA  5F60               	subwf	___awmod@dividend& (0+255),f,b
 16142  01A0FC  0100               	movlb	0	; () banked
 16143  01A0FE  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 16144  01A100  0100               	movlb	0	; () banked
 16145  01A102  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 16146  01A104                     l19683:
 16147                           
 16148                           ; BSR set to: 0
 16149  01A104  0100               	movlb	0	; () banked
 16150  01A106  90D8               	bcf	status,0,c
 16151  01A108  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 16152  01A10A  3362               	rrcf	___awmod@divisor& (0+255),f,b
 16153                           
 16154                           ; BSR set to: 0
 16155  01A10C  0100               	movlb	0	; () banked
 16156  01A10E  2F64               	decfsz	___awmod@counter& (0+255),f,b
 16157  01A110  D7E7               	goto	l19679
 16158  01A112                     l19687:
 16159                           
 16160                           ; BSR set to: 0
 16161  01A112  0100               	movlb	0	; () banked
 16162  01A114  5165               	movf	___awmod@sign& (0+255),w,b
 16163  01A116  0100               	movlb	0	; () banked
 16164  01A118  B4D8               	btfsc	status,2,c
 16165  01A11A  D005               	goto	l19691
 16166                           
 16167                           ; BSR set to: 0
 16168  01A11C  0100               	movlb	0	; () banked
 16169  01A11E  6D60               	negf	___awmod@dividend& (0+255),b
 16170  01A120  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 16171  01A122  B0D8               	btfsc	status,0,c
 16172  01A124  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 16173  01A126                     l19691:
 16174                           
 16175                           ; BSR set to: 0
 16176  01A126  C060  F060         	movff	___awmod@dividend,?___awmod
 16177  01A12A  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
 16178  01A12E  0012               	return	
 16179  01A130                     __end_of___awmod:
 16180                           	opt stack 0
 16181                           tblptru	equ	0xFF8
 16182                           tblptrh	equ	0xFF7
 16183                           tblptrl	equ	0xFF6
 16184                           tablat	equ	0xFF5
 16185                           prodh	equ	0xFF4
 16186                           prodl	equ	0xFF3
 16187                           intcon	equ	0xFF2
 16188                           postinc0	equ	0xFEE
 16189                           wreg	equ	0xFE8
 16190                           postdec1	equ	0xFE5
 16191                           fsr1h	equ	0xFE2
 16192                           fsr1l	equ	0xFE1
 16193                           indf2	equ	0xFDF
 16194                           postinc2	equ	0xFDE
 16195                           postdec2	equ	0xFDD
 16196                           fsr2h	equ	0xFDA
 16197                           fsr2l	equ	0xFD9
 16198                           status	equ	0xFD8
 16199                           
 16200 ;; *************** function ___awdiv *****************
 16201 ;; Defined at:
 16202 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 16203 ;; Parameters:    Size  Location     Type
 16204 ;;  dividend        2    6[BANK0 ] int 
 16205 ;;  divisor         2    8[BANK0 ] int 
 16206 ;; Auto vars:     Size  Location     Type
 16207 ;;  quotient        2   12[BANK0 ] int 
 16208 ;;  sign            1   11[BANK0 ] unsigned char 
 16209 ;;  counter         1   10[BANK0 ] unsigned char 
 16210 ;; Return value:  Size  Location     Type
 16211 ;;                  2    6[BANK0 ] int 
 16212 ;; Registers used:
 16213 ;;		wreg, status,2, status,0
 16214 ;; Tracked objects:
 16215 ;;		On entry : 0/0
 16216 ;;		On exit  : 0/0
 16217 ;;		Unchanged: 0/0
 16218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16219 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16220 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16222 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16223 ;;Total ram usage:        8 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; Hardware stack levels required when called:    3
 16226 ;; This function calls:
 16227 ;;		Nothing
 16228 ;; This function is called by:
 16229 ;;		_fround
 16230 ;;		_scale
 16231 ;;		_printf
 16232 ;; This function uses a non-reentrant model
 16233 ;;
 16234                           
 16235                           	psect	text29
 16236  019820                     __ptext29:
 16237                           	opt stack 0
 16238  019820                     ___awdiv:
 16239                           	opt stack 23
 16240                           
 16241                           ; BSR set to: 0
 16242                           ;incstack = 0
 16243  019820  0E00               	movlw	0
 16244  019822  0100               	movlb	0	; () banked
 16245  019824  6F6B               	movwf	___awdiv@sign& (0+255),b
 16246                           
 16247                           ; BSR set to: 0
 16248  019826  0100               	movlb	0	; () banked
 16249  019828  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 16250  01982A  D008               	goto	l19623
 16251                           
 16252                           ; BSR set to: 0
 16253  01982C  0100               	movlb	0	; () banked
 16254  01982E  6D68               	negf	___awdiv@divisor& (0+255),b
 16255  019830  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 16256  019832  B0D8               	btfsc	status,0,c
 16257  019834  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 16258                           
 16259                           ; BSR set to: 0
 16260  019836  0E01               	movlw	1
 16261  019838  0100               	movlb	0	; () banked
 16262  01983A  6F6B               	movwf	___awdiv@sign& (0+255),b
 16263  01983C                     l19623:
 16264                           
 16265                           ; BSR set to: 0
 16266  01983C  0100               	movlb	0	; () banked
 16267  01983E  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 16268  019840  D008               	goto	l19629
 16269                           
 16270                           ; BSR set to: 0
 16271  019842  0100               	movlb	0	; () banked
 16272  019844  6D66               	negf	___awdiv@dividend& (0+255),b
 16273  019846  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 16274  019848  B0D8               	btfsc	status,0,c
 16275  01984A  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 16276                           
 16277                           ; BSR set to: 0
 16278  01984C  0E01               	movlw	1
 16279  01984E  0100               	movlb	0	; () banked
 16280  019850  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 16281  019852                     l19629:
 16282                           
 16283                           ; BSR set to: 0
 16284  019852  0E00               	movlw	0
 16285  019854  0100               	movlb	0	; () banked
 16286  019856  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 16287  019858  0E00               	movlw	0
 16288  01985A  6F6C               	movwf	___awdiv@quotient& (0+255),b
 16289                           
 16290                           ; BSR set to: 0
 16291  01985C  0100               	movlb	0	; () banked
 16292  01985E  5168               	movf	___awdiv@divisor& (0+255),w,b
 16293  019860  0100               	movlb	0	; () banked
 16294  019862  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 16295  019864  B4D8               	btfsc	status,2,c
 16296  019866  D02C               	goto	l19651
 16297                           
 16298                           ; BSR set to: 0
 16299  019868  0E01               	movlw	1
 16300  01986A  0100               	movlb	0	; () banked
 16301  01986C  6F6A               	movwf	___awdiv@counter& (0+255),b
 16302  01986E  D006               	goto	l19637
 16303  019870                     l19635:
 16304                           
 16305                           ; BSR set to: 0
 16306  019870  0100               	movlb	0	; () banked
 16307  019872  90D8               	bcf	status,0,c
 16308  019874  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 16309  019876  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 16310  019878  0100               	movlb	0	; () banked
 16311  01987A  2B6A               	incf	___awdiv@counter& (0+255),f,b
 16312  01987C                     l19637:
 16313                           
 16314                           ; BSR set to: 0
 16315  01987C  0100               	movlb	0	; () banked
 16316  01987E  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 16317  019880  D7F7               	goto	l19635
 16318  019882                     l19639:
 16319                           
 16320                           ; BSR set to: 0
 16321  019882  0100               	movlb	0	; () banked
 16322  019884  90D8               	bcf	status,0,c
 16323  019886  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 16324  019888  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 16325                           
 16326                           ; BSR set to: 0
 16327  01988A  0100               	movlb	0	; () banked
 16328  01988C  5168               	movf	___awdiv@divisor& (0+255),w,b
 16329  01988E  0100               	movlb	0	; () banked
 16330  019890  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 16331  019892  0100               	movlb	0	; () banked
 16332  019894  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 16333  019896  0100               	movlb	0	; () banked
 16334  019898  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 16335  01989A  A0D8               	btfss	status,0,c
 16336  01989C  D00A               	goto	l19647
 16337                           
 16338                           ; BSR set to: 0
 16339  01989E  0100               	movlb	0	; () banked
 16340  0198A0  5168               	movf	___awdiv@divisor& (0+255),w,b
 16341  0198A2  0100               	movlb	0	; () banked
 16342  0198A4  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 16343  0198A6  0100               	movlb	0	; () banked
 16344  0198A8  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 16345  0198AA  0100               	movlb	0	; () banked
 16346  0198AC  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 16347                           
 16348                           ; BSR set to: 0
 16349  0198AE  0100               	movlb	0	; () banked
 16350  0198B0  816C               	bsf	___awdiv@quotient& (0+255),0,b
 16351  0198B2                     l19647:
 16352                           
 16353                           ; BSR set to: 0
 16354  0198B2  0100               	movlb	0	; () banked
 16355  0198B4  90D8               	bcf	status,0,c
 16356  0198B6  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 16357  0198B8  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 16358                           
 16359                           ; BSR set to: 0
 16360  0198BA  0100               	movlb	0	; () banked
 16361  0198BC  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 16362  0198BE  D7E1               	goto	l19639
 16363  0198C0                     l19651:
 16364                           
 16365                           ; BSR set to: 0
 16366  0198C0  0100               	movlb	0	; () banked
 16367  0198C2  516B               	movf	___awdiv@sign& (0+255),w,b
 16368  0198C4  0100               	movlb	0	; () banked
 16369  0198C6  B4D8               	btfsc	status,2,c
 16370  0198C8  D005               	goto	l19655
 16371                           
 16372                           ; BSR set to: 0
 16373  0198CA  0100               	movlb	0	; () banked
 16374  0198CC  6D6C               	negf	___awdiv@quotient& (0+255),b
 16375  0198CE  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 16376  0198D0  B0D8               	btfsc	status,0,c
 16377  0198D2  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 16378  0198D4                     l19655:
 16379                           
 16380                           ; BSR set to: 0
 16381  0198D4  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 16382  0198D8  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 16383  0198DC  0012               	return	
 16384  0198DE                     __end_of___awdiv:
 16385                           	opt stack 0
 16386                           tblptru	equ	0xFF8
 16387                           tblptrh	equ	0xFF7
 16388                           tblptrl	equ	0xFF6
 16389                           tablat	equ	0xFF5
 16390                           prodh	equ	0xFF4
 16391                           prodl	equ	0xFF3
 16392                           intcon	equ	0xFF2
 16393                           postinc0	equ	0xFEE
 16394                           wreg	equ	0xFE8
 16395                           postdec1	equ	0xFE5
 16396                           fsr1h	equ	0xFE2
 16397                           fsr1l	equ	0xFE1
 16398                           indf2	equ	0xFDF
 16399                           postinc2	equ	0xFDE
 16400                           postdec2	equ	0xFDD
 16401                           fsr2h	equ	0xFDA
 16402                           fsr2l	equ	0xFD9
 16403                           status	equ	0xFD8
 16404                           
 16405 ;; *************** function __tdiv_to_l_ *****************
 16406 ;; Defined at:
 16407 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
 16408 ;; Parameters:    Size  Location     Type
 16409 ;;  f1              3    0[BANK0 ] float 
 16410 ;;  f2              3    3[BANK0 ] float 
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  quot            4    9[BANK0 ] unsigned long 
 16413 ;;  exp1            1   14[BANK0 ] unsigned char 
 16414 ;;  cntr            1   13[BANK0 ] unsigned char 
 16415 ;; Return value:  Size  Location     Type
 16416 ;;                  4    0[BANK0 ] unsigned long 
 16417 ;; Registers used:
 16418 ;;		wreg, status,2, status,0
 16419 ;; Tracked objects:
 16420 ;;		On entry : 0/0
 16421 ;;		On exit  : 0/0
 16422 ;;		Unchanged: 0/0
 16423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16424 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16425 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16426 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16427 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16428 ;;Total ram usage:       15 bytes
 16429 ;; Hardware stack levels used:    1
 16430 ;; Hardware stack levels required when called:    3
 16431 ;; This function calls:
 16432 ;;		Nothing
 16433 ;; This function is called by:
 16434 ;;		_printf
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           	psect	text30
 16439  0176FE                     __ptext30:
 16440                           	opt stack 0
 16441  0176FE                     __tdiv_to_l_:
 16442                           	opt stack 24
 16443                           
 16444                           ; BSR set to: 0
 16445                           ;incstack = 0
 16446  0176FE  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 16447  017702  0100               	movlb	0	; () banked
 16448  017704  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 16449  017706  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 16450  017708  0100               	movlb	0	; () banked
 16451  01770A  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 16452  01770C  0100               	movlb	0	; () banked
 16453  01770E  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
 16454  017710  E301               	bnc	u13291
 16455  017712  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 16456  017714                     u13291:
 16457  017714  0100               	movlb	0	; () banked
 16458  017716  5166               	movf	??__tdiv_to_l_& (0+255),w,b
 16459  017718  0100               	movlb	0	; () banked
 16460  01771A  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
 16461  01771C  0100               	movlb	0	; () banked
 16462  01771E  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 16463  017720  A4D8               	btfss	status,2,c
 16464  017722  D00A               	goto	l19829
 16465                           
 16466                           ; BSR set to: 0
 16467  017724  0E00               	movlw	0
 16468  017726  0100               	movlb	0	; () banked
 16469  017728  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 16470  01772A  0E00               	movlw	0
 16471  01772C  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 16472  01772E  0E00               	movlw	0
 16473  017730  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 16474  017732  0E00               	movlw	0
 16475  017734  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 16476                           
 16477                           ; BSR set to: 0
 16478  017736  0012               	return	
 16479  017738                     l19829:
 16480                           
 16481                           ; BSR set to: 0
 16482  017738  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 16483  01773C  0100               	movlb	0	; () banked
 16484  01773E  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 16485  017740  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 16486  017742  0100               	movlb	0	; () banked
 16487  017744  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 16488  017746  0100               	movlb	0	; () banked
 16489  017748  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
 16490  01774A  E301               	bnc	u13311
 16491  01774C  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 16492  01774E                     u13311:
 16493  01774E  0100               	movlb	0	; () banked
 16494  017750  5166               	movf	??__tdiv_to_l_& (0+255),w,b
 16495  017752  0100               	movlb	0	; () banked
 16496  017754  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 16497  017756  0100               	movlb	0	; () banked
 16498  017758  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 16499  01775A  A4D8               	btfss	status,2,c
 16500  01775C  D00A               	goto	l19835
 16501                           
 16502                           ; BSR set to: 0
 16503  01775E  0E00               	movlw	0
 16504  017760  0100               	movlb	0	; () banked
 16505  017762  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 16506  017764  0E00               	movlw	0
 16507  017766  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 16508  017768  0E00               	movlw	0
 16509  01776A  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 16510  01776C  0E00               	movlw	0
 16511  01776E  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 16512                           
 16513                           ; BSR set to: 0
 16514  017770  0012               	return	
 16515  017772                     l19835:
 16516                           
 16517                           ; BSR set to: 0
 16518  017772  0100               	movlb	0	; () banked
 16519  017774  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 16520                           
 16521                           ; BSR set to: 0
 16522  017776  0EFF               	movlw	255
 16523  017778  0100               	movlb	0	; () banked
 16524  01777A  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 16525  01777C  0EFF               	movlw	255
 16526  01777E  0100               	movlb	0	; () banked
 16527  017780  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 16528  017782  0E00               	movlw	0
 16529  017784  0100               	movlb	0	; () banked
 16530  017786  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 16531  017788  0100               	movlb	0	; () banked
 16532  01778A  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 16533                           
 16534                           ; BSR set to: 0
 16535  01778C  0EFF               	movlw	255
 16536  01778E  0100               	movlb	0	; () banked
 16537  017790  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 16538  017792  0EFF               	movlw	255
 16539  017794  0100               	movlb	0	; () banked
 16540  017796  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 16541  017798  0E00               	movlw	0
 16542  01779A  0100               	movlb	0	; () banked
 16543  01779C  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 16544                           
 16545                           ; BSR set to: 0
 16546  01779E  0E00               	movlw	0
 16547  0177A0  0100               	movlb	0	; () banked
 16548  0177A2  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
 16549  0177A4  0E00               	movlw	0
 16550  0177A6  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 16551  0177A8  0E00               	movlw	0
 16552  0177AA  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 16553  0177AC  0E00               	movlw	0
 16554  0177AE  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 16555                           
 16556                           ; BSR set to: 0
 16557  0177B0  0E7F               	movlw	127
 16558  0177B2  0100               	movlb	0	; () banked
 16559  0177B4  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 16560                           
 16561                           ; BSR set to: 0
 16562  0177B6  0100               	movlb	0	; () banked
 16563  0177B8  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 16564  0177BA  0F98               	addlw	152
 16565  0177BC  0100               	movlb	0	; () banked
 16566  0177BE  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 16567                           
 16568                           ; BSR set to: 0
 16569  0177C0  0E18               	movlw	24
 16570  0177C2  0100               	movlb	0	; () banked
 16571  0177C4  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 16572  0177C6                     l10668:
 16573                           
 16574                           ; BSR set to: 0
 16575  0177C6  0100               	movlb	0	; () banked
 16576  0177C8  90D8               	bcf	status,0,c
 16577  0177CA  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 16578  0177CC  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 16579  0177CE  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 16580  0177D0  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 16581                           
 16582                           ; BSR set to: 0
 16583  0177D2  0100               	movlb	0	; () banked
 16584  0177D4  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
 16585  0177D6  0100               	movlb	0	; () banked
 16586  0177D8  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 16587  0177DA  0100               	movlb	0	; () banked
 16588  0177DC  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 16589  0177DE  0100               	movlb	0	; () banked
 16590  0177E0  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 16591  0177E2  0100               	movlb	0	; () banked
 16592  0177E4  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 16593  0177E6  0100               	movlb	0	; () banked
 16594  0177E8  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 16595  0177EA  A0D8               	btfss	status,0,c
 16596  0177EC  D00E               	goto	l10669
 16597                           
 16598                           ; BSR set to: 0
 16599  0177EE  0100               	movlb	0	; () banked
 16600  0177F0  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
 16601  0177F2  0100               	movlb	0	; () banked
 16602  0177F4  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 16603  0177F6  0100               	movlb	0	; () banked
 16604  0177F8  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 16605  0177FA  0100               	movlb	0	; () banked
 16606  0177FC  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 16607  0177FE  0100               	movlb	0	; () banked
 16608  017800  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 16609  017802  0100               	movlb	0	; () banked
 16610  017804  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 16611                           
 16612                           ; BSR set to: 0
 16613  017806  0100               	movlb	0	; () banked
 16614  017808  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 16615  01780A                     l10669:
 16616                           
 16617                           ; BSR set to: 0
 16618  01780A  0100               	movlb	0	; () banked
 16619  01780C  90D8               	bcf	status,0,c
 16620  01780E  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 16621  017810  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 16622  017812  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 16623                           
 16624                           ; BSR set to: 0
 16625  017814  0100               	movlb	0	; () banked
 16626  017816  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 16627  017818  D7D6               	goto	l10668
 16628                           
 16629                           ; BSR set to: 0
 16630                           
 16631                           ; BSR set to: 0
 16632  01781A  0100               	movlb	0	; () banked
 16633  01781C  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 16634  01781E  D01A               	goto	l19869
 16635                           
 16636                           ; BSR set to: 0
 16637  017820  0100               	movlb	0	; () banked
 16638  017822  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 16639  017824  0A80               	xorlw	128
 16640  017826  0F97               	addlw	151
 16641  017828  B0D8               	btfsc	status,0,c
 16642  01782A  D00A               	goto	l19865
 16643                           
 16644                           ; BSR set to: 0
 16645  01782C  0E00               	movlw	0
 16646  01782E  0100               	movlb	0	; () banked
 16647  017830  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 16648  017832  0E00               	movlw	0
 16649  017834  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 16650  017836  0E00               	movlw	0
 16651  017838  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 16652  01783A  0E00               	movlw	0
 16653  01783C  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 16654                           
 16655                           ; BSR set to: 0
 16656  01783E  0012               	return	
 16657  017840                     l19865:
 16658                           
 16659                           ; BSR set to: 0
 16660  017840  0100               	movlb	0	; () banked
 16661  017842  90D8               	bcf	status,0,c
 16662  017844  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 16663  017846  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 16664  017848  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 16665  01784A  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 16666                           
 16667                           ; BSR set to: 0
 16668  01784C  0100               	movlb	0	; () banked
 16669  01784E  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 16670  017850  D7F7               	goto	l19865
 16671                           
 16672                           ; BSR set to: 0
 16673  017852  D01B               	goto	l10675
 16674  017854                     l19869:
 16675                           
 16676                           ; BSR set to: 0
 16677  017854  0E17               	movlw	23
 16678  017856  0100               	movlb	0	; () banked
 16679  017858  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 16680  01785A  D012               	goto	l19877
 16681                           
 16682                           ; BSR set to: 0
 16683  01785C  0E00               	movlw	0
 16684  01785E  0100               	movlb	0	; () banked
 16685  017860  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 16686  017862  0E00               	movlw	0
 16687  017864  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 16688  017866  0E00               	movlw	0
 16689  017868  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 16690  01786A  0E00               	movlw	0
 16691  01786C  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 16692                           
 16693                           ; BSR set to: 0
 16694  01786E  0012               	return	
 16695  017870                     l19875:
 16696                           
 16697                           ; BSR set to: 0
 16698  017870  0100               	movlb	0	; () banked
 16699  017872  90D8               	bcf	status,0,c
 16700  017874  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 16701  017876  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 16702  017878  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 16703  01787A  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 16704  01787C  0100               	movlb	0	; () banked
 16705  01787E  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 16706  017880                     l19877:
 16707                           
 16708                           ; BSR set to: 0
 16709  017880  0100               	movlb	0	; () banked
 16710  017882  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 16711  017884  0100               	movlb	0	; () banked
 16712  017886  A4D8               	btfss	status,2,c
 16713  017888  D7F3               	goto	l19875
 16714  01788A                     l10675:
 16715                           
 16716                           ; BSR set to: 0
 16717  01788A  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 16718  01788E  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 16719  017892  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 16720  017896  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 16721                           
 16722                           ; BSR set to: 0
 16723  01789A  0012               	return		;funcret
 16724  01789C                     __end_of__tdiv_to_l_:
 16725                           	opt stack 0
 16726                           tblptru	equ	0xFF8
 16727                           tblptrh	equ	0xFF7
 16728                           tblptrl	equ	0xFF6
 16729                           tablat	equ	0xFF5
 16730                           prodh	equ	0xFF4
 16731                           prodl	equ	0xFF3
 16732                           intcon	equ	0xFF2
 16733                           postinc0	equ	0xFEE
 16734                           wreg	equ	0xFE8
 16735                           postdec1	equ	0xFE5
 16736                           fsr1h	equ	0xFE2
 16737                           fsr1l	equ	0xFE1
 16738                           indf2	equ	0xFDF
 16739                           postinc2	equ	0xFDE
 16740                           postdec2	equ	0xFDD
 16741                           fsr2h	equ	0xFDA
 16742                           fsr2l	equ	0xFD9
 16743                           status	equ	0xFD8
 16744                           
 16745 ;; *************** function __div_to_l_ *****************
 16746 ;; Defined at:
 16747 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
 16748 ;; Parameters:    Size  Location     Type
 16749 ;;  f1              3    0[BANK0 ] unsigned long 
 16750 ;;  f2              3    3[BANK0 ] unsigned long 
 16751 ;; Auto vars:     Size  Location     Type
 16752 ;;  quot            4    6[BANK0 ] unsigned long 
 16753 ;;  exp1            1   11[BANK0 ] unsigned char 
 16754 ;;  cntr            1   10[BANK0 ] unsigned char 
 16755 ;; Return value:  Size  Location     Type
 16756 ;;                  4    0[BANK0 ] unsigned long 
 16757 ;; Registers used:
 16758 ;;		wreg, status,2, status,0
 16759 ;; Tracked objects:
 16760 ;;		On entry : 0/0
 16761 ;;		On exit  : 0/0
 16762 ;;		Unchanged: 0/0
 16763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16764 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16765 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16767 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16768 ;;Total ram usage:       12 bytes
 16769 ;; Hardware stack levels used:    1
 16770 ;; Hardware stack levels required when called:    3
 16771 ;; This function calls:
 16772 ;;		Nothing
 16773 ;; This function is called by:
 16774 ;;		_printf
 16775 ;; This function uses a non-reentrant model
 16776 ;;
 16777                           
 16778                           	psect	text31
 16779  01789C                     __ptext31:
 16780                           	opt stack 0
 16781  01789C                     __div_to_l_:
 16782                           	opt stack 24
 16783                           
 16784                           ; BSR set to: 0
 16785                           ;incstack = 0
 16786  01789C  0100               	movlb	0	; () banked
 16787  01789E  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 16788  0178A0  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 16789  0178A2  0100               	movlb	0	; () banked
 16790  0178A4  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
 16791  0178A6  0100               	movlb	0	; () banked
 16792  0178A8  516B               	movf	__div_to_l_@exp1& (0+255),w,b
 16793  0178AA  A4D8               	btfss	status,2,c
 16794  0178AC  D00A               	goto	l19885
 16795                           
 16796                           ; BSR set to: 0
 16797  0178AE  0E00               	movlw	0
 16798  0178B0  0100               	movlb	0	; () banked
 16799  0178B2  6F60               	movwf	?__div_to_l_& (0+255),b
 16800  0178B4  0E00               	movlw	0
 16801  0178B6  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 16802  0178B8  0E00               	movlw	0
 16803  0178BA  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 16804  0178BC  0E00               	movlw	0
 16805  0178BE  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 16806                           
 16807                           ; BSR set to: 0
 16808  0178C0  0012               	return	
 16809  0178C2                     l19885:
 16810                           
 16811                           ; BSR set to: 0
 16812  0178C2  0100               	movlb	0	; () banked
 16813  0178C4  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 16814  0178C6  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 16815  0178C8  0100               	movlb	0	; () banked
 16816  0178CA  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
 16817  0178CC  0100               	movlb	0	; () banked
 16818  0178CE  516A               	movf	__div_to_l_@cntr& (0+255),w,b
 16819  0178D0  A4D8               	btfss	status,2,c
 16820  0178D2  D00A               	goto	l19891
 16821                           
 16822                           ; BSR set to: 0
 16823  0178D4  0E00               	movlw	0
 16824  0178D6  0100               	movlb	0	; () banked
 16825  0178D8  6F60               	movwf	?__div_to_l_& (0+255),b
 16826  0178DA  0E00               	movlw	0
 16827  0178DC  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 16828  0178DE  0E00               	movlw	0
 16829  0178E0  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 16830  0178E2  0E00               	movlw	0
 16831  0178E4  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 16832                           
 16833                           ; BSR set to: 0
 16834  0178E6  0012               	return	
 16835  0178E8                     l19891:
 16836                           
 16837                           ; BSR set to: 0
 16838  0178E8  0100               	movlb	0	; () banked
 16839  0178EA  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 16840                           
 16841                           ; BSR set to: 0
 16842  0178EC  0EFF               	movlw	255
 16843  0178EE  0100               	movlb	0	; () banked
 16844  0178F0  1760               	andwf	__div_to_l_@f1& (0+255),f,b
 16845  0178F2  0EFF               	movlw	255
 16846  0178F4  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 16847  0178F6  0EFF               	movlw	255
 16848  0178F8  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 16849  0178FA  0E00               	movlw	0
 16850  0178FC  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 16851                           
 16852                           ; BSR set to: 0
 16853  0178FE  0100               	movlb	0	; () banked
 16854  017900  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 16855  017902  0EFF               	movlw	255
 16856  017904  0100               	movlb	0	; () banked
 16857  017906  1763               	andwf	__div_to_l_@f2& (0+255),f,b
 16858  017908  0EFF               	movlw	255
 16859  01790A  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 16860  01790C  0EFF               	movlw	255
 16861  01790E  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 16862  017910  0E00               	movlw	0
 16863  017912  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 16864                           
 16865                           ; BSR set to: 0
 16866  017914  0E00               	movlw	0
 16867  017916  0100               	movlb	0	; () banked
 16868  017918  6F66               	movwf	__div_to_l_@quot& (0+255),b
 16869  01791A  0E00               	movlw	0
 16870  01791C  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
 16871  01791E  0E00               	movlw	0
 16872  017920  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
 16873  017922  0E00               	movlw	0
 16874  017924  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
 16875                           
 16876                           ; BSR set to: 0
 16877  017926  0E7F               	movlw	127
 16878  017928  0100               	movlb	0	; () banked
 16879  01792A  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
 16880                           
 16881                           ; BSR set to: 0
 16882  01792C  0100               	movlb	0	; () banked
 16883  01792E  516A               	movf	__div_to_l_@cntr& (0+255),w,b
 16884  017930  0FA0               	addlw	160
 16885  017932  0100               	movlb	0	; () banked
 16886  017934  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
 16887                           
 16888                           ; BSR set to: 0
 16889  017936  0E20               	movlw	32
 16890  017938  0100               	movlb	0	; () banked
 16891  01793A  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
 16892  01793C                     l19905:
 16893                           
 16894                           ; BSR set to: 0
 16895  01793C  0100               	movlb	0	; () banked
 16896  01793E  90D8               	bcf	status,0,c
 16897  017940  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
 16898  017942  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 16899  017944  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 16900  017946  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 16901                           
 16902                           ; BSR set to: 0
 16903  017948  0100               	movlb	0	; () banked
 16904  01794A  5163               	movf	__div_to_l_@f2& (0+255),w,b
 16905  01794C  0100               	movlb	0	; () banked
 16906  01794E  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
 16907  017950  0100               	movlb	0	; () banked
 16908  017952  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 16909  017954  0100               	movlb	0	; () banked
 16910  017956  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 16911  017958  0100               	movlb	0	; () banked
 16912  01795A  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 16913  01795C  0100               	movlb	0	; () banked
 16914  01795E  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 16915  017960  0100               	movlb	0	; () banked
 16916  017962  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 16917  017964  0100               	movlb	0	; () banked
 16918  017966  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 16919  017968  A0D8               	btfss	status,0,c
 16920  01796A  D012               	goto	l19913
 16921                           
 16922                           ; BSR set to: 0
 16923  01796C  0100               	movlb	0	; () banked
 16924  01796E  5163               	movf	__div_to_l_@f2& (0+255),w,b
 16925  017970  0100               	movlb	0	; () banked
 16926  017972  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
 16927  017974  0100               	movlb	0	; () banked
 16928  017976  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 16929  017978  0100               	movlb	0	; () banked
 16930  01797A  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 16931  01797C  0100               	movlb	0	; () banked
 16932  01797E  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 16933  017980  0100               	movlb	0	; () banked
 16934  017982  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 16935  017984  0100               	movlb	0	; () banked
 16936  017986  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 16937  017988  0100               	movlb	0	; () banked
 16938  01798A  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 16939                           
 16940                           ; BSR set to: 0
 16941  01798C  0100               	movlb	0	; () banked
 16942  01798E  8166               	bsf	__div_to_l_@quot& (0+255),0,b
 16943  017990                     l19913:
 16944                           
 16945                           ; BSR set to: 0
 16946  017990  0100               	movlb	0	; () banked
 16947  017992  90D8               	bcf	status,0,c
 16948  017994  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
 16949  017996  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 16950  017998  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 16951  01799A  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 16952                           
 16953                           ; BSR set to: 0
 16954  01799C  0100               	movlb	0	; () banked
 16955  01799E  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
 16956  0179A0  D7CD               	goto	l19905
 16957                           
 16958                           ; BSR set to: 0
 16959                           
 16960                           ; BSR set to: 0
 16961  0179A2  0100               	movlb	0	; () banked
 16962  0179A4  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
 16963  0179A6  D01A               	goto	l19929
 16964                           
 16965                           ; BSR set to: 0
 16966  0179A8  0100               	movlb	0	; () banked
 16967  0179AA  516B               	movf	__div_to_l_@exp1& (0+255),w,b
 16968  0179AC  0A80               	xorlw	128
 16969  0179AE  0F9F               	addlw	159
 16970  0179B0  B0D8               	btfsc	status,0,c
 16971  0179B2  D00A               	goto	l19925
 16972                           
 16973                           ; BSR set to: 0
 16974  0179B4  0E00               	movlw	0
 16975  0179B6  0100               	movlb	0	; () banked
 16976  0179B8  6F60               	movwf	?__div_to_l_& (0+255),b
 16977  0179BA  0E00               	movlw	0
 16978  0179BC  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 16979  0179BE  0E00               	movlw	0
 16980  0179C0  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 16981  0179C2  0E00               	movlw	0
 16982  0179C4  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 16983                           
 16984                           ; BSR set to: 0
 16985  0179C6  0012               	return	
 16986  0179C8                     l19925:
 16987                           
 16988                           ; BSR set to: 0
 16989  0179C8  0100               	movlb	0	; () banked
 16990  0179CA  90D8               	bcf	status,0,c
 16991  0179CC  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 16992  0179CE  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 16993  0179D0  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 16994  0179D2  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
 16995                           
 16996                           ; BSR set to: 0
 16997  0179D4  0100               	movlb	0	; () banked
 16998  0179D6  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
 16999  0179D8  D7F7               	goto	l19925
 17000                           
 17001                           ; BSR set to: 0
 17002  0179DA  D01B               	goto	l10571
 17003  0179DC                     l19929:
 17004                           
 17005                           ; BSR set to: 0
 17006  0179DC  0E1F               	movlw	31
 17007  0179DE  0100               	movlb	0	; () banked
 17008  0179E0  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
 17009  0179E2  D012               	goto	l19937
 17010                           
 17011                           ; BSR set to: 0
 17012  0179E4  0E00               	movlw	0
 17013  0179E6  0100               	movlb	0	; () banked
 17014  0179E8  6F60               	movwf	?__div_to_l_& (0+255),b
 17015  0179EA  0E00               	movlw	0
 17016  0179EC  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 17017  0179EE  0E00               	movlw	0
 17018  0179F0  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 17019  0179F2  0E00               	movlw	0
 17020  0179F4  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 17021                           
 17022                           ; BSR set to: 0
 17023  0179F6  0012               	return	
 17024  0179F8                     l19935:
 17025                           
 17026                           ; BSR set to: 0
 17027  0179F8  0100               	movlb	0	; () banked
 17028  0179FA  90D8               	bcf	status,0,c
 17029  0179FC  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
 17030  0179FE  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 17031  017A00  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 17032  017A02  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 17033  017A04  0100               	movlb	0	; () banked
 17034  017A06  076B               	decf	__div_to_l_@exp1& (0+255),f,b
 17035  017A08                     l19937:
 17036                           
 17037                           ; BSR set to: 0
 17038  017A08  0100               	movlb	0	; () banked
 17039  017A0A  516B               	movf	__div_to_l_@exp1& (0+255),w,b
 17040  017A0C  0100               	movlb	0	; () banked
 17041  017A0E  A4D8               	btfss	status,2,c
 17042  017A10  D7F3               	goto	l19935
 17043  017A12                     l10571:
 17044                           
 17045                           ; BSR set to: 0
 17046  017A12  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
 17047  017A16  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 17048  017A1A  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 17049  017A1E  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 17050                           
 17051                           ; BSR set to: 0
 17052  017A22  0012               	return		;funcret
 17053  017A24                     __end_of__div_to_l_:
 17054                           	opt stack 0
 17055                           tblptru	equ	0xFF8
 17056                           tblptrh	equ	0xFF7
 17057                           tblptrl	equ	0xFF6
 17058                           tablat	equ	0xFF5
 17059                           prodh	equ	0xFF4
 17060                           prodl	equ	0xFF3
 17061                           intcon	equ	0xFF2
 17062                           postinc0	equ	0xFEE
 17063                           wreg	equ	0xFE8
 17064                           postdec1	equ	0xFE5
 17065                           fsr1h	equ	0xFE2
 17066                           fsr1l	equ	0xFE1
 17067                           indf2	equ	0xFDF
 17068                           postinc2	equ	0xFDE
 17069                           postdec2	equ	0xFDD
 17070                           fsr2h	equ	0xFDA
 17071                           fsr2l	equ	0xFD9
 17072                           status	equ	0xFD8
 17073                           
 17074 ;; *************** function ___lltoft *****************
 17075 ;; Defined at:
 17076 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
 17077 ;; Parameters:    Size  Location     Type
 17078 ;;  c               4    8[BANK0 ] unsigned long 
 17079 ;; Auto vars:     Size  Location     Type
 17080 ;;  exp             1   16[BANK0 ] unsigned char 
 17081 ;; Return value:  Size  Location     Type
 17082 ;;                  3    8[BANK0 ] float 
 17083 ;; Registers used:
 17084 ;;		wreg, status,2, status,0, cstack
 17085 ;; Tracked objects:
 17086 ;;		On entry : 0/0
 17087 ;;		On exit  : 0/0
 17088 ;;		Unchanged: 0/0
 17089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17090 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17092 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17093 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17094 ;;Total ram usage:        9 bytes
 17095 ;; Hardware stack levels used:    1
 17096 ;; Hardware stack levels required when called:    4
 17097 ;; This function calls:
 17098 ;;		___ftpack
 17099 ;; This function is called by:
 17100 ;;		_printf
 17101 ;; This function uses a non-reentrant model
 17102 ;;
 17103                           
 17104                           	psect	text32
 17105  01A52E                     __ptext32:
 17106                           	opt stack 0
 17107  01A52E                     ___lltoft:
 17108                           	opt stack 23
 17109                           
 17110                           ; BSR set to: 0
 17111                           ;incstack = 0
 17112  01A52E  0E8E               	movlw	142
 17113  01A530  0100               	movlb	0	; () banked
 17114  01A532  6F70               	movwf	___lltoft@exp& (0+255),b
 17115  01A534  D008               	goto	l20073
 17116  01A536                     l20071:
 17117                           
 17118                           ; BSR set to: 0
 17119  01A536  0100               	movlb	0	; () banked
 17120  01A538  90D8               	bcf	status,0,c
 17121  01A53A  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 17122  01A53C  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 17123  01A53E  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
 17124  01A540  3368               	rrcf	___lltoft@c& (0+255),f,b
 17125  01A542  0100               	movlb	0	; () banked
 17126  01A544  2B70               	incf	___lltoft@exp& (0+255),f,b
 17127  01A546                     l20073:
 17128                           
 17129                           ; BSR set to: 0
 17130  01A546  0E00               	movlw	0
 17131  01A548  0100               	movlb	0	; () banked
 17132  01A54A  1568               	andwf	___lltoft@c& (0+255),w,b
 17133  01A54C  0100               	movlb	0	; () banked
 17134  01A54E  6F6C               	movwf	??___lltoft& (0+255),b
 17135  01A550  0E00               	movlw	0
 17136  01A552  0100               	movlb	0	; () banked
 17137  01A554  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
 17138  01A556  0100               	movlb	0	; () banked
 17139  01A558  6F6D               	movwf	(??___lltoft+1)& (0+255),b
 17140  01A55A  0E00               	movlw	0
 17141  01A55C  0100               	movlb	0	; () banked
 17142  01A55E  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
 17143  01A560  0100               	movlb	0	; () banked
 17144  01A562  6F6E               	movwf	(??___lltoft+2)& (0+255),b
 17145  01A564  0EFF               	movlw	255
 17146  01A566  0100               	movlb	0	; () banked
 17147  01A568  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
 17148  01A56A  0100               	movlb	0	; () banked
 17149  01A56C  6F6F               	movwf	(??___lltoft+3)& (0+255),b
 17150  01A56E  0100               	movlb	0	; () banked
 17151  01A570  516C               	movf	??___lltoft& (0+255),w,b
 17152  01A572  0100               	movlb	0	; () banked
 17153  01A574  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
 17154  01A576  0100               	movlb	0	; () banked
 17155  01A578  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
 17156  01A57A  0100               	movlb	0	; () banked
 17157  01A57C  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
 17158  01A57E  A4D8               	btfss	status,2,c
 17159  01A580  D7DA               	goto	l20071
 17160                           
 17161                           ; BSR set to: 0
 17162                           
 17163                           ; BSR set to: 0
 17164  01A582  C068  F060         	movff	___lltoft@c,___ftpack@arg
 17165  01A586  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
 17166  01A58A  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
 17167  01A58E  C070  F063         	movff	___lltoft@exp,___ftpack@exp
 17168  01A592  0E00               	movlw	0
 17169  01A594  0100               	movlb	0	; () banked
 17170  01A596  6F64               	movwf	___ftpack@sign& (0+255),b
 17171  01A598  ECF2  F0C4         	call	___ftpack	;wreg free
 17172  01A59C  C060  F068         	movff	?___ftpack,?___lltoft
 17173  01A5A0  C061  F069         	movff	?___ftpack+1,?___lltoft+1
 17174  01A5A4  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
 17175  01A5A8  0012               	return	
 17176  01A5AA                     __end_of___lltoft:
 17177                           	opt stack 0
 17178                           tblptru	equ	0xFF8
 17179                           tblptrh	equ	0xFF7
 17180                           tblptrl	equ	0xFF6
 17181                           tablat	equ	0xFF5
 17182                           prodh	equ	0xFF4
 17183                           prodl	equ	0xFF3
 17184                           intcon	equ	0xFF2
 17185                           postinc0	equ	0xFEE
 17186                           wreg	equ	0xFE8
 17187                           postdec1	equ	0xFE5
 17188                           fsr1h	equ	0xFE2
 17189                           fsr1l	equ	0xFE1
 17190                           indf2	equ	0xFDF
 17191                           postinc2	equ	0xFDE
 17192                           postdec2	equ	0xFDD
 17193                           fsr2h	equ	0xFDA
 17194                           fsr2l	equ	0xFD9
 17195                           status	equ	0xFD8
 17196                           
 17197 ;; *************** function ___llmod *****************
 17198 ;; Defined at:
 17199 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 17200 ;; Parameters:    Size  Location     Type
 17201 ;;  dividend        4   13[BANK0 ] unsigned long 
 17202 ;;  divisor         4   17[BANK0 ] unsigned long 
 17203 ;; Auto vars:     Size  Location     Type
 17204 ;;  counter         1   21[BANK0 ] unsigned char 
 17205 ;; Return value:  Size  Location     Type
 17206 ;;                  4   13[BANK0 ] unsigned long 
 17207 ;; Registers used:
 17208 ;;		wreg, status,2, status,0
 17209 ;; Tracked objects:
 17210 ;;		On entry : 0/0
 17211 ;;		On exit  : 0/0
 17212 ;;		Unchanged: 0/0
 17213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17214 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17217 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17218 ;;Total ram usage:        9 bytes
 17219 ;; Hardware stack levels used:    1
 17220 ;; Hardware stack levels required when called:    3
 17221 ;; This function calls:
 17222 ;;		Nothing
 17223 ;; This function is called by:
 17224 ;;		_printf
 17225 ;; This function uses a non-reentrant model
 17226 ;;
 17227                           
 17228                           	psect	text33
 17229  01A26E                     __ptext33:
 17230                           	opt stack 0
 17231  01A26E                     ___llmod:
 17232                           	opt stack 24
 17233                           
 17234                           ;incstack = 0
 17235  01A26E  0100               	movlb	0	; () banked
 17236  01A270  5171               	movf	___llmod@divisor& (0+255),w,b
 17237  01A272  0100               	movlb	0	; () banked
 17238  01A274  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 17239  01A276  0100               	movlb	0	; () banked
 17240  01A278  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 17241  01A27A  0100               	movlb	0	; () banked
 17242  01A27C  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 17243  01A27E  B4D8               	btfsc	status,2,c
 17244  01A280  D03A               	goto	l10760
 17245                           
 17246                           ; BSR set to: 0
 17247  01A282  0E01               	movlw	1
 17248  01A284  0100               	movlb	0	; () banked
 17249  01A286  6F75               	movwf	___llmod@counter& (0+255),b
 17250  01A288  D008               	goto	l20059
 17251  01A28A                     l20057:
 17252                           
 17253                           ; BSR set to: 0
 17254  01A28A  0100               	movlb	0	; () banked
 17255  01A28C  90D8               	bcf	status,0,c
 17256  01A28E  3771               	rlcf	___llmod@divisor& (0+255),f,b
 17257  01A290  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 17258  01A292  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 17259  01A294  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 17260  01A296  0100               	movlb	0	; () banked
 17261  01A298  2B75               	incf	___llmod@counter& (0+255),f,b
 17262  01A29A                     l20059:
 17263                           
 17264                           ; BSR set to: 0
 17265  01A29A  0100               	movlb	0	; () banked
 17266  01A29C  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 17267  01A29E  D7F5               	goto	l20057
 17268  01A2A0                     l20061:
 17269                           
 17270                           ; BSR set to: 0
 17271  01A2A0  0100               	movlb	0	; () banked
 17272  01A2A2  5171               	movf	___llmod@divisor& (0+255),w,b
 17273  01A2A4  0100               	movlb	0	; () banked
 17274  01A2A6  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 17275  01A2A8  0100               	movlb	0	; () banked
 17276  01A2AA  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 17277  01A2AC  0100               	movlb	0	; () banked
 17278  01A2AE  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 17279  01A2B0  0100               	movlb	0	; () banked
 17280  01A2B2  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 17281  01A2B4  0100               	movlb	0	; () banked
 17282  01A2B6  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 17283  01A2B8  0100               	movlb	0	; () banked
 17284  01A2BA  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 17285  01A2BC  0100               	movlb	0	; () banked
 17286  01A2BE  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 17287  01A2C0  A0D8               	btfss	status,0,c
 17288  01A2C2  D010               	goto	l20065
 17289                           
 17290                           ; BSR set to: 0
 17291  01A2C4  0100               	movlb	0	; () banked
 17292  01A2C6  5171               	movf	___llmod@divisor& (0+255),w,b
 17293  01A2C8  0100               	movlb	0	; () banked
 17294  01A2CA  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 17295  01A2CC  0100               	movlb	0	; () banked
 17296  01A2CE  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 17297  01A2D0  0100               	movlb	0	; () banked
 17298  01A2D2  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 17299  01A2D4  0100               	movlb	0	; () banked
 17300  01A2D6  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 17301  01A2D8  0100               	movlb	0	; () banked
 17302  01A2DA  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 17303  01A2DC  0100               	movlb	0	; () banked
 17304  01A2DE  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 17305  01A2E0  0100               	movlb	0	; () banked
 17306  01A2E2  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 17307  01A2E4                     l20065:
 17308                           
 17309                           ; BSR set to: 0
 17310  01A2E4  0100               	movlb	0	; () banked
 17311  01A2E6  90D8               	bcf	status,0,c
 17312  01A2E8  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 17313  01A2EA  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 17314  01A2EC  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 17315  01A2EE  3371               	rrcf	___llmod@divisor& (0+255),f,b
 17316                           
 17317                           ; BSR set to: 0
 17318  01A2F0  0100               	movlb	0	; () banked
 17319  01A2F2  2F75               	decfsz	___llmod@counter& (0+255),f,b
 17320  01A2F4  D7D5               	goto	l20061
 17321  01A2F6                     l10760:
 17322                           
 17323                           ; BSR set to: 0
 17324  01A2F6  C06D  F06D         	movff	___llmod@dividend,?___llmod
 17325  01A2FA  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 17326  01A2FE  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 17327  01A302  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 17328                           
 17329                           ; BSR set to: 0
 17330  01A306  0012               	return		;funcret
 17331  01A308                     __end_of___llmod:
 17332                           	opt stack 0
 17333                           tblptru	equ	0xFF8
 17334                           tblptrh	equ	0xFF7
 17335                           tblptrl	equ	0xFF6
 17336                           tablat	equ	0xFF5
 17337                           prodh	equ	0xFF4
 17338                           prodl	equ	0xFF3
 17339                           intcon	equ	0xFF2
 17340                           postinc0	equ	0xFEE
 17341                           wreg	equ	0xFE8
 17342                           postdec1	equ	0xFE5
 17343                           fsr1h	equ	0xFE2
 17344                           fsr1l	equ	0xFE1
 17345                           indf2	equ	0xFDF
 17346                           postinc2	equ	0xFDE
 17347                           postdec2	equ	0xFDD
 17348                           fsr2h	equ	0xFDA
 17349                           fsr2l	equ	0xFD9
 17350                           status	equ	0xFD8
 17351                           
 17352 ;; *************** function ___lldiv *****************
 17353 ;; Defined at:
 17354 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 17355 ;; Parameters:    Size  Location     Type
 17356 ;;  dividend        4    0[BANK0 ] unsigned long 
 17357 ;;  divisor         4    4[BANK0 ] unsigned long 
 17358 ;; Auto vars:     Size  Location     Type
 17359 ;;  quotient        4    8[BANK0 ] unsigned long 
 17360 ;;  counter         1   12[BANK0 ] unsigned char 
 17361 ;; Return value:  Size  Location     Type
 17362 ;;                  4    0[BANK0 ] unsigned long 
 17363 ;; Registers used:
 17364 ;;		wreg, status,2, status,0
 17365 ;; Tracked objects:
 17366 ;;		On entry : 0/0
 17367 ;;		On exit  : 0/0
 17368 ;;		Unchanged: 0/0
 17369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17370 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17371 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17373 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17374 ;;Total ram usage:       13 bytes
 17375 ;; Hardware stack levels used:    1
 17376 ;; Hardware stack levels required when called:    3
 17377 ;; This function calls:
 17378 ;;		Nothing
 17379 ;; This function is called by:
 17380 ;;		_printf
 17381 ;; This function uses a non-reentrant model
 17382 ;;
 17383                           
 17384                           	psect	text34
 17385  01999C                     __ptext34:
 17386                           	opt stack 0
 17387  01999C                     ___lldiv:
 17388                           	opt stack 24
 17389                           
 17390                           ; BSR set to: 0
 17391                           ;incstack = 0
 17392  01999C  0E00               	movlw	0
 17393  01999E  0100               	movlb	0	; () banked
 17394  0199A0  6F68               	movwf	___lldiv@quotient& (0+255),b
 17395  0199A2  0E00               	movlw	0
 17396  0199A4  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 17397  0199A6  0E00               	movlw	0
 17398  0199A8  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 17399  0199AA  0E00               	movlw	0
 17400  0199AC  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 17401                           
 17402                           ; BSR set to: 0
 17403  0199AE  0100               	movlb	0	; () banked
 17404  0199B0  5164               	movf	___lldiv@divisor& (0+255),w,b
 17405  0199B2  0100               	movlb	0	; () banked
 17406  0199B4  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 17407  0199B6  0100               	movlb	0	; () banked
 17408  0199B8  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 17409  0199BA  0100               	movlb	0	; () banked
 17410  0199BC  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 17411  0199BE  B4D8               	btfsc	status,2,c
 17412  0199C0  D042               	goto	l10750
 17413                           
 17414                           ; BSR set to: 0
 17415  0199C2  0E01               	movlw	1
 17416  0199C4  0100               	movlb	0	; () banked
 17417  0199C6  6F6C               	movwf	___lldiv@counter& (0+255),b
 17418  0199C8  D008               	goto	l20039
 17419  0199CA                     l20037:
 17420                           
 17421                           ; BSR set to: 0
 17422  0199CA  0100               	movlb	0	; () banked
 17423  0199CC  90D8               	bcf	status,0,c
 17424  0199CE  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 17425  0199D0  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 17426  0199D2  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 17427  0199D4  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 17428  0199D6  0100               	movlb	0	; () banked
 17429  0199D8  2B6C               	incf	___lldiv@counter& (0+255),f,b
 17430  0199DA                     l20039:
 17431                           
 17432                           ; BSR set to: 0
 17433  0199DA  0100               	movlb	0	; () banked
 17434  0199DC  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 17435  0199DE  D7F5               	goto	l20037
 17436  0199E0                     l20041:
 17437                           
 17438                           ; BSR set to: 0
 17439  0199E0  0100               	movlb	0	; () banked
 17440  0199E2  90D8               	bcf	status,0,c
 17441  0199E4  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 17442  0199E6  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 17443  0199E8  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 17444  0199EA  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 17445                           
 17446                           ; BSR set to: 0
 17447  0199EC  0100               	movlb	0	; () banked
 17448  0199EE  5164               	movf	___lldiv@divisor& (0+255),w,b
 17449  0199F0  0100               	movlb	0	; () banked
 17450  0199F2  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 17451  0199F4  0100               	movlb	0	; () banked
 17452  0199F6  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17453  0199F8  0100               	movlb	0	; () banked
 17454  0199FA  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 17455  0199FC  0100               	movlb	0	; () banked
 17456  0199FE  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17457  019A00  0100               	movlb	0	; () banked
 17458  019A02  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 17459  019A04  0100               	movlb	0	; () banked
 17460  019A06  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17461  019A08  0100               	movlb	0	; () banked
 17462  019A0A  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 17463  019A0C  A0D8               	btfss	status,0,c
 17464  019A0E  D012               	goto	l20049
 17465                           
 17466                           ; BSR set to: 0
 17467  019A10  0100               	movlb	0	; () banked
 17468  019A12  5164               	movf	___lldiv@divisor& (0+255),w,b
 17469  019A14  0100               	movlb	0	; () banked
 17470  019A16  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 17471  019A18  0100               	movlb	0	; () banked
 17472  019A1A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17473  019A1C  0100               	movlb	0	; () banked
 17474  019A1E  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 17475  019A20  0100               	movlb	0	; () banked
 17476  019A22  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17477  019A24  0100               	movlb	0	; () banked
 17478  019A26  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 17479  019A28  0100               	movlb	0	; () banked
 17480  019A2A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17481  019A2C  0100               	movlb	0	; () banked
 17482  019A2E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 17483                           
 17484                           ; BSR set to: 0
 17485  019A30  0100               	movlb	0	; () banked
 17486  019A32  8168               	bsf	___lldiv@quotient& (0+255),0,b
 17487  019A34                     l20049:
 17488                           
 17489                           ; BSR set to: 0
 17490  019A34  0100               	movlb	0	; () banked
 17491  019A36  90D8               	bcf	status,0,c
 17492  019A38  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 17493  019A3A  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 17494  019A3C  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 17495  019A3E  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 17496                           
 17497                           ; BSR set to: 0
 17498  019A40  0100               	movlb	0	; () banked
 17499  019A42  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 17500  019A44  D7CD               	goto	l20041
 17501  019A46                     l10750:
 17502                           
 17503                           ; BSR set to: 0
 17504  019A46  C068  F060         	movff	___lldiv@quotient,?___lldiv
 17505  019A4A  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 17506  019A4E  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 17507  019A52  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 17508                           
 17509                           ; BSR set to: 0
 17510  019A56  0012               	return		;funcret
 17511  019A58                     __end_of___lldiv:
 17512                           	opt stack 0
 17513                           tblptru	equ	0xFF8
 17514                           tblptrh	equ	0xFF7
 17515                           tblptrl	equ	0xFF6
 17516                           tablat	equ	0xFF5
 17517                           prodh	equ	0xFF4
 17518                           prodl	equ	0xFF3
 17519                           intcon	equ	0xFF2
 17520                           postinc0	equ	0xFEE
 17521                           wreg	equ	0xFE8
 17522                           postdec1	equ	0xFE5
 17523                           fsr1h	equ	0xFE2
 17524                           fsr1l	equ	0xFE1
 17525                           indf2	equ	0xFDF
 17526                           postinc2	equ	0xFDE
 17527                           postdec2	equ	0xFDD
 17528                           fsr2h	equ	0xFDA
 17529                           fsr2l	equ	0xFD9
 17530                           status	equ	0xFD8
 17531                           
 17532 ;; *************** function _RTC_GetDateTime *****************
 17533 ;; Defined at:
 17534 ;;		line 53 in file "RTC.c"
 17535 ;; Parameters:    Size  Location     Type
 17536 ;;  rtc             2    2[BANK0 ] PTR struct .
 17537 ;;		 -> rtc(7), 
 17538 ;; Auto vars:     Size  Location     Type
 17539 ;;		None
 17540 ;; Return value:  Size  Location     Type
 17541 ;;                  1    wreg      void 
 17542 ;; Registers used:
 17543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17544 ;; Tracked objects:
 17545 ;;		On entry : 0/0
 17546 ;;		On exit  : 0/0
 17547 ;;		Unchanged: 0/0
 17548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17553 ;;Total ram usage:        2 bytes
 17554 ;; Hardware stack levels used:    1
 17555 ;; Hardware stack levels required when called:    5
 17556 ;; This function calls:
 17557 ;;		_I2C_Read
 17558 ;;		_I2C_Start
 17559 ;;		_I2C_Stop
 17560 ;;		_I2C_Write
 17561 ;; This function is called by:
 17562 ;;		_UART_Data
 17563 ;; This function uses a non-reentrant model
 17564 ;;
 17565                           
 17566                           	psect	text35
 17567  019A58                     __ptext35:
 17568                           	opt stack 0
 17569  019A58                     _RTC_GetDateTime:
 17570                           	opt stack 23
 17571                           
 17572                           ;RTC.c: 55: I2C_Start();
 17573                           
 17574                           ; BSR set to: 0
 17575                           ;incstack = 0
 17576  019A58  EC6F  F0D8         	call	_I2C_Start	;wreg free
 17577                           
 17578                           ;RTC.c: 57: I2C_Write(0xD0u);
 17579  019A5C  0ED0               	movlw	208
 17580  019A5E  ECE7  F0D7         	call	_I2C_Write
 17581                           
 17582                           ;RTC.c: 58: I2C_Write(0x00u);
 17583  019A62  0E00               	movlw	0
 17584  019A64  ECE7  F0D7         	call	_I2C_Write
 17585                           
 17586                           ;RTC.c: 60: I2C_Stop();
 17587  019A68  EC6B  F0D8         	call	_I2C_Stop	;wreg free
 17588                           
 17589                           ;RTC.c: 62: I2C_Start();
 17590  019A6C  EC6F  F0D8         	call	_I2C_Start	;wreg free
 17591                           
 17592                           ;RTC.c: 63: I2C_Write(0xD1u);
 17593  019A70  0ED1               	movlw	209
 17594  019A72  ECE7  F0D7         	call	_I2C_Write
 17595                           
 17596                           ;RTC.c: 65: rtc->sec = I2C_Read(1);
 17597  019A76  0E01               	movlw	1
 17598  019A78  EC8D  F0D6         	call	_I2C_Read
 17599  019A7C  C062  FFD9         	movff	RTC_GetDateTime@rtc,fsr2l
 17600  019A80  C063  FFDA         	movff	RTC_GetDateTime@rtc+1,fsr2h
 17601  019A84  6EDF               	movwf	indf2,c
 17602                           
 17603                           ;RTC.c: 66: rtc->min = I2C_Read(1);
 17604  019A86  0100               	movlb	0	; () banked
 17605  019A88  EE20 F001          	lfsr	2,1
 17606  019A8C  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17607  019A8E  26D9               	addwf	fsr2l,f,c
 17608  019A90  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17609  019A92  22DA               	addwfc	fsr2h,f,c
 17610  019A94  0E01               	movlw	1
 17611  019A96  EC8D  F0D6         	call	_I2C_Read
 17612  019A9A  6EDF               	movwf	indf2,c
 17613                           
 17614                           ;RTC.c: 67: rtc->hour= I2C_Read(1);
 17615  019A9C  0100               	movlb	0	; () banked
 17616  019A9E  EE20 F002          	lfsr	2,2
 17617  019AA2  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17618  019AA4  26D9               	addwf	fsr2l,f,c
 17619  019AA6  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17620  019AA8  22DA               	addwfc	fsr2h,f,c
 17621  019AAA  0E01               	movlw	1
 17622  019AAC  EC8D  F0D6         	call	_I2C_Read
 17623  019AB0  6EDF               	movwf	indf2,c
 17624                           
 17625                           ;RTC.c: 68: rtc->weekDay = I2C_Read(1);
 17626  019AB2  0100               	movlb	0	; () banked
 17627  019AB4  EE20 F003          	lfsr	2,3
 17628  019AB8  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17629  019ABA  26D9               	addwf	fsr2l,f,c
 17630  019ABC  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17631  019ABE  22DA               	addwfc	fsr2h,f,c
 17632  019AC0  0E01               	movlw	1
 17633  019AC2  EC8D  F0D6         	call	_I2C_Read
 17634  019AC6  6EDF               	movwf	indf2,c
 17635                           
 17636                           ;RTC.c: 69: rtc->date= I2C_Read(1);
 17637  019AC8  0100               	movlb	0	; () banked
 17638  019ACA  EE20 F004          	lfsr	2,4
 17639  019ACE  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17640  019AD0  26D9               	addwf	fsr2l,f,c
 17641  019AD2  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17642  019AD4  22DA               	addwfc	fsr2h,f,c
 17643  019AD6  0E01               	movlw	1
 17644  019AD8  EC8D  F0D6         	call	_I2C_Read
 17645  019ADC  6EDF               	movwf	indf2,c
 17646                           
 17647                           ;RTC.c: 70: rtc->month=I2C_Read(1);
 17648  019ADE  0100               	movlb	0	; () banked
 17649  019AE0  EE20 F005          	lfsr	2,5
 17650  019AE4  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17651  019AE6  26D9               	addwf	fsr2l,f,c
 17652  019AE8  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17653  019AEA  22DA               	addwfc	fsr2h,f,c
 17654  019AEC  0E01               	movlw	1
 17655  019AEE  EC8D  F0D6         	call	_I2C_Read
 17656  019AF2  6EDF               	movwf	indf2,c
 17657                           
 17658                           ;RTC.c: 71: rtc->year =I2C_Read(0);
 17659  019AF4  0100               	movlb	0	; () banked
 17660  019AF6  EE20 F006          	lfsr	2,6
 17661  019AFA  5162               	movf	RTC_GetDateTime@rtc& (0+255),w,b
 17662  019AFC  26D9               	addwf	fsr2l,f,c
 17663  019AFE  5163               	movf	(RTC_GetDateTime@rtc+1)& (0+255),w,b
 17664  019B00  22DA               	addwfc	fsr2h,f,c
 17665  019B02  0E00               	movlw	0
 17666  019B04  EC8D  F0D6         	call	_I2C_Read
 17667  019B08  6EDF               	movwf	indf2,c
 17668                           
 17669                           ;RTC.c: 73: I2C_Stop();
 17670  019B0A  EC6B  F0D8         	call	_I2C_Stop	;wreg free
 17671  019B0E  0012               	return		;funcret
 17672  019B10                     __end_of_RTC_GetDateTime:
 17673                           	opt stack 0
 17674                           tblptru	equ	0xFF8
 17675                           tblptrh	equ	0xFF7
 17676                           tblptrl	equ	0xFF6
 17677                           tablat	equ	0xFF5
 17678                           prodh	equ	0xFF4
 17679                           prodl	equ	0xFF3
 17680                           intcon	equ	0xFF2
 17681                           postinc0	equ	0xFEE
 17682                           wreg	equ	0xFE8
 17683                           postdec1	equ	0xFE5
 17684                           fsr1h	equ	0xFE2
 17685                           fsr1l	equ	0xFE1
 17686                           indf2	equ	0xFDF
 17687                           postinc2	equ	0xFDE
 17688                           postdec2	equ	0xFDD
 17689                           fsr2h	equ	0xFDA
 17690                           fsr2l	equ	0xFD9
 17691                           status	equ	0xFD8
 17692                           
 17693 ;; *************** function _I2C_Read *****************
 17694 ;; Defined at:
 17695 ;;		line 89 in file "RTC.c"
 17696 ;; Parameters:    Size  Location     Type
 17697 ;;  v_ackOption_    1    wreg     unsigned char 
 17698 ;; Auto vars:     Size  Location     Type
 17699 ;;  v_ackOption_    1    0[BANK0 ] unsigned char 
 17700 ;;  v_i2cData_u8    1    1[BANK0 ] unsigned char 
 17701 ;; Return value:  Size  Location     Type
 17702 ;;                  1    wreg      unsigned char 
 17703 ;; Registers used:
 17704 ;;		wreg, status,2, status,0, cstack
 17705 ;; Tracked objects:
 17706 ;;		On entry : 0/0
 17707 ;;		On exit  : 0/0
 17708 ;;		Unchanged: 0/0
 17709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17711 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17714 ;;Total ram usage:        2 bytes
 17715 ;; Hardware stack levels used:    1
 17716 ;; Hardware stack levels required when called:    4
 17717 ;; This function calls:
 17718 ;;		_i2c_Ack
 17719 ;;		_i2c_NoAck
 17720 ;;		_i2c_WaitForIdle
 17721 ;; This function is called by:
 17722 ;;		_RTC_GetDateTime
 17723 ;; This function uses a non-reentrant model
 17724 ;;
 17725                           
 17726                           	psect	text36
 17727  01AD1A                     __ptext36:
 17728                           	opt stack 0
 17729  01AD1A                     _I2C_Read:
 17730                           	opt stack 23
 17731                           
 17732                           ;incstack = 0
 17733                           ;I2C_Read@v_ackOption_u8 stored from wreg
 17734  01AD1A  0100               	movlb	0	; () banked
 17735  01AD1C  6F60               	movwf	I2C_Read@v_ackOption_u8& (0+255),b
 17736                           
 17737                           ;RTC.c: 91: uint8_t v_i2cData_u8=0x00;
 17738  01AD1E  0E00               	movlw	0
 17739  01AD20  0100               	movlb	0	; () banked
 17740  01AD22  6F61               	movwf	I2C_Read@v_i2cData_u8& (0+255),b
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;RTC.c: 93: SSP1CON2bits.RCEN = 1;
 17744  01AD24  86C5               	bsf	4037,3,c	;volatile
 17745  01AD26                     l1007:
 17746  01AD26  A0C7               	btfss	4039,0,c	;volatile
 17747  01AD28  D7FE               	goto	l1007
 17748                           
 17749                           ;RTC.c: 95: v_i2cData_u8 = SSP1BUF;
 17750  01AD2A  CFC9 F061          	movff	4041,I2C_Read@v_i2cData_u8	;volatile
 17751                           
 17752                           ;RTC.c: 96: i2c_WaitForIdle();
 17753  01AD2E  ECF0  F0D7         	call	_i2c_WaitForIdle	;wreg free
 17754                           
 17755                           ;RTC.c: 98: if(v_ackOption_u8==1)
 17756  01AD32  0100               	movlb	0	; () banked
 17757  01AD34  0560               	decf	I2C_Read@v_ackOption_u8& (0+255),w,b
 17758  01AD36  A4D8               	btfss	status,2,c
 17759  01AD38  D003               	goto	l20173
 17760                           
 17761                           ; BSR set to: 0
 17762                           ;RTC.c: 99: {
 17763                           ;RTC.c: 100: i2c_Ack();
 17764  01AD3A  EC48  F0D8         	call	_i2c_Ack	;wreg free
 17765                           
 17766                           ;RTC.c: 101: }
 17767  01AD3E  D002               	goto	l20175
 17768  01AD40                     l20173:
 17769                           
 17770                           ;RTC.c: 102: else
 17771                           ;RTC.c: 103: {
 17772                           ;RTC.c: 104: i2c_NoAck();
 17773  01AD40  EC43  F0D8         	call	_i2c_NoAck	;wreg free
 17774  01AD44                     l20175:
 17775                           
 17776                           ;RTC.c: 105: }
 17777                           ;RTC.c: 107: return v_i2cData_u8;
 17778  01AD44  0100               	movlb	0	; () banked
 17779  01AD46  5161               	movf	I2C_Read@v_i2cData_u8& (0+255),w,b
 17780  01AD48  0012               	return	
 17781  01AD4A                     __end_of_I2C_Read:
 17782                           	opt stack 0
 17783                           tblptru	equ	0xFF8
 17784                           tblptrh	equ	0xFF7
 17785                           tblptrl	equ	0xFF6
 17786                           tablat	equ	0xFF5
 17787                           prodh	equ	0xFF4
 17788                           prodl	equ	0xFF3
 17789                           intcon	equ	0xFF2
 17790                           postinc0	equ	0xFEE
 17791                           wreg	equ	0xFE8
 17792                           postdec1	equ	0xFE5
 17793                           fsr1h	equ	0xFE2
 17794                           fsr1l	equ	0xFE1
 17795                           indf2	equ	0xFDF
 17796                           postinc2	equ	0xFDE
 17797                           postdec2	equ	0xFDD
 17798                           fsr2h	equ	0xFDA
 17799                           fsr2l	equ	0xFD9
 17800                           status	equ	0xFD8
 17801                           
 17802 ;; *************** function _i2c_NoAck *****************
 17803 ;; Defined at:
 17804 ;;		line 122 in file "RTC.c"
 17805 ;; Parameters:    Size  Location     Type
 17806 ;;		None
 17807 ;; Auto vars:     Size  Location     Type
 17808 ;;		None
 17809 ;; Return value:  Size  Location     Type
 17810 ;;                  1    wreg      void 
 17811 ;; Registers used:
 17812 ;;		None
 17813 ;; Tracked objects:
 17814 ;;		On entry : 0/0
 17815 ;;		On exit  : 0/0
 17816 ;;		Unchanged: 0/0
 17817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17822 ;;Total ram usage:        0 bytes
 17823 ;; Hardware stack levels used:    1
 17824 ;; Hardware stack levels required when called:    3
 17825 ;; This function calls:
 17826 ;;		Nothing
 17827 ;; This function is called by:
 17828 ;;		_I2C_Read
 17829 ;; This function uses a non-reentrant model
 17830 ;;
 17831                           
 17832                           	psect	text37
 17833  01B086                     __ptext37:
 17834                           	opt stack 0
 17835  01B086                     _i2c_NoAck:
 17836                           	opt stack 23
 17837                           
 17838                           ;RTC.c: 124: SSP1CON2bits.ACKDT = 1;
 17839                           
 17840                           ; BSR set to: 0
 17841                           ;incstack = 0
 17842  01B086  8AC5               	bsf	4037,5,c	;volatile
 17843                           
 17844                           ;RTC.c: 125: SSP1CON2bits.ACKEN = 1;
 17845  01B088  88C5               	bsf	4037,4,c	;volatile
 17846  01B08A                     l1027:
 17847  01B08A  A8C5               	btfss	4037,4,c	;volatile
 17848  01B08C  0012               	return	
 17849  01B08E  D7FD               	goto	l1027
 17850  01B090                     __end_of_i2c_NoAck:
 17851                           	opt stack 0
 17852                           tblptru	equ	0xFF8
 17853                           tblptrh	equ	0xFF7
 17854                           tblptrl	equ	0xFF6
 17855                           tablat	equ	0xFF5
 17856                           prodh	equ	0xFF4
 17857                           prodl	equ	0xFF3
 17858                           intcon	equ	0xFF2
 17859                           postinc0	equ	0xFEE
 17860                           wreg	equ	0xFE8
 17861                           postdec1	equ	0xFE5
 17862                           fsr1h	equ	0xFE2
 17863                           fsr1l	equ	0xFE1
 17864                           indf2	equ	0xFDF
 17865                           postinc2	equ	0xFDE
 17866                           postdec2	equ	0xFDD
 17867                           fsr2h	equ	0xFDA
 17868                           fsr2l	equ	0xFD9
 17869                           status	equ	0xFD8
 17870                           
 17871 ;; *************** function _i2c_Ack *****************
 17872 ;; Defined at:
 17873 ;;		line 128 in file "RTC.c"
 17874 ;; Parameters:    Size  Location     Type
 17875 ;;		None
 17876 ;; Auto vars:     Size  Location     Type
 17877 ;;		None
 17878 ;; Return value:  Size  Location     Type
 17879 ;;                  1    wreg      void 
 17880 ;; Registers used:
 17881 ;;		None
 17882 ;; Tracked objects:
 17883 ;;		On entry : 0/0
 17884 ;;		On exit  : 0/0
 17885 ;;		Unchanged: 0/0
 17886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17891 ;;Total ram usage:        0 bytes
 17892 ;; Hardware stack levels used:    1
 17893 ;; Hardware stack levels required when called:    3
 17894 ;; This function calls:
 17895 ;;		Nothing
 17896 ;; This function is called by:
 17897 ;;		_I2C_Read
 17898 ;; This function uses a non-reentrant model
 17899 ;;
 17900                           
 17901                           	psect	text38
 17902  01B090                     __ptext38:
 17903                           	opt stack 0
 17904  01B090                     _i2c_Ack:
 17905                           	opt stack 23
 17906                           
 17907                           ;RTC.c: 130: SSP1CON2bits.ACKDT = 0;
 17908                           
 17909                           ;incstack = 0
 17910  01B090  9AC5               	bcf	4037,5,c	;volatile
 17911                           
 17912                           ;RTC.c: 131: SSP1CON2bits.ACKEN = 1;
 17913  01B092  88C5               	bsf	4037,4,c	;volatile
 17914  01B094                     l1033:
 17915  01B094  A8C5               	btfss	4037,4,c	;volatile
 17916  01B096  0012               	return	
 17917  01B098  D7FD               	goto	l1033
 17918  01B09A                     __end_of_i2c_Ack:
 17919                           	opt stack 0
 17920                           tblptru	equ	0xFF8
 17921                           tblptrh	equ	0xFF7
 17922                           tblptrl	equ	0xFF6
 17923                           tablat	equ	0xFF5
 17924                           prodh	equ	0xFF4
 17925                           prodl	equ	0xFF3
 17926                           intcon	equ	0xFF2
 17927                           postinc0	equ	0xFEE
 17928                           wreg	equ	0xFE8
 17929                           postdec1	equ	0xFE5
 17930                           fsr1h	equ	0xFE2
 17931                           fsr1l	equ	0xFE1
 17932                           indf2	equ	0xFDF
 17933                           postinc2	equ	0xFDE
 17934                           postdec2	equ	0xFDD
 17935                           fsr2h	equ	0xFDA
 17936                           fsr2l	equ	0xFD9
 17937                           status	equ	0xFD8
 17938                           
 17939 ;; *************** function _BCDtoI *****************
 17940 ;; Defined at:
 17941 ;;		line 13 in file "RTC.c"
 17942 ;; Parameters:    Size  Location     Type
 17943 ;;  BCD             2   20[BANK0 ] unsigned int 
 17944 ;; Auto vars:     Size  Location     Type
 17945 ;;  result          2   25[BANK0 ] unsigned int 
 17946 ;; Return value:  Size  Location     Type
 17947 ;;                  2   20[BANK0 ] unsigned int 
 17948 ;; Registers used:
 17949 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 17950 ;; Tracked objects:
 17951 ;;		On entry : 0/0
 17952 ;;		On exit  : 0/0
 17953 ;;		Unchanged: 0/0
 17954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17955 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17957 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17958 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17959 ;;Total ram usage:        7 bytes
 17960 ;; Hardware stack levels used:    1
 17961 ;; Hardware stack levels required when called:    4
 17962 ;; This function calls:
 17963 ;;		___wmul
 17964 ;; This function is called by:
 17965 ;;		_UART_Data
 17966 ;; This function uses a non-reentrant model
 17967 ;;
 17968                           
 17969                           	psect	text39
 17970  019368                     __ptext39:
 17971                           	opt stack 0
 17972  019368                     _BCDtoI:
 17973                           	opt stack 24
 17974                           
 17975                           ;RTC.c: 15: unsigned int result;
 17976                           ;RTC.c: 16: result=(BCD>>12)*1000;
 17977                           
 17978                           ;incstack = 0
 17979  019368  0100               	movlb	0	; () banked
 17980  01936A  3975               	swapf	(BCDtoI@BCD+1)& (0+255),w,b
 17981  01936C  0B0F               	andlw	15
 17982  01936E  0100               	movlb	0	; () banked
 17983  019370  6F6E               	movwf	___wmul@multiplier& (0+255),b
 17984  019372  6B6F               	clrf	(___wmul@multiplier+1)& (0+255),b
 17985  019374  0E03               	movlw	3
 17986  019376  0100               	movlb	0	; () banked
 17987  019378  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17988  01937A  0EE8               	movlw	232
 17989  01937C  6F70               	movwf	___wmul@multiplicand& (0+255),b
 17990  01937E  EC59  F0D6         	call	___wmul	;wreg free
 17991  019382  C06E  F079         	movff	?___wmul,BCDtoI@result
 17992  019386  C06F  F07A         	movff	?___wmul+1,BCDtoI@result+1
 17993                           
 17994                           ;RTC.c: 17: result+=((BCD>>8)&0x0f)*100;
 17995  01938A  C074  F076         	movff	BCDtoI@BCD,??_BCDtoI
 17996  01938E  C075  F077         	movff	BCDtoI@BCD+1,??_BCDtoI+1
 17997  019392  C077  F076         	movff	??_BCDtoI+1,??_BCDtoI
 17998  019396  0100               	movlb	0	; () banked
 17999  019398  6B77               	clrf	(??_BCDtoI+1)& (0+255),b
 18000  01939A  0E0F               	movlw	15
 18001  01939C  0100               	movlb	0	; () banked
 18002  01939E  1576               	andwf	??_BCDtoI& (0+255),w,b
 18003  0193A0  0100               	movlb	0	; () banked
 18004  0193A2  6F6E               	movwf	___wmul@multiplier& (0+255),b
 18005  0193A4  0100               	movlb	0	; () banked
 18006  0193A6  6B6F               	clrf	(___wmul@multiplier+1)& (0+255),b
 18007  0193A8  0E00               	movlw	0
 18008  0193AA  0100               	movlb	0	; () banked
 18009  0193AC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18010  0193AE  0E64               	movlw	100
 18011  0193B0  6F70               	movwf	___wmul@multiplicand& (0+255),b
 18012  0193B2  EC59  F0D6         	call	___wmul	;wreg free
 18013  0193B6  0100               	movlb	0	; () banked
 18014  0193B8  516E               	movf	?___wmul& (0+255),w,b
 18015  0193BA  0100               	movlb	0	; () banked
 18016  0193BC  2779               	addwf	BCDtoI@result& (0+255),f,b
 18017  0193BE  0100               	movlb	0	; () banked
 18018  0193C0  516F               	movf	(?___wmul+1)& (0+255),w,b
 18019  0193C2  0100               	movlb	0	; () banked
 18020  0193C4  237A               	addwfc	(BCDtoI@result+1)& (0+255),f,b
 18021                           
 18022                           ;RTC.c: 18: result+=((BCD>>4)&0x0f)*10;
 18023  0193C6  C074  F076         	movff	BCDtoI@BCD,??_BCDtoI
 18024  0193CA  C075  F077         	movff	BCDtoI@BCD+1,??_BCDtoI+1
 18025  0193CE  0E04               	movlw	4
 18026  0193D0  0100               	movlb	0	; () banked
 18027  0193D2  6F78               	movwf	(??_BCDtoI+2)& (0+255),b
 18028  0193D4                     u14715:
 18029  0193D4  0100               	movlb	0	; () banked
 18030  0193D6  90D8               	bcf	status,0,c
 18031  0193D8  3377               	rrcf	(??_BCDtoI+1)& (0+255),f,b
 18032  0193DA  3376               	rrcf	??_BCDtoI& (0+255),f,b
 18033  0193DC  0100               	movlb	0	; () banked
 18034  0193DE  2F78               	decfsz	(??_BCDtoI+2)& (0+255),f,b
 18035  0193E0  D7F9               	goto	u14715
 18036  0193E2  0E0F               	movlw	15
 18037  0193E4  0100               	movlb	0	; () banked
 18038  0193E6  1576               	andwf	??_BCDtoI& (0+255),w,b
 18039  0193E8  0100               	movlb	0	; () banked
 18040  0193EA  6F6E               	movwf	___wmul@multiplier& (0+255),b
 18041  0193EC  0100               	movlb	0	; () banked
 18042  0193EE  6B6F               	clrf	(___wmul@multiplier+1)& (0+255),b
 18043  0193F0  0E00               	movlw	0
 18044  0193F2  0100               	movlb	0	; () banked
 18045  0193F4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18046  0193F6  0E0A               	movlw	10
 18047  0193F8  6F70               	movwf	___wmul@multiplicand& (0+255),b
 18048  0193FA  EC59  F0D6         	call	___wmul	;wreg free
 18049  0193FE  0100               	movlb	0	; () banked
 18050  019400  516E               	movf	?___wmul& (0+255),w,b
 18051  019402  0100               	movlb	0	; () banked
 18052  019404  2779               	addwf	BCDtoI@result& (0+255),f,b
 18053  019406  0100               	movlb	0	; () banked
 18054  019408  516F               	movf	(?___wmul+1)& (0+255),w,b
 18055  01940A  0100               	movlb	0	; () banked
 18056  01940C  237A               	addwfc	(BCDtoI@result+1)& (0+255),f,b
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;RTC.c: 19: result+=((BCD)&0x0f);
 18060  01940E  0E0F               	movlw	15
 18061  019410  0100               	movlb	0	; () banked
 18062  019412  1574               	andwf	BCDtoI@BCD& (0+255),w,b
 18063  019414  0100               	movlb	0	; () banked
 18064  019416  6F76               	movwf	??_BCDtoI& (0+255),b
 18065  019418  0E00               	movlw	0
 18066  01941A  0100               	movlb	0	; () banked
 18067  01941C  1575               	andwf	(BCDtoI@BCD+1)& (0+255),w,b
 18068  01941E  0100               	movlb	0	; () banked
 18069  019420  6F77               	movwf	(??_BCDtoI+1)& (0+255),b
 18070  019422  0100               	movlb	0	; () banked
 18071  019424  5176               	movf	??_BCDtoI& (0+255),w,b
 18072  019426  0100               	movlb	0	; () banked
 18073  019428  2779               	addwf	BCDtoI@result& (0+255),f,b
 18074  01942A  0100               	movlb	0	; () banked
 18075  01942C  5177               	movf	(??_BCDtoI+1)& (0+255),w,b
 18076  01942E  0100               	movlb	0	; () banked
 18077  019430  237A               	addwfc	(BCDtoI@result+1)& (0+255),f,b
 18078                           
 18079                           ; BSR set to: 0
 18080                           ;RTC.c: 20: return result;
 18081  019432  C079  F074         	movff	BCDtoI@result,?_BCDtoI
 18082  019436  C07A  F075         	movff	BCDtoI@result+1,?_BCDtoI+1
 18083  01943A  0012               	return	
 18084  01943C                     __end_of_BCDtoI:
 18085                           	opt stack 0
 18086                           tblptru	equ	0xFF8
 18087                           tblptrh	equ	0xFF7
 18088                           tblptrl	equ	0xFF6
 18089                           tablat	equ	0xFF5
 18090                           prodh	equ	0xFF4
 18091                           prodl	equ	0xFF3
 18092                           intcon	equ	0xFF2
 18093                           postinc0	equ	0xFEE
 18094                           wreg	equ	0xFE8
 18095                           postdec1	equ	0xFE5
 18096                           fsr1h	equ	0xFE2
 18097                           fsr1l	equ	0xFE1
 18098                           indf2	equ	0xFDF
 18099                           postinc2	equ	0xFDE
 18100                           postdec2	equ	0xFDD
 18101                           fsr2h	equ	0xFDA
 18102                           fsr2l	equ	0xFD9
 18103                           status	equ	0xFD8
 18104                           
 18105 ;; *************** function _Turbine_Start_up_1_Second *****************
 18106 ;; Defined at:
 18107 ;;		line 87 in file "OneSecond_Function.c"
 18108 ;; Parameters:    Size  Location     Type
 18109 ;;		None
 18110 ;; Auto vars:     Size  Location     Type
 18111 ;;		None
 18112 ;; Return value:  Size  Location     Type
 18113 ;;                  1    wreg      void 
 18114 ;; Registers used:
 18115 ;;		wreg, status,2, status,0, cstack
 18116 ;; Tracked objects:
 18117 ;;		On entry : 0/0
 18118 ;;		On exit  : 0/0
 18119 ;;		Unchanged: 0/0
 18120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18125 ;;Total ram usage:        0 bytes
 18126 ;; Hardware stack levels used:    1
 18127 ;; Hardware stack levels required when called:    4
 18128 ;; This function calls:
 18129 ;;		_Error_Scan_start_up
 18130 ;;		_VFD_Data_Kill
 18131 ;; This function is called by:
 18132 ;;		_Timer0_OneSecond_Function
 18133 ;; This function uses a non-reentrant model
 18134 ;;
 18135                           
 18136                           	psect	text40
 18137  01B09A                     __ptext40:
 18138                           	opt stack 0
 18139  01B09A                     _Turbine_Start_up_1_Second:
 18140                           	opt stack 25
 18141                           
 18142                           ;OneSecond_Function.c: 89: Error_Scan_start_up();
 18143                           
 18144                           ; BSR set to: 0
 18145                           ;incstack = 0
 18146  01B09A  EC62  F0C8         	call	_Error_Scan_start_up	;wreg free
 18147                           
 18148                           ;OneSecond_Function.c: 90: VFD_Data_Kill();
 18149  01B09E  ECEC  F0D6         	call	_VFD_Data_Kill	;wreg free
 18150  01B0A2  0012               	return		;funcret
 18151  01B0A4                     __end_of_Turbine_Start_up_1_Second:
 18152                           	opt stack 0
 18153                           tblptru	equ	0xFF8
 18154                           tblptrh	equ	0xFF7
 18155                           tblptrl	equ	0xFF6
 18156                           tablat	equ	0xFF5
 18157                           prodh	equ	0xFF4
 18158                           prodl	equ	0xFF3
 18159                           intcon	equ	0xFF2
 18160                           postinc0	equ	0xFEE
 18161                           wreg	equ	0xFE8
 18162                           postdec1	equ	0xFE5
 18163                           fsr1h	equ	0xFE2
 18164                           fsr1l	equ	0xFE1
 18165                           indf2	equ	0xFDF
 18166                           postinc2	equ	0xFDE
 18167                           postdec2	equ	0xFDD
 18168                           fsr2h	equ	0xFDA
 18169                           fsr2l	equ	0xFD9
 18170                           status	equ	0xFD8
 18171                           
 18172 ;; *************** function _Error_Scan_start_up *****************
 18173 ;; Defined at:
 18174 ;;		line 26 in file "ERROR_HANDLING.c"
 18175 ;; Parameters:    Size  Location     Type
 18176 ;;		None
 18177 ;; Auto vars:     Size  Location     Type
 18178 ;;		None
 18179 ;; Return value:  Size  Location     Type
 18180 ;;                  1    wreg      void 
 18181 ;; Registers used:
 18182 ;;		wreg, status,2, status,0
 18183 ;; Tracked objects:
 18184 ;;		On entry : 0/0
 18185 ;;		On exit  : 0/0
 18186 ;;		Unchanged: 0/0
 18187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18192 ;;Total ram usage:        0 bytes
 18193 ;; Hardware stack levels used:    1
 18194 ;; Hardware stack levels required when called:    3
 18195 ;; This function calls:
 18196 ;;		Nothing
 18197 ;; This function is called by:
 18198 ;;		_Turbine_Start_up_1_Second
 18199 ;; This function uses a non-reentrant model
 18200 ;;
 18201                           
 18202                           	psect	text41
 18203  0190C4                     __ptext41:
 18204                           	opt stack 0
 18205  0190C4                     _Error_Scan_start_up:
 18206                           	opt stack 25
 18207                           
 18208                           ;ERROR_HANDLING.c: 28: if(EEPROM_Error_Flag == 1 || Feedback_Error == 1 || Grid_Over_cur
      +                          rent == 1 || VFD_communication_Error_Flag == 1 || Start_Stop_Flag == 1 || Grid_Und_volta
      +                          ge==1 || Wind_Cut_In_Flag ==0 || Grid_Phase_Sequence_Error == 1 || Grid_Frequency_Error 
      +                          == 1 || W
 18209                           
 18210                           ;incstack = 0
 18211  0190C4  0417               	decf	_EEPROM_Error_Flag,w,c
 18212  0190C6  B4D8               	btfsc	status,2,c
 18213  0190C8  D026               	goto	l20943
 18214  0190CA  0101               	movlb	1	; () banked
 18215  0190CC  0554               	decf	_Feedback_Error& (0+255),w,b
 18216  0190CE  B4D8               	btfsc	status,2,c
 18217  0190D0  D022               	goto	l20943
 18218                           
 18219                           ; BSR set to: 1
 18220  0190D2  041C               	decf	_Grid_Over_current,w,c
 18221  0190D4  B4D8               	btfsc	status,2,c
 18222  0190D6  D01F               	goto	l20943
 18223                           
 18224                           ; BSR set to: 1
 18225  0190D8  0100               	movlb	0	; () banked
 18226  0190DA  05F1               	decf	_VFD_communication_Error_Flag& (0+255),w,b
 18227  0190DC  B4D8               	btfsc	status,2,c
 18228  0190DE  D01B               	goto	l20943
 18229                           
 18230                           ; BSR set to: 0
 18231  0190E0  041F               	decf	_Start_Stop_Flag,w,c
 18232  0190E2  B4D8               	btfsc	status,2,c
 18233  0190E4  D018               	goto	l20943
 18234                           
 18235                           ; BSR set to: 0
 18236  0190E6  0100               	movlb	0	; () banked
 18237  0190E8  05E6               	decf	_Grid_Und_voltage& (0+255),w,b
 18238  0190EA  B4D8               	btfsc	status,2,c
 18239  0190EC  D014               	goto	l20943
 18240                           
 18241                           ; BSR set to: 0
 18242  0190EE  0101               	movlb	1	; () banked
 18243  0190F0  519B               	movf	_Wind_Cut_In_Flag& (0+255),w,b
 18244  0190F2  B4D8               	btfsc	status,2,c
 18245  0190F4  D010               	goto	l20943
 18246                           
 18247                           ; BSR set to: 1
 18248  0190F6  0100               	movlb	0	; () banked
 18249  0190F8  05E5               	decf	_Grid_Phase_Sequence_Error& (0+255),w,b
 18250  0190FA  B4D8               	btfsc	status,2,c
 18251  0190FC  D00C               	goto	l20943
 18252                           
 18253                           ; BSR set to: 0
 18254  0190FE  0100               	movlb	0	; () banked
 18255  019100  05E4               	decf	_Grid_Frequency_Error& (0+255),w,b
 18256  019102  B4D8               	btfsc	status,2,c
 18257  019104  D008               	goto	l20943
 18258                           
 18259                           ; BSR set to: 0
 18260  019106  0100               	movlb	0	; () banked
 18261  019108  05F2               	decf	_Wind_Cut_Out_Flag& (0+255),w,b
 18262  01910A  B4D8               	btfsc	status,2,c
 18263  01910C  D004               	goto	l20943
 18264                           
 18265                           ; BSR set to: 0
 18266  01910E  0101               	movlb	1	; () banked
 18267  019110  0565               	decf	_Grid_Ovr_voltage& (0+255),w,b
 18268  019112  A4D8               	btfss	status,2,c
 18269  019114  D009               	goto	l6084
 18270  019116                     l20943:
 18271                           
 18272                           ;ERROR_HANDLING.c: 29: {
 18273                           ;ERROR_HANDLING.c: 30: Start_up_Error = 1;
 18274  019116  0E01               	movlw	1
 18275  019118  0101               	movlb	1	; () banked
 18276  01911A  6FC8               	movwf	_Start_up_Error& (0+255),b
 18277                           
 18278                           ;ERROR_HANDLING.c: 31: Initial_Delay_Second = 0;
 18279  01911C  0E00               	movlw	0
 18280  01911E  0101               	movlb	1	; () banked
 18281  019120  6F2B               	movwf	(_Initial_Delay_Second+1)& (0+255),b
 18282  019122  0E00               	movlw	0
 18283  019124  6F2A               	movwf	_Initial_Delay_Second& (0+255),b
 18284                           
 18285                           ; BSR set to: 1
 18286                           ;ERROR_HANDLING.c: 32: RA5 = 1;
 18287  019126  8A80               	bsf	3968,5,c	;volatile
 18288  019128                     l6084:
 18289                           
 18290                           ; BSR set to: 1
 18291                           ;ERROR_HANDLING.c: 33: }
 18292                           ;ERROR_HANDLING.c: 34: if(EEPROM_Error_Flag == 0 && Feedback_Error == 0 && Gen_EP_Err_Fl
      +                          ag == 0 && Pitch_EP_Err_Flag == 0 && Grid_Over_current == 0 && VFD_communication_Error_F
      +                          lag == 0 && Start_Stop_Flag == 0 && Grid_Und_voltage == 0 && Wind_Cut_In_Flag == 1 && Gr
      +                          id_Phase_
 18293  019128  5017               	movf	_EEPROM_Error_Flag,w,c
 18294  01912A  A4D8               	btfss	status,2,c
 18295  01912C  0012               	return	
 18296                           
 18297                           ; BSR set to: 1
 18298  01912E  0101               	movlb	1	; () banked
 18299  019130  5154               	movf	_Feedback_Error& (0+255),w,b
 18300  019132  0101               	movlb	1	; () banked
 18301  019134  A4D8               	btfss	status,2,c
 18302  019136  0012               	return	
 18303                           
 18304                           ; BSR set to: 1
 18305  019138  0100               	movlb	0	; () banked
 18306  01913A  51E3               	movf	_Gen_EP_Err_Flag& (0+255),w,b
 18307  01913C  A4D8               	btfss	status,2,c
 18308  01913E  0012               	return	
 18309                           
 18310                           ; BSR set to: 0
 18311  019140  0100               	movlb	0	; () banked
 18312  019142  51E7               	movf	_Pitch_EP_Err_Flag& (0+255),w,b
 18313  019144  A4D8               	btfss	status,2,c
 18314  019146  0012               	return	
 18315                           
 18316                           ; BSR set to: 0
 18317  019148  501C               	movf	_Grid_Over_current,w,c
 18318  01914A  A4D8               	btfss	status,2,c
 18319  01914C  0012               	return	
 18320                           
 18321                           ; BSR set to: 0
 18322  01914E  0100               	movlb	0	; () banked
 18323  019150  51F1               	movf	_VFD_communication_Error_Flag& (0+255),w,b
 18324  019152  A4D8               	btfss	status,2,c
 18325  019154  0012               	return	
 18326                           
 18327                           ; BSR set to: 0
 18328  019156  501F               	movf	_Start_Stop_Flag,w,c
 18329  019158  A4D8               	btfss	status,2,c
 18330  01915A  0012               	return	
 18331                           
 18332                           ; BSR set to: 0
 18333  01915C  0100               	movlb	0	; () banked
 18334  01915E  51E6               	movf	_Grid_Und_voltage& (0+255),w,b
 18335  019160  A4D8               	btfss	status,2,c
 18336  019162  0012               	return	
 18337                           
 18338                           ; BSR set to: 0
 18339  019164  0101               	movlb	1	; () banked
 18340  019166  059B               	decf	_Wind_Cut_In_Flag& (0+255),w,b
 18341  019168  A4D8               	btfss	status,2,c
 18342  01916A  0012               	return	
 18343                           
 18344                           ; BSR set to: 1
 18345  01916C  0100               	movlb	0	; () banked
 18346  01916E  51E5               	movf	_Grid_Phase_Sequence_Error& (0+255),w,b
 18347  019170  A4D8               	btfss	status,2,c
 18348  019172  0012               	return	
 18349                           
 18350                           ; BSR set to: 0
 18351  019174  0100               	movlb	0	; () banked
 18352  019176  51E4               	movf	_Grid_Frequency_Error& (0+255),w,b
 18353  019178  A4D8               	btfss	status,2,c
 18354  01917A  0012               	return	
 18355                           
 18356                           ; BSR set to: 0
 18357  01917C  0100               	movlb	0	; () banked
 18358  01917E  51F2               	movf	_Wind_Cut_Out_Flag& (0+255),w,b
 18359  019180  A4D8               	btfss	status,2,c
 18360  019182  0012               	return	
 18361                           
 18362                           ; BSR set to: 0
 18363                           ;ERROR_HANDLING.c: 35: {
 18364                           ;ERROR_HANDLING.c: 36: Initial_Delay_Second++;
 18365  019184  0101               	movlb	1	; () banked
 18366  019186  4B2A               	infsnz	_Initial_Delay_Second& (0+255),f,b
 18367  019188  2B2B               	incf	(_Initial_Delay_Second+1)& (0+255),f,b
 18368                           
 18369                           ; BSR set to: 1
 18370                           ;ERROR_HANDLING.c: 37: RA5 = 0;
 18371  01918A  9A80               	bcf	3968,5,c	;volatile
 18372                           
 18373                           ; BSR set to: 1
 18374                           ;ERROR_HANDLING.c: 38: Errors = NO_ERROR;
 18375  01918C  0E00               	movlw	0
 18376  01918E  6E1B               	movwf	_Errors,c
 18377                           
 18378                           ; BSR set to: 1
 18379                           ;ERROR_HANDLING.c: 39: if(Initial_Delay_Second == (120))
 18380  019190  0E78               	movlw	120
 18381  019192  0101               	movlb	1	; () banked
 18382  019194  192A               	xorwf	_Initial_Delay_Second& (0+255),w,b
 18383  019196  0101               	movlb	1	; () banked
 18384  019198  112B               	iorwf	(_Initial_Delay_Second+1)& (0+255),w,b
 18385  01919A  A4D8               	btfss	status,2,c
 18386  01919C  0012               	return	
 18387                           
 18388                           ; BSR set to: 1
 18389                           ;ERROR_HANDLING.c: 40: {
 18390                           ;ERROR_HANDLING.c: 41: Initial_Delay_Second = 0;
 18391  01919E  0E00               	movlw	0
 18392  0191A0  0101               	movlb	1	; () banked
 18393  0191A2  6F2B               	movwf	(_Initial_Delay_Second+1)& (0+255),b
 18394  0191A4  0E00               	movlw	0
 18395  0191A6  6F2A               	movwf	_Initial_Delay_Second& (0+255),b
 18396                           
 18397                           ;ERROR_HANDLING.c: 42: Start_up_Error = 0;
 18398  0191A8  0E00               	movlw	0
 18399  0191AA  0101               	movlb	1	; () banked
 18400  0191AC  6FC8               	movwf	_Start_up_Error& (0+255),b
 18401                           
 18402                           ; BSR set to: 1
 18403  0191AE  0012               	return	
 18404  0191B0                     __end_of_Error_Scan_start_up:
 18405                           	opt stack 0
 18406                           tblptru	equ	0xFF8
 18407                           tblptrh	equ	0xFF7
 18408                           tblptrl	equ	0xFF6
 18409                           tablat	equ	0xFF5
 18410                           prodh	equ	0xFF4
 18411                           prodl	equ	0xFF3
 18412                           intcon	equ	0xFF2
 18413                           postinc0	equ	0xFEE
 18414                           wreg	equ	0xFE8
 18415                           postdec1	equ	0xFE5
 18416                           fsr1h	equ	0xFE2
 18417                           fsr1l	equ	0xFE1
 18418                           indf2	equ	0xFDF
 18419                           postinc2	equ	0xFDE
 18420                           postdec2	equ	0xFDD
 18421                           fsr2h	equ	0xFDA
 18422                           fsr2l	equ	0xFD9
 18423                           status	equ	0xFD8
 18424                           
 18425 ;; *************** function _Turbine_Ramp_up_1_Second *****************
 18426 ;; Defined at:
 18427 ;;		line 92 in file "OneSecond_Function.c"
 18428 ;; Parameters:    Size  Location     Type
 18429 ;;		None
 18430 ;; Auto vars:     Size  Location     Type
 18431 ;;		None
 18432 ;; Return value:  Size  Location     Type
 18433 ;;                  1    wreg      void 
 18434 ;; Registers used:
 18435 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18436 ;; Tracked objects:
 18437 ;;		On entry : 0/0
 18438 ;;		On exit  : 0/0
 18439 ;;		Unchanged: 0/0
 18440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;Total ram usage:        0 bytes
 18446 ;; Hardware stack levels used:    1
 18447 ;; Hardware stack levels required when called:    7
 18448 ;; This function calls:
 18449 ;;		_Error_Scan_Ramp_up
 18450 ;;		_Five_Sec_Delay
 18451 ;;		_One_Sec_Delay
 18452 ;;		_Two_Sec_Delay
 18453 ;; This function is called by:
 18454 ;;		_Timer0_OneSecond_Function
 18455 ;; This function uses a non-reentrant model
 18456 ;;
 18457                           
 18458                           	psect	text42
 18459  01AFBC                     __ptext42:
 18460                           	opt stack 0
 18461  01AFBC                     _Turbine_Ramp_up_1_Second:
 18462                           	opt stack 22
 18463                           
 18464                           ;OneSecond_Function.c: 94: Error_Scan_Ramp_up();
 18465                           
 18466                           ;incstack = 0
 18467  01AFBC  EC88  F0CD         	call	_Error_Scan_Ramp_up	;wreg free
 18468                           
 18469                           ;OneSecond_Function.c: 95: One_Sec_Delay();
 18470  01AFC0  EC59  F0D7         	call	_One_Sec_Delay	;wreg free
 18471                           
 18472                           ;OneSecond_Function.c: 96: Two_Sec_Delay();
 18473  01AFC4  EC44  F0D7         	call	_Two_Sec_Delay	;wreg free
 18474                           
 18475                           ;OneSecond_Function.c: 97: Five_Sec_Delay();
 18476  01AFC8  EC03  F0D7         	call	_Five_Sec_Delay	;wreg free
 18477  01AFCC  0012               	return		;funcret
 18478  01AFCE                     __end_of_Turbine_Ramp_up_1_Second:
 18479                           	opt stack 0
 18480                           tblptru	equ	0xFF8
 18481                           tblptrh	equ	0xFF7
 18482                           tblptrl	equ	0xFF6
 18483                           tablat	equ	0xFF5
 18484                           prodh	equ	0xFF4
 18485                           prodl	equ	0xFF3
 18486                           intcon	equ	0xFF2
 18487                           postinc0	equ	0xFEE
 18488                           wreg	equ	0xFE8
 18489                           postdec1	equ	0xFE5
 18490                           fsr1h	equ	0xFE2
 18491                           fsr1l	equ	0xFE1
 18492                           indf2	equ	0xFDF
 18493                           postinc2	equ	0xFDE
 18494                           postdec2	equ	0xFDD
 18495                           fsr2h	equ	0xFDA
 18496                           fsr2l	equ	0xFD9
 18497                           status	equ	0xFD8
 18498                           
 18499 ;; *************** function _Two_Sec_Delay *****************
 18500 ;; Defined at:
 18501 ;;		line 113 in file "OneSecond_Function.c"
 18502 ;; Parameters:    Size  Location     Type
 18503 ;;		None
 18504 ;; Auto vars:     Size  Location     Type
 18505 ;;		None
 18506 ;; Return value:  Size  Location     Type
 18507 ;;                  1    wreg      void 
 18508 ;; Registers used:
 18509 ;;		wreg, status,2, status,0
 18510 ;; Tracked objects:
 18511 ;;		On entry : 0/0
 18512 ;;		On exit  : 0/0
 18513 ;;		Unchanged: 0/0
 18514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18519 ;;Total ram usage:        0 bytes
 18520 ;; Hardware stack levels used:    1
 18521 ;; Hardware stack levels required when called:    3
 18522 ;; This function calls:
 18523 ;;		Nothing
 18524 ;; This function is called by:
 18525 ;;		_Timer0_OneSecond_Function
 18526 ;;		_Turbine_Ramp_up_1_Second
 18527 ;; This function uses a non-reentrant model
 18528 ;;
 18529                           
 18530                           	psect	text43
 18531  01AE88                     __ptext43:
 18532                           	opt stack 0
 18533  01AE88                     _Two_Sec_Delay:
 18534                           	opt stack 26
 18535                           
 18536                           ;OneSecond_Function.c: 115: if(Two_Sec_Delay_vab)
 18537                           
 18538                           ;incstack = 0
 18539  01AE88  0101               	movlb	1	; () banked
 18540  01AE8A  518D               	movf	_Two_Sec_Delay_vab& (0+255),w,b
 18541  01AE8C  B4D8               	btfsc	status,2,c
 18542  01AE8E  0012               	return	
 18543                           
 18544                           ; BSR set to: 1
 18545                           ;OneSecond_Function.c: 116: {
 18546                           ;OneSecond_Function.c: 117: Two_Delay_counter++;
 18547  01AE90  0101               	movlb	1	; () banked
 18548  01AE92  2B8C               	incf	_Two_Delay_counter& (0+255),f,b
 18549                           
 18550                           ; BSR set to: 1
 18551                           ;OneSecond_Function.c: 118: if(Two_Delay_counter == 2)
 18552  01AE94  0E02               	movlw	2
 18553  01AE96  0101               	movlb	1	; () banked
 18554  01AE98  198C               	xorwf	_Two_Delay_counter& (0+255),w,b
 18555  01AE9A  A4D8               	btfss	status,2,c
 18556  01AE9C  0012               	return	
 18557                           
 18558                           ; BSR set to: 1
 18559                           ;OneSecond_Function.c: 119: {
 18560                           ;OneSecond_Function.c: 120: Two_Delay_counter = 0;
 18561  01AE9E  0E00               	movlw	0
 18562  01AEA0  0101               	movlb	1	; () banked
 18563  01AEA2  6F8C               	movwf	_Two_Delay_counter& (0+255),b
 18564                           
 18565                           ;OneSecond_Function.c: 121: Two_Sec_Delay_vab = 0;
 18566  01AEA4  0E00               	movlw	0
 18567  01AEA6  0101               	movlb	1	; () banked
 18568  01AEA8  6F8D               	movwf	_Two_Sec_Delay_vab& (0+255),b
 18569                           
 18570                           ;OneSecond_Function.c: 122: Two_sec_Delay_Flag = 1;
 18571  01AEAA  0E01               	movlw	1
 18572  01AEAC  0101               	movlb	1	; () banked
 18573  01AEAE  6F8E               	movwf	_Two_sec_Delay_Flag& (0+255),b
 18574                           
 18575                           ; BSR set to: 1
 18576  01AEB0  0012               	return	
 18577  01AEB2                     __end_of_Two_Sec_Delay:
 18578                           	opt stack 0
 18579                           tblptru	equ	0xFF8
 18580                           tblptrh	equ	0xFF7
 18581                           tblptrl	equ	0xFF6
 18582                           tablat	equ	0xFF5
 18583                           prodh	equ	0xFF4
 18584                           prodl	equ	0xFF3
 18585                           intcon	equ	0xFF2
 18586                           postinc0	equ	0xFEE
 18587                           wreg	equ	0xFE8
 18588                           postdec1	equ	0xFE5
 18589                           fsr1h	equ	0xFE2
 18590                           fsr1l	equ	0xFE1
 18591                           indf2	equ	0xFDF
 18592                           postinc2	equ	0xFDE
 18593                           postdec2	equ	0xFDD
 18594                           fsr2h	equ	0xFDA
 18595                           fsr2l	equ	0xFD9
 18596                           status	equ	0xFD8
 18597                           
 18598 ;; *************** function _One_Sec_Delay *****************
 18599 ;; Defined at:
 18600 ;;		line 99 in file "OneSecond_Function.c"
 18601 ;; Parameters:    Size  Location     Type
 18602 ;;		None
 18603 ;; Auto vars:     Size  Location     Type
 18604 ;;		None
 18605 ;; Return value:  Size  Location     Type
 18606 ;;                  1    wreg      void 
 18607 ;; Registers used:
 18608 ;;		wreg, status,2, status,0
 18609 ;; Tracked objects:
 18610 ;;		On entry : 0/0
 18611 ;;		On exit  : 0/0
 18612 ;;		Unchanged: 0/0
 18613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18618 ;;Total ram usage:        0 bytes
 18619 ;; Hardware stack levels used:    1
 18620 ;; Hardware stack levels required when called:    3
 18621 ;; This function calls:
 18622 ;;		Nothing
 18623 ;; This function is called by:
 18624 ;;		_Turbine_Ramp_up_1_Second
 18625 ;; This function uses a non-reentrant model
 18626 ;;
 18627                           
 18628                           	psect	text44
 18629  01AEB2                     __ptext44:
 18630                           	opt stack 0
 18631  01AEB2                     _One_Sec_Delay:
 18632                           	opt stack 25
 18633                           
 18634                           ;OneSecond_Function.c: 101: if(One_Sec_Delay_vab)
 18635                           
 18636                           ; BSR set to: 1
 18637                           ;incstack = 0
 18638  01AEB2  0101               	movlb	1	; () banked
 18639  01AEB4  5172               	movf	_One_Sec_Delay_vab& (0+255),w,b
 18640  01AEB6  0101               	movlb	1	; () banked
 18641  01AEB8  B4D8               	btfsc	status,2,c
 18642  01AEBA  0012               	return	
 18643                           
 18644                           ; BSR set to: 1
 18645                           ;OneSecond_Function.c: 102: {
 18646                           ;OneSecond_Function.c: 103: Delay_counter++;
 18647  01AEBC  0101               	movlb	1	; () banked
 18648  01AEBE  2B4F               	incf	_Delay_counter& (0+255),f,b
 18649                           
 18650                           ; BSR set to: 1
 18651                           ;OneSecond_Function.c: 104: if(Delay_counter == 1)
 18652  01AEC0  0101               	movlb	1	; () banked
 18653  01AEC2  054F               	decf	_Delay_counter& (0+255),w,b
 18654  01AEC4  A4D8               	btfss	status,2,c
 18655  01AEC6  0012               	return	
 18656                           
 18657                           ; BSR set to: 1
 18658                           ;OneSecond_Function.c: 105: {
 18659                           ;OneSecond_Function.c: 106: Delay_counter = 0;
 18660  01AEC8  0E00               	movlw	0
 18661  01AECA  0101               	movlb	1	; () banked
 18662  01AECC  6F4F               	movwf	_Delay_counter& (0+255),b
 18663                           
 18664                           ;OneSecond_Function.c: 107: One_Sec_Delay_vab = 0;
 18665  01AECE  0E00               	movlw	0
 18666  01AED0  0101               	movlb	1	; () banked
 18667  01AED2  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 18668                           
 18669                           ;OneSecond_Function.c: 108: One_sec_Delay_Flag = 1;
 18670  01AED4  0E01               	movlw	1
 18671  01AED6  0101               	movlb	1	; () banked
 18672  01AED8  6F74               	movwf	_One_sec_Delay_Flag& (0+255),b
 18673                           
 18674                           ; BSR set to: 1
 18675  01AEDA  0012               	return	
 18676  01AEDC                     __end_of_One_Sec_Delay:
 18677                           	opt stack 0
 18678                           tblptru	equ	0xFF8
 18679                           tblptrh	equ	0xFF7
 18680                           tblptrl	equ	0xFF6
 18681                           tablat	equ	0xFF5
 18682                           prodh	equ	0xFF4
 18683                           prodl	equ	0xFF3
 18684                           intcon	equ	0xFF2
 18685                           postinc0	equ	0xFEE
 18686                           wreg	equ	0xFE8
 18687                           postdec1	equ	0xFE5
 18688                           fsr1h	equ	0xFE2
 18689                           fsr1l	equ	0xFE1
 18690                           indf2	equ	0xFDF
 18691                           postinc2	equ	0xFDE
 18692                           postdec2	equ	0xFDD
 18693                           fsr2h	equ	0xFDA
 18694                           fsr2l	equ	0xFD9
 18695                           status	equ	0xFD8
 18696                           
 18697 ;; *************** function _Five_Sec_Delay *****************
 18698 ;; Defined at:
 18699 ;;		line 126 in file "OneSecond_Function.c"
 18700 ;; Parameters:    Size  Location     Type
 18701 ;;		None
 18702 ;; Auto vars:     Size  Location     Type
 18703 ;;		None
 18704 ;; Return value:  Size  Location     Type
 18705 ;;                  1    wreg      void 
 18706 ;; Registers used:
 18707 ;;		wreg, status,2, status,0
 18708 ;; Tracked objects:
 18709 ;;		On entry : 0/0
 18710 ;;		On exit  : 0/0
 18711 ;;		Unchanged: 0/0
 18712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18717 ;;Total ram usage:        0 bytes
 18718 ;; Hardware stack levels used:    1
 18719 ;; Hardware stack levels required when called:    3
 18720 ;; This function calls:
 18721 ;;		Nothing
 18722 ;; This function is called by:
 18723 ;;		_Turbine_Ramp_up_1_Second
 18724 ;; This function uses a non-reentrant model
 18725 ;;
 18726                           
 18727                           	psect	text45
 18728  01AE06                     __ptext45:
 18729                           	opt stack 0
 18730  01AE06                     _Five_Sec_Delay:
 18731                           	opt stack 25
 18732                           
 18733                           ;OneSecond_Function.c: 128: if(Five_Sec_Delay_vab)
 18734                           
 18735                           ; BSR set to: 1
 18736                           ;incstack = 0
 18737  01AE06  0101               	movlb	1	; () banked
 18738  01AE08  5156               	movf	_Five_Sec_Delay_vab& (0+255),w,b
 18739  01AE0A  0101               	movlb	1	; () banked
 18740  01AE0C  B4D8               	btfsc	status,2,c
 18741  01AE0E  0012               	return	
 18742                           
 18743                           ; BSR set to: 1
 18744                           ;OneSecond_Function.c: 129: {
 18745                           ;OneSecond_Function.c: 130: Five_Delay_counter++;
 18746  01AE10  0101               	movlb	1	; () banked
 18747  01AE12  2B55               	incf	_Five_Delay_counter& (0+255),f,b
 18748                           
 18749                           ; BSR set to: 1
 18750                           ;OneSecond_Function.c: 131: if(Five_Delay_counter == 5)
 18751  01AE14  0E05               	movlw	5
 18752  01AE16  0101               	movlb	1	; () banked
 18753  01AE18  1955               	xorwf	_Five_Delay_counter& (0+255),w,b
 18754  01AE1A  A4D8               	btfss	status,2,c
 18755  01AE1C  0012               	return	
 18756                           
 18757                           ; BSR set to: 1
 18758                           ;OneSecond_Function.c: 132: {
 18759                           ;OneSecond_Function.c: 133: Five_Delay_counter = 0;
 18760  01AE1E  0E00               	movlw	0
 18761  01AE20  0101               	movlb	1	; () banked
 18762  01AE22  6F55               	movwf	_Five_Delay_counter& (0+255),b
 18763                           
 18764                           ;OneSecond_Function.c: 134: Five_Delay_counter = 0;
 18765  01AE24  0E00               	movlw	0
 18766  01AE26  0101               	movlb	1	; () banked
 18767  01AE28  6F55               	movwf	_Five_Delay_counter& (0+255),b
 18768                           
 18769                           ;OneSecond_Function.c: 135: Five_sec_Delay_Flag = 1;
 18770  01AE2A  0E01               	movlw	1
 18771  01AE2C  0102               	movlb	2	; () banked
 18772  01AE2E  6FBC               	movwf	_Five_sec_Delay_Flag& (0+255),b
 18773                           
 18774                           ; BSR set to: 2
 18775  01AE30  0012               	return	
 18776  01AE32                     __end_of_Five_Sec_Delay:
 18777                           	opt stack 0
 18778                           tblptru	equ	0xFF8
 18779                           tblptrh	equ	0xFF7
 18780                           tblptrl	equ	0xFF6
 18781                           tablat	equ	0xFF5
 18782                           prodh	equ	0xFF4
 18783                           prodl	equ	0xFF3
 18784                           intcon	equ	0xFF2
 18785                           postinc0	equ	0xFEE
 18786                           wreg	equ	0xFE8
 18787                           postdec1	equ	0xFE5
 18788                           fsr1h	equ	0xFE2
 18789                           fsr1l	equ	0xFE1
 18790                           indf2	equ	0xFDF
 18791                           postinc2	equ	0xFDE
 18792                           postdec2	equ	0xFDD
 18793                           fsr2h	equ	0xFDA
 18794                           fsr2l	equ	0xFD9
 18795                           status	equ	0xFD8
 18796                           
 18797 ;; *************** function _Error_Scan_Ramp_up *****************
 18798 ;; Defined at:
 18799 ;;		line 46 in file "ERROR_HANDLING.c"
 18800 ;; Parameters:    Size  Location     Type
 18801 ;;		None
 18802 ;; Auto vars:     Size  Location     Type
 18803 ;;		None
 18804 ;; Return value:  Size  Location     Type
 18805 ;;                  2  2499[None  ] int 
 18806 ;; Registers used:
 18807 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18808 ;; Tracked objects:
 18809 ;;		On entry : 0/0
 18810 ;;		On exit  : 0/0
 18811 ;;		Unchanged: 0/0
 18812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18817 ;;Total ram usage:        0 bytes
 18818 ;; Hardware stack levels used:    1
 18819 ;; Hardware stack levels required when called:    6
 18820 ;; This function calls:
 18821 ;;		_EEPROM_Error_Stop
 18822 ;; This function is called by:
 18823 ;;		_Turbine_Ramp_up_1_Second
 18824 ;; This function uses a non-reentrant model
 18825 ;;
 18826                           
 18827                           	psect	text46
 18828  019B10                     __ptext46:
 18829                           	opt stack 0
 18830  019B10                     _Error_Scan_Ramp_up:
 18831                           	opt stack 22
 18832                           
 18833                           ;ERROR_HANDLING.c: 48: if(EEPROM_Error_Flag == 1 || VFD_communication_Error_Flag == 1 ||
      +                           Start_Stop_Flag == 1 || Pitch_FB_Error_Flag == 1 || VFD_DC_EXTREM_LOW_Error == 1 || VFD
      +                          _SHORT_CIRCUIT_fLAG == 1 || Turbine_Over_Speed_Flag == 1 || VFD__Run_Time_Error == 1 || 
      +                          VFD_DC_Bu
 18834                           
 18835                           ;incstack = 0
 18836  019B10  0417               	decf	_EEPROM_Error_Flag,w,c
 18837  019B12  B4D8               	btfsc	status,2,c
 18838  019B14  D038               	goto	l21009
 18839  019B16  0100               	movlb	0	; () banked
 18840  019B18  05F1               	decf	_VFD_communication_Error_Flag& (0+255),w,b
 18841  019B1A  B4D8               	btfsc	status,2,c
 18842  019B1C  D034               	goto	l21009
 18843                           
 18844                           ; BSR set to: 0
 18845  019B1E  041F               	decf	_Start_Stop_Flag,w,c
 18846  019B20  B4D8               	btfsc	status,2,c
 18847  019B22  D031               	goto	l21009
 18848                           
 18849                           ; BSR set to: 0
 18850  019B24  0100               	movlb	0	; () banked
 18851  019B26  05E8               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 18852  019B28  B4D8               	btfsc	status,2,c
 18853  019B2A  D02D               	goto	l21009
 18854                           
 18855                           ; BSR set to: 0
 18856  019B2C  0101               	movlb	1	; () banked
 18857  019B2E  0592               	decf	_VFD_DC_EXTREM_LOW_Error& (0+255),w,b
 18858  019B30  B4D8               	btfsc	status,2,c
 18859  019B32  D029               	goto	l21009
 18860                           
 18861                           ; BSR set to: 1
 18862  019B34  0102               	movlb	2	; () banked
 18863  019B36  05AA               	decf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),w,b
 18864  019B38  0102               	movlb	2	; () banked
 18865  019B3A  11AB               	iorwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),w,b
 18866  019B3C  B4D8               	btfsc	status,2,c
 18867  019B3E  D023               	goto	l21009
 18868                           
 18869                           ; BSR set to: 2
 18870  019B40  0100               	movlb	0	; () banked
 18871  019B42  05EF               	decf	_Turbine_Over_Speed_Flag& (0+255),w,b
 18872  019B44  B4D8               	btfsc	status,2,c
 18873  019B46  D01F               	goto	l21009
 18874                           
 18875                           ; BSR set to: 0
 18876  019B48  0101               	movlb	1	; () banked
 18877  019B4A  0598               	decf	_VFD__Run_Time_Error& (0+255),w,b
 18878  019B4C  B4D8               	btfsc	status,2,c
 18879  019B4E  D01B               	goto	l21009
 18880                           
 18881                           ; BSR set to: 1
 18882  019B50  0101               	movlb	1	; () banked
 18883  019B52  0591               	decf	_VFD_DC_Bus_Low_Error& (0+255),w,b
 18884  019B54  B4D8               	btfsc	status,2,c
 18885  019B56  D017               	goto	l21009
 18886                           
 18887                           ; BSR set to: 1
 18888  019B58  0101               	movlb	1	; () banked
 18889  019B5A  0590               	decf	_VFD_DC_Bus_High_Error& (0+255),w,b
 18890  019B5C  B4D8               	btfsc	status,2,c
 18891  019B5E  D013               	goto	l21009
 18892                           
 18893                           ; BSR set to: 1
 18894  019B60  0101               	movlb	1	; () banked
 18895  019B62  0593               	decf	_VFD_Error_Flag& (0+255),w,b
 18896  019B64  B4D8               	btfsc	status,2,c
 18897  019B66  D00F               	goto	l21009
 18898                           
 18899                           ; BSR set to: 1
 18900  019B68  0101               	movlb	1	; () banked
 18901  019B6A  058F               	decf	_VFD_DC_Bus_Current_Error& (0+255),w,b
 18902  019B6C  B4D8               	btfsc	status,2,c
 18903  019B6E  D00B               	goto	l21009
 18904                           
 18905                           ; BSR set to: 1
 18906  019B70  0101               	movlb	1	; () banked
 18907  019B72  0570               	decf	_Motor_Slip_Error_Flag& (0+255),w,b
 18908  019B74  B4D8               	btfsc	status,2,c
 18909  019B76  D007               	goto	l21009
 18910                           
 18911                           ; BSR set to: 1
 18912  019B78  0101               	movlb	1	; () banked
 18913  019B7A  0579               	decf	_Rotor_Slip_Error_Flag& (0+255),w,b
 18914  019B7C  B4D8               	btfsc	status,2,c
 18915  019B7E  D003               	goto	l21009
 18916                           
 18917                           ; BSR set to: 1
 18918  019B80  041C               	decf	_Grid_Over_current,w,c
 18919  019B82  A4D8               	btfss	status,2,c
 18920  019B84  0012               	return	
 18921  019B86                     l21009:
 18922                           
 18923                           ;ERROR_HANDLING.c: 49: {
 18924                           ;ERROR_HANDLING.c: 50: VFD_RAMP = VFD_Stop;
 18925  019B86  0E04               	movlw	4
 18926  019B88  0101               	movlb	1	; () banked
 18927  019B8A  6F97               	movwf	_VFD_RAMP& (0+255),b
 18928                           
 18929                           ; BSR set to: 1
 18930                           ;ERROR_HANDLING.c: 52: if(VFD__Run_Time_Error == 1 || VFD_DC_EXTREM_LOW_Error == 1 || Mo
      +                          tor_Slip_Error_Flag == 1 || Rotor_Slip_Error_Flag == 1 || Pitch_FB_Error_Flag == 1 || VF
      +                          D_SHORT_CIRCUIT_fLAG == 1)
 18931  019B8C  0101               	movlb	1	; () banked
 18932  019B8E  0598               	decf	_VFD__Run_Time_Error& (0+255),w,b
 18933  019B90  B4D8               	btfsc	status,2,c
 18934  019B92  D016               	goto	l21023
 18935                           
 18936                           ; BSR set to: 1
 18937  019B94  0101               	movlb	1	; () banked
 18938  019B96  0592               	decf	_VFD_DC_EXTREM_LOW_Error& (0+255),w,b
 18939  019B98  B4D8               	btfsc	status,2,c
 18940  019B9A  D012               	goto	l21023
 18941                           
 18942                           ; BSR set to: 1
 18943  019B9C  0101               	movlb	1	; () banked
 18944  019B9E  0570               	decf	_Motor_Slip_Error_Flag& (0+255),w,b
 18945  019BA0  B4D8               	btfsc	status,2,c
 18946  019BA2  D00E               	goto	l21023
 18947                           
 18948                           ; BSR set to: 1
 18949  019BA4  0101               	movlb	1	; () banked
 18950  019BA6  0579               	decf	_Rotor_Slip_Error_Flag& (0+255),w,b
 18951  019BA8  B4D8               	btfsc	status,2,c
 18952  019BAA  D00A               	goto	l21023
 18953                           
 18954                           ; BSR set to: 1
 18955  019BAC  0100               	movlb	0	; () banked
 18956  019BAE  05E8               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 18957  019BB0  B4D8               	btfsc	status,2,c
 18958  019BB2  D006               	goto	l21023
 18959                           
 18960                           ; BSR set to: 0
 18961  019BB4  0102               	movlb	2	; () banked
 18962  019BB6  05AA               	decf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),w,b
 18963  019BB8  0102               	movlb	2	; () banked
 18964  019BBA  11AB               	iorwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),w,b
 18965  019BBC  A4D8               	btfss	status,2,c
 18966  019BBE  0012               	return	
 18967  019BC0                     l21023:
 18968                           
 18969                           ;ERROR_HANDLING.c: 53: {
 18970                           ;ERROR_HANDLING.c: 54: EEPROM_Error_Stop();
 18971  019BC0  EC77  F0AA         	call	_EEPROM_Error_Stop	;wreg free
 18972  019BC4  0012               	return	
 18973  019BC6                     __end_of_Error_Scan_Ramp_up:
 18974                           	opt stack 0
 18975                           tblptru	equ	0xFF8
 18976                           tblptrh	equ	0xFF7
 18977                           tblptrl	equ	0xFF6
 18978                           tablat	equ	0xFF5
 18979                           prodh	equ	0xFF4
 18980                           prodl	equ	0xFF3
 18981                           intcon	equ	0xFF2
 18982                           postinc0	equ	0xFEE
 18983                           wreg	equ	0xFE8
 18984                           postdec1	equ	0xFE5
 18985                           fsr1h	equ	0xFE2
 18986                           fsr1l	equ	0xFE1
 18987                           indf2	equ	0xFDF
 18988                           postinc2	equ	0xFDE
 18989                           postdec2	equ	0xFDD
 18990                           fsr2h	equ	0xFDA
 18991                           fsr2l	equ	0xFD9
 18992                           status	equ	0xFD8
 18993                           
 18994 ;; *************** function _Last_Five_Error *****************
 18995 ;; Defined at:
 18996 ;;		line 140 in file "ERROR_HANDLING.c"
 18997 ;; Parameters:    Size  Location     Type
 18998 ;;		None
 18999 ;; Auto vars:     Size  Location     Type
 19000 ;;		None
 19001 ;; Return value:  Size  Location     Type
 19002 ;;                  1    wreg      void 
 19003 ;; Registers used:
 19004 ;;		wreg, status,2, status,0
 19005 ;; Tracked objects:
 19006 ;;		On entry : 0/0
 19007 ;;		On exit  : 0/0
 19008 ;;		Unchanged: 0/0
 19009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19014 ;;Total ram usage:        0 bytes
 19015 ;; Hardware stack levels used:    1
 19016 ;; Hardware stack levels required when called:    3
 19017 ;; This function calls:
 19018 ;;		Nothing
 19019 ;; This function is called by:
 19020 ;;		_Timer0_OneSecond_Function
 19021 ;; This function uses a non-reentrant model
 19022 ;;
 19023                           
 19024                           	psect	text47
 19025  01AF2A                     __ptext47:
 19026                           	opt stack 0
 19027  01AF2A                     _Last_Five_Error:
 19028                           	opt stack 26
 19029                           
 19030                           ;ERROR_HANDLING.c: 143: if(Errors != Errors1)
 19031                           
 19032                           ;incstack = 0
 19033  01AF2A  0100               	movlb	0	; () banked
 19034  01AF2C  51E1               	movf	_Errors1& (0+255),w,b
 19035  01AF2E  181B               	xorwf	_Errors,w,c
 19036  01AF30  B4D8               	btfsc	status,2,c
 19037  01AF32  0012               	return	
 19038                           
 19039                           ; BSR set to: 0
 19040                           ;ERROR_HANDLING.c: 144: {
 19041                           ;ERROR_HANDLING.c: 145: Errors5 = Errors4;
 19042  01AF34  C152  F153         	movff	_Errors4,_Errors5
 19043                           
 19044                           ;ERROR_HANDLING.c: 146: Errors4 = Errors3;
 19045  01AF38  C151  F152         	movff	_Errors3,_Errors4
 19046                           
 19047                           ;ERROR_HANDLING.c: 147: Errors3 = Errors2;
 19048  01AF3C  C150  F151         	movff	_Errors2,_Errors3
 19049                           
 19050                           ;ERROR_HANDLING.c: 148: Errors2 = Errors1;
 19051  01AF40  C0E1  F150         	movff	_Errors1,_Errors2
 19052                           
 19053                           ;ERROR_HANDLING.c: 149: Errors1 = Errors;
 19054  01AF44  C01B  F0E1         	movff	_Errors,_Errors1
 19055  01AF48  0012               	return	
 19056  01AF4A                     __end_of_Last_Five_Error:
 19057                           	opt stack 0
 19058                           tblptru	equ	0xFF8
 19059                           tblptrh	equ	0xFF7
 19060                           tblptrl	equ	0xFF6
 19061                           tablat	equ	0xFF5
 19062                           prodh	equ	0xFF4
 19063                           prodl	equ	0xFF3
 19064                           intcon	equ	0xFF2
 19065                           postinc0	equ	0xFEE
 19066                           wreg	equ	0xFE8
 19067                           postdec1	equ	0xFE5
 19068                           fsr1h	equ	0xFE2
 19069                           fsr1l	equ	0xFE1
 19070                           indf2	equ	0xFDF
 19071                           postinc2	equ	0xFDE
 19072                           postdec2	equ	0xFDD
 19073                           fsr2h	equ	0xFDA
 19074                           fsr2l	equ	0xFD9
 19075                           status	equ	0xFD8
 19076                           
 19077 ;; *************** function _Error_Scan_Running *****************
 19078 ;; Defined at:
 19079 ;;		line 59 in file "ERROR_HANDLING.c"
 19080 ;; Parameters:    Size  Location     Type
 19081 ;;		None
 19082 ;; Auto vars:     Size  Location     Type
 19083 ;;		None
 19084 ;; Return value:  Size  Location     Type
 19085 ;;                  2  2481[None  ] int 
 19086 ;; Registers used:
 19087 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19088 ;; Tracked objects:
 19089 ;;		On entry : 0/0
 19090 ;;		On exit  : 0/0
 19091 ;;		Unchanged: 0/0
 19092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19097 ;;Total ram usage:        0 bytes
 19098 ;; Hardware stack levels used:    1
 19099 ;; Hardware stack levels required when called:    6
 19100 ;; This function calls:
 19101 ;;		_EEPROM_Error_Stop
 19102 ;;		_Stopping_state_function
 19103 ;; This function is called by:
 19104 ;;		_Timer0_OneSecond_Function
 19105 ;; This function uses a non-reentrant model
 19106 ;;
 19107                           
 19108                           	psect	text48
 19109  019DDC                     __ptext48:
 19110                           	opt stack 0
 19111  019DDC                     _Error_Scan_Running:
 19112                           	opt stack 23
 19113                           
 19114                           ;ERROR_HANDLING.c: 61: if(EEPROM_Error_Flag == 1 || VFD_communication_Error_Flag == 1 ||
      +                           Start_Stop_Flag == 1 || Generator_One_Feedback_Error == 1 || Pitch_FB_Error_Flag == 1 |
      +                          | Tur_OverLoaded_Error == 1 || KW_Minimum_Error == 1 || KW_Maximum_Error == 1 || Turbine
      +                          _Under_Sp
 19115                           
 19116                           ; BSR set to: 0
 19117                           ;incstack = 0
 19118  019DDC  0417               	decf	_EEPROM_Error_Flag,w,c
 19119  019DDE  B4D8               	btfsc	status,2,c
 19120  019DE0  D042               	goto	l21979
 19121  019DE2  0100               	movlb	0	; () banked
 19122  019DE4  05F1               	decf	_VFD_communication_Error_Flag& (0+255),w,b
 19123  019DE6  B4D8               	btfsc	status,2,c
 19124  019DE8  D03E               	goto	l21979
 19125                           
 19126                           ; BSR set to: 0
 19127  019DEA  041F               	decf	_Start_Stop_Flag,w,c
 19128  019DEC  B4D8               	btfsc	status,2,c
 19129  019DEE  D03B               	goto	l21979
 19130                           
 19131                           ; BSR set to: 0
 19132  019DF0  0101               	movlb	1	; () banked
 19133  019DF2  0562               	decf	_Generator_One_Feedback_Error& (0+255),w,b
 19134  019DF4  B4D8               	btfsc	status,2,c
 19135  019DF6  D037               	goto	l21979
 19136                           
 19137                           ; BSR set to: 1
 19138  019DF8  0100               	movlb	0	; () banked
 19139  019DFA  05E8               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 19140  019DFC  B4D8               	btfsc	status,2,c
 19141  019DFE  D033               	goto	l21979
 19142                           
 19143                           ; BSR set to: 0
 19144  019E00  0101               	movlb	1	; () banked
 19145  019E02  0589               	decf	_Tur_OverLoaded_Error& (0+255),w,b
 19146  019E04  B4D8               	btfsc	status,2,c
 19147  019E06  D02F               	goto	l21979
 19148                           
 19149                           ; BSR set to: 1
 19150  019E08  0101               	movlb	1	; () banked
 19151  019E0A  056B               	decf	_KW_Minimum_Error& (0+255),w,b
 19152  019E0C  B4D8               	btfsc	status,2,c
 19153  019E0E  D02B               	goto	l21979
 19154                           
 19155                           ; BSR set to: 1
 19156  019E10  0101               	movlb	1	; () banked
 19157  019E12  056A               	decf	_KW_Maximum_Error& (0+255),w,b
 19158  019E14  B4D8               	btfsc	status,2,c
 19159  019E16  D027               	goto	l21979
 19160                           
 19161                           ; BSR set to: 1
 19162  019E18  0101               	movlb	1	; () banked
 19163  019E1A  058B               	decf	_Turbine_Under_Speed_Flag& (0+255),w,b
 19164  019E1C  B4D8               	btfsc	status,2,c
 19165  019E1E  D023               	goto	l21979
 19166                           
 19167                           ; BSR set to: 1
 19168  019E20  0100               	movlb	0	; () banked
 19169  019E22  05EF               	decf	_Turbine_Over_Speed_Flag& (0+255),w,b
 19170  019E24  B4D8               	btfsc	status,2,c
 19171  019E26  D01F               	goto	l21979
 19172                           
 19173                           ; BSR set to: 0
 19174  019E28  041C               	decf	_Grid_Over_current,w,c
 19175  019E2A  B4D8               	btfsc	status,2,c
 19176  019E2C  D01C               	goto	l21979
 19177                           
 19178                           ; BSR set to: 0
 19179  019E2E  0101               	movlb	1	; () banked
 19180  019E30  0563               	decf	_Generator_Over_Speed& (0+255),w,b
 19181  019E32  B4D8               	btfsc	status,2,c
 19182  019E34  D018               	goto	l21979
 19183                           
 19184                           ; BSR set to: 1
 19185  019E36  0100               	movlb	0	; () banked
 19186  019E38  05EF               	decf	_Turbine_Over_Speed_Flag& (0+255),w,b
 19187  019E3A  B4D8               	btfsc	status,2,c
 19188  019E3C  D014               	goto	l21979
 19189                           
 19190                           ; BSR set to: 0
 19191  019E3E  0100               	movlb	0	; () banked
 19192  019E40  05E6               	decf	_Grid_Und_voltage& (0+255),w,b
 19193  019E42  B4D8               	btfsc	status,2,c
 19194  019E44  D010               	goto	l21979
 19195                           
 19196                           ; BSR set to: 0
 19197  019E46  0100               	movlb	0	; () banked
 19198  019E48  05F2               	decf	_Wind_Cut_Out_Flag& (0+255),w,b
 19199  019E4A  A4D8               	btfss	status,2,c
 19200  019E4C  D004               	goto	l21975
 19201                           
 19202                           ; BSR set to: 0
 19203  019E4E  0100               	movlb	0	; () banked
 19204  019E50  51E5               	movf	_Grid_Phase_Sequence_Error& (0+255),w,b
 19205  019E52  B4D8               	btfsc	status,2,c
 19206  019E54  D008               	goto	l21979
 19207  019E56                     l21975:
 19208                           
 19209                           ; BSR set to: 0
 19210  019E56  0100               	movlb	0	; () banked
 19211  019E58  05E4               	decf	_Grid_Frequency_Error& (0+255),w,b
 19212  019E5A  B4D8               	btfsc	status,2,c
 19213  019E5C  D004               	goto	l21979
 19214                           
 19215                           ; BSR set to: 0
 19216  019E5E  0101               	movlb	1	; () banked
 19217  019E60  0565               	decf	_Grid_Ovr_voltage& (0+255),w,b
 19218  019E62  A4D8               	btfss	status,2,c
 19219  019E64  0012               	return	
 19220  019E66                     l21979:
 19221                           
 19222                           ;ERROR_HANDLING.c: 62: {
 19223                           ;ERROR_HANDLING.c: 63: Turbine_state = STOPPING_STATE;
 19224  019E66  0E03               	movlw	3
 19225  019E68  0100               	movlb	0	; () banked
 19226  019E6A  6FF0               	movwf	_Turbine_state& (0+255),b
 19227                           
 19228                           ; BSR set to: 0
 19229                           ;ERROR_HANDLING.c: 65: if(Generator_One_Feedback_Error == 1 || Pitch_FB_Error_Flag == 1 
      +                          || Tur_OverLoaded_Error == 1)
 19230  019E6C  0101               	movlb	1	; () banked
 19231  019E6E  0562               	decf	_Generator_One_Feedback_Error& (0+255),w,b
 19232  019E70  B4D8               	btfsc	status,2,c
 19233  019E72  D007               	goto	l21987
 19234                           
 19235                           ; BSR set to: 1
 19236  019E74  0100               	movlb	0	; () banked
 19237  019E76  05E8               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 19238  019E78  B4D8               	btfsc	status,2,c
 19239  019E7A  D003               	goto	l21987
 19240                           
 19241                           ; BSR set to: 0
 19242  019E7C  0101               	movlb	1	; () banked
 19243  019E7E  0589               	decf	_Tur_OverLoaded_Error& (0+255),w,b
 19244  019E80  B4D8               	btfsc	status,2,c
 19245  019E82                     l21987:
 19246                           
 19247                           ;ERROR_HANDLING.c: 66: {
 19248                           ;ERROR_HANDLING.c: 67: EEPROM_Error_Stop();
 19249  019E82  EC77  F0AA         	call	_EEPROM_Error_Stop	;wreg free
 19250                           
 19251                           ;ERROR_HANDLING.c: 68: }
 19252                           ;ERROR_HANDLING.c: 70: Stopping_state_function();
 19253  019E86  ECF4  F0CF         	call	_Stopping_state_function	;wreg free
 19254  019E8A  0012               	return	
 19255  019E8C                     __end_of_Error_Scan_Running:
 19256                           	opt stack 0
 19257                           tblptru	equ	0xFF8
 19258                           tblptrh	equ	0xFF7
 19259                           tblptrl	equ	0xFF6
 19260                           tablat	equ	0xFF5
 19261                           prodh	equ	0xFF4
 19262                           prodl	equ	0xFF3
 19263                           intcon	equ	0xFF2
 19264                           postinc0	equ	0xFEE
 19265                           wreg	equ	0xFE8
 19266                           postdec1	equ	0xFE5
 19267                           fsr1h	equ	0xFE2
 19268                           fsr1l	equ	0xFE1
 19269                           indf2	equ	0xFDF
 19270                           postinc2	equ	0xFDE
 19271                           postdec2	equ	0xFDD
 19272                           fsr2h	equ	0xFDA
 19273                           fsr2l	equ	0xFD9
 19274                           status	equ	0xFD8
 19275                           
 19276 ;; *************** function _Stopping_state_function *****************
 19277 ;; Defined at:
 19278 ;;		line 40 in file "state.c"
 19279 ;; Parameters:    Size  Location     Type
 19280 ;;		None
 19281 ;; Auto vars:     Size  Location     Type
 19282 ;;		None
 19283 ;; Return value:  Size  Location     Type
 19284 ;;                  1    wreg      void 
 19285 ;; Registers used:
 19286 ;;		wreg, status,2, status,0, cstack
 19287 ;; Tracked objects:
 19288 ;;		On entry : 0/0
 19289 ;;		On exit  : 0/0
 19290 ;;		Unchanged: 0/0
 19291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19296 ;;Total ram usage:        0 bytes
 19297 ;; Hardware stack levels used:    1
 19298 ;; Hardware stack levels required when called:    5
 19299 ;; This function calls:
 19300 ;;		_Error_Flag_Kill
 19301 ;;		_Start_Stop
 19302 ;;		_Turbine_Pitching
 19303 ;;		_VFD_Data_Kill
 19304 ;;		___ftge
 19305 ;; This function is called by:
 19306 ;;		_Timer0_OneSecond_Function
 19307 ;;		_Error_Scan_Running
 19308 ;; This function uses a non-reentrant model
 19309 ;;
 19310                           
 19311                           	psect	text49
 19312  019FE8                     __ptext49:
 19313                           	opt stack 0
 19314  019FE8                     _Stopping_state_function:
 19315                           	opt stack 24
 19316                           
 19317                           ;state.c: 42: Desired_Frequency = 0;
 19318                           
 19319                           ;incstack = 0
 19320  019FE8  0E00               	movlw	0
 19321  019FEA  6E16               	movwf	_Desired_Frequency,c
 19322                           
 19323                           ;state.c: 43: Start_up_Error = 2;
 19324  019FEC  0E02               	movlw	2
 19325  019FEE  0101               	movlb	1	; () banked
 19326  019FF0  6FC8               	movwf	_Start_up_Error& (0+255),b
 19327                           
 19328                           ;state.c: 44: Initial_Delay_Second = 0;
 19329  019FF2  0E00               	movlw	0
 19330  019FF4  0101               	movlb	1	; () banked
 19331  019FF6  6F2B               	movwf	(_Initial_Delay_Second+1)& (0+255),b
 19332  019FF8  0E00               	movlw	0
 19333  019FFA  6F2A               	movwf	_Initial_Delay_Second& (0+255),b
 19334                           
 19335                           ;state.c: 45: VFD_RAMP = VFD_IN;
 19336  019FFC  0E00               	movlw	0
 19337  019FFE  0101               	movlb	1	; () banked
 19338  01A000  6F97               	movwf	_VFD_RAMP& (0+255),b
 19339                           
 19340                           ; BSR set to: 1
 19341                           ;state.c: 46: RA5 = 1;
 19342  01A002  8A80               	bsf	3968,5,c	;volatile
 19343                           
 19344                           ; BSR set to: 1
 19345                           ;state.c: 47: if(Turbine_RPM == 0 && Generator_RPM_FLT <= 60)
 19346  01A004  500A               	movf	_Turbine_RPM,w,c
 19347  01A006  100B               	iorwf	_Turbine_RPM+1,w,c
 19348  01A008  100C               	iorwf	_Turbine_RPM+2,w,c
 19349  01A00A  A4D8               	btfss	status,2,c
 19350  01A00C  D038               	goto	l20913
 19351                           
 19352                           ; BSR set to: 1
 19353  01A00E  0E00               	movlw	0
 19354  01A010  0100               	movlb	0	; () banked
 19355  01A012  6F99               	movwf	___ftge@ff1& (0+255),b
 19356  01A014  0E70               	movlw	112
 19357  01A016  0100               	movlb	0	; () banked
 19358  01A018  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 19359  01A01A  0E42               	movlw	66
 19360  01A01C  0100               	movlb	0	; () banked
 19361  01A01E  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 19362  01A020  C004  F09C         	movff	_Generator_RPM_FLT,___ftge@ff2
 19363  01A024  C005  F09D         	movff	_Generator_RPM_FLT+1,___ftge@ff2+1
 19364  01A028  C006  F09E         	movff	_Generator_RPM_FLT+2,___ftge@ff2+2
 19365  01A02C  ECEB  F0CA         	call	___ftge	;wreg free
 19366  01A030  0100               	movlb	0	; () banked
 19367  01A032  A0D8               	btfss	status,0,c
 19368  01A034  D024               	goto	l20913
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;state.c: 48: {
 19372                           ;state.c: 49: Stopping_Counter++;
 19373  01A036  0101               	movlb	1	; () banked
 19374  01A038  2B7E               	incf	_Stopping_Counter& (0+255),f,b
 19375                           
 19376                           ; BSR set to: 1
 19377                           ;state.c: 50: if(Stopping_Counter >= 2)
 19378  01A03A  0E01               	movlw	1
 19379  01A03C  0101               	movlb	1	; () banked
 19380  01A03E  657E               	cpfsgt	_Stopping_Counter& (0+255),b
 19381  01A040  D01E               	goto	l20913
 19382                           
 19383                           ; BSR set to: 1
 19384                           ;state.c: 51: {
 19385                           ;state.c: 52: Stopping_Counter = 0;
 19386  01A042  0E00               	movlw	0
 19387  01A044  0101               	movlb	1	; () banked
 19388  01A046  6F7E               	movwf	_Stopping_Counter& (0+255),b
 19389                           
 19390                           ;state.c: 53: Turbine_state = STARTUP_STATE;
 19391  01A048  0E00               	movlw	0
 19392  01A04A  0100               	movlb	0	; () banked
 19393  01A04C  6FF0               	movwf	_Turbine_state& (0+255),b
 19394                           
 19395                           ;state.c: 54: Turbine_Restore_Error = 0;
 19396  01A04E  0E00               	movlw	0
 19397  01A050  0101               	movlb	1	; () banked
 19398  01A052  6F8A               	movwf	_Turbine_Restore_Error& (0+255),b
 19399                           
 19400                           ;state.c: 55: Errors = 0; Errors1 = 0; Errors2 = 0; Errors3 = 0; Errors4 = 0; Errors = 0
      +                          ;
 19401  01A054  0E00               	movlw	0
 19402  01A056  6E1B               	movwf	_Errors,c
 19403  01A058  0E00               	movlw	0
 19404  01A05A  0100               	movlb	0	; () banked
 19405  01A05C  6FE1               	movwf	_Errors1& (0+255),b
 19406  01A05E  0E00               	movlw	0
 19407  01A060  0101               	movlb	1	; () banked
 19408  01A062  6F50               	movwf	_Errors2& (0+255),b
 19409  01A064  0E00               	movlw	0
 19410  01A066  0101               	movlb	1	; () banked
 19411  01A068  6F51               	movwf	_Errors3& (0+255),b
 19412  01A06A  0E00               	movlw	0
 19413  01A06C  0101               	movlb	1	; () banked
 19414  01A06E  6F52               	movwf	_Errors4& (0+255),b
 19415  01A070  0E00               	movlw	0
 19416  01A072  6E1B               	movwf	_Errors,c
 19417                           
 19418                           ; BSR set to: 1
 19419                           ;state.c: 56: RA5 = 0;
 19420  01A074  9A80               	bcf	3968,5,c	;volatile
 19421                           
 19422                           ; BSR set to: 1
 19423                           ;state.c: 57: Error_Flag_Kill();
 19424  01A076  EC86  F0CA         	call	_Error_Flag_Kill	;wreg free
 19425                           
 19426                           ;state.c: 58: VFD_Data_Kill();
 19427  01A07A  ECEC  F0D6         	call	_VFD_Data_Kill	;wreg free
 19428  01A07E                     l20913:
 19429                           
 19430                           ;state.c: 59: }
 19431                           ;state.c: 61: }
 19432                           ;state.c: 62: Start_Stop();
 19433  01A07E  EC6F  F0CC         	call	_Start_Stop	;wreg free
 19434                           
 19435                           ;state.c: 63: Turbine_Pitching();
 19436  01A082  EC81  F0D8         	call	_Turbine_Pitching	;wreg free
 19437                           
 19438                           ;state.c: 64: (RD2 = 0);
 19439  01A086  9483               	bcf	3971,2,c	;volatile
 19440                           
 19441                           ;state.c: 65: VFD_Error_No = 0;
 19442  01A088  0E00               	movlw	0
 19443  01A08A  6E20               	movwf	_VFD_Error_No,c
 19444  01A08C  0012               	return		;funcret
 19445  01A08E                     __end_of_Stopping_state_function:
 19446                           	opt stack 0
 19447                           tblptru	equ	0xFF8
 19448                           tblptrh	equ	0xFF7
 19449                           tblptrl	equ	0xFF6
 19450                           tablat	equ	0xFF5
 19451                           prodh	equ	0xFF4
 19452                           prodl	equ	0xFF3
 19453                           intcon	equ	0xFF2
 19454                           postinc0	equ	0xFEE
 19455                           wreg	equ	0xFE8
 19456                           postdec1	equ	0xFE5
 19457                           fsr1h	equ	0xFE2
 19458                           fsr1l	equ	0xFE1
 19459                           indf2	equ	0xFDF
 19460                           postinc2	equ	0xFDE
 19461                           postdec2	equ	0xFDD
 19462                           fsr2h	equ	0xFDA
 19463                           fsr2l	equ	0xFD9
 19464                           status	equ	0xFD8
 19465                           
 19466 ;; *************** function _Error_Flag_Kill *****************
 19467 ;; Defined at:
 19468 ;;		line 140 in file "RAMP_UP.c"
 19469 ;; Parameters:    Size  Location     Type
 19470 ;;		None
 19471 ;; Auto vars:     Size  Location     Type
 19472 ;;		None
 19473 ;; Return value:  Size  Location     Type
 19474 ;;                  1    wreg      void 
 19475 ;; Registers used:
 19476 ;;		wreg, status,2
 19477 ;; Tracked objects:
 19478 ;;		On entry : 0/0
 19479 ;;		On exit  : 0/0
 19480 ;;		Unchanged: 0/0
 19481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19486 ;;Total ram usage:        0 bytes
 19487 ;; Hardware stack levels used:    1
 19488 ;; Hardware stack levels required when called:    3
 19489 ;; This function calls:
 19490 ;;		Nothing
 19491 ;; This function is called by:
 19492 ;;		_Stopping_state_function
 19493 ;; This function uses a non-reentrant model
 19494 ;;
 19495                           
 19496                           	psect	text50
 19497  01950C                     __ptext50:
 19498                           	opt stack 0
 19499  01950C                     _Error_Flag_Kill:
 19500                           	opt stack 25
 19501                           
 19502                           ;RAMP_UP.c: 142: Two_Sec_Delay_vab = 0;
 19503                           
 19504                           ;incstack = 0
 19505  01950C  0E00               	movlw	0
 19506  01950E  0101               	movlb	1	; () banked
 19507  019510  6F8D               	movwf	_Two_Sec_Delay_vab& (0+255),b
 19508                           
 19509                           ;RAMP_UP.c: 143: Pitch_FB_Error_Flag = 0;
 19510  019512  0E00               	movlw	0
 19511  019514  0100               	movlb	0	; () banked
 19512  019516  6FE8               	movwf	_Pitch_FB_Error_Flag& (0+255),b
 19513                           
 19514                           ;RAMP_UP.c: 144: VFD_DC_EXTREM_LOW_Error = 0;
 19515  019518  0E00               	movlw	0
 19516  01951A  0101               	movlb	1	; () banked
 19517  01951C  6F92               	movwf	_VFD_DC_EXTREM_LOW_Error& (0+255),b
 19518                           
 19519                           ;RAMP_UP.c: 145: VFD_SHORT_CIRCUIT_fLAG = 0;
 19520  01951E  0E00               	movlw	0
 19521  019520  0102               	movlb	2	; () banked
 19522  019522  6FAB               	movwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),b
 19523  019524  0E00               	movlw	0
 19524  019526  6FAA               	movwf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),b
 19525                           
 19526                           ;RAMP_UP.c: 146: Turbine_Over_Speed_Flag = 0;
 19527  019528  0E00               	movlw	0
 19528  01952A  0100               	movlb	0	; () banked
 19529  01952C  6FEF               	movwf	_Turbine_Over_Speed_Flag& (0+255),b
 19530                           
 19531                           ;RAMP_UP.c: 147: VFD__Run_Time_Error = 0 ;
 19532  01952E  0E00               	movlw	0
 19533  019530  0101               	movlb	1	; () banked
 19534  019532  6F98               	movwf	_VFD__Run_Time_Error& (0+255),b
 19535                           
 19536                           ;RAMP_UP.c: 148: VFD_DC_Bus_Low_Error = 0;
 19537  019534  0E00               	movlw	0
 19538  019536  0101               	movlb	1	; () banked
 19539  019538  6F91               	movwf	_VFD_DC_Bus_Low_Error& (0+255),b
 19540                           
 19541                           ;RAMP_UP.c: 149: VFD_DC_Bus_High_Error = 0;
 19542  01953A  0E00               	movlw	0
 19543  01953C  0101               	movlb	1	; () banked
 19544  01953E  6F90               	movwf	_VFD_DC_Bus_High_Error& (0+255),b
 19545                           
 19546                           ;RAMP_UP.c: 150: VFD_Error_Flag = 0;
 19547  019540  0E00               	movlw	0
 19548  019542  0101               	movlb	1	; () banked
 19549  019544  6F93               	movwf	_VFD_Error_Flag& (0+255),b
 19550                           
 19551                           ;RAMP_UP.c: 151: VFD_DC_Bus_Current_Error = 0;
 19552  019546  0E00               	movlw	0
 19553  019548  0101               	movlb	1	; () banked
 19554  01954A  6F8F               	movwf	_VFD_DC_Bus_Current_Error& (0+255),b
 19555                           
 19556                           ;RAMP_UP.c: 152: Grid_Over_current = 0;
 19557  01954C  0E00               	movlw	0
 19558  01954E  6E1C               	movwf	_Grid_Over_current,c
 19559                           
 19560                           ;RAMP_UP.c: 153: Generator_One_Feedback_Error = 0;
 19561  019550  0E00               	movlw	0
 19562  019552  0101               	movlb	1	; () banked
 19563  019554  6F62               	movwf	_Generator_One_Feedback_Error& (0+255),b
 19564                           
 19565                           ;RAMP_UP.c: 154: Tur_OverLoaded_Error = 0;
 19566  019556  0E00               	movlw	0
 19567  019558  0101               	movlb	1	; () banked
 19568  01955A  6F89               	movwf	_Tur_OverLoaded_Error& (0+255),b
 19569                           
 19570                           ;RAMP_UP.c: 155: KW_Minimum_Error = 0;
 19571  01955C  0E00               	movlw	0
 19572  01955E  0101               	movlb	1	; () banked
 19573  019560  6F6B               	movwf	_KW_Minimum_Error& (0+255),b
 19574                           
 19575                           ;RAMP_UP.c: 156: KW_Maximum_Error = 0;
 19576  019562  0E00               	movlw	0
 19577  019564  0101               	movlb	1	; () banked
 19578  019566  6F6A               	movwf	_KW_Maximum_Error& (0+255),b
 19579                           
 19580                           ;RAMP_UP.c: 157: Turbine_Under_Speed_Flag = 0;
 19581  019568  0E00               	movlw	0
 19582  01956A  0101               	movlb	1	; () banked
 19583  01956C  6F8B               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 19584                           
 19585                           ;RAMP_UP.c: 158: Generator_Over_Speed = 0;
 19586  01956E  0E00               	movlw	0
 19587  019570  0101               	movlb	1	; () banked
 19588  019572  6F63               	movwf	_Generator_Over_Speed& (0+255),b
 19589                           
 19590                           ;RAMP_UP.c: 159: Grid_Und_voltage = 0;
 19591  019574  0E00               	movlw	0
 19592  019576  0100               	movlb	0	; () banked
 19593  019578  6FE6               	movwf	_Grid_Und_voltage& (0+255),b
 19594                           
 19595                           ;RAMP_UP.c: 160: Grid_Ovr_voltage = 0;
 19596  01957A  0E00               	movlw	0
 19597  01957C  0101               	movlb	1	; () banked
 19598  01957E  6F65               	movwf	_Grid_Ovr_voltage& (0+255),b
 19599                           
 19600                           ;RAMP_UP.c: 161: Wind_Cut_In_Flag = 0;
 19601  019580  0E00               	movlw	0
 19602  019582  0101               	movlb	1	; () banked
 19603  019584  6F9B               	movwf	_Wind_Cut_In_Flag& (0+255),b
 19604                           
 19605                           ;RAMP_UP.c: 162: Grid_Frequency_Error = 0;
 19606  019586  0E00               	movlw	0
 19607  019588  0100               	movlb	0	; () banked
 19608  01958A  6FE4               	movwf	_Grid_Frequency_Error& (0+255),b
 19609                           
 19610                           ;RAMP_UP.c: 163: Wind_Cut_Out_Flag = 0;
 19611  01958C  0E00               	movlw	0
 19612  01958E  0100               	movlb	0	; () banked
 19613  019590  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 19614                           
 19615                           ;RAMP_UP.c: 164: Motor_slip = 0;
 19616  019592  0E00               	movlw	0
 19617  019594  0100               	movlb	0	; () banked
 19618  019596  6FCA               	movwf	_Motor_slip& (0+255),b
 19619  019598  0E00               	movlw	0
 19620  01959A  0100               	movlb	0	; () banked
 19621  01959C  6FCB               	movwf	(_Motor_slip+1)& (0+255),b
 19622  01959E  0E00               	movlw	0
 19623  0195A0  0100               	movlb	0	; () banked
 19624  0195A2  6FCC               	movwf	(_Motor_slip+2)& (0+255),b
 19625                           
 19626                           ;RAMP_UP.c: 165: Rotor_slip = 0;
 19627  0195A4  0E00               	movlw	0
 19628  0195A6  0100               	movlb	0	; () banked
 19629  0195A8  6FD3               	movwf	_Rotor_slip& (0+255),b
 19630  0195AA  0E00               	movlw	0
 19631  0195AC  0100               	movlb	0	; () banked
 19632  0195AE  6FD4               	movwf	(_Rotor_slip+1)& (0+255),b
 19633  0195B0  0E00               	movlw	0
 19634  0195B2  0100               	movlb	0	; () banked
 19635  0195B4  6FD5               	movwf	(_Rotor_slip+2)& (0+255),b
 19636                           
 19637                           ;RAMP_UP.c: 166: Data_1[1] = 0;
 19638  0195B6  0E00               	movlw	0
 19639  0195B8  0105               	movlb	5	; () banked
 19640  0195BA  6F03               	movwf	(_Data_1+3)& (0+255),b
 19641  0195BC  0E00               	movlw	0
 19642  0195BE  6F02               	movwf	(_Data_1+2)& (0+255),b
 19643                           
 19644                           ;RAMP_UP.c: 167: Data_1[7] = 0;
 19645  0195C0  0E00               	movlw	0
 19646  0195C2  0105               	movlb	5	; () banked
 19647  0195C4  6F0F               	movwf	(_Data_1+15)& (0+255),b
 19648  0195C6  0E00               	movlw	0
 19649  0195C8  6F0E               	movwf	(_Data_1+14)& (0+255),b
 19650                           
 19651                           ;RAMP_UP.c: 168: Data_1[9] = 0;
 19652  0195CA  0E00               	movlw	0
 19653  0195CC  0105               	movlb	5	; () banked
 19654  0195CE  6F13               	movwf	(_Data_1+19)& (0+255),b
 19655  0195D0  0E00               	movlw	0
 19656  0195D2  6F12               	movwf	(_Data_1+18)& (0+255),b
 19657                           
 19658                           ; BSR set to: 5
 19659  0195D4  0012               	return		;funcret
 19660  0195D6                     __end_of_Error_Flag_Kill:
 19661                           	opt stack 0
 19662                           tblptru	equ	0xFF8
 19663                           tblptrh	equ	0xFF7
 19664                           tblptrl	equ	0xFF6
 19665                           tablat	equ	0xFF5
 19666                           prodh	equ	0xFF4
 19667                           prodl	equ	0xFF3
 19668                           intcon	equ	0xFF2
 19669                           postinc0	equ	0xFEE
 19670                           wreg	equ	0xFE8
 19671                           postdec1	equ	0xFE5
 19672                           fsr1h	equ	0xFE2
 19673                           fsr1l	equ	0xFE1
 19674                           indf2	equ	0xFDF
 19675                           postinc2	equ	0xFDE
 19676                           postdec2	equ	0xFDD
 19677                           fsr2h	equ	0xFDA
 19678                           fsr2l	equ	0xFD9
 19679                           status	equ	0xFD8
 19680                           
 19681 ;; *************** function _EEPROM_Error_Stop *****************
 19682 ;; Defined at:
 19683 ;;		line 92 in file "EEPROM.c"
 19684 ;; Parameters:    Size  Location     Type
 19685 ;;		None
 19686 ;; Auto vars:     Size  Location     Type
 19687 ;;		None
 19688 ;; Return value:  Size  Location     Type
 19689 ;;                  2   34[None  ] int 
 19690 ;; Registers used:
 19691 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19692 ;; Tracked objects:
 19693 ;;		On entry : 0/0
 19694 ;;		On exit  : 0/0
 19695 ;;		Unchanged: 0/0
 19696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19699 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19700 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19701 ;;Total ram usage:        2 bytes
 19702 ;; Hardware stack levels used:    1
 19703 ;; Hardware stack levels required when called:    5
 19704 ;; This function calls:
 19705 ;;		_Last_3_EEPROM_ERROR_Trigger
 19706 ;;		_int_eeprom_read
 19707 ;;		_int_eeprom_write
 19708 ;; This function is called by:
 19709 ;;		_main
 19710 ;;		_Error_Scan_Ramp_up
 19711 ;;		_Error_Scan_Running
 19712 ;; This function uses a non-reentrant model
 19713 ;;
 19714                           
 19715                           	psect	text51
 19716  0154EE                     __ptext51:
 19717                           	opt stack 0
 19718  0154EE                     _EEPROM_Error_Stop:
 19719                           	opt stack 22
 19720                           
 19721                           ;EEPROM.c: 94: if(One_Time_Flag == 0)
 19722                           
 19723                           ; BSR set to: 5
 19724                           ;incstack = 0
 19725  0154EE  0101               	movlb	1	; () banked
 19726  0154F0  5173               	movf	_One_Time_Flag& (0+255),w,b
 19727  0154F2  0101               	movlb	1	; () banked
 19728  0154F4  A4D8               	btfss	status,2,c
 19729  0154F6  D093               	goto	l20113
 19730                           
 19731                           ; BSR set to: 1
 19732                           ;EEPROM.c: 95: {
 19733                           ;EEPROM.c: 96: GiMinutes_3 = int_eeprom_read((0x13));
 19734  0154F8  0E00               	movlw	0
 19735  0154FA  0100               	movlb	0	; () banked
 19736  0154FC  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19737  0154FE  0E13               	movlw	19
 19738  015500  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19739  015502  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 19740  015506  C060  F0DD         	movff	?_int_eeprom_read,_GiMinutes_3
 19741  01550A  C061  F0DE         	movff	?_int_eeprom_read+1,_GiMinutes_3+1
 19742                           
 19743                           ;EEPROM.c: 97: GiMinutes_2 = int_eeprom_read((0x12));
 19744  01550E  0E00               	movlw	0
 19745  015510  0100               	movlb	0	; () banked
 19746  015512  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19747  015514  0E12               	movlw	18
 19748  015516  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19749  015518  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 19750  01551C  C060  F013         	movff	?_int_eeprom_read,_GiMinutes_2
 19751  015520  C061  F014         	movff	?_int_eeprom_read+1,_GiMinutes_2+1
 19752                           
 19753                           ;EEPROM.c: 98: GiMinutes_1 = int_eeprom_read((0x11));
 19754  015524  0E00               	movlw	0
 19755  015526  0100               	movlb	0	; () banked
 19756  015528  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19757  01552A  0E11               	movlw	17
 19758  01552C  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19759  01552E  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 19760  015532  C060  F0DB         	movff	?_int_eeprom_read,_GiMinutes_1
 19761  015536  C061  F0DC         	movff	?_int_eeprom_read+1,_GiMinutes_1+1
 19762                           
 19763                           ;EEPROM.c: 100: GiHours_3 = int_eeprom_read((0x16));
 19764  01553A  0E00               	movlw	0
 19765  01553C  0100               	movlb	0	; () banked
 19766  01553E  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19767  015540  0E16               	movlw	22
 19768  015542  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19769  015544  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 19770  015548  C060  F128         	movff	?_int_eeprom_read,_GiHours_3
 19771  01554C  C061  F129         	movff	?_int_eeprom_read+1,_GiHours_3+1
 19772                           
 19773                           ;EEPROM.c: 101: GiHours_2 = int_eeprom_read((0x15));
 19774  015550  0E00               	movlw	0
 19775  015552  0100               	movlb	0	; () banked
 19776  015554  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19777  015556  0E15               	movlw	21
 19778  015558  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19779  01555A  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 19780  01555E  C060  F0D9         	movff	?_int_eeprom_read,_GiHours_2
 19781  015562  C061  F0DA         	movff	?_int_eeprom_read+1,_GiHours_2+1
 19782                           
 19783                           ;EEPROM.c: 102: GiHours_1 = int_eeprom_read((0x14));
 19784  015566  0E00               	movlw	0
 19785  015568  0100               	movlb	0	; () banked
 19786  01556A  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19787  01556C  0E14               	movlw	20
 19788  01556E  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19789  015570  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 19790  015574  C060  F126         	movff	?_int_eeprom_read,_GiHours_1
 19791  015578  C061  F127         	movff	?_int_eeprom_read+1,_GiHours_1+1
 19792                           
 19793                           ;EEPROM.c: 104: EP_Errors3 = int_eeprom_read((0x19));
 19794  01557C  0E00               	movlw	0
 19795  01557E  0100               	movlb	0	; () banked
 19796  015580  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19797  015582  0E19               	movlw	25
 19798  015584  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19799  015586  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 19800  01558A  0100               	movlb	0	; () banked
 19801  01558C  5160               	movf	?_int_eeprom_read& (0+255),w,b
 19802  01558E  6E1A               	movwf	_EP_Errors3,c
 19803                           
 19804                           ;EEPROM.c: 105: EP_Errors2 = int_eeprom_read((0x18));
 19805  015590  0E00               	movlw	0
 19806  015592  0100               	movlb	0	; () banked
 19807  015594  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19808  015596  0E18               	movlw	24
 19809  015598  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19810  01559A  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 19811  01559E  0100               	movlb	0	; () banked
 19812  0155A0  5160               	movf	?_int_eeprom_read& (0+255),w,b
 19813  0155A2  6E19               	movwf	_EP_Errors2,c
 19814                           
 19815                           ;EEPROM.c: 106: EP_Errors1 = int_eeprom_read((0x17));
 19816  0155A4  0E00               	movlw	0
 19817  0155A6  0100               	movlb	0	; () banked
 19818  0155A8  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 19819  0155AA  0E17               	movlw	23
 19820  0155AC  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 19821  0155AE  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 19822  0155B2  0100               	movlb	0	; () banked
 19823  0155B4  5160               	movf	?_int_eeprom_read& (0+255),w,b
 19824  0155B6  6E18               	movwf	_EP_Errors1,c
 19825                           
 19826                           ; BSR set to: 0
 19827                           ;EEPROM.c: 107: if(EP_Errors3 > 30 || EP_Errors2 > 30 || EP_Errors1 > 30)
 19828  0155B8  0E1F               	movlw	31
 19829  0155BA  601A               	cpfslt	_EP_Errors3,c
 19830  0155BC  D006               	goto	l20105
 19831                           
 19832                           ; BSR set to: 0
 19833  0155BE  0E1F               	movlw	31
 19834  0155C0  6019               	cpfslt	_EP_Errors2,c
 19835  0155C2  D003               	goto	l20105
 19836                           
 19837                           ; BSR set to: 0
 19838  0155C4  0E1E               	movlw	30
 19839  0155C6  6418               	cpfsgt	_EP_Errors1,c
 19840  0155C8  D02A               	goto	l20113
 19841  0155CA                     l20105:
 19842                           
 19843                           ; BSR set to: 0
 19844                           ;EEPROM.c: 108: {
 19845                           ;EEPROM.c: 109: EP_Errors3 = 0; EP_Errors2 = 0; EP_Errors1 = 0;
 19846  0155CA  0E00               	movlw	0
 19847  0155CC  6E1A               	movwf	_EP_Errors3,c
 19848  0155CE  0E00               	movlw	0
 19849  0155D0  6E19               	movwf	_EP_Errors2,c
 19850  0155D2  0E00               	movlw	0
 19851  0155D4  6E18               	movwf	_EP_Errors1,c
 19852                           
 19853                           ; BSR set to: 0
 19854                           ;EEPROM.c: 110: int_eeprom_write((0x19),0);
 19855  0155D6  0E00               	movlw	0
 19856  0155D8  0100               	movlb	0	; () banked
 19857  0155DA  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19858  0155DC  0E19               	movlw	25
 19859  0155DE  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19860  0155E0  0E00               	movlw	0
 19861  0155E2  0100               	movlb	0	; () banked
 19862  0155E4  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 19863  0155E6  0E00               	movlw	0
 19864  0155E8  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 19865  0155EA  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 19866                           
 19867                           ;EEPROM.c: 111: int_eeprom_write((0x18),0);
 19868  0155EE  0E00               	movlw	0
 19869  0155F0  0100               	movlb	0	; () banked
 19870  0155F2  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19871  0155F4  0E18               	movlw	24
 19872  0155F6  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19873  0155F8  0E00               	movlw	0
 19874  0155FA  0100               	movlb	0	; () banked
 19875  0155FC  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 19876  0155FE  0E00               	movlw	0
 19877  015600  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 19878  015602  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 19879                           
 19880                           ;EEPROM.c: 112: int_eeprom_write((0x17),0);
 19881  015606  0E00               	movlw	0
 19882  015608  0100               	movlb	0	; () banked
 19883  01560A  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19884  01560C  0E17               	movlw	23
 19885  01560E  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19886  015610  0E00               	movlw	0
 19887  015612  0100               	movlb	0	; () banked
 19888  015614  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 19889  015616  0E00               	movlw	0
 19890  015618  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 19891  01561A  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 19892  01561E                     l20113:
 19893                           
 19894                           ;EEPROM.c: 113: }
 19895                           ;EEPROM.c: 114: }
 19896                           ;EEPROM.c: 115: if(One_Time_Flag == 1)
 19897  01561E  0101               	movlb	1	; () banked
 19898  015620  0573               	decf	_One_Time_Flag& (0+255),w,b
 19899  015622  A4D8               	btfss	status,2,c
 19900  015624  D081               	goto	l20131
 19901                           
 19902                           ; BSR set to: 1
 19903                           ;EEPROM.c: 116: {
 19904                           ;EEPROM.c: 117: EP_Errors3 = EP_Errors2;
 19905  015626  C019  F01A         	movff	_EP_Errors2,_EP_Errors3
 19906                           
 19907                           ;EEPROM.c: 118: EP_Errors2 = EP_Errors1;
 19908  01562A  C018  F019         	movff	_EP_Errors1,_EP_Errors2
 19909                           
 19910                           ;EEPROM.c: 119: EP_Errors1 = Errors;
 19911  01562E  C01B  F018         	movff	_Errors,_EP_Errors1
 19912                           
 19913                           ; BSR set to: 1
 19914                           ;EEPROM.c: 121: int_eeprom_write((0x19),EP_Errors3);
 19915  015632  0E00               	movlw	0
 19916  015634  0100               	movlb	0	; () banked
 19917  015636  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19918  015638  0E19               	movlw	25
 19919  01563A  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19920  01563C  C01A  F062         	movff	_EP_Errors3,int_eeprom_write@dat
 19921  015640  0100               	movlb	0	; () banked
 19922  015642  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 19923  015644  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 19924                           
 19925                           ;EEPROM.c: 122: int_eeprom_write((0x18),EP_Errors2);
 19926  015648  0E00               	movlw	0
 19927  01564A  0100               	movlb	0	; () banked
 19928  01564C  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19929  01564E  0E18               	movlw	24
 19930  015650  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19931  015652  C019  F062         	movff	_EP_Errors2,int_eeprom_write@dat
 19932  015656  0100               	movlb	0	; () banked
 19933  015658  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 19934  01565A  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 19935                           
 19936                           ;EEPROM.c: 123: int_eeprom_write((0x17),EP_Errors1);
 19937  01565E  0E00               	movlw	0
 19938  015660  0100               	movlb	0	; () banked
 19939  015662  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19940  015664  0E17               	movlw	23
 19941  015666  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19942  015668  C018  F062         	movff	_EP_Errors1,int_eeprom_write@dat
 19943  01566C  0100               	movlb	0	; () banked
 19944  01566E  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 19945  015670  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 19946                           
 19947                           ;EEPROM.c: 125: GiMinutes_3 = GiMinutes_2;
 19948  015674  C013  F0DD         	movff	_GiMinutes_2,_GiMinutes_3
 19949  015678  C014  F0DE         	movff	_GiMinutes_2+1,_GiMinutes_3+1
 19950                           
 19951                           ;EEPROM.c: 126: GiMinutes_2 = GiMinutes_1;
 19952  01567C  C0DB  F013         	movff	_GiMinutes_1,_GiMinutes_2
 19953  015680  C0DC  F014         	movff	_GiMinutes_1+1,_GiMinutes_2+1
 19954                           
 19955                           ;EEPROM.c: 127: GiMinutes_1 = GiMinutes;
 19956  015684  C28E  F0DB         	movff	_GiMinutes,_GiMinutes_1
 19957  015688  C28F  F0DC         	movff	_GiMinutes+1,_GiMinutes_1+1
 19958                           
 19959                           ;EEPROM.c: 129: int_eeprom_write((0x13),GiMinutes_3);
 19960  01568C  0E00               	movlw	0
 19961  01568E  0100               	movlb	0	; () banked
 19962  015690  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19963  015692  0E13               	movlw	19
 19964  015694  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19965  015696  C0DD  F062         	movff	_GiMinutes_3,int_eeprom_write@dat
 19966  01569A  C0DE  F063         	movff	_GiMinutes_3+1,int_eeprom_write@dat+1
 19967  01569E  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 19968                           
 19969                           ;EEPROM.c: 130: int_eeprom_write((0x12),GiMinutes_2);
 19970  0156A2  0E00               	movlw	0
 19971  0156A4  0100               	movlb	0	; () banked
 19972  0156A6  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19973  0156A8  0E12               	movlw	18
 19974  0156AA  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19975  0156AC  C013  F062         	movff	_GiMinutes_2,int_eeprom_write@dat
 19976  0156B0  C014  F063         	movff	_GiMinutes_2+1,int_eeprom_write@dat+1
 19977  0156B4  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 19978                           
 19979                           ;EEPROM.c: 131: int_eeprom_write((0x11),GiMinutes_1);
 19980  0156B8  0E00               	movlw	0
 19981  0156BA  0100               	movlb	0	; () banked
 19982  0156BC  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 19983  0156BE  0E11               	movlw	17
 19984  0156C0  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 19985  0156C2  C0DB  F062         	movff	_GiMinutes_1,int_eeprom_write@dat
 19986  0156C6  C0DC  F063         	movff	_GiMinutes_1+1,int_eeprom_write@dat+1
 19987  0156CA  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 19988                           
 19989                           ;EEPROM.c: 133: GiHours_3 = GiHours_2;
 19990  0156CE  C0D9  F128         	movff	_GiHours_2,_GiHours_3
 19991  0156D2  C0DA  F129         	movff	_GiHours_2+1,_GiHours_3+1
 19992                           
 19993                           ;EEPROM.c: 134: GiHours_2 = GiHours_1;
 19994  0156D6  C126  F0D9         	movff	_GiHours_1,_GiHours_2
 19995  0156DA  C127  F0DA         	movff	_GiHours_1+1,_GiHours_2+1
 19996                           
 19997                           ;EEPROM.c: 135: GiHours_1 = GiHours;
 19998  0156DE  C28C  F126         	movff	_GiHours,_GiHours_1
 19999  0156E2  C28D  F127         	movff	_GiHours+1,_GiHours_1+1
 20000                           
 20001                           ;EEPROM.c: 137: int_eeprom_write((0x16),GiHours_3);
 20002  0156E6  0E00               	movlw	0
 20003  0156E8  0100               	movlb	0	; () banked
 20004  0156EA  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20005  0156EC  0E16               	movlw	22
 20006  0156EE  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20007  0156F0  C128  F062         	movff	_GiHours_3,int_eeprom_write@dat
 20008  0156F4  C129  F063         	movff	_GiHours_3+1,int_eeprom_write@dat+1
 20009  0156F8  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20010                           
 20011                           ;EEPROM.c: 138: int_eeprom_write((0x15),GiHours_2);
 20012  0156FC  0E00               	movlw	0
 20013  0156FE  0100               	movlb	0	; () banked
 20014  015700  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20015  015702  0E15               	movlw	21
 20016  015704  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20017  015706  C0D9  F062         	movff	_GiHours_2,int_eeprom_write@dat
 20018  01570A  C0DA  F063         	movff	_GiHours_2+1,int_eeprom_write@dat+1
 20019  01570E  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20020                           
 20021                           ;EEPROM.c: 139: int_eeprom_write((0x14),GiHours_1);
 20022  015712  0E00               	movlw	0
 20023  015714  0100               	movlb	0	; () banked
 20024  015716  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20025  015718  0E14               	movlw	20
 20026  01571A  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20027  01571C  C126  F062         	movff	_GiHours_1,int_eeprom_write@dat
 20028  015720  C127  F063         	movff	_GiHours_1+1,int_eeprom_write@dat+1
 20029  015724  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20030  015728                     l20131:
 20031                           
 20032                           ;EEPROM.c: 140: }
 20033                           ;EEPROM.c: 142: if(EP_Errors3 != 0)
 20034  015728  501A               	movf	_EP_Errors3,w,c
 20035  01572A  B4D8               	btfsc	status,2,c
 20036  01572C  D031               	goto	l20139
 20037                           
 20038                           ;EEPROM.c: 143: {
 20039                           ;EEPROM.c: 145: Hours_1 = GiHours_2 - GiHours_3;
 20040  01572E  C128  F064         	movff	_GiHours_3,??_EEPROM_Error_Stop
 20041  015732  C129  F065         	movff	_GiHours_3+1,??_EEPROM_Error_Stop+1
 20042  015736  0100               	movlb	0	; () banked
 20043  015738  1F64               	comf	??_EEPROM_Error_Stop& (0+255),f,b
 20044  01573A  1F65               	comf	(??_EEPROM_Error_Stop+1)& (0+255),f,b
 20045  01573C  4B64               	infsnz	??_EEPROM_Error_Stop& (0+255),f,b
 20046  01573E  2B65               	incf	(??_EEPROM_Error_Stop+1)& (0+255),f,b
 20047  015740  0100               	movlb	0	; () banked
 20048  015742  51D9               	movf	_GiHours_2& (0+255),w,b
 20049  015744  0100               	movlb	0	; () banked
 20050  015746  2564               	addwf	??_EEPROM_Error_Stop& (0+255),w,b
 20051  015748  0102               	movlb	2	; () banked
 20052  01574A  6FF6               	movwf	_Hours_1& (0+255),b
 20053  01574C  0100               	movlb	0	; () banked
 20054  01574E  51DA               	movf	(_GiHours_2+1)& (0+255),w,b
 20055  015750  0100               	movlb	0	; () banked
 20056  015752  2165               	addwfc	(??_EEPROM_Error_Stop+1)& (0+255),w,b
 20057  015754  0102               	movlb	2	; () banked
 20058  015756  6FF7               	movwf	(_Hours_1+1)& (0+255),b
 20059                           
 20060                           ;EEPROM.c: 146: if(Hours_1 > 0)
 20061  015758  0102               	movlb	2	; () banked
 20062  01575A  BFF7               	btfsc	(_Hours_1+1)& (0+255),7,b
 20063  01575C  D013               	goto	l20137
 20064  01575E  0102               	movlb	2	; () banked
 20065  015760  51F7               	movf	(_Hours_1+1)& (0+255),w,b
 20066  015762  E104               	bnz	u13750
 20067  015764  0102               	movlb	2	; () banked
 20068  015766  05F6               	decf	_Hours_1& (0+255),w,b
 20069  015768  A0D8               	btfss	status,0,c
 20070  01576A  D00C               	goto	l20137
 20071  01576C                     u13750:
 20072                           
 20073                           ; BSR set to: 2
 20074                           ;EEPROM.c: 147: {
 20075                           ;EEPROM.c: 148: Minutes = (60 * Hours_1) + (GiMinutes_2 - GiMinutes_3);
 20076  01576C  0100               	movlb	0	; () banked
 20077  01576E  51DD               	movf	_GiMinutes_3& (0+255),w,b
 20078  015770  0800               	sublw	0
 20079  015772  0100               	movlb	0	; () banked
 20080  015774  6F64               	movwf	??_EEPROM_Error_Stop& (0+255),b
 20081  015776  0102               	movlb	2	; () banked
 20082  015778  51F6               	movf	_Hours_1& (0+255),w,b
 20083  01577A  0D3C               	mullw	60
 20084  01577C  50F3               	movf	prodl,w,c
 20085  01577E  0100               	movlb	0	; () banked
 20086  015780  2564               	addwf	??_EEPROM_Error_Stop& (0+255),w,b
 20087  015782  D003               	goto	L10
 20088  015784                     l20137:
 20089                           
 20090                           ;EEPROM.c: 150: else
 20091                           ;EEPROM.c: 151: {
 20092                           ;EEPROM.c: 152: Minutes = GiMinutes_2 - GiMinutes_3;
 20093  015784  0100               	movlb	0	; () banked
 20094  015786  51DD               	movf	_GiMinutes_3& (0+255),w,b
 20095  015788  0800               	sublw	0
 20096  01578A                     L10:
 20097  01578A  2413               	addwf	_GiMinutes_2,w,c
 20098  01578C  0101               	movlb	1	; () banked
 20099  01578E  6F6E               	movwf	_Minutes& (0+255),b
 20100  015790                     l20139:
 20101                           
 20102                           ;EEPROM.c: 153: }
 20103                           ;EEPROM.c: 154: }
 20104                           ;EEPROM.c: 156: if(EP_Errors2 != 0)
 20105  015790  5019               	movf	_EP_Errors2,w,c
 20106  015792  B4D8               	btfsc	status,2,c
 20107  015794  D030               	goto	l10193
 20108                           
 20109                           ;EEPROM.c: 157: {
 20110                           ;EEPROM.c: 158: Hours_2 = GiHours_1 - GiHours_2;
 20111  015796  C0D9  F064         	movff	_GiHours_2,??_EEPROM_Error_Stop
 20112  01579A  C0DA  F065         	movff	_GiHours_2+1,??_EEPROM_Error_Stop+1
 20113  01579E  0100               	movlb	0	; () banked
 20114  0157A0  1F64               	comf	??_EEPROM_Error_Stop& (0+255),f,b
 20115  0157A2  1F65               	comf	(??_EEPROM_Error_Stop+1)& (0+255),f,b
 20116  0157A4  4B64               	infsnz	??_EEPROM_Error_Stop& (0+255),f,b
 20117  0157A6  2B65               	incf	(??_EEPROM_Error_Stop+1)& (0+255),f,b
 20118  0157A8  0101               	movlb	1	; () banked
 20119  0157AA  5126               	movf	_GiHours_1& (0+255),w,b
 20120  0157AC  0100               	movlb	0	; () banked
 20121  0157AE  2564               	addwf	??_EEPROM_Error_Stop& (0+255),w,b
 20122  0157B0  0102               	movlb	2	; () banked
 20123  0157B2  6FF8               	movwf	_Hours_2& (0+255),b
 20124  0157B4  0101               	movlb	1	; () banked
 20125  0157B6  5127               	movf	(_GiHours_1+1)& (0+255),w,b
 20126  0157B8  0100               	movlb	0	; () banked
 20127  0157BA  2165               	addwfc	(??_EEPROM_Error_Stop+1)& (0+255),w,b
 20128  0157BC  0102               	movlb	2	; () banked
 20129  0157BE  6FF9               	movwf	(_Hours_2+1)& (0+255),b
 20130                           
 20131                           ;EEPROM.c: 159: if(Hours_2 > 0)
 20132  0157C0  0102               	movlb	2	; () banked
 20133  0157C2  BFF9               	btfsc	(_Hours_2+1)& (0+255),7,b
 20134  0157C4  D012               	goto	l20145
 20135  0157C6  0102               	movlb	2	; () banked
 20136  0157C8  51F9               	movf	(_Hours_2+1)& (0+255),w,b
 20137  0157CA  E104               	bnz	u13770
 20138  0157CC  0102               	movlb	2	; () banked
 20139  0157CE  05F8               	decf	_Hours_2& (0+255),w,b
 20140  0157D0  A0D8               	btfss	status,0,c
 20141  0157D2  D00B               	goto	l20145
 20142  0157D4                     u13770:
 20143                           
 20144                           ; BSR set to: 2
 20145                           ;EEPROM.c: 160: {
 20146                           ;EEPROM.c: 161: Minutes_1 = (60 * Hours_2) + (GiMinutes_1 - GiMinutes_2);
 20147  0157D4  5013               	movf	_GiMinutes_2,w,c
 20148  0157D6  0800               	sublw	0
 20149  0157D8  0100               	movlb	0	; () banked
 20150  0157DA  6F64               	movwf	??_EEPROM_Error_Stop& (0+255),b
 20151  0157DC  0102               	movlb	2	; () banked
 20152  0157DE  51F8               	movf	_Hours_2& (0+255),w,b
 20153  0157E0  0D3C               	mullw	60
 20154  0157E2  50F3               	movf	prodl,w,c
 20155  0157E4  0100               	movlb	0	; () banked
 20156  0157E6  2564               	addwf	??_EEPROM_Error_Stop& (0+255),w,b
 20157  0157E8  D002               	goto	L11
 20158  0157EA                     l20145:
 20159                           
 20160                           ;EEPROM.c: 163: else
 20161                           ;EEPROM.c: 164: {
 20162                           ;EEPROM.c: 165: Minutes_1 = GiMinutes_1 - GiMinutes_2;
 20163  0157EA  5013               	movf	_GiMinutes_2,w,c
 20164  0157EC  0800               	sublw	0
 20165  0157EE                     L11:
 20166  0157EE  0100               	movlb	0	; () banked
 20167  0157F0  25DB               	addwf	_GiMinutes_1& (0+255),w,b
 20168  0157F2  0101               	movlb	1	; () banked
 20169  0157F4  6F6F               	movwf	_Minutes_1& (0+255),b
 20170  0157F6                     l10193:
 20171                           
 20172                           ;EEPROM.c: 166: }
 20173                           ;EEPROM.c: 167: }
 20174                           ;EEPROM.c: 168: Total_Min = Minutes_1 + Minutes;
 20175  0157F6  0101               	movlb	1	; () banked
 20176  0157F8  516F               	movf	_Minutes_1& (0+255),w,b
 20177  0157FA  0101               	movlb	1	; () banked
 20178  0157FC  256E               	addwf	_Minutes& (0+255),w,b
 20179  0157FE  0101               	movlb	1	; () banked
 20180  015800  6F88               	movwf	_Total_Min& (0+255),b
 20181                           
 20182                           ; BSR set to: 1
 20183                           ;EEPROM.c: 170: if(Minutes_1 != 0 && Minutes != 0)
 20184  015802  0101               	movlb	1	; () banked
 20185  015804  516F               	movf	_Minutes_1& (0+255),w,b
 20186  015806  B4D8               	btfsc	status,2,c
 20187  015808  D005               	goto	l20153
 20188                           
 20189                           ; BSR set to: 1
 20190  01580A  0101               	movlb	1	; () banked
 20191  01580C  516E               	movf	_Minutes& (0+255),w,b
 20192  01580E  A4D8               	btfss	status,2,c
 20193                           
 20194                           ; BSR set to: 1
 20195                           ;EEPROM.c: 171: {
 20196                           ;EEPROM.c: 172: Last_3_EEPROM_ERROR_Trigger();
 20197  015810  ECEB  F0C7         	call	_Last_3_EEPROM_ERROR_Trigger	;wreg free
 20198  015814                     l20153:
 20199                           
 20200                           ;EEPROM.c: 173: }
 20201                           ;EEPROM.c: 177: One_Time_Flag = 1;
 20202  015814  0E01               	movlw	1
 20203  015816  0101               	movlb	1	; () banked
 20204  015818  6F73               	movwf	_One_Time_Flag& (0+255),b
 20205                           
 20206                           ; BSR set to: 1
 20207  01581A  0012               	return		;funcret
 20208  01581C                     __end_of_EEPROM_Error_Stop:
 20209                           	opt stack 0
 20210                           tblptru	equ	0xFF8
 20211                           tblptrh	equ	0xFF7
 20212                           tblptrl	equ	0xFF6
 20213                           tablat	equ	0xFF5
 20214                           prodh	equ	0xFF4
 20215                           prodl	equ	0xFF3
 20216                           intcon	equ	0xFF2
 20217                           postinc0	equ	0xFEE
 20218                           wreg	equ	0xFE8
 20219                           postdec1	equ	0xFE5
 20220                           fsr1h	equ	0xFE2
 20221                           fsr1l	equ	0xFE1
 20222                           indf2	equ	0xFDF
 20223                           postinc2	equ	0xFDE
 20224                           postdec2	equ	0xFDD
 20225                           fsr2h	equ	0xFDA
 20226                           fsr2l	equ	0xFD9
 20227                           status	equ	0xFD8
 20228                           
 20229 ;; *************** function _Last_3_EEPROM_ERROR_Trigger *****************
 20230 ;; Defined at:
 20231 ;;		line 179 in file "EEPROM.c"
 20232 ;; Parameters:    Size  Location     Type
 20233 ;;		None
 20234 ;; Auto vars:     Size  Location     Type
 20235 ;;		None
 20236 ;; Return value:  Size  Location     Type
 20237 ;;                  1    wreg      void 
 20238 ;; Registers used:
 20239 ;;		wreg, status,2, status,0, cstack
 20240 ;; Tracked objects:
 20241 ;;		On entry : 0/0
 20242 ;;		On exit  : 0/0
 20243 ;;		Unchanged: 0/0
 20244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20249 ;;Total ram usage:        0 bytes
 20250 ;; Hardware stack levels used:    1
 20251 ;; Hardware stack levels required when called:    4
 20252 ;; This function calls:
 20253 ;;		_int_eeprom_write
 20254 ;; This function is called by:
 20255 ;;		_EEPROM_Error_Stop
 20256 ;; This function uses a non-reentrant model
 20257 ;;
 20258                           
 20259                           	psect	text52
 20260  018FD6                     __ptext52:
 20261                           	opt stack 0
 20262  018FD6                     _Last_3_EEPROM_ERROR_Trigger:
 20263                           	opt stack 22
 20264                           
 20265                           ;EEPROM.c: 181: if(Total_Min > (15))
 20266                           
 20267                           ; BSR set to: 1
 20268                           ;incstack = 0
 20269  018FD6  0E0F               	movlw	15
 20270  018FD8  0101               	movlb	1	; () banked
 20271  018FDA  6588               	cpfsgt	_Total_Min& (0+255),b
 20272  018FDC  D063               	goto	l19745
 20273                           
 20274                           ; BSR set to: 1
 20275                           ;EEPROM.c: 182: {
 20276                           ;EEPROM.c: 183: EP_Errors3 = 0; GiMinutes_3 = 0; GiHours_3 = 0;
 20277  018FDE  0E00               	movlw	0
 20278  018FE0  6E1A               	movwf	_EP_Errors3,c
 20279  018FE2  0E00               	movlw	0
 20280  018FE4  0100               	movlb	0	; () banked
 20281  018FE6  6FDE               	movwf	(_GiMinutes_3+1)& (0+255),b
 20282  018FE8  0E00               	movlw	0
 20283  018FEA  6FDD               	movwf	_GiMinutes_3& (0+255),b
 20284  018FEC  0E00               	movlw	0
 20285  018FEE  0101               	movlb	1	; () banked
 20286  018FF0  6F29               	movwf	(_GiHours_3+1)& (0+255),b
 20287  018FF2  0E00               	movlw	0
 20288  018FF4  6F28               	movwf	_GiHours_3& (0+255),b
 20289                           
 20290                           ; BSR set to: 1
 20291                           ;EEPROM.c: 184: int_eeprom_write((0x19),EP_Errors3);
 20292  018FF6  0E00               	movlw	0
 20293  018FF8  0100               	movlb	0	; () banked
 20294  018FFA  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20295  018FFC  0E19               	movlw	25
 20296  018FFE  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20297  019000  C01A  F062         	movff	_EP_Errors3,int_eeprom_write@dat
 20298  019004  0100               	movlb	0	; () banked
 20299  019006  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 20300  019008  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20301                           
 20302                           ;EEPROM.c: 185: int_eeprom_write((0x13),GiMinutes_3);
 20303  01900C  0E00               	movlw	0
 20304  01900E  0100               	movlb	0	; () banked
 20305  019010  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20306  019012  0E13               	movlw	19
 20307  019014  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20308  019016  C0DD  F062         	movff	_GiMinutes_3,int_eeprom_write@dat
 20309  01901A  C0DE  F063         	movff	_GiMinutes_3+1,int_eeprom_write@dat+1
 20310  01901E  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20311                           
 20312                           ;EEPROM.c: 186: int_eeprom_write((0x16),GiHours_3);
 20313  019022  0E00               	movlw	0
 20314  019024  0100               	movlb	0	; () banked
 20315  019026  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20316  019028  0E16               	movlw	22
 20317  01902A  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20318  01902C  C128  F062         	movff	_GiHours_3,int_eeprom_write@dat
 20319  019030  C129  F063         	movff	_GiHours_3+1,int_eeprom_write@dat+1
 20320  019034  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20321                           
 20322                           ;EEPROM.c: 188: EP_Errors2 = 0; GiMinutes_2 = 0; GiHours_2 = 0;
 20323  019038  0E00               	movlw	0
 20324  01903A  6E19               	movwf	_EP_Errors2,c
 20325  01903C  0E00               	movlw	0
 20326  01903E  6E14               	movwf	_GiMinutes_2+1,c
 20327  019040  0E00               	movlw	0
 20328  019042  6E13               	movwf	_GiMinutes_2,c
 20329  019044  0E00               	movlw	0
 20330  019046  0100               	movlb	0	; () banked
 20331  019048  6FDA               	movwf	(_GiHours_2+1)& (0+255),b
 20332  01904A  0E00               	movlw	0
 20333  01904C  6FD9               	movwf	_GiHours_2& (0+255),b
 20334                           
 20335                           ;EEPROM.c: 189: int_eeprom_write((0x18),EP_Errors2);
 20336  01904E  0E00               	movlw	0
 20337  019050  0100               	movlb	0	; () banked
 20338  019052  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20339  019054  0E18               	movlw	24
 20340  019056  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20341  019058  C019  F062         	movff	_EP_Errors2,int_eeprom_write@dat
 20342  01905C  0100               	movlb	0	; () banked
 20343  01905E  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 20344  019060  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20345                           
 20346                           ;EEPROM.c: 190: int_eeprom_write((0x12),GiMinutes_2);
 20347  019064  0E00               	movlw	0
 20348  019066  0100               	movlb	0	; () banked
 20349  019068  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20350  01906A  0E12               	movlw	18
 20351  01906C  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20352  01906E  C013  F062         	movff	_GiMinutes_2,int_eeprom_write@dat
 20353  019072  C014  F063         	movff	_GiMinutes_2+1,int_eeprom_write@dat+1
 20354  019076  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20355                           
 20356                           ;EEPROM.c: 191: int_eeprom_write((0x15),GiHours_2);
 20357  01907A  0E00               	movlw	0
 20358  01907C  0100               	movlb	0	; () banked
 20359  01907E  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20360  019080  0E15               	movlw	21
 20361  019082  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20362  019084  C0D9  F062         	movff	_GiHours_2,int_eeprom_write@dat
 20363  019088  C0DA  F063         	movff	_GiHours_2+1,int_eeprom_write@dat+1
 20364  01908C  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20365                           
 20366                           ;EEPROM.c: 193: Total_Min = 0; Minutes_1 = 0; Minutes = 0;
 20367  019090  0E00               	movlw	0
 20368  019092  0101               	movlb	1	; () banked
 20369  019094  6F88               	movwf	_Total_Min& (0+255),b
 20370                           
 20371                           ; BSR set to: 1
 20372  019096  0E00               	movlw	0
 20373  019098  0101               	movlb	1	; () banked
 20374  01909A  6F6F               	movwf	_Minutes_1& (0+255),b
 20375                           
 20376                           ; BSR set to: 1
 20377  01909C  0E00               	movlw	0
 20378  01909E  0101               	movlb	1	; () banked
 20379  0190A0  6F6E               	movwf	_Minutes& (0+255),b
 20380                           
 20381                           ;EEPROM.c: 194: }
 20382  0190A2  0012               	return	
 20383  0190A4                     l19745:
 20384                           
 20385                           ; BSR set to: 1
 20386                           ;EEPROM.c: 195: else
 20387                           ;EEPROM.c: 196: {
 20388                           ;EEPROM.c: 197: EEPROM_Error_Flag = 1;
 20389  0190A4  0E01               	movlw	1
 20390  0190A6  6E17               	movwf	_EEPROM_Error_Flag,c
 20391                           
 20392                           ; BSR set to: 1
 20393                           ;EEPROM.c: 198: Errors = EP_Errors1;
 20394  0190A8  C018  F01B         	movff	_EP_Errors1,_Errors
 20395                           
 20396                           ; BSR set to: 1
 20397                           ;EEPROM.c: 199: int_eeprom_write((0x20),EEPROM_Error_Flag);
 20398  0190AC  0E00               	movlw	0
 20399  0190AE  0100               	movlb	0	; () banked
 20400  0190B0  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 20401  0190B2  0E20               	movlw	32
 20402  0190B4  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 20403  0190B6  C017  F062         	movff	_EEPROM_Error_Flag,int_eeprom_write@dat
 20404  0190BA  0100               	movlb	0	; () banked
 20405  0190BC  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 20406  0190BE  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 20407  0190C2  0012               	return	
 20408  0190C4                     __end_of_Last_3_EEPROM_ERROR_Trigger:
 20409                           	opt stack 0
 20410                           tblptru	equ	0xFF8
 20411                           tblptrh	equ	0xFF7
 20412                           tblptrl	equ	0xFF6
 20413                           tablat	equ	0xFF5
 20414                           prodh	equ	0xFF4
 20415                           prodl	equ	0xFF3
 20416                           intcon	equ	0xFF2
 20417                           postinc0	equ	0xFEE
 20418                           wreg	equ	0xFE8
 20419                           postdec1	equ	0xFE5
 20420                           fsr1h	equ	0xFE2
 20421                           fsr1l	equ	0xFE1
 20422                           indf2	equ	0xFDF
 20423                           postinc2	equ	0xFDE
 20424                           postdec2	equ	0xFDD
 20425                           fsr2h	equ	0xFDA
 20426                           fsr2l	equ	0xFD9
 20427                           status	equ	0xFD8
 20428                           
 20429 ;; *************** function _Error_Checking_One_Second *****************
 20430 ;; Defined at:
 20431 ;;		line 78 in file "ERROR_HANDLING.c"
 20432 ;; Parameters:    Size  Location     Type
 20433 ;;		None
 20434 ;; Auto vars:     Size  Location     Type
 20435 ;;		None
 20436 ;; Return value:  Size  Location     Type
 20437 ;;                  1    wreg      void 
 20438 ;; Registers used:
 20439 ;;		wreg, status,2, status,0, cstack
 20440 ;; Tracked objects:
 20441 ;;		On entry : 0/0
 20442 ;;		On exit  : 0/0
 20443 ;;		Unchanged: 0/0
 20444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20449 ;;Total ram usage:        0 bytes
 20450 ;; Hardware stack levels used:    1
 20451 ;; Hardware stack levels required when called:    6
 20452 ;; This function calls:
 20453 ;;		_Communication_Error
 20454 ;;		_DC_Bus_Voltage
 20455 ;;		_Generator_One_Feedback
 20456 ;;		_Generator_RPM
 20457 ;;		_Grid_Frequency
 20458 ;;		_Grid_Maximum_Power
 20459 ;;		_Grid_Minimum_Power
 20460 ;;		_Grid_OV
 20461 ;;		_Grid_Over_Current
 20462 ;;		_Grid_Phase_Sequence
 20463 ;;		_Grid_UV
 20464 ;;		_Motor_Slip_Cal
 20465 ;;		_Pitch_Feedback
 20466 ;;		_Pitch_PS_ON_Function
 20467 ;;		_Ramp_Up_Slip
 20468 ;;		_Ramp_Up_Slip_Error_Trigger
 20469 ;;		_Rotor_Slip_Cal
 20470 ;;		_Start_Stop
 20471 ;;		_Turbine_OverLoaded_Error
 20472 ;;		_Turbine_Over_Speed
 20473 ;;		_Turbine_Restore_Check
 20474 ;;		_Turbine_Under_speed
 20475 ;;		_VFD_PS_ON_Function
 20476 ;;		_VFD_Run_Time_Error
 20477 ;;		_Wind_Speed_Error_Trigger
 20478 ;; This function is called by:
 20479 ;;		_Timer0_OneSecond_Function
 20480 ;; This function uses a non-reentrant model
 20481 ;;
 20482                           
 20483                           	psect	text53
 20484  01943C                     __ptext53:
 20485                           	opt stack 0
 20486  01943C                     _Error_Checking_One_Second:
 20487                           	opt stack 23
 20488                           
 20489                           ;ERROR_HANDLING.c: 80: if(Turbine_state == STARTUP_STATE)
 20490                           
 20491                           ;incstack = 0
 20492  01943C  0100               	movlb	0	; () banked
 20493  01943E  51F0               	movf	_Turbine_state& (0+255),w,b
 20494  019440  A4D8               	btfss	status,2,c
 20495  019442  D018               	goto	l21915
 20496                           
 20497                           ; BSR set to: 0
 20498                           ;ERROR_HANDLING.c: 81: {
 20499                           ;ERROR_HANDLING.c: 82: Wind_Speed_Error_Trigger();
 20500  019444  ECD6  F0C3         	call	_Wind_Speed_Error_Trigger	;wreg free
 20501                           
 20502                           ;ERROR_HANDLING.c: 83: VFD_PS_ON_Function();
 20503  019448  EC12  F0D3         	call	_VFD_PS_ON_Function	;wreg free
 20504                           
 20505                           ;ERROR_HANDLING.c: 84: Pitch_PS_ON_Function();
 20506  01944C  EC3E  F0D6         	call	_Pitch_PS_ON_Function	;wreg free
 20507                           
 20508                           ;ERROR_HANDLING.c: 85: Grid_UV();
 20509  019450  EC89  F0BE         	call	_Grid_UV	;wreg free
 20510                           
 20511                           ;ERROR_HANDLING.c: 86: Grid_OV();
 20512  019454  EC3D  F0BF         	call	_Grid_OV	;wreg free
 20513                           
 20514                           ;ERROR_HANDLING.c: 87: Grid_Frequency();
 20515  019458  EC14  F0D2         	call	_Grid_Frequency	;wreg free
 20516                           
 20517                           ;ERROR_HANDLING.c: 88: DC_Bus_Voltage();
 20518  01945C  ECD8  F0C8         	call	_DC_Bus_Voltage	;wreg free
 20519                           
 20520                           ;ERROR_HANDLING.c: 89: Grid_Phase_Sequence();
 20521  019460  ECA5  F0D7         	call	_Grid_Phase_Sequence	;wreg free
 20522                           
 20523                           ;ERROR_HANDLING.c: 90: Turbine_Restore_Check();
 20524  019464  EC3C  F0CE         	call	_Turbine_Restore_Check	;wreg free
 20525                           
 20526                           ;ERROR_HANDLING.c: 91: Start_Stop();
 20527  019468  EC6F  F0CC         	call	_Start_Stop	;wreg free
 20528                           
 20529                           ;ERROR_HANDLING.c: 92: Communication_Error();
 20530  01946C  ECEF  F0D3         	call	_Communication_Error	;wreg free
 20531                           
 20532                           ;ERROR_HANDLING.c: 93: Grid_Over_Current();
 20533  019470  EC9B  F0C2         	call	_Grid_Over_Current	;wreg free
 20534  019474                     l21915:
 20535                           
 20536                           ;ERROR_HANDLING.c: 94: }
 20537                           ;ERROR_HANDLING.c: 95: if(Turbine_state == RUNNING_STATE)
 20538  019474  0E02               	movlw	2
 20539  019476  0100               	movlb	0	; () banked
 20540  019478  19F0               	xorwf	_Turbine_state& (0+255),w,b
 20541  01947A  A4D8               	btfss	status,2,c
 20542  01947C  D028               	goto	l21923
 20543                           
 20544                           ; BSR set to: 0
 20545                           ;ERROR_HANDLING.c: 96: {
 20546                           ;ERROR_HANDLING.c: 97: VFD_PS_ON_Function();
 20547  01947E  EC12  F0D3         	call	_VFD_PS_ON_Function	;wreg free
 20548                           
 20549                           ;ERROR_HANDLING.c: 98: Wind_Speed_Error_Trigger();
 20550  019482  ECD6  F0C3         	call	_Wind_Speed_Error_Trigger	;wreg free
 20551                           
 20552                           ;ERROR_HANDLING.c: 99: Turbine_Under_speed();
 20553  019486  EC55  F0D4         	call	_Turbine_Under_speed	;wreg free
 20554                           
 20555                           ;ERROR_HANDLING.c: 100: Generator_RPM();
 20556  01948A  EC37  F0D5         	call	_Generator_RPM	;wreg free
 20557                           
 20558                           ;ERROR_HANDLING.c: 101: Rotor_Slip_Cal();
 20559  01948E  EC95  F0CE         	call	_Rotor_Slip_Cal	;wreg free
 20560                           
 20561                           ;ERROR_HANDLING.c: 102: Motor_Slip_Cal();
 20562  019492  EC78  F0C5         	call	_Motor_Slip_Cal	;wreg free
 20563                           
 20564                           ;ERROR_HANDLING.c: 103: Pitch_Feedback();
 20565  019496  EC85  F0D3         	call	_Pitch_Feedback	;wreg free
 20566                           
 20567                           ;ERROR_HANDLING.c: 104: Generator_One_Feedback();
 20568  01949A  ECBA  F0D3         	call	_Generator_One_Feedback	;wreg free
 20569                           
 20570                           ;ERROR_HANDLING.c: 105: Start_Stop();
 20571  01949E  EC6F  F0CC         	call	_Start_Stop	;wreg free
 20572                           
 20573                           ;ERROR_HANDLING.c: 106: Communication_Error();
 20574  0194A2  ECEF  F0D3         	call	_Communication_Error	;wreg free
 20575                           
 20576                           ;ERROR_HANDLING.c: 107: Turbine_Over_Speed();
 20577  0194A6  EC0D  F0D5         	call	_Turbine_Over_Speed	;wreg free
 20578                           
 20579                           ;ERROR_HANDLING.c: 110: if(Five_Second_flag)
 20580  0194AA  0101               	movlb	1	; () banked
 20581  0194AC  5157               	movf	_Five_Second_flag& (0+255),w,b
 20582  0194AE  B4D8               	btfsc	status,2,c
 20583  0194B0  D00E               	goto	l21923
 20584                           
 20585                           ; BSR set to: 1
 20586                           ;ERROR_HANDLING.c: 111: {
 20587                           ;ERROR_HANDLING.c: 112: Turbine_OverLoaded_Error();
 20588  0194B2  EC83  F0D4         	call	_Turbine_OverLoaded_Error	;wreg free
 20589                           
 20590                           ;ERROR_HANDLING.c: 113: Grid_Over_Current();
 20591  0194B6  EC9B  F0C2         	call	_Grid_Over_Current	;wreg free
 20592                           
 20593                           ;ERROR_HANDLING.c: 114: Grid_UV();
 20594  0194BA  EC89  F0BE         	call	_Grid_UV	;wreg free
 20595                           
 20596                           ;ERROR_HANDLING.c: 115: Grid_OV();
 20597  0194BE  EC3D  F0BF         	call	_Grid_OV	;wreg free
 20598                           
 20599                           ;ERROR_HANDLING.c: 116: Grid_Frequency();
 20600  0194C2  EC14  F0D2         	call	_Grid_Frequency	;wreg free
 20601                           
 20602                           ;ERROR_HANDLING.c: 117: Grid_Minimum_Power();
 20603  0194C6  ECB1  F0D4         	call	_Grid_Minimum_Power	;wreg free
 20604                           
 20605                           ;ERROR_HANDLING.c: 118: Grid_Maximum_Power();
 20606  0194CA  ECDF  F0D4         	call	_Grid_Maximum_Power	;wreg free
 20607  0194CE                     l21923:
 20608                           
 20609                           ;ERROR_HANDLING.c: 119: }
 20610                           ;ERROR_HANDLING.c: 121: }
 20611                           ;ERROR_HANDLING.c: 122: if(Turbine_state == RAMPUP_STATE)
 20612  0194CE  0100               	movlb	0	; () banked
 20613  0194D0  05F0               	decf	_Turbine_state& (0+255),w,b
 20614  0194D2  A4D8               	btfss	status,2,c
 20615  0194D4  0012               	return	
 20616                           
 20617                           ; BSR set to: 0
 20618                           ;ERROR_HANDLING.c: 123: {
 20619                           ;ERROR_HANDLING.c: 124: DC_Bus_Voltage();
 20620  0194D6  ECD8  F0C8         	call	_DC_Bus_Voltage	;wreg free
 20621                           
 20622                           ;ERROR_HANDLING.c: 125: Rotor_Slip_Cal();
 20623  0194DA  EC95  F0CE         	call	_Rotor_Slip_Cal	;wreg free
 20624                           
 20625                           ;ERROR_HANDLING.c: 126: Motor_Slip_Cal();
 20626  0194DE  EC78  F0C5         	call	_Motor_Slip_Cal	;wreg free
 20627                           
 20628                           ;ERROR_HANDLING.c: 127: Ramp_Up_Slip();
 20629  0194E2  EC46  F0CF         	call	_Ramp_Up_Slip	;wreg free
 20630                           
 20631                           ;ERROR_HANDLING.c: 128: Pitch_Feedback();
 20632  0194E6  EC85  F0D3         	call	_Pitch_Feedback	;wreg free
 20633                           
 20634                           ;ERROR_HANDLING.c: 129: if(Ten_Sec_RampUp_Flag)
 20635  0194EA  0100               	movlb	0	; () banked
 20636  0194EC  51ED               	movf	_Ten_Sec_RampUp_Flag& (0+255),w,b
 20637  0194EE  B4D8               	btfsc	status,2,c
 20638  0194F0  D008               	goto	l6119
 20639                           
 20640                           ; BSR set to: 0
 20641                           ;ERROR_HANDLING.c: 130: {
 20642                           ;ERROR_HANDLING.c: 131: Ramp_Up_Slip_Error_Trigger();
 20643  0194F2  EC3B  F0C3         	call	_Ramp_Up_Slip_Error_Trigger	;wreg free
 20644                           
 20645                           ;ERROR_HANDLING.c: 132: VFD_Run_Time_Error();
 20646  0194F6  EC87  F0D5         	call	_VFD_Run_Time_Error	;wreg free
 20647                           
 20648                           ;ERROR_HANDLING.c: 133: Turbine_Over_Speed();
 20649  0194FA  EC0D  F0D5         	call	_Turbine_Over_Speed	;wreg free
 20650                           
 20651                           ;ERROR_HANDLING.c: 134: Grid_Over_Current();
 20652  0194FE  EC9B  F0C2         	call	_Grid_Over_Current	;wreg free
 20653  019502                     l6119:
 20654                           
 20655                           ;ERROR_HANDLING.c: 135: }
 20656                           ;ERROR_HANDLING.c: 136: Start_Stop();
 20657  019502  EC6F  F0CC         	call	_Start_Stop	;wreg free
 20658                           
 20659                           ;ERROR_HANDLING.c: 137: Communication_Error();
 20660  019506  ECEF  F0D3         	call	_Communication_Error	;wreg free
 20661  01950A  0012               	return	
 20662  01950C                     __end_of_Error_Checking_One_Second:
 20663                           	opt stack 0
 20664                           tblptru	equ	0xFF8
 20665                           tblptrh	equ	0xFF7
 20666                           tblptrl	equ	0xFF6
 20667                           tablat	equ	0xFF5
 20668                           prodh	equ	0xFF4
 20669                           prodl	equ	0xFF3
 20670                           intcon	equ	0xFF2
 20671                           postinc0	equ	0xFEE
 20672                           wreg	equ	0xFE8
 20673                           postdec1	equ	0xFE5
 20674                           fsr1h	equ	0xFE2
 20675                           fsr1l	equ	0xFE1
 20676                           indf2	equ	0xFDF
 20677                           postinc2	equ	0xFDE
 20678                           postdec2	equ	0xFDD
 20679                           fsr2h	equ	0xFDA
 20680                           fsr2l	equ	0xFD9
 20681                           status	equ	0xFD8
 20682                           
 20683 ;; *************** function _Wind_Speed_Error_Trigger *****************
 20684 ;; Defined at:
 20685 ;;		line 166 in file "ERROR_HANDLING.c"
 20686 ;; Parameters:    Size  Location     Type
 20687 ;;		None
 20688 ;; Auto vars:     Size  Location     Type
 20689 ;;		None
 20690 ;; Return value:  Size  Location     Type
 20691 ;;                  1    wreg      void 
 20692 ;; Registers used:
 20693 ;;		wreg, status,2, status,0, cstack
 20694 ;; Tracked objects:
 20695 ;;		On entry : 0/0
 20696 ;;		On exit  : 0/0
 20697 ;;		Unchanged: 0/0
 20698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20703 ;;Total ram usage:        0 bytes
 20704 ;; Hardware stack levels used:    1
 20705 ;; Hardware stack levels required when called:    4
 20706 ;; This function calls:
 20707 ;;		___ftge
 20708 ;; This function is called by:
 20709 ;;		_Error_Checking_One_Second
 20710 ;; This function uses a non-reentrant model
 20711 ;;
 20712                           
 20713                           	psect	text54
 20714  0187AC                     __ptext54:
 20715                           	opt stack 0
 20716  0187AC                     _Wind_Speed_Error_Trigger:
 20717                           	opt stack 24
 20718                           
 20719                           ;ERROR_HANDLING.c: 168: if(Turbine_state == STARTUP_STATE)
 20720                           
 20721                           ;incstack = 0
 20722  0187AC  0100               	movlb	0	; () banked
 20723  0187AE  51F0               	movf	_Turbine_state& (0+255),w,b
 20724  0187B0  A4D8               	btfss	status,2,c
 20725  0187B2  D00D               	goto	l6134
 20726                           
 20727                           ; BSR set to: 0
 20728                           ;ERROR_HANDLING.c: 169: {
 20729                           ;ERROR_HANDLING.c: 170: if(Wind_Speed_Avg >= (0))
 20730  0187B4  BE0F               	btfsc	_Wind_Speed_Avg+2,7,c
 20731  0187B6  D004               	goto	l21047
 20732                           
 20733                           ; BSR set to: 0
 20734                           ;ERROR_HANDLING.c: 171: {
 20735                           ;ERROR_HANDLING.c: 172: Wind_Cut_In_Flag = 1;
 20736  0187B8  0E01               	movlw	1
 20737  0187BA  0101               	movlb	1	; () banked
 20738  0187BC  6F9B               	movwf	_Wind_Cut_In_Flag& (0+255),b
 20739                           
 20740                           ;ERROR_HANDLING.c: 173: }
 20741  0187BE  D007               	goto	l6134
 20742  0187C0                     l21047:
 20743                           
 20744                           ;ERROR_HANDLING.c: 174: else if(Wind_Speed_Avg < (0))
 20745  0187C0  AE0F               	btfss	_Wind_Speed_Avg+2,7,c
 20746  0187C2  D005               	goto	l6134
 20747                           
 20748                           ;ERROR_HANDLING.c: 175: {
 20749                           ;ERROR_HANDLING.c: 176: Wind_Cut_In_Flag = 0;
 20750  0187C4  0E00               	movlw	0
 20751  0187C6  0101               	movlb	1	; () banked
 20752  0187C8  6F9B               	movwf	_Wind_Cut_In_Flag& (0+255),b
 20753                           
 20754                           ;ERROR_HANDLING.c: 177: Errors = WS_MIN_MAX;
 20755  0187CA  0E01               	movlw	1
 20756  0187CC  6E1B               	movwf	_Errors,c
 20757  0187CE                     l6134:
 20758                           
 20759                           ;ERROR_HANDLING.c: 178: }
 20760                           ;ERROR_HANDLING.c: 179: }
 20761                           ;ERROR_HANDLING.c: 181: if(Turbine_state == STARTUP_STATE)
 20762  0187CE  0100               	movlb	0	; () banked
 20763  0187D0  51F0               	movf	_Turbine_state& (0+255),w,b
 20764  0187D2  A4D8               	btfss	status,2,c
 20765  0187D4  D03E               	goto	l21063
 20766                           
 20767                           ; BSR set to: 0
 20768                           ;ERROR_HANDLING.c: 182: {
 20769                           ;ERROR_HANDLING.c: 183: if(Wind_Speed_Avg >= (15))
 20770  0187D6  C00D  F099         	movff	_Wind_Speed_Avg,___ftge@ff1
 20771  0187DA  C00E  F09A         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20772  0187DE  C00F  F09B         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20773  0187E2  0E00               	movlw	0
 20774  0187E4  0100               	movlb	0	; () banked
 20775  0187E6  6F9C               	movwf	___ftge@ff2& (0+255),b
 20776  0187E8  0E70               	movlw	112
 20777  0187EA  0100               	movlb	0	; () banked
 20778  0187EC  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 20779  0187EE  0E41               	movlw	65
 20780  0187F0  0100               	movlb	0	; () banked
 20781  0187F2  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 20782  0187F4  ECEB  F0CA         	call	___ftge	;wreg free
 20783  0187F8  0100               	movlb	0	; () banked
 20784  0187FA  A0D8               	btfss	status,0,c
 20785  0187FC  D010               	goto	l21059
 20786                           
 20787                           ; BSR set to: 0
 20788                           ;ERROR_HANDLING.c: 184: {
 20789                           ;ERROR_HANDLING.c: 185: Wind_Cut_Out_Counter++;
 20790  0187FE  0101               	movlb	1	; () banked
 20791  018800  2B9C               	incf	_Wind_Cut_Out_Counter& (0+255),f,b
 20792                           
 20793                           ; BSR set to: 1
 20794                           ;ERROR_HANDLING.c: 186: if(Wind_Cut_Out_Counter >= 1)
 20795  018802  0101               	movlb	1	; () banked
 20796  018804  519C               	movf	_Wind_Cut_Out_Counter& (0+255),w,b
 20797  018806  0101               	movlb	1	; () banked
 20798  018808  B4D8               	btfsc	status,2,c
 20799  01880A  D023               	goto	l21063
 20800                           
 20801                           ; BSR set to: 1
 20802                           ;ERROR_HANDLING.c: 187: {
 20803                           ;ERROR_HANDLING.c: 188: Wind_Cut_Out_Flag = 1;
 20804  01880C  0E01               	movlw	1
 20805  01880E  0100               	movlb	0	; () banked
 20806  018810  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20807                           
 20808                           ;ERROR_HANDLING.c: 189: Wind_Cut_Out_Counter = 0;
 20809  018812  0E00               	movlw	0
 20810  018814  0101               	movlb	1	; () banked
 20811  018816  6F9C               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20812                           
 20813                           ;ERROR_HANDLING.c: 190: Errors = WS_MIN_MAX;
 20814  018818  0E01               	movlw	1
 20815  01881A  6E1B               	movwf	_Errors,c
 20816                           
 20817                           ; BSR set to: 1
 20818                           ;ERROR_HANDLING.c: 191: }
 20819                           ;ERROR_HANDLING.c: 192: }
 20820  01881C  D01A               	goto	l21063
 20821  01881E                     l21059:
 20822                           
 20823                           ;ERROR_HANDLING.c: 193: else if(Wind_Speed_Avg < (15))
 20824  01881E  C00D  F099         	movff	_Wind_Speed_Avg,___ftge@ff1
 20825  018822  C00E  F09A         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20826  018826  C00F  F09B         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20827  01882A  0E00               	movlw	0
 20828  01882C  0100               	movlb	0	; () banked
 20829  01882E  6F9C               	movwf	___ftge@ff2& (0+255),b
 20830  018830  0E70               	movlw	112
 20831  018832  0100               	movlb	0	; () banked
 20832  018834  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 20833  018836  0E41               	movlw	65
 20834  018838  0100               	movlb	0	; () banked
 20835  01883A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 20836  01883C  ECEB  F0CA         	call	___ftge	;wreg free
 20837  018840  0100               	movlb	0	; () banked
 20838  018842  B0D8               	btfsc	status,0,c
 20839  018844  D006               	goto	l21063
 20840                           
 20841                           ; BSR set to: 0
 20842                           ;ERROR_HANDLING.c: 194: {
 20843                           ;ERROR_HANDLING.c: 195: Wind_Cut_Out_Flag = 0;
 20844  018846  0E00               	movlw	0
 20845  018848  0100               	movlb	0	; () banked
 20846  01884A  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20847                           
 20848                           ;ERROR_HANDLING.c: 196: Wind_Cut_Out_Counter = 0;
 20849  01884C  0E00               	movlw	0
 20850  01884E  0101               	movlb	1	; () banked
 20851  018850  6F9C               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20852  018852                     l21063:
 20853                           
 20854                           ;ERROR_HANDLING.c: 197: }
 20855                           ;ERROR_HANDLING.c: 198: }
 20856                           ;ERROR_HANDLING.c: 199: if(Turbine_state == RUNNING_STATE)
 20857  018852  0E02               	movlw	2
 20858  018854  0100               	movlb	0	; () banked
 20859  018856  19F0               	xorwf	_Turbine_state& (0+255),w,b
 20860  018858  A4D8               	btfss	status,2,c
 20861  01885A  0012               	return	
 20862                           
 20863                           ; BSR set to: 0
 20864                           ;ERROR_HANDLING.c: 200: {
 20865                           ;ERROR_HANDLING.c: 201: if(Wind_Speed_Avg >= (15))
 20866  01885C  C00D  F099         	movff	_Wind_Speed_Avg,___ftge@ff1
 20867  018860  C00E  F09A         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20868  018864  C00F  F09B         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20869  018868  0E00               	movlw	0
 20870  01886A  0100               	movlb	0	; () banked
 20871  01886C  6F9C               	movwf	___ftge@ff2& (0+255),b
 20872  01886E  0E70               	movlw	112
 20873  018870  0100               	movlb	0	; () banked
 20874  018872  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 20875  018874  0E41               	movlw	65
 20876  018876  0100               	movlb	0	; () banked
 20877  018878  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 20878  01887A  ECEB  F0CA         	call	___ftge	;wreg free
 20879  01887E  0100               	movlb	0	; () banked
 20880  018880  A0D8               	btfss	status,0,c
 20881  018882  D00F               	goto	l21073
 20882                           
 20883                           ; BSR set to: 0
 20884                           ;ERROR_HANDLING.c: 202: {
 20885                           ;ERROR_HANDLING.c: 203: Wind_Cut_Out_Counter++;
 20886  018884  0101               	movlb	1	; () banked
 20887  018886  2B9C               	incf	_Wind_Cut_Out_Counter& (0+255),f,b
 20888                           
 20889                           ; BSR set to: 1
 20890                           ;ERROR_HANDLING.c: 204: if(Wind_Cut_Out_Counter >= 10)
 20891  018888  0E09               	movlw	9
 20892  01888A  0101               	movlb	1	; () banked
 20893  01888C  659C               	cpfsgt	_Wind_Cut_Out_Counter& (0+255),b
 20894  01888E  0012               	return	
 20895                           
 20896                           ; BSR set to: 1
 20897                           ;ERROR_HANDLING.c: 205: {
 20898                           ;ERROR_HANDLING.c: 206: Wind_Cut_Out_Flag = 1;
 20899  018890  0E01               	movlw	1
 20900  018892  0100               	movlb	0	; () banked
 20901  018894  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20902                           
 20903                           ;ERROR_HANDLING.c: 207: Wind_Cut_Out_Counter = 0;
 20904  018896  0E00               	movlw	0
 20905  018898  0101               	movlb	1	; () banked
 20906  01889A  6F9C               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20907                           
 20908                           ;ERROR_HANDLING.c: 208: Errors = WS_MIN_MAX;
 20909  01889C  0E01               	movlw	1
 20910  01889E  6E1B               	movwf	_Errors,c
 20911                           
 20912                           ; BSR set to: 1
 20913                           ;ERROR_HANDLING.c: 209: }
 20914                           ;ERROR_HANDLING.c: 210: }
 20915  0188A0  0012               	return	
 20916  0188A2                     l21073:
 20917                           
 20918                           ;ERROR_HANDLING.c: 211: else if(Wind_Speed_Avg < (15))
 20919  0188A2  C00D  F099         	movff	_Wind_Speed_Avg,___ftge@ff1
 20920  0188A6  C00E  F09A         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20921  0188AA  C00F  F09B         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20922  0188AE  0E00               	movlw	0
 20923  0188B0  0100               	movlb	0	; () banked
 20924  0188B2  6F9C               	movwf	___ftge@ff2& (0+255),b
 20925  0188B4  0E70               	movlw	112
 20926  0188B6  0100               	movlb	0	; () banked
 20927  0188B8  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 20928  0188BA  0E41               	movlw	65
 20929  0188BC  0100               	movlb	0	; () banked
 20930  0188BE  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 20931  0188C0  ECEB  F0CA         	call	___ftge	;wreg free
 20932  0188C4  0100               	movlb	0	; () banked
 20933  0188C6  B0D8               	btfsc	status,0,c
 20934  0188C8  0012               	return	
 20935                           
 20936                           ; BSR set to: 0
 20937                           ;ERROR_HANDLING.c: 212: {
 20938                           ;ERROR_HANDLING.c: 213: Wind_Cut_Out_Flag = 0;
 20939  0188CA  0E00               	movlw	0
 20940  0188CC  0100               	movlb	0	; () banked
 20941  0188CE  6FF2               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20942                           
 20943                           ;ERROR_HANDLING.c: 214: Wind_Cut_Out_Counter = 0;
 20944  0188D0  0E00               	movlw	0
 20945  0188D2  0101               	movlb	1	; () banked
 20946  0188D4  6F9C               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20947                           
 20948                           ; BSR set to: 1
 20949                           
 20950                           ; BSR set to: 1
 20951  0188D6  0012               	return	
 20952  0188D8                     __end_of_Wind_Speed_Error_Trigger:
 20953                           	opt stack 0
 20954                           tblptru	equ	0xFF8
 20955                           tblptrh	equ	0xFF7
 20956                           tblptrl	equ	0xFF6
 20957                           tablat	equ	0xFF5
 20958                           prodh	equ	0xFF4
 20959                           prodl	equ	0xFF3
 20960                           intcon	equ	0xFF2
 20961                           postinc0	equ	0xFEE
 20962                           wreg	equ	0xFE8
 20963                           postdec1	equ	0xFE5
 20964                           fsr1h	equ	0xFE2
 20965                           fsr1l	equ	0xFE1
 20966                           indf2	equ	0xFDF
 20967                           postinc2	equ	0xFDE
 20968                           postdec2	equ	0xFDD
 20969                           fsr2h	equ	0xFDA
 20970                           fsr2l	equ	0xFD9
 20971                           status	equ	0xFD8
 20972                           
 20973 ;; *************** function _VFD_Run_Time_Error *****************
 20974 ;; Defined at:
 20975 ;;		line 613 in file "ERROR_HANDLING.c"
 20976 ;; Parameters:    Size  Location     Type
 20977 ;;		None
 20978 ;; Auto vars:     Size  Location     Type
 20979 ;;		None
 20980 ;; Return value:  Size  Location     Type
 20981 ;;                  1    wreg      void 
 20982 ;; Registers used:
 20983 ;;		wreg, status,2, status,0
 20984 ;; Tracked objects:
 20985 ;;		On entry : 0/0
 20986 ;;		On exit  : 0/0
 20987 ;;		Unchanged: 0/0
 20988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;Total ram usage:        0 bytes
 20994 ;; Hardware stack levels used:    1
 20995 ;; Hardware stack levels required when called:    3
 20996 ;; This function calls:
 20997 ;;		Nothing
 20998 ;; This function is called by:
 20999 ;;		_Error_Checking_One_Second
 21000 ;; This function uses a non-reentrant model
 21001 ;;
 21002                           
 21003                           	psect	text55
 21004  01AB0E                     __ptext55:
 21005                           	opt stack 0
 21006  01AB0E                     _VFD_Run_Time_Error:
 21007                           	opt stack 25
 21008                           
 21009                           ;ERROR_HANDLING.c: 615: VFD_Run_Time_Counter++;
 21010                           
 21011                           ;incstack = 0
 21012  01AB0E  0101               	movlb	1	; () banked
 21013  01AB10  4B3E               	infsnz	_VFD_Run_Time_Counter& (0+255),f,b
 21014  01AB12  2B3F               	incf	(_VFD_Run_Time_Counter+1)& (0+255),f,b
 21015                           
 21016                           ; BSR set to: 1
 21017                           ;ERROR_HANDLING.c: 616: if(VFD_Run_Time_Counter >= (300))
 21018  01AB14  0E2C               	movlw	44
 21019  01AB16  0101               	movlb	1	; () banked
 21020  01AB18  5D3E               	subwf	_VFD_Run_Time_Counter& (0+255),w,b
 21021  01AB1A  0E01               	movlw	1
 21022  01AB1C  0101               	movlb	1	; () banked
 21023  01AB1E  593F               	subwfb	(_VFD_Run_Time_Counter+1)& (0+255),w,b
 21024  01AB20  A0D8               	btfss	status,0,c
 21025  01AB22  D00B               	goto	l21471
 21026                           
 21027                           ; BSR set to: 1
 21028                           ;ERROR_HANDLING.c: 617: {
 21029                           ;ERROR_HANDLING.c: 618: VFD_Run_Time_Counter = 0;
 21030  01AB24  0E00               	movlw	0
 21031  01AB26  0101               	movlb	1	; () banked
 21032  01AB28  6F3F               	movwf	(_VFD_Run_Time_Counter+1)& (0+255),b
 21033  01AB2A  0E00               	movlw	0
 21034  01AB2C  6F3E               	movwf	_VFD_Run_Time_Counter& (0+255),b
 21035                           
 21036                           ;ERROR_HANDLING.c: 619: VFD__Run_Time_Error = 1;
 21037  01AB2E  0E01               	movlw	1
 21038  01AB30  0101               	movlb	1	; () banked
 21039  01AB32  6F98               	movwf	_VFD__Run_Time_Error& (0+255),b
 21040                           
 21041                           ;ERROR_HANDLING.c: 620: Errors = VFD_RUN_TIME;
 21042  01AB34  0E04               	movlw	4
 21043  01AB36  6E1B               	movwf	_Errors,c
 21044                           
 21045                           ;ERROR_HANDLING.c: 621: }
 21046  01AB38  0012               	return	
 21047  01AB3A                     l21471:
 21048                           
 21049                           ; BSR set to: 1
 21050                           ;ERROR_HANDLING.c: 622: else if(VFD_Run_Time_Counter < (300))
 21051  01AB3A  0E2C               	movlw	44
 21052  01AB3C  0101               	movlb	1	; () banked
 21053  01AB3E  5D3E               	subwf	_VFD_Run_Time_Counter& (0+255),w,b
 21054  01AB40  0E01               	movlw	1
 21055  01AB42  0101               	movlb	1	; () banked
 21056  01AB44  593F               	subwfb	(_VFD_Run_Time_Counter+1)& (0+255),w,b
 21057  01AB46  B0D8               	btfsc	status,0,c
 21058  01AB48  0012               	return	
 21059                           
 21060                           ; BSR set to: 1
 21061                           ;ERROR_HANDLING.c: 623: {
 21062                           ;ERROR_HANDLING.c: 624: VFD__Run_Time_Error = 0;
 21063  01AB4A  0E00               	movlw	0
 21064  01AB4C  0101               	movlb	1	; () banked
 21065  01AB4E  6F98               	movwf	_VFD__Run_Time_Error& (0+255),b
 21066                           
 21067                           ; BSR set to: 1
 21068  01AB50  0012               	return	
 21069  01AB52                     __end_of_VFD_Run_Time_Error:
 21070                           	opt stack 0
 21071                           tblptru	equ	0xFF8
 21072                           tblptrh	equ	0xFF7
 21073                           tblptrl	equ	0xFF6
 21074                           tablat	equ	0xFF5
 21075                           prodh	equ	0xFF4
 21076                           prodl	equ	0xFF3
 21077                           intcon	equ	0xFF2
 21078                           postinc0	equ	0xFEE
 21079                           wreg	equ	0xFE8
 21080                           postdec1	equ	0xFE5
 21081                           fsr1h	equ	0xFE2
 21082                           fsr1l	equ	0xFE1
 21083                           indf2	equ	0xFDF
 21084                           postinc2	equ	0xFDE
 21085                           postdec2	equ	0xFDD
 21086                           fsr2h	equ	0xFDA
 21087                           fsr2l	equ	0xFD9
 21088                           status	equ	0xFD8
 21089                           
 21090 ;; *************** function _VFD_PS_ON_Function *****************
 21091 ;; Defined at:
 21092 ;;		line 114 in file "RAMP_UP.c"
 21093 ;; Parameters:    Size  Location     Type
 21094 ;;		None
 21095 ;; Auto vars:     Size  Location     Type
 21096 ;;		None
 21097 ;; Return value:  Size  Location     Type
 21098 ;;                  1    wreg      void 
 21099 ;; Registers used:
 21100 ;;		wreg, status,2, status,0
 21101 ;; Tracked objects:
 21102 ;;		On entry : 0/0
 21103 ;;		On exit  : 0/0
 21104 ;;		Unchanged: 0/0
 21105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21110 ;;Total ram usage:        0 bytes
 21111 ;; Hardware stack levels used:    1
 21112 ;; Hardware stack levels required when called:    3
 21113 ;; This function calls:
 21114 ;;		Nothing
 21115 ;; This function is called by:
 21116 ;;		_Error_Checking_One_Second
 21117 ;; This function uses a non-reentrant model
 21118 ;;
 21119                           
 21120                           	psect	text56
 21121  01A624                     __ptext56:
 21122                           	opt stack 0
 21123  01A624                     _VFD_PS_ON_Function:
 21124                           	opt stack 25
 21125                           
 21126                           ;RAMP_UP.c: 116: if( (Initial_Delay_Second >= ((120) - 20)) && (Turbine_state == STARTUP
      +                          _STATE) )
 21127                           
 21128                           ; BSR set to: 1
 21129                           ;incstack = 0
 21130  01A624  0101               	movlb	1	; () banked
 21131  01A626  512B               	movf	(_Initial_Delay_Second+1)& (0+255),w,b
 21132  01A628  E105               	bnz	u15370
 21133  01A62A  0E64               	movlw	100
 21134  01A62C  0101               	movlb	1	; () banked
 21135  01A62E  5D2A               	subwf	_Initial_Delay_Second& (0+255),w,b
 21136  01A630  A0D8               	btfss	status,0,c
 21137  01A632  D007               	goto	l21085
 21138  01A634                     u15370:
 21139                           
 21140                           ; BSR set to: 1
 21141  01A634  0100               	movlb	0	; () banked
 21142  01A636  51F0               	movf	_Turbine_state& (0+255),w,b
 21143  01A638  A4D8               	btfss	status,2,c
 21144  01A63A  D003               	goto	l21085
 21145                           
 21146                           ; BSR set to: 0
 21147                           ;RAMP_UP.c: 117: {
 21148                           ;RAMP_UP.c: 118: (RB4 = 1); VFD_ON_Flag = 1;
 21149  01A63C  8881               	bsf	3969,4,c	;volatile
 21150                           
 21151                           ; BSR set to: 0
 21152  01A63E  0E01               	movlw	1
 21153  01A640  D016               	goto	L12
 21154  01A642                     l21085:
 21155                           
 21156                           ;RAMP_UP.c: 120: else if( (Initial_Delay_Second < ((120) - 20)) && (Turbine_state == STA
      +                          RTUP_STATE) && (VFD_Bus_Voltage < 50) )
 21157  01A642  0101               	movlb	1	; () banked
 21158  01A644  512B               	movf	(_Initial_Delay_Second+1)& (0+255),w,b
 21159  01A646  E115               	bnz	l21095
 21160  01A648  0E64               	movlw	100
 21161  01A64A  0101               	movlb	1	; () banked
 21162  01A64C  5D2A               	subwf	_Initial_Delay_Second& (0+255),w,b
 21163  01A64E  B0D8               	btfsc	status,0,c
 21164  01A650  D010               	goto	l21095
 21165                           
 21166                           ; BSR set to: 1
 21167  01A652  0100               	movlb	0	; () banked
 21168  01A654  51F0               	movf	_Turbine_state& (0+255),w,b
 21169  01A656  A4D8               	btfss	status,2,c
 21170  01A658  D00C               	goto	l21095
 21171                           
 21172                           ; BSR set to: 0
 21173  01A65A  0101               	movlb	1	; () banked
 21174  01A65C  513D               	movf	(_VFD_Bus_Voltage+1)& (0+255),w,b
 21175  01A65E  E109               	bnz	l21095
 21176  01A660  0E32               	movlw	50
 21177  01A662  0101               	movlb	1	; () banked
 21178  01A664  5D3C               	subwf	_VFD_Bus_Voltage& (0+255),w,b
 21179  01A666  B0D8               	btfsc	status,0,c
 21180  01A668  D004               	goto	l21095
 21181                           
 21182                           ; BSR set to: 1
 21183                           ;RAMP_UP.c: 121: {
 21184                           ;RAMP_UP.c: 122: (RB4 = 0); VFD_ON_Flag = 0;
 21185  01A66A  9881               	bcf	3969,4,c	;volatile
 21186                           
 21187                           ; BSR set to: 1
 21188  01A66C  0E00               	movlw	0
 21189  01A66E                     L12:
 21190  01A66E  0101               	movlb	1	; () banked
 21191  01A670  6F95               	movwf	_VFD_ON_Flag& (0+255),b
 21192  01A672                     l21095:
 21193                           
 21194                           ;RAMP_UP.c: 123: }
 21195                           ;RAMP_UP.c: 125: if( (VFD_Bus_Voltage < 50) && (Turbine_state == RUNNING_STATE) )
 21196  01A672  0101               	movlb	1	; () banked
 21197  01A674  513D               	movf	(_VFD_Bus_Voltage+1)& (0+255),w,b
 21198  01A676  E10F               	bnz	l7013
 21199  01A678  0E32               	movlw	50
 21200  01A67A  0101               	movlb	1	; () banked
 21201  01A67C  5D3C               	subwf	_VFD_Bus_Voltage& (0+255),w,b
 21202  01A67E  B0D8               	btfsc	status,0,c
 21203  01A680  0012               	return	
 21204                           
 21205                           ; BSR set to: 1
 21206  01A682  0E02               	movlw	2
 21207  01A684  0100               	movlb	0	; () banked
 21208  01A686  19F0               	xorwf	_Turbine_state& (0+255),w,b
 21209  01A688  A4D8               	btfss	status,2,c
 21210  01A68A  0012               	return	
 21211                           
 21212                           ; BSR set to: 0
 21213                           ;RAMP_UP.c: 126: {
 21214                           ;RAMP_UP.c: 127: (RB4 = 0); VFD_ON_Flag = 0;
 21215  01A68C  9881               	bcf	3969,4,c	;volatile
 21216                           
 21217                           ; BSR set to: 0
 21218  01A68E  0E00               	movlw	0
 21219  01A690  0101               	movlb	1	; () banked
 21220  01A692  6F95               	movwf	_VFD_ON_Flag& (0+255),b
 21221  01A694  0012               	return	
 21222  01A696                     l7013:
 21223  01A696  0012               	return		;funcret
 21224  01A698                     __end_of_VFD_PS_ON_Function:
 21225                           	opt stack 0
 21226                           tblptru	equ	0xFF8
 21227                           tblptrh	equ	0xFF7
 21228                           tblptrl	equ	0xFF6
 21229                           tablat	equ	0xFF5
 21230                           prodh	equ	0xFF4
 21231                           prodl	equ	0xFF3
 21232                           intcon	equ	0xFF2
 21233                           postinc0	equ	0xFEE
 21234                           wreg	equ	0xFE8
 21235                           postdec1	equ	0xFE5
 21236                           fsr1h	equ	0xFE2
 21237                           fsr1l	equ	0xFE1
 21238                           indf2	equ	0xFDF
 21239                           postinc2	equ	0xFDE
 21240                           postdec2	equ	0xFDD
 21241                           fsr2h	equ	0xFDA
 21242                           fsr2l	equ	0xFD9
 21243                           status	equ	0xFD8
 21244                           
 21245 ;; *************** function _Turbine_Under_speed *****************
 21246 ;; Defined at:
 21247 ;;		line 337 in file "ERROR_HANDLING.c"
 21248 ;; Parameters:    Size  Location     Type
 21249 ;;		None
 21250 ;; Auto vars:     Size  Location     Type
 21251 ;;		None
 21252 ;; Return value:  Size  Location     Type
 21253 ;;                  1    wreg      void 
 21254 ;; Registers used:
 21255 ;;		wreg, status,2, status,0, cstack
 21256 ;; Tracked objects:
 21257 ;;		On entry : 0/0
 21258 ;;		On exit  : 0/0
 21259 ;;		Unchanged: 0/0
 21260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21265 ;;Total ram usage:        0 bytes
 21266 ;; Hardware stack levels used:    1
 21267 ;; Hardware stack levels required when called:    4
 21268 ;; This function calls:
 21269 ;;		___ftge
 21270 ;; This function is called by:
 21271 ;;		_Error_Checking_One_Second
 21272 ;; This function uses a non-reentrant model
 21273 ;;
 21274                           
 21275                           	psect	text57
 21276  01A8AA                     __ptext57:
 21277                           	opt stack 0
 21278  01A8AA                     _Turbine_Under_speed:
 21279                           	opt stack 24
 21280                           
 21281                           ;ERROR_HANDLING.c: 339: if(Turbine_RPM < (47))
 21282                           
 21283                           ;incstack = 0
 21284  01A8AA  C00A  F099         	movff	_Turbine_RPM,___ftge@ff1
 21285  01A8AE  C00B  F09A         	movff	_Turbine_RPM+1,___ftge@ff1+1
 21286  01A8B2  C00C  F09B         	movff	_Turbine_RPM+2,___ftge@ff1+2
 21287  01A8B6  0E00               	movlw	0
 21288  01A8B8  0100               	movlb	0	; () banked
 21289  01A8BA  6F9C               	movwf	___ftge@ff2& (0+255),b
 21290  01A8BC  0E3C               	movlw	60
 21291  01A8BE  0100               	movlb	0	; () banked
 21292  01A8C0  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 21293  01A8C2  0E42               	movlw	66
 21294  01A8C4  0100               	movlb	0	; () banked
 21295  01A8C6  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 21296  01A8C8  ECEB  F0CA         	call	___ftge	;wreg free
 21297  01A8CC  0100               	movlb	0	; () banked
 21298  01A8CE  B0D8               	btfsc	status,0,c
 21299  01A8D0  D013               	goto	l21311
 21300                           
 21301                           ; BSR set to: 0
 21302                           ;ERROR_HANDLING.c: 340: {
 21303                           ;ERROR_HANDLING.c: 341: TRPM_Under_Speed_Counter++;
 21304  01A8D2  0101               	movlb	1	; () banked
 21305  01A8D4  2B80               	incf	_TRPM_Under_Speed_Counter& (0+255),f,b
 21306                           
 21307                           ; BSR set to: 1
 21308                           ;ERROR_HANDLING.c: 342: if(TRPM_Under_Speed_Counter >= 10)
 21309  01A8D6  0E09               	movlw	9
 21310  01A8D8  0101               	movlb	1	; () banked
 21311  01A8DA  6580               	cpfsgt	_TRPM_Under_Speed_Counter& (0+255),b
 21312  01A8DC  D009               	goto	l21309
 21313                           
 21314                           ; BSR set to: 1
 21315                           ;ERROR_HANDLING.c: 343: {
 21316                           ;ERROR_HANDLING.c: 344: TRPM_Under_Speed_Counter = 0;
 21317  01A8DE  0E00               	movlw	0
 21318  01A8E0  0101               	movlb	1	; () banked
 21319  01A8E2  6F80               	movwf	_TRPM_Under_Speed_Counter& (0+255),b
 21320                           
 21321                           ;ERROR_HANDLING.c: 345: Turbine_Under_Speed_Flag = 1;
 21322  01A8E4  0E01               	movlw	1
 21323  01A8E6  0101               	movlb	1	; () banked
 21324  01A8E8  6F8B               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 21325                           
 21326                           ;ERROR_HANDLING.c: 346: Errors = TURBINE_US_OS;
 21327  01A8EA  0E0A               	movlw	10
 21328  01A8EC  6E1B               	movwf	_Errors,c
 21329                           
 21330                           ;ERROR_HANDLING.c: 347: }
 21331  01A8EE  0012               	return	
 21332  01A8F0                     l21309:
 21333                           
 21334                           ; BSR set to: 1
 21335                           ;ERROR_HANDLING.c: 348: else
 21336                           ;ERROR_HANDLING.c: 349: {
 21337                           ;ERROR_HANDLING.c: 350: Turbine_Under_Speed_Flag = 0;
 21338  01A8F0  0E00               	movlw	0
 21339  01A8F2  0101               	movlb	1	; () banked
 21340  01A8F4  6F8B               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 21341                           
 21342                           ; BSR set to: 1
 21343                           ;ERROR_HANDLING.c: 351: }
 21344                           ;ERROR_HANDLING.c: 352: }
 21345  01A8F6  0012               	return	
 21346  01A8F8                     l21311:
 21347                           
 21348                           ;ERROR_HANDLING.c: 353: else
 21349                           ;ERROR_HANDLING.c: 354: {
 21350                           ;ERROR_HANDLING.c: 355: TRPM_Under_Speed_Counter = 0;
 21351  01A8F8  0E00               	movlw	0
 21352  01A8FA  0101               	movlb	1	; () banked
 21353  01A8FC  6F80               	movwf	_TRPM_Under_Speed_Counter& (0+255),b
 21354                           
 21355                           ;ERROR_HANDLING.c: 356: Turbine_Under_Speed_Flag = 0;
 21356  01A8FE  0E00               	movlw	0
 21357  01A900  0101               	movlb	1	; () banked
 21358  01A902  6F8B               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 21359  01A904  0012               	return	
 21360  01A906                     __end_of_Turbine_Under_speed:
 21361                           	opt stack 0
 21362                           tblptru	equ	0xFF8
 21363                           tblptrh	equ	0xFF7
 21364                           tblptrl	equ	0xFF6
 21365                           tablat	equ	0xFF5
 21366                           prodh	equ	0xFF4
 21367                           prodl	equ	0xFF3
 21368                           intcon	equ	0xFF2
 21369                           postinc0	equ	0xFEE
 21370                           wreg	equ	0xFE8
 21371                           postdec1	equ	0xFE5
 21372                           fsr1h	equ	0xFE2
 21373                           fsr1l	equ	0xFE1
 21374                           indf2	equ	0xFDF
 21375                           postinc2	equ	0xFDE
 21376                           postdec2	equ	0xFDD
 21377                           fsr2h	equ	0xFDA
 21378                           fsr2l	equ	0xFD9
 21379                           status	equ	0xFD8
 21380                           
 21381 ;; *************** function _Turbine_Restore_Check *****************
 21382 ;; Defined at:
 21383 ;;		line 153 in file "ERROR_HANDLING.c"
 21384 ;; Parameters:    Size  Location     Type
 21385 ;;		None
 21386 ;; Auto vars:     Size  Location     Type
 21387 ;;		None
 21388 ;; Return value:  Size  Location     Type
 21389 ;;                  1    wreg      void 
 21390 ;; Registers used:
 21391 ;;		wreg, status,2, status,0, cstack
 21392 ;; Tracked objects:
 21393 ;;		On entry : 0/0
 21394 ;;		On exit  : 0/0
 21395 ;;		Unchanged: 0/0
 21396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21401 ;;Total ram usage:        0 bytes
 21402 ;; Hardware stack levels used:    1
 21403 ;; Hardware stack levels required when called:    4
 21404 ;; This function calls:
 21405 ;;		___ftge
 21406 ;; This function is called by:
 21407 ;;		_Error_Checking_One_Second
 21408 ;; This function uses a non-reentrant model
 21409 ;;
 21410                           
 21411                           	psect	text58
 21412  019C78                     __ptext58:
 21413                           	opt stack 0
 21414  019C78                     _Turbine_Restore_Check:
 21415                           	opt stack 24
 21416                           
 21417                           ;ERROR_HANDLING.c: 155: if(Turbine_RPM > 5 || Generator_RPM_FLT > 100)
 21418                           
 21419                           ; BSR set to: 1
 21420                           ;incstack = 0
 21421  019C78  0E00               	movlw	0
 21422  019C7A  0100               	movlb	0	; () banked
 21423  019C7C  6F99               	movwf	___ftge@ff1& (0+255),b
 21424  019C7E  0EA0               	movlw	160
 21425  019C80  0100               	movlb	0	; () banked
 21426  019C82  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21427  019C84  0E40               	movlw	64
 21428  019C86  0100               	movlb	0	; () banked
 21429  019C88  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21430  019C8A  C00A  F09C         	movff	_Turbine_RPM,___ftge@ff2
 21431  019C8E  C00B  F09D         	movff	_Turbine_RPM+1,___ftge@ff2+1
 21432  019C92  C00C  F09E         	movff	_Turbine_RPM+2,___ftge@ff2+2
 21433  019C96  ECEB  F0CA         	call	___ftge	;wreg free
 21434  019C9A  0100               	movlb	0	; () banked
 21435  019C9C  A0D8               	btfss	status,0,c
 21436  019C9E  D014               	goto	l21249
 21437                           
 21438                           ; BSR set to: 0
 21439  019CA0  0E00               	movlw	0
 21440  019CA2  0100               	movlb	0	; () banked
 21441  019CA4  6F99               	movwf	___ftge@ff1& (0+255),b
 21442  019CA6  0EC8               	movlw	200
 21443  019CA8  0100               	movlb	0	; () banked
 21444  019CAA  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21445  019CAC  0E42               	movlw	66
 21446  019CAE  0100               	movlb	0	; () banked
 21447  019CB0  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21448  019CB2  C004  F09C         	movff	_Generator_RPM_FLT,___ftge@ff2
 21449  019CB6  C005  F09D         	movff	_Generator_RPM_FLT+1,___ftge@ff2+1
 21450  019CBA  C006  F09E         	movff	_Generator_RPM_FLT+2,___ftge@ff2+2
 21451  019CBE  ECEB  F0CA         	call	___ftge	;wreg free
 21452  019CC2  0100               	movlb	0	; () banked
 21453  019CC4  B0D8               	btfsc	status,0,c
 21454  019CC6  D005               	goto	l21251
 21455  019CC8                     l21249:
 21456                           
 21457                           ; BSR set to: 0
 21458                           ;ERROR_HANDLING.c: 156: {
 21459                           ;ERROR_HANDLING.c: 157: Turbine_Restore_Error = 1;
 21460  019CC8  0E01               	movlw	1
 21461  019CCA  0101               	movlb	1	; () banked
 21462  019CCC  6F8A               	movwf	_Turbine_Restore_Error& (0+255),b
 21463                           
 21464                           ;ERROR_HANDLING.c: 158: Errors = TURBINE_NR;
 21465  019CCE  0E17               	movlw	23
 21466  019CD0  6E1B               	movwf	_Errors,c
 21467  019CD2                     l21251:
 21468                           
 21469                           ;ERROR_HANDLING.c: 159: }
 21470                           ;ERROR_HANDLING.c: 160: if(Turbine_RPM <= 5 && Generator_RPM_FLT <= 100)
 21471  019CD2  0E00               	movlw	0
 21472  019CD4  0100               	movlb	0	; () banked
 21473  019CD6  6F99               	movwf	___ftge@ff1& (0+255),b
 21474  019CD8  0EA0               	movlw	160
 21475  019CDA  0100               	movlb	0	; () banked
 21476  019CDC  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21477  019CDE  0E40               	movlw	64
 21478  019CE0  0100               	movlb	0	; () banked
 21479  019CE2  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21480  019CE4  C00A  F09C         	movff	_Turbine_RPM,___ftge@ff2
 21481  019CE8  C00B  F09D         	movff	_Turbine_RPM+1,___ftge@ff2+1
 21482  019CEC  C00C  F09E         	movff	_Turbine_RPM+2,___ftge@ff2+2
 21483  019CF0  ECEB  F0CA         	call	___ftge	;wreg free
 21484  019CF4  0100               	movlb	0	; () banked
 21485  019CF6  A0D8               	btfss	status,0,c
 21486  019CF8  0012               	return	
 21487                           
 21488                           ; BSR set to: 0
 21489  019CFA  0E00               	movlw	0
 21490  019CFC  0100               	movlb	0	; () banked
 21491  019CFE  6F99               	movwf	___ftge@ff1& (0+255),b
 21492  019D00  0EC8               	movlw	200
 21493  019D02  0100               	movlb	0	; () banked
 21494  019D04  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21495  019D06  0E42               	movlw	66
 21496  019D08  0100               	movlb	0	; () banked
 21497  019D0A  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21498  019D0C  C004  F09C         	movff	_Generator_RPM_FLT,___ftge@ff2
 21499  019D10  C005  F09D         	movff	_Generator_RPM_FLT+1,___ftge@ff2+1
 21500  019D14  C006  F09E         	movff	_Generator_RPM_FLT+2,___ftge@ff2+2
 21501  019D18  ECEB  F0CA         	call	___ftge	;wreg free
 21502  019D1C  0100               	movlb	0	; () banked
 21503  019D1E  A0D8               	btfss	status,0,c
 21504  019D20  0012               	return	
 21505                           
 21506                           ; BSR set to: 0
 21507                           ;ERROR_HANDLING.c: 161: {
 21508                           ;ERROR_HANDLING.c: 162: Turbine_Restore_Error = 0;
 21509  019D22  0E00               	movlw	0
 21510  019D24  0101               	movlb	1	; () banked
 21511  019D26  6F8A               	movwf	_Turbine_Restore_Error& (0+255),b
 21512  019D28  0012               	return	
 21513  019D2A                     __end_of_Turbine_Restore_Check:
 21514                           	opt stack 0
 21515                           tblptru	equ	0xFF8
 21516                           tblptrh	equ	0xFF7
 21517                           tblptrl	equ	0xFF6
 21518                           tablat	equ	0xFF5
 21519                           prodh	equ	0xFF4
 21520                           prodl	equ	0xFF3
 21521                           intcon	equ	0xFF2
 21522                           postinc0	equ	0xFEE
 21523                           wreg	equ	0xFE8
 21524                           postdec1	equ	0xFE5
 21525                           fsr1h	equ	0xFE2
 21526                           fsr1l	equ	0xFE1
 21527                           indf2	equ	0xFDF
 21528                           postinc2	equ	0xFDE
 21529                           postdec2	equ	0xFDD
 21530                           fsr2h	equ	0xFDA
 21531                           fsr2l	equ	0xFD9
 21532                           status	equ	0xFD8
 21533                           
 21534 ;; *************** function _Turbine_Over_Speed *****************
 21535 ;; Defined at:
 21536 ;;		line 318 in file "ERROR_HANDLING.c"
 21537 ;; Parameters:    Size  Location     Type
 21538 ;;		None
 21539 ;; Auto vars:     Size  Location     Type
 21540 ;;		None
 21541 ;; Return value:  Size  Location     Type
 21542 ;;                  1    wreg      void 
 21543 ;; Registers used:
 21544 ;;		wreg, status,2, status,0, cstack
 21545 ;; Tracked objects:
 21546 ;;		On entry : 0/0
 21547 ;;		On exit  : 0/0
 21548 ;;		Unchanged: 0/0
 21549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21554 ;;Total ram usage:        0 bytes
 21555 ;; Hardware stack levels used:    1
 21556 ;; Hardware stack levels required when called:    4
 21557 ;; This function calls:
 21558 ;;		___ftge
 21559 ;; This function is called by:
 21560 ;;		_Error_Checking_One_Second
 21561 ;; This function uses a non-reentrant model
 21562 ;;
 21563                           
 21564                           	psect	text59
 21565  01AA1A                     __ptext59:
 21566                           	opt stack 0
 21567  01AA1A                     _Turbine_Over_Speed:
 21568                           	opt stack 24
 21569                           
 21570                           ;ERROR_HANDLING.c: 320: if(Turbine_RPM >= (63))
 21571                           
 21572                           ;incstack = 0
 21573  01AA1A  C00A  F099         	movff	_Turbine_RPM,___ftge@ff1
 21574  01AA1E  C00B  F09A         	movff	_Turbine_RPM+1,___ftge@ff1+1
 21575  01AA22  C00C  F09B         	movff	_Turbine_RPM+2,___ftge@ff1+2
 21576  01AA26  0E00               	movlw	0
 21577  01AA28  0100               	movlb	0	; () banked
 21578  01AA2A  6F9C               	movwf	___ftge@ff2& (0+255),b
 21579  01AA2C  0E7C               	movlw	124
 21580  01AA2E  0100               	movlb	0	; () banked
 21581  01AA30  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 21582  01AA32  0E42               	movlw	66
 21583  01AA34  0100               	movlb	0	; () banked
 21584  01AA36  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 21585  01AA38  ECEB  F0CA         	call	___ftge	;wreg free
 21586  01AA3C  0100               	movlb	0	; () banked
 21587  01AA3E  A0D8               	btfss	status,0,c
 21588  01AA40  D00F               	goto	l21383
 21589                           
 21590                           ; BSR set to: 0
 21591                           ;ERROR_HANDLING.c: 321: {
 21592                           ;ERROR_HANDLING.c: 322: TRPM_OverSpeed_Counter++;
 21593  01AA42  0101               	movlb	1	; () banked
 21594  01AA44  2B7F               	incf	_TRPM_OverSpeed_Counter& (0+255),f,b
 21595                           
 21596                           ; BSR set to: 1
 21597                           ;ERROR_HANDLING.c: 323: if(TRPM_OverSpeed_Counter >= 2)
 21598  01AA46  0E01               	movlw	1
 21599  01AA48  0101               	movlb	1	; () banked
 21600  01AA4A  657F               	cpfsgt	_TRPM_OverSpeed_Counter& (0+255),b
 21601  01AA4C  0012               	return	
 21602                           
 21603                           ; BSR set to: 1
 21604                           ;ERROR_HANDLING.c: 324: {
 21605                           ;ERROR_HANDLING.c: 325: TRPM_OverSpeed_Counter = 0;
 21606  01AA4E  0E00               	movlw	0
 21607  01AA50  0101               	movlb	1	; () banked
 21608  01AA52  6F7F               	movwf	_TRPM_OverSpeed_Counter& (0+255),b
 21609                           
 21610                           ;ERROR_HANDLING.c: 326: Turbine_Over_Speed_Flag = 1;
 21611  01AA54  0E01               	movlw	1
 21612  01AA56  0100               	movlb	0	; () banked
 21613  01AA58  6FEF               	movwf	_Turbine_Over_Speed_Flag& (0+255),b
 21614                           
 21615                           ;ERROR_HANDLING.c: 327: Errors = TURBINE_US_OS;
 21616  01AA5A  0E0A               	movlw	10
 21617  01AA5C  6E1B               	movwf	_Errors,c
 21618                           
 21619                           ; BSR set to: 0
 21620                           ;ERROR_HANDLING.c: 328: }
 21621                           ;ERROR_HANDLING.c: 330: }
 21622  01AA5E  0012               	return	
 21623  01AA60                     l21383:
 21624                           
 21625                           ; BSR set to: 0
 21626                           ;ERROR_HANDLING.c: 331: else
 21627                           ;ERROR_HANDLING.c: 332: {
 21628                           ;ERROR_HANDLING.c: 333: Turbine_Over_Speed_Flag = 0;
 21629  01AA60  0E00               	movlw	0
 21630  01AA62  0100               	movlb	0	; () banked
 21631  01AA64  6FEF               	movwf	_Turbine_Over_Speed_Flag& (0+255),b
 21632                           
 21633                           ;ERROR_HANDLING.c: 334: TRPM_OverSpeed_Counter = 0;
 21634  01AA66  0E00               	movlw	0
 21635  01AA68  0101               	movlb	1	; () banked
 21636  01AA6A  6F7F               	movwf	_TRPM_OverSpeed_Counter& (0+255),b
 21637  01AA6C  0012               	return	
 21638  01AA6E                     __end_of_Turbine_Over_Speed:
 21639                           	opt stack 0
 21640                           tblptru	equ	0xFF8
 21641                           tblptrh	equ	0xFF7
 21642                           tblptrl	equ	0xFF6
 21643                           tablat	equ	0xFF5
 21644                           prodh	equ	0xFF4
 21645                           prodl	equ	0xFF3
 21646                           intcon	equ	0xFF2
 21647                           postinc0	equ	0xFEE
 21648                           wreg	equ	0xFE8
 21649                           postdec1	equ	0xFE5
 21650                           fsr1h	equ	0xFE2
 21651                           fsr1l	equ	0xFE1
 21652                           indf2	equ	0xFDF
 21653                           postinc2	equ	0xFDE
 21654                           postdec2	equ	0xFDD
 21655                           fsr2h	equ	0xFDA
 21656                           fsr2l	equ	0xFD9
 21657                           status	equ	0xFD8
 21658                           
 21659 ;; *************** function _Turbine_OverLoaded_Error *****************
 21660 ;; Defined at:
 21661 ;;		line 481 in file "ERROR_HANDLING.c"
 21662 ;; Parameters:    Size  Location     Type
 21663 ;;		None
 21664 ;; Auto vars:     Size  Location     Type
 21665 ;;		None
 21666 ;; Return value:  Size  Location     Type
 21667 ;;                  1    wreg      void 
 21668 ;; Registers used:
 21669 ;;		wreg, status,2, status,0, cstack
 21670 ;; Tracked objects:
 21671 ;;		On entry : 0/0
 21672 ;;		On exit  : 0/0
 21673 ;;		Unchanged: 0/0
 21674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21679 ;;Total ram usage:        0 bytes
 21680 ;; Hardware stack levels used:    1
 21681 ;; Hardware stack levels required when called:    4
 21682 ;; This function calls:
 21683 ;;		___ftge
 21684 ;; This function is called by:
 21685 ;;		_Error_Checking_One_Second
 21686 ;; This function uses a non-reentrant model
 21687 ;;
 21688                           
 21689                           	psect	text60
 21690  01A906                     __ptext60:
 21691                           	opt stack 0
 21692  01A906                     _Turbine_OverLoaded_Error:
 21693                           	opt stack 24
 21694                           
 21695                           ;ERROR_HANDLING.c: 483: if(KW <= (-5.0))
 21696                           
 21697                           ;incstack = 0
 21698  01A906  0E00               	movlw	0
 21699  01A908  0100               	movlb	0	; () banked
 21700  01A90A  6F99               	movwf	___ftge@ff1& (0+255),b
 21701  01A90C  0EA0               	movlw	160
 21702  01A90E  0100               	movlb	0	; () banked
 21703  01A910  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 21704  01A912  0EC0               	movlw	192
 21705  01A914  0100               	movlb	0	; () banked
 21706  01A916  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 21707  01A918  C022  F09C         	movff	_KW,___ftge@ff2
 21708  01A91C  C023  F09D         	movff	_KW+1,___ftge@ff2+1
 21709  01A920  C024  F09E         	movff	_KW+2,___ftge@ff2+2
 21710  01A924  ECEB  F0CA         	call	___ftge	;wreg free
 21711  01A928  0100               	movlb	0	; () banked
 21712  01A92A  A0D8               	btfss	status,0,c
 21713  01A92C  D013               	goto	l21395
 21714                           
 21715                           ; BSR set to: 0
 21716                           ;ERROR_HANDLING.c: 484: {
 21717                           ;ERROR_HANDLING.c: 485: T_Overload_counter++;
 21718  01A92E  0101               	movlb	1	; () banked
 21719  01A930  2B81               	incf	_T_Overload_counter& (0+255),f,b
 21720                           
 21721                           ; BSR set to: 1
 21722                           ;ERROR_HANDLING.c: 486: if(T_Overload_counter >=3 )
 21723  01A932  0E02               	movlw	2
 21724  01A934  0101               	movlb	1	; () banked
 21725  01A936  6581               	cpfsgt	_T_Overload_counter& (0+255),b
 21726  01A938  D009               	goto	l21393
 21727                           
 21728                           ; BSR set to: 1
 21729                           ;ERROR_HANDLING.c: 487: {
 21730                           ;ERROR_HANDLING.c: 488: T_Overload_counter = 0;
 21731  01A93A  0E00               	movlw	0
 21732  01A93C  0101               	movlb	1	; () banked
 21733  01A93E  6F81               	movwf	_T_Overload_counter& (0+255),b
 21734                           
 21735                           ;ERROR_HANDLING.c: 489: Tur_OverLoaded_Error = 1;
 21736  01A940  0E01               	movlw	1
 21737  01A942  0101               	movlb	1	; () banked
 21738  01A944  6F89               	movwf	_Tur_OverLoaded_Error& (0+255),b
 21739                           
 21740                           ;ERROR_HANDLING.c: 490: Errors = TURBINE_OL;
 21741  01A946  0E12               	movlw	18
 21742  01A948  6E1B               	movwf	_Errors,c
 21743                           
 21744                           ;ERROR_HANDLING.c: 491: }
 21745  01A94A  0012               	return	
 21746  01A94C                     l21393:
 21747                           
 21748                           ; BSR set to: 1
 21749                           ;ERROR_HANDLING.c: 492: else
 21750                           ;ERROR_HANDLING.c: 493: {
 21751                           ;ERROR_HANDLING.c: 494: Tur_OverLoaded_Error = 0;
 21752  01A94C  0E00               	movlw	0
 21753  01A94E  0101               	movlb	1	; () banked
 21754  01A950  6F89               	movwf	_Tur_OverLoaded_Error& (0+255),b
 21755                           
 21756                           ; BSR set to: 1
 21757                           ;ERROR_HANDLING.c: 495: }
 21758                           ;ERROR_HANDLING.c: 496: }
 21759  01A952  0012               	return	
 21760  01A954                     l21395:
 21761                           
 21762                           ;ERROR_HANDLING.c: 497: else
 21763                           ;ERROR_HANDLING.c: 498: {
 21764                           ;ERROR_HANDLING.c: 499: Tur_OverLoaded_Error = 0;
 21765  01A954  0E00               	movlw	0
 21766  01A956  0101               	movlb	1	; () banked
 21767  01A958  6F89               	movwf	_Tur_OverLoaded_Error& (0+255),b
 21768                           
 21769                           ;ERROR_HANDLING.c: 500: T_Overload_counter = 0;
 21770  01A95A  0E00               	movlw	0
 21771  01A95C  0101               	movlb	1	; () banked
 21772  01A95E  6F81               	movwf	_T_Overload_counter& (0+255),b
 21773  01A960  0012               	return	
 21774  01A962                     __end_of_Turbine_OverLoaded_Error:
 21775                           	opt stack 0
 21776                           tblptru	equ	0xFF8
 21777                           tblptrh	equ	0xFF7
 21778                           tblptrl	equ	0xFF6
 21779                           tablat	equ	0xFF5
 21780                           prodh	equ	0xFF4
 21781                           prodl	equ	0xFF3
 21782                           intcon	equ	0xFF2
 21783                           postinc0	equ	0xFEE
 21784                           wreg	equ	0xFE8
 21785                           postdec1	equ	0xFE5
 21786                           fsr1h	equ	0xFE2
 21787                           fsr1l	equ	0xFE1
 21788                           indf2	equ	0xFDF
 21789                           postinc2	equ	0xFDE
 21790                           postdec2	equ	0xFDD
 21791                           fsr2h	equ	0xFDA
 21792                           fsr2l	equ	0xFD9
 21793                           status	equ	0xFD8
 21794                           
 21795 ;; *************** function _Start_Stop *****************
 21796 ;; Defined at:
 21797 ;;		line 679 in file "ERROR_HANDLING.c"
 21798 ;; Parameters:    Size  Location     Type
 21799 ;;		None
 21800 ;; Auto vars:     Size  Location     Type
 21801 ;;		None
 21802 ;; Return value:  Size  Location     Type
 21803 ;;                  1    wreg      void 
 21804 ;; Registers used:
 21805 ;;		wreg, status,2, status,0, cstack
 21806 ;; Tracked objects:
 21807 ;;		On entry : 0/0
 21808 ;;		On exit  : 0/0
 21809 ;;		Unchanged: 0/0
 21810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21815 ;;Total ram usage:        0 bytes
 21816 ;; Hardware stack levels used:    1
 21817 ;; Hardware stack levels required when called:    4
 21818 ;; This function calls:
 21819 ;;		_int_eeprom_write
 21820 ;; This function is called by:
 21821 ;;		_Stopping_state_function
 21822 ;;		_Error_Checking_One_Second
 21823 ;; This function uses a non-reentrant model
 21824 ;;
 21825                           
 21826                           	psect	text61
 21827  0198DE                     __ptext61:
 21828                           	opt stack 0
 21829  0198DE                     _Start_Stop:
 21830                           	opt stack 24
 21831                           
 21832                           ;ERROR_HANDLING.c: 681: if(RE1 == 1)
 21833                           
 21834                           ; BSR set to: 1
 21835                           ;incstack = 0
 21836  0198DE  A284               	btfss	3972,1,c	;volatile
 21837  0198E0  D00C               	goto	l20511
 21838                           
 21839                           ;ERROR_HANDLING.c: 682: {
 21840                           ;ERROR_HANDLING.c: 683: Key_Counter++;
 21841  0198E2  0101               	movlb	1	; () banked
 21842  0198E4  2B6C               	incf	_Key_Counter& (0+255),f,b
 21843                           
 21844                           ; BSR set to: 1
 21845                           ;ERROR_HANDLING.c: 684: if(Key_Counter >= 3)
 21846  0198E6  0E02               	movlw	2
 21847  0198E8  0101               	movlb	1	; () banked
 21848  0198EA  656C               	cpfsgt	_Key_Counter& (0+255),b
 21849  0198EC  D006               	goto	l20511
 21850                           
 21851                           ; BSR set to: 1
 21852                           ;ERROR_HANDLING.c: 685: {
 21853                           ;ERROR_HANDLING.c: 686: Key_Flag = 1;
 21854  0198EE  0E01               	movlw	1
 21855  0198F0  0101               	movlb	1	; () banked
 21856  0198F2  6F6D               	movwf	_Key_Flag& (0+255),b
 21857                           
 21858                           ;ERROR_HANDLING.c: 687: Key_Counter = 0;
 21859  0198F4  0E00               	movlw	0
 21860  0198F6  0101               	movlb	1	; () banked
 21861  0198F8  6F6C               	movwf	_Key_Counter& (0+255),b
 21862  0198FA                     l20511:
 21863                           
 21864                           ;ERROR_HANDLING.c: 688: }
 21865                           ;ERROR_HANDLING.c: 689: }
 21866                           ;ERROR_HANDLING.c: 690: if(RE1 == 0 && Start_Stop_Flag == 0 && Key_Flag == 1)
 21867  0198FA  B284               	btfsc	3972,1,c	;volatile
 21868  0198FC  D01F               	goto	l6309
 21869  0198FE  501F               	movf	_Start_Stop_Flag,w,c
 21870  019900  A4D8               	btfss	status,2,c
 21871  019902  D01C               	goto	l6309
 21872  019904  0101               	movlb	1	; () banked
 21873  019906  056D               	decf	_Key_Flag& (0+255),w,b
 21874  019908  A4D8               	btfss	status,2,c
 21875  01990A  D018               	goto	l6309
 21876                           
 21877                           ; BSR set to: 1
 21878                           ;ERROR_HANDLING.c: 691: {
 21879                           ;ERROR_HANDLING.c: 692: S_S_Counter++;
 21880  01990C  0101               	movlb	1	; () banked
 21881  01990E  2B7A               	incf	_S_S_Counter& (0+255),f,b
 21882                           
 21883                           ; BSR set to: 1
 21884                           ;ERROR_HANDLING.c: 693: if(S_S_Counter >= 2)
 21885  019910  0E01               	movlw	1
 21886  019912  0101               	movlb	1	; () banked
 21887  019914  657A               	cpfsgt	_S_S_Counter& (0+255),b
 21888  019916  D035               	goto	l20541
 21889                           
 21890                           ; BSR set to: 1
 21891                           ;ERROR_HANDLING.c: 694: {
 21892                           ;ERROR_HANDLING.c: 695: S_S_Counter = 0;
 21893  019918  0E00               	movlw	0
 21894  01991A  0101               	movlb	1	; () banked
 21895  01991C  6F7A               	movwf	_S_S_Counter& (0+255),b
 21896                           
 21897                           ;ERROR_HANDLING.c: 696: Start_Stop_Flag = 1;
 21898  01991E  0E01               	movlw	1
 21899  019920  6E1F               	movwf	_Start_Stop_Flag,c
 21900                           
 21901                           ; BSR set to: 1
 21902                           ;ERROR_HANDLING.c: 697: int_eeprom_write((0x21),1);
 21903  019922  0E00               	movlw	0
 21904  019924  0100               	movlb	0	; () banked
 21905  019926  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 21906  019928  0E21               	movlw	33
 21907  01992A  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 21908  01992C  0E00               	movlw	0
 21909  01992E  0100               	movlb	0	; () banked
 21910  019930  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 21911  019932  0E01               	movlw	1
 21912  019934  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 21913  019936  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 21914  01993A  D020               	goto	l20539
 21915  01993C                     l6309:
 21916                           
 21917                           ;ERROR_HANDLING.c: 702: else if(RE1 == 0 && Start_Stop_Flag == 1 && Key_Flag == 1)
 21918  01993C  B284               	btfsc	3972,1,c	;volatile
 21919  01993E  D021               	goto	l20541
 21920  019940  041F               	decf	_Start_Stop_Flag,w,c
 21921  019942  A4D8               	btfss	status,2,c
 21922  019944  D01E               	goto	l20541
 21923  019946  0101               	movlb	1	; () banked
 21924  019948  056D               	decf	_Key_Flag& (0+255),w,b
 21925  01994A  A4D8               	btfss	status,2,c
 21926  01994C  D01A               	goto	l20541
 21927                           
 21928                           ; BSR set to: 1
 21929                           ;ERROR_HANDLING.c: 703: {
 21930                           ;ERROR_HANDLING.c: 704: S_S_Counter++;
 21931  01994E  0101               	movlb	1	; () banked
 21932  019950  2B7A               	incf	_S_S_Counter& (0+255),f,b
 21933                           
 21934                           ; BSR set to: 1
 21935                           ;ERROR_HANDLING.c: 705: if(S_S_Counter >= 2)
 21936  019952  0E01               	movlw	1
 21937  019954  0101               	movlb	1	; () banked
 21938  019956  657A               	cpfsgt	_S_S_Counter& (0+255),b
 21939  019958  D014               	goto	l20541
 21940                           
 21941                           ; BSR set to: 1
 21942                           ;ERROR_HANDLING.c: 706: {
 21943                           ;ERROR_HANDLING.c: 707: S_S_Counter = 0;
 21944  01995A  0E00               	movlw	0
 21945  01995C  0101               	movlb	1	; () banked
 21946  01995E  6F7A               	movwf	_S_S_Counter& (0+255),b
 21947                           
 21948                           ;ERROR_HANDLING.c: 708: Start_Stop_Flag = 0;
 21949  019960  0E00               	movlw	0
 21950  019962  6E1F               	movwf	_Start_Stop_Flag,c
 21951                           
 21952                           ; BSR set to: 1
 21953                           ;ERROR_HANDLING.c: 709: int_eeprom_write((0x21),0);
 21954  019964  0E00               	movlw	0
 21955  019966  0100               	movlb	0	; () banked
 21956  019968  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 21957  01996A  0E21               	movlw	33
 21958  01996C  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 21959  01996E  0E00               	movlw	0
 21960  019970  0100               	movlb	0	; () banked
 21961  019972  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 21962  019974  0E00               	movlw	0
 21963  019976  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 21964  019978  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 21965  01997C                     l20539:
 21966                           
 21967                           ;ERROR_HANDLING.c: 710: Key_Flag = 0;
 21968  01997C  0E00               	movlw	0
 21969  01997E  0101               	movlb	1	; () banked
 21970  019980  6F6D               	movwf	_Key_Flag& (0+255),b
 21971  019982                     l20541:
 21972                           
 21973                           ;ERROR_HANDLING.c: 711: }
 21974                           ;ERROR_HANDLING.c: 713: }
 21975                           ;ERROR_HANDLING.c: 716: if(Start_Stop_Flag == 1)
 21976  019982  041F               	decf	_Start_Stop_Flag,w,c
 21977  019984  A4D8               	btfss	status,2,c
 21978  019986  D008               	goto	l6314
 21979                           
 21980                           ;ERROR_HANDLING.c: 717: {
 21981                           ;ERROR_HANDLING.c: 718: RE7 = ~RE7;
 21982  019988  BE84               	btfsc	3972,7,c	;volatile
 21983  01998A  D002               	goto	u14590
 21984  01998C  8E84               	bsf	3972,7,c	;volatile
 21985  01998E  D001               	goto	l20545
 21986  019990                     u14590:
 21987  019990  9E84               	bcf	3972,7,c	;volatile
 21988  019992                     l20545:
 21989                           
 21990                           ;ERROR_HANDLING.c: 719: Errors = MANUAL_STOP;
 21991  019992  0E13               	movlw	19
 21992  019994  6E1B               	movwf	_Errors,c
 21993                           
 21994                           ;ERROR_HANDLING.c: 720: }
 21995  019996  0012               	return	
 21996  019998                     l6314:
 21997                           
 21998                           ;ERROR_HANDLING.c: 721: else
 21999                           ;ERROR_HANDLING.c: 722: {
 22000                           ;ERROR_HANDLING.c: 723: RE7 = 1;
 22001  019998  8E84               	bsf	3972,7,c	;volatile
 22002  01999A  0012               	return	
 22003  01999C                     __end_of_Start_Stop:
 22004                           	opt stack 0
 22005                           tblptru	equ	0xFF8
 22006                           tblptrh	equ	0xFF7
 22007                           tblptrl	equ	0xFF6
 22008                           tablat	equ	0xFF5
 22009                           prodh	equ	0xFF4
 22010                           prodl	equ	0xFF3
 22011                           intcon	equ	0xFF2
 22012                           postinc0	equ	0xFEE
 22013                           wreg	equ	0xFE8
 22014                           postdec1	equ	0xFE5
 22015                           fsr1h	equ	0xFE2
 22016                           fsr1l	equ	0xFE1
 22017                           indf2	equ	0xFDF
 22018                           postinc2	equ	0xFDE
 22019                           postdec2	equ	0xFDD
 22020                           fsr2h	equ	0xFDA
 22021                           fsr2l	equ	0xFD9
 22022                           status	equ	0xFD8
 22023                           
 22024 ;; *************** function _Rotor_Slip_Cal *****************
 22025 ;; Defined at:
 22026 ;;		line 17 in file "SLIP_CALCULATIONS.c"
 22027 ;; Parameters:    Size  Location     Type
 22028 ;;		None
 22029 ;; Auto vars:     Size  Location     Type
 22030 ;;		None
 22031 ;; Return value:  Size  Location     Type
 22032 ;;                  1    wreg      void 
 22033 ;; Registers used:
 22034 ;;		wreg, status,2, status,0, cstack
 22035 ;; Tracked objects:
 22036 ;;		On entry : 0/0
 22037 ;;		On exit  : 0/0
 22038 ;;		Unchanged: 0/0
 22039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22044 ;;Total ram usage:        0 bytes
 22045 ;; Hardware stack levels used:    1
 22046 ;; Hardware stack levels required when called:    5
 22047 ;; This function calls:
 22048 ;;		___ftadd
 22049 ;;		___ftdiv
 22050 ;;		___ftmul
 22051 ;;		___ftneg
 22052 ;; This function is called by:
 22053 ;;		_Error_Checking_One_Second
 22054 ;; This function uses a non-reentrant model
 22055 ;;
 22056                           
 22057                           	psect	text62
 22058  019D2A                     __ptext62:
 22059                           	opt stack 0
 22060  019D2A                     _Rotor_Slip_Cal:
 22061                           	opt stack 23
 22062                           
 22063                           ;SLIP_CALCULATIONS.c: 19: Temp = (Generator_RPM_FLT / (17.54));
 22064                           
 22065                           ;incstack = 0
 22066  019D2A  C004  F0A5         	movff	_Generator_RPM_FLT,___ftdiv@f1
 22067  019D2E  C005  F0A6         	movff	_Generator_RPM_FLT+1,___ftdiv@f1+1
 22068  019D32  C006  F0A7         	movff	_Generator_RPM_FLT+2,___ftdiv@f1+2
 22069  019D36  0E52               	movlw	82
 22070  019D38  0100               	movlb	0	; () banked
 22071  019D3A  6FA8               	movwf	___ftdiv@f2& (0+255),b
 22072  019D3C  0E8C               	movlw	140
 22073  019D3E  0100               	movlb	0	; () banked
 22074  019D40  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 22075  019D42  0E41               	movlw	65
 22076  019D44  0100               	movlb	0	; () banked
 22077  019D46  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 22078  019D48  EC53  F0C1         	call	___ftdiv	;wreg free
 22079  019D4C  C0A5  F221         	movff	?___ftdiv,_Temp
 22080  019D50  C0A6  F222         	movff	?___ftdiv+1,_Temp+1
 22081  019D54  C0A7  F223         	movff	?___ftdiv+2,_Temp+2
 22082                           
 22083                           ;SLIP_CALCULATIONS.c: 20: Rotor_slip_1 = (Turbine_RPM - Temp) / Temp;
 22084  019D58  C00A  F090         	movff	_Turbine_RPM,___ftadd@f2
 22085  019D5C  C00B  F091         	movff	_Turbine_RPM+1,___ftadd@f2+1
 22086  019D60  C00C  F092         	movff	_Turbine_RPM+2,___ftadd@f2+2
 22087  019D64  C221  F083         	movff	_Temp,___ftneg@f1
 22088  019D68  C222  F084         	movff	_Temp+1,___ftneg@f1+1
 22089  019D6C  C223  F085         	movff	_Temp+2,___ftneg@f1+2
 22090  019D70  ECBD  F0D6         	call	___ftneg	;wreg free
 22091  019D74  C083  F08D         	movff	?___ftneg,___ftadd@f1
 22092  019D78  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 22093  019D7C  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 22094  019D80  EC69  F0B2         	call	___ftadd	;wreg free
 22095  019D84  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 22096  019D88  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 22097  019D8C  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 22098  019D90  C221  F0A8         	movff	_Temp,___ftdiv@f2
 22099  019D94  C222  F0A9         	movff	_Temp+1,___ftdiv@f2+1
 22100  019D98  C223  F0AA         	movff	_Temp+2,___ftdiv@f2+2
 22101  019D9C  EC53  F0C1         	call	___ftdiv	;wreg free
 22102  019DA0  C0A5  F59D         	movff	?___ftdiv,_Rotor_slip_1
 22103  019DA4  C0A6  F59E         	movff	?___ftdiv+1,_Rotor_slip_1+1
 22104  019DA8  C0A7  F59F         	movff	?___ftdiv+2,_Rotor_slip_1+2
 22105                           
 22106                           ;SLIP_CALCULATIONS.c: 21: Rotor_slip = Rotor_slip_1 * 100;
 22107  019DAC  C59D  F074         	movff	_Rotor_slip_1,___ftmul@f1
 22108  019DB0  C59E  F075         	movff	_Rotor_slip_1+1,___ftmul@f1+1
 22109  019DB4  C59F  F076         	movff	_Rotor_slip_1+2,___ftmul@f1+2
 22110  019DB8  0E00               	movlw	0
 22111  019DBA  0100               	movlb	0	; () banked
 22112  019DBC  6F77               	movwf	___ftmul@f2& (0+255),b
 22113  019DBE  0EC8               	movlw	200
 22114  019DC0  0100               	movlb	0	; () banked
 22115  019DC2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 22116  019DC4  0E42               	movlw	66
 22117  019DC6  0100               	movlb	0	; () banked
 22118  019DC8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 22119  019DCA  ECA4  F0C0         	call	___ftmul	;wreg free
 22120  019DCE  C074  F0D3         	movff	?___ftmul,_Rotor_slip
 22121  019DD2  C075  F0D4         	movff	?___ftmul+1,_Rotor_slip+1
 22122  019DD6  C076  F0D5         	movff	?___ftmul+2,_Rotor_slip+2
 22123  019DDA  0012               	return		;funcret
 22124  019DDC                     __end_of_Rotor_Slip_Cal:
 22125                           	opt stack 0
 22126                           tblptru	equ	0xFF8
 22127                           tblptrh	equ	0xFF7
 22128                           tblptrl	equ	0xFF6
 22129                           tablat	equ	0xFF5
 22130                           prodh	equ	0xFF4
 22131                           prodl	equ	0xFF3
 22132                           intcon	equ	0xFF2
 22133                           postinc0	equ	0xFEE
 22134                           wreg	equ	0xFE8
 22135                           postdec1	equ	0xFE5
 22136                           fsr1h	equ	0xFE2
 22137                           fsr1l	equ	0xFE1
 22138                           indf2	equ	0xFDF
 22139                           postinc2	equ	0xFDE
 22140                           postdec2	equ	0xFDD
 22141                           fsr2h	equ	0xFDA
 22142                           fsr2l	equ	0xFD9
 22143                           status	equ	0xFD8
 22144                           
 22145 ;; *************** function _Ramp_Up_Slip_Error_Trigger *****************
 22146 ;; Defined at:
 22147 ;;		line 52 in file "SLIP_CALCULATIONS.c"
 22148 ;; Parameters:    Size  Location     Type
 22149 ;;		None
 22150 ;; Auto vars:     Size  Location     Type
 22151 ;;		None
 22152 ;; Return value:  Size  Location     Type
 22153 ;;                  2  5141[None  ] int 
 22154 ;; Registers used:
 22155 ;;		wreg, status,2, status,0, cstack
 22156 ;; Tracked objects:
 22157 ;;		On entry : 0/0
 22158 ;;		On exit  : 0/0
 22159 ;;		Unchanged: 0/0
 22160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22165 ;;Total ram usage:        0 bytes
 22166 ;; Hardware stack levels used:    1
 22167 ;; Hardware stack levels required when called:    4
 22168 ;; This function calls:
 22169 ;;		___ftge
 22170 ;; This function is called by:
 22171 ;;		_Error_Checking_One_Second
 22172 ;; This function uses a non-reentrant model
 22173 ;;
 22174                           
 22175                           	psect	text63
 22176  018676                     __ptext63:
 22177                           	opt stack 0
 22178  018676                     _Ramp_Up_Slip_Error_Trigger:
 22179                           	opt stack 24
 22180                           
 22181                           ;SLIP_CALCULATIONS.c: 54: if(Rotor_slip < (-9.0))
 22182                           
 22183                           ;incstack = 0
 22184  018676  C0D3  F099         	movff	_Rotor_slip,___ftge@ff1
 22185  01867A  C0D4  F09A         	movff	_Rotor_slip+1,___ftge@ff1+1
 22186  01867E  C0D5  F09B         	movff	_Rotor_slip+2,___ftge@ff1+2
 22187  018682  0E00               	movlw	0
 22188  018684  0100               	movlb	0	; () banked
 22189  018686  6F9C               	movwf	___ftge@ff2& (0+255),b
 22190  018688  0E10               	movlw	16
 22191  01868A  0100               	movlb	0	; () banked
 22192  01868C  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22193  01868E  0EC1               	movlw	193
 22194  018690  0100               	movlb	0	; () banked
 22195  018692  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22196  018694  ECEB  F0CA         	call	___ftge	;wreg free
 22197  018698  0100               	movlb	0	; () banked
 22198  01869A  B0D8               	btfsc	status,0,c
 22199  01869C  D002               	goto	l21437
 22200                           
 22201                           ; BSR set to: 0
 22202                           ;SLIP_CALCULATIONS.c: 55: {
 22203                           ;SLIP_CALCULATIONS.c: 56: Slip_Error_Counter++;
 22204  01869E  0101               	movlb	1	; () banked
 22205  0186A0  2B7B               	incf	_Slip_Error_Counter& (0+255),f,b
 22206  0186A2                     l21437:
 22207                           
 22208                           ;SLIP_CALCULATIONS.c: 57: }
 22209                           ;SLIP_CALCULATIONS.c: 58: if(Rotor_slip >= (-9.0))
 22210  0186A2  C0D3  F099         	movff	_Rotor_slip,___ftge@ff1
 22211  0186A6  C0D4  F09A         	movff	_Rotor_slip+1,___ftge@ff1+1
 22212  0186AA  C0D5  F09B         	movff	_Rotor_slip+2,___ftge@ff1+2
 22213  0186AE  0E00               	movlw	0
 22214  0186B0  0100               	movlb	0	; () banked
 22215  0186B2  6F9C               	movwf	___ftge@ff2& (0+255),b
 22216  0186B4  0E10               	movlw	16
 22217  0186B6  0100               	movlb	0	; () banked
 22218  0186B8  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22219  0186BA  0EC1               	movlw	193
 22220  0186BC  0100               	movlb	0	; () banked
 22221  0186BE  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22222  0186C0  ECEB  F0CA         	call	___ftge	;wreg free
 22223  0186C4  0100               	movlb	0	; () banked
 22224  0186C6  A0D8               	btfss	status,0,c
 22225  0186C8  D003               	goto	l21441
 22226                           
 22227                           ; BSR set to: 0
 22228                           ;SLIP_CALCULATIONS.c: 59: {
 22229                           ;SLIP_CALCULATIONS.c: 60: Slip_Error_Counter = 0;
 22230  0186CA  0E00               	movlw	0
 22231  0186CC  0101               	movlb	1	; () banked
 22232  0186CE  6F7B               	movwf	_Slip_Error_Counter& (0+255),b
 22233  0186D0                     l21441:
 22234                           
 22235                           ;SLIP_CALCULATIONS.c: 61: }
 22236                           ;SLIP_CALCULATIONS.c: 62: if(Slip_Error_Counter >= (60))
 22237  0186D0  0E3B               	movlw	59
 22238  0186D2  0101               	movlb	1	; () banked
 22239  0186D4  657B               	cpfsgt	_Slip_Error_Counter& (0+255),b
 22240  0186D6  D01C               	goto	l21449
 22241                           
 22242                           ; BSR set to: 1
 22243                           ;SLIP_CALCULATIONS.c: 63: {
 22244                           ;SLIP_CALCULATIONS.c: 64: Slip_Error_Counter = 0;
 22245  0186D8  0E00               	movlw	0
 22246  0186DA  0101               	movlb	1	; () banked
 22247  0186DC  6F7B               	movwf	_Slip_Error_Counter& (0+255),b
 22248                           
 22249                           ;SLIP_CALCULATIONS.c: 65: Rotor_Slip_Error_Flag = 1;
 22250  0186DE  0E01               	movlw	1
 22251  0186E0  0101               	movlb	1	; () banked
 22252  0186E2  6F79               	movwf	_Rotor_Slip_Error_Flag& (0+255),b
 22253                           
 22254                           ; BSR set to: 1
 22255                           ;SLIP_CALCULATIONS.c: 66: if(Rotor_slip < (-9.0))
 22256  0186E4  C0D3  F099         	movff	_Rotor_slip,___ftge@ff1
 22257  0186E8  C0D4  F09A         	movff	_Rotor_slip+1,___ftge@ff1+1
 22258  0186EC  C0D5  F09B         	movff	_Rotor_slip+2,___ftge@ff1+2
 22259  0186F0  0E00               	movlw	0
 22260  0186F2  0100               	movlb	0	; () banked
 22261  0186F4  6F9C               	movwf	___ftge@ff2& (0+255),b
 22262  0186F6  0E10               	movlw	16
 22263  0186F8  0100               	movlb	0	; () banked
 22264  0186FA  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22265  0186FC  0EC1               	movlw	193
 22266  0186FE  0100               	movlb	0	; () banked
 22267  018700  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22268  018702  ECEB  F0CA         	call	___ftge	;wreg free
 22269  018706  0100               	movlb	0	; () banked
 22270  018708  B0D8               	btfsc	status,0,c
 22271  01870A  D002               	goto	l21449
 22272                           
 22273                           ; BSR set to: 0
 22274                           ;SLIP_CALCULATIONS.c: 67: {
 22275                           ;SLIP_CALCULATIONS.c: 68: Errors = ROTOR_SLIP;
 22276  01870C  0E11               	movlw	17
 22277  01870E  6E1B               	movwf	_Errors,c
 22278  018710                     l21449:
 22279                           
 22280                           ;SLIP_CALCULATIONS.c: 69: }
 22281                           ;SLIP_CALCULATIONS.c: 70: }
 22282                           ;SLIP_CALCULATIONS.c: 73: if(Motor_slip < (-8.0))
 22283  018710  C0CA  F099         	movff	_Motor_slip,___ftge@ff1
 22284  018714  C0CB  F09A         	movff	_Motor_slip+1,___ftge@ff1+1
 22285  018718  C0CC  F09B         	movff	_Motor_slip+2,___ftge@ff1+2
 22286  01871C  0E00               	movlw	0
 22287  01871E  0100               	movlb	0	; () banked
 22288  018720  6F9C               	movwf	___ftge@ff2& (0+255),b
 22289  018722  0E00               	movlw	0
 22290  018724  0100               	movlb	0	; () banked
 22291  018726  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22292  018728  0EC1               	movlw	193
 22293  01872A  0100               	movlb	0	; () banked
 22294  01872C  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22295  01872E  ECEB  F0CA         	call	___ftge	;wreg free
 22296  018732  0100               	movlb	0	; () banked
 22297  018734  B0D8               	btfsc	status,0,c
 22298  018736  D002               	goto	l21453
 22299                           
 22300                           ; BSR set to: 0
 22301                           ;SLIP_CALCULATIONS.c: 74: {
 22302                           ;SLIP_CALCULATIONS.c: 75: Slip_Error_Counter_1++;
 22303  018738  0101               	movlb	1	; () banked
 22304  01873A  2B7C               	incf	_Slip_Error_Counter_1& (0+255),f,b
 22305  01873C                     l21453:
 22306                           
 22307                           ;SLIP_CALCULATIONS.c: 76: }
 22308                           ;SLIP_CALCULATIONS.c: 77: if(Motor_slip >= (-8.0))
 22309  01873C  C0CA  F099         	movff	_Motor_slip,___ftge@ff1
 22310  018740  C0CB  F09A         	movff	_Motor_slip+1,___ftge@ff1+1
 22311  018744  C0CC  F09B         	movff	_Motor_slip+2,___ftge@ff1+2
 22312  018748  0E00               	movlw	0
 22313  01874A  0100               	movlb	0	; () banked
 22314  01874C  6F9C               	movwf	___ftge@ff2& (0+255),b
 22315  01874E  0E00               	movlw	0
 22316  018750  0100               	movlb	0	; () banked
 22317  018752  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22318  018754  0EC1               	movlw	193
 22319  018756  0100               	movlb	0	; () banked
 22320  018758  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22321  01875A  ECEB  F0CA         	call	___ftge	;wreg free
 22322  01875E  0100               	movlb	0	; () banked
 22323  018760  A0D8               	btfss	status,0,c
 22324  018762  D003               	goto	l21457
 22325                           
 22326                           ; BSR set to: 0
 22327                           ;SLIP_CALCULATIONS.c: 78: {
 22328                           ;SLIP_CALCULATIONS.c: 79: Slip_Error_Counter_1 = 0;
 22329  018764  0E00               	movlw	0
 22330  018766  0101               	movlb	1	; () banked
 22331  018768  6F7C               	movwf	_Slip_Error_Counter_1& (0+255),b
 22332  01876A                     l21457:
 22333                           
 22334                           ;SLIP_CALCULATIONS.c: 80: }
 22335                           ;SLIP_CALCULATIONS.c: 81: if(Slip_Error_Counter_1 >= (60))
 22336  01876A  0E3B               	movlw	59
 22337  01876C  0101               	movlb	1	; () banked
 22338  01876E  657C               	cpfsgt	_Slip_Error_Counter_1& (0+255),b
 22339  018770  0012               	return	
 22340                           
 22341                           ; BSR set to: 1
 22342                           ;SLIP_CALCULATIONS.c: 82: {
 22343                           ;SLIP_CALCULATIONS.c: 83: Slip_Error_Counter_1 = 0;
 22344  018772  0E00               	movlw	0
 22345  018774  0101               	movlb	1	; () banked
 22346  018776  6F7C               	movwf	_Slip_Error_Counter_1& (0+255),b
 22347                           
 22348                           ;SLIP_CALCULATIONS.c: 84: Motor_Slip_Error_Flag = 1;
 22349  018778  0E01               	movlw	1
 22350  01877A  0101               	movlb	1	; () banked
 22351  01877C  6F70               	movwf	_Motor_Slip_Error_Flag& (0+255),b
 22352                           
 22353                           ; BSR set to: 1
 22354                           ;SLIP_CALCULATIONS.c: 85: if(Motor_slip < (-8.0))
 22355  01877E  C0CA  F099         	movff	_Motor_slip,___ftge@ff1
 22356  018782  C0CB  F09A         	movff	_Motor_slip+1,___ftge@ff1+1
 22357  018786  C0CC  F09B         	movff	_Motor_slip+2,___ftge@ff1+2
 22358  01878A  0E00               	movlw	0
 22359  01878C  0100               	movlb	0	; () banked
 22360  01878E  6F9C               	movwf	___ftge@ff2& (0+255),b
 22361  018790  0E00               	movlw	0
 22362  018792  0100               	movlb	0	; () banked
 22363  018794  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 22364  018796  0EC1               	movlw	193
 22365  018798  0100               	movlb	0	; () banked
 22366  01879A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 22367  01879C  ECEB  F0CA         	call	___ftge	;wreg free
 22368  0187A0  0100               	movlb	0	; () banked
 22369  0187A2  B0D8               	btfsc	status,0,c
 22370  0187A4  0012               	return	
 22371                           
 22372                           ; BSR set to: 0
 22373                           ;SLIP_CALCULATIONS.c: 86: {
 22374                           ;SLIP_CALCULATIONS.c: 87: Errors = MOTOR_SLIP;
 22375  0187A6  0E10               	movlw	16
 22376  0187A8  6E1B               	movwf	_Errors,c
 22377                           
 22378                           ; BSR set to: 0
 22379  0187AA  0012               	return	
 22380  0187AC                     __end_of_Ramp_Up_Slip_Error_Trigger:
 22381                           	opt stack 0
 22382                           tblptru	equ	0xFF8
 22383                           tblptrh	equ	0xFF7
 22384                           tblptrl	equ	0xFF6
 22385                           tablat	equ	0xFF5
 22386                           prodh	equ	0xFF4
 22387                           prodl	equ	0xFF3
 22388                           intcon	equ	0xFF2
 22389                           postinc0	equ	0xFEE
 22390                           wreg	equ	0xFE8
 22391                           postdec1	equ	0xFE5
 22392                           fsr1h	equ	0xFE2
 22393                           fsr1l	equ	0xFE1
 22394                           indf2	equ	0xFDF
 22395                           postinc2	equ	0xFDE
 22396                           postdec2	equ	0xFDD
 22397                           fsr2h	equ	0xFDA
 22398                           fsr2l	equ	0xFD9
 22399                           status	equ	0xFD8
 22400                           
 22401 ;; *************** function _Ramp_Up_Slip *****************
 22402 ;; Defined at:
 22403 ;;		line 40 in file "SLIP_CALCULATIONS.c"
 22404 ;; Parameters:    Size  Location     Type
 22405 ;;		None
 22406 ;; Auto vars:     Size  Location     Type
 22407 ;;		None
 22408 ;; Return value:  Size  Location     Type
 22409 ;;                  2  5139[None  ] int 
 22410 ;; Registers used:
 22411 ;;		wreg, status,2, status,0, cstack
 22412 ;; Tracked objects:
 22413 ;;		On entry : 0/0
 22414 ;;		On exit  : 0/0
 22415 ;;		Unchanged: 0/0
 22416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22421 ;;Total ram usage:        0 bytes
 22422 ;; Hardware stack levels used:    1
 22423 ;; Hardware stack levels required when called:    4
 22424 ;; This function calls:
 22425 ;;		___ftge
 22426 ;; This function is called by:
 22427 ;;		_Error_Checking_One_Second
 22428 ;; This function uses a non-reentrant model
 22429 ;;
 22430                           
 22431                           	psect	text64
 22432  019E8C                     __ptext64:
 22433                           	opt stack 0
 22434  019E8C                     _Ramp_Up_Slip:
 22435                           	opt stack 24
 22436                           
 22437                           ;SLIP_CALCULATIONS.c: 42: if(Rotor_slip > (-9.0) && Motor_slip > (-8.0))
 22438                           
 22439                           ;incstack = 0
 22440  019E8C  0E00               	movlw	0
 22441  019E8E  0100               	movlb	0	; () banked
 22442  019E90  6F99               	movwf	___ftge@ff1& (0+255),b
 22443  019E92  0E10               	movlw	16
 22444  019E94  0100               	movlb	0	; () banked
 22445  019E96  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 22446  019E98  0EC1               	movlw	193
 22447  019E9A  0100               	movlb	0	; () banked
 22448  019E9C  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 22449  019E9E  C0D3  F09C         	movff	_Rotor_slip,___ftge@ff2
 22450  019EA2  C0D4  F09D         	movff	_Rotor_slip+1,___ftge@ff2+1
 22451  019EA6  C0D5  F09E         	movff	_Rotor_slip+2,___ftge@ff2+2
 22452  019EAA  ECEB  F0CA         	call	___ftge	;wreg free
 22453  019EAE  0100               	movlb	0	; () banked
 22454  019EB0  B0D8               	btfsc	status,0,c
 22455  019EB2  D017               	goto	l21427
 22456                           
 22457                           ; BSR set to: 0
 22458  019EB4  0E00               	movlw	0
 22459  019EB6  0100               	movlb	0	; () banked
 22460  019EB8  6F99               	movwf	___ftge@ff1& (0+255),b
 22461  019EBA  0E00               	movlw	0
 22462  019EBC  0100               	movlb	0	; () banked
 22463  019EBE  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 22464  019EC0  0EC1               	movlw	193
 22465  019EC2  0100               	movlb	0	; () banked
 22466  019EC4  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 22467  019EC6  C0CA  F09C         	movff	_Motor_slip,___ftge@ff2
 22468  019ECA  C0CB  F09D         	movff	_Motor_slip+1,___ftge@ff2+1
 22469  019ECE  C0CC  F09E         	movff	_Motor_slip+2,___ftge@ff2+2
 22470  019ED2  ECEB  F0CA         	call	___ftge	;wreg free
 22471  019ED6  0100               	movlb	0	; () banked
 22472  019ED8  B0D8               	btfsc	status,0,c
 22473  019EDA  D003               	goto	l21427
 22474                           
 22475                           ; BSR set to: 0
 22476                           ;SLIP_CALCULATIONS.c: 43: {
 22477                           ;SLIP_CALCULATIONS.c: 44: Slip_Flag = 1;
 22478  019EDC  0E01               	movlw	1
 22479  019EDE  0101               	movlb	1	; () banked
 22480  019EE0  6F7D               	movwf	_Slip_Flag& (0+255),b
 22481  019EE2                     l21427:
 22482                           
 22483                           ;SLIP_CALCULATIONS.c: 45: }
 22484                           ;SLIP_CALCULATIONS.c: 46: if(Rotor_slip <= (-9.0) || Motor_slip <= (-8.0))
 22485  019EE2  0E00               	movlw	0
 22486  019EE4  0100               	movlb	0	; () banked
 22487  019EE6  6F99               	movwf	___ftge@ff1& (0+255),b
 22488  019EE8  0E10               	movlw	16
 22489  019EEA  0100               	movlb	0	; () banked
 22490  019EEC  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 22491  019EEE  0EC1               	movlw	193
 22492  019EF0  0100               	movlb	0	; () banked
 22493  019EF2  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 22494  019EF4  C0D3  F09C         	movff	_Rotor_slip,___ftge@ff2
 22495  019EF8  C0D4  F09D         	movff	_Rotor_slip+1,___ftge@ff2+1
 22496  019EFC  C0D5  F09E         	movff	_Rotor_slip+2,___ftge@ff2+2
 22497  019F00  ECEB  F0CA         	call	___ftge	;wreg free
 22498  019F04  0100               	movlb	0	; () banked
 22499  019F06  B0D8               	btfsc	status,0,c
 22500  019F08  D014               	goto	l21431
 22501                           
 22502                           ; BSR set to: 0
 22503  019F0A  0E00               	movlw	0
 22504  019F0C  0100               	movlb	0	; () banked
 22505  019F0E  6F99               	movwf	___ftge@ff1& (0+255),b
 22506  019F10  0E00               	movlw	0
 22507  019F12  0100               	movlb	0	; () banked
 22508  019F14  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 22509  019F16  0EC1               	movlw	193
 22510  019F18  0100               	movlb	0	; () banked
 22511  019F1A  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 22512  019F1C  C0CA  F09C         	movff	_Motor_slip,___ftge@ff2
 22513  019F20  C0CB  F09D         	movff	_Motor_slip+1,___ftge@ff2+1
 22514  019F24  C0CC  F09E         	movff	_Motor_slip+2,___ftge@ff2+2
 22515  019F28  ECEB  F0CA         	call	___ftge	;wreg free
 22516  019F2C  0100               	movlb	0	; () banked
 22517  019F2E  A0D8               	btfss	status,0,c
 22518  019F30  0012               	return	
 22519  019F32                     l21431:
 22520                           
 22521                           ; BSR set to: 0
 22522                           ;SLIP_CALCULATIONS.c: 47: {
 22523                           ;SLIP_CALCULATIONS.c: 48: Slip_Flag = 0;
 22524  019F32  0E00               	movlw	0
 22525  019F34  0101               	movlb	1	; () banked
 22526  019F36  6F7D               	movwf	_Slip_Flag& (0+255),b
 22527  019F38  0012               	return	
 22528  019F3A                     __end_of_Ramp_Up_Slip:
 22529                           	opt stack 0
 22530                           tblptru	equ	0xFF8
 22531                           tblptrh	equ	0xFF7
 22532                           tblptrl	equ	0xFF6
 22533                           tablat	equ	0xFF5
 22534                           prodh	equ	0xFF4
 22535                           prodl	equ	0xFF3
 22536                           intcon	equ	0xFF2
 22537                           postinc0	equ	0xFEE
 22538                           wreg	equ	0xFE8
 22539                           postdec1	equ	0xFE5
 22540                           fsr1h	equ	0xFE2
 22541                           fsr1l	equ	0xFE1
 22542                           indf2	equ	0xFDF
 22543                           postinc2	equ	0xFDE
 22544                           postdec2	equ	0xFDD
 22545                           fsr2h	equ	0xFDA
 22546                           fsr2l	equ	0xFD9
 22547                           status	equ	0xFD8
 22548                           
 22549 ;; *************** function _Pitch_PS_ON_Function *****************
 22550 ;; Defined at:
 22551 ;;		line 45 in file "PITCHING.c"
 22552 ;; Parameters:    Size  Location     Type
 22553 ;;		None
 22554 ;; Auto vars:     Size  Location     Type
 22555 ;;		None
 22556 ;; Return value:  Size  Location     Type
 22557 ;;                  2  5099[None  ] int 
 22558 ;; Registers used:
 22559 ;;		wreg, status,2, status,0
 22560 ;; Tracked objects:
 22561 ;;		On entry : 0/0
 22562 ;;		On exit  : 0/0
 22563 ;;		Unchanged: 0/0
 22564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22569 ;;Total ram usage:        0 bytes
 22570 ;; Hardware stack levels used:    1
 22571 ;; Hardware stack levels required when called:    3
 22572 ;; This function calls:
 22573 ;;		Nothing
 22574 ;; This function is called by:
 22575 ;;		_Error_Checking_One_Second
 22576 ;; This function uses a non-reentrant model
 22577 ;;
 22578                           
 22579                           	psect	text65
 22580  01AC7C                     __ptext65:
 22581                           	opt stack 0
 22582  01AC7C                     _Pitch_PS_ON_Function:
 22583                           	opt stack 25
 22584                           
 22585                           ;PITCHING.c: 47: if(Wind_Speed_Avg >= (0))
 22586                           
 22587                           ;incstack = 0
 22588  01AC7C  BE0F               	btfsc	_Wind_Speed_Avg+2,7,c
 22589  01AC7E  D007               	goto	l21109
 22590                           
 22591                           ;PITCHING.c: 48: {
 22592                           ;PITCHING.c: 49: (RB5 = 1);
 22593  01AC80  8A81               	bsf	3969,5,c	;volatile
 22594                           
 22595                           ;PITCHING.c: 50: Pitch_Ps_Counter = 0;
 22596  01AC82  0E00               	movlw	0
 22597  01AC84  0103               	movlb	3	; () banked
 22598  01AC86  6FEB               	movwf	(_Pitch_Ps_Counter+1)& (0+255),b
 22599  01AC88  0E00               	movlw	0
 22600  01AC8A  6FEA               	movwf	_Pitch_Ps_Counter& (0+255),b
 22601                           
 22602                           ;PITCHING.c: 51: }
 22603  01AC8C  0012               	return	
 22604  01AC8E                     l21109:
 22605                           
 22606                           ;PITCHING.c: 52: else
 22607                           ;PITCHING.c: 53: {
 22608                           ;PITCHING.c: 54: Pitch_Ps_Counter++;
 22609  01AC8E  0103               	movlb	3	; () banked
 22610  01AC90  4BEA               	infsnz	_Pitch_Ps_Counter& (0+255),f,b
 22611  01AC92  2BEB               	incf	(_Pitch_Ps_Counter+1)& (0+255),f,b
 22612                           
 22613                           ; BSR set to: 3
 22614                           ;PITCHING.c: 55: if(Pitch_Ps_Counter > (80))
 22615  01AC94  0103               	movlb	3	; () banked
 22616  01AC96  51EB               	movf	(_Pitch_Ps_Counter+1)& (0+255),w,b
 22617  01AC98  E105               	bnz	u15450
 22618  01AC9A  0E51               	movlw	81
 22619  01AC9C  0103               	movlb	3	; () banked
 22620  01AC9E  5DEA               	subwf	_Pitch_Ps_Counter& (0+255),w,b
 22621  01ACA0  A0D8               	btfss	status,0,c
 22622  01ACA2  0012               	return	
 22623  01ACA4                     u15450:
 22624                           
 22625                           ; BSR set to: 3
 22626                           ;PITCHING.c: 56: {
 22627                           ;PITCHING.c: 57: Pitch_Ps_Counter = 0;
 22628  01ACA4  0E00               	movlw	0
 22629  01ACA6  0103               	movlb	3	; () banked
 22630  01ACA8  6FEB               	movwf	(_Pitch_Ps_Counter+1)& (0+255),b
 22631  01ACAA  0E00               	movlw	0
 22632  01ACAC  6FEA               	movwf	_Pitch_Ps_Counter& (0+255),b
 22633                           
 22634                           ; BSR set to: 3
 22635                           ;PITCHING.c: 58: (RB5 = 0);
 22636  01ACAE  9A81               	bcf	3969,5,c	;volatile
 22637                           
 22638                           ; BSR set to: 3
 22639  01ACB0  0012               	return	
 22640  01ACB2                     __end_of_Pitch_PS_ON_Function:
 22641                           	opt stack 0
 22642                           tblptru	equ	0xFF8
 22643                           tblptrh	equ	0xFF7
 22644                           tblptrl	equ	0xFF6
 22645                           tablat	equ	0xFF5
 22646                           prodh	equ	0xFF4
 22647                           prodl	equ	0xFF3
 22648                           intcon	equ	0xFF2
 22649                           postinc0	equ	0xFEE
 22650                           wreg	equ	0xFE8
 22651                           postdec1	equ	0xFE5
 22652                           fsr1h	equ	0xFE2
 22653                           fsr1l	equ	0xFE1
 22654                           indf2	equ	0xFDF
 22655                           postinc2	equ	0xFDE
 22656                           postdec2	equ	0xFDD
 22657                           fsr2h	equ	0xFDA
 22658                           fsr2l	equ	0xFD9
 22659                           status	equ	0xFD8
 22660                           
 22661 ;; *************** function _Pitch_Feedback *****************
 22662 ;; Defined at:
 22663 ;;		line 627 in file "ERROR_HANDLING.c"
 22664 ;; Parameters:    Size  Location     Type
 22665 ;;		None
 22666 ;; Auto vars:     Size  Location     Type
 22667 ;;		None
 22668 ;; Return value:  Size  Location     Type
 22669 ;;                  1    wreg      void 
 22670 ;; Registers used:
 22671 ;;		wreg, status,2, status,0, cstack
 22672 ;; Tracked objects:
 22673 ;;		On entry : 0/0
 22674 ;;		On exit  : 0/0
 22675 ;;		Unchanged: 0/0
 22676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22681 ;;Total ram usage:        0 bytes
 22682 ;; Hardware stack levels used:    1
 22683 ;; Hardware stack levels required when called:    4
 22684 ;; This function calls:
 22685 ;;		_int_eeprom_write
 22686 ;; This function is called by:
 22687 ;;		_Error_Checking_One_Second
 22688 ;; This function uses a non-reentrant model
 22689 ;;
 22690                           
 22691                           	psect	text66
 22692  01A70A                     __ptext66:
 22693                           	opt stack 0
 22694  01A70A                     _Pitch_Feedback:
 22695                           	opt stack 24
 22696                           
 22697                           ;ERROR_HANDLING.c: 629: if(RB1 == 0 && RB0 == 1)
 22698                           
 22699                           ; BSR set to: 3
 22700                           ;incstack = 0
 22701  01A70A  A281               	btfss	3969,1,c	;volatile
 22702  01A70C  A081               	btfss	3969,0,c	;volatile
 22703  01A70E  D01B               	goto	l6288
 22704                           
 22705                           ;ERROR_HANDLING.c: 630: {
 22706                           ;ERROR_HANDLING.c: 631: Pitch_FB_Error_counter++;
 22707  01A710  0101               	movlb	1	; () banked
 22708  01A712  2B76               	incf	_Pitch_FB_Error_counter& (0+255),f,b
 22709                           
 22710                           ; BSR set to: 1
 22711                           ;ERROR_HANDLING.c: 632: if(Pitch_FB_Error_counter >= 5)
 22712  01A714  0E04               	movlw	4
 22713  01A716  0101               	movlb	1	; () banked
 22714  01A718  6576               	cpfsgt	_Pitch_FB_Error_counter& (0+255),b
 22715  01A71A  0012               	return	
 22716                           
 22717                           ; BSR set to: 1
 22718                           ;ERROR_HANDLING.c: 633: {
 22719                           ;ERROR_HANDLING.c: 634: Pitch_FB_Error_counter = 0;
 22720  01A71C  0E00               	movlw	0
 22721  01A71E  0101               	movlb	1	; () banked
 22722  01A720  6F76               	movwf	_Pitch_FB_Error_counter& (0+255),b
 22723                           
 22724                           ;ERROR_HANDLING.c: 635: Pitch_FB_Error_Flag = 1;
 22725  01A722  0E01               	movlw	1
 22726  01A724  0100               	movlb	0	; () banked
 22727  01A726  6FE8               	movwf	_Pitch_FB_Error_Flag& (0+255),b
 22728                           
 22729                           ;ERROR_HANDLING.c: 636: Errors = PITCH_FB;
 22730  01A728  0E15               	movlw	21
 22731  01A72A  6E1B               	movwf	_Errors,c
 22732                           
 22733                           ; BSR set to: 0
 22734                           ;ERROR_HANDLING.c: 637: int_eeprom_write((0x02),1);
 22735  01A72C  0E00               	movlw	0
 22736  01A72E  0100               	movlb	0	; () banked
 22737  01A730  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 22738  01A732  0E02               	movlw	2
 22739  01A734  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 22740  01A736  0E00               	movlw	0
 22741  01A738  0100               	movlb	0	; () banked
 22742  01A73A  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 22743  01A73C  0E01               	movlw	1
 22744  01A73E  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 22745  01A740  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 22746                           
 22747                           ;ERROR_HANDLING.c: 638: }
 22748                           ;ERROR_HANDLING.c: 639: }
 22749  01A744  0012               	return	
 22750  01A746                     l6288:
 22751                           
 22752                           ;ERROR_HANDLING.c: 640: else if(RB1 == 1 && RB0 == 1)
 22753  01A746  A281               	btfss	3969,1,c	;volatile
 22754  01A748  0012               	return	
 22755  01A74A  A081               	btfss	3969,0,c	;volatile
 22756  01A74C  0012               	return	
 22757                           
 22758                           ;ERROR_HANDLING.c: 641: {
 22759                           ;ERROR_HANDLING.c: 642: Pitch_FB_Error_counter = 0;
 22760  01A74E  0E00               	movlw	0
 22761  01A750  0101               	movlb	1	; () banked
 22762  01A752  6F76               	movwf	_Pitch_FB_Error_counter& (0+255),b
 22763                           
 22764                           ;ERROR_HANDLING.c: 643: Pitch_FB_Error_Flag = 0;
 22765  01A754  0E00               	movlw	0
 22766  01A756  0100               	movlb	0	; () banked
 22767  01A758  6FE8               	movwf	_Pitch_FB_Error_Flag& (0+255),b
 22768                           
 22769                           ; BSR set to: 0
 22770                           ;ERROR_HANDLING.c: 644: int_eeprom_write((0x02),0);
 22771  01A75A  0E00               	movlw	0
 22772  01A75C  0100               	movlb	0	; () banked
 22773  01A75E  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 22774  01A760  0E02               	movlw	2
 22775  01A762  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 22776  01A764  0E00               	movlw	0
 22777  01A766  0100               	movlb	0	; () banked
 22778  01A768  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 22779  01A76A  0E00               	movlw	0
 22780  01A76C  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 22781  01A76E  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 22782  01A772  0012               	return	
 22783  01A774                     __end_of_Pitch_Feedback:
 22784                           	opt stack 0
 22785                           tblptru	equ	0xFF8
 22786                           tblptrh	equ	0xFF7
 22787                           tblptrl	equ	0xFF6
 22788                           tablat	equ	0xFF5
 22789                           prodh	equ	0xFF4
 22790                           prodl	equ	0xFF3
 22791                           intcon	equ	0xFF2
 22792                           postinc0	equ	0xFEE
 22793                           wreg	equ	0xFE8
 22794                           postdec1	equ	0xFE5
 22795                           fsr1h	equ	0xFE2
 22796                           fsr1l	equ	0xFE1
 22797                           indf2	equ	0xFDF
 22798                           postinc2	equ	0xFDE
 22799                           postdec2	equ	0xFDD
 22800                           fsr2h	equ	0xFDA
 22801                           fsr2l	equ	0xFD9
 22802                           status	equ	0xFD8
 22803                           
 22804 ;; *************** function _Motor_Slip_Cal *****************
 22805 ;; Defined at:
 22806 ;;		line 24 in file "SLIP_CALCULATIONS.c"
 22807 ;; Parameters:    Size  Location     Type
 22808 ;;		None
 22809 ;; Auto vars:     Size  Location     Type
 22810 ;;		None
 22811 ;; Return value:  Size  Location     Type
 22812 ;;                  1    wreg      void 
 22813 ;; Registers used:
 22814 ;;		wreg, status,2, status,0, cstack
 22815 ;; Tracked objects:
 22816 ;;		On entry : 0/0
 22817 ;;		On exit  : 0/0
 22818 ;;		Unchanged: 0/0
 22819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22824 ;;Total ram usage:        0 bytes
 22825 ;; Hardware stack levels used:    1
 22826 ;; Hardware stack levels required when called:    5
 22827 ;; This function calls:
 22828 ;;		___ftadd
 22829 ;;		___ftdiv
 22830 ;;		___ftmul
 22831 ;;		___ftneg
 22832 ;;		___lbtoft
 22833 ;; This function is called by:
 22834 ;;		_Error_Checking_One_Second
 22835 ;; This function uses a non-reentrant model
 22836 ;;
 22837                           
 22838                           	psect	text67
 22839  018AF0                     __ptext67:
 22840                           	opt stack 0
 22841  018AF0                     _Motor_Slip_Cal:
 22842                           	opt stack 23
 22843                           
 22844                           ;SLIP_CALCULATIONS.c: 26: if(Turbine_state == RAMPUP_STATE)
 22845                           
 22846                           ;incstack = 0
 22847  018AF0  0100               	movlb	0	; () banked
 22848  018AF2  05F0               	decf	_Turbine_state& (0+255),w,b
 22849  018AF4  A4D8               	btfss	status,2,c
 22850  018AF6  D009               	goto	l21329
 22851                           
 22852                           ; BSR set to: 0
 22853                           ;SLIP_CALCULATIONS.c: 27: {
 22854                           ;SLIP_CALCULATIONS.c: 28: Mot_Frequency = Desired_Frequency;
 22855  018AF8  5016               	movf	_Desired_Frequency,w,c
 22856  018AFA  ECD5  F0D6         	call	___lbtoft
 22857  018AFE  C068  F5F9         	movff	?___lbtoft,_Mot_Frequency
 22858  018B02  C069  F5FA         	movff	?___lbtoft+1,_Mot_Frequency+1
 22859  018B06  C06A  F5FB         	movff	?___lbtoft+2,_Mot_Frequency+2
 22860  018B0A                     l21329:
 22861                           
 22862                           ;SLIP_CALCULATIONS.c: 29: }
 22863                           ;SLIP_CALCULATIONS.c: 30: if(Turbine_state == RUNNING_STATE)
 22864  018B0A  0E02               	movlw	2
 22865  018B0C  0100               	movlb	0	; () banked
 22866  018B0E  19F0               	xorwf	_Turbine_state& (0+255),w,b
 22867  018B10  A4D8               	btfss	status,2,c
 22868  018B12  D009               	goto	l21333
 22869                           
 22870                           ; BSR set to: 0
 22871                           ;SLIP_CALCULATIONS.c: 31: {
 22872                           ;SLIP_CALCULATIONS.c: 32: Mot_Frequency = 50;
 22873  018B14  0E00               	movlw	0
 22874  018B16  0105               	movlb	5	; () banked
 22875  018B18  6FF9               	movwf	_Mot_Frequency& (0+255),b
 22876  018B1A  0E48               	movlw	72
 22877  018B1C  0105               	movlb	5	; () banked
 22878  018B1E  6FFA               	movwf	(_Mot_Frequency+1)& (0+255),b
 22879  018B20  0E42               	movlw	66
 22880  018B22  0105               	movlb	5	; () banked
 22881  018B24  6FFB               	movwf	(_Mot_Frequency+2)& (0+255),b
 22882  018B26                     l21333:
 22883                           
 22884                           ;SLIP_CALCULATIONS.c: 33: }
 22885                           ;SLIP_CALCULATIONS.c: 34: Gen_Theory = 120 * Mot_Frequency / (6);
 22886  018B26  0E00               	movlw	0
 22887  018B28  0100               	movlb	0	; () banked
 22888  018B2A  6F77               	movwf	___ftmul@f2& (0+255),b
 22889  018B2C  0EF0               	movlw	240
 22890  018B2E  0100               	movlb	0	; () banked
 22891  018B30  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 22892  018B32  0E42               	movlw	66
 22893  018B34  0100               	movlb	0	; () banked
 22894  018B36  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 22895  018B38  C5F9  F074         	movff	_Mot_Frequency,___ftmul@f1
 22896  018B3C  C5FA  F075         	movff	_Mot_Frequency+1,___ftmul@f1+1
 22897  018B40  C5FB  F076         	movff	_Mot_Frequency+2,___ftmul@f1+2
 22898  018B44  ECA4  F0C0         	call	___ftmul	;wreg free
 22899  018B48  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 22900  018B4C  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 22901  018B50  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 22902  018B54  0E00               	movlw	0
 22903  018B56  0100               	movlb	0	; () banked
 22904  018B58  6FA8               	movwf	___ftdiv@f2& (0+255),b
 22905  018B5A  0EC0               	movlw	192
 22906  018B5C  0100               	movlb	0	; () banked
 22907  018B5E  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 22908  018B60  0E40               	movlw	64
 22909  018B62  0100               	movlb	0	; () banked
 22910  018B64  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 22911  018B66  EC53  F0C1         	call	___ftdiv	;wreg free
 22912  018B6A  C0A5  F215         	movff	?___ftdiv,_Gen_Theory
 22913  018B6E  C0A6  F216         	movff	?___ftdiv+1,_Gen_Theory+1
 22914  018B72  C0A7  F217         	movff	?___ftdiv+2,_Gen_Theory+2
 22915                           
 22916                           ;SLIP_CALCULATIONS.c: 36: Motor_slip_1 = (Generator_RPM_FLT - Gen_Theory)/Gen_Theory;
 22917  018B76  C004  F090         	movff	_Generator_RPM_FLT,___ftadd@f2
 22918  018B7A  C005  F091         	movff	_Generator_RPM_FLT+1,___ftadd@f2+1
 22919  018B7E  C006  F092         	movff	_Generator_RPM_FLT+2,___ftadd@f2+2
 22920  018B82  C215  F083         	movff	_Gen_Theory,___ftneg@f1
 22921  018B86  C216  F084         	movff	_Gen_Theory+1,___ftneg@f1+1
 22922  018B8A  C217  F085         	movff	_Gen_Theory+2,___ftneg@f1+2
 22923  018B8E  ECBD  F0D6         	call	___ftneg	;wreg free
 22924  018B92  C083  F08D         	movff	?___ftneg,___ftadd@f1
 22925  018B96  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 22926  018B9A  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 22927  018B9E  EC69  F0B2         	call	___ftadd	;wreg free
 22928  018BA2  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 22929  018BA6  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 22930  018BAA  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 22931  018BAE  C215  F0A8         	movff	_Gen_Theory,___ftdiv@f2
 22932  018BB2  C216  F0A9         	movff	_Gen_Theory+1,___ftdiv@f2+1
 22933  018BB6  C217  F0AA         	movff	_Gen_Theory+2,___ftdiv@f2+2
 22934  018BBA  EC53  F0C1         	call	___ftdiv	;wreg free
 22935  018BBE  C0A5  F58B         	movff	?___ftdiv,_Motor_slip_1
 22936  018BC2  C0A6  F58C         	movff	?___ftdiv+1,_Motor_slip_1+1
 22937  018BC6  C0A7  F58D         	movff	?___ftdiv+2,_Motor_slip_1+2
 22938                           
 22939                           ;SLIP_CALCULATIONS.c: 37: Motor_slip = Motor_slip_1 * 100;
 22940  018BCA  C58B  F074         	movff	_Motor_slip_1,___ftmul@f1
 22941  018BCE  C58C  F075         	movff	_Motor_slip_1+1,___ftmul@f1+1
 22942  018BD2  C58D  F076         	movff	_Motor_slip_1+2,___ftmul@f1+2
 22943  018BD6  0E00               	movlw	0
 22944  018BD8  0100               	movlb	0	; () banked
 22945  018BDA  6F77               	movwf	___ftmul@f2& (0+255),b
 22946  018BDC  0EC8               	movlw	200
 22947  018BDE  0100               	movlb	0	; () banked
 22948  018BE0  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 22949  018BE2  0E42               	movlw	66
 22950  018BE4  0100               	movlb	0	; () banked
 22951  018BE6  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 22952  018BE8  ECA4  F0C0         	call	___ftmul	;wreg free
 22953  018BEC  C074  F0CA         	movff	?___ftmul,_Motor_slip
 22954  018BF0  C075  F0CB         	movff	?___ftmul+1,_Motor_slip+1
 22955  018BF4  C076  F0CC         	movff	?___ftmul+2,_Motor_slip+2
 22956  018BF8  0012               	return		;funcret
 22957  018BFA                     __end_of_Motor_Slip_Cal:
 22958                           	opt stack 0
 22959                           tblptru	equ	0xFF8
 22960                           tblptrh	equ	0xFF7
 22961                           tblptrl	equ	0xFF6
 22962                           tablat	equ	0xFF5
 22963                           prodh	equ	0xFF4
 22964                           prodl	equ	0xFF3
 22965                           intcon	equ	0xFF2
 22966                           postinc0	equ	0xFEE
 22967                           wreg	equ	0xFE8
 22968                           postdec1	equ	0xFE5
 22969                           fsr1h	equ	0xFE2
 22970                           fsr1l	equ	0xFE1
 22971                           indf2	equ	0xFDF
 22972                           postinc2	equ	0xFDE
 22973                           postdec2	equ	0xFDD
 22974                           fsr2h	equ	0xFDA
 22975                           fsr2l	equ	0xFD9
 22976                           status	equ	0xFD8
 22977                           
 22978 ;; *************** function ___lbtoft *****************
 22979 ;; Defined at:
 22980 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbtoft.c"
 22981 ;; Parameters:    Size  Location     Type
 22982 ;;  c               1    wreg     unsigned char 
 22983 ;; Auto vars:     Size  Location     Type
 22984 ;;  c               1   11[BANK0 ] unsigned char 
 22985 ;; Return value:  Size  Location     Type
 22986 ;;                  3    8[BANK0 ] float 
 22987 ;; Registers used:
 22988 ;;		wreg, status,2, status,0, cstack
 22989 ;; Tracked objects:
 22990 ;;		On entry : 0/0
 22991 ;;		On exit  : 0/0
 22992 ;;		Unchanged: 0/0
 22993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22994 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22997 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22998 ;;Total ram usage:        4 bytes
 22999 ;; Hardware stack levels used:    1
 23000 ;; Hardware stack levels required when called:    4
 23001 ;; This function calls:
 23002 ;;		___ftpack
 23003 ;; This function is called by:
 23004 ;;		_Motor_Slip_Cal
 23005 ;; This function uses a non-reentrant model
 23006 ;;
 23007                           
 23008                           	psect	text68
 23009  01ADAA                     __ptext68:
 23010                           	opt stack 0
 23011  01ADAA                     ___lbtoft:
 23012                           	opt stack 23
 23013                           
 23014                           ;incstack = 0
 23015                           ;___lbtoft@c stored from wreg
 23016  01ADAA  0100               	movlb	0	; () banked
 23017  01ADAC  6F6B               	movwf	___lbtoft@c& (0+255),b
 23018  01ADAE  0100               	movlb	0	; () banked
 23019  01ADB0  516B               	movf	___lbtoft@c& (0+255),w,b
 23020  01ADB2  0100               	movlb	0	; () banked
 23021  01ADB4  6F60               	movwf	___ftpack@arg& (0+255),b
 23022  01ADB6  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
 23023  01ADB8  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 23024  01ADBA  0E8E               	movlw	142
 23025  01ADBC  0100               	movlb	0	; () banked
 23026  01ADBE  6F63               	movwf	___ftpack@exp& (0+255),b
 23027  01ADC0  0E00               	movlw	0
 23028  01ADC2  0100               	movlb	0	; () banked
 23029  01ADC4  6F64               	movwf	___ftpack@sign& (0+255),b
 23030  01ADC6  ECF2  F0C4         	call	___ftpack	;wreg free
 23031  01ADCA  C060  F068         	movff	?___ftpack,?___lbtoft
 23032  01ADCE  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
 23033  01ADD2  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
 23034  01ADD6  0012               	return	
 23035  01ADD8                     __end_of___lbtoft:
 23036                           	opt stack 0
 23037                           tblptru	equ	0xFF8
 23038                           tblptrh	equ	0xFF7
 23039                           tblptrl	equ	0xFF6
 23040                           tablat	equ	0xFF5
 23041                           prodh	equ	0xFF4
 23042                           prodl	equ	0xFF3
 23043                           intcon	equ	0xFF2
 23044                           postinc0	equ	0xFEE
 23045                           wreg	equ	0xFE8
 23046                           postdec1	equ	0xFE5
 23047                           fsr1h	equ	0xFE2
 23048                           fsr1l	equ	0xFE1
 23049                           indf2	equ	0xFDF
 23050                           postinc2	equ	0xFDE
 23051                           postdec2	equ	0xFDD
 23052                           fsr2h	equ	0xFDA
 23053                           fsr2l	equ	0xFD9
 23054                           status	equ	0xFD8
 23055                           
 23056 ;; *************** function _Grid_UV *****************
 23057 ;; Defined at:
 23058 ;;		line 221 in file "ERROR_HANDLING.c"
 23059 ;; Parameters:    Size  Location     Type
 23060 ;;		None
 23061 ;; Auto vars:     Size  Location     Type
 23062 ;;		None
 23063 ;; Return value:  Size  Location     Type
 23064 ;;                  1    wreg      void 
 23065 ;; Registers used:
 23066 ;;		wreg, status,2, status,0, cstack
 23067 ;; Tracked objects:
 23068 ;;		On entry : 0/0
 23069 ;;		On exit  : 0/0
 23070 ;;		Unchanged: 0/0
 23071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23076 ;;Total ram usage:        0 bytes
 23077 ;; Hardware stack levels used:    1
 23078 ;; Hardware stack levels required when called:    4
 23079 ;; This function calls:
 23080 ;;		___ftge
 23081 ;; This function is called by:
 23082 ;;		_Error_Checking_One_Second
 23083 ;; This function uses a non-reentrant model
 23084 ;;
 23085                           
 23086                           	psect	text69
 23087  017D12                     __ptext69:
 23088                           	opt stack 0
 23089  017D12                     _Grid_UV:
 23090                           	opt stack 24
 23091                           
 23092                           ;ERROR_HANDLING.c: 223: if(Turbine_state == STARTUP_STATE)
 23093                           
 23094                           ;incstack = 0
 23095  017D12  0100               	movlb	0	; () banked
 23096  017D14  51F0               	movf	_Turbine_state& (0+255),w,b
 23097  017D16  A4D8               	btfss	status,2,c
 23098  017D18  D055               	goto	l21135
 23099                           
 23100                           ; BSR set to: 0
 23101                           ;ERROR_HANDLING.c: 224: {
 23102                           ;ERROR_HANDLING.c: 225: if(R_Volt <= (370) || Y_Volt <= (370) || B_Volt <= (370))
 23103  017D1A  0E00               	movlw	0
 23104  017D1C  0100               	movlb	0	; () banked
 23105  017D1E  6F99               	movwf	___ftge@ff1& (0+255),b
 23106  017D20  0EB9               	movlw	185
 23107  017D22  0100               	movlb	0	; () banked
 23108  017D24  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23109  017D26  0E43               	movlw	67
 23110  017D28  0100               	movlb	0	; () banked
 23111  017D2A  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23112  017D2C  C007  F09C         	movff	_R_Volt,___ftge@ff2
 23113  017D30  C008  F09D         	movff	_R_Volt+1,___ftge@ff2+1
 23114  017D34  C009  F09E         	movff	_R_Volt+2,___ftge@ff2+2
 23115  017D38  ECEB  F0CA         	call	___ftge	;wreg free
 23116  017D3C  0100               	movlb	0	; () banked
 23117  017D3E  B0D8               	btfsc	status,0,c
 23118  017D40  D028               	goto	l21125
 23119                           
 23120                           ; BSR set to: 0
 23121  017D42  0E00               	movlw	0
 23122  017D44  0100               	movlb	0	; () banked
 23123  017D46  6F99               	movwf	___ftge@ff1& (0+255),b
 23124  017D48  0EB9               	movlw	185
 23125  017D4A  0100               	movlb	0	; () banked
 23126  017D4C  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23127  017D4E  0E43               	movlw	67
 23128  017D50  0100               	movlb	0	; () banked
 23129  017D52  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23130  017D54  C010  F09C         	movff	_Y_Volt,___ftge@ff2
 23131  017D58  C011  F09D         	movff	_Y_Volt+1,___ftge@ff2+1
 23132  017D5C  C012  F09E         	movff	_Y_Volt+2,___ftge@ff2+2
 23133  017D60  ECEB  F0CA         	call	___ftge	;wreg free
 23134  017D64  0100               	movlb	0	; () banked
 23135  017D66  B0D8               	btfsc	status,0,c
 23136  017D68  D014               	goto	l21125
 23137                           
 23138                           ; BSR set to: 0
 23139  017D6A  0E00               	movlw	0
 23140  017D6C  0100               	movlb	0	; () banked
 23141  017D6E  6F99               	movwf	___ftge@ff1& (0+255),b
 23142  017D70  0EB9               	movlw	185
 23143  017D72  0100               	movlb	0	; () banked
 23144  017D74  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23145  017D76  0E43               	movlw	67
 23146  017D78  0100               	movlb	0	; () banked
 23147  017D7A  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23148  017D7C  C001  F09C         	movff	_B_Volt,___ftge@ff2
 23149  017D80  C002  F09D         	movff	_B_Volt+1,___ftge@ff2+1
 23150  017D84  C003  F09E         	movff	_B_Volt+2,___ftge@ff2+2
 23151  017D88  ECEB  F0CA         	call	___ftge	;wreg free
 23152  017D8C  0100               	movlb	0	; () banked
 23153  017D8E  A0D8               	btfss	status,0,c
 23154  017D90  D013               	goto	l21133
 23155  017D92                     l21125:
 23156                           
 23157                           ; BSR set to: 0
 23158                           ;ERROR_HANDLING.c: 226: {
 23159                           ;ERROR_HANDLING.c: 227: Grid_UV_Counter++;
 23160  017D92  0101               	movlb	1	; () banked
 23161  017D94  2B66               	incf	_Grid_UV_Counter& (0+255),f,b
 23162                           
 23163                           ; BSR set to: 1
 23164                           ;ERROR_HANDLING.c: 228: if(Grid_UV_Counter >= 2)
 23165  017D96  0E01               	movlw	1
 23166  017D98  0101               	movlb	1	; () banked
 23167  017D9A  6566               	cpfsgt	_Grid_UV_Counter& (0+255),b
 23168  017D9C  D009               	goto	l21131
 23169                           
 23170                           ; BSR set to: 1
 23171                           ;ERROR_HANDLING.c: 229: {
 23172                           ;ERROR_HANDLING.c: 230: Grid_UV_Counter = 0;
 23173  017D9E  0E00               	movlw	0
 23174  017DA0  0101               	movlb	1	; () banked
 23175  017DA2  6F66               	movwf	_Grid_UV_Counter& (0+255),b
 23176                           
 23177                           ;ERROR_HANDLING.c: 231: Grid_Und_voltage = 1;
 23178  017DA4  0E01               	movlw	1
 23179  017DA6  0100               	movlb	0	; () banked
 23180  017DA8  6FE6               	movwf	_Grid_Und_voltage& (0+255),b
 23181                           
 23182                           ;ERROR_HANDLING.c: 232: Errors = VOLT_LOW;
 23183  017DAA  0E02               	movlw	2
 23184  017DAC  6E1B               	movwf	_Errors,c
 23185                           
 23186                           ;ERROR_HANDLING.c: 233: }
 23187  017DAE  D00A               	goto	l21135
 23188  017DB0                     l21131:
 23189                           
 23190                           ;ERROR_HANDLING.c: 234: else
 23191                           ;ERROR_HANDLING.c: 235: {
 23192                           ;ERROR_HANDLING.c: 236: Grid_Und_voltage = 0;
 23193  017DB0  0E00               	movlw	0
 23194  017DB2  0100               	movlb	0	; () banked
 23195  017DB4  6FE6               	movwf	_Grid_Und_voltage& (0+255),b
 23196                           
 23197                           ; BSR set to: 0
 23198                           ;ERROR_HANDLING.c: 237: }
 23199                           ;ERROR_HANDLING.c: 238: }
 23200  017DB6  D006               	goto	l21135
 23201  017DB8                     l21133:
 23202                           
 23203                           ; BSR set to: 0
 23204                           ;ERROR_HANDLING.c: 239: else
 23205                           ;ERROR_HANDLING.c: 240: {
 23206                           ;ERROR_HANDLING.c: 241: Grid_Und_voltage = 0;
 23207  017DB8  0E00               	movlw	0
 23208  017DBA  0100               	movlb	0	; () banked
 23209  017DBC  6FE6               	movwf	_Grid_Und_voltage& (0+255),b
 23210                           
 23211                           ;ERROR_HANDLING.c: 242: Grid_UV_Counter = 0;
 23212  017DBE  0E00               	movlw	0
 23213  017DC0  0101               	movlb	1	; () banked
 23214  017DC2  6F66               	movwf	_Grid_UV_Counter& (0+255),b
 23215  017DC4                     l21135:
 23216                           
 23217                           ;ERROR_HANDLING.c: 243: }
 23218                           ;ERROR_HANDLING.c: 244: }
 23219                           ;ERROR_HANDLING.c: 245: if(Turbine_state == RUNNING_STATE)
 23220  017DC4  0E02               	movlw	2
 23221  017DC6  0100               	movlb	0	; () banked
 23222  017DC8  19F0               	xorwf	_Turbine_state& (0+255),w,b
 23223  017DCA  A4D8               	btfss	status,2,c
 23224  017DCC  0012               	return	
 23225                           
 23226                           ; BSR set to: 0
 23227                           ;ERROR_HANDLING.c: 246: {
 23228                           ;ERROR_HANDLING.c: 247: if(R_Volt <= (370) || Y_Volt <= (370) || B_Volt <= (370))
 23229  017DCE  0E00               	movlw	0
 23230  017DD0  0100               	movlb	0	; () banked
 23231  017DD2  6F99               	movwf	___ftge@ff1& (0+255),b
 23232  017DD4  0EB9               	movlw	185
 23233  017DD6  0100               	movlb	0	; () banked
 23234  017DD8  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23235  017DDA  0E43               	movlw	67
 23236  017DDC  0100               	movlb	0	; () banked
 23237  017DDE  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23238  017DE0  C007  F09C         	movff	_R_Volt,___ftge@ff2
 23239  017DE4  C008  F09D         	movff	_R_Volt+1,___ftge@ff2+1
 23240  017DE8  C009  F09E         	movff	_R_Volt+2,___ftge@ff2+2
 23241  017DEC  ECEB  F0CA         	call	___ftge	;wreg free
 23242  017DF0  0100               	movlb	0	; () banked
 23243  017DF2  B0D8               	btfsc	status,0,c
 23244  017DF4  D028               	goto	l21143
 23245                           
 23246                           ; BSR set to: 0
 23247  017DF6  0E00               	movlw	0
 23248  017DF8  0100               	movlb	0	; () banked
 23249  017DFA  6F99               	movwf	___ftge@ff1& (0+255),b
 23250  017DFC  0EB9               	movlw	185
 23251  017DFE  0100               	movlb	0	; () banked
 23252  017E00  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23253  017E02  0E43               	movlw	67
 23254  017E04  0100               	movlb	0	; () banked
 23255  017E06  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23256  017E08  C010  F09C         	movff	_Y_Volt,___ftge@ff2
 23257  017E0C  C011  F09D         	movff	_Y_Volt+1,___ftge@ff2+1
 23258  017E10  C012  F09E         	movff	_Y_Volt+2,___ftge@ff2+2
 23259  017E14  ECEB  F0CA         	call	___ftge	;wreg free
 23260  017E18  0100               	movlb	0	; () banked
 23261  017E1A  B0D8               	btfsc	status,0,c
 23262  017E1C  D014               	goto	l21143
 23263                           
 23264                           ; BSR set to: 0
 23265  017E1E  0E00               	movlw	0
 23266  017E20  0100               	movlb	0	; () banked
 23267  017E22  6F99               	movwf	___ftge@ff1& (0+255),b
 23268  017E24  0EB9               	movlw	185
 23269  017E26  0100               	movlb	0	; () banked
 23270  017E28  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 23271  017E2A  0E43               	movlw	67
 23272  017E2C  0100               	movlb	0	; () banked
 23273  017E2E  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 23274  017E30  C001  F09C         	movff	_B_Volt,___ftge@ff2
 23275  017E34  C002  F09D         	movff	_B_Volt+1,___ftge@ff2+1
 23276  017E38  C003  F09E         	movff	_B_Volt+2,___ftge@ff2+2
 23277  017E3C  ECEB  F0CA         	call	___ftge	;wreg free
 23278  017E40  0100               	movlb	0	; () banked
 23279  017E42  A0D8               	btfss	status,0,c
 23280  017E44  D013               	goto	l21151
 23281  017E46                     l21143:
 23282                           
 23283                           ; BSR set to: 0
 23284                           ;ERROR_HANDLING.c: 248: {
 23285                           ;ERROR_HANDLING.c: 249: Grid_UV_Counter++;
 23286  017E46  0101               	movlb	1	; () banked
 23287  017E48  2B66               	incf	_Grid_UV_Counter& (0+255),f,b
 23288                           
 23289                           ; BSR set to: 1
 23290                           ;ERROR_HANDLING.c: 250: if(Grid_UV_Counter >= 10)
 23291  017E4A  0E09               	movlw	9
 23292  017E4C  0101               	movlb	1	; () banked
 23293  017E4E  6566               	cpfsgt	_Grid_UV_Counter& (0+255),b
 23294  017E50  D009               	goto	l21149
 23295                           
 23296                           ; BSR set to: 1
 23297                           ;ERROR_HANDLING.c: 251: {
 23298                           ;ERROR_HANDLING.c: 252: Grid_UV_Counter = 0;
 23299  017E52  0E00               	movlw	0
 23300  017E54  0101               	movlb	1	; () banked
 23301  017E56  6F66               	movwf	_Grid_UV_Counter& (0+255),b
 23302                           
 23303                           ;ERROR_HANDLING.c: 253: Grid_Und_voltage = 1;
 23304  017E58  0E01               	movlw	1
 23305  017E5A  0100               	movlb	0	; () banked
 23306  017E5C  6FE6               	movwf	_Grid_Und_voltage& (0+255),b
 23307                           
 23308                           ;ERROR_HANDLING.c: 254: Errors = VOLT_LOW;
 23309  017E5E  0E02               	movlw	2
 23310  017E60  6E1B               	movwf	_Errors,c
 23311                           
 23312                           ;ERROR_HANDLING.c: 255: }
 23313  017E62  0012               	return	
 23314  017E64                     l21149:
 23315                           
 23316                           ;ERROR_HANDLING.c: 256: else
 23317                           ;ERROR_HANDLING.c: 257: {
 23318                           ;ERROR_HANDLING.c: 258: Grid_Und_voltage = 0;
 23319  017E64  0E00               	movlw	0
 23320  017E66  0100               	movlb	0	; () banked
 23321  017E68  6FE6               	movwf	_Grid_Und_voltage& (0+255),b
 23322                           
 23323                           ; BSR set to: 0
 23324                           ;ERROR_HANDLING.c: 259: }
 23325                           ;ERROR_HANDLING.c: 260: }
 23326  017E6A  0012               	return	
 23327  017E6C                     l21151:
 23328                           
 23329                           ; BSR set to: 0
 23330                           ;ERROR_HANDLING.c: 261: else
 23331                           ;ERROR_HANDLING.c: 262: {
 23332                           ;ERROR_HANDLING.c: 263: Grid_Und_voltage = 0;
 23333  017E6C  0E00               	movlw	0
 23334  017E6E  0100               	movlb	0	; () banked
 23335  017E70  6FE6               	movwf	_Grid_Und_voltage& (0+255),b
 23336                           
 23337                           ;ERROR_HANDLING.c: 264: Grid_UV_Counter = 0;
 23338  017E72  0E00               	movlw	0
 23339  017E74  0101               	movlb	1	; () banked
 23340  017E76  6F66               	movwf	_Grid_UV_Counter& (0+255),b
 23341                           
 23342                           ; BSR set to: 1
 23343  017E78  0012               	return	
 23344  017E7A                     __end_of_Grid_UV:
 23345                           	opt stack 0
 23346                           tblptru	equ	0xFF8
 23347                           tblptrh	equ	0xFF7
 23348                           tblptrl	equ	0xFF6
 23349                           tablat	equ	0xFF5
 23350                           prodh	equ	0xFF4
 23351                           prodl	equ	0xFF3
 23352                           intcon	equ	0xFF2
 23353                           postinc0	equ	0xFEE
 23354                           wreg	equ	0xFE8
 23355                           postdec1	equ	0xFE5
 23356                           fsr1h	equ	0xFE2
 23357                           fsr1l	equ	0xFE1
 23358                           indf2	equ	0xFDF
 23359                           postinc2	equ	0xFDE
 23360                           postdec2	equ	0xFDD
 23361                           fsr2h	equ	0xFDA
 23362                           fsr2l	equ	0xFD9
 23363                           status	equ	0xFD8
 23364                           
 23365 ;; *************** function _Grid_Phase_Sequence *****************
 23366 ;; Defined at:
 23367 ;;		line 503 in file "ERROR_HANDLING.c"
 23368 ;; Parameters:    Size  Location     Type
 23369 ;;		None
 23370 ;; Auto vars:     Size  Location     Type
 23371 ;;		None
 23372 ;; Return value:  Size  Location     Type
 23373 ;;                  1    wreg      void 
 23374 ;; Registers used:
 23375 ;;		wreg, status,2, status,0
 23376 ;; Tracked objects:
 23377 ;;		On entry : 0/0
 23378 ;;		On exit  : 0/0
 23379 ;;		Unchanged: 0/0
 23380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23385 ;;Total ram usage:        0 bytes
 23386 ;; Hardware stack levels used:    1
 23387 ;; Hardware stack levels required when called:    3
 23388 ;; This function calls:
 23389 ;;		Nothing
 23390 ;; This function is called by:
 23391 ;;		_Error_Checking_One_Second
 23392 ;; This function uses a non-reentrant model
 23393 ;;
 23394                           
 23395                           	psect	text70
 23396  01AF4A                     __ptext70:
 23397                           	opt stack 0
 23398  01AF4A                     _Grid_Phase_Sequence:
 23399                           	opt stack 25
 23400                           
 23401                           ;ERROR_HANDLING.c: 505: if(Phase_Sequence_Ok == 1)
 23402                           
 23403                           ;incstack = 0
 23404  01AF4A  041E               	decf	_Phase_Sequence_Ok,w,c
 23405  01AF4C  A4D8               	btfss	status,2,c
 23406  01AF4E  D004               	goto	l21241
 23407                           
 23408                           ;ERROR_HANDLING.c: 506: {
 23409                           ;ERROR_HANDLING.c: 507: Grid_Phase_Sequence_Error = 0;
 23410  01AF50  0E00               	movlw	0
 23411  01AF52  0100               	movlb	0	; () banked
 23412  01AF54  6FE5               	movwf	_Grid_Phase_Sequence_Error& (0+255),b
 23413                           
 23414                           ;ERROR_HANDLING.c: 508: }
 23415  01AF56  0012               	return	
 23416  01AF58                     l21241:
 23417                           
 23418                           ;ERROR_HANDLING.c: 509: else if(Phase_Sequence_Ok == 0)
 23419  01AF58  501E               	movf	_Phase_Sequence_Ok,w,c
 23420  01AF5A  A4D8               	btfss	status,2,c
 23421  01AF5C  0012               	return	
 23422                           
 23423                           ;ERROR_HANDLING.c: 510: {
 23424                           ;ERROR_HANDLING.c: 511: Grid_Phase_Sequence_Error = 1;
 23425  01AF5E  0E01               	movlw	1
 23426  01AF60  0100               	movlb	0	; () banked
 23427  01AF62  6FE5               	movwf	_Grid_Phase_Sequence_Error& (0+255),b
 23428                           
 23429                           ;ERROR_HANDLING.c: 512: Errors = PHASE_SEQ;
 23430  01AF64  0E0D               	movlw	13
 23431  01AF66  6E1B               	movwf	_Errors,c
 23432                           
 23433                           ; BSR set to: 0
 23434  01AF68  0012               	return	
 23435  01AF6A                     __end_of_Grid_Phase_Sequence:
 23436                           	opt stack 0
 23437                           tblptru	equ	0xFF8
 23438                           tblptrh	equ	0xFF7
 23439                           tblptrl	equ	0xFF6
 23440                           tablat	equ	0xFF5
 23441                           prodh	equ	0xFF4
 23442                           prodl	equ	0xFF3
 23443                           intcon	equ	0xFF2
 23444                           postinc0	equ	0xFEE
 23445                           wreg	equ	0xFE8
 23446                           postdec1	equ	0xFE5
 23447                           fsr1h	equ	0xFE2
 23448                           fsr1l	equ	0xFE1
 23449                           indf2	equ	0xFDF
 23450                           postinc2	equ	0xFDE
 23451                           postdec2	equ	0xFDD
 23452                           fsr2h	equ	0xFDA
 23453                           fsr2l	equ	0xFD9
 23454                           status	equ	0xFD8
 23455                           
 23456 ;; *************** function _Grid_Over_Current *****************
 23457 ;; Defined at:
 23458 ;;		line 382 in file "ERROR_HANDLING.c"
 23459 ;; Parameters:    Size  Location     Type
 23460 ;;		None
 23461 ;; Auto vars:     Size  Location     Type
 23462 ;;		None
 23463 ;; Return value:  Size  Location     Type
 23464 ;;                  1    wreg      void 
 23465 ;; Registers used:
 23466 ;;		wreg, status,2, status,0, cstack
 23467 ;; Tracked objects:
 23468 ;;		On entry : 0/0
 23469 ;;		On exit  : 0/0
 23470 ;;		Unchanged: 0/0
 23471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23476 ;;Total ram usage:        0 bytes
 23477 ;; Hardware stack levels used:    1
 23478 ;; Hardware stack levels required when called:    4
 23479 ;; This function calls:
 23480 ;;		___ftge
 23481 ;; This function is called by:
 23482 ;;		_Error_Checking_One_Second
 23483 ;; This function uses a non-reentrant model
 23484 ;;
 23485                           
 23486                           	psect	text71
 23487  018536                     __ptext71:
 23488                           	opt stack 0
 23489  018536                     _Grid_Over_Current:
 23490                           	opt stack 24
 23491                           
 23492                           ;ERROR_HANDLING.c: 384: if( (Turbine_state == RAMPUP_STATE) || (Turbine_state == RUNNING
      +                          _STATE) )
 23493                           
 23494                           ;incstack = 0
 23495  018536  0100               	movlb	0	; () banked
 23496  018538  05F0               	decf	_Turbine_state& (0+255),w,b
 23497  01853A  B4D8               	btfsc	status,2,c
 23498  01853C  D005               	goto	l21277
 23499                           
 23500                           ; BSR set to: 0
 23501  01853E  0E02               	movlw	2
 23502  018540  0100               	movlb	0	; () banked
 23503  018542  19F0               	xorwf	_Turbine_state& (0+255),w,b
 23504  018544  A4D8               	btfss	status,2,c
 23505  018546  D04F               	goto	l6207
 23506  018548                     l21277:
 23507                           
 23508                           ; BSR set to: 0
 23509                           ;ERROR_HANDLING.c: 385: {
 23510                           ;ERROR_HANDLING.c: 386: if(R_Curr >= (12) || Y_Curr >= (12) || B_Curr >= (12))
 23511  018548  C0CD  F099         	movff	_R_Curr,___ftge@ff1
 23512  01854C  C0CE  F09A         	movff	_R_Curr+1,___ftge@ff1+1
 23513  018550  C0CF  F09B         	movff	_R_Curr+2,___ftge@ff1+2
 23514  018554  0E00               	movlw	0
 23515  018556  0100               	movlb	0	; () banked
 23516  018558  6F9C               	movwf	___ftge@ff2& (0+255),b
 23517  01855A  0E40               	movlw	64
 23518  01855C  0100               	movlb	0	; () banked
 23519  01855E  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23520  018560  0E41               	movlw	65
 23521  018562  0100               	movlb	0	; () banked
 23522  018564  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23523  018566  ECEB  F0CA         	call	___ftge	;wreg free
 23524  01856A  0100               	movlb	0	; () banked
 23525  01856C  B0D8               	btfsc	status,0,c
 23526  01856E  D028               	goto	l21283
 23527                           
 23528                           ; BSR set to: 0
 23529  018570  C0D6  F099         	movff	_Y_Curr,___ftge@ff1
 23530  018574  C0D7  F09A         	movff	_Y_Curr+1,___ftge@ff1+1
 23531  018578  C0D8  F09B         	movff	_Y_Curr+2,___ftge@ff1+2
 23532  01857C  0E00               	movlw	0
 23533  01857E  0100               	movlb	0	; () banked
 23534  018580  6F9C               	movwf	___ftge@ff2& (0+255),b
 23535  018582  0E40               	movlw	64
 23536  018584  0100               	movlb	0	; () banked
 23537  018586  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23538  018588  0E41               	movlw	65
 23539  01858A  0100               	movlb	0	; () banked
 23540  01858C  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23541  01858E  ECEB  F0CA         	call	___ftge	;wreg free
 23542  018592  0100               	movlb	0	; () banked
 23543  018594  B0D8               	btfsc	status,0,c
 23544  018596  D014               	goto	l21283
 23545                           
 23546                           ; BSR set to: 0
 23547  018598  C0C4  F099         	movff	_B_Curr,___ftge@ff1
 23548  01859C  C0C5  F09A         	movff	_B_Curr+1,___ftge@ff1+1
 23549  0185A0  C0C6  F09B         	movff	_B_Curr+2,___ftge@ff1+2
 23550  0185A4  0E00               	movlw	0
 23551  0185A6  0100               	movlb	0	; () banked
 23552  0185A8  6F9C               	movwf	___ftge@ff2& (0+255),b
 23553  0185AA  0E40               	movlw	64
 23554  0185AC  0100               	movlb	0	; () banked
 23555  0185AE  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23556  0185B0  0E41               	movlw	65
 23557  0185B2  0100               	movlb	0	; () banked
 23558  0185B4  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23559  0185B6  ECEB  F0CA         	call	___ftge	;wreg free
 23560  0185BA  0100               	movlb	0	; () banked
 23561  0185BC  A0D8               	btfss	status,0,c
 23562  0185BE  D00E               	goto	l21289
 23563  0185C0                     l21283:
 23564                           
 23565                           ; BSR set to: 0
 23566                           ;ERROR_HANDLING.c: 387: {
 23567                           ;ERROR_HANDLING.c: 388: OV_Counter++;
 23568  0185C0  0101               	movlb	1	; () banked
 23569  0185C2  2B71               	incf	_OV_Counter& (0+255),f,b
 23570                           
 23571                           ; BSR set to: 1
 23572                           ;ERROR_HANDLING.c: 389: if(OV_Counter == 1)
 23573  0185C4  0101               	movlb	1	; () banked
 23574  0185C6  0571               	decf	_OV_Counter& (0+255),w,b
 23575  0185C8  A4D8               	btfss	status,2,c
 23576  0185CA  D00D               	goto	l6207
 23577                           
 23578                           ; BSR set to: 1
 23579                           ;ERROR_HANDLING.c: 390: {
 23580                           ;ERROR_HANDLING.c: 391: OV_Counter = 0;
 23581  0185CC  0E00               	movlw	0
 23582  0185CE  0101               	movlb	1	; () banked
 23583  0185D0  6F71               	movwf	_OV_Counter& (0+255),b
 23584                           
 23585                           ;ERROR_HANDLING.c: 392: Grid_Over_current = 1;
 23586  0185D2  0E01               	movlw	1
 23587  0185D4  6E1C               	movwf	_Grid_Over_current,c
 23588                           
 23589                           ;ERROR_HANDLING.c: 393: Errors = CURRENT_H;
 23590  0185D6  0E09               	movlw	9
 23591  0185D8  6E1B               	movwf	_Errors,c
 23592                           
 23593                           ; BSR set to: 1
 23594                           ;ERROR_HANDLING.c: 394: }
 23595                           ;ERROR_HANDLING.c: 396: }
 23596  0185DA  D005               	goto	l6207
 23597  0185DC                     l21289:
 23598                           
 23599                           ;ERROR_HANDLING.c: 397: else
 23600                           ;ERROR_HANDLING.c: 398: {
 23601                           ;ERROR_HANDLING.c: 399: Grid_Over_current = 0;
 23602  0185DC  0E00               	movlw	0
 23603  0185DE  6E1C               	movwf	_Grid_Over_current,c
 23604                           
 23605                           ;ERROR_HANDLING.c: 400: OV_Counter = 0;
 23606  0185E0  0E00               	movlw	0
 23607  0185E2  0101               	movlb	1	; () banked
 23608  0185E4  6F71               	movwf	_OV_Counter& (0+255),b
 23609  0185E6                     l6207:
 23610                           
 23611                           ;ERROR_HANDLING.c: 401: }
 23612                           ;ERROR_HANDLING.c: 402: }
 23613                           ;ERROR_HANDLING.c: 403: if(Turbine_state == STARTUP_STATE)
 23614  0185E6  0100               	movlb	0	; () banked
 23615  0185E8  51F0               	movf	_Turbine_state& (0+255),w,b
 23616  0185EA  A4D8               	btfss	status,2,c
 23617  0185EC  0012               	return	
 23618                           
 23619                           ; BSR set to: 0
 23620                           ;ERROR_HANDLING.c: 404: {
 23621                           ;ERROR_HANDLING.c: 405: if(R_Curr >= 0.5 || Y_Curr >= 0.5 || B_Curr >= 0.5)
 23622  0185EE  C0CD  F099         	movff	_R_Curr,___ftge@ff1
 23623  0185F2  C0CE  F09A         	movff	_R_Curr+1,___ftge@ff1+1
 23624  0185F6  C0CF  F09B         	movff	_R_Curr+2,___ftge@ff1+2
 23625  0185FA  0E00               	movlw	0
 23626  0185FC  0100               	movlb	0	; () banked
 23627  0185FE  6F9C               	movwf	___ftge@ff2& (0+255),b
 23628  018600  0E00               	movlw	0
 23629  018602  0100               	movlb	0	; () banked
 23630  018604  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23631  018606  0E3F               	movlw	63
 23632  018608  0100               	movlb	0	; () banked
 23633  01860A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23634  01860C  ECEB  F0CA         	call	___ftge	;wreg free
 23635  018610  0100               	movlb	0	; () banked
 23636  018612  B0D8               	btfsc	status,0,c
 23637  018614  D028               	goto	l21297
 23638                           
 23639                           ; BSR set to: 0
 23640  018616  C0D6  F099         	movff	_Y_Curr,___ftge@ff1
 23641  01861A  C0D7  F09A         	movff	_Y_Curr+1,___ftge@ff1+1
 23642  01861E  C0D8  F09B         	movff	_Y_Curr+2,___ftge@ff1+2
 23643  018622  0E00               	movlw	0
 23644  018624  0100               	movlb	0	; () banked
 23645  018626  6F9C               	movwf	___ftge@ff2& (0+255),b
 23646  018628  0E00               	movlw	0
 23647  01862A  0100               	movlb	0	; () banked
 23648  01862C  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23649  01862E  0E3F               	movlw	63
 23650  018630  0100               	movlb	0	; () banked
 23651  018632  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23652  018634  ECEB  F0CA         	call	___ftge	;wreg free
 23653  018638  0100               	movlb	0	; () banked
 23654  01863A  B0D8               	btfsc	status,0,c
 23655  01863C  D014               	goto	l21297
 23656                           
 23657                           ; BSR set to: 0
 23658  01863E  C0C4  F099         	movff	_B_Curr,___ftge@ff1
 23659  018642  C0C5  F09A         	movff	_B_Curr+1,___ftge@ff1+1
 23660  018646  C0C6  F09B         	movff	_B_Curr+2,___ftge@ff1+2
 23661  01864A  0E00               	movlw	0
 23662  01864C  0100               	movlb	0	; () banked
 23663  01864E  6F9C               	movwf	___ftge@ff2& (0+255),b
 23664  018650  0E00               	movlw	0
 23665  018652  0100               	movlb	0	; () banked
 23666  018654  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23667  018656  0E3F               	movlw	63
 23668  018658  0100               	movlb	0	; () banked
 23669  01865A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23670  01865C  ECEB  F0CA         	call	___ftge	;wreg free
 23671  018660  0100               	movlb	0	; () banked
 23672  018662  A0D8               	btfss	status,0,c
 23673  018664  D005               	goto	l21299
 23674  018666                     l21297:
 23675                           
 23676                           ; BSR set to: 0
 23677                           ;ERROR_HANDLING.c: 406: {
 23678                           ;ERROR_HANDLING.c: 407: Grid_Over_current = 1;
 23679  018666  0E01               	movlw	1
 23680  018668  6E1C               	movwf	_Grid_Over_current,c
 23681                           
 23682                           ;ERROR_HANDLING.c: 408: Errors = MEAURE_ERR;
 23683  01866A  0E16               	movlw	22
 23684  01866C  6E1B               	movwf	_Errors,c
 23685                           
 23686                           ;ERROR_HANDLING.c: 409: }
 23687  01866E  0012               	return	
 23688  018670                     l21299:
 23689                           
 23690                           ; BSR set to: 0
 23691                           ;ERROR_HANDLING.c: 410: else
 23692                           ;ERROR_HANDLING.c: 411: {
 23693                           ;ERROR_HANDLING.c: 412: Grid_Over_current = 0;
 23694  018670  0E00               	movlw	0
 23695  018672  6E1C               	movwf	_Grid_Over_current,c
 23696                           
 23697                           ; BSR set to: 0
 23698  018674  0012               	return	
 23699  018676                     __end_of_Grid_Over_Current:
 23700                           	opt stack 0
 23701                           tblptru	equ	0xFF8
 23702                           tblptrh	equ	0xFF7
 23703                           tblptrl	equ	0xFF6
 23704                           tablat	equ	0xFF5
 23705                           prodh	equ	0xFF4
 23706                           prodl	equ	0xFF3
 23707                           intcon	equ	0xFF2
 23708                           postinc0	equ	0xFEE
 23709                           wreg	equ	0xFE8
 23710                           postdec1	equ	0xFE5
 23711                           fsr1h	equ	0xFE2
 23712                           fsr1l	equ	0xFE1
 23713                           indf2	equ	0xFDF
 23714                           postinc2	equ	0xFDE
 23715                           postdec2	equ	0xFDD
 23716                           fsr2h	equ	0xFDA
 23717                           fsr2l	equ	0xFD9
 23718                           status	equ	0xFD8
 23719                           
 23720 ;; *************** function _Grid_OV *****************
 23721 ;; Defined at:
 23722 ;;		line 269 in file "ERROR_HANDLING.c"
 23723 ;; Parameters:    Size  Location     Type
 23724 ;;		None
 23725 ;; Auto vars:     Size  Location     Type
 23726 ;;		None
 23727 ;; Return value:  Size  Location     Type
 23728 ;;                  1    wreg      void 
 23729 ;; Registers used:
 23730 ;;		wreg, status,2, status,0, cstack
 23731 ;; Tracked objects:
 23732 ;;		On entry : 0/0
 23733 ;;		On exit  : 0/0
 23734 ;;		Unchanged: 0/0
 23735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23740 ;;Total ram usage:        0 bytes
 23741 ;; Hardware stack levels used:    1
 23742 ;; Hardware stack levels required when called:    4
 23743 ;; This function calls:
 23744 ;;		___ftge
 23745 ;; This function is called by:
 23746 ;;		_Error_Checking_One_Second
 23747 ;; This function uses a non-reentrant model
 23748 ;;
 23749                           
 23750                           	psect	text72
 23751  017E7A                     __ptext72:
 23752                           	opt stack 0
 23753  017E7A                     _Grid_OV:
 23754                           	opt stack 24
 23755                           
 23756                           ;ERROR_HANDLING.c: 271: if(Turbine_state == STARTUP_STATE)
 23757                           
 23758                           ; BSR set to: 0
 23759                           ;incstack = 0
 23760  017E7A  0100               	movlb	0	; () banked
 23761  017E7C  51F0               	movf	_Turbine_state& (0+255),w,b
 23762  017E7E  A4D8               	btfss	status,2,c
 23763  017E80  D055               	goto	l21171
 23764                           
 23765                           ; BSR set to: 0
 23766                           ;ERROR_HANDLING.c: 272: {
 23767                           ;ERROR_HANDLING.c: 273: if(R_Volt >= (450) || Y_Volt >= (450) || B_Volt >= (450))
 23768  017E82  C007  F099         	movff	_R_Volt,___ftge@ff1
 23769  017E86  C008  F09A         	movff	_R_Volt+1,___ftge@ff1+1
 23770  017E8A  C009  F09B         	movff	_R_Volt+2,___ftge@ff1+2
 23771  017E8E  0E00               	movlw	0
 23772  017E90  0100               	movlb	0	; () banked
 23773  017E92  6F9C               	movwf	___ftge@ff2& (0+255),b
 23774  017E94  0EE1               	movlw	225
 23775  017E96  0100               	movlb	0	; () banked
 23776  017E98  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23777  017E9A  0E43               	movlw	67
 23778  017E9C  0100               	movlb	0	; () banked
 23779  017E9E  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23780  017EA0  ECEB  F0CA         	call	___ftge	;wreg free
 23781  017EA4  0100               	movlb	0	; () banked
 23782  017EA6  B0D8               	btfsc	status,0,c
 23783  017EA8  D028               	goto	l21161
 23784                           
 23785                           ; BSR set to: 0
 23786  017EAA  C010  F099         	movff	_Y_Volt,___ftge@ff1
 23787  017EAE  C011  F09A         	movff	_Y_Volt+1,___ftge@ff1+1
 23788  017EB2  C012  F09B         	movff	_Y_Volt+2,___ftge@ff1+2
 23789  017EB6  0E00               	movlw	0
 23790  017EB8  0100               	movlb	0	; () banked
 23791  017EBA  6F9C               	movwf	___ftge@ff2& (0+255),b
 23792  017EBC  0EE1               	movlw	225
 23793  017EBE  0100               	movlb	0	; () banked
 23794  017EC0  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23795  017EC2  0E43               	movlw	67
 23796  017EC4  0100               	movlb	0	; () banked
 23797  017EC6  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23798  017EC8  ECEB  F0CA         	call	___ftge	;wreg free
 23799  017ECC  0100               	movlb	0	; () banked
 23800  017ECE  B0D8               	btfsc	status,0,c
 23801  017ED0  D014               	goto	l21161
 23802                           
 23803                           ; BSR set to: 0
 23804  017ED2  C001  F099         	movff	_B_Volt,___ftge@ff1
 23805  017ED6  C002  F09A         	movff	_B_Volt+1,___ftge@ff1+1
 23806  017EDA  C003  F09B         	movff	_B_Volt+2,___ftge@ff1+2
 23807  017EDE  0E00               	movlw	0
 23808  017EE0  0100               	movlb	0	; () banked
 23809  017EE2  6F9C               	movwf	___ftge@ff2& (0+255),b
 23810  017EE4  0EE1               	movlw	225
 23811  017EE6  0100               	movlb	0	; () banked
 23812  017EE8  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23813  017EEA  0E43               	movlw	67
 23814  017EEC  0100               	movlb	0	; () banked
 23815  017EEE  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23816  017EF0  ECEB  F0CA         	call	___ftge	;wreg free
 23817  017EF4  0100               	movlb	0	; () banked
 23818  017EF6  A0D8               	btfss	status,0,c
 23819  017EF8  D013               	goto	l21169
 23820  017EFA                     l21161:
 23821                           
 23822                           ; BSR set to: 0
 23823                           ;ERROR_HANDLING.c: 274: {
 23824                           ;ERROR_HANDLING.c: 275: Grid_Ov_Counter++;
 23825  017EFA  0101               	movlb	1	; () banked
 23826  017EFC  2B64               	incf	_Grid_Ov_Counter& (0+255),f,b
 23827                           
 23828                           ; BSR set to: 1
 23829                           ;ERROR_HANDLING.c: 276: if(Grid_Ov_Counter >= 2)
 23830  017EFE  0E01               	movlw	1
 23831  017F00  0101               	movlb	1	; () banked
 23832  017F02  6564               	cpfsgt	_Grid_Ov_Counter& (0+255),b
 23833  017F04  D009               	goto	l21167
 23834                           
 23835                           ; BSR set to: 1
 23836                           ;ERROR_HANDLING.c: 277: {
 23837                           ;ERROR_HANDLING.c: 278: Grid_Ov_Counter = 0;
 23838  017F06  0E00               	movlw	0
 23839  017F08  0101               	movlb	1	; () banked
 23840  017F0A  6F64               	movwf	_Grid_Ov_Counter& (0+255),b
 23841                           
 23842                           ;ERROR_HANDLING.c: 279: Grid_Ovr_voltage = 1;
 23843  017F0C  0E01               	movlw	1
 23844  017F0E  0101               	movlb	1	; () banked
 23845  017F10  6F65               	movwf	_Grid_Ovr_voltage& (0+255),b
 23846                           
 23847                           ;ERROR_HANDLING.c: 280: Errors = VOLT_HIGH;
 23848  017F12  0E18               	movlw	24
 23849  017F14  6E1B               	movwf	_Errors,c
 23850                           
 23851                           ;ERROR_HANDLING.c: 281: }
 23852  017F16  D00A               	goto	l21171
 23853  017F18                     l21167:
 23854                           
 23855                           ; BSR set to: 1
 23856                           ;ERROR_HANDLING.c: 282: else
 23857                           ;ERROR_HANDLING.c: 283: {
 23858                           ;ERROR_HANDLING.c: 284: Grid_Ovr_voltage = 0;
 23859  017F18  0E00               	movlw	0
 23860  017F1A  0101               	movlb	1	; () banked
 23861  017F1C  6F65               	movwf	_Grid_Ovr_voltage& (0+255),b
 23862                           
 23863                           ; BSR set to: 1
 23864                           ;ERROR_HANDLING.c: 285: }
 23865                           ;ERROR_HANDLING.c: 286: }
 23866  017F1E  D006               	goto	l21171
 23867  017F20                     l21169:
 23868                           
 23869                           ;ERROR_HANDLING.c: 287: else
 23870                           ;ERROR_HANDLING.c: 288: {
 23871                           ;ERROR_HANDLING.c: 289: Grid_Ovr_voltage = 0;
 23872  017F20  0E00               	movlw	0
 23873  017F22  0101               	movlb	1	; () banked
 23874  017F24  6F65               	movwf	_Grid_Ovr_voltage& (0+255),b
 23875                           
 23876                           ;ERROR_HANDLING.c: 290: Grid_Ov_Counter = 0;
 23877  017F26  0E00               	movlw	0
 23878  017F28  0101               	movlb	1	; () banked
 23879  017F2A  6F64               	movwf	_Grid_Ov_Counter& (0+255),b
 23880  017F2C                     l21171:
 23881                           
 23882                           ;ERROR_HANDLING.c: 291: }
 23883                           ;ERROR_HANDLING.c: 292: }
 23884                           ;ERROR_HANDLING.c: 293: if(Turbine_state == RUNNING_STATE)
 23885  017F2C  0E02               	movlw	2
 23886  017F2E  0100               	movlb	0	; () banked
 23887  017F30  19F0               	xorwf	_Turbine_state& (0+255),w,b
 23888  017F32  A4D8               	btfss	status,2,c
 23889  017F34  0012               	return	
 23890                           
 23891                           ; BSR set to: 0
 23892                           ;ERROR_HANDLING.c: 294: {
 23893                           ;ERROR_HANDLING.c: 295: if(R_Volt >= (450) || Y_Volt >= (450) || B_Volt >= (450))
 23894  017F36  C007  F099         	movff	_R_Volt,___ftge@ff1
 23895  017F3A  C008  F09A         	movff	_R_Volt+1,___ftge@ff1+1
 23896  017F3E  C009  F09B         	movff	_R_Volt+2,___ftge@ff1+2
 23897  017F42  0E00               	movlw	0
 23898  017F44  0100               	movlb	0	; () banked
 23899  017F46  6F9C               	movwf	___ftge@ff2& (0+255),b
 23900  017F48  0EE1               	movlw	225
 23901  017F4A  0100               	movlb	0	; () banked
 23902  017F4C  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23903  017F4E  0E43               	movlw	67
 23904  017F50  0100               	movlb	0	; () banked
 23905  017F52  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23906  017F54  ECEB  F0CA         	call	___ftge	;wreg free
 23907  017F58  0100               	movlb	0	; () banked
 23908  017F5A  B0D8               	btfsc	status,0,c
 23909  017F5C  D028               	goto	l21179
 23910                           
 23911                           ; BSR set to: 0
 23912  017F5E  C010  F099         	movff	_Y_Volt,___ftge@ff1
 23913  017F62  C011  F09A         	movff	_Y_Volt+1,___ftge@ff1+1
 23914  017F66  C012  F09B         	movff	_Y_Volt+2,___ftge@ff1+2
 23915  017F6A  0E00               	movlw	0
 23916  017F6C  0100               	movlb	0	; () banked
 23917  017F6E  6F9C               	movwf	___ftge@ff2& (0+255),b
 23918  017F70  0EE1               	movlw	225
 23919  017F72  0100               	movlb	0	; () banked
 23920  017F74  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23921  017F76  0E43               	movlw	67
 23922  017F78  0100               	movlb	0	; () banked
 23923  017F7A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23924  017F7C  ECEB  F0CA         	call	___ftge	;wreg free
 23925  017F80  0100               	movlb	0	; () banked
 23926  017F82  B0D8               	btfsc	status,0,c
 23927  017F84  D014               	goto	l21179
 23928                           
 23929                           ; BSR set to: 0
 23930  017F86  C001  F099         	movff	_B_Volt,___ftge@ff1
 23931  017F8A  C002  F09A         	movff	_B_Volt+1,___ftge@ff1+1
 23932  017F8E  C003  F09B         	movff	_B_Volt+2,___ftge@ff1+2
 23933  017F92  0E00               	movlw	0
 23934  017F94  0100               	movlb	0	; () banked
 23935  017F96  6F9C               	movwf	___ftge@ff2& (0+255),b
 23936  017F98  0EE1               	movlw	225
 23937  017F9A  0100               	movlb	0	; () banked
 23938  017F9C  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 23939  017F9E  0E43               	movlw	67
 23940  017FA0  0100               	movlb	0	; () banked
 23941  017FA2  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 23942  017FA4  ECEB  F0CA         	call	___ftge	;wreg free
 23943  017FA8  0100               	movlb	0	; () banked
 23944  017FAA  A0D8               	btfss	status,0,c
 23945  017FAC  D013               	goto	l21187
 23946  017FAE                     l21179:
 23947                           
 23948                           ; BSR set to: 0
 23949                           ;ERROR_HANDLING.c: 296: {
 23950                           ;ERROR_HANDLING.c: 297: Grid_Ov_Counter++;
 23951  017FAE  0101               	movlb	1	; () banked
 23952  017FB0  2B64               	incf	_Grid_Ov_Counter& (0+255),f,b
 23953                           
 23954                           ; BSR set to: 1
 23955                           ;ERROR_HANDLING.c: 298: if(Grid_Ov_Counter >= 10)
 23956  017FB2  0E09               	movlw	9
 23957  017FB4  0101               	movlb	1	; () banked
 23958  017FB6  6564               	cpfsgt	_Grid_Ov_Counter& (0+255),b
 23959  017FB8  D009               	goto	l21185
 23960                           
 23961                           ; BSR set to: 1
 23962                           ;ERROR_HANDLING.c: 299: {
 23963                           ;ERROR_HANDLING.c: 300: Grid_Ov_Counter = 0;
 23964  017FBA  0E00               	movlw	0
 23965  017FBC  0101               	movlb	1	; () banked
 23966  017FBE  6F64               	movwf	_Grid_Ov_Counter& (0+255),b
 23967                           
 23968                           ;ERROR_HANDLING.c: 301: Grid_Ovr_voltage = 1;
 23969  017FC0  0E01               	movlw	1
 23970  017FC2  0101               	movlb	1	; () banked
 23971  017FC4  6F65               	movwf	_Grid_Ovr_voltage& (0+255),b
 23972                           
 23973                           ;ERROR_HANDLING.c: 302: Errors = VOLT_HIGH;
 23974  017FC6  0E18               	movlw	24
 23975  017FC8  6E1B               	movwf	_Errors,c
 23976                           
 23977                           ;ERROR_HANDLING.c: 303: }
 23978  017FCA  0012               	return	
 23979  017FCC                     l21185:
 23980                           
 23981                           ; BSR set to: 1
 23982                           ;ERROR_HANDLING.c: 304: else
 23983                           ;ERROR_HANDLING.c: 305: {
 23984                           ;ERROR_HANDLING.c: 306: Grid_Ovr_voltage = 0;
 23985  017FCC  0E00               	movlw	0
 23986  017FCE  0101               	movlb	1	; () banked
 23987  017FD0  6F65               	movwf	_Grid_Ovr_voltage& (0+255),b
 23988                           
 23989                           ; BSR set to: 1
 23990                           ;ERROR_HANDLING.c: 307: }
 23991                           ;ERROR_HANDLING.c: 308: }
 23992  017FD2  0012               	return	
 23993  017FD4                     l21187:
 23994                           
 23995                           ;ERROR_HANDLING.c: 309: else
 23996                           ;ERROR_HANDLING.c: 310: {
 23997                           ;ERROR_HANDLING.c: 311: Grid_Ovr_voltage = 0;
 23998  017FD4  0E00               	movlw	0
 23999  017FD6  0101               	movlb	1	; () banked
 24000  017FD8  6F65               	movwf	_Grid_Ovr_voltage& (0+255),b
 24001                           
 24002                           ;ERROR_HANDLING.c: 312: Grid_Ov_Counter = 0;
 24003  017FDA  0E00               	movlw	0
 24004  017FDC  0101               	movlb	1	; () banked
 24005  017FDE  6F64               	movwf	_Grid_Ov_Counter& (0+255),b
 24006                           
 24007                           ; BSR set to: 1
 24008  017FE0  0012               	return	
 24009  017FE2                     __end_of_Grid_OV:
 24010                           	opt stack 0
 24011                           tblptru	equ	0xFF8
 24012                           tblptrh	equ	0xFF7
 24013                           tblptrl	equ	0xFF6
 24014                           tablat	equ	0xFF5
 24015                           prodh	equ	0xFF4
 24016                           prodl	equ	0xFF3
 24017                           intcon	equ	0xFF2
 24018                           postinc0	equ	0xFEE
 24019                           wreg	equ	0xFE8
 24020                           postdec1	equ	0xFE5
 24021                           fsr1h	equ	0xFE2
 24022                           fsr1l	equ	0xFE1
 24023                           indf2	equ	0xFDF
 24024                           postinc2	equ	0xFDE
 24025                           postdec2	equ	0xFDD
 24026                           fsr2h	equ	0xFDA
 24027                           fsr2l	equ	0xFD9
 24028                           status	equ	0xFD8
 24029                           
 24030 ;; *************** function _Grid_Minimum_Power *****************
 24031 ;; Defined at:
 24032 ;;		line 437 in file "ERROR_HANDLING.c"
 24033 ;; Parameters:    Size  Location     Type
 24034 ;;		None
 24035 ;; Auto vars:     Size  Location     Type
 24036 ;;		None
 24037 ;; Return value:  Size  Location     Type
 24038 ;;                  1    wreg      void 
 24039 ;; Registers used:
 24040 ;;		wreg, status,2, status,0, cstack
 24041 ;; Tracked objects:
 24042 ;;		On entry : 0/0
 24043 ;;		On exit  : 0/0
 24044 ;;		Unchanged: 0/0
 24045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24050 ;;Total ram usage:        0 bytes
 24051 ;; Hardware stack levels used:    1
 24052 ;; Hardware stack levels required when called:    4
 24053 ;; This function calls:
 24054 ;;		___ftge
 24055 ;; This function is called by:
 24056 ;;		_Error_Checking_One_Second
 24057 ;; This function uses a non-reentrant model
 24058 ;;
 24059                           
 24060                           	psect	text73
 24061  01A962                     __ptext73:
 24062                           	opt stack 0
 24063  01A962                     _Grid_Minimum_Power:
 24064                           	opt stack 24
 24065                           
 24066                           ;ERROR_HANDLING.c: 439: if(KW <= (-5.0))
 24067                           
 24068                           ;incstack = 0
 24069  01A962  0E00               	movlw	0
 24070  01A964  0100               	movlb	0	; () banked
 24071  01A966  6F99               	movwf	___ftge@ff1& (0+255),b
 24072  01A968  0EA0               	movlw	160
 24073  01A96A  0100               	movlb	0	; () banked
 24074  01A96C  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 24075  01A96E  0EC0               	movlw	192
 24076  01A970  0100               	movlb	0	; () banked
 24077  01A972  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 24078  01A974  C022  F09C         	movff	_KW,___ftge@ff2
 24079  01A978  C023  F09D         	movff	_KW+1,___ftge@ff2+1
 24080  01A97C  C024  F09E         	movff	_KW+2,___ftge@ff2+2
 24081  01A980  ECEB  F0CA         	call	___ftge	;wreg free
 24082  01A984  0100               	movlb	0	; () banked
 24083  01A986  A0D8               	btfss	status,0,c
 24084  01A988  D013               	goto	l21407
 24085                           
 24086                           ; BSR set to: 0
 24087                           ;ERROR_HANDLING.c: 440: {
 24088                           ;ERROR_HANDLING.c: 441: KW_Counter_Max++;
 24089  01A98A  0101               	movlb	1	; () banked
 24090  01A98C  2B69               	incf	_KW_Counter_Max& (0+255),f,b
 24091                           
 24092                           ; BSR set to: 1
 24093                           ;ERROR_HANDLING.c: 442: if(KW_Counter_Max >= 60)
 24094  01A98E  0E3B               	movlw	59
 24095  01A990  0101               	movlb	1	; () banked
 24096  01A992  6569               	cpfsgt	_KW_Counter_Max& (0+255),b
 24097  01A994  D009               	goto	l21405
 24098                           
 24099                           ; BSR set to: 1
 24100                           ;ERROR_HANDLING.c: 443: {
 24101                           ;ERROR_HANDLING.c: 444: KW_Counter_Max = 0;
 24102  01A996  0E00               	movlw	0
 24103  01A998  0101               	movlb	1	; () banked
 24104  01A99A  6F69               	movwf	_KW_Counter_Max& (0+255),b
 24105                           
 24106                           ;ERROR_HANDLING.c: 445: KW_Minimum_Error = 1;
 24107  01A99C  0E01               	movlw	1
 24108  01A99E  0101               	movlb	1	; () banked
 24109  01A9A0  6F6B               	movwf	_KW_Minimum_Error& (0+255),b
 24110                           
 24111                           ;ERROR_HANDLING.c: 446: Errors = POWER_MIN;
 24112  01A9A2  0E0F               	movlw	15
 24113  01A9A4  6E1B               	movwf	_Errors,c
 24114                           
 24115                           ;ERROR_HANDLING.c: 447: }
 24116  01A9A6  0012               	return	
 24117  01A9A8                     l21405:
 24118                           
 24119                           ; BSR set to: 1
 24120                           ;ERROR_HANDLING.c: 448: else
 24121                           ;ERROR_HANDLING.c: 449: {
 24122                           ;ERROR_HANDLING.c: 450: KW_Minimum_Error = 0;
 24123  01A9A8  0E00               	movlw	0
 24124  01A9AA  0101               	movlb	1	; () banked
 24125  01A9AC  6F6B               	movwf	_KW_Minimum_Error& (0+255),b
 24126                           
 24127                           ; BSR set to: 1
 24128                           ;ERROR_HANDLING.c: 451: }
 24129                           ;ERROR_HANDLING.c: 452: }
 24130  01A9AE  0012               	return	
 24131  01A9B0                     l21407:
 24132                           
 24133                           ;ERROR_HANDLING.c: 453: else
 24134                           ;ERROR_HANDLING.c: 454: {
 24135                           ;ERROR_HANDLING.c: 455: KW_Minimum_Error =0;
 24136  01A9B0  0E00               	movlw	0
 24137  01A9B2  0101               	movlb	1	; () banked
 24138  01A9B4  6F6B               	movwf	_KW_Minimum_Error& (0+255),b
 24139                           
 24140                           ;ERROR_HANDLING.c: 456: KW_Counter_Max = 0;
 24141  01A9B6  0E00               	movlw	0
 24142  01A9B8  0101               	movlb	1	; () banked
 24143  01A9BA  6F69               	movwf	_KW_Counter_Max& (0+255),b
 24144  01A9BC  0012               	return	
 24145  01A9BE                     __end_of_Grid_Minimum_Power:
 24146                           	opt stack 0
 24147                           tblptru	equ	0xFF8
 24148                           tblptrh	equ	0xFF7
 24149                           tblptrl	equ	0xFF6
 24150                           tablat	equ	0xFF5
 24151                           prodh	equ	0xFF4
 24152                           prodl	equ	0xFF3
 24153                           intcon	equ	0xFF2
 24154                           postinc0	equ	0xFEE
 24155                           wreg	equ	0xFE8
 24156                           postdec1	equ	0xFE5
 24157                           fsr1h	equ	0xFE2
 24158                           fsr1l	equ	0xFE1
 24159                           indf2	equ	0xFDF
 24160                           postinc2	equ	0xFDE
 24161                           postdec2	equ	0xFDD
 24162                           fsr2h	equ	0xFDA
 24163                           fsr2l	equ	0xFD9
 24164                           status	equ	0xFD8
 24165                           
 24166 ;; *************** function _Grid_Maximum_Power *****************
 24167 ;; Defined at:
 24168 ;;		line 459 in file "ERROR_HANDLING.c"
 24169 ;; Parameters:    Size  Location     Type
 24170 ;;		None
 24171 ;; Auto vars:     Size  Location     Type
 24172 ;;		None
 24173 ;; Return value:  Size  Location     Type
 24174 ;;                  1    wreg      void 
 24175 ;; Registers used:
 24176 ;;		wreg, status,2, status,0, cstack
 24177 ;; Tracked objects:
 24178 ;;		On entry : 0/0
 24179 ;;		On exit  : 0/0
 24180 ;;		Unchanged: 0/0
 24181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24186 ;;Total ram usage:        0 bytes
 24187 ;; Hardware stack levels used:    1
 24188 ;; Hardware stack levels required when called:    4
 24189 ;; This function calls:
 24190 ;;		___ftge
 24191 ;; This function is called by:
 24192 ;;		_Error_Checking_One_Second
 24193 ;; This function uses a non-reentrant model
 24194 ;;
 24195                           
 24196                           	psect	text74
 24197  01A9BE                     __ptext74:
 24198                           	opt stack 0
 24199  01A9BE                     _Grid_Maximum_Power:
 24200                           	opt stack 24
 24201                           
 24202                           ;ERROR_HANDLING.c: 461: if(KW >= (6.0))
 24203                           
 24204                           ; BSR set to: 1
 24205                           ;incstack = 0
 24206  01A9BE  C022  F099         	movff	_KW,___ftge@ff1
 24207  01A9C2  C023  F09A         	movff	_KW+1,___ftge@ff1+1
 24208  01A9C6  C024  F09B         	movff	_KW+2,___ftge@ff1+2
 24209  01A9CA  0E00               	movlw	0
 24210  01A9CC  0100               	movlb	0	; () banked
 24211  01A9CE  6F9C               	movwf	___ftge@ff2& (0+255),b
 24212  01A9D0  0EC0               	movlw	192
 24213  01A9D2  0100               	movlb	0	; () banked
 24214  01A9D4  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 24215  01A9D6  0E40               	movlw	64
 24216  01A9D8  0100               	movlb	0	; () banked
 24217  01A9DA  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 24218  01A9DC  ECEB  F0CA         	call	___ftge	;wreg free
 24219  01A9E0  0100               	movlb	0	; () banked
 24220  01A9E2  A0D8               	btfss	status,0,c
 24221  01A9E4  D013               	goto	l21419
 24222                           
 24223                           ; BSR set to: 0
 24224                           ;ERROR_HANDLING.c: 462: {
 24225                           ;ERROR_HANDLING.c: 463: KW_Counter++;
 24226  01A9E6  0101               	movlb	1	; () banked
 24227  01A9E8  2B68               	incf	_KW_Counter& (0+255),f,b
 24228                           
 24229                           ; BSR set to: 1
 24230                           ;ERROR_HANDLING.c: 464: if(KW_Counter >= 30)
 24231  01A9EA  0E1D               	movlw	29
 24232  01A9EC  0101               	movlb	1	; () banked
 24233  01A9EE  6568               	cpfsgt	_KW_Counter& (0+255),b
 24234  01A9F0  D009               	goto	l21417
 24235                           
 24236                           ; BSR set to: 1
 24237                           ;ERROR_HANDLING.c: 465: {
 24238                           ;ERROR_HANDLING.c: 466: KW_Counter = 0;
 24239  01A9F2  0E00               	movlw	0
 24240  01A9F4  0101               	movlb	1	; () banked
 24241  01A9F6  6F68               	movwf	_KW_Counter& (0+255),b
 24242                           
 24243                           ;ERROR_HANDLING.c: 467: KW_Maximum_Error = 1;
 24244  01A9F8  0E01               	movlw	1
 24245  01A9FA  0101               	movlb	1	; () banked
 24246  01A9FC  6F6A               	movwf	_KW_Maximum_Error& (0+255),b
 24247                           
 24248                           ;ERROR_HANDLING.c: 468: Errors = POWER_MAX;
 24249  01A9FE  0E0E               	movlw	14
 24250  01AA00  6E1B               	movwf	_Errors,c
 24251                           
 24252                           ;ERROR_HANDLING.c: 469: }
 24253  01AA02  0012               	return	
 24254  01AA04                     l21417:
 24255                           
 24256                           ; BSR set to: 1
 24257                           ;ERROR_HANDLING.c: 470: else
 24258                           ;ERROR_HANDLING.c: 471: {
 24259                           ;ERROR_HANDLING.c: 472: KW_Maximum_Error =0;
 24260  01AA04  0E00               	movlw	0
 24261  01AA06  0101               	movlb	1	; () banked
 24262  01AA08  6F6A               	movwf	_KW_Maximum_Error& (0+255),b
 24263                           
 24264                           ; BSR set to: 1
 24265                           ;ERROR_HANDLING.c: 473: }
 24266                           ;ERROR_HANDLING.c: 474: }
 24267  01AA0A  0012               	return	
 24268  01AA0C                     l21419:
 24269                           
 24270                           ;ERROR_HANDLING.c: 475: else
 24271                           ;ERROR_HANDLING.c: 476: {
 24272                           ;ERROR_HANDLING.c: 477: KW_Counter = 0;
 24273  01AA0C  0E00               	movlw	0
 24274  01AA0E  0101               	movlb	1	; () banked
 24275  01AA10  6F68               	movwf	_KW_Counter& (0+255),b
 24276                           
 24277                           ;ERROR_HANDLING.c: 478: KW_Maximum_Error = 0;
 24278  01AA12  0E00               	movlw	0
 24279  01AA14  0101               	movlb	1	; () banked
 24280  01AA16  6F6A               	movwf	_KW_Maximum_Error& (0+255),b
 24281  01AA18  0012               	return	
 24282  01AA1A                     __end_of_Grid_Maximum_Power:
 24283                           	opt stack 0
 24284                           tblptru	equ	0xFF8
 24285                           tblptrh	equ	0xFF7
 24286                           tblptrl	equ	0xFF6
 24287                           tablat	equ	0xFF5
 24288                           prodh	equ	0xFF4
 24289                           prodl	equ	0xFF3
 24290                           intcon	equ	0xFF2
 24291                           postinc0	equ	0xFEE
 24292                           wreg	equ	0xFE8
 24293                           postdec1	equ	0xFE5
 24294                           fsr1h	equ	0xFE2
 24295                           fsr1l	equ	0xFE1
 24296                           indf2	equ	0xFDF
 24297                           postinc2	equ	0xFDE
 24298                           postdec2	equ	0xFDD
 24299                           fsr2h	equ	0xFDA
 24300                           fsr2l	equ	0xFD9
 24301                           status	equ	0xFD8
 24302                           
 24303 ;; *************** function _Grid_Frequency *****************
 24304 ;; Defined at:
 24305 ;;		line 359 in file "ERROR_HANDLING.c"
 24306 ;; Parameters:    Size  Location     Type
 24307 ;;		None
 24308 ;; Auto vars:     Size  Location     Type
 24309 ;;		None
 24310 ;; Return value:  Size  Location     Type
 24311 ;;                  1    wreg      void 
 24312 ;; Registers used:
 24313 ;;		wreg, status,2, status,0, cstack
 24314 ;; Tracked objects:
 24315 ;;		On entry : 0/0
 24316 ;;		On exit  : 0/0
 24317 ;;		Unchanged: 0/0
 24318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24323 ;;Total ram usage:        0 bytes
 24324 ;; Hardware stack levels used:    1
 24325 ;; Hardware stack levels required when called:    4
 24326 ;; This function calls:
 24327 ;;		___ftge
 24328 ;; This function is called by:
 24329 ;;		_Error_Checking_One_Second
 24330 ;; This function uses a non-reentrant model
 24331 ;;
 24332                           
 24333                           	psect	text75
 24334  01A428                     __ptext75:
 24335                           	opt stack 0
 24336  01A428                     _Grid_Frequency:
 24337                           	opt stack 24
 24338                           
 24339                           ;ERROR_HANDLING.c: 361: if(Frequency <= 47.5 || Frequency >=52.5)
 24340                           
 24341                           ; BSR set to: 1
 24342                           ;incstack = 0
 24343  01A428  0E00               	movlw	0
 24344  01A42A  0100               	movlb	0	; () banked
 24345  01A42C  6F99               	movwf	___ftge@ff1& (0+255),b
 24346  01A42E  0E3E               	movlw	62
 24347  01A430  0100               	movlb	0	; () banked
 24348  01A432  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 24349  01A434  0E42               	movlw	66
 24350  01A436  0100               	movlb	0	; () banked
 24351  01A438  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 24352  01A43A  C0C7  F09C         	movff	_Frequency,___ftge@ff2
 24353  01A43E  C0C8  F09D         	movff	_Frequency+1,___ftge@ff2+1
 24354  01A442  C0C9  F09E         	movff	_Frequency+2,___ftge@ff2+2
 24355  01A446  ECEB  F0CA         	call	___ftge	;wreg free
 24356  01A44A  0100               	movlb	0	; () banked
 24357  01A44C  B0D8               	btfsc	status,0,c
 24358  01A44E  D014               	goto	l21193
 24359                           
 24360                           ; BSR set to: 0
 24361  01A450  C0C7  F099         	movff	_Frequency,___ftge@ff1
 24362  01A454  C0C8  F09A         	movff	_Frequency+1,___ftge@ff1+1
 24363  01A458  C0C9  F09B         	movff	_Frequency+2,___ftge@ff1+2
 24364  01A45C  0E00               	movlw	0
 24365  01A45E  0100               	movlb	0	; () banked
 24366  01A460  6F9C               	movwf	___ftge@ff2& (0+255),b
 24367  01A462  0E52               	movlw	82
 24368  01A464  0100               	movlb	0	; () banked
 24369  01A466  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 24370  01A468  0E42               	movlw	66
 24371  01A46A  0100               	movlb	0	; () banked
 24372  01A46C  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 24373  01A46E  ECEB  F0CA         	call	___ftge	;wreg free
 24374  01A472  0100               	movlb	0	; () banked
 24375  01A474  A0D8               	btfss	status,0,c
 24376  01A476  D013               	goto	l21201
 24377  01A478                     l21193:
 24378                           
 24379                           ; BSR set to: 0
 24380                           ;ERROR_HANDLING.c: 362: {
 24381                           ;ERROR_HANDLING.c: 363: Frequency_Error_counter++;
 24382  01A478  0101               	movlb	1	; () banked
 24383  01A47A  2B59               	incf	_Frequency_Error_counter& (0+255),f,b
 24384                           
 24385                           ; BSR set to: 1
 24386                           ;ERROR_HANDLING.c: 364: if(Frequency_Error_counter >= 5)
 24387  01A47C  0E04               	movlw	4
 24388  01A47E  0101               	movlb	1	; () banked
 24389  01A480  6559               	cpfsgt	_Frequency_Error_counter& (0+255),b
 24390  01A482  D009               	goto	l21199
 24391                           
 24392                           ; BSR set to: 1
 24393                           ;ERROR_HANDLING.c: 365: {
 24394                           ;ERROR_HANDLING.c: 366: Frequency_Error_counter = 0;
 24395  01A484  0E00               	movlw	0
 24396  01A486  0101               	movlb	1	; () banked
 24397  01A488  6F59               	movwf	_Frequency_Error_counter& (0+255),b
 24398                           
 24399                           ;ERROR_HANDLING.c: 367: Grid_Frequency_Error = 1;
 24400  01A48A  0E01               	movlw	1
 24401  01A48C  0100               	movlb	0	; () banked
 24402  01A48E  6FE4               	movwf	_Grid_Frequency_Error& (0+255),b
 24403                           
 24404                           ;ERROR_HANDLING.c: 368: Errors = FREQ;
 24405  01A490  0E0C               	movlw	12
 24406  01A492  6E1B               	movwf	_Errors,c
 24407                           
 24408                           ;ERROR_HANDLING.c: 369: }
 24409  01A494  0012               	return	
 24410  01A496                     l21199:
 24411                           
 24412                           ;ERROR_HANDLING.c: 370: else
 24413                           ;ERROR_HANDLING.c: 371: {
 24414                           ;ERROR_HANDLING.c: 372: Grid_Frequency_Error = 0;
 24415  01A496  0E00               	movlw	0
 24416  01A498  0100               	movlb	0	; () banked
 24417  01A49A  6FE4               	movwf	_Grid_Frequency_Error& (0+255),b
 24418                           
 24419                           ; BSR set to: 0
 24420                           ;ERROR_HANDLING.c: 373: }
 24421                           ;ERROR_HANDLING.c: 374: }
 24422  01A49C  0012               	return	
 24423  01A49E                     l21201:
 24424                           
 24425                           ; BSR set to: 0
 24426                           ;ERROR_HANDLING.c: 375: else
 24427                           ;ERROR_HANDLING.c: 376: {
 24428                           ;ERROR_HANDLING.c: 377: Frequency_Error_counter = 0;
 24429  01A49E  0E00               	movlw	0
 24430  01A4A0  0101               	movlb	1	; () banked
 24431  01A4A2  6F59               	movwf	_Frequency_Error_counter& (0+255),b
 24432                           
 24433                           ;ERROR_HANDLING.c: 378: Grid_Frequency_Error = 0;
 24434  01A4A4  0E00               	movlw	0
 24435  01A4A6  0100               	movlb	0	; () banked
 24436  01A4A8  6FE4               	movwf	_Grid_Frequency_Error& (0+255),b
 24437  01A4AA  0012               	return	
 24438  01A4AC                     __end_of_Grid_Frequency:
 24439                           	opt stack 0
 24440                           tblptru	equ	0xFF8
 24441                           tblptrh	equ	0xFF7
 24442                           tblptrl	equ	0xFF6
 24443                           tablat	equ	0xFF5
 24444                           prodh	equ	0xFF4
 24445                           prodl	equ	0xFF3
 24446                           intcon	equ	0xFF2
 24447                           postinc0	equ	0xFEE
 24448                           wreg	equ	0xFE8
 24449                           postdec1	equ	0xFE5
 24450                           fsr1h	equ	0xFE2
 24451                           fsr1l	equ	0xFE1
 24452                           indf2	equ	0xFDF
 24453                           postinc2	equ	0xFDE
 24454                           postdec2	equ	0xFDD
 24455                           fsr2h	equ	0xFDA
 24456                           fsr2l	equ	0xFD9
 24457                           status	equ	0xFD8
 24458                           
 24459 ;; *************** function _Generator_RPM *****************
 24460 ;; Defined at:
 24461 ;;		line 418 in file "ERROR_HANDLING.c"
 24462 ;; Parameters:    Size  Location     Type
 24463 ;;		None
 24464 ;; Auto vars:     Size  Location     Type
 24465 ;;		None
 24466 ;; Return value:  Size  Location     Type
 24467 ;;                  1    wreg      void 
 24468 ;; Registers used:
 24469 ;;		wreg, status,2, status,0, cstack
 24470 ;; Tracked objects:
 24471 ;;		On entry : 0/0
 24472 ;;		On exit  : 0/0
 24473 ;;		Unchanged: 0/0
 24474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24479 ;;Total ram usage:        0 bytes
 24480 ;; Hardware stack levels used:    1
 24481 ;; Hardware stack levels required when called:    4
 24482 ;; This function calls:
 24483 ;;		___ftge
 24484 ;; This function is called by:
 24485 ;;		_Error_Checking_One_Second
 24486 ;; This function uses a non-reentrant model
 24487 ;;
 24488                           
 24489                           	psect	text76
 24490  01AA6E                     __ptext76:
 24491                           	opt stack 0
 24492  01AA6E                     _Generator_RPM:
 24493                           	opt stack 24
 24494                           
 24495                           ;ERROR_HANDLING.c: 420: if(Generator_RPM_FLT >= (1060))
 24496                           
 24497                           ; BSR set to: 0
 24498                           ;incstack = 0
 24499  01AA6E  C004  F099         	movff	_Generator_RPM_FLT,___ftge@ff1
 24500  01AA72  C005  F09A         	movff	_Generator_RPM_FLT+1,___ftge@ff1+1
 24501  01AA76  C006  F09B         	movff	_Generator_RPM_FLT+2,___ftge@ff1+2
 24502  01AA7A  0E80               	movlw	128
 24503  01AA7C  0100               	movlb	0	; () banked
 24504  01AA7E  6F9C               	movwf	___ftge@ff2& (0+255),b
 24505  01AA80  0E84               	movlw	132
 24506  01AA82  0100               	movlb	0	; () banked
 24507  01AA84  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 24508  01AA86  0E44               	movlw	68
 24509  01AA88  0100               	movlb	0	; () banked
 24510  01AA8A  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 24511  01AA8C  ECEB  F0CA         	call	___ftge	;wreg free
 24512  01AA90  0100               	movlb	0	; () banked
 24513  01AA92  A0D8               	btfss	status,0,c
 24514  01AA94  D00F               	goto	l21321
 24515                           
 24516                           ; BSR set to: 0
 24517                           ;ERROR_HANDLING.c: 421: {
 24518                           ;ERROR_HANDLING.c: 422: G_RPM_Counter++;
 24519  01AA96  0101               	movlb	1	; () banked
 24520  01AA98  2B5A               	incf	_G_RPM_Counter& (0+255),f,b
 24521                           
 24522                           ; BSR set to: 1
 24523                           ;ERROR_HANDLING.c: 423: if(G_RPM_Counter >= 10)
 24524  01AA9A  0E09               	movlw	9
 24525  01AA9C  0101               	movlb	1	; () banked
 24526  01AA9E  655A               	cpfsgt	_G_RPM_Counter& (0+255),b
 24527  01AAA0  0012               	return	
 24528                           
 24529                           ; BSR set to: 1
 24530                           ;ERROR_HANDLING.c: 424: {
 24531                           ;ERROR_HANDLING.c: 425: G_RPM_Counter = 0;
 24532  01AAA2  0E00               	movlw	0
 24533  01AAA4  0101               	movlb	1	; () banked
 24534  01AAA6  6F5A               	movwf	_G_RPM_Counter& (0+255),b
 24535                           
 24536                           ;ERROR_HANDLING.c: 426: Generator_Over_Speed = 1;
 24537  01AAA8  0E01               	movlw	1
 24538  01AAAA  0101               	movlb	1	; () banked
 24539  01AAAC  6F63               	movwf	_Generator_Over_Speed& (0+255),b
 24540                           
 24541                           ;ERROR_HANDLING.c: 427: Errors = GEN_OS;
 24542  01AAAE  0E0B               	movlw	11
 24543  01AAB0  6E1B               	movwf	_Errors,c
 24544                           
 24545                           ; BSR set to: 1
 24546                           ;ERROR_HANDLING.c: 428: }
 24547                           ;ERROR_HANDLING.c: 429: }
 24548  01AAB2  0012               	return	
 24549  01AAB4                     l21321:
 24550                           
 24551                           ;ERROR_HANDLING.c: 430: else
 24552                           ;ERROR_HANDLING.c: 431: {
 24553                           ;ERROR_HANDLING.c: 432: G_RPM_Counter = 0;
 24554  01AAB4  0E00               	movlw	0
 24555  01AAB6  0101               	movlb	1	; () banked
 24556  01AAB8  6F5A               	movwf	_G_RPM_Counter& (0+255),b
 24557                           
 24558                           ;ERROR_HANDLING.c: 433: Generator_Over_Speed = 0;
 24559  01AABA  0E00               	movlw	0
 24560  01AABC  0101               	movlb	1	; () banked
 24561  01AABE  6F63               	movwf	_Generator_Over_Speed& (0+255),b
 24562  01AAC0  0012               	return	
 24563  01AAC2                     __end_of_Generator_RPM:
 24564                           	opt stack 0
 24565                           tblptru	equ	0xFF8
 24566                           tblptrh	equ	0xFF7
 24567                           tblptrl	equ	0xFF6
 24568                           tablat	equ	0xFF5
 24569                           prodh	equ	0xFF4
 24570                           prodl	equ	0xFF3
 24571                           intcon	equ	0xFF2
 24572                           postinc0	equ	0xFEE
 24573                           wreg	equ	0xFE8
 24574                           postdec1	equ	0xFE5
 24575                           fsr1h	equ	0xFE2
 24576                           fsr1l	equ	0xFE1
 24577                           indf2	equ	0xFDF
 24578                           postinc2	equ	0xFDE
 24579                           postdec2	equ	0xFDD
 24580                           fsr2h	equ	0xFDA
 24581                           fsr2l	equ	0xFD9
 24582                           status	equ	0xFD8
 24583                           
 24584 ;; *************** function _Generator_One_Feedback *****************
 24585 ;; Defined at:
 24586 ;;		line 647 in file "ERROR_HANDLING.c"
 24587 ;; Parameters:    Size  Location     Type
 24588 ;;		None
 24589 ;; Auto vars:     Size  Location     Type
 24590 ;;		None
 24591 ;; Return value:  Size  Location     Type
 24592 ;;                  1    wreg      void 
 24593 ;; Registers used:
 24594 ;;		wreg, status,2, status,0, cstack
 24595 ;; Tracked objects:
 24596 ;;		On entry : 0/0
 24597 ;;		On exit  : 0/0
 24598 ;;		Unchanged: 0/0
 24599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24604 ;;Total ram usage:        0 bytes
 24605 ;; Hardware stack levels used:    1
 24606 ;; Hardware stack levels required when called:    4
 24607 ;; This function calls:
 24608 ;;		_int_eeprom_write
 24609 ;; This function is called by:
 24610 ;;		_Error_Checking_One_Second
 24611 ;; This function uses a non-reentrant model
 24612 ;;
 24613                           
 24614                           	psect	text77
 24615  01A774                     __ptext77:
 24616                           	opt stack 0
 24617  01A774                     _Generator_One_Feedback:
 24618                           	opt stack 24
 24619                           
 24620                           ;ERROR_HANDLING.c: 649: if(RB2 == 0 && RD2 == 1 )
 24621                           
 24622                           ; BSR set to: 1
 24623                           ;incstack = 0
 24624  01A774  A481               	btfss	3969,2,c	;volatile
 24625  01A776  A483               	btfss	3971,2,c	;volatile
 24626  01A778  D013               	goto	l6295
 24627                           
 24628                           ;ERROR_HANDLING.c: 650: {
 24629                           ;ERROR_HANDLING.c: 651: Generator_One_Feedback_Error = 0;
 24630  01A77A  0E00               	movlw	0
 24631  01A77C  0101               	movlb	1	; () banked
 24632  01A77E  6F62               	movwf	_Generator_One_Feedback_Error& (0+255),b
 24633                           
 24634                           ;ERROR_HANDLING.c: 652: Generator_One_Counter = 0;
 24635  01A780  0E00               	movlw	0
 24636  01A782  0101               	movlb	1	; () banked
 24637  01A784  6F61               	movwf	_Generator_One_Counter& (0+255),b
 24638                           
 24639                           ; BSR set to: 1
 24640                           ;ERROR_HANDLING.c: 653: int_eeprom_write((0x01),0);
 24641  01A786  0E00               	movlw	0
 24642  01A788  0100               	movlb	0	; () banked
 24643  01A78A  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 24644  01A78C  0E01               	movlw	1
 24645  01A78E  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 24646  01A790  0E00               	movlw	0
 24647  01A792  0100               	movlb	0	; () banked
 24648  01A794  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 24649  01A796  0E00               	movlw	0
 24650  01A798  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 24651  01A79A  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 24652                           
 24653                           ;ERROR_HANDLING.c: 654: }
 24654  01A79E  0012               	return	
 24655  01A7A0                     l6295:
 24656                           
 24657                           ;ERROR_HANDLING.c: 655: else if(RB2 == 1 && RD2 == 1)
 24658  01A7A0  A481               	btfss	3969,2,c	;volatile
 24659  01A7A2  0012               	return	
 24660  01A7A4  A483               	btfss	3971,2,c	;volatile
 24661  01A7A6  0012               	return	
 24662                           
 24663                           ;ERROR_HANDLING.c: 656: {
 24664                           ;ERROR_HANDLING.c: 657: Generator_One_Counter++;
 24665  01A7A8  0101               	movlb	1	; () banked
 24666  01A7AA  2B61               	incf	_Generator_One_Counter& (0+255),f,b
 24667                           
 24668                           ; BSR set to: 1
 24669                           ;ERROR_HANDLING.c: 658: if(Generator_One_Counter > 2)
 24670  01A7AC  0E02               	movlw	2
 24671  01A7AE  0101               	movlb	1	; () banked
 24672  01A7B0  6561               	cpfsgt	_Generator_One_Counter& (0+255),b
 24673  01A7B2  0012               	return	
 24674                           
 24675                           ; BSR set to: 1
 24676                           ;ERROR_HANDLING.c: 659: {
 24677                           ;ERROR_HANDLING.c: 660: Generator_One_Counter = 0;
 24678  01A7B4  0E00               	movlw	0
 24679  01A7B6  0101               	movlb	1	; () banked
 24680  01A7B8  6F61               	movwf	_Generator_One_Counter& (0+255),b
 24681                           
 24682                           ;ERROR_HANDLING.c: 661: Generator_One_Feedback_Error = 1;
 24683  01A7BA  0E01               	movlw	1
 24684  01A7BC  0101               	movlb	1	; () banked
 24685  01A7BE  6F62               	movwf	_Generator_One_Feedback_Error& (0+255),b
 24686                           
 24687                           ;ERROR_HANDLING.c: 662: Errors = GEN_FB;
 24688  01A7C0  0E14               	movlw	20
 24689  01A7C2  6E1B               	movwf	_Errors,c
 24690                           
 24691                           ; BSR set to: 1
 24692                           ;ERROR_HANDLING.c: 663: int_eeprom_write((0x01),1);
 24693  01A7C4  0E00               	movlw	0
 24694  01A7C6  0100               	movlb	0	; () banked
 24695  01A7C8  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 24696  01A7CA  0E01               	movlw	1
 24697  01A7CC  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 24698  01A7CE  0E00               	movlw	0
 24699  01A7D0  0100               	movlb	0	; () banked
 24700  01A7D2  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 24701  01A7D4  0E01               	movlw	1
 24702  01A7D6  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 24703  01A7D8  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 24704  01A7DC  0012               	return	
 24705  01A7DE                     __end_of_Generator_One_Feedback:
 24706                           	opt stack 0
 24707                           tblptru	equ	0xFF8
 24708                           tblptrh	equ	0xFF7
 24709                           tblptrl	equ	0xFF6
 24710                           tablat	equ	0xFF5
 24711                           prodh	equ	0xFF4
 24712                           prodl	equ	0xFF3
 24713                           intcon	equ	0xFF2
 24714                           postinc0	equ	0xFEE
 24715                           wreg	equ	0xFE8
 24716                           postdec1	equ	0xFE5
 24717                           fsr1h	equ	0xFE2
 24718                           fsr1l	equ	0xFE1
 24719                           indf2	equ	0xFDF
 24720                           postinc2	equ	0xFDE
 24721                           postdec2	equ	0xFDD
 24722                           fsr2h	equ	0xFDA
 24723                           fsr2l	equ	0xFD9
 24724                           status	equ	0xFD8
 24725                           
 24726 ;; *************** function _DC_Bus_Voltage *****************
 24727 ;; Defined at:
 24728 ;;		line 515 in file "ERROR_HANDLING.c"
 24729 ;; Parameters:    Size  Location     Type
 24730 ;;		None
 24731 ;; Auto vars:     Size  Location     Type
 24732 ;;		None
 24733 ;; Return value:  Size  Location     Type
 24734 ;;                  1    wreg      void 
 24735 ;; Registers used:
 24736 ;;		wreg, status,2, status,0
 24737 ;; Tracked objects:
 24738 ;;		On entry : 0/0
 24739 ;;		On exit  : 0/0
 24740 ;;		Unchanged: 0/0
 24741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24746 ;;Total ram usage:        0 bytes
 24747 ;; Hardware stack levels used:    1
 24748 ;; Hardware stack levels required when called:    3
 24749 ;; This function calls:
 24750 ;;		Nothing
 24751 ;; This function is called by:
 24752 ;;		_Error_Checking_One_Second
 24753 ;; This function uses a non-reentrant model
 24754 ;;
 24755                           
 24756                           	psect	text78
 24757  0191B0                     __ptext78:
 24758                           	opt stack 0
 24759  0191B0                     _DC_Bus_Voltage:
 24760                           	opt stack 25
 24761                           
 24762                           ;ERROR_HANDLING.c: 517: if(VFD_Error_No == 3)
 24763                           
 24764                           ;incstack = 0
 24765  0191B0  0E03               	movlw	3
 24766  0191B2  1820               	xorwf	_VFD_Error_No,w,c
 24767  0191B4  A4D8               	btfss	status,2,c
 24768  0191B6  D012               	goto	l21211
 24769                           
 24770                           ;ERROR_HANDLING.c: 518: {
 24771                           ;ERROR_HANDLING.c: 519: DC_BUS_Low_Counter++;
 24772  0191B8  0101               	movlb	1	; () banked
 24773  0191BA  2B4D               	incf	_DC_BUS_Low_Counter& (0+255),f,b
 24774                           
 24775                           ; BSR set to: 1
 24776                           ;ERROR_HANDLING.c: 520: if(DC_BUS_Low_Counter >= 1)
 24777  0191BC  0101               	movlb	1	; () banked
 24778  0191BE  514D               	movf	_DC_BUS_Low_Counter& (0+255),w,b
 24779  0191C0  0101               	movlb	1	; () banked
 24780  0191C2  B4D8               	btfsc	status,2,c
 24781  0191C4  D00B               	goto	l21211
 24782                           
 24783                           ; BSR set to: 1
 24784                           ;ERROR_HANDLING.c: 521: {
 24785                           ;ERROR_HANDLING.c: 522: DC_BUS_Low_Counter = 0;
 24786  0191C6  0E00               	movlw	0
 24787  0191C8  0101               	movlb	1	; () banked
 24788  0191CA  6F4D               	movwf	_DC_BUS_Low_Counter& (0+255),b
 24789                           
 24790                           ;ERROR_HANDLING.c: 523: Errors = DCB_L_H;
 24791  0191CC  0E03               	movlw	3
 24792  0191CE  6E1B               	movwf	_Errors,c
 24793                           
 24794                           ;ERROR_HANDLING.c: 524: VFD_DC_Bus_Low_Error = 1;
 24795  0191D0  0E01               	movlw	1
 24796  0191D2  0101               	movlb	1	; () banked
 24797  0191D4  6F91               	movwf	_VFD_DC_Bus_Low_Error& (0+255),b
 24798                           
 24799                           ;ERROR_HANDLING.c: 525: DC_Bus_Voltage_Flag = 0;
 24800  0191D6  0E00               	movlw	0
 24801  0191D8  0101               	movlb	1	; () banked
 24802  0191DA  6F4E               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24803  0191DC                     l21211:
 24804                           
 24805                           ;ERROR_HANDLING.c: 526: }
 24806                           ;ERROR_HANDLING.c: 527: }
 24807                           ;ERROR_HANDLING.c: 528: if(VFD_Error_No == 7)
 24808  0191DC  0E07               	movlw	7
 24809  0191DE  1820               	xorwf	_VFD_Error_No,w,c
 24810  0191E0  A4D8               	btfss	status,2,c
 24811  0191E2  D008               	goto	l21215
 24812                           
 24813                           ;ERROR_HANDLING.c: 529: {
 24814                           ;ERROR_HANDLING.c: 530: Errors = DC_EXT_LOW;
 24815  0191E4  0E07               	movlw	7
 24816  0191E6  6E1B               	movwf	_Errors,c
 24817                           
 24818                           ;ERROR_HANDLING.c: 531: VFD_DC_EXTREM_LOW_Error = 1;
 24819  0191E8  0E01               	movlw	1
 24820  0191EA  0101               	movlb	1	; () banked
 24821  0191EC  6F92               	movwf	_VFD_DC_EXTREM_LOW_Error& (0+255),b
 24822                           
 24823                           ;ERROR_HANDLING.c: 532: DC_Bus_Voltage_Flag = 0;
 24824  0191EE  0E00               	movlw	0
 24825  0191F0  0101               	movlb	1	; () banked
 24826  0191F2  6F4E               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24827  0191F4                     l21215:
 24828                           
 24829                           ;ERROR_HANDLING.c: 533: }
 24830                           ;ERROR_HANDLING.c: 534: if(VFD_Error_No == 3)
 24831  0191F4  0E03               	movlw	3
 24832  0191F6  1820               	xorwf	_VFD_Error_No,w,c
 24833  0191F8  A4D8               	btfss	status,2,c
 24834  0191FA  D012               	goto	l21223
 24835                           
 24836                           ;ERROR_HANDLING.c: 535: {
 24837                           ;ERROR_HANDLING.c: 536: DC_BUS_High_Counter++;
 24838  0191FC  0101               	movlb	1	; () banked
 24839  0191FE  2B4C               	incf	_DC_BUS_High_Counter& (0+255),f,b
 24840                           
 24841                           ; BSR set to: 1
 24842                           ;ERROR_HANDLING.c: 537: if(DC_BUS_High_Counter >= 1)
 24843  019200  0101               	movlb	1	; () banked
 24844  019202  514C               	movf	_DC_BUS_High_Counter& (0+255),w,b
 24845  019204  0101               	movlb	1	; () banked
 24846  019206  B4D8               	btfsc	status,2,c
 24847  019208  D00B               	goto	l21223
 24848                           
 24849                           ; BSR set to: 1
 24850                           ;ERROR_HANDLING.c: 538: {
 24851                           ;ERROR_HANDLING.c: 539: DC_BUS_High_Counter = 0;
 24852  01920A  0E00               	movlw	0
 24853  01920C  0101               	movlb	1	; () banked
 24854  01920E  6F4C               	movwf	_DC_BUS_High_Counter& (0+255),b
 24855                           
 24856                           ;ERROR_HANDLING.c: 540: Errors = DCB_L_H;
 24857  019210  0E03               	movlw	3
 24858  019212  6E1B               	movwf	_Errors,c
 24859                           
 24860                           ;ERROR_HANDLING.c: 541: VFD_DC_Bus_High_Error = 1;
 24861  019214  0E01               	movlw	1
 24862  019216  0101               	movlb	1	; () banked
 24863  019218  6F90               	movwf	_VFD_DC_Bus_High_Error& (0+255),b
 24864                           
 24865                           ;ERROR_HANDLING.c: 542: DC_Bus_Voltage_Flag = 0;
 24866  01921A  0E00               	movlw	0
 24867  01921C  0101               	movlb	1	; () banked
 24868  01921E  6F4E               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24869  019220                     l21223:
 24870                           
 24871                           ;ERROR_HANDLING.c: 543: }
 24872                           ;ERROR_HANDLING.c: 544: }
 24873                           ;ERROR_HANDLING.c: 545: if(VFD_Error_No == 8)
 24874  019220  0E08               	movlw	8
 24875  019222  1820               	xorwf	_VFD_Error_No,w,c
 24876  019224  A4D8               	btfss	status,2,c
 24877  019226  D012               	goto	l21231
 24878                           
 24879                           ;ERROR_HANDLING.c: 546: {
 24880                           ;ERROR_HANDLING.c: 547: DC_BUS_Current_Counter++;
 24881  019228  0101               	movlb	1	; () banked
 24882  01922A  2B4B               	incf	_DC_BUS_Current_Counter& (0+255),f,b
 24883                           
 24884                           ; BSR set to: 1
 24885                           ;ERROR_HANDLING.c: 548: if(DC_BUS_Current_Counter >= 1)
 24886  01922C  0101               	movlb	1	; () banked
 24887  01922E  514B               	movf	_DC_BUS_Current_Counter& (0+255),w,b
 24888  019230  0101               	movlb	1	; () banked
 24889  019232  B4D8               	btfsc	status,2,c
 24890  019234  D00B               	goto	l21231
 24891                           
 24892                           ; BSR set to: 1
 24893                           ;ERROR_HANDLING.c: 549: {
 24894                           ;ERROR_HANDLING.c: 550: DC_BUS_Current_Counter = 0;
 24895  019236  0E00               	movlw	0
 24896  019238  0101               	movlb	1	; () banked
 24897  01923A  6F4B               	movwf	_DC_BUS_Current_Counter& (0+255),b
 24898                           
 24899                           ;ERROR_HANDLING.c: 551: Errors = VFD_OC;
 24900  01923C  0E08               	movlw	8
 24901  01923E  6E1B               	movwf	_Errors,c
 24902                           
 24903                           ;ERROR_HANDLING.c: 552: VFD_DC_Bus_Current_Error = 1;
 24904  019240  0E01               	movlw	1
 24905  019242  0101               	movlb	1	; () banked
 24906  019244  6F8F               	movwf	_VFD_DC_Bus_Current_Error& (0+255),b
 24907                           
 24908                           ;ERROR_HANDLING.c: 553: DC_Bus_Voltage_Flag = 0;
 24909  019246  0E00               	movlw	0
 24910  019248  0101               	movlb	1	; () banked
 24911  01924A  6F4E               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24912  01924C                     l21231:
 24913                           
 24914                           ;ERROR_HANDLING.c: 554: }
 24915                           ;ERROR_HANDLING.c: 555: }
 24916                           ;ERROR_HANDLING.c: 556: if(VFD_Error_No == 6)
 24917  01924C  0E06               	movlw	6
 24918  01924E  1820               	xorwf	_VFD_Error_No,w,c
 24919  019250  A4D8               	btfss	status,2,c
 24920  019252  D00A               	goto	l6263
 24921                           
 24922                           ;ERROR_HANDLING.c: 557: {
 24923                           ;ERROR_HANDLING.c: 558: Errors = VFD_SHORT_CIRCUIT;
 24924  019254  0E06               	movlw	6
 24925  019256  6E1B               	movwf	_Errors,c
 24926                           
 24927                           ;ERROR_HANDLING.c: 559: VFD_SHORT_CIRCUIT_fLAG = 1;
 24928  019258  0E00               	movlw	0
 24929  01925A  0102               	movlb	2	; () banked
 24930  01925C  6FAB               	movwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),b
 24931  01925E  0E01               	movlw	1
 24932  019260  6FAA               	movwf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),b
 24933                           
 24934                           ;ERROR_HANDLING.c: 560: DC_Bus_Voltage_Flag = 0;
 24935  019262  0E00               	movlw	0
 24936  019264  0101               	movlb	1	; () banked
 24937  019266  6F4E               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24938  019268                     l6263:
 24939                           
 24940                           ;ERROR_HANDLING.c: 561: }
 24941                           ;ERROR_HANDLING.c: 562: if(VFD_Error_No == 0)
 24942  019268  5020               	movf	_VFD_Error_No,w,c
 24943  01926A  A4D8               	btfss	status,2,c
 24944  01926C  0012               	return	
 24945                           
 24946                           ;ERROR_HANDLING.c: 563: {
 24947                           ;ERROR_HANDLING.c: 564: VFD_DC_Bus_High_Error = 0;
 24948  01926E  0E00               	movlw	0
 24949  019270  0101               	movlb	1	; () banked
 24950  019272  6F90               	movwf	_VFD_DC_Bus_High_Error& (0+255),b
 24951                           
 24952                           ;ERROR_HANDLING.c: 565: VFD_DC_Bus_Low_Error = 0;
 24953  019274  0E00               	movlw	0
 24954  019276  0101               	movlb	1	; () banked
 24955  019278  6F91               	movwf	_VFD_DC_Bus_Low_Error& (0+255),b
 24956                           
 24957                           ;ERROR_HANDLING.c: 566: VFD_SHORT_CIRCUIT_fLAG = 0;
 24958  01927A  0E00               	movlw	0
 24959  01927C  0102               	movlb	2	; () banked
 24960  01927E  6FAB               	movwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),b
 24961  019280  0E00               	movlw	0
 24962  019282  6FAA               	movwf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),b
 24963                           
 24964                           ;ERROR_HANDLING.c: 567: VFD_DC_Bus_Current_Error = 0;
 24965  019284  0E00               	movlw	0
 24966  019286  0101               	movlb	1	; () banked
 24967  019288  6F8F               	movwf	_VFD_DC_Bus_Current_Error& (0+255),b
 24968                           
 24969                           ;ERROR_HANDLING.c: 568: DC_Bus_Voltage_Flag = 1;
 24970  01928A  0E01               	movlw	1
 24971  01928C  0101               	movlb	1	; () banked
 24972  01928E  6F4E               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24973  019290  0012               	return	
 24974  019292                     __end_of_DC_Bus_Voltage:
 24975                           	opt stack 0
 24976                           tblptru	equ	0xFF8
 24977                           tblptrh	equ	0xFF7
 24978                           tblptrl	equ	0xFF6
 24979                           tablat	equ	0xFF5
 24980                           prodh	equ	0xFF4
 24981                           prodl	equ	0xFF3
 24982                           intcon	equ	0xFF2
 24983                           postinc0	equ	0xFEE
 24984                           wreg	equ	0xFE8
 24985                           postdec1	equ	0xFE5
 24986                           fsr1h	equ	0xFE2
 24987                           fsr1l	equ	0xFE1
 24988                           indf2	equ	0xFDF
 24989                           postinc2	equ	0xFDE
 24990                           postdec2	equ	0xFDD
 24991                           fsr2h	equ	0xFDA
 24992                           fsr2l	equ	0xFD9
 24993                           status	equ	0xFD8
 24994                           
 24995 ;; *************** function _Communication_Error *****************
 24996 ;; Defined at:
 24997 ;;		line 81 in file "RS485_COMMUNICATION.c"
 24998 ;; Parameters:    Size  Location     Type
 24999 ;;		None
 25000 ;; Auto vars:     Size  Location     Type
 25001 ;;		None
 25002 ;; Return value:  Size  Location     Type
 25003 ;;                  1    wreg      void 
 25004 ;; Registers used:
 25005 ;;		wreg, status,2, status,0
 25006 ;; Tracked objects:
 25007 ;;		On entry : 0/0
 25008 ;;		On exit  : 0/0
 25009 ;;		Unchanged: 0/0
 25010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25013 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25015 ;;Total ram usage:        2 bytes
 25016 ;; Hardware stack levels used:    1
 25017 ;; Hardware stack levels required when called:    3
 25018 ;; This function calls:
 25019 ;;		Nothing
 25020 ;; This function is called by:
 25021 ;;		_Error_Checking_One_Second
 25022 ;; This function uses a non-reentrant model
 25023 ;;
 25024                           
 25025                           	psect	text79
 25026  01A7DE                     __ptext79:
 25027                           	opt stack 0
 25028  01A7DE                     _Communication_Error:
 25029                           	opt stack 25
 25030                           
 25031                           ;RS485_COMMUNICATION.c: 83: if(VFD_ON_Flag == 1)
 25032                           
 25033                           ;incstack = 0
 25034  01A7DE  0101               	movlb	1	; () banked
 25035  01A7E0  0595               	decf	_VFD_ON_Flag& (0+255),w,b
 25036  01A7E2  A4D8               	btfss	status,2,c
 25037  01A7E4  D02A               	goto	l21271
 25038                           
 25039                           ; BSR set to: 1
 25040                           ;RS485_COMMUNICATION.c: 84: {
 25041                           ;RS485_COMMUNICATION.c: 85: if(Communication_OTP != Data_1[9])
 25042  01A7E6  5015               	movf	_Communication_OTP,w,c
 25043  01A7E8  0100               	movlb	0	; () banked
 25044  01A7EA  6F60               	movwf	??_Communication_Error& (0+255),b
 25045  01A7EC  6B61               	clrf	(??_Communication_Error+1)& (0+255),b
 25046  01A7EE  0105               	movlb	5	; () banked
 25047  01A7F0  5112               	movf	(_Data_1+18)& (0+255),w,b
 25048  01A7F2  0100               	movlb	0	; () banked
 25049  01A7F4  1960               	xorwf	??_Communication_Error& (0+255),w,b
 25050  01A7F6  E106               	bnz	u15850
 25051  01A7F8  0105               	movlb	5	; () banked
 25052  01A7FA  5113               	movf	(_Data_1+19)& (0+255),w,b
 25053  01A7FC  0100               	movlb	0	; () banked
 25054  01A7FE  1961               	xorwf	(??_Communication_Error+1)& (0+255),w,b
 25055  01A800  B4D8               	btfsc	status,2,c
 25056  01A802  D014               	goto	l21269
 25057  01A804                     u15850:
 25058                           
 25059                           ; BSR set to: 0
 25060                           ;RS485_COMMUNICATION.c: 86: {
 25061                           ;RS485_COMMUNICATION.c: 87: VFD_communication_Error_Counter++;
 25062  01A804  0101               	movlb	1	; () banked
 25063  01A806  2B99               	incf	_VFD_communication_Error_Counter& (0+255),f,b
 25064                           
 25065                           ; BSR set to: 1
 25066                           ;RS485_COMMUNICATION.c: 88: if(VFD_communication_Error_Counter == 10)
 25067  01A808  0E0A               	movlw	10
 25068  01A80A  0101               	movlb	1	; () banked
 25069  01A80C  1999               	xorwf	_VFD_communication_Error_Counter& (0+255),w,b
 25070  01A80E  A4D8               	btfss	status,2,c
 25071  01A810  D009               	goto	l21267
 25072                           
 25073                           ; BSR set to: 1
 25074                           ;RS485_COMMUNICATION.c: 89: {
 25075                           ;RS485_COMMUNICATION.c: 90: VFD_communication_Error_Counter = 0;
 25076  01A812  0E00               	movlw	0
 25077  01A814  0101               	movlb	1	; () banked
 25078  01A816  6F99               	movwf	_VFD_communication_Error_Counter& (0+255),b
 25079                           
 25080                           ;RS485_COMMUNICATION.c: 91: VFD_communication_Error_Flag = 1;
 25081  01A818  0E01               	movlw	1
 25082  01A81A  0100               	movlb	0	; () banked
 25083  01A81C  6FF1               	movwf	_VFD_communication_Error_Flag& (0+255),b
 25084                           
 25085                           ;RS485_COMMUNICATION.c: 92: Errors = VFD_COMMU_ERR;
 25086  01A81E  0E05               	movlw	5
 25087  01A820  6E1B               	movwf	_Errors,c
 25088                           
 25089                           ;RS485_COMMUNICATION.c: 93: }
 25090  01A822  0012               	return	
 25091  01A824                     l21267:
 25092                           
 25093                           ;RS485_COMMUNICATION.c: 94: else
 25094                           ;RS485_COMMUNICATION.c: 95: {
 25095                           ;RS485_COMMUNICATION.c: 96: VFD_communication_Error_Flag = 0;
 25096  01A824  0E00               	movlw	0
 25097  01A826  0100               	movlb	0	; () banked
 25098  01A828  6FF1               	movwf	_VFD_communication_Error_Flag& (0+255),b
 25099                           
 25100                           ; BSR set to: 0
 25101                           ;RS485_COMMUNICATION.c: 97: }
 25102                           ;RS485_COMMUNICATION.c: 98: }
 25103  01A82A  0012               	return	
 25104  01A82C                     l21269:
 25105                           
 25106                           ; BSR set to: 0
 25107                           ;RS485_COMMUNICATION.c: 99: else
 25108                           ;RS485_COMMUNICATION.c: 100: {
 25109                           ;RS485_COMMUNICATION.c: 101: VFD_communication_Error_Flag = 0;
 25110  01A82C  0E00               	movlw	0
 25111  01A82E  0100               	movlb	0	; () banked
 25112  01A830  6FF1               	movwf	_VFD_communication_Error_Flag& (0+255),b
 25113                           
 25114                           ;RS485_COMMUNICATION.c: 102: VFD_communication_Error_Counter = 0;
 25115  01A832  0E00               	movlw	0
 25116  01A834  0101               	movlb	1	; () banked
 25117  01A836  6F99               	movwf	_VFD_communication_Error_Counter& (0+255),b
 25118                           
 25119                           ; BSR set to: 1
 25120                           ;RS485_COMMUNICATION.c: 103: }
 25121                           ;RS485_COMMUNICATION.c: 104: }
 25122  01A838  0012               	return	
 25123  01A83A                     l21271:
 25124                           
 25125                           ; BSR set to: 1
 25126                           ;RS485_COMMUNICATION.c: 105: else
 25127                           ;RS485_COMMUNICATION.c: 106: {
 25128                           ;RS485_COMMUNICATION.c: 107: VFD_communication_Error_Counter = 0;
 25129  01A83A  0E00               	movlw	0
 25130  01A83C  0101               	movlb	1	; () banked
 25131  01A83E  6F99               	movwf	_VFD_communication_Error_Counter& (0+255),b
 25132                           
 25133                           ;RS485_COMMUNICATION.c: 108: VFD_communication_Error_Flag = 0;
 25134  01A840  0E00               	movlw	0
 25135  01A842  0100               	movlb	0	; () banked
 25136  01A844  6FF1               	movwf	_VFD_communication_Error_Flag& (0+255),b
 25137  01A846  0012               	return	
 25138  01A848                     __end_of_Communication_Error:
 25139                           	opt stack 0
 25140                           tblptru	equ	0xFF8
 25141                           tblptrh	equ	0xFF7
 25142                           tblptrl	equ	0xFF6
 25143                           tablat	equ	0xFF5
 25144                           prodh	equ	0xFF4
 25145                           prodl	equ	0xFF3
 25146                           intcon	equ	0xFF2
 25147                           postinc0	equ	0xFEE
 25148                           wreg	equ	0xFE8
 25149                           postdec1	equ	0xFE5
 25150                           fsr1h	equ	0xFE2
 25151                           fsr1l	equ	0xFE1
 25152                           indf2	equ	0xFDF
 25153                           postinc2	equ	0xFDE
 25154                           postdec2	equ	0xFDD
 25155                           fsr2h	equ	0xFDA
 25156                           fsr2l	equ	0xFD9
 25157                           status	equ	0xFD8
 25158                           
 25159 ;; *************** function _EEPROM_Error_Monitor *****************
 25160 ;; Defined at:
 25161 ;;		line 15 in file "EEPROM.c"
 25162 ;; Parameters:    Size  Location     Type
 25163 ;;		None
 25164 ;; Auto vars:     Size  Location     Type
 25165 ;;		None
 25166 ;; Return value:  Size  Location     Type
 25167 ;;                  1    wreg      void 
 25168 ;; Registers used:
 25169 ;;		wreg, status,2, status,0, cstack
 25170 ;; Tracked objects:
 25171 ;;		On entry : 0/0
 25172 ;;		On exit  : 0/0
 25173 ;;		Unchanged: 0/0
 25174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25179 ;;Total ram usage:        0 bytes
 25180 ;; Hardware stack levels used:    1
 25181 ;; Hardware stack levels required when called:    4
 25182 ;; This function calls:
 25183 ;;		_int_eeprom_read
 25184 ;;		_int_eeprom_write
 25185 ;; This function is called by:
 25186 ;;		_Timer0_OneSecond_Function
 25187 ;; This function uses a non-reentrant model
 25188 ;;
 25189                           
 25190                           	psect	text80
 25191  015D84                     __ptext80:
 25192                           	opt stack 0
 25193  015D84                     _EEPROM_Error_Monitor:
 25194                           	opt stack 25
 25195                           
 25196                           ;EEPROM.c: 17: Gen_EP_Err_Flag = int_eeprom_read((0x01));
 25197                           
 25198                           ;incstack = 0
 25199  015D84  0E00               	movlw	0
 25200  015D86  0100               	movlb	0	; () banked
 25201  015D88  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 25202  015D8A  0E01               	movlw	1
 25203  015D8C  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 25204  015D8E  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 25205  015D92  0100               	movlb	0	; () banked
 25206  015D94  5160               	movf	?_int_eeprom_read& (0+255),w,b
 25207  015D96  0100               	movlb	0	; () banked
 25208  015D98  6FE3               	movwf	_Gen_EP_Err_Flag& (0+255),b
 25209                           
 25210                           ;EEPROM.c: 18: Pitch_EP_Err_Flag = int_eeprom_read((0x02));
 25211  015D9A  0E00               	movlw	0
 25212  015D9C  0100               	movlb	0	; () banked
 25213  015D9E  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 25214  015DA0  0E02               	movlw	2
 25215  015DA2  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 25216  015DA4  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 25217  015DA8  0100               	movlb	0	; () banked
 25218  015DAA  5160               	movf	?_int_eeprom_read& (0+255),w,b
 25219  015DAC  0100               	movlb	0	; () banked
 25220  015DAE  6FE7               	movwf	_Pitch_EP_Err_Flag& (0+255),b
 25221                           
 25222                           ;EEPROM.c: 19: EEPROM_Error_Flag = int_eeprom_read((0x20));
 25223  015DB0  0E00               	movlw	0
 25224  015DB2  0100               	movlb	0	; () banked
 25225  015DB4  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 25226  015DB6  0E20               	movlw	32
 25227  015DB8  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 25228  015DBA  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 25229  015DBE  0100               	movlb	0	; () banked
 25230  015DC0  5160               	movf	?_int_eeprom_read& (0+255),w,b
 25231  015DC2  6E17               	movwf	_EEPROM_Error_Flag,c
 25232                           
 25233                           ;EEPROM.c: 20: Start_Stop_Flag = int_eeprom_read((0x21));
 25234  015DC4  0E00               	movlw	0
 25235  015DC6  0100               	movlb	0	; () banked
 25236  015DC8  6F61               	movwf	(int_eeprom_read@adr+1)& (0+255),b
 25237  015DCA  0E21               	movlw	33
 25238  015DCC  6F60               	movwf	int_eeprom_read@adr& (0+255),b
 25239  015DCE  EC19  F0D7         	call	_int_eeprom_read	;wreg free
 25240  015DD2  0100               	movlb	0	; () banked
 25241  015DD4  5160               	movf	?_int_eeprom_read& (0+255),w,b
 25242  015DD6  6E1F               	movwf	_Start_Stop_Flag,c
 25243                           
 25244                           ; BSR set to: 0
 25245                           ;EEPROM.c: 23: if(Start_Stop_Flag != 1)
 25246  015DD8  041F               	decf	_Start_Stop_Flag,w,c
 25247  015DDA  B4D8               	btfsc	status,2,c
 25248  015DDC  D00E               	goto	l22041
 25249                           
 25250                           ; BSR set to: 0
 25251                           ;EEPROM.c: 24: {
 25252                           ;EEPROM.c: 25: Start_Stop_Flag = 0;
 25253  015DDE  0E00               	movlw	0
 25254  015DE0  6E1F               	movwf	_Start_Stop_Flag,c
 25255                           
 25256                           ; BSR set to: 0
 25257                           ;EEPROM.c: 26: int_eeprom_write((0x21),0);
 25258  015DE2  0E00               	movlw	0
 25259  015DE4  0100               	movlb	0	; () banked
 25260  015DE6  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25261  015DE8  0E21               	movlw	33
 25262  015DEA  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25263  015DEC  0E00               	movlw	0
 25264  015DEE  0100               	movlb	0	; () banked
 25265  015DF0  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25266  015DF2  0E00               	movlw	0
 25267  015DF4  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25268  015DF6  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25269  015DFA                     l22041:
 25270                           
 25271                           ;EEPROM.c: 27: }
 25272                           ;EEPROM.c: 28: if(Pitch_EP_Err_Flag == 1)
 25273  015DFA  0100               	movlb	0	; () banked
 25274  015DFC  05E7               	decf	_Pitch_EP_Err_Flag& (0+255),w,b
 25275  015DFE  A4D8               	btfss	status,2,c
 25276  015E00  D006               	goto	l22045
 25277                           
 25278                           ; BSR set to: 0
 25279                           ;EEPROM.c: 29: {
 25280                           ;EEPROM.c: 30: Feedback_Error = 1;
 25281  015E02  0E01               	movlw	1
 25282  015E04  0101               	movlb	1	; () banked
 25283  015E06  6F54               	movwf	_Feedback_Error& (0+255),b
 25284                           
 25285                           ;EEPROM.c: 31: Errors = PITCH_FB;
 25286  015E08  0E15               	movlw	21
 25287  015E0A  6E1B               	movwf	_Errors,c
 25288                           
 25289                           ;EEPROM.c: 32: }
 25290  015E0C  D00C               	goto	l22047
 25291  015E0E                     l22045:
 25292                           
 25293                           ;EEPROM.c: 33: else
 25294                           ;EEPROM.c: 34: {
 25295                           ;EEPROM.c: 35: int_eeprom_write((0x02),0);
 25296  015E0E  0E00               	movlw	0
 25297  015E10  0100               	movlb	0	; () banked
 25298  015E12  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25299  015E14  0E02               	movlw	2
 25300  015E16  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25301  015E18  0E00               	movlw	0
 25302  015E1A  0100               	movlb	0	; () banked
 25303  015E1C  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25304  015E1E  0E00               	movlw	0
 25305  015E20  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25306  015E22  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25307  015E26                     l22047:
 25308                           
 25309                           ;EEPROM.c: 36: }
 25310                           ;EEPROM.c: 38: if(Gen_EP_Err_Flag == 1)
 25311  015E26  0100               	movlb	0	; () banked
 25312  015E28  05E3               	decf	_Gen_EP_Err_Flag& (0+255),w,b
 25313  015E2A  A4D8               	btfss	status,2,c
 25314  015E2C  D006               	goto	l22051
 25315                           
 25316                           ; BSR set to: 0
 25317                           ;EEPROM.c: 39: {
 25318                           ;EEPROM.c: 40: Feedback_Error = 1;
 25319  015E2E  0E01               	movlw	1
 25320  015E30  0101               	movlb	1	; () banked
 25321  015E32  6F54               	movwf	_Feedback_Error& (0+255),b
 25322                           
 25323                           ;EEPROM.c: 41: Errors = GEN_FB;
 25324  015E34  0E14               	movlw	20
 25325  015E36  6E1B               	movwf	_Errors,c
 25326                           
 25327                           ;EEPROM.c: 42: }
 25328  015E38  D00C               	goto	l22053
 25329  015E3A                     l22051:
 25330                           
 25331                           ;EEPROM.c: 43: else
 25332                           ;EEPROM.c: 44: {
 25333                           ;EEPROM.c: 45: int_eeprom_write((0x01),0);
 25334  015E3A  0E00               	movlw	0
 25335  015E3C  0100               	movlb	0	; () banked
 25336  015E3E  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25337  015E40  0E01               	movlw	1
 25338  015E42  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25339  015E44  0E00               	movlw	0
 25340  015E46  0100               	movlb	0	; () banked
 25341  015E48  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25342  015E4A  0E00               	movlw	0
 25343  015E4C  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25344  015E4E  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25345  015E52                     l22053:
 25346                           
 25347                           ;EEPROM.c: 46: }
 25348                           ;EEPROM.c: 48: if(EEPROM_Error_Flag == 1)
 25349  015E52  0417               	decf	_EEPROM_Error_Flag,w,c
 25350  015E54  A4D8               	btfss	status,2,c
 25351  015E56  D003               	goto	l22057
 25352                           
 25353                           ;EEPROM.c: 49: {
 25354                           ;EEPROM.c: 50: Errors = EP_Errors1;
 25355  015E58  C018  F01B         	movff	_EP_Errors1,_Errors
 25356                           
 25357                           ;EEPROM.c: 51: }
 25358  015E5C  D00C               	goto	l22059
 25359  015E5E                     l22057:
 25360                           
 25361                           ;EEPROM.c: 52: else
 25362                           ;EEPROM.c: 53: {
 25363                           ;EEPROM.c: 54: int_eeprom_write((0x20),0);
 25364  015E5E  0E00               	movlw	0
 25365  015E60  0100               	movlb	0	; () banked
 25366  015E62  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25367  015E64  0E20               	movlw	32
 25368  015E66  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25369  015E68  0E00               	movlw	0
 25370  015E6A  0100               	movlb	0	; () banked
 25371  015E6C  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25372  015E6E  0E00               	movlw	0
 25373  015E70  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25374  015E72  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25375  015E76                     l22059:
 25376                           
 25377                           ;EEPROM.c: 55: }
 25378                           ;EEPROM.c: 57: if(RC0 == 0)
 25379  015E76  B082               	btfsc	3970,0,c	;volatile
 25380  015E78  0012               	return	
 25381                           
 25382                           ;EEPROM.c: 58: {
 25383                           ;EEPROM.c: 59: Feedback_Error = 0;
 25384  015E7A  0E00               	movlw	0
 25385  015E7C  0101               	movlb	1	; () banked
 25386  015E7E  6F54               	movwf	_Feedback_Error& (0+255),b
 25387                           
 25388                           ;EEPROM.c: 61: EEPROM_Error_Flag = 0;
 25389  015E80  0E00               	movlw	0
 25390  015E82  6E17               	movwf	_EEPROM_Error_Flag,c
 25391                           
 25392                           ; BSR set to: 1
 25393                           ;EEPROM.c: 62: int_eeprom_write((0x20),EEPROM_Error_Flag);
 25394  015E84  0E00               	movlw	0
 25395  015E86  0100               	movlb	0	; () banked
 25396  015E88  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25397  015E8A  0E20               	movlw	32
 25398  015E8C  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25399  015E8E  C017  F062         	movff	_EEPROM_Error_Flag,int_eeprom_write@dat
 25400  015E92  0100               	movlb	0	; () banked
 25401  015E94  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25402  015E96  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25403                           
 25404                           ;EEPROM.c: 64: Total_Min = 0; Minutes_1 = 0; Minutes = 0;
 25405  015E9A  0E00               	movlw	0
 25406  015E9C  0101               	movlb	1	; () banked
 25407  015E9E  6F88               	movwf	_Total_Min& (0+255),b
 25408                           
 25409                           ; BSR set to: 1
 25410  015EA0  0E00               	movlw	0
 25411  015EA2  0101               	movlb	1	; () banked
 25412  015EA4  6F6F               	movwf	_Minutes_1& (0+255),b
 25413                           
 25414                           ; BSR set to: 1
 25415  015EA6  0E00               	movlw	0
 25416  015EA8  0101               	movlb	1	; () banked
 25417  015EAA  6F6E               	movwf	_Minutes& (0+255),b
 25418                           
 25419                           ; BSR set to: 1
 25420                           ;EEPROM.c: 66: Pitch_EP_Err_Flag = 0;
 25421  015EAC  0E00               	movlw	0
 25422  015EAE  0100               	movlb	0	; () banked
 25423  015EB0  6FE7               	movwf	_Pitch_EP_Err_Flag& (0+255),b
 25424                           
 25425                           ; BSR set to: 0
 25426                           ;EEPROM.c: 67: int_eeprom_write((0x02),0);
 25427  015EB2  0E00               	movlw	0
 25428  015EB4  0100               	movlb	0	; () banked
 25429  015EB6  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25430  015EB8  0E02               	movlw	2
 25431  015EBA  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25432  015EBC  0E00               	movlw	0
 25433  015EBE  0100               	movlb	0	; () banked
 25434  015EC0  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25435  015EC2  0E00               	movlw	0
 25436  015EC4  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25437  015EC6  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25438                           
 25439                           ;EEPROM.c: 69: Gen_EP_Err_Flag = 0;
 25440  015ECA  0E00               	movlw	0
 25441  015ECC  0100               	movlb	0	; () banked
 25442  015ECE  6FE3               	movwf	_Gen_EP_Err_Flag& (0+255),b
 25443                           
 25444                           ; BSR set to: 0
 25445                           ;EEPROM.c: 70: int_eeprom_write((0x01),0);
 25446  015ED0  0E00               	movlw	0
 25447  015ED2  0100               	movlb	0	; () banked
 25448  015ED4  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25449  015ED6  0E01               	movlw	1
 25450  015ED8  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25451  015EDA  0E00               	movlw	0
 25452  015EDC  0100               	movlb	0	; () banked
 25453  015EDE  6F63               	movwf	(int_eeprom_write@dat+1)& (0+255),b
 25454  015EE0  0E00               	movlw	0
 25455  015EE2  6F62               	movwf	int_eeprom_write@dat& (0+255),b
 25456  015EE4  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25457                           
 25458                           ;EEPROM.c: 73: EP_Errors3 = 0; EP_Errors2 = 0; EP_Errors1 = 0;
 25459  015EE8  0E00               	movlw	0
 25460  015EEA  6E1A               	movwf	_EP_Errors3,c
 25461  015EEC  0E00               	movlw	0
 25462  015EEE  6E19               	movwf	_EP_Errors2,c
 25463  015EF0  0E00               	movlw	0
 25464  015EF2  6E18               	movwf	_EP_Errors1,c
 25465                           
 25466                           ;EEPROM.c: 75: int_eeprom_write((0x19),EP_Errors3);
 25467  015EF4  0E00               	movlw	0
 25468  015EF6  0100               	movlb	0	; () banked
 25469  015EF8  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25470  015EFA  0E19               	movlw	25
 25471  015EFC  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25472  015EFE  C01A  F062         	movff	_EP_Errors3,int_eeprom_write@dat
 25473  015F02  0100               	movlb	0	; () banked
 25474  015F04  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25475  015F06  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25476                           
 25477                           ;EEPROM.c: 76: int_eeprom_write((0x18),EP_Errors2);
 25478  015F0A  0E00               	movlw	0
 25479  015F0C  0100               	movlb	0	; () banked
 25480  015F0E  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25481  015F10  0E18               	movlw	24
 25482  015F12  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25483  015F14  C019  F062         	movff	_EP_Errors2,int_eeprom_write@dat
 25484  015F18  0100               	movlb	0	; () banked
 25485  015F1A  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25486  015F1C  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25487                           
 25488                           ;EEPROM.c: 77: int_eeprom_write((0x17),EP_Errors1);
 25489  015F20  0E00               	movlw	0
 25490  015F22  0100               	movlb	0	; () banked
 25491  015F24  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25492  015F26  0E17               	movlw	23
 25493  015F28  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25494  015F2A  C018  F062         	movff	_EP_Errors1,int_eeprom_write@dat
 25495  015F2E  0100               	movlb	0	; () banked
 25496  015F30  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25497  015F32  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25498                           
 25499                           ;EEPROM.c: 79: GiMinutes_3 = 0; GiMinutes_2 = 0; GiMinutes_1 = 0;
 25500  015F36  0E00               	movlw	0
 25501  015F38  0100               	movlb	0	; () banked
 25502  015F3A  6FDE               	movwf	(_GiMinutes_3+1)& (0+255),b
 25503  015F3C  0E00               	movlw	0
 25504  015F3E  6FDD               	movwf	_GiMinutes_3& (0+255),b
 25505                           
 25506                           ; BSR set to: 0
 25507  015F40  0E00               	movlw	0
 25508  015F42  6E14               	movwf	_GiMinutes_2+1,c
 25509  015F44  0E00               	movlw	0
 25510  015F46  6E13               	movwf	_GiMinutes_2,c
 25511                           
 25512                           ; BSR set to: 0
 25513  015F48  0E00               	movlw	0
 25514  015F4A  0100               	movlb	0	; () banked
 25515  015F4C  6FDC               	movwf	(_GiMinutes_1+1)& (0+255),b
 25516  015F4E  0E00               	movlw	0
 25517  015F50  6FDB               	movwf	_GiMinutes_1& (0+255),b
 25518                           
 25519                           ; BSR set to: 0
 25520                           ;EEPROM.c: 81: int_eeprom_write((0x13),GiMinutes_3);
 25521  015F52  0E00               	movlw	0
 25522  015F54  0100               	movlb	0	; () banked
 25523  015F56  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25524  015F58  0E13               	movlw	19
 25525  015F5A  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25526  015F5C  C0DD  F062         	movff	_GiMinutes_3,int_eeprom_write@dat
 25527  015F60  C0DE  F063         	movff	_GiMinutes_3+1,int_eeprom_write@dat+1
 25528  015F64  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25529                           
 25530                           ;EEPROM.c: 82: int_eeprom_write((0x12),GiMinutes_2);
 25531  015F68  0E00               	movlw	0
 25532  015F6A  0100               	movlb	0	; () banked
 25533  015F6C  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25534  015F6E  0E12               	movlw	18
 25535  015F70  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25536  015F72  C013  F062         	movff	_GiMinutes_2,int_eeprom_write@dat
 25537  015F76  C014  F063         	movff	_GiMinutes_2+1,int_eeprom_write@dat+1
 25538  015F7A  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25539                           
 25540                           ;EEPROM.c: 83: int_eeprom_write((0x11),GiMinutes_1);
 25541  015F7E  0E00               	movlw	0
 25542  015F80  0100               	movlb	0	; () banked
 25543  015F82  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25544  015F84  0E11               	movlw	17
 25545  015F86  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25546  015F88  C0DB  F062         	movff	_GiMinutes_1,int_eeprom_write@dat
 25547  015F8C  C0DC  F063         	movff	_GiMinutes_1+1,int_eeprom_write@dat+1
 25548  015F90  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25549                           
 25550                           ;EEPROM.c: 85: GiHours_3 = 0; GiHours_2 = 0; GiHours_1 = 0;
 25551  015F94  0E00               	movlw	0
 25552  015F96  0101               	movlb	1	; () banked
 25553  015F98  6F29               	movwf	(_GiHours_3+1)& (0+255),b
 25554  015F9A  0E00               	movlw	0
 25555  015F9C  6F28               	movwf	_GiHours_3& (0+255),b
 25556  015F9E  0E00               	movlw	0
 25557  015FA0  0100               	movlb	0	; () banked
 25558  015FA2  6FDA               	movwf	(_GiHours_2+1)& (0+255),b
 25559  015FA4  0E00               	movlw	0
 25560  015FA6  6FD9               	movwf	_GiHours_2& (0+255),b
 25561  015FA8  0E00               	movlw	0
 25562  015FAA  0101               	movlb	1	; () banked
 25563  015FAC  6F27               	movwf	(_GiHours_1+1)& (0+255),b
 25564  015FAE  0E00               	movlw	0
 25565  015FB0  6F26               	movwf	_GiHours_1& (0+255),b
 25566                           
 25567                           ; BSR set to: 1
 25568                           ;EEPROM.c: 87: int_eeprom_write((0x16),GiHours_3);
 25569  015FB2  0E00               	movlw	0
 25570  015FB4  0100               	movlb	0	; () banked
 25571  015FB6  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25572  015FB8  0E16               	movlw	22
 25573  015FBA  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25574  015FBC  C128  F062         	movff	_GiHours_3,int_eeprom_write@dat
 25575  015FC0  C129  F063         	movff	_GiHours_3+1,int_eeprom_write@dat+1
 25576  015FC4  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25577                           
 25578                           ;EEPROM.c: 88: int_eeprom_write((0x15),GiHours_2);
 25579  015FC8  0E00               	movlw	0
 25580  015FCA  0100               	movlb	0	; () banked
 25581  015FCC  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25582  015FCE  0E15               	movlw	21
 25583  015FD0  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25584  015FD2  C0D9  F062         	movff	_GiHours_2,int_eeprom_write@dat
 25585  015FD6  C0DA  F063         	movff	_GiHours_2+1,int_eeprom_write@dat+1
 25586  015FDA  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25587                           
 25588                           ;EEPROM.c: 89: int_eeprom_write((0x14),GiHours_1);
 25589  015FDE  0E00               	movlw	0
 25590  015FE0  0100               	movlb	0	; () banked
 25591  015FE2  6F61               	movwf	(int_eeprom_write@adr+1)& (0+255),b
 25592  015FE4  0E14               	movlw	20
 25593  015FE6  6F60               	movwf	int_eeprom_write@adr& (0+255),b
 25594  015FE8  C126  F062         	movff	_GiHours_1,int_eeprom_write@dat
 25595  015FEC  C127  F063         	movff	_GiHours_1+1,int_eeprom_write@dat+1
 25596  015FF0  EC74  F0D6         	call	_int_eeprom_write	;wreg free
 25597  015FF4  0012               	return	
 25598  015FF6                     __end_of_EEPROM_Error_Monitor:
 25599                           	opt stack 0
 25600                           tblptru	equ	0xFF8
 25601                           tblptrh	equ	0xFF7
 25602                           tblptrl	equ	0xFF6
 25603                           tablat	equ	0xFF5
 25604                           prodh	equ	0xFF4
 25605                           prodl	equ	0xFF3
 25606                           intcon	equ	0xFF2
 25607                           postinc0	equ	0xFEE
 25608                           wreg	equ	0xFE8
 25609                           postdec1	equ	0xFE5
 25610                           fsr1h	equ	0xFE2
 25611                           fsr1l	equ	0xFE1
 25612                           indf2	equ	0xFDF
 25613                           postinc2	equ	0xFDE
 25614                           postdec2	equ	0xFDD
 25615                           fsr2h	equ	0xFDA
 25616                           fsr2l	equ	0xFD9
 25617                           status	equ	0xFD8
 25618                           
 25619 ;; *************** function _int_eeprom_write *****************
 25620 ;; Defined at:
 25621 ;;		line 217 in file "EEPROM.c"
 25622 ;; Parameters:    Size  Location     Type
 25623 ;;  adr             2    0[BANK0 ] unsigned int 
 25624 ;;  dat             2    2[BANK0 ] unsigned int 
 25625 ;; Auto vars:     Size  Location     Type
 25626 ;;		None
 25627 ;; Return value:  Size  Location     Type
 25628 ;;                  2    0[BANK0 ] unsigned int 
 25629 ;; Registers used:
 25630 ;;		wreg, status,2
 25631 ;; Tracked objects:
 25632 ;;		On entry : 0/0
 25633 ;;		On exit  : 0/0
 25634 ;;		Unchanged: 0/0
 25635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25636 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25639 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25640 ;;Total ram usage:        4 bytes
 25641 ;; Hardware stack levels used:    1
 25642 ;; Hardware stack levels required when called:    3
 25643 ;; This function calls:
 25644 ;;		Nothing
 25645 ;; This function is called by:
 25646 ;;		_Pitch_Feedback
 25647 ;;		_Generator_One_Feedback
 25648 ;;		_Start_Stop
 25649 ;;		_EEPROM_Error_Monitor
 25650 ;;		_EEPROM_Error_Stop
 25651 ;;		_Last_3_EEPROM_ERROR_Trigger
 25652 ;; This function uses a non-reentrant model
 25653 ;;
 25654                           
 25655                           	psect	text81
 25656  01ACE8                     __ptext81:
 25657                           	opt stack 0
 25658  01ACE8                     _int_eeprom_write:
 25659                           	opt stack 23
 25660                           
 25661                           ;EEPROM.c: 219: EEADR = adr;
 25662                           
 25663                           ;incstack = 0
 25664  01ACE8  C060  FF62         	movff	int_eeprom_write@adr,3938	;volatile
 25665                           
 25666                           ;EEPROM.c: 220: EEDATA = dat;
 25667  01ACEC  C062  FF61         	movff	int_eeprom_write@dat,3937	;volatile
 25668                           
 25669                           ;EEPROM.c: 221: EECON1bits.EEPGD = 0;
 25670  01ACF0  9E7F               	bcf	3967,7,c	;volatile
 25671                           
 25672                           ;EEPROM.c: 222: EECON1bits.CFGS = 0;
 25673  01ACF2  9C7F               	bcf	3967,6,c	;volatile
 25674                           
 25675                           ;EEPROM.c: 223: INTCONbits.GIE = 0;
 25676  01ACF4  9EF2               	bcf	intcon,7,c	;volatile
 25677                           
 25678                           ;EEPROM.c: 224: EECON1bits.WREN = 1;
 25679  01ACF6  847F               	bsf	3967,2,c	;volatile
 25680                           
 25681                           ;EEPROM.c: 226: EECON2 = 0x55;
 25682  01ACF8  0E55               	movlw	85
 25683  01ACFA  6E7E               	movwf	3966,c	;volatile
 25684                           
 25685                           ;EEPROM.c: 227: EECON2 = 0xAA;
 25686  01ACFC  0EAA               	movlw	170
 25687  01ACFE  6E7E               	movwf	3966,c	;volatile
 25688                           
 25689                           ;EEPROM.c: 228: EECON1bits.WR = 1;
 25690  01AD00  827F               	bsf	3967,1,c	;volatile
 25691  01AD02                     l10211:
 25692  01AD02  B27F               	btfsc	3967,1,c	;volatile
 25693  01AD04  D7FE               	goto	l10211
 25694                           
 25695                           ;EEPROM.c: 230: EECON1bits.WREN = 0;
 25696  01AD06  947F               	bcf	3967,2,c	;volatile
 25697                           
 25698                           ;EEPROM.c: 231: INTCONbits.GIE = 1;
 25699  01AD08  8EF2               	bsf	intcon,7,c	;volatile
 25700                           
 25701                           ;EEPROM.c: 232: EECON1bits.RD = 1;
 25702  01AD0A  807F               	bsf	3967,0,c	;volatile
 25703  01AD0C                     l10214:
 25704  01AD0C  B07F               	btfsc	3967,0,c	;volatile
 25705  01AD0E  D7FE               	goto	l10214
 25706                           
 25707                           ;EEPROM.c: 234: dat = EEDATA;
 25708  01AD10  CF61 F062          	movff	3937,int_eeprom_write@dat	;volatile
 25709  01AD14  0100               	movlb	0	; () banked
 25710  01AD16  6B63               	clrf	(int_eeprom_write@dat+1)& (0+255),b
 25711                           
 25712                           ; BSR set to: 0
 25713                           
 25714                           ;EEPROM.c: 235: return dat;
 25715                           ;	Return value of _int_eeprom_write is never used
 25716  01AD18  0012               	return		;funcret
 25717  01AD1A                     __end_of_int_eeprom_write:
 25718                           	opt stack 0
 25719                           tblptru	equ	0xFF8
 25720                           tblptrh	equ	0xFF7
 25721                           tblptrl	equ	0xFF6
 25722                           tablat	equ	0xFF5
 25723                           prodh	equ	0xFF4
 25724                           prodl	equ	0xFF3
 25725                           intcon	equ	0xFF2
 25726                           postinc0	equ	0xFEE
 25727                           wreg	equ	0xFE8
 25728                           postdec1	equ	0xFE5
 25729                           fsr1h	equ	0xFE2
 25730                           fsr1l	equ	0xFE1
 25731                           indf2	equ	0xFDF
 25732                           postinc2	equ	0xFDE
 25733                           postdec2	equ	0xFDD
 25734                           fsr2h	equ	0xFDA
 25735                           fsr2l	equ	0xFD9
 25736                           status	equ	0xFD8
 25737                           
 25738 ;; *************** function _int_eeprom_read *****************
 25739 ;; Defined at:
 25740 ;;		line 202 in file "EEPROM.c"
 25741 ;; Parameters:    Size  Location     Type
 25742 ;;  adr             2    0[BANK0 ] unsigned int 
 25743 ;; Auto vars:     Size  Location     Type
 25744 ;;  temp            2    2[BANK0 ] unsigned int 
 25745 ;; Return value:  Size  Location     Type
 25746 ;;                  2    0[BANK0 ] unsigned int 
 25747 ;; Registers used:
 25748 ;;		wreg, status,2
 25749 ;; Tracked objects:
 25750 ;;		On entry : 0/0
 25751 ;;		On exit  : 0/0
 25752 ;;		Unchanged: 0/0
 25753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25754 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25755 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25757 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25758 ;;Total ram usage:        4 bytes
 25759 ;; Hardware stack levels used:    1
 25760 ;; Hardware stack levels required when called:    3
 25761 ;; This function calls:
 25762 ;;		Nothing
 25763 ;; This function is called by:
 25764 ;;		_EEPROM_Error_Monitor
 25765 ;;		_EEPROM_Error_Stop
 25766 ;; This function uses a non-reentrant model
 25767 ;;
 25768                           
 25769                           	psect	text82
 25770  01AE32                     __ptext82:
 25771                           	opt stack 0
 25772  01AE32                     _int_eeprom_read:
 25773                           	opt stack 23
 25774                           
 25775                           ;EEPROM.c: 204: unsigned int temp = 0;
 25776                           
 25777                           ; BSR set to: 0
 25778                           ;incstack = 0
 25779  01AE32  0E00               	movlw	0
 25780  01AE34  0100               	movlb	0	; () banked
 25781  01AE36  6F63               	movwf	(int_eeprom_read@temp+1)& (0+255),b
 25782  01AE38  0E00               	movlw	0
 25783  01AE3A  6F62               	movwf	int_eeprom_read@temp& (0+255),b
 25784                           
 25785                           ; BSR set to: 0
 25786                           ;EEPROM.c: 205: INTCONbits.GIE = 0;
 25787  01AE3C  9EF2               	bcf	intcon,7,c	;volatile
 25788                           
 25789                           ; BSR set to: 0
 25790                           ;EEPROM.c: 206: EECON1bits.EEPGD = 0;
 25791  01AE3E  9E7F               	bcf	3967,7,c	;volatile
 25792                           
 25793                           ; BSR set to: 0
 25794                           ;EEPROM.c: 207: EEADR = adr;
 25795  01AE40  C060  FF62         	movff	int_eeprom_read@adr,3938	;volatile
 25796                           
 25797                           ; BSR set to: 0
 25798                           ;EEPROM.c: 209: EECON1bits.RD = 1;
 25799  01AE44  807F               	bsf	3967,0,c	;volatile
 25800  01AE46                     l10205:
 25801  01AE46  B07F               	btfsc	3967,0,c	;volatile
 25802  01AE48  D7FE               	goto	l10205
 25803                           
 25804                           ;EEPROM.c: 211: temp = EEDATA;
 25805  01AE4A  CF61 F062          	movff	3937,int_eeprom_read@temp	;volatile
 25806  01AE4E  0100               	movlb	0	; () banked
 25807  01AE50  6B63               	clrf	(int_eeprom_read@temp+1)& (0+255),b
 25808                           
 25809                           ;EEPROM.c: 213: INTCONbits.GIE = 1;
 25810  01AE52  8EF2               	bsf	intcon,7,c	;volatile
 25811                           
 25812                           ;EEPROM.c: 214: return (temp);
 25813  01AE54  C062  F060         	movff	int_eeprom_read@temp,?_int_eeprom_read
 25814  01AE58  C063  F061         	movff	int_eeprom_read@temp+1,?_int_eeprom_read+1
 25815                           
 25816                           ; BSR set to: 0
 25817  01AE5C  0012               	return		;funcret
 25818  01AE5E                     __end_of_int_eeprom_read:
 25819                           	opt stack 0
 25820                           tblptru	equ	0xFF8
 25821                           tblptrh	equ	0xFF7
 25822                           tblptrl	equ	0xFF6
 25823                           tablat	equ	0xFF5
 25824                           prodh	equ	0xFF4
 25825                           prodl	equ	0xFF3
 25826                           intcon	equ	0xFF2
 25827                           postinc0	equ	0xFEE
 25828                           wreg	equ	0xFE8
 25829                           postdec1	equ	0xFE5
 25830                           fsr1h	equ	0xFE2
 25831                           fsr1l	equ	0xFE1
 25832                           indf2	equ	0xFDF
 25833                           postinc2	equ	0xFDE
 25834                           postdec2	equ	0xFDD
 25835                           fsr2h	equ	0xFDA
 25836                           fsr2l	equ	0xFD9
 25837                           status	equ	0xFD8
 25838                           
 25839 ;; *************** function _Temp_Read *****************
 25840 ;; Defined at:
 25841 ;;		line 123 in file "Power_Meter.c"
 25842 ;; Parameters:    Size  Location     Type
 25843 ;;		None
 25844 ;; Auto vars:     Size  Location     Type
 25845 ;;		None
 25846 ;; Return value:  Size  Location     Type
 25847 ;;                  1    wreg      void 
 25848 ;; Registers used:
 25849 ;;		wreg, status,2, status,0, cstack
 25850 ;; Tracked objects:
 25851 ;;		On entry : 0/0
 25852 ;;		On exit  : 0/0
 25853 ;;		Unchanged: 0/0
 25854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25856 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25858 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25859 ;;Total ram usage:       12 bytes
 25860 ;; Hardware stack levels used:    1
 25861 ;; Hardware stack levels required when called:    5
 25862 ;; This function calls:
 25863 ;;		_Read_Adc
 25864 ;;		___ftadd
 25865 ;;		___ftdiv
 25866 ;;		___ftmul
 25867 ;;		___lwtoft
 25868 ;; This function is called by:
 25869 ;;		_main
 25870 ;; This function uses a non-reentrant model
 25871 ;;
 25872                           
 25873                           	psect	text83
 25874  017A24                     __ptext83:
 25875                           	opt stack 0
 25876  017A24                     _Temp_Read:
 25877                           	opt stack 25
 25878                           
 25879                           ;Power_Meter.c: 125: Temp_Sensor = Read_Adc(0);
 25880                           
 25881                           ; BSR set to: 0
 25882                           ;incstack = 0
 25883  017A24  0E00               	movlw	0
 25884  017A26  ECA9  F0D5         	call	_Read_Adc
 25885  017A2A  C060  F3EE         	movff	?_Read_Adc,_Temp_Sensor
 25886  017A2E  C061  F3EF         	movff	?_Read_Adc+1,_Temp_Sensor+1
 25887                           
 25888                           ;Power_Meter.c: 126: Temprature = (Temp_Sensor * 0.0957);
 25889  017A32  C3EE  F068         	movff	_Temp_Sensor,___lwtoft@c
 25890  017A36  C3EF  F069         	movff	_Temp_Sensor+1,___lwtoft@c+1
 25891  017A3A  EC6E  F0D7         	call	___lwtoft	;wreg free
 25892  017A3E  C068  F074         	movff	?___lwtoft,___ftmul@f1
 25893  017A42  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
 25894  017A46  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
 25895  017A4A  0EFE               	movlw	254
 25896  017A4C  0100               	movlb	0	; () banked
 25897  017A4E  6F77               	movwf	___ftmul@f2& (0+255),b
 25898  017A50  0EC3               	movlw	195
 25899  017A52  0100               	movlb	0	; () banked
 25900  017A54  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 25901  017A56  0E3D               	movlw	61
 25902  017A58  0100               	movlb	0	; () banked
 25903  017A5A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 25904  017A5C  ECA4  F0C0         	call	___ftmul	;wreg free
 25905  017A60  C074  F224         	movff	?___ftmul,_Temprature
 25906  017A64  C075  F225         	movff	?___ftmul+1,_Temprature+1
 25907  017A68  C076  F226         	movff	?___ftmul+2,_Temprature+2
 25908                           
 25909                           ;Power_Meter.c: 129: Temp_Arr[5] = Temp_Arr[4];
 25910  017A6C  C3C0  F3C3         	movff	_Temp_Arr+12,_Temp_Arr+15
 25911  017A70  C3C1  F3C4         	movff	_Temp_Arr+13,_Temp_Arr+16
 25912  017A74  C3C2  F3C5         	movff	_Temp_Arr+14,_Temp_Arr+17
 25913                           
 25914                           ;Power_Meter.c: 130: Temp_Arr[4] = Temp_Arr[3];
 25915  017A78  C3BD  F3C0         	movff	_Temp_Arr+9,_Temp_Arr+12
 25916  017A7C  C3BE  F3C1         	movff	_Temp_Arr+10,_Temp_Arr+13
 25917  017A80  C3BF  F3C2         	movff	_Temp_Arr+11,_Temp_Arr+14
 25918                           
 25919                           ;Power_Meter.c: 131: Temp_Arr[3] = Temp_Arr[2];
 25920  017A84  C3BA  F3BD         	movff	_Temp_Arr+6,_Temp_Arr+9
 25921  017A88  C3BB  F3BE         	movff	_Temp_Arr+7,_Temp_Arr+10
 25922  017A8C  C3BC  F3BF         	movff	_Temp_Arr+8,_Temp_Arr+11
 25923                           
 25924                           ;Power_Meter.c: 132: Temp_Arr[2] = Temp_Arr[1];
 25925  017A90  C3B7  F3BA         	movff	_Temp_Arr+3,_Temp_Arr+6
 25926  017A94  C3B8  F3BB         	movff	_Temp_Arr+4,_Temp_Arr+7
 25927  017A98  C3B9  F3BC         	movff	_Temp_Arr+5,_Temp_Arr+8
 25928                           
 25929                           ;Power_Meter.c: 133: Temp_Arr[1] = Temp_Arr[0];
 25930  017A9C  C3B4  F3B7         	movff	_Temp_Arr,_Temp_Arr+3
 25931  017AA0  C3B5  F3B8         	movff	_Temp_Arr+1,_Temp_Arr+4
 25932  017AA4  C3B6  F3B9         	movff	_Temp_Arr+2,_Temp_Arr+5
 25933                           
 25934                           ;Power_Meter.c: 134: Temp_Arr[0] = Temprature;
 25935  017AA8  C224  F3B4         	movff	_Temprature,_Temp_Arr
 25936  017AAC  C225  F3B5         	movff	_Temprature+1,_Temp_Arr+1
 25937  017AB0  C226  F3B6         	movff	_Temprature+2,_Temp_Arr+2
 25938                           
 25939                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25940  017AB4  C3BA  F090         	movff	_Temp_Arr+6,___ftadd@f2
 25941  017AB8  C3BB  F091         	movff	_Temp_Arr+7,___ftadd@f2+1
 25942  017ABC  C3BC  F092         	movff	_Temp_Arr+8,___ftadd@f2+2
 25943  017AC0  C3B7  F08D         	movff	_Temp_Arr+3,___ftadd@f1
 25944  017AC4  C3B8  F08E         	movff	_Temp_Arr+4,___ftadd@f1+1
 25945  017AC8  C3B9  F08F         	movff	_Temp_Arr+5,___ftadd@f1+2
 25946  017ACC  EC69  F0B2         	call	___ftadd	;wreg free
 25947  017AD0  C08D  F0B4         	movff	?___ftadd,_Temp_Read$8051
 25948  017AD4  C08E  F0B5         	movff	?___ftadd+1,_Temp_Read$8051+1
 25949  017AD8  C08F  F0B6         	movff	?___ftadd+2,_Temp_Read$8051+2
 25950                           
 25951                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25952  017ADC  C3BD  F090         	movff	_Temp_Arr+9,___ftadd@f2
 25953  017AE0  C3BE  F091         	movff	_Temp_Arr+10,___ftadd@f2+1
 25954  017AE4  C3BF  F092         	movff	_Temp_Arr+11,___ftadd@f2+2
 25955  017AE8  C0B4  F08D         	movff	_Temp_Read$8051,___ftadd@f1
 25956  017AEC  C0B5  F08E         	movff	_Temp_Read$8051+1,___ftadd@f1+1
 25957  017AF0  C0B6  F08F         	movff	_Temp_Read$8051+2,___ftadd@f1+2
 25958  017AF4  EC69  F0B2         	call	___ftadd	;wreg free
 25959  017AF8  C08D  F0B7         	movff	?___ftadd,_Temp_Read$8052
 25960  017AFC  C08E  F0B8         	movff	?___ftadd+1,_Temp_Read$8052+1
 25961  017B00  C08F  F0B9         	movff	?___ftadd+2,_Temp_Read$8052+2
 25962                           
 25963                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25964  017B04  C3C0  F090         	movff	_Temp_Arr+12,___ftadd@f2
 25965  017B08  C3C1  F091         	movff	_Temp_Arr+13,___ftadd@f2+1
 25966  017B0C  C3C2  F092         	movff	_Temp_Arr+14,___ftadd@f2+2
 25967  017B10  C0B7  F08D         	movff	_Temp_Read$8052,___ftadd@f1
 25968  017B14  C0B8  F08E         	movff	_Temp_Read$8052+1,___ftadd@f1+1
 25969  017B18  C0B9  F08F         	movff	_Temp_Read$8052+2,___ftadd@f1+2
 25970  017B1C  EC69  F0B2         	call	___ftadd	;wreg free
 25971  017B20  C08D  F0BA         	movff	?___ftadd,_Temp_Read$8053
 25972  017B24  C08E  F0BB         	movff	?___ftadd+1,_Temp_Read$8053+1
 25973  017B28  C08F  F0BC         	movff	?___ftadd+2,_Temp_Read$8053+2
 25974                           
 25975                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25976  017B2C  C3C3  F090         	movff	_Temp_Arr+15,___ftadd@f2
 25977  017B30  C3C4  F091         	movff	_Temp_Arr+16,___ftadd@f2+1
 25978  017B34  C3C5  F092         	movff	_Temp_Arr+17,___ftadd@f2+2
 25979  017B38  C0BA  F08D         	movff	_Temp_Read$8053,___ftadd@f1
 25980  017B3C  C0BB  F08E         	movff	_Temp_Read$8053+1,___ftadd@f1+1
 25981  017B40  C0BC  F08F         	movff	_Temp_Read$8053+2,___ftadd@f1+2
 25982  017B44  EC69  F0B2         	call	___ftadd	;wreg free
 25983  017B48  C08D  F0BD         	movff	?___ftadd,_Temp_Read$8054
 25984  017B4C  C08E  F0BE         	movff	?___ftadd+1,_Temp_Read$8054+1
 25985  017B50  C08F  F0BF         	movff	?___ftadd+2,_Temp_Read$8054+2
 25986                           
 25987                           ;Power_Meter.c: 136: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25988  017B54  C3B4  F090         	movff	_Temp_Arr,___ftadd@f2
 25989  017B58  C3B5  F091         	movff	_Temp_Arr+1,___ftadd@f2+1
 25990  017B5C  C3B6  F092         	movff	_Temp_Arr+2,___ftadd@f2+2
 25991  017B60  C0BD  F08D         	movff	_Temp_Read$8054,___ftadd@f1
 25992  017B64  C0BE  F08E         	movff	_Temp_Read$8054+1,___ftadd@f1+1
 25993  017B68  C0BF  F08F         	movff	_Temp_Read$8054+2,___ftadd@f1+2
 25994  017B6C  EC69  F0B2         	call	___ftadd	;wreg free
 25995  017B70  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 25996  017B74  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 25997  017B78  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 25998  017B7C  0E00               	movlw	0
 25999  017B7E  0100               	movlb	0	; () banked
 26000  017B80  6FA8               	movwf	___ftdiv@f2& (0+255),b
 26001  017B82  0EC0               	movlw	192
 26002  017B84  0100               	movlb	0	; () banked
 26003  017B86  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 26004  017B88  0E40               	movlw	64
 26005  017B8A  0100               	movlb	0	; () banked
 26006  017B8C  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 26007  017B8E  EC53  F0C1         	call	___ftdiv	;wreg free
 26008  017B92  C0A5  F66C         	movff	?___ftdiv,_Temperature_Avg
 26009  017B96  C0A6  F66D         	movff	?___ftdiv+1,_Temperature_Avg+1
 26010  017B9A  C0A7  F66E         	movff	?___ftdiv+2,_Temperature_Avg+2
 26011  017B9E  0012               	return		;funcret
 26012  017BA0                     __end_of_Temp_Read:
 26013                           	opt stack 0
 26014                           tblptru	equ	0xFF8
 26015                           tblptrh	equ	0xFF7
 26016                           tblptrl	equ	0xFF6
 26017                           tablat	equ	0xFF5
 26018                           prodh	equ	0xFF4
 26019                           prodl	equ	0xFF3
 26020                           intcon	equ	0xFF2
 26021                           postinc0	equ	0xFEE
 26022                           wreg	equ	0xFE8
 26023                           postdec1	equ	0xFE5
 26024                           fsr1h	equ	0xFE2
 26025                           fsr1l	equ	0xFE1
 26026                           indf2	equ	0xFDF
 26027                           postinc2	equ	0xFDE
 26028                           postdec2	equ	0xFDD
 26029                           fsr2h	equ	0xFDA
 26030                           fsr2l	equ	0xFD9
 26031                           status	equ	0xFD8
 26032                           
 26033 ;; *************** function _Rampup_state_function *****************
 26034 ;; Defined at:
 26035 ;;		line 30 in file "state.c"
 26036 ;; Parameters:    Size  Location     Type
 26037 ;;		None
 26038 ;; Auto vars:     Size  Location     Type
 26039 ;;		None
 26040 ;; Return value:  Size  Location     Type
 26041 ;;                  1    wreg      void 
 26042 ;; Registers used:
 26043 ;;		wreg, status,2, status,0, cstack
 26044 ;; Tracked objects:
 26045 ;;		On entry : 0/0
 26046 ;;		On exit  : 0/0
 26047 ;;		Unchanged: 0/0
 26048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26053 ;;Total ram usage:        0 bytes
 26054 ;; Hardware stack levels used:    1
 26055 ;; Hardware stack levels required when called:    7
 26056 ;; This function calls:
 26057 ;;		_RAMP_UP
 26058 ;; This function is called by:
 26059 ;;		_main
 26060 ;; This function uses a non-reentrant model
 26061 ;;
 26062                           
 26063                           	psect	text84
 26064  01B0F6                     __ptext84:
 26065                           	opt stack 0
 26066  01B0F6                     _Rampup_state_function:
 26067                           	opt stack 23
 26068                           
 26069                           ;state.c: 32: RAMP_UP();
 26070                           
 26071                           ;incstack = 0
 26072  01B0F6  ECF7  F0C6         	call	_RAMP_UP	;wreg free
 26073  01B0FA  0012               	return		;funcret
 26074  01B0FC                     __end_of_Rampup_state_function:
 26075                           	opt stack 0
 26076                           tblptru	equ	0xFF8
 26077                           tblptrh	equ	0xFF7
 26078                           tblptrl	equ	0xFF6
 26079                           tablat	equ	0xFF5
 26080                           prodh	equ	0xFF4
 26081                           prodl	equ	0xFF3
 26082                           intcon	equ	0xFF2
 26083                           postinc0	equ	0xFEE
 26084                           wreg	equ	0xFE8
 26085                           postdec1	equ	0xFE5
 26086                           fsr1h	equ	0xFE2
 26087                           fsr1l	equ	0xFE1
 26088                           indf2	equ	0xFDF
 26089                           postinc2	equ	0xFDE
 26090                           postdec2	equ	0xFDD
 26091                           fsr2h	equ	0xFDA
 26092                           fsr2l	equ	0xFD9
 26093                           status	equ	0xFD8
 26094                           
 26095 ;; *************** function _RAMP_UP *****************
 26096 ;; Defined at:
 26097 ;;		line 22 in file "RAMP_UP.c"
 26098 ;; Parameters:    Size  Location     Type
 26099 ;;		None
 26100 ;; Auto vars:     Size  Location     Type
 26101 ;;		None
 26102 ;; Return value:  Size  Location     Type
 26103 ;;                  1    wreg      void 
 26104 ;; Registers used:
 26105 ;;		wreg, status,2, status,0, cstack
 26106 ;; Tracked objects:
 26107 ;;		On entry : 0/0
 26108 ;;		On exit  : 0/0
 26109 ;;		Unchanged: 0/0
 26110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26114 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26115 ;;Total ram usage:        1 bytes
 26116 ;; Hardware stack levels used:    1
 26117 ;; Hardware stack levels required when called:    6
 26118 ;; This function calls:
 26119 ;;		_Pitch_Release
 26120 ;;		_Turbine_Pitching
 26121 ;;		_VFD_Data_Kill
 26122 ;;		_VFD_Freq_Step_up
 26123 ;; This function is called by:
 26124 ;;		_Rampup_state_function
 26125 ;; This function uses a non-reentrant model
 26126 ;;
 26127                           
 26128                           	psect	text85
 26129  018DEE                     __ptext85:
 26130                           	opt stack 0
 26131  018DEE                     _RAMP_UP:
 26132                           	opt stack 23
 26133                           
 26134                           ;RAMP_UP.c: 24: switch (VFD_RAMP)
 26135                           
 26136                           ;incstack = 0
 26137  018DEE  D067               	goto	l22147
 26138  018DF0                     l6990:
 26139                           
 26140                           ; BSR set to: 1
 26141                           ;RAMP_UP.c: 27: (RD0 = 1);
 26142  018DF0  8083               	bsf	3971,0,c	;volatile
 26143                           
 26144                           ; BSR set to: 1
 26145                           ;RAMP_UP.c: 28: VFD_On_Off = 0;
 26146  018DF2  0E00               	movlw	0
 26147  018DF4  0101               	movlb	1	; () banked
 26148  018DF6  6F96               	movwf	_VFD_On_Off& (0+255),b
 26149                           
 26150                           ;RAMP_UP.c: 29: One_Sec_Delay_vab = 1;
 26151  018DF8  0E01               	movlw	1
 26152  018DFA  0101               	movlb	1	; () banked
 26153  018DFC  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 26154                           
 26155                           ;RAMP_UP.c: 30: if(One_sec_Delay_Flag)
 26156  018DFE  0101               	movlb	1	; () banked
 26157  018E00  5174               	movf	_One_sec_Delay_Flag& (0+255),w,b
 26158  018E02  B4D8               	btfsc	status,2,c
 26159  018E04  0012               	return	
 26160                           
 26161                           ; BSR set to: 1
 26162                           ;RAMP_UP.c: 31: {
 26163                           ;RAMP_UP.c: 32: VFD_RAMP = VFD_OUT;
 26164  018E06  0E01               	movlw	1
 26165  018E08  0101               	movlb	1	; () banked
 26166  018E0A  6F97               	movwf	_VFD_RAMP& (0+255),b
 26167                           
 26168                           ;RAMP_UP.c: 33: One_Sec_Delay_vab = 0;
 26169  018E0C  0E00               	movlw	0
 26170  018E0E  0101               	movlb	1	; () banked
 26171  018E10  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 26172                           
 26173                           ;RAMP_UP.c: 34: One_sec_Delay_Flag = 0;
 26174  018E12  0E00               	movlw	0
 26175  018E14  0101               	movlb	1	; () banked
 26176  018E16  6F74               	movwf	_One_sec_Delay_Flag& (0+255),b
 26177                           
 26178                           ; BSR set to: 1
 26179                           ;RAMP_UP.c: 35: }
 26180                           ;RAMP_UP.c: 36: break;
 26181  018E18  0012               	return	
 26182  018E1A                     l6993:
 26183                           
 26184                           ; BSR set to: 1
 26185                           ;RAMP_UP.c: 39: (RD1 = 1);
 26186  018E1A  8283               	bsf	3971,1,c	;volatile
 26187                           
 26188                           ; BSR set to: 1
 26189                           ;RAMP_UP.c: 40: if(DC_Bus_Voltage_Flag)
 26190  018E1C  0101               	movlb	1	; () banked
 26191  018E1E  514E               	movf	_DC_Bus_Voltage_Flag& (0+255),w,b
 26192  018E20  B4D8               	btfsc	status,2,c
 26193  018E22  D006               	goto	l6994
 26194                           
 26195                           ; BSR set to: 1
 26196                           ;RAMP_UP.c: 41: {
 26197                           ;RAMP_UP.c: 42: DC_Bus_Voltage_Flag = 0;
 26198  018E24  0E00               	movlw	0
 26199  018E26  0101               	movlb	1	; () banked
 26200  018E28  6F4E               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 26201                           
 26202                           ;RAMP_UP.c: 43: VFD_RAMP = VFD_Frequency_Step_up;
 26203  018E2A  0E02               	movlw	2
 26204  018E2C  0101               	movlb	1	; () banked
 26205  018E2E  6F97               	movwf	_VFD_RAMP& (0+255),b
 26206  018E30                     l6994:
 26207                           
 26208                           ; BSR set to: 1
 26209                           ;RAMP_UP.c: 44: }
 26210                           ;RAMP_UP.c: 45: Desired_Frequency = (8);
 26211  018E30  0E08               	movlw	8
 26212  018E32  6E16               	movwf	_Desired_Frequency,c
 26213                           
 26214                           ;RAMP_UP.c: 46: break;
 26215  018E34  0012               	return	
 26216  018E36                     l22111:
 26217                           
 26218                           ; BSR set to: 1
 26219                           ;RAMP_UP.c: 49: VFD_On_Off = 1;
 26220  018E36  0E01               	movlw	1
 26221  018E38  0101               	movlb	1	; () banked
 26222  018E3A  6F96               	movwf	_VFD_On_Off& (0+255),b
 26223                           
 26224                           ;RAMP_UP.c: 50: if(DC_Bus_Voltage_Flag)
 26225  018E3C  0101               	movlb	1	; () banked
 26226  018E3E  514E               	movf	_DC_Bus_Voltage_Flag& (0+255),w,b
 26227  018E40  B4D8               	btfsc	status,2,c
 26228  018E42  D00C               	goto	l22119
 26229                           
 26230                           ; BSR set to: 1
 26231                           ;RAMP_UP.c: 51: {
 26232                           ;RAMP_UP.c: 52: DC_Bus_Voltage_Flag = 0;
 26233  018E44  0E00               	movlw	0
 26234  018E46  0101               	movlb	1	; () banked
 26235  018E48  6F4E               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 26236                           
 26237                           ;RAMP_UP.c: 61: if(Slip_Flag)
 26238  018E4A  0101               	movlb	1	; () banked
 26239  018E4C  517D               	movf	_Slip_Flag& (0+255),w,b
 26240  018E4E  B4D8               	btfsc	status,2,c
 26241  018E50  D005               	goto	l22119
 26242                           
 26243                           ; BSR set to: 1
 26244                           ;RAMP_UP.c: 62: {
 26245                           ;RAMP_UP.c: 63: Slip_Flag = 0;
 26246  018E52  0E00               	movlw	0
 26247  018E54  0101               	movlb	1	; () banked
 26248  018E56  6F7D               	movwf	_Slip_Flag& (0+255),b
 26249                           
 26250                           ; BSR set to: 1
 26251                           ;RAMP_UP.c: 64: VFD_Freq_Step_up();
 26252  018E58  EC7C  F0C6         	call	_VFD_Freq_Step_up	;wreg free
 26253  018E5C                     l22119:
 26254                           
 26255                           ;RAMP_UP.c: 65: }
 26256                           ;RAMP_UP.c: 66: }
 26257                           ;RAMP_UP.c: 67: Pitch_Release();
 26258  018E5C  ECE9  F0D5         	call	_Pitch_Release	;wreg free
 26259                           
 26260                           ;RAMP_UP.c: 68: break;
 26261  018E60  0012               	return	
 26262  018E62                     l6998:
 26263                           
 26264                           ; BSR set to: 1
 26265                           ;RAMP_UP.c: 71: (RD0 = 0);
 26266  018E62  9083               	bcf	3971,0,c	;volatile
 26267                           
 26268                           ; BSR set to: 1
 26269                           ;RAMP_UP.c: 72: VFD_On_Off = 0;
 26270  018E64  0E00               	movlw	0
 26271  018E66  0101               	movlb	1	; () banked
 26272  018E68  6F96               	movwf	_VFD_On_Off& (0+255),b
 26273                           
 26274                           ;RAMP_UP.c: 73: One_Sec_Delay_vab = 1;
 26275  018E6A  0E01               	movlw	1
 26276  018E6C  0101               	movlb	1	; () banked
 26277  018E6E  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 26278                           
 26279                           ;RAMP_UP.c: 74: if(One_sec_Delay_Flag)
 26280  018E70  0101               	movlb	1	; () banked
 26281  018E72  5174               	movf	_One_sec_Delay_Flag& (0+255),w,b
 26282  018E74  B4D8               	btfsc	status,2,c
 26283  018E76  0012               	return	
 26284                           
 26285                           ; BSR set to: 1
 26286                           ;RAMP_UP.c: 75: {
 26287                           ;RAMP_UP.c: 76: One_sec_Delay_Flag = 0;
 26288  018E78  0E00               	movlw	0
 26289  018E7A  0101               	movlb	1	; () banked
 26290  018E7C  6F74               	movwf	_One_sec_Delay_Flag& (0+255),b
 26291                           
 26292                           ;RAMP_UP.c: 77: One_Sec_Delay_vab = 0;
 26293  018E7E  0E00               	movlw	0
 26294  018E80  0101               	movlb	1	; () banked
 26295  018E82  6F72               	movwf	_One_Sec_Delay_vab& (0+255),b
 26296                           
 26297                           ; BSR set to: 1
 26298                           ;RAMP_UP.c: 78: (RD1 = 0);
 26299  018E84  9283               	bcf	3971,1,c	;volatile
 26300                           
 26301                           ; BSR set to: 1
 26302                           ;RAMP_UP.c: 79: _delay((unsigned long)((50)*(8000000/4000.0)));
 26303  018E86  0E82               	movlw	130
 26304  018E88  0100               	movlb	0	; () banked
 26305  018E8A  6FB4               	movwf	??_RAMP_UP& (0+255),b
 26306  018E8C  0EDE               	movlw	222
 26307  018E8E                     u18007:
 26308  018E8E  2EE8               	decfsz	wreg,f,c
 26309  018E90  D7FE               	goto	u18007
 26310  018E92  2FB4               	decfsz	??_RAMP_UP& (0+255),f,b
 26311  018E94  D7FC               	goto	u18007
 26312                           
 26313                           ;RAMP_UP.c: 80: (RD2 = 1);
 26314  018E96  8483               	bsf	3971,2,c	;volatile
 26315                           
 26316                           ;RAMP_UP.c: 81: Turbine_state = RUNNING_STATE;
 26317  018E98  0E02               	movlw	2
 26318  018E9A  0100               	movlb	0	; () banked
 26319  018E9C  6FF0               	movwf	_Turbine_state& (0+255),b
 26320                           
 26321                           ; BSR set to: 0
 26322                           ;RAMP_UP.c: 82: VFD_Data_Kill();
 26323  018E9E  ECEC  F0D6         	call	_VFD_Data_Kill	;wreg free
 26324                           
 26325                           ;RAMP_UP.c: 83: }
 26326                           ;RAMP_UP.c: 84: break;
 26327  018EA2  0012               	return	
 26328  018EA4                     l22135:
 26329                           
 26330                           ;RAMP_UP.c: 87: VFD_On_Off = 0;
 26331  018EA4  0E00               	movlw	0
 26332  018EA6  0101               	movlb	1	; () banked
 26333  018EA8  6F96               	movwf	_VFD_On_Off& (0+255),b
 26334                           
 26335                           ;RAMP_UP.c: 88: Desired_Frequency = 0;
 26336  018EAA  0E00               	movlw	0
 26337  018EAC  6E16               	movwf	_Desired_Frequency,c
 26338                           
 26339                           ; BSR set to: 1
 26340                           ;RAMP_UP.c: 89: Turbine_Pitching();
 26341  018EAE  EC81  F0D8         	call	_Turbine_Pitching	;wreg free
 26342                           
 26343                           ;RAMP_UP.c: 90: (RD0 = 0);
 26344  018EB2  9083               	bcf	3971,0,c	;volatile
 26345                           
 26346                           ;RAMP_UP.c: 91: (RD1 = 0);
 26347  018EB4  9283               	bcf	3971,1,c	;volatile
 26348                           
 26349                           ;RAMP_UP.c: 92: Turbine_state = STOPPING_STATE;
 26350  018EB6  0E03               	movlw	3
 26351  018EB8  0100               	movlb	0	; () banked
 26352  018EBA  6FF0               	movwf	_Turbine_state& (0+255),b
 26353                           
 26354                           ; BSR set to: 0
 26355                           ;RAMP_UP.c: 94: }
 26356                           
 26357                           ;RAMP_UP.c: 93: break;
 26358  018EBC  0012               	return	
 26359  018EBE                     l22147:
 26360  018EBE  0101               	movlb	1	; () banked
 26361  018EC0  5197               	movf	_VFD_RAMP& (0+255),w,b
 26362                           
 26363                           ; Switch size 1, requested type "space"
 26364                           ; Number of cases is 5, Range of values is 0 to 4
 26365                           ; switch strategies available:
 26366                           ; Name         Instructions Cycles
 26367                           ; simple_byte           16     9 (average)
 26368                           ;	Chosen strategy is simple_byte
 26369  018EC2  0A00               	xorlw	0	; case 0
 26370  018EC4  B4D8               	btfsc	status,2,c
 26371  018EC6  D794               	goto	l6990
 26372  018EC8  0A01               	xorlw	1	; case 1
 26373  018ECA  B4D8               	btfsc	status,2,c
 26374  018ECC  D7A6               	goto	l6993
 26375  018ECE  0A03               	xorlw	3	; case 2
 26376  018ED0  B4D8               	btfsc	status,2,c
 26377  018ED2  D7B1               	goto	l22111
 26378  018ED4  0A01               	xorlw	1	; case 3
 26379  018ED6  B4D8               	btfsc	status,2,c
 26380  018ED8  D7C4               	goto	l6998
 26381  018EDA  0A07               	xorlw	7	; case 4
 26382  018EDC  A4D8               	btfss	status,2,c
 26383  018EDE  0012               	return	
 26384  018EE0  D7E1               	goto	l22135
 26385  018EE2                     __end_of_RAMP_UP:
 26386                           	opt stack 0
 26387                           tblptru	equ	0xFF8
 26388                           tblptrh	equ	0xFF7
 26389                           tblptrl	equ	0xFF6
 26390                           tablat	equ	0xFF5
 26391                           prodh	equ	0xFF4
 26392                           prodl	equ	0xFF3
 26393                           intcon	equ	0xFF2
 26394                           postinc0	equ	0xFEE
 26395                           wreg	equ	0xFE8
 26396                           postdec1	equ	0xFE5
 26397                           fsr1h	equ	0xFE2
 26398                           fsr1l	equ	0xFE1
 26399                           indf2	equ	0xFDF
 26400                           postinc2	equ	0xFDE
 26401                           postdec2	equ	0xFDD
 26402                           fsr2h	equ	0xFDA
 26403                           fsr2l	equ	0xFD9
 26404                           status	equ	0xFD8
 26405                           
 26406 ;; *************** function _VFD_Freq_Step_up *****************
 26407 ;; Defined at:
 26408 ;;		line 96 in file "RAMP_UP.c"
 26409 ;; Parameters:    Size  Location     Type
 26410 ;;		None
 26411 ;; Auto vars:     Size  Location     Type
 26412 ;;		None
 26413 ;; Return value:  Size  Location     Type
 26414 ;;                  1    wreg      void 
 26415 ;; Registers used:
 26416 ;;		wreg, status,2, status,0, cstack
 26417 ;; Tracked objects:
 26418 ;;		On entry : 0/0
 26419 ;;		On exit  : 0/0
 26420 ;;		Unchanged: 0/0
 26421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26426 ;;Total ram usage:        0 bytes
 26427 ;; Hardware stack levels used:    1
 26428 ;; Hardware stack levels required when called:    5
 26429 ;; This function calls:
 26430 ;;		___ftdiv
 26431 ;;		___ftge
 26432 ;;		___ftmul
 26433 ;; This function is called by:
 26434 ;;		_RAMP_UP
 26435 ;; This function uses a non-reentrant model
 26436 ;;
 26437                           
 26438                           	psect	text86
 26439  018CF8                     __ptext86:
 26440                           	opt stack 0
 26441  018CF8                     _VFD_Freq_Step_up:
 26442                           	opt stack 23
 26443                           
 26444                           ;RAMP_UP.c: 98: if(Desired_Frequency < 50)
 26445                           
 26446                           ;incstack = 0
 26447  018CF8  0E32               	movlw	50
 26448  018CFA  6016               	cpfslt	_Desired_Frequency,c
 26449  018CFC  D001               	goto	l21479
 26450                           
 26451                           ;RAMP_UP.c: 99: {
 26452                           ;RAMP_UP.c: 100: Desired_Frequency++;
 26453  018CFE  2A16               	incf	_Desired_Frequency,f,c
 26454  018D00                     l21479:
 26455                           
 26456                           ;RAMP_UP.c: 101: }
 26457                           ;RAMP_UP.c: 102: GENERATOR_RPM_THEORY = (120*50)/(6) ;
 26458  018D00  0E00               	movlw	0
 26459  018D02  0102               	movlb	2	; () banked
 26460  018D04  6F12               	movwf	_GENERATOR_RPM_THEORY& (0+255),b
 26461  018D06  0E7A               	movlw	122
 26462  018D08  0102               	movlb	2	; () banked
 26463  018D0A  6F13               	movwf	(_GENERATOR_RPM_THEORY+1)& (0+255),b
 26464  018D0C  0E44               	movlw	68
 26465  018D0E  0102               	movlb	2	; () banked
 26466  018D10  6F14               	movwf	(_GENERATOR_RPM_THEORY+2)& (0+255),b
 26467                           
 26468                           ; BSR set to: 2
 26469                           ;RAMP_UP.c: 103: TURBINE_RPM_THEORY = GENERATOR_RPM_THEORY / (17.54) ;
 26470  018D12  C212  F0A5         	movff	_GENERATOR_RPM_THEORY,___ftdiv@f1
 26471  018D16  C213  F0A6         	movff	_GENERATOR_RPM_THEORY+1,___ftdiv@f1+1
 26472  018D1A  C214  F0A7         	movff	_GENERATOR_RPM_THEORY+2,___ftdiv@f1+2
 26473  018D1E  0E52               	movlw	82
 26474  018D20  0100               	movlb	0	; () banked
 26475  018D22  6FA8               	movwf	___ftdiv@f2& (0+255),b
 26476  018D24  0E8C               	movlw	140
 26477  018D26  0100               	movlb	0	; () banked
 26478  018D28  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 26479  018D2A  0E41               	movlw	65
 26480  018D2C  0100               	movlb	0	; () banked
 26481  018D2E  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 26482  018D30  EC53  F0C1         	call	___ftdiv	;wreg free
 26483  018D34  C0A5  F4B4         	movff	?___ftdiv,_TURBINE_RPM_THEORY
 26484  018D38  C0A6  F4B5         	movff	?___ftdiv+1,_TURBINE_RPM_THEORY+1
 26485  018D3C  C0A7  F4B6         	movff	?___ftdiv+2,_TURBINE_RPM_THEORY+2
 26486                           
 26487                           ;RAMP_UP.c: 104: RAMP_UP_TURBINE_CUT_IN_RPM = (TURBINE_RPM_THEORY * 0.92) ;
 26488  018D40  C4B4  F074         	movff	_TURBINE_RPM_THEORY,___ftmul@f1
 26489  018D44  C4B5  F075         	movff	_TURBINE_RPM_THEORY+1,___ftmul@f1+1
 26490  018D48  C4B6  F076         	movff	_TURBINE_RPM_THEORY+2,___ftmul@f1+2
 26491  018D4C  0E85               	movlw	133
 26492  018D4E  0100               	movlb	0	; () banked
 26493  018D50  6F77               	movwf	___ftmul@f2& (0+255),b
 26494  018D52  0E6B               	movlw	107
 26495  018D54  0100               	movlb	0	; () banked
 26496  018D56  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 26497  018D58  0E3F               	movlw	63
 26498  018D5A  0100               	movlb	0	; () banked
 26499  018D5C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 26500  018D5E  ECA4  F0C0         	call	___ftmul	;wreg free
 26501  018D62  C074  F4AE         	movff	?___ftmul,_RAMP_UP_TURBINE_CUT_IN_RPM
 26502  018D66  C075  F4AF         	movff	?___ftmul+1,_RAMP_UP_TURBINE_CUT_IN_RPM+1
 26503  018D6A  C076  F4B0         	movff	?___ftmul+2,_RAMP_UP_TURBINE_CUT_IN_RPM+2
 26504                           
 26505                           ;RAMP_UP.c: 105: RAMP_UP_GENERATOR_CUT_IN_RPM = (GENERATOR_RPM_THEORY * 0.90) ;
 26506  018D6E  C212  F074         	movff	_GENERATOR_RPM_THEORY,___ftmul@f1
 26507  018D72  C213  F075         	movff	_GENERATOR_RPM_THEORY+1,___ftmul@f1+1
 26508  018D76  C214  F076         	movff	_GENERATOR_RPM_THEORY+2,___ftmul@f1+2
 26509  018D7A  0E66               	movlw	102
 26510  018D7C  0100               	movlb	0	; () banked
 26511  018D7E  6F77               	movwf	___ftmul@f2& (0+255),b
 26512  018D80  0E66               	movlw	102
 26513  018D82  0100               	movlb	0	; () banked
 26514  018D84  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 26515  018D86  0E3F               	movlw	63
 26516  018D88  0100               	movlb	0	; () banked
 26517  018D8A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 26518  018D8C  ECA4  F0C0         	call	___ftmul	;wreg free
 26519  018D90  C074  F4AB         	movff	?___ftmul,_RAMP_UP_GENERATOR_CUT_IN_RPM
 26520  018D94  C075  F4AC         	movff	?___ftmul+1,_RAMP_UP_GENERATOR_CUT_IN_RPM+1
 26521  018D98  C076  F4AD         	movff	?___ftmul+2,_RAMP_UP_GENERATOR_CUT_IN_RPM+2
 26522                           
 26523                           ;RAMP_UP.c: 107: if( (Turbine_RPM >= RAMP_UP_TURBINE_CUT_IN_RPM) && (Generator_RPM_FLT >
      +                          = RAMP_UP_GENERATOR_CUT_IN_RPM) )
 26524  018D9C  C00A  F099         	movff	_Turbine_RPM,___ftge@ff1
 26525  018DA0  C00B  F09A         	movff	_Turbine_RPM+1,___ftge@ff1+1
 26526  018DA4  C00C  F09B         	movff	_Turbine_RPM+2,___ftge@ff1+2
 26527  018DA8  C4AE  F09C         	movff	_RAMP_UP_TURBINE_CUT_IN_RPM,___ftge@ff2
 26528  018DAC  C4AF  F09D         	movff	_RAMP_UP_TURBINE_CUT_IN_RPM+1,___ftge@ff2+1
 26529  018DB0  C4B0  F09E         	movff	_RAMP_UP_TURBINE_CUT_IN_RPM+2,___ftge@ff2+2
 26530  018DB4  ECEB  F0CA         	call	___ftge	;wreg free
 26531  018DB8  0100               	movlb	0	; () banked
 26532  018DBA  A0D8               	btfss	status,0,c
 26533  018DBC  0012               	return	
 26534                           
 26535                           ; BSR set to: 0
 26536  018DBE  C004  F099         	movff	_Generator_RPM_FLT,___ftge@ff1
 26537  018DC2  C005  F09A         	movff	_Generator_RPM_FLT+1,___ftge@ff1+1
 26538  018DC6  C006  F09B         	movff	_Generator_RPM_FLT+2,___ftge@ff1+2
 26539  018DCA  C4AB  F09C         	movff	_RAMP_UP_GENERATOR_CUT_IN_RPM,___ftge@ff2
 26540  018DCE  C4AC  F09D         	movff	_RAMP_UP_GENERATOR_CUT_IN_RPM+1,___ftge@ff2+1
 26541  018DD2  C4AD  F09E         	movff	_RAMP_UP_GENERATOR_CUT_IN_RPM+2,___ftge@ff2+2
 26542  018DD6  ECEB  F0CA         	call	___ftge	;wreg free
 26543  018DDA  0100               	movlb	0	; () banked
 26544  018DDC  A0D8               	btfss	status,0,c
 26545  018DDE  0012               	return	
 26546                           
 26547                           ; BSR set to: 0
 26548                           ;RAMP_UP.c: 108: {
 26549                           ;RAMP_UP.c: 109: VFD_On_Off = 0;
 26550  018DE0  0E00               	movlw	0
 26551  018DE2  0101               	movlb	1	; () banked
 26552  018DE4  6F96               	movwf	_VFD_On_Off& (0+255),b
 26553                           
 26554                           ;RAMP_UP.c: 110: VFD_RAMP = GRID_Connect;
 26555  018DE6  0E03               	movlw	3
 26556  018DE8  0101               	movlb	1	; () banked
 26557  018DEA  6F97               	movwf	_VFD_RAMP& (0+255),b
 26558  018DEC  0012               	return	
 26559  018DEE                     __end_of_VFD_Freq_Step_up:
 26560                           	opt stack 0
 26561                           tblptru	equ	0xFF8
 26562                           tblptrh	equ	0xFF7
 26563                           tblptrl	equ	0xFF6
 26564                           tablat	equ	0xFF5
 26565                           prodh	equ	0xFF4
 26566                           prodl	equ	0xFF3
 26567                           intcon	equ	0xFF2
 26568                           postinc0	equ	0xFEE
 26569                           wreg	equ	0xFE8
 26570                           postdec1	equ	0xFE5
 26571                           fsr1h	equ	0xFE2
 26572                           fsr1l	equ	0xFE1
 26573                           indf2	equ	0xFDF
 26574                           postinc2	equ	0xFDE
 26575                           postdec2	equ	0xFDD
 26576                           fsr2h	equ	0xFDA
 26577                           fsr2l	equ	0xFD9
 26578                           status	equ	0xFD8
 26579                           
 26580 ;; *************** function _VFD_Data_Kill *****************
 26581 ;; Defined at:
 26582 ;;		line 130 in file "RAMP_UP.c"
 26583 ;; Parameters:    Size  Location     Type
 26584 ;;		None
 26585 ;; Auto vars:     Size  Location     Type
 26586 ;;		None
 26587 ;; Return value:  Size  Location     Type
 26588 ;;                  1    wreg      void 
 26589 ;; Registers used:
 26590 ;;		wreg, status,2
 26591 ;; Tracked objects:
 26592 ;;		On entry : 0/0
 26593 ;;		On exit  : 0/0
 26594 ;;		Unchanged: 0/0
 26595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26600 ;;Total ram usage:        0 bytes
 26601 ;; Hardware stack levels used:    1
 26602 ;; Hardware stack levels required when called:    3
 26603 ;; This function calls:
 26604 ;;		Nothing
 26605 ;; This function is called by:
 26606 ;;		_Turbine_Start_up_1_Second
 26607 ;;		_Stopping_state_function
 26608 ;;		_RAMP_UP
 26609 ;; This function uses a non-reentrant model
 26610 ;;
 26611                           
 26612                           	psect	text87
 26613  01ADD8                     __ptext87:
 26614                           	opt stack 0
 26615  01ADD8                     _VFD_Data_Kill:
 26616                           	opt stack 25
 26617                           
 26618                           ;RAMP_UP.c: 132: VFD_Frequency = 0;
 26619                           
 26620                           ;incstack = 0
 26621  01ADD8  0E00               	movlw	0
 26622  01ADDA  0101               	movlb	1	; () banked
 26623  01ADDC  6F94               	movwf	_VFD_Frequency& (0+255),b
 26624                           
 26625                           ;RAMP_UP.c: 133: Desired_Frequency = 0;
 26626  01ADDE  0E00               	movlw	0
 26627  01ADE0  6E16               	movwf	_Desired_Frequency,c
 26628                           
 26629                           ;RAMP_UP.c: 134: VFD_Run_Time_Counter = 0;
 26630  01ADE2  0E00               	movlw	0
 26631  01ADE4  0101               	movlb	1	; () banked
 26632  01ADE6  6F3F               	movwf	(_VFD_Run_Time_Counter+1)& (0+255),b
 26633  01ADE8  0E00               	movlw	0
 26634  01ADEA  6F3E               	movwf	_VFD_Run_Time_Counter& (0+255),b
 26635                           
 26636                           ;RAMP_UP.c: 135: Rotor_Slip_Error_Flag = 0;
 26637  01ADEC  0E00               	movlw	0
 26638  01ADEE  0101               	movlb	1	; () banked
 26639  01ADF0  6F79               	movwf	_Rotor_Slip_Error_Flag& (0+255),b
 26640                           
 26641                           ;RAMP_UP.c: 136: Motor_Slip_Error_Flag = 0;
 26642  01ADF2  0E00               	movlw	0
 26643  01ADF4  0101               	movlb	1	; () banked
 26644  01ADF6  6F70               	movwf	_Motor_Slip_Error_Flag& (0+255),b
 26645                           
 26646                           ;RAMP_UP.c: 137: Slip_Error_Counter = 0;
 26647  01ADF8  0E00               	movlw	0
 26648  01ADFA  0101               	movlb	1	; () banked
 26649  01ADFC  6F7B               	movwf	_Slip_Error_Counter& (0+255),b
 26650                           
 26651                           ;RAMP_UP.c: 138: Slip_Error_Counter_1 = 0;
 26652  01ADFE  0E00               	movlw	0
 26653  01AE00  0101               	movlb	1	; () banked
 26654  01AE02  6F7C               	movwf	_Slip_Error_Counter_1& (0+255),b
 26655                           
 26656                           ; BSR set to: 1
 26657  01AE04  0012               	return		;funcret
 26658  01AE06                     __end_of_VFD_Data_Kill:
 26659                           	opt stack 0
 26660                           tblptru	equ	0xFF8
 26661                           tblptrh	equ	0xFF7
 26662                           tblptrl	equ	0xFF6
 26663                           tablat	equ	0xFF5
 26664                           prodh	equ	0xFF4
 26665                           prodl	equ	0xFF3
 26666                           intcon	equ	0xFF2
 26667                           postinc0	equ	0xFEE
 26668                           wreg	equ	0xFE8
 26669                           postdec1	equ	0xFE5
 26670                           fsr1h	equ	0xFE2
 26671                           fsr1l	equ	0xFE1
 26672                           indf2	equ	0xFDF
 26673                           postinc2	equ	0xFDE
 26674                           postdec2	equ	0xFDD
 26675                           fsr2h	equ	0xFDA
 26676                           fsr2l	equ	0xFD9
 26677                           status	equ	0xFD8
 26678                           
 26679 ;; *************** function _Turbine_Pitching *****************
 26680 ;; Defined at:
 26681 ;;		line 40 in file "PITCHING.c"
 26682 ;; Parameters:    Size  Location     Type
 26683 ;;		None
 26684 ;; Auto vars:     Size  Location     Type
 26685 ;;		None
 26686 ;; Return value:  Size  Location     Type
 26687 ;;                  1    wreg      void 
 26688 ;; Registers used:
 26689 ;;		None
 26690 ;; Tracked objects:
 26691 ;;		On entry : 0/0
 26692 ;;		On exit  : 0/0
 26693 ;;		Unchanged: 0/0
 26694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26699 ;;Total ram usage:        0 bytes
 26700 ;; Hardware stack levels used:    1
 26701 ;; Hardware stack levels required when called:    3
 26702 ;; This function calls:
 26703 ;;		Nothing
 26704 ;; This function is called by:
 26705 ;;		_Stopping_state_function
 26706 ;;		_RAMP_UP
 26707 ;; This function uses a non-reentrant model
 26708 ;;
 26709                           
 26710                           	psect	text88
 26711  01B102                     __ptext88:
 26712                           	opt stack 0
 26713  01B102                     _Turbine_Pitching:
 26714                           	opt stack 25
 26715                           
 26716                           ;PITCHING.c: 42: (RB0 = 0);
 26717                           
 26718                           ; BSR set to: 1
 26719                           ;incstack = 0
 26720  01B102  9081               	bcf	3969,0,c	;volatile
 26721  01B104  0012               	return		;funcret
 26722  01B106                     __end_of_Turbine_Pitching:
 26723                           	opt stack 0
 26724                           tblptru	equ	0xFF8
 26725                           tblptrh	equ	0xFF7
 26726                           tblptrl	equ	0xFF6
 26727                           tablat	equ	0xFF5
 26728                           prodh	equ	0xFF4
 26729                           prodl	equ	0xFF3
 26730                           intcon	equ	0xFF2
 26731                           postinc0	equ	0xFEE
 26732                           wreg	equ	0xFE8
 26733                           postdec1	equ	0xFE5
 26734                           fsr1h	equ	0xFE2
 26735                           fsr1l	equ	0xFE1
 26736                           indf2	equ	0xFDF
 26737                           postinc2	equ	0xFDE
 26738                           postdec2	equ	0xFDD
 26739                           fsr2h	equ	0xFDA
 26740                           fsr2l	equ	0xFD9
 26741                           status	equ	0xFD8
 26742                           
 26743 ;; *************** function _Pitch_Release *****************
 26744 ;; Defined at:
 26745 ;;		line 22 in file "PITCHING.c"
 26746 ;; Parameters:    Size  Location     Type
 26747 ;;		None
 26748 ;; Auto vars:     Size  Location     Type
 26749 ;;		None
 26750 ;; Return value:  Size  Location     Type
 26751 ;;                  2  6324[None  ] int 
 26752 ;; Registers used:
 26753 ;;		wreg, status,2, status,0
 26754 ;; Tracked objects:
 26755 ;;		On entry : 0/0
 26756 ;;		On exit  : 0/0
 26757 ;;		Unchanged: 0/0
 26758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26763 ;;Total ram usage:        0 bytes
 26764 ;; Hardware stack levels used:    1
 26765 ;; Hardware stack levels required when called:    3
 26766 ;; This function calls:
 26767 ;;		Nothing
 26768 ;; This function is called by:
 26769 ;;		_RAMP_UP
 26770 ;; This function uses a non-reentrant model
 26771 ;;
 26772                           
 26773                           	psect	text89
 26774  01ABD2                     __ptext89:
 26775                           	opt stack 0
 26776  01ABD2                     _Pitch_Release:
 26777                           	opt stack 25
 26778                           
 26779                           ;PITCHING.c: 24: if(Turbine_state == RAMPUP_STATE)
 26780                           
 26781                           ;incstack = 0
 26782  01ABD2  0100               	movlb	0	; () banked
 26783  01ABD4  05F0               	decf	_Turbine_state& (0+255),w,b
 26784  01ABD6  A4D8               	btfss	status,2,c
 26785  01ABD8  0012               	return	
 26786                           
 26787                           ; BSR set to: 0
 26788                           ;PITCHING.c: 25: {
 26789                           ;PITCHING.c: 26: if(Pitching_FlAG == 1)
 26790  01ABDA  0102               	movlb	2	; () banked
 26791  01ABDC  0598               	decf	_Pitching_FlAG& (0+255),w,b
 26792  01ABDE  0102               	movlb	2	; () banked
 26793  01ABE0  1199               	iorwf	(_Pitching_FlAG+1)& (0+255),w,b
 26794  01ABE2  A4D8               	btfss	status,2,c
 26795  01ABE4  0012               	return	
 26796                           
 26797                           ; BSR set to: 2
 26798                           ;PITCHING.c: 27: {
 26799                           ;PITCHING.c: 28: Two_Sec_Delay_vab = 1;
 26800  01ABE6  0E01               	movlw	1
 26801  01ABE8  0101               	movlb	1	; () banked
 26802  01ABEA  6F8D               	movwf	_Two_Sec_Delay_vab& (0+255),b
 26803                           
 26804                           ;PITCHING.c: 29: if(Two_sec_Delay_Flag)
 26805  01ABEC  0101               	movlb	1	; () banked
 26806  01ABEE  518E               	movf	_Two_sec_Delay_Flag& (0+255),w,b
 26807  01ABF0  B4D8               	btfsc	status,2,c
 26808  01ABF2  0012               	return	
 26809                           
 26810                           ; BSR set to: 1
 26811                           ;PITCHING.c: 30: {
 26812                           ;PITCHING.c: 31: Two_Sec_Delay_vab = 0;
 26813  01ABF4  0E00               	movlw	0
 26814  01ABF6  0101               	movlb	1	; () banked
 26815  01ABF8  6F8D               	movwf	_Two_Sec_Delay_vab& (0+255),b
 26816                           
 26817                           ;PITCHING.c: 32: Two_sec_Delay_Flag = 0;
 26818  01ABFA  0E00               	movlw	0
 26819  01ABFC  0101               	movlb	1	; () banked
 26820  01ABFE  6F8E               	movwf	_Two_sec_Delay_Flag& (0+255),b
 26821                           
 26822                           ; BSR set to: 1
 26823                           ;PITCHING.c: 33: (RB0 = 1);
 26824  01AC00  8081               	bsf	3969,0,c	;volatile
 26825                           
 26826                           ;PITCHING.c: 34: Pitching_FlAG = 0;
 26827  01AC02  0E00               	movlw	0
 26828  01AC04  0102               	movlb	2	; () banked
 26829  01AC06  6F99               	movwf	(_Pitching_FlAG+1)& (0+255),b
 26830  01AC08  0E00               	movlw	0
 26831  01AC0A  6F98               	movwf	_Pitching_FlAG& (0+255),b
 26832                           
 26833                           ; BSR set to: 2
 26834                           
 26835                           ; BSR set to: 2
 26836  01AC0C  0012               	return	
 26837  01AC0E                     __end_of_Pitch_Release:
 26838                           	opt stack 0
 26839                           tblptru	equ	0xFF8
 26840                           tblptrh	equ	0xFF7
 26841                           tblptrl	equ	0xFF6
 26842                           tablat	equ	0xFF5
 26843                           prodh	equ	0xFF4
 26844                           prodl	equ	0xFF3
 26845                           intcon	equ	0xFF2
 26846                           postinc0	equ	0xFEE
 26847                           wreg	equ	0xFE8
 26848                           postdec1	equ	0xFE5
 26849                           fsr1h	equ	0xFE2
 26850                           fsr1l	equ	0xFE1
 26851                           indf2	equ	0xFDF
 26852                           postinc2	equ	0xFDE
 26853                           postdec2	equ	0xFDD
 26854                           fsr2h	equ	0xFDA
 26855                           fsr2l	equ	0xFD9
 26856                           status	equ	0xFD8
 26857                           
 26858 ;; *************** function _R_PF_Calc *****************
 26859 ;; Defined at:
 26860 ;;		line 349 in file "Power_Meter.c"
 26861 ;; Parameters:    Size  Location     Type
 26862 ;;		None
 26863 ;; Auto vars:     Size  Location     Type
 26864 ;;		None
 26865 ;; Return value:  Size  Location     Type
 26866 ;;                  1    wreg      void 
 26867 ;; Registers used:
 26868 ;;		wreg, status,2, status,0, cstack
 26869 ;; Tracked objects:
 26870 ;;		On entry : 0/0
 26871 ;;		On exit  : 0/0
 26872 ;;		Unchanged: 0/0
 26873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26875 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26877 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26878 ;;Total ram usage:        3 bytes
 26879 ;; Hardware stack levels used:    1
 26880 ;; Hardware stack levels required when called:    5
 26881 ;; This function calls:
 26882 ;;		___ftadd
 26883 ;;		___ftdiv
 26884 ;;		___ftge
 26885 ;;		___ftmul
 26886 ;;		___ftneg
 26887 ;; This function is called by:
 26888 ;;		_main
 26889 ;; This function uses a non-reentrant model
 26890 ;;
 26891                           
 26892                           	psect	text90
 26893  016BAE                     __ptext90:
 26894                           	opt stack 0
 26895  016BAE                     _R_PF_Calc:
 26896                           	opt stack 25
 26897                           
 26898                           ;Power_Meter.c: 351: if(Rcurr_V_New < Rcurr_V_Old)
 26899                           
 26900                           ;incstack = 0
 26901  016BAE  C0FA  F099         	movff	_Rcurr_V_New,___ftge@ff1
 26902  016BB2  C0FB  F09A         	movff	_Rcurr_V_New+1,___ftge@ff1+1
 26903  016BB6  C0FC  F09B         	movff	_Rcurr_V_New+2,___ftge@ff1+2
 26904  016BBA  C21E  F09C         	movff	_Rcurr_V_Old,___ftge@ff2
 26905  016BBE  C21F  F09D         	movff	_Rcurr_V_Old+1,___ftge@ff2+1
 26906  016BC2  C220  F09E         	movff	_Rcurr_V_Old+2,___ftge@ff2+2
 26907  016BC6  ECEB  F0CA         	call	___ftge	;wreg free
 26908  016BCA  0100               	movlb	0	; () banked
 26909  016BCC  B0D8               	btfsc	status,0,c
 26910  016BCE  D02E               	goto	l22467
 26911                           
 26912                           ; BSR set to: 0
 26913                           ;Power_Meter.c: 352: {
 26914                           ;Power_Meter.c: 353: R_V_Gap = ((Rcurr_V_New - Rcurr_V_Old + 1) + 65536);
 26915  016BD0  C0FA  F090         	movff	_Rcurr_V_New,___ftadd@f2
 26916  016BD4  C0FB  F091         	movff	_Rcurr_V_New+1,___ftadd@f2+1
 26917  016BD8  C0FC  F092         	movff	_Rcurr_V_New+2,___ftadd@f2+2
 26918  016BDC  C21E  F083         	movff	_Rcurr_V_Old,___ftneg@f1
 26919  016BE0  C21F  F084         	movff	_Rcurr_V_Old+1,___ftneg@f1+1
 26920  016BE4  C220  F085         	movff	_Rcurr_V_Old+2,___ftneg@f1+2
 26921  016BE8  ECBD  F0D6         	call	___ftneg	;wreg free
 26922  016BEC  C083  F08D         	movff	?___ftneg,___ftadd@f1
 26923  016BF0  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 26924  016BF4  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 26925  016BF8  EC69  F0B2         	call	___ftadd	;wreg free
 26926  016BFC  C08D  F0B4         	movff	?___ftadd,_R_PF_Calc$8057
 26927  016C00  C08E  F0B5         	movff	?___ftadd+1,_R_PF_Calc$8057+1
 26928  016C04  C08F  F0B6         	movff	?___ftadd+2,_R_PF_Calc$8057+2
 26929                           
 26930                           ;Power_Meter.c: 352: {
 26931                           ;Power_Meter.c: 353: R_V_Gap = ((Rcurr_V_New - Rcurr_V_Old + 1) + 65536);
 26932  016C08  C0B4  F08D         	movff	_R_PF_Calc$8057,___ftadd@f1
 26933  016C0C  C0B5  F08E         	movff	_R_PF_Calc$8057+1,___ftadd@f1+1
 26934  016C10  C0B6  F08F         	movff	_R_PF_Calc$8057+2,___ftadd@f1+2
 26935  016C14  0E01               	movlw	1
 26936  016C16  0100               	movlb	0	; () banked
 26937  016C18  6F90               	movwf	___ftadd@f2& (0+255),b
 26938  016C1A  0E80               	movlw	128
 26939  016C1C  0100               	movlb	0	; () banked
 26940  016C1E  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 26941  016C20  0E47               	movlw	71
 26942  016C22  0100               	movlb	0	; () banked
 26943  016C24  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 26944  016C26  EC69  F0B2         	call	___ftadd	;wreg free
 26945  016C2A  D088               	goto	L13
 26946  016C2C                     l22467:
 26947                           
 26948                           ;Power_Meter.c: 356: else if((Rcurr_New + 100) < Rcurr_V_New)
 26949  016C2C  0E00               	movlw	0
 26950  016C2E  0100               	movlb	0	; () banked
 26951  016C30  6F90               	movwf	___ftadd@f2& (0+255),b
 26952  016C32  0EC8               	movlw	200
 26953  016C34  0100               	movlb	0	; () banked
 26954  016C36  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 26955  016C38  0E42               	movlw	66
 26956  016C3A  0100               	movlb	0	; () banked
 26957  016C3C  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 26958  016C3E  C1A1  F08D         	movff	_Rcurr_New,___ftadd@f1
 26959  016C42  C1A2  F08E         	movff	_Rcurr_New+1,___ftadd@f1+1
 26960  016C46  C1A3  F08F         	movff	_Rcurr_New+2,___ftadd@f1+2
 26961  016C4A  EC69  F0B2         	call	___ftadd	;wreg free
 26962  016C4E  C08D  F099         	movff	?___ftadd,___ftge@ff1
 26963  016C52  C08E  F09A         	movff	?___ftadd+1,___ftge@ff1+1
 26964  016C56  C08F  F09B         	movff	?___ftadd+2,___ftge@ff1+2
 26965  016C5A  C0FA  F09C         	movff	_Rcurr_V_New,___ftge@ff2
 26966  016C5E  C0FB  F09D         	movff	_Rcurr_V_New+1,___ftge@ff2+1
 26967  016C62  C0FC  F09E         	movff	_Rcurr_V_New+2,___ftge@ff2+2
 26968  016C66  ECEB  F0CA         	call	___ftge	;wreg free
 26969  016C6A  0100               	movlb	0	; () banked
 26970  016C6C  B0D8               	btfsc	status,0,c
 26971  016C6E  D034               	goto	l22471
 26972                           
 26973                           ; BSR set to: 0
 26974                           ;Power_Meter.c: 357: {
 26975                           ;Power_Meter.c: 358: R_C_Gap = ((Rcurr_New - Rcurr_V_New + 1) + 65536);
 26976  016C70  C1A1  F090         	movff	_Rcurr_New,___ftadd@f2
 26977  016C74  C1A2  F091         	movff	_Rcurr_New+1,___ftadd@f2+1
 26978  016C78  C1A3  F092         	movff	_Rcurr_New+2,___ftadd@f2+2
 26979  016C7C  C0FA  F083         	movff	_Rcurr_V_New,___ftneg@f1
 26980  016C80  C0FB  F084         	movff	_Rcurr_V_New+1,___ftneg@f1+1
 26981  016C84  C0FC  F085         	movff	_Rcurr_V_New+2,___ftneg@f1+2
 26982  016C88  ECBD  F0D6         	call	___ftneg	;wreg free
 26983  016C8C  C083  F08D         	movff	?___ftneg,___ftadd@f1
 26984  016C90  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 26985  016C94  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 26986  016C98  EC69  F0B2         	call	___ftadd	;wreg free
 26987  016C9C  C08D  F0B4         	movff	?___ftadd,_R_PF_Calc$8057
 26988  016CA0  C08E  F0B5         	movff	?___ftadd+1,_R_PF_Calc$8057+1
 26989  016CA4  C08F  F0B6         	movff	?___ftadd+2,_R_PF_Calc$8057+2
 26990                           
 26991                           ;Power_Meter.c: 357: {
 26992                           ;Power_Meter.c: 358: R_C_Gap = ((Rcurr_New - Rcurr_V_New + 1) + 65536);
 26993  016CA8  C0B4  F08D         	movff	_R_PF_Calc$8057,___ftadd@f1
 26994  016CAC  C0B5  F08E         	movff	_R_PF_Calc$8057+1,___ftadd@f1+1
 26995  016CB0  C0B6  F08F         	movff	_R_PF_Calc$8057+2,___ftadd@f1+2
 26996  016CB4  0E01               	movlw	1
 26997  016CB6  0100               	movlb	0	; () banked
 26998  016CB8  6F90               	movwf	___ftadd@f2& (0+255),b
 26999  016CBA  0E80               	movlw	128
 27000  016CBC  0100               	movlb	0	; () banked
 27001  016CBE  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 27002  016CC0  0E47               	movlw	71
 27003  016CC2  0100               	movlb	0	; () banked
 27004  016CC4  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 27005  016CC6  EC69  F0B2         	call	___ftadd	;wreg free
 27006  016CCA  C08D  F58E         	movff	?___ftadd,_R_C_Gap
 27007  016CCE  C08E  F58F         	movff	?___ftadd+1,_R_C_Gap+1
 27008  016CD2  C08F  F590         	movff	?___ftadd+2,_R_C_Gap+2
 27009                           
 27010                           ;Power_Meter.c: 359: }
 27011  016CD6  D038               	goto	l9228
 27012  016CD8                     l22471:
 27013                           
 27014                           ;Power_Meter.c: 361: else
 27015                           ;Power_Meter.c: 362: {
 27016                           ;Power_Meter.c: 363: R_C_Gap = (Rcurr_New - Rcurr_V_New);
 27017  016CD8  C0FA  F083         	movff	_Rcurr_V_New,___ftneg@f1
 27018  016CDC  C0FB  F084         	movff	_Rcurr_V_New+1,___ftneg@f1+1
 27019  016CE0  C0FC  F085         	movff	_Rcurr_V_New+2,___ftneg@f1+2
 27020  016CE4  ECBD  F0D6         	call	___ftneg	;wreg free
 27021  016CE8  C083  F08D         	movff	?___ftneg,___ftadd@f1
 27022  016CEC  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 27023  016CF0  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 27024  016CF4  C1A1  F090         	movff	_Rcurr_New,___ftadd@f2
 27025  016CF8  C1A2  F091         	movff	_Rcurr_New+1,___ftadd@f2+1
 27026  016CFC  C1A3  F092         	movff	_Rcurr_New+2,___ftadd@f2+2
 27027  016D00  EC69  F0B2         	call	___ftadd	;wreg free
 27028  016D04  C08D  F58E         	movff	?___ftadd,_R_C_Gap
 27029  016D08  C08E  F58F         	movff	?___ftadd+1,_R_C_Gap+1
 27030  016D0C  C08F  F590         	movff	?___ftadd+2,_R_C_Gap+2
 27031                           
 27032                           ;Power_Meter.c: 364: R_V_Gap = (Rcurr_V_New - Rcurr_V_Old);
 27033  016D10  C21E  F083         	movff	_Rcurr_V_Old,___ftneg@f1
 27034  016D14  C21F  F084         	movff	_Rcurr_V_Old+1,___ftneg@f1+1
 27035  016D18  C220  F085         	movff	_Rcurr_V_Old+2,___ftneg@f1+2
 27036  016D1C  ECBD  F0D6         	call	___ftneg	;wreg free
 27037  016D20  C083  F08D         	movff	?___ftneg,___ftadd@f1
 27038  016D24  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 27039  016D28  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 27040  016D2C  C0FA  F090         	movff	_Rcurr_V_New,___ftadd@f2
 27041  016D30  C0FB  F091         	movff	_Rcurr_V_New+1,___ftadd@f2+1
 27042  016D34  C0FC  F092         	movff	_Rcurr_V_New+2,___ftadd@f2+2
 27043  016D38  EC69  F0B2         	call	___ftadd	;wreg free
 27044  016D3C                     L13:
 27045  016D3C  C08D  F4B1         	movff	?___ftadd,_R_V_Gap
 27046  016D40  C08E  F4B2         	movff	?___ftadd+1,_R_V_Gap+1
 27047  016D44  C08F  F4B3         	movff	?___ftadd+2,_R_V_Gap+2
 27048  016D48                     l9228:
 27049                           
 27050                           ;Power_Meter.c: 365: }
 27051                           ;Power_Meter.c: 367: R_Gap_Ratio = (R_C_Gap / R_V_Gap);
 27052  016D48  C58E  F0A5         	movff	_R_C_Gap,___ftdiv@f1
 27053  016D4C  C58F  F0A6         	movff	_R_C_Gap+1,___ftdiv@f1+1
 27054  016D50  C590  F0A7         	movff	_R_C_Gap+2,___ftdiv@f1+2
 27055  016D54  C4B1  F0A8         	movff	_R_V_Gap,___ftdiv@f2
 27056  016D58  C4B2  F0A9         	movff	_R_V_Gap+1,___ftdiv@f2+1
 27057  016D5C  C4B3  F0AA         	movff	_R_V_Gap+2,___ftdiv@f2+2
 27058  016D60  EC53  F0C1         	call	___ftdiv	;wreg free
 27059  016D64  C0A5  F10F         	movff	?___ftdiv,_R_Gap_Ratio
 27060  016D68  C0A6  F110         	movff	?___ftdiv+1,_R_Gap_Ratio+1
 27061  016D6C  C0A7  F111         	movff	?___ftdiv+2,_R_Gap_Ratio+2
 27062                           
 27063                           ;Power_Meter.c: 368: R_Deg = R_Gap_Ratio * 360;
 27064  016D70  C10F  F074         	movff	_R_Gap_Ratio,___ftmul@f1
 27065  016D74  C110  F075         	movff	_R_Gap_Ratio+1,___ftmul@f1+1
 27066  016D78  C111  F076         	movff	_R_Gap_Ratio+2,___ftmul@f1+2
 27067  016D7C  0E00               	movlw	0
 27068  016D7E  0100               	movlb	0	; () banked
 27069  016D80  6F77               	movwf	___ftmul@f2& (0+255),b
 27070  016D82  0EB4               	movlw	180
 27071  016D84  0100               	movlb	0	; () banked
 27072  016D86  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 27073  016D88  0E43               	movlw	67
 27074  016D8A  0100               	movlb	0	; () banked
 27075  016D8C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 27076  016D8E  ECA4  F0C0         	call	___ftmul	;wreg free
 27077  016D92  C074  F666         	movff	?___ftmul,_R_Deg
 27078  016D96  C075  F667         	movff	?___ftmul+1,_R_Deg+1
 27079  016D9A  C076  F668         	movff	?___ftmul+2,_R_Deg+2
 27080                           
 27081                           ;Power_Meter.c: 370: RGR_Arr_1[4] = RGR_Arr_1[3];
 27082  016D9E  C3CF  F3D2         	movff	_RGR_Arr_1+9,_RGR_Arr_1+12
 27083  016DA2  C3D0  F3D3         	movff	_RGR_Arr_1+10,_RGR_Arr_1+13
 27084  016DA6  C3D1  F3D4         	movff	_RGR_Arr_1+11,_RGR_Arr_1+14
 27085                           
 27086                           ;Power_Meter.c: 371: RGR_Arr_1[3] = RGR_Arr_1[2];
 27087  016DAA  C3CC  F3CF         	movff	_RGR_Arr_1+6,_RGR_Arr_1+9
 27088  016DAE  C3CD  F3D0         	movff	_RGR_Arr_1+7,_RGR_Arr_1+10
 27089  016DB2  C3CE  F3D1         	movff	_RGR_Arr_1+8,_RGR_Arr_1+11
 27090                           
 27091                           ;Power_Meter.c: 372: RGR_Arr_1[2] = RGR_Arr_1[1];
 27092  016DB6  C3C9  F3CC         	movff	_RGR_Arr_1+3,_RGR_Arr_1+6
 27093  016DBA  C3CA  F3CD         	movff	_RGR_Arr_1+4,_RGR_Arr_1+7
 27094  016DBE  C3CB  F3CE         	movff	_RGR_Arr_1+5,_RGR_Arr_1+8
 27095                           
 27096                           ;Power_Meter.c: 373: RGR_Arr_1[1] = RGR_Arr_1[0];
 27097  016DC2  C3C6  F3C9         	movff	_RGR_Arr_1,_RGR_Arr_1+3
 27098  016DC6  C3C7  F3CA         	movff	_RGR_Arr_1+1,_RGR_Arr_1+4
 27099  016DCA  C3C8  F3CB         	movff	_RGR_Arr_1+2,_RGR_Arr_1+5
 27100                           
 27101                           ;Power_Meter.c: 374: RGR_Arr_1[0] = R_Gap_Ratio;
 27102  016DCE  C10F  F3C6         	movff	_R_Gap_Ratio,_RGR_Arr_1
 27103  016DD2  C110  F3C7         	movff	_R_Gap_Ratio+1,_RGR_Arr_1+1
 27104  016DD6  C111  F3C8         	movff	_R_Gap_Ratio+2,_RGR_Arr_1+2
 27105  016DDA  0012               	return		;funcret
 27106  016DDC                     __end_of_R_PF_Calc:
 27107                           	opt stack 0
 27108                           tblptru	equ	0xFF8
 27109                           tblptrh	equ	0xFF7
 27110                           tblptrl	equ	0xFF6
 27111                           tablat	equ	0xFF5
 27112                           prodh	equ	0xFF4
 27113                           prodl	equ	0xFF3
 27114                           intcon	equ	0xFF2
 27115                           postinc0	equ	0xFEE
 27116                           wreg	equ	0xFE8
 27117                           postdec1	equ	0xFE5
 27118                           fsr1h	equ	0xFE2
 27119                           fsr1l	equ	0xFE1
 27120                           indf2	equ	0xFDF
 27121                           postinc2	equ	0xFDE
 27122                           postdec2	equ	0xFDD
 27123                           fsr2h	equ	0xFDA
 27124                           fsr2l	equ	0xFD9
 27125                           status	equ	0xFD8
 27126                           
 27127 ;; *************** function _R_PF_Avg *****************
 27128 ;; Defined at:
 27129 ;;		line 378 in file "Power_Meter.c"
 27130 ;; Parameters:    Size  Location     Type
 27131 ;;		None
 27132 ;; Auto vars:     Size  Location     Type
 27133 ;;		None
 27134 ;; Return value:  Size  Location     Type
 27135 ;;                  1    wreg      void 
 27136 ;; Registers used:
 27137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27138 ;; Tracked objects:
 27139 ;;		On entry : 0/0
 27140 ;;		On exit  : 0/0
 27141 ;;		Unchanged: 0/0
 27142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27144 ;;      Locals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 27145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27146 ;;      Totals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 27147 ;;Total ram usage:       84 bytes
 27148 ;; Hardware stack levels used:    1
 27149 ;; Hardware stack levels required when called:    8
 27150 ;; This function calls:
 27151 ;;		___ftadd
 27152 ;;		___ftdiv
 27153 ;;		___ftge
 27154 ;;		___ftmul
 27155 ;;		_cos
 27156 ;; This function is called by:
 27157 ;;		_main
 27158 ;; This function uses a non-reentrant model
 27159 ;;
 27160                           
 27161                           	psect	text91
 27162  012194                     __ptext91:
 27163                           	opt stack 0
 27164  012194                     _R_PF_Avg:
 27165                           	opt stack 22
 27166                           
 27167                           ;Power_Meter.c: 380: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 27168                           
 27169                           ;incstack = 0
 27170  012194  C3CF  F090         	movff	_RGR_Arr_1+9,___ftadd@f2
 27171  012198  C3D0  F091         	movff	_RGR_Arr_1+10,___ftadd@f2+1
 27172  01219C  C3D1  F092         	movff	_RGR_Arr_1+11,___ftadd@f2+2
 27173  0121A0  C3D2  F08D         	movff	_RGR_Arr_1+12,___ftadd@f1
 27174  0121A4  C3D3  F08E         	movff	_RGR_Arr_1+13,___ftadd@f1+1
 27175  0121A8  C3D4  F08F         	movff	_RGR_Arr_1+14,___ftadd@f1+2
 27176  0121AC  EC69  F0B2         	call	___ftadd	;wreg free
 27177  0121B0  C08D  F6C0         	movff	?___ftadd,_R_PF_Avg$8058
 27178  0121B4  C08E  F6C1         	movff	?___ftadd+1,_R_PF_Avg$8058+1
 27179  0121B8  C08F  F6C2         	movff	?___ftadd+2,_R_PF_Avg$8058+2
 27180                           
 27181                           ;Power_Meter.c: 380: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 27182  0121BC  C3CC  F090         	movff	_RGR_Arr_1+6,___ftadd@f2
 27183  0121C0  C3CD  F091         	movff	_RGR_Arr_1+7,___ftadd@f2+1
 27184  0121C4  C3CE  F092         	movff	_RGR_Arr_1+8,___ftadd@f2+2
 27185  0121C8  C6C0  F08D         	movff	_R_PF_Avg$8058,___ftadd@f1
 27186  0121CC  C6C1  F08E         	movff	_R_PF_Avg$8058+1,___ftadd@f1+1
 27187  0121D0  C6C2  F08F         	movff	_R_PF_Avg$8058+2,___ftadd@f1+2
 27188  0121D4  EC69  F0B2         	call	___ftadd	;wreg free
 27189  0121D8  C08D  F6C3         	movff	?___ftadd,_R_PF_Avg$8059
 27190  0121DC  C08E  F6C4         	movff	?___ftadd+1,_R_PF_Avg$8059+1
 27191  0121E0  C08F  F6C5         	movff	?___ftadd+2,_R_PF_Avg$8059+2
 27192                           
 27193                           ;Power_Meter.c: 380: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 27194  0121E4  C3C9  F090         	movff	_RGR_Arr_1+3,___ftadd@f2
 27195  0121E8  C3CA  F091         	movff	_RGR_Arr_1+4,___ftadd@f2+1
 27196  0121EC  C3CB  F092         	movff	_RGR_Arr_1+5,___ftadd@f2+2
 27197  0121F0  C6C3  F08D         	movff	_R_PF_Avg$8059,___ftadd@f1
 27198  0121F4  C6C4  F08E         	movff	_R_PF_Avg$8059+1,___ftadd@f1+1
 27199  0121F8  C6C5  F08F         	movff	_R_PF_Avg$8059+2,___ftadd@f1+2
 27200  0121FC  EC69  F0B2         	call	___ftadd	;wreg free
 27201  012200  C08D  F6C6         	movff	?___ftadd,_R_PF_Avg$8060
 27202  012204  C08E  F6C7         	movff	?___ftadd+1,_R_PF_Avg$8060+1
 27203  012208  C08F  F6C8         	movff	?___ftadd+2,_R_PF_Avg$8060+2
 27204                           
 27205                           ;Power_Meter.c: 380: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 27206  01220C  C3C6  F090         	movff	_RGR_Arr_1,___ftadd@f2
 27207  012210  C3C7  F091         	movff	_RGR_Arr_1+1,___ftadd@f2+1
 27208  012214  C3C8  F092         	movff	_RGR_Arr_1+2,___ftadd@f2+2
 27209  012218  C6C6  F08D         	movff	_R_PF_Avg$8060,___ftadd@f1
 27210  01221C  C6C7  F08E         	movff	_R_PF_Avg$8060+1,___ftadd@f1+1
 27211  012220  C6C8  F08F         	movff	_R_PF_Avg$8060+2,___ftadd@f1+2
 27212  012224  EC69  F0B2         	call	___ftadd	;wreg free
 27213  012228  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 27214  01222C  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 27215  012230  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 27216  012234  0E00               	movlw	0
 27217  012236  0100               	movlb	0	; () banked
 27218  012238  6FA8               	movwf	___ftdiv@f2& (0+255),b
 27219  01223A  0EA0               	movlw	160
 27220  01223C  0100               	movlb	0	; () banked
 27221  01223E  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 27222  012240  0E40               	movlw	64
 27223  012242  0100               	movlb	0	; () banked
 27224  012244  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 27225  012246  EC53  F0C1         	call	___ftdiv	;wreg free
 27226  01224A  C0A5  F21B         	movff	?___ftdiv,_RGR_Avg_1
 27227  01224E  C0A6  F21C         	movff	?___ftdiv+1,_RGR_Avg_1+1
 27228  012252  C0A7  F21D         	movff	?___ftdiv+2,_RGR_Avg_1+2
 27229                           
 27230                           ;Power_Meter.c: 383: RGR_Arr[29] = RGR_Arr[28];
 27231  012256  C354  F357         	movff	_RGR_Arr+84,_RGR_Arr+87
 27232  01225A  C355  F358         	movff	_RGR_Arr+85,_RGR_Arr+88
 27233  01225E  C356  F359         	movff	_RGR_Arr+86,_RGR_Arr+89
 27234                           
 27235                           ;Power_Meter.c: 384: RGR_Arr[28] = RGR_Arr[27];
 27236  012262  C351  F354         	movff	_RGR_Arr+81,_RGR_Arr+84
 27237  012266  C352  F355         	movff	_RGR_Arr+82,_RGR_Arr+85
 27238  01226A  C353  F356         	movff	_RGR_Arr+83,_RGR_Arr+86
 27239                           
 27240                           ;Power_Meter.c: 385: RGR_Arr[27] = RGR_Arr[26];
 27241  01226E  C34E  F351         	movff	_RGR_Arr+78,_RGR_Arr+81
 27242  012272  C34F  F352         	movff	_RGR_Arr+79,_RGR_Arr+82
 27243  012276  C350  F353         	movff	_RGR_Arr+80,_RGR_Arr+83
 27244                           
 27245                           ;Power_Meter.c: 386: RGR_Arr[26] = RGR_Arr[25];
 27246  01227A  C34B  F34E         	movff	_RGR_Arr+75,_RGR_Arr+78
 27247  01227E  C34C  F34F         	movff	_RGR_Arr+76,_RGR_Arr+79
 27248  012282  C34D  F350         	movff	_RGR_Arr+77,_RGR_Arr+80
 27249                           
 27250                           ;Power_Meter.c: 387: RGR_Arr[25] = RGR_Arr[24];
 27251  012286  C348  F34B         	movff	_RGR_Arr+72,_RGR_Arr+75
 27252  01228A  C349  F34C         	movff	_RGR_Arr+73,_RGR_Arr+76
 27253  01228E  C34A  F34D         	movff	_RGR_Arr+74,_RGR_Arr+77
 27254                           
 27255                           ;Power_Meter.c: 388: RGR_Arr[24] = RGR_Arr[23];
 27256  012292  C345  F348         	movff	_RGR_Arr+69,_RGR_Arr+72
 27257  012296  C346  F349         	movff	_RGR_Arr+70,_RGR_Arr+73
 27258  01229A  C347  F34A         	movff	_RGR_Arr+71,_RGR_Arr+74
 27259                           
 27260                           ;Power_Meter.c: 389: RGR_Arr[23] = RGR_Arr[22];
 27261  01229E  C342  F345         	movff	_RGR_Arr+66,_RGR_Arr+69
 27262  0122A2  C343  F346         	movff	_RGR_Arr+67,_RGR_Arr+70
 27263  0122A6  C344  F347         	movff	_RGR_Arr+68,_RGR_Arr+71
 27264                           
 27265                           ;Power_Meter.c: 390: RGR_Arr[22] = RGR_Arr[21];
 27266  0122AA  C33F  F342         	movff	_RGR_Arr+63,_RGR_Arr+66
 27267  0122AE  C340  F343         	movff	_RGR_Arr+64,_RGR_Arr+67
 27268  0122B2  C341  F344         	movff	_RGR_Arr+65,_RGR_Arr+68
 27269                           
 27270                           ;Power_Meter.c: 391: RGR_Arr[21] = RGR_Arr[20];
 27271  0122B6  C33C  F33F         	movff	_RGR_Arr+60,_RGR_Arr+63
 27272  0122BA  C33D  F340         	movff	_RGR_Arr+61,_RGR_Arr+64
 27273  0122BE  C33E  F341         	movff	_RGR_Arr+62,_RGR_Arr+65
 27274                           
 27275                           ;Power_Meter.c: 392: RGR_Arr[20] = RGR_Arr[19];
 27276  0122C2  C339  F33C         	movff	_RGR_Arr+57,_RGR_Arr+60
 27277  0122C6  C33A  F33D         	movff	_RGR_Arr+58,_RGR_Arr+61
 27278  0122CA  C33B  F33E         	movff	_RGR_Arr+59,_RGR_Arr+62
 27279                           
 27280                           ;Power_Meter.c: 393: RGR_Arr[19] = RGR_Arr[18];
 27281  0122CE  C336  F339         	movff	_RGR_Arr+54,_RGR_Arr+57
 27282  0122D2  C337  F33A         	movff	_RGR_Arr+55,_RGR_Arr+58
 27283  0122D6  C338  F33B         	movff	_RGR_Arr+56,_RGR_Arr+59
 27284                           
 27285                           ;Power_Meter.c: 394: RGR_Arr[18] = RGR_Arr[17];
 27286  0122DA  C333  F336         	movff	_RGR_Arr+51,_RGR_Arr+54
 27287  0122DE  C334  F337         	movff	_RGR_Arr+52,_RGR_Arr+55
 27288  0122E2  C335  F338         	movff	_RGR_Arr+53,_RGR_Arr+56
 27289                           
 27290                           ;Power_Meter.c: 395: RGR_Arr[17] = RGR_Arr[16];
 27291  0122E6  C330  F333         	movff	_RGR_Arr+48,_RGR_Arr+51
 27292  0122EA  C331  F334         	movff	_RGR_Arr+49,_RGR_Arr+52
 27293  0122EE  C332  F335         	movff	_RGR_Arr+50,_RGR_Arr+53
 27294                           
 27295                           ;Power_Meter.c: 396: RGR_Arr[16] = RGR_Arr[15];
 27296  0122F2  C32D  F330         	movff	_RGR_Arr+45,_RGR_Arr+48
 27297  0122F6  C32E  F331         	movff	_RGR_Arr+46,_RGR_Arr+49
 27298  0122FA  C32F  F332         	movff	_RGR_Arr+47,_RGR_Arr+50
 27299                           
 27300                           ;Power_Meter.c: 397: RGR_Arr[15] = RGR_Arr[14];
 27301  0122FE  C32A  F32D         	movff	_RGR_Arr+42,_RGR_Arr+45
 27302  012302  C32B  F32E         	movff	_RGR_Arr+43,_RGR_Arr+46
 27303  012306  C32C  F32F         	movff	_RGR_Arr+44,_RGR_Arr+47
 27304                           
 27305                           ;Power_Meter.c: 398: RGR_Arr[14] = RGR_Arr[13];
 27306  01230A  C327  F32A         	movff	_RGR_Arr+39,_RGR_Arr+42
 27307  01230E  C328  F32B         	movff	_RGR_Arr+40,_RGR_Arr+43
 27308  012312  C329  F32C         	movff	_RGR_Arr+41,_RGR_Arr+44
 27309                           
 27310                           ;Power_Meter.c: 399: RGR_Arr[13] = RGR_Arr[12];
 27311  012316  C324  F327         	movff	_RGR_Arr+36,_RGR_Arr+39
 27312  01231A  C325  F328         	movff	_RGR_Arr+37,_RGR_Arr+40
 27313  01231E  C326  F329         	movff	_RGR_Arr+38,_RGR_Arr+41
 27314                           
 27315                           ;Power_Meter.c: 400: RGR_Arr[12] = RGR_Arr[11];
 27316  012322  C321  F324         	movff	_RGR_Arr+33,_RGR_Arr+36
 27317  012326  C322  F325         	movff	_RGR_Arr+34,_RGR_Arr+37
 27318  01232A  C323  F326         	movff	_RGR_Arr+35,_RGR_Arr+38
 27319                           
 27320                           ;Power_Meter.c: 401: RGR_Arr[11] = RGR_Arr[10];
 27321  01232E  C31E  F321         	movff	_RGR_Arr+30,_RGR_Arr+33
 27322  012332  C31F  F322         	movff	_RGR_Arr+31,_RGR_Arr+34
 27323  012336  C320  F323         	movff	_RGR_Arr+32,_RGR_Arr+35
 27324                           
 27325                           ;Power_Meter.c: 402: RGR_Arr[10] = RGR_Arr[9];
 27326  01233A  C31B  F31E         	movff	_RGR_Arr+27,_RGR_Arr+30
 27327  01233E  C31C  F31F         	movff	_RGR_Arr+28,_RGR_Arr+31
 27328  012342  C31D  F320         	movff	_RGR_Arr+29,_RGR_Arr+32
 27329                           
 27330                           ;Power_Meter.c: 403: RGR_Arr[9] = RGR_Arr[8];
 27331  012346  C318  F31B         	movff	_RGR_Arr+24,_RGR_Arr+27
 27332  01234A  C319  F31C         	movff	_RGR_Arr+25,_RGR_Arr+28
 27333  01234E  C31A  F31D         	movff	_RGR_Arr+26,_RGR_Arr+29
 27334                           
 27335                           ;Power_Meter.c: 404: RGR_Arr[8] = RGR_Arr[7];
 27336  012352  C315  F318         	movff	_RGR_Arr+21,_RGR_Arr+24
 27337  012356  C316  F319         	movff	_RGR_Arr+22,_RGR_Arr+25
 27338  01235A  C317  F31A         	movff	_RGR_Arr+23,_RGR_Arr+26
 27339                           
 27340                           ;Power_Meter.c: 405: RGR_Arr[7] = RGR_Arr[6];
 27341  01235E  C312  F315         	movff	_RGR_Arr+18,_RGR_Arr+21
 27342  012362  C313  F316         	movff	_RGR_Arr+19,_RGR_Arr+22
 27343  012366  C314  F317         	movff	_RGR_Arr+20,_RGR_Arr+23
 27344                           
 27345                           ;Power_Meter.c: 406: RGR_Arr[6] = RGR_Arr[5];
 27346  01236A  C30F  F312         	movff	_RGR_Arr+15,_RGR_Arr+18
 27347  01236E  C310  F313         	movff	_RGR_Arr+16,_RGR_Arr+19
 27348  012372  C311  F314         	movff	_RGR_Arr+17,_RGR_Arr+20
 27349                           
 27350                           ;Power_Meter.c: 407: RGR_Arr[5] = RGR_Arr[4];
 27351  012376  C30C  F30F         	movff	_RGR_Arr+12,_RGR_Arr+15
 27352  01237A  C30D  F310         	movff	_RGR_Arr+13,_RGR_Arr+16
 27353  01237E  C30E  F311         	movff	_RGR_Arr+14,_RGR_Arr+17
 27354                           
 27355                           ;Power_Meter.c: 408: RGR_Arr[4] = RGR_Arr[3];
 27356  012382  C309  F30C         	movff	_RGR_Arr+9,_RGR_Arr+12
 27357  012386  C30A  F30D         	movff	_RGR_Arr+10,_RGR_Arr+13
 27358  01238A  C30B  F30E         	movff	_RGR_Arr+11,_RGR_Arr+14
 27359                           
 27360                           ;Power_Meter.c: 409: RGR_Arr[3] = RGR_Arr[2];
 27361  01238E  C306  F309         	movff	_RGR_Arr+6,_RGR_Arr+9
 27362  012392  C307  F30A         	movff	_RGR_Arr+7,_RGR_Arr+10
 27363  012396  C308  F30B         	movff	_RGR_Arr+8,_RGR_Arr+11
 27364                           
 27365                           ;Power_Meter.c: 410: RGR_Arr[2] = RGR_Arr[1];
 27366  01239A  C303  F306         	movff	_RGR_Arr+3,_RGR_Arr+6
 27367  01239E  C304  F307         	movff	_RGR_Arr+4,_RGR_Arr+7
 27368  0123A2  C305  F308         	movff	_RGR_Arr+5,_RGR_Arr+8
 27369                           
 27370                           ;Power_Meter.c: 411: RGR_Arr[1] = RGR_Arr[0];
 27371  0123A6  C300  F303         	movff	_RGR_Arr,_RGR_Arr+3
 27372  0123AA  C301  F304         	movff	_RGR_Arr+1,_RGR_Arr+4
 27373  0123AE  C302  F305         	movff	_RGR_Arr+2,_RGR_Arr+5
 27374                           
 27375                           ;Power_Meter.c: 414: if( (RGR_Avg_1 > (R_Gap_Ratio * 0.8)) && (RGR_Avg_1 < (R_Gap_Ratio 
      +                          * 1.2)) )
 27376  0123B2  0ECD               	movlw	205
 27377  0123B4  0100               	movlb	0	; () banked
 27378  0123B6  6F77               	movwf	___ftmul@f2& (0+255),b
 27379  0123B8  0E4C               	movlw	76
 27380  0123BA  0100               	movlb	0	; () banked
 27381  0123BC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 27382  0123BE  0E3F               	movlw	63
 27383  0123C0  0100               	movlb	0	; () banked
 27384  0123C2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 27385  0123C4  C10F  F074         	movff	_R_Gap_Ratio,___ftmul@f1
 27386  0123C8  C110  F075         	movff	_R_Gap_Ratio+1,___ftmul@f1+1
 27387  0123CC  C111  F076         	movff	_R_Gap_Ratio+2,___ftmul@f1+2
 27388  0123D0  ECA4  F0C0         	call	___ftmul	;wreg free
 27389  0123D4  C074  F099         	movff	?___ftmul,___ftge@ff1
 27390  0123D8  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
 27391  0123DC  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
 27392  0123E0  C21B  F09C         	movff	_RGR_Avg_1,___ftge@ff2
 27393  0123E4  C21C  F09D         	movff	_RGR_Avg_1+1,___ftge@ff2+1
 27394  0123E8  C21D  F09E         	movff	_RGR_Avg_1+2,___ftge@ff2+2
 27395  0123EC  ECEB  F0CA         	call	___ftge	;wreg free
 27396  0123F0  0100               	movlb	0	; () banked
 27397  0123F2  B0D8               	btfsc	status,0,c
 27398  0123F4  D028               	goto	l22547
 27399                           
 27400                           ; BSR set to: 0
 27401  0123F6  C21B  F099         	movff	_RGR_Avg_1,___ftge@ff1
 27402  0123FA  C21C  F09A         	movff	_RGR_Avg_1+1,___ftge@ff1+1
 27403  0123FE  C21D  F09B         	movff	_RGR_Avg_1+2,___ftge@ff1+2
 27404  012402  0E9A               	movlw	154
 27405  012404  0100               	movlb	0	; () banked
 27406  012406  6F77               	movwf	___ftmul@f2& (0+255),b
 27407  012408  0E99               	movlw	153
 27408  01240A  0100               	movlb	0	; () banked
 27409  01240C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 27410  01240E  0E3F               	movlw	63
 27411  012410  0100               	movlb	0	; () banked
 27412  012412  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 27413  012414  C10F  F074         	movff	_R_Gap_Ratio,___ftmul@f1
 27414  012418  C110  F075         	movff	_R_Gap_Ratio+1,___ftmul@f1+1
 27415  01241C  C111  F076         	movff	_R_Gap_Ratio+2,___ftmul@f1+2
 27416  012420  ECA4  F0C0         	call	___ftmul	;wreg free
 27417  012424  C074  F09C         	movff	?___ftmul,___ftge@ff2
 27418  012428  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
 27419  01242C  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
 27420  012430  ECEB  F0CA         	call	___ftge	;wreg free
 27421  012434  0100               	movlb	0	; () banked
 27422  012436  B0D8               	btfsc	status,0,c
 27423  012438  D006               	goto	l22547
 27424                           
 27425                           ; BSR set to: 0
 27426                           ;Power_Meter.c: 415: {
 27427                           ;Power_Meter.c: 416: RGR_Arr[0] = R_Gap_Ratio;
 27428  01243A  C10F  F300         	movff	_R_Gap_Ratio,_RGR_Arr
 27429  01243E  C110  F301         	movff	_R_Gap_Ratio+1,_RGR_Arr+1
 27430  012442  C111  F302         	movff	_R_Gap_Ratio+2,_RGR_Arr+2
 27431  012446                     l22547:
 27432                           
 27433                           ; BSR set to: 0
 27434                           ;Power_Meter.c: 417: }
 27435                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27436                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27437                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27438                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27439  012446  C354  F090         	movff	_RGR_Arr+84,___ftadd@f2
 27440  01244A  C355  F091         	movff	_RGR_Arr+85,___ftadd@f2+1
 27441  01244E  C356  F092         	movff	_RGR_Arr+86,___ftadd@f2+2
 27442  012452  C357  F08D         	movff	_RGR_Arr+87,___ftadd@f1
 27443  012456  C358  F08E         	movff	_RGR_Arr+88,___ftadd@f1+1
 27444  01245A  C359  F08F         	movff	_RGR_Arr+89,___ftadd@f1+2
 27445  01245E  EC69  F0B2         	call	___ftadd	;wreg free
 27446  012462  C08D  F6C0         	movff	?___ftadd,_R_PF_Avg$8058
 27447  012466  C08E  F6C1         	movff	?___ftadd+1,_R_PF_Avg$8058+1
 27448  01246A  C08F  F6C2         	movff	?___ftadd+2,_R_PF_Avg$8058+2
 27449                           
 27450                           ;Power_Meter.c: 417: }
 27451                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27452                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27453                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27454                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27455  01246E  C351  F090         	movff	_RGR_Arr+81,___ftadd@f2
 27456  012472  C352  F091         	movff	_RGR_Arr+82,___ftadd@f2+1
 27457  012476  C353  F092         	movff	_RGR_Arr+83,___ftadd@f2+2
 27458  01247A  C6C0  F08D         	movff	_R_PF_Avg$8058,___ftadd@f1
 27459  01247E  C6C1  F08E         	movff	_R_PF_Avg$8058+1,___ftadd@f1+1
 27460  012482  C6C2  F08F         	movff	_R_PF_Avg$8058+2,___ftadd@f1+2
 27461  012486  EC69  F0B2         	call	___ftadd	;wreg free
 27462  01248A  C08D  F6C3         	movff	?___ftadd,_R_PF_Avg$8059
 27463  01248E  C08E  F6C4         	movff	?___ftadd+1,_R_PF_Avg$8059+1
 27464  012492  C08F  F6C5         	movff	?___ftadd+2,_R_PF_Avg$8059+2
 27465                           
 27466                           ;Power_Meter.c: 417: }
 27467                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27468                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27469                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27470                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27471  012496  C34E  F090         	movff	_RGR_Arr+78,___ftadd@f2
 27472  01249A  C34F  F091         	movff	_RGR_Arr+79,___ftadd@f2+1
 27473  01249E  C350  F092         	movff	_RGR_Arr+80,___ftadd@f2+2
 27474  0124A2  C6C3  F08D         	movff	_R_PF_Avg$8059,___ftadd@f1
 27475  0124A6  C6C4  F08E         	movff	_R_PF_Avg$8059+1,___ftadd@f1+1
 27476  0124AA  C6C5  F08F         	movff	_R_PF_Avg$8059+2,___ftadd@f1+2
 27477  0124AE  EC69  F0B2         	call	___ftadd	;wreg free
 27478  0124B2  C08D  F6C6         	movff	?___ftadd,_R_PF_Avg$8060
 27479  0124B6  C08E  F6C7         	movff	?___ftadd+1,_R_PF_Avg$8060+1
 27480  0124BA  C08F  F6C8         	movff	?___ftadd+2,_R_PF_Avg$8060+2
 27481                           
 27482                           ;Power_Meter.c: 417: }
 27483                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27484                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27485                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27486                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27487  0124BE  C34B  F090         	movff	_RGR_Arr+75,___ftadd@f2
 27488  0124C2  C34C  F091         	movff	_RGR_Arr+76,___ftadd@f2+1
 27489  0124C6  C34D  F092         	movff	_RGR_Arr+77,___ftadd@f2+2
 27490  0124CA  C6C6  F08D         	movff	_R_PF_Avg$8060,___ftadd@f1
 27491  0124CE  C6C7  F08E         	movff	_R_PF_Avg$8060+1,___ftadd@f1+1
 27492  0124D2  C6C8  F08F         	movff	_R_PF_Avg$8060+2,___ftadd@f1+2
 27493  0124D6  EC69  F0B2         	call	___ftadd	;wreg free
 27494  0124DA  C08D  F675         	movff	?___ftadd,_R_PF_Avg$8061
 27495  0124DE  C08E  F676         	movff	?___ftadd+1,_R_PF_Avg$8061+1
 27496  0124E2  C08F  F677         	movff	?___ftadd+2,_R_PF_Avg$8061+2
 27497                           
 27498                           ;Power_Meter.c: 417: }
 27499                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27500                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27501                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27502                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27503  0124E6  C348  F090         	movff	_RGR_Arr+72,___ftadd@f2
 27504  0124EA  C349  F091         	movff	_RGR_Arr+73,___ftadd@f2+1
 27505  0124EE  C34A  F092         	movff	_RGR_Arr+74,___ftadd@f2+2
 27506  0124F2  C675  F08D         	movff	_R_PF_Avg$8061,___ftadd@f1
 27507  0124F6  C676  F08E         	movff	_R_PF_Avg$8061+1,___ftadd@f1+1
 27508  0124FA  C677  F08F         	movff	_R_PF_Avg$8061+2,___ftadd@f1+2
 27509  0124FE  EC69  F0B2         	call	___ftadd	;wreg free
 27510  012502  C08D  F678         	movff	?___ftadd,_R_PF_Avg$8062
 27511  012506  C08E  F679         	movff	?___ftadd+1,_R_PF_Avg$8062+1
 27512  01250A  C08F  F67A         	movff	?___ftadd+2,_R_PF_Avg$8062+2
 27513                           
 27514                           ;Power_Meter.c: 417: }
 27515                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27516                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27517                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27518                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27519  01250E  C345  F090         	movff	_RGR_Arr+69,___ftadd@f2
 27520  012512  C346  F091         	movff	_RGR_Arr+70,___ftadd@f2+1
 27521  012516  C347  F092         	movff	_RGR_Arr+71,___ftadd@f2+2
 27522  01251A  C678  F08D         	movff	_R_PF_Avg$8062,___ftadd@f1
 27523  01251E  C679  F08E         	movff	_R_PF_Avg$8062+1,___ftadd@f1+1
 27524  012522  C67A  F08F         	movff	_R_PF_Avg$8062+2,___ftadd@f1+2
 27525  012526  EC69  F0B2         	call	___ftadd	;wreg free
 27526  01252A  C08D  F67B         	movff	?___ftadd,_R_PF_Avg$8063
 27527  01252E  C08E  F67C         	movff	?___ftadd+1,_R_PF_Avg$8063+1
 27528  012532  C08F  F67D         	movff	?___ftadd+2,_R_PF_Avg$8063+2
 27529                           
 27530                           ;Power_Meter.c: 417: }
 27531                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27532                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27533                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27534                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27535  012536  C342  F090         	movff	_RGR_Arr+66,___ftadd@f2
 27536  01253A  C343  F091         	movff	_RGR_Arr+67,___ftadd@f2+1
 27537  01253E  C344  F092         	movff	_RGR_Arr+68,___ftadd@f2+2
 27538  012542  C67B  F08D         	movff	_R_PF_Avg$8063,___ftadd@f1
 27539  012546  C67C  F08E         	movff	_R_PF_Avg$8063+1,___ftadd@f1+1
 27540  01254A  C67D  F08F         	movff	_R_PF_Avg$8063+2,___ftadd@f1+2
 27541  01254E  EC69  F0B2         	call	___ftadd	;wreg free
 27542  012552  C08D  F67E         	movff	?___ftadd,_R_PF_Avg$8064
 27543  012556  C08E  F67F         	movff	?___ftadd+1,_R_PF_Avg$8064+1
 27544  01255A  C08F  F680         	movff	?___ftadd+2,_R_PF_Avg$8064+2
 27545                           
 27546                           ;Power_Meter.c: 417: }
 27547                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27548                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27549                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27550                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27551  01255E  C33F  F090         	movff	_RGR_Arr+63,___ftadd@f2
 27552  012562  C340  F091         	movff	_RGR_Arr+64,___ftadd@f2+1
 27553  012566  C341  F092         	movff	_RGR_Arr+65,___ftadd@f2+2
 27554  01256A  C67E  F08D         	movff	_R_PF_Avg$8064,___ftadd@f1
 27555  01256E  C67F  F08E         	movff	_R_PF_Avg$8064+1,___ftadd@f1+1
 27556  012572  C680  F08F         	movff	_R_PF_Avg$8064+2,___ftadd@f1+2
 27557  012576  EC69  F0B2         	call	___ftadd	;wreg free
 27558  01257A  C08D  F681         	movff	?___ftadd,_R_PF_Avg$8065
 27559  01257E  C08E  F682         	movff	?___ftadd+1,_R_PF_Avg$8065+1
 27560  012582  C08F  F683         	movff	?___ftadd+2,_R_PF_Avg$8065+2
 27561                           
 27562                           ;Power_Meter.c: 417: }
 27563                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27564                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27565                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27566                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27567  012586  C33C  F090         	movff	_RGR_Arr+60,___ftadd@f2
 27568  01258A  C33D  F091         	movff	_RGR_Arr+61,___ftadd@f2+1
 27569  01258E  C33E  F092         	movff	_RGR_Arr+62,___ftadd@f2+2
 27570  012592  C681  F08D         	movff	_R_PF_Avg$8065,___ftadd@f1
 27571  012596  C682  F08E         	movff	_R_PF_Avg$8065+1,___ftadd@f1+1
 27572  01259A  C683  F08F         	movff	_R_PF_Avg$8065+2,___ftadd@f1+2
 27573  01259E  EC69  F0B2         	call	___ftadd	;wreg free
 27574  0125A2  C08D  F684         	movff	?___ftadd,_R_PF_Avg$8066
 27575  0125A6  C08E  F685         	movff	?___ftadd+1,_R_PF_Avg$8066+1
 27576  0125AA  C08F  F686         	movff	?___ftadd+2,_R_PF_Avg$8066+2
 27577                           
 27578                           ;Power_Meter.c: 417: }
 27579                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27580                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27581                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27582                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27583  0125AE  C339  F090         	movff	_RGR_Arr+57,___ftadd@f2
 27584  0125B2  C33A  F091         	movff	_RGR_Arr+58,___ftadd@f2+1
 27585  0125B6  C33B  F092         	movff	_RGR_Arr+59,___ftadd@f2+2
 27586  0125BA  C684  F08D         	movff	_R_PF_Avg$8066,___ftadd@f1
 27587  0125BE  C685  F08E         	movff	_R_PF_Avg$8066+1,___ftadd@f1+1
 27588  0125C2  C686  F08F         	movff	_R_PF_Avg$8066+2,___ftadd@f1+2
 27589  0125C6  EC69  F0B2         	call	___ftadd	;wreg free
 27590  0125CA  C08D  F687         	movff	?___ftadd,_R_PF_Avg$8067
 27591  0125CE  C08E  F688         	movff	?___ftadd+1,_R_PF_Avg$8067+1
 27592  0125D2  C08F  F689         	movff	?___ftadd+2,_R_PF_Avg$8067+2
 27593                           
 27594                           ;Power_Meter.c: 417: }
 27595                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27596                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27597                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27598                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27599  0125D6  C336  F090         	movff	_RGR_Arr+54,___ftadd@f2
 27600  0125DA  C337  F091         	movff	_RGR_Arr+55,___ftadd@f2+1
 27601  0125DE  C338  F092         	movff	_RGR_Arr+56,___ftadd@f2+2
 27602  0125E2  C687  F08D         	movff	_R_PF_Avg$8067,___ftadd@f1
 27603  0125E6  C688  F08E         	movff	_R_PF_Avg$8067+1,___ftadd@f1+1
 27604  0125EA  C689  F08F         	movff	_R_PF_Avg$8067+2,___ftadd@f1+2
 27605  0125EE  EC69  F0B2         	call	___ftadd	;wreg free
 27606  0125F2  C08D  F68A         	movff	?___ftadd,_R_PF_Avg$8068
 27607  0125F6  C08E  F68B         	movff	?___ftadd+1,_R_PF_Avg$8068+1
 27608  0125FA  C08F  F68C         	movff	?___ftadd+2,_R_PF_Avg$8068+2
 27609                           
 27610                           ;Power_Meter.c: 417: }
 27611                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27612                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27613                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27614                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27615  0125FE  C333  F090         	movff	_RGR_Arr+51,___ftadd@f2
 27616  012602  C334  F091         	movff	_RGR_Arr+52,___ftadd@f2+1
 27617  012606  C335  F092         	movff	_RGR_Arr+53,___ftadd@f2+2
 27618  01260A  C68A  F08D         	movff	_R_PF_Avg$8068,___ftadd@f1
 27619  01260E  C68B  F08E         	movff	_R_PF_Avg$8068+1,___ftadd@f1+1
 27620  012612  C68C  F08F         	movff	_R_PF_Avg$8068+2,___ftadd@f1+2
 27621  012616  EC69  F0B2         	call	___ftadd	;wreg free
 27622  01261A  C08D  F68D         	movff	?___ftadd,_R_PF_Avg$8069
 27623  01261E  C08E  F68E         	movff	?___ftadd+1,_R_PF_Avg$8069+1
 27624  012622  C08F  F68F         	movff	?___ftadd+2,_R_PF_Avg$8069+2
 27625                           
 27626                           ;Power_Meter.c: 417: }
 27627                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27628                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27629                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27630                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27631  012626  C330  F090         	movff	_RGR_Arr+48,___ftadd@f2
 27632  01262A  C331  F091         	movff	_RGR_Arr+49,___ftadd@f2+1
 27633  01262E  C332  F092         	movff	_RGR_Arr+50,___ftadd@f2+2
 27634  012632  C68D  F08D         	movff	_R_PF_Avg$8069,___ftadd@f1
 27635  012636  C68E  F08E         	movff	_R_PF_Avg$8069+1,___ftadd@f1+1
 27636  01263A  C68F  F08F         	movff	_R_PF_Avg$8069+2,___ftadd@f1+2
 27637  01263E  EC69  F0B2         	call	___ftadd	;wreg free
 27638  012642  C08D  F690         	movff	?___ftadd,_R_PF_Avg$8070
 27639  012646  C08E  F691         	movff	?___ftadd+1,_R_PF_Avg$8070+1
 27640  01264A  C08F  F692         	movff	?___ftadd+2,_R_PF_Avg$8070+2
 27641                           
 27642                           ;Power_Meter.c: 417: }
 27643                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27644                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27645                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27646                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27647  01264E  C32D  F090         	movff	_RGR_Arr+45,___ftadd@f2
 27648  012652  C32E  F091         	movff	_RGR_Arr+46,___ftadd@f2+1
 27649  012656  C32F  F092         	movff	_RGR_Arr+47,___ftadd@f2+2
 27650  01265A  C690  F08D         	movff	_R_PF_Avg$8070,___ftadd@f1
 27651  01265E  C691  F08E         	movff	_R_PF_Avg$8070+1,___ftadd@f1+1
 27652  012662  C692  F08F         	movff	_R_PF_Avg$8070+2,___ftadd@f1+2
 27653  012666  EC69  F0B2         	call	___ftadd	;wreg free
 27654  01266A  C08D  F693         	movff	?___ftadd,_R_PF_Avg$8071
 27655  01266E  C08E  F694         	movff	?___ftadd+1,_R_PF_Avg$8071+1
 27656  012672  C08F  F695         	movff	?___ftadd+2,_R_PF_Avg$8071+2
 27657                           
 27658                           ;Power_Meter.c: 417: }
 27659                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27660                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27661                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27662                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27663  012676  C32A  F090         	movff	_RGR_Arr+42,___ftadd@f2
 27664  01267A  C32B  F091         	movff	_RGR_Arr+43,___ftadd@f2+1
 27665  01267E  C32C  F092         	movff	_RGR_Arr+44,___ftadd@f2+2
 27666  012682  C693  F08D         	movff	_R_PF_Avg$8071,___ftadd@f1
 27667  012686  C694  F08E         	movff	_R_PF_Avg$8071+1,___ftadd@f1+1
 27668  01268A  C695  F08F         	movff	_R_PF_Avg$8071+2,___ftadd@f1+2
 27669  01268E  EC69  F0B2         	call	___ftadd	;wreg free
 27670  012692  C08D  F696         	movff	?___ftadd,_R_PF_Avg$8072
 27671  012696  C08E  F697         	movff	?___ftadd+1,_R_PF_Avg$8072+1
 27672  01269A  C08F  F698         	movff	?___ftadd+2,_R_PF_Avg$8072+2
 27673                           
 27674                           ;Power_Meter.c: 417: }
 27675                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27676                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27677                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27678                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27679  01269E  C327  F090         	movff	_RGR_Arr+39,___ftadd@f2
 27680  0126A2  C328  F091         	movff	_RGR_Arr+40,___ftadd@f2+1
 27681  0126A6  C329  F092         	movff	_RGR_Arr+41,___ftadd@f2+2
 27682  0126AA  C696  F08D         	movff	_R_PF_Avg$8072,___ftadd@f1
 27683  0126AE  C697  F08E         	movff	_R_PF_Avg$8072+1,___ftadd@f1+1
 27684  0126B2  C698  F08F         	movff	_R_PF_Avg$8072+2,___ftadd@f1+2
 27685  0126B6  EC69  F0B2         	call	___ftadd	;wreg free
 27686  0126BA  C08D  F699         	movff	?___ftadd,_R_PF_Avg$8073
 27687  0126BE  C08E  F69A         	movff	?___ftadd+1,_R_PF_Avg$8073+1
 27688  0126C2  C08F  F69B         	movff	?___ftadd+2,_R_PF_Avg$8073+2
 27689                           
 27690                           ;Power_Meter.c: 417: }
 27691                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27692                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27693                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27694                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27695  0126C6  C324  F090         	movff	_RGR_Arr+36,___ftadd@f2
 27696  0126CA  C325  F091         	movff	_RGR_Arr+37,___ftadd@f2+1
 27697  0126CE  C326  F092         	movff	_RGR_Arr+38,___ftadd@f2+2
 27698  0126D2  C699  F08D         	movff	_R_PF_Avg$8073,___ftadd@f1
 27699  0126D6  C69A  F08E         	movff	_R_PF_Avg$8073+1,___ftadd@f1+1
 27700  0126DA  C69B  F08F         	movff	_R_PF_Avg$8073+2,___ftadd@f1+2
 27701  0126DE  EC69  F0B2         	call	___ftadd	;wreg free
 27702  0126E2  C08D  F69C         	movff	?___ftadd,_R_PF_Avg$8074
 27703  0126E6  C08E  F69D         	movff	?___ftadd+1,_R_PF_Avg$8074+1
 27704  0126EA  C08F  F69E         	movff	?___ftadd+2,_R_PF_Avg$8074+2
 27705                           
 27706                           ;Power_Meter.c: 417: }
 27707                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27708                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27709                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27710                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27711  0126EE  C321  F090         	movff	_RGR_Arr+33,___ftadd@f2
 27712  0126F2  C322  F091         	movff	_RGR_Arr+34,___ftadd@f2+1
 27713  0126F6  C323  F092         	movff	_RGR_Arr+35,___ftadd@f2+2
 27714  0126FA  C69C  F08D         	movff	_R_PF_Avg$8074,___ftadd@f1
 27715  0126FE  C69D  F08E         	movff	_R_PF_Avg$8074+1,___ftadd@f1+1
 27716  012702  C69E  F08F         	movff	_R_PF_Avg$8074+2,___ftadd@f1+2
 27717  012706  EC69  F0B2         	call	___ftadd	;wreg free
 27718  01270A  C08D  F69F         	movff	?___ftadd,_R_PF_Avg$8075
 27719  01270E  C08E  F6A0         	movff	?___ftadd+1,_R_PF_Avg$8075+1
 27720  012712  C08F  F6A1         	movff	?___ftadd+2,_R_PF_Avg$8075+2
 27721                           
 27722                           ;Power_Meter.c: 417: }
 27723                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27724                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27725                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27726                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27727  012716  C31E  F090         	movff	_RGR_Arr+30,___ftadd@f2
 27728  01271A  C31F  F091         	movff	_RGR_Arr+31,___ftadd@f2+1
 27729  01271E  C320  F092         	movff	_RGR_Arr+32,___ftadd@f2+2
 27730  012722  C69F  F08D         	movff	_R_PF_Avg$8075,___ftadd@f1
 27731  012726  C6A0  F08E         	movff	_R_PF_Avg$8075+1,___ftadd@f1+1
 27732  01272A  C6A1  F08F         	movff	_R_PF_Avg$8075+2,___ftadd@f1+2
 27733  01272E  EC69  F0B2         	call	___ftadd	;wreg free
 27734  012732  C08D  F6A2         	movff	?___ftadd,_R_PF_Avg$8076
 27735  012736  C08E  F6A3         	movff	?___ftadd+1,_R_PF_Avg$8076+1
 27736  01273A  C08F  F6A4         	movff	?___ftadd+2,_R_PF_Avg$8076+2
 27737                           
 27738                           ;Power_Meter.c: 417: }
 27739                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27740                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27741                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27742                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27743  01273E  C31B  F090         	movff	_RGR_Arr+27,___ftadd@f2
 27744  012742  C31C  F091         	movff	_RGR_Arr+28,___ftadd@f2+1
 27745  012746  C31D  F092         	movff	_RGR_Arr+29,___ftadd@f2+2
 27746  01274A  C6A2  F08D         	movff	_R_PF_Avg$8076,___ftadd@f1
 27747  01274E  C6A3  F08E         	movff	_R_PF_Avg$8076+1,___ftadd@f1+1
 27748  012752  C6A4  F08F         	movff	_R_PF_Avg$8076+2,___ftadd@f1+2
 27749  012756  EC69  F0B2         	call	___ftadd	;wreg free
 27750  01275A  C08D  F6A5         	movff	?___ftadd,_R_PF_Avg$8077
 27751  01275E  C08E  F6A6         	movff	?___ftadd+1,_R_PF_Avg$8077+1
 27752  012762  C08F  F6A7         	movff	?___ftadd+2,_R_PF_Avg$8077+2
 27753                           
 27754                           ;Power_Meter.c: 417: }
 27755                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27756                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27757                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27758                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27759  012766  C318  F090         	movff	_RGR_Arr+24,___ftadd@f2
 27760  01276A  C319  F091         	movff	_RGR_Arr+25,___ftadd@f2+1
 27761  01276E  C31A  F092         	movff	_RGR_Arr+26,___ftadd@f2+2
 27762  012772  C6A5  F08D         	movff	_R_PF_Avg$8077,___ftadd@f1
 27763  012776  C6A6  F08E         	movff	_R_PF_Avg$8077+1,___ftadd@f1+1
 27764  01277A  C6A7  F08F         	movff	_R_PF_Avg$8077+2,___ftadd@f1+2
 27765  01277E  EC69  F0B2         	call	___ftadd	;wreg free
 27766  012782  C08D  F6A8         	movff	?___ftadd,_R_PF_Avg$8078
 27767  012786  C08E  F6A9         	movff	?___ftadd+1,_R_PF_Avg$8078+1
 27768  01278A  C08F  F6AA         	movff	?___ftadd+2,_R_PF_Avg$8078+2
 27769                           
 27770                           ;Power_Meter.c: 417: }
 27771                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27772                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27773                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27774                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27775  01278E  C315  F090         	movff	_RGR_Arr+21,___ftadd@f2
 27776  012792  C316  F091         	movff	_RGR_Arr+22,___ftadd@f2+1
 27777  012796  C317  F092         	movff	_RGR_Arr+23,___ftadd@f2+2
 27778  01279A  C6A8  F08D         	movff	_R_PF_Avg$8078,___ftadd@f1
 27779  01279E  C6A9  F08E         	movff	_R_PF_Avg$8078+1,___ftadd@f1+1
 27780  0127A2  C6AA  F08F         	movff	_R_PF_Avg$8078+2,___ftadd@f1+2
 27781  0127A6  EC69  F0B2         	call	___ftadd	;wreg free
 27782  0127AA  C08D  F6AB         	movff	?___ftadd,_R_PF_Avg$8079
 27783  0127AE  C08E  F6AC         	movff	?___ftadd+1,_R_PF_Avg$8079+1
 27784  0127B2  C08F  F6AD         	movff	?___ftadd+2,_R_PF_Avg$8079+2
 27785                           
 27786                           ;Power_Meter.c: 417: }
 27787                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27788                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27789                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27790                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27791  0127B6  C312  F090         	movff	_RGR_Arr+18,___ftadd@f2
 27792  0127BA  C313  F091         	movff	_RGR_Arr+19,___ftadd@f2+1
 27793  0127BE  C314  F092         	movff	_RGR_Arr+20,___ftadd@f2+2
 27794  0127C2  C6AB  F08D         	movff	_R_PF_Avg$8079,___ftadd@f1
 27795  0127C6  C6AC  F08E         	movff	_R_PF_Avg$8079+1,___ftadd@f1+1
 27796  0127CA  C6AD  F08F         	movff	_R_PF_Avg$8079+2,___ftadd@f1+2
 27797  0127CE  EC69  F0B2         	call	___ftadd	;wreg free
 27798  0127D2  C08D  F6AE         	movff	?___ftadd,_R_PF_Avg$8080
 27799  0127D6  C08E  F6AF         	movff	?___ftadd+1,_R_PF_Avg$8080+1
 27800  0127DA  C08F  F6B0         	movff	?___ftadd+2,_R_PF_Avg$8080+2
 27801                           
 27802                           ;Power_Meter.c: 417: }
 27803                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27804                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27805                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27806                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27807  0127DE  C30F  F090         	movff	_RGR_Arr+15,___ftadd@f2
 27808  0127E2  C310  F091         	movff	_RGR_Arr+16,___ftadd@f2+1
 27809  0127E6  C311  F092         	movff	_RGR_Arr+17,___ftadd@f2+2
 27810  0127EA  C6AE  F08D         	movff	_R_PF_Avg$8080,___ftadd@f1
 27811  0127EE  C6AF  F08E         	movff	_R_PF_Avg$8080+1,___ftadd@f1+1
 27812  0127F2  C6B0  F08F         	movff	_R_PF_Avg$8080+2,___ftadd@f1+2
 27813  0127F6  EC69  F0B2         	call	___ftadd	;wreg free
 27814  0127FA  C08D  F6B1         	movff	?___ftadd,_R_PF_Avg$8081
 27815  0127FE  C08E  F6B2         	movff	?___ftadd+1,_R_PF_Avg$8081+1
 27816  012802  C08F  F6B3         	movff	?___ftadd+2,_R_PF_Avg$8081+2
 27817                           
 27818                           ;Power_Meter.c: 417: }
 27819                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27820                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27821                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27822                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27823  012806  C30C  F090         	movff	_RGR_Arr+12,___ftadd@f2
 27824  01280A  C30D  F091         	movff	_RGR_Arr+13,___ftadd@f2+1
 27825  01280E  C30E  F092         	movff	_RGR_Arr+14,___ftadd@f2+2
 27826  012812  C6B1  F08D         	movff	_R_PF_Avg$8081,___ftadd@f1
 27827  012816  C6B2  F08E         	movff	_R_PF_Avg$8081+1,___ftadd@f1+1
 27828  01281A  C6B3  F08F         	movff	_R_PF_Avg$8081+2,___ftadd@f1+2
 27829  01281E  EC69  F0B2         	call	___ftadd	;wreg free
 27830  012822  C08D  F6B4         	movff	?___ftadd,_R_PF_Avg$8082
 27831  012826  C08E  F6B5         	movff	?___ftadd+1,_R_PF_Avg$8082+1
 27832  01282A  C08F  F6B6         	movff	?___ftadd+2,_R_PF_Avg$8082+2
 27833                           
 27834                           ;Power_Meter.c: 417: }
 27835                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27836                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27837                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27838                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27839  01282E  C309  F090         	movff	_RGR_Arr+9,___ftadd@f2
 27840  012832  C30A  F091         	movff	_RGR_Arr+10,___ftadd@f2+1
 27841  012836  C30B  F092         	movff	_RGR_Arr+11,___ftadd@f2+2
 27842  01283A  C6B4  F08D         	movff	_R_PF_Avg$8082,___ftadd@f1
 27843  01283E  C6B5  F08E         	movff	_R_PF_Avg$8082+1,___ftadd@f1+1
 27844  012842  C6B6  F08F         	movff	_R_PF_Avg$8082+2,___ftadd@f1+2
 27845  012846  EC69  F0B2         	call	___ftadd	;wreg free
 27846  01284A  C08D  F6B7         	movff	?___ftadd,_R_PF_Avg$8083
 27847  01284E  C08E  F6B8         	movff	?___ftadd+1,_R_PF_Avg$8083+1
 27848  012852  C08F  F6B9         	movff	?___ftadd+2,_R_PF_Avg$8083+2
 27849                           
 27850                           ;Power_Meter.c: 417: }
 27851                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27852                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27853                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27854                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27855  012856  C306  F090         	movff	_RGR_Arr+6,___ftadd@f2
 27856  01285A  C307  F091         	movff	_RGR_Arr+7,___ftadd@f2+1
 27857  01285E  C308  F092         	movff	_RGR_Arr+8,___ftadd@f2+2
 27858  012862  C6B7  F08D         	movff	_R_PF_Avg$8083,___ftadd@f1
 27859  012866  C6B8  F08E         	movff	_R_PF_Avg$8083+1,___ftadd@f1+1
 27860  01286A  C6B9  F08F         	movff	_R_PF_Avg$8083+2,___ftadd@f1+2
 27861  01286E  EC69  F0B2         	call	___ftadd	;wreg free
 27862  012872  C08D  F6BA         	movff	?___ftadd,_R_PF_Avg$8084
 27863  012876  C08E  F6BB         	movff	?___ftadd+1,_R_PF_Avg$8084+1
 27864  01287A  C08F  F6BC         	movff	?___ftadd+2,_R_PF_Avg$8084+2
 27865                           
 27866                           ;Power_Meter.c: 417: }
 27867                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27868                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27869                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27870                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27871  01287E  C303  F090         	movff	_RGR_Arr+3,___ftadd@f2
 27872  012882  C304  F091         	movff	_RGR_Arr+4,___ftadd@f2+1
 27873  012886  C305  F092         	movff	_RGR_Arr+5,___ftadd@f2+2
 27874  01288A  C6BA  F08D         	movff	_R_PF_Avg$8084,___ftadd@f1
 27875  01288E  C6BB  F08E         	movff	_R_PF_Avg$8084+1,___ftadd@f1+1
 27876  012892  C6BC  F08F         	movff	_R_PF_Avg$8084+2,___ftadd@f1+2
 27877  012896  EC69  F0B2         	call	___ftadd	;wreg free
 27878  01289A  C08D  F6BD         	movff	?___ftadd,_R_PF_Avg$8085
 27879  01289E  C08E  F6BE         	movff	?___ftadd+1,_R_PF_Avg$8085+1
 27880  0128A2  C08F  F6BF         	movff	?___ftadd+2,_R_PF_Avg$8085+2
 27881                           
 27882                           ;Power_Meter.c: 417: }
 27883                           ;Power_Meter.c: 419: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27884                           ;Power_Meter.c: 420: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27885                           ;Power_Meter.c: 421: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27886                           ;Power_Meter.c: 422: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27887  0128A6  C6BD  F08D         	movff	_R_PF_Avg$8085,___ftadd@f1
 27888  0128AA  C6BE  F08E         	movff	_R_PF_Avg$8085+1,___ftadd@f1+1
 27889  0128AE  C6BF  F08F         	movff	_R_PF_Avg$8085+2,___ftadd@f1+2
 27890  0128B2  C300  F090         	movff	_RGR_Arr,___ftadd@f2
 27891  0128B6  C301  F091         	movff	_RGR_Arr+1,___ftadd@f2+1
 27892  0128BA  C302  F092         	movff	_RGR_Arr+2,___ftadd@f2+2
 27893  0128BE  EC69  F0B2         	call	___ftadd	;wreg free
 27894  0128C2  C08D  F2EB         	movff	?___ftadd,_RGR_Avg
 27895  0128C6  C08E  F2EC         	movff	?___ftadd+1,_RGR_Avg+1
 27896  0128CA  C08F  F2ED         	movff	?___ftadd+2,_RGR_Avg+2
 27897                           
 27898                           ;Power_Meter.c: 424: RGR_Avg = (RGR_Avg / 30);
 27899  0128CE  C2EB  F0A5         	movff	_RGR_Avg,___ftdiv@f1
 27900  0128D2  C2EC  F0A6         	movff	_RGR_Avg+1,___ftdiv@f1+1
 27901  0128D6  C2ED  F0A7         	movff	_RGR_Avg+2,___ftdiv@f1+2
 27902  0128DA  0E00               	movlw	0
 27903  0128DC  0100               	movlb	0	; () banked
 27904  0128DE  6FA8               	movwf	___ftdiv@f2& (0+255),b
 27905  0128E0  0EF0               	movlw	240
 27906  0128E2  0100               	movlb	0	; () banked
 27907  0128E4  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 27908  0128E6  0E41               	movlw	65
 27909  0128E8  0100               	movlb	0	; () banked
 27910  0128EA  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 27911  0128EC  EC53  F0C1         	call	___ftdiv	;wreg free
 27912  0128F0  C0A5  F2EB         	movff	?___ftdiv,_RGR_Avg
 27913  0128F4  C0A6  F2EC         	movff	?___ftdiv+1,_RGR_Avg+1
 27914  0128F8  C0A7  F2ED         	movff	?___ftdiv+2,_RGR_Avg+2
 27915                           
 27916                           ;Power_Meter.c: 425: R_Rad = ((RGR_Avg * 2 * 3.1412) - (0.575959));
 27917  0128FC  0E09               	movlw	9
 27918  0128FE  0100               	movlb	0	; () banked
 27919  012900  6F77               	movwf	___ftmul@f2& (0+255),b
 27920  012902  0EC9               	movlw	201
 27921  012904  0100               	movlb	0	; () banked
 27922  012906  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 27923  012908  0E40               	movlw	64
 27924  01290A  0100               	movlb	0	; () banked
 27925  01290C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 27926  01290E  C2EB  F074         	movff	_RGR_Avg,___ftmul@f1
 27927  012912  C2EC  F075         	movff	_RGR_Avg+1,___ftmul@f1+1
 27928  012916  C2ED  F076         	movff	_RGR_Avg+2,___ftmul@f1+2
 27929  01291A  ECA4  F0C0         	call	___ftmul	;wreg free
 27930  01291E  C074  F08D         	movff	?___ftmul,___ftadd@f1
 27931  012922  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 27932  012926  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 27933  01292A  0E72               	movlw	114
 27934  01292C  0100               	movlb	0	; () banked
 27935  01292E  6F90               	movwf	___ftadd@f2& (0+255),b
 27936  012930  0E13               	movlw	19
 27937  012932  0100               	movlb	0	; () banked
 27938  012934  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 27939  012936  0EBF               	movlw	191
 27940  012938  0100               	movlb	0	; () banked
 27941  01293A  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 27942  01293C  EC69  F0B2         	call	___ftadd	;wreg free
 27943  012940  C08D  F59A         	movff	?___ftadd,_R_Rad
 27944  012944  C08E  F59B         	movff	?___ftadd+1,_R_Rad+1
 27945  012948  C08F  F59C         	movff	?___ftadd+2,_R_Rad+2
 27946                           
 27947                           ;Power_Meter.c: 426: R_Power_Factor = (cos(R_Rad));
 27948  01294C  C59A  F0C1         	movff	_R_Rad,cos@f
 27949  012950  C59B  F0C2         	movff	_R_Rad+1,cos@f+1
 27950  012954  C59C  F0C3         	movff	_R_Rad+2,cos@f+2
 27951  012958  ECB0  F0CB         	call	_cos	;wreg free
 27952  01295C  C0C1  F597         	movff	?_cos,_R_Power_Factor
 27953  012960  C0C2  F598         	movff	?_cos+1,_R_Power_Factor+1
 27954  012964  C0C3  F599         	movff	?_cos+2,_R_Power_Factor+2
 27955  012968  0012               	return		;funcret
 27956  01296A                     __end_of_R_PF_Avg:
 27957                           	opt stack 0
 27958                           tblptru	equ	0xFF8
 27959                           tblptrh	equ	0xFF7
 27960                           tblptrl	equ	0xFF6
 27961                           tablat	equ	0xFF5
 27962                           prodh	equ	0xFF4
 27963                           prodl	equ	0xFF3
 27964                           intcon	equ	0xFF2
 27965                           postinc0	equ	0xFEE
 27966                           wreg	equ	0xFE8
 27967                           postdec1	equ	0xFE5
 27968                           fsr1h	equ	0xFE2
 27969                           fsr1l	equ	0xFE1
 27970                           indf2	equ	0xFDF
 27971                           postinc2	equ	0xFDE
 27972                           postdec2	equ	0xFDD
 27973                           fsr2h	equ	0xFDA
 27974                           fsr2l	equ	0xFD9
 27975                           status	equ	0xFD8
 27976                           
 27977 ;; *************** function _RTC_Init *****************
 27978 ;; Defined at:
 27979 ;;		line 22 in file "RTC.c"
 27980 ;; Parameters:    Size  Location     Type
 27981 ;;		None
 27982 ;; Auto vars:     Size  Location     Type
 27983 ;;		None
 27984 ;; Return value:  Size  Location     Type
 27985 ;;                  1    wreg      void 
 27986 ;; Registers used:
 27987 ;;		wreg, status,2, status,0, cstack
 27988 ;; Tracked objects:
 27989 ;;		On entry : 0/0
 27990 ;;		On exit  : 0/0
 27991 ;;		Unchanged: 0/0
 27992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27997 ;;Total ram usage:        0 bytes
 27998 ;; Hardware stack levels used:    1
 27999 ;; Hardware stack levels required when called:    5
 28000 ;; This function calls:
 28001 ;;		_I2C_Init
 28002 ;;		_I2C_Start
 28003 ;;		_I2C_Stop
 28004 ;;		_I2C_Write
 28005 ;; This function is called by:
 28006 ;;		_main
 28007 ;; This function uses a non-reentrant model
 28008 ;;
 28009                           
 28010                           	psect	text92
 28011  01AF6A                     __ptext92:
 28012                           	opt stack 0
 28013  01AF6A                     _RTC_Init:
 28014                           	opt stack 25
 28015                           
 28016                           ;RTC.c: 24: I2C_Init();
 28017                           
 28018                           ;incstack = 0
 28019  01AF6A  ECF9  F0D7         	call	_I2C_Init	;wreg free
 28020                           
 28021                           ;RTC.c: 25: I2C_Start();
 28022  01AF6E  EC6F  F0D8         	call	_I2C_Start	;wreg free
 28023                           
 28024                           ;RTC.c: 27: I2C_Write(0xD0u);
 28025  01AF72  0ED0               	movlw	208
 28026  01AF74  ECE7  F0D7         	call	_I2C_Write
 28027                           
 28028                           ;RTC.c: 28: I2C_Write(0x07u);
 28029  01AF78  0E07               	movlw	7
 28030  01AF7A  ECE7  F0D7         	call	_I2C_Write
 28031                           
 28032                           ;RTC.c: 30: I2C_Write(0x00);
 28033  01AF7E  0E00               	movlw	0
 28034  01AF80  ECE7  F0D7         	call	_I2C_Write
 28035                           
 28036                           ;RTC.c: 32: I2C_Stop();
 28037  01AF84  EC6B  F0D8         	call	_I2C_Stop	;wreg free
 28038  01AF88  0012               	return		;funcret
 28039  01AF8A                     __end_of_RTC_Init:
 28040                           	opt stack 0
 28041                           tblptru	equ	0xFF8
 28042                           tblptrh	equ	0xFF7
 28043                           tblptrl	equ	0xFF6
 28044                           tablat	equ	0xFF5
 28045                           prodh	equ	0xFF4
 28046                           prodl	equ	0xFF3
 28047                           intcon	equ	0xFF2
 28048                           postinc0	equ	0xFEE
 28049                           wreg	equ	0xFE8
 28050                           postdec1	equ	0xFE5
 28051                           fsr1h	equ	0xFE2
 28052                           fsr1l	equ	0xFE1
 28053                           indf2	equ	0xFDF
 28054                           postinc2	equ	0xFDE
 28055                           postdec2	equ	0xFDD
 28056                           fsr2h	equ	0xFDA
 28057                           fsr2l	equ	0xFD9
 28058                           status	equ	0xFD8
 28059                           
 28060 ;; *************** function _I2C_Write *****************
 28061 ;; Defined at:
 28062 ;;		line 109 in file "RTC.c"
 28063 ;; Parameters:    Size  Location     Type
 28064 ;;  v_i2cData_u8    1    wreg     unsigned char 
 28065 ;; Auto vars:     Size  Location     Type
 28066 ;;  v_i2cData_u8    1    0[BANK0 ] unsigned char 
 28067 ;; Return value:  Size  Location     Type
 28068 ;;                  1    wreg      void 
 28069 ;; Registers used:
 28070 ;;		wreg, cstack
 28071 ;; Tracked objects:
 28072 ;;		On entry : 0/0
 28073 ;;		On exit  : 0/0
 28074 ;;		Unchanged: 0/0
 28075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28079 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28080 ;;Total ram usage:        1 bytes
 28081 ;; Hardware stack levels used:    1
 28082 ;; Hardware stack levels required when called:    4
 28083 ;; This function calls:
 28084 ;;		_i2c_WaitForIdle
 28085 ;; This function is called by:
 28086 ;;		_RTC_Init
 28087 ;;		_RTC_GetDateTime
 28088 ;;		_RTC_SetDateTime
 28089 ;; This function uses a non-reentrant model
 28090 ;;
 28091                           
 28092                           	psect	text93
 28093  01AFCE                     __ptext93:
 28094                           	opt stack 0
 28095  01AFCE                     _I2C_Write:
 28096                           	opt stack 23
 28097                           
 28098                           ;incstack = 0
 28099                           ;I2C_Write@v_i2cData_u8 stored from wreg
 28100  01AFCE  0100               	movlb	0	; () banked
 28101  01AFD0  6F60               	movwf	I2C_Write@v_i2cData_u8& (0+255),b
 28102                           
 28103                           ;RTC.c: 113: SSP1BUF = v_i2cData_u8;
 28104  01AFD2  C060  FFC9         	movff	I2C_Write@v_i2cData_u8,4041	;volatile
 28105  01AFD6                     l1015:
 28106  01AFD6  B0C7               	btfsc	4039,0,c	;volatile
 28107  01AFD8  D7FE               	goto	l1015
 28108                           
 28109                           ;RTC.c: 115: i2c_WaitForIdle();
 28110  01AFDA  ECF0  F0D7         	call	_i2c_WaitForIdle	;wreg free
 28111  01AFDE  0012               	return		;funcret
 28112  01AFE0                     __end_of_I2C_Write:
 28113                           	opt stack 0
 28114                           tblptru	equ	0xFF8
 28115                           tblptrh	equ	0xFF7
 28116                           tblptrl	equ	0xFF6
 28117                           tablat	equ	0xFF5
 28118                           prodh	equ	0xFF4
 28119                           prodl	equ	0xFF3
 28120                           intcon	equ	0xFF2
 28121                           postinc0	equ	0xFEE
 28122                           wreg	equ	0xFE8
 28123                           postdec1	equ	0xFE5
 28124                           fsr1h	equ	0xFE2
 28125                           fsr1l	equ	0xFE1
 28126                           indf2	equ	0xFDF
 28127                           postinc2	equ	0xFDE
 28128                           postdec2	equ	0xFDD
 28129                           fsr2h	equ	0xFDA
 28130                           fsr2l	equ	0xFD9
 28131                           status	equ	0xFD8
 28132                           
 28133 ;; *************** function _i2c_WaitForIdle *****************
 28134 ;; Defined at:
 28135 ;;		line 117 in file "RTC.c"
 28136 ;; Parameters:    Size  Location     Type
 28137 ;;		None
 28138 ;; Auto vars:     Size  Location     Type
 28139 ;;		None
 28140 ;; Return value:  Size  Location     Type
 28141 ;;                  1    wreg      void 
 28142 ;; Registers used:
 28143 ;;		None
 28144 ;; Tracked objects:
 28145 ;;		On entry : 0/0
 28146 ;;		On exit  : 0/0
 28147 ;;		Unchanged: 0/0
 28148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28153 ;;Total ram usage:        0 bytes
 28154 ;; Hardware stack levels used:    1
 28155 ;; Hardware stack levels required when called:    3
 28156 ;; This function calls:
 28157 ;;		Nothing
 28158 ;; This function is called by:
 28159 ;;		_I2C_Read
 28160 ;;		_I2C_Write
 28161 ;; This function uses a non-reentrant model
 28162 ;;
 28163                           
 28164                           	psect	text94
 28165  01AFE0                     __ptext94:
 28166                           	opt stack 0
 28167  01AFE0                     _i2c_WaitForIdle:
 28168                           	opt stack 23
 28169  01AFE0                     l1021:
 28170  01AFE0  A0C5               	btfss	4037,0,c	;volatile
 28171  01AFE2  B2C5               	btfsc	4037,1,c	;volatile
 28172  01AFE4  D7FD               	goto	l1021
 28173  01AFE6  A4C5               	btfss	4037,2,c	;volatile
 28174  01AFE8  B6C5               	btfsc	4037,3,c	;volatile
 28175  01AFEA  D7FA               	goto	l1021
 28176  01AFEC  A4C7               	btfss	4039,2,c	;volatile
 28177  01AFEE  0012               	return	
 28178  01AFF0  D7F7               	goto	l1021
 28179  01AFF2                     __end_of_i2c_WaitForIdle:
 28180                           	opt stack 0
 28181                           tblptru	equ	0xFF8
 28182                           tblptrh	equ	0xFF7
 28183                           tblptrl	equ	0xFF6
 28184                           tablat	equ	0xFF5
 28185                           prodh	equ	0xFF4
 28186                           prodl	equ	0xFF3
 28187                           intcon	equ	0xFF2
 28188                           postinc0	equ	0xFEE
 28189                           wreg	equ	0xFE8
 28190                           postdec1	equ	0xFE5
 28191                           fsr1h	equ	0xFE2
 28192                           fsr1l	equ	0xFE1
 28193                           indf2	equ	0xFDF
 28194                           postinc2	equ	0xFDE
 28195                           postdec2	equ	0xFDD
 28196                           fsr2h	equ	0xFDA
 28197                           fsr2l	equ	0xFD9
 28198                           status	equ	0xFD8
 28199                           
 28200 ;; *************** function _I2C_Stop *****************
 28201 ;; Defined at:
 28202 ;;		line 140 in file "RTC.c"
 28203 ;; Parameters:    Size  Location     Type
 28204 ;;		None
 28205 ;; Auto vars:     Size  Location     Type
 28206 ;;		None
 28207 ;; Return value:  Size  Location     Type
 28208 ;;                  1    wreg      void 
 28209 ;; Registers used:
 28210 ;;		None
 28211 ;; Tracked objects:
 28212 ;;		On entry : 0/0
 28213 ;;		On exit  : 0/0
 28214 ;;		Unchanged: 0/0
 28215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28220 ;;Total ram usage:        0 bytes
 28221 ;; Hardware stack levels used:    1
 28222 ;; Hardware stack levels required when called:    3
 28223 ;; This function calls:
 28224 ;;		Nothing
 28225 ;; This function is called by:
 28226 ;;		_RTC_Init
 28227 ;;		_RTC_GetDateTime
 28228 ;;		_RTC_SetDateTime
 28229 ;; This function uses a non-reentrant model
 28230 ;;
 28231                           
 28232                           	psect	text95
 28233  01B0D6                     __ptext95:
 28234                           	opt stack 0
 28235  01B0D6                     _I2C_Stop:
 28236                           	opt stack 24
 28237                           
 28238                           ;RTC.c: 142: SSP1CON2bits.PEN = 1;
 28239                           
 28240                           ;incstack = 0
 28241  01B0D6  84C5               	bsf	4037,2,c	;volatile
 28242  01B0D8                     l1045:
 28243  01B0D8  A4C5               	btfss	4037,2,c	;volatile
 28244  01B0DA  0012               	return	
 28245  01B0DC  D7FD               	goto	l1045
 28246  01B0DE                     __end_of_I2C_Stop:
 28247                           	opt stack 0
 28248                           tblptru	equ	0xFF8
 28249                           tblptrh	equ	0xFF7
 28250                           tblptrl	equ	0xFF6
 28251                           tablat	equ	0xFF5
 28252                           prodh	equ	0xFF4
 28253                           prodl	equ	0xFF3
 28254                           intcon	equ	0xFF2
 28255                           postinc0	equ	0xFEE
 28256                           wreg	equ	0xFE8
 28257                           postdec1	equ	0xFE5
 28258                           fsr1h	equ	0xFE2
 28259                           fsr1l	equ	0xFE1
 28260                           indf2	equ	0xFDF
 28261                           postinc2	equ	0xFDE
 28262                           postdec2	equ	0xFDD
 28263                           fsr2h	equ	0xFDA
 28264                           fsr2l	equ	0xFD9
 28265                           status	equ	0xFD8
 28266                           
 28267 ;; *************** function _I2C_Start *****************
 28268 ;; Defined at:
 28269 ;;		line 134 in file "RTC.c"
 28270 ;; Parameters:    Size  Location     Type
 28271 ;;		None
 28272 ;; Auto vars:     Size  Location     Type
 28273 ;;		None
 28274 ;; Return value:  Size  Location     Type
 28275 ;;                  1    wreg      void 
 28276 ;; Registers used:
 28277 ;;		None
 28278 ;; Tracked objects:
 28279 ;;		On entry : 0/0
 28280 ;;		On exit  : 0/0
 28281 ;;		Unchanged: 0/0
 28282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28287 ;;Total ram usage:        0 bytes
 28288 ;; Hardware stack levels used:    1
 28289 ;; Hardware stack levels required when called:    3
 28290 ;; This function calls:
 28291 ;;		Nothing
 28292 ;; This function is called by:
 28293 ;;		_RTC_Init
 28294 ;;		_RTC_GetDateTime
 28295 ;;		_RTC_SetDateTime
 28296 ;; This function uses a non-reentrant model
 28297 ;;
 28298                           
 28299                           	psect	text96
 28300  01B0DE                     __ptext96:
 28301                           	opt stack 0
 28302  01B0DE                     _I2C_Start:
 28303                           	opt stack 24
 28304                           
 28305                           ;RTC.c: 136: SSP1CON2bits.SEN = 1;
 28306                           
 28307                           ;incstack = 0
 28308  01B0DE  80C5               	bsf	4037,0,c	;volatile
 28309  01B0E0                     l1039:
 28310  01B0E0  A0C5               	btfss	4037,0,c	;volatile
 28311  01B0E2  0012               	return	
 28312  01B0E4  D7FD               	goto	l1039
 28313  01B0E6                     __end_of_I2C_Start:
 28314                           	opt stack 0
 28315                           tblptru	equ	0xFF8
 28316                           tblptrh	equ	0xFF7
 28317                           tblptrl	equ	0xFF6
 28318                           tablat	equ	0xFF5
 28319                           prodh	equ	0xFF4
 28320                           prodl	equ	0xFF3
 28321                           intcon	equ	0xFF2
 28322                           postinc0	equ	0xFEE
 28323                           wreg	equ	0xFE8
 28324                           postdec1	equ	0xFE5
 28325                           fsr1h	equ	0xFE2
 28326                           fsr1l	equ	0xFE1
 28327                           indf2	equ	0xFDF
 28328                           postinc2	equ	0xFDE
 28329                           postdec2	equ	0xFDD
 28330                           fsr2h	equ	0xFDA
 28331                           fsr2l	equ	0xFD9
 28332                           status	equ	0xFD8
 28333                           
 28334 ;; *************** function _I2C_Init *****************
 28335 ;; Defined at:
 28336 ;;		line 75 in file "RTC.c"
 28337 ;; Parameters:    Size  Location     Type
 28338 ;;		None
 28339 ;; Auto vars:     Size  Location     Type
 28340 ;;		None
 28341 ;; Return value:  Size  Location     Type
 28342 ;;                  1    wreg      void 
 28343 ;; Registers used:
 28344 ;;		wreg, status,2, status,0
 28345 ;; Tracked objects:
 28346 ;;		On entry : 0/0
 28347 ;;		On exit  : 0/0
 28348 ;;		Unchanged: 0/0
 28349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28354 ;;Total ram usage:        0 bytes
 28355 ;; Hardware stack levels used:    1
 28356 ;; Hardware stack levels required when called:    3
 28357 ;; This function calls:
 28358 ;;		Nothing
 28359 ;; This function is called by:
 28360 ;;		_RTC_Init
 28361 ;; This function uses a non-reentrant model
 28362 ;;
 28363                           
 28364                           	psect	text97
 28365  01AFF2                     __ptext97:
 28366                           	opt stack 0
 28367  01AFF2                     _I2C_Init:
 28368                           	opt stack 26
 28369                           
 28370                           ;RTC.c: 77: TRISC3 = 1;
 28371                           
 28372                           ;incstack = 0
 28373  01AFF2  8694               	bsf	3988,3,c	;volatile
 28374                           
 28375                           ;RTC.c: 78: TRISC4 = 1;
 28376  01AFF4  8894               	bsf	3988,4,c	;volatile
 28377                           
 28378                           ;RTC.c: 80: SSP1STAT |= 0x80;
 28379  01AFF6  8EC7               	bsf	4039,7,c	;volatile
 28380                           
 28381                           ;RTC.c: 81: SSP1CON1 = 0x28;
 28382  01AFF8  0E28               	movlw	40
 28383  01AFFA  6EC6               	movwf	4038,c	;volatile
 28384                           
 28385                           ;RTC.c: 82: SSP1ADD = 24;
 28386  01AFFC  0E18               	movlw	24
 28387  01AFFE  6EC8               	movwf	4040,c	;volatile
 28388  01B000  0012               	return		;funcret
 28389  01B002                     __end_of_I2C_Init:
 28390                           	opt stack 0
 28391                           tblptru	equ	0xFF8
 28392                           tblptrh	equ	0xFF7
 28393                           tblptrl	equ	0xFF6
 28394                           tablat	equ	0xFF5
 28395                           prodh	equ	0xFF4
 28396                           prodl	equ	0xFF3
 28397                           intcon	equ	0xFF2
 28398                           postinc0	equ	0xFEE
 28399                           wreg	equ	0xFE8
 28400                           postdec1	equ	0xFE5
 28401                           fsr1h	equ	0xFE2
 28402                           fsr1l	equ	0xFE1
 28403                           indf2	equ	0xFDF
 28404                           postinc2	equ	0xFDE
 28405                           postdec2	equ	0xFDD
 28406                           fsr2h	equ	0xFDA
 28407                           fsr2l	equ	0xFD9
 28408                           status	equ	0xFD8
 28409                           
 28410 ;; *************** function _RS485_Data_communication *****************
 28411 ;; Defined at:
 28412 ;;		line 25 in file "RS485_COMMUNICATION.c"
 28413 ;; Parameters:    Size  Location     Type
 28414 ;;		None
 28415 ;; Auto vars:     Size  Location     Type
 28416 ;;		None
 28417 ;; Return value:  Size  Location     Type
 28418 ;;                  2   80[None  ] int 
 28419 ;; Registers used:
 28420 ;;		wreg, status,2, status,0, cstack
 28421 ;; Tracked objects:
 28422 ;;		On entry : 0/0
 28423 ;;		On exit  : 0/0
 28424 ;;		Unchanged: 0/0
 28425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28430 ;;Total ram usage:        1 bytes
 28431 ;; Hardware stack levels used:    1
 28432 ;; Hardware stack levels required when called:    4
 28433 ;; This function calls:
 28434 ;;		_usart2_init
 28435 ;;		_usart_str_2
 28436 ;; This function is called by:
 28437 ;;		_main
 28438 ;; This function uses a non-reentrant model
 28439 ;;
 28440                           
 28441                           	psect	text98
 28442  01A130                     __ptext98:
 28443                           	opt stack 0
 28444  01A130                     _RS485_Data_communication:
 28445                           	opt stack 26
 28446                           
 28447                           ;RS485_COMMUNICATION.c: 27: if(Serial_No == 2)
 28448                           
 28449                           ;incstack = 0
 28450  01A130  0E02               	movlw	2
 28451  01A132  0100               	movlb	0	; () banked
 28452  01A134  19DF               	xorwf	_Serial_No& (0+255),w,b
 28453  01A136  0100               	movlb	0	; () banked
 28454  01A138  11E0               	iorwf	(_Serial_No+1)& (0+255),w,b
 28455  01A13A  B4D8               	btfsc	status,2,c
 28456                           
 28457                           ; BSR set to: 0
 28458                           ;RS485_COMMUNICATION.c: 28: {
 28459                           ;RS485_COMMUNICATION.c: 29: usart2_init();
 28460  01A13C  ECA5  F0D6         	call	_usart2_init	;wreg free
 28461                           
 28462                           ;RS485_COMMUNICATION.c: 30: }
 28463                           ;RS485_COMMUNICATION.c: 31: if(Timer0_Falg2 == 1 && Serial_No > 2)
 28464  01A140  0101               	movlb	1	; () banked
 28465  01A142  0584               	decf	_Timer0_Falg2& (0+255),w,b
 28466  01A144  A4D8               	btfss	status,2,c
 28467  01A146  0012               	return	
 28468                           
 28469                           ; BSR set to: 1
 28470  01A148  0100               	movlb	0	; () banked
 28471  01A14A  51E0               	movf	(_Serial_No+1)& (0+255),w,b
 28472  01A14C  E105               	bnz	u17810
 28473  01A14E  0E03               	movlw	3
 28474  01A150  0100               	movlb	0	; () banked
 28475  01A152  5DDF               	subwf	_Serial_No& (0+255),w,b
 28476  01A154  A0D8               	btfss	status,0,c
 28477  01A156  0012               	return	
 28478  01A158                     u17810:
 28479                           
 28480                           ; BSR set to: 0
 28481                           ;RS485_COMMUNICATION.c: 32: {
 28482                           ;RS485_COMMUNICATION.c: 33: Timer0_Falg2 = 0;
 28483  01A158  0E00               	movlw	0
 28484  01A15A  0101               	movlb	1	; () banked
 28485  01A15C  6F84               	movwf	_Timer0_Falg2& (0+255),b
 28486                           
 28487                           ; BSR set to: 1
 28488                           ;RS485_COMMUNICATION.c: 34: Communication_OTP++;
 28489  01A15E  2A15               	incf	_Communication_OTP,f,c
 28490                           
 28491                           ; BSR set to: 1
 28492                           ;RS485_COMMUNICATION.c: 35: if(Communication_OTP == 0 || Communication_OTP == 255)
 28493  01A160  5015               	movf	_Communication_OTP,w,c
 28494  01A162  B4D8               	btfsc	status,2,c
 28495  01A164  D003               	goto	l23015
 28496                           
 28497                           ; BSR set to: 1
 28498  01A166  2815               	incf	_Communication_OTP,w,c
 28499  01A168  A4D8               	btfss	status,2,c
 28500  01A16A  D002               	goto	l23017
 28501  01A16C                     l23015:
 28502                           
 28503                           ; BSR set to: 1
 28504                           ;RS485_COMMUNICATION.c: 36: {
 28505                           ;RS485_COMMUNICATION.c: 37: Communication_OTP = 1;
 28506  01A16C  0E01               	movlw	1
 28507  01A16E  6E15               	movwf	_Communication_OTP,c
 28508  01A170                     l23017:
 28509                           
 28510                           ; BSR set to: 1
 28511                           ;RS485_COMMUNICATION.c: 38: }
 28512                           ;RS485_COMMUNICATION.c: 39: RE0 = 1;
 28513  01A170  8084               	bsf	3972,0,c	;volatile
 28514                           
 28515                           ;RS485_COMMUNICATION.c: 40: RS485_Data_Flag = 1;
 28516  01A172  0E01               	movlw	1
 28517  01A174  0101               	movlb	1	; () banked
 28518  01A176  6F77               	movwf	_RS485_Data_Flag& (0+255),b
 28519                           
 28520                           ;RS485_COMMUNICATION.c: 41: counter_1 = 0;
 28521  01A178  0E00               	movlw	0
 28522  01A17A  0100               	movlb	0	; () banked
 28523  01A17C  6FF3               	movwf	_counter_1& (0+255),b
 28524                           
 28525                           ;RS485_COMMUNICATION.c: 42: Data_1[0] = 0;
 28526  01A17E  0E00               	movlw	0
 28527  01A180  0105               	movlb	5	; () banked
 28528  01A182  6F01               	movwf	(_Data_1+1)& (0+255),b
 28529  01A184  0E00               	movlw	0
 28530  01A186  6F00               	movwf	_Data_1& (0+255),b
 28531                           
 28532                           ; BSR set to: 5
 28533                           ;RS485_COMMUNICATION.c: 44: _delay((unsigned long)((15)*(8000000/4000.0)));
 28534  01A188  0E27               	movlw	39
 28535  01A18A  0100               	movlb	0	; () banked
 28536  01A18C  6F61               	movwf	??_RS485_Data_communication& (0+255),b
 28537  01A18E  0EF5               	movlw	245
 28538  01A190                     u18017:
 28539  01A190  2EE8               	decfsz	wreg,f,c
 28540  01A192  D7FE               	goto	u18017
 28541  01A194  2F61               	decfsz	??_RS485_Data_communication& (0+255),f,b
 28542  01A196  D7FC               	goto	u18017
 28543  01A198  F000               	nop	
 28544                           
 28545                           ;RS485_COMMUNICATION.c: 45: usart_str_2(0x07);
 28546  01A19A  0E07               	movlw	7
 28547  01A19C  EC1D  F0D8         	call	_usart_str_2
 28548                           
 28549                           ;RS485_COMMUNICATION.c: 46: usart_str_2(VFD_On_Off);
 28550  01A1A0  0101               	movlb	1	; () banked
 28551  01A1A2  5196               	movf	_VFD_On_Off& (0+255),w,b
 28552  01A1A4  EC1D  F0D8         	call	_usart_str_2
 28553                           
 28554                           ;RS485_COMMUNICATION.c: 47: usart_str_2(Desired_Frequency);
 28555  01A1A8  5016               	movf	_Desired_Frequency,w,c
 28556  01A1AA  EC1D  F0D8         	call	_usart_str_2
 28557                           
 28558                           ;RS485_COMMUNICATION.c: 48: usart_str_2(0x30);
 28559  01A1AE  0E30               	movlw	48
 28560  01A1B0  EC1D  F0D8         	call	_usart_str_2
 28561                           
 28562                           ;RS485_COMMUNICATION.c: 49: usart_str_2(Communication_OTP);
 28563  01A1B4  5015               	movf	_Communication_OTP,w,c
 28564  01A1B6  EC1D  F0D8         	call	_usart_str_2
 28565                           
 28566                           ;RS485_COMMUNICATION.c: 50: _delay((unsigned long)((15)*(8000000/4000.0)));
 28567  01A1BA  0E27               	movlw	39
 28568  01A1BC  0100               	movlb	0	; () banked
 28569  01A1BE  6F61               	movwf	??_RS485_Data_communication& (0+255),b
 28570  01A1C0  0EF5               	movlw	245
 28571  01A1C2                     u18027:
 28572  01A1C2  2EE8               	decfsz	wreg,f,c
 28573  01A1C4  D7FE               	goto	u18027
 28574  01A1C6  2F61               	decfsz	??_RS485_Data_communication& (0+255),f,b
 28575  01A1C8  D7FC               	goto	u18027
 28576  01A1CA  F000               	nop	
 28577                           
 28578                           ;RS485_COMMUNICATION.c: 51: RE0 = 0;
 28579  01A1CC  9084               	bcf	3972,0,c	;volatile
 28580  01A1CE  0012               	return	
 28581  01A1D0                     __end_of_RS485_Data_communication:
 28582                           	opt stack 0
 28583                           tblptru	equ	0xFF8
 28584                           tblptrh	equ	0xFF7
 28585                           tblptrl	equ	0xFF6
 28586                           tablat	equ	0xFF5
 28587                           prodh	equ	0xFF4
 28588                           prodl	equ	0xFF3
 28589                           intcon	equ	0xFF2
 28590                           postinc0	equ	0xFEE
 28591                           wreg	equ	0xFE8
 28592                           postdec1	equ	0xFE5
 28593                           fsr1h	equ	0xFE2
 28594                           fsr1l	equ	0xFE1
 28595                           indf2	equ	0xFDF
 28596                           postinc2	equ	0xFDE
 28597                           postdec2	equ	0xFDD
 28598                           fsr2h	equ	0xFDA
 28599                           fsr2l	equ	0xFD9
 28600                           status	equ	0xFD8
 28601                           
 28602 ;; *************** function _usart_str_2 *****************
 28603 ;; Defined at:
 28604 ;;		line 588 in file "UART.c"
 28605 ;; Parameters:    Size  Location     Type
 28606 ;;  str             1    wreg     const unsigned char 
 28607 ;; Auto vars:     Size  Location     Type
 28608 ;;  str             1    0[BANK0 ] const unsigned char 
 28609 ;; Return value:  Size  Location     Type
 28610 ;;                  1    wreg      void 
 28611 ;; Registers used:
 28612 ;;		wreg
 28613 ;; Tracked objects:
 28614 ;;		On entry : 0/0
 28615 ;;		On exit  : 0/0
 28616 ;;		Unchanged: 0/0
 28617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28622 ;;Total ram usage:        1 bytes
 28623 ;; Hardware stack levels used:    1
 28624 ;; Hardware stack levels required when called:    3
 28625 ;; This function calls:
 28626 ;;		Nothing
 28627 ;; This function is called by:
 28628 ;;		_RS485_Data_communication
 28629 ;; This function uses a non-reentrant model
 28630 ;;
 28631                           
 28632                           	psect	text99
 28633  01B03A                     __ptext99:
 28634                           	opt stack 0
 28635  01B03A                     _usart_str_2:
 28636                           	opt stack 26
 28637                           
 28638                           ;incstack = 0
 28639                           ;usart_str_2@str stored from wreg
 28640  01B03A  0100               	movlb	0	; () banked
 28641  01B03C  6F60               	movwf	usart_str_2@str& (0+255),b
 28642  01B03E                     l2457:
 28643  01B03E  A8A4               	btfss	4004,4,c	;volatile
 28644  01B040  D7FE               	goto	l2457
 28645                           
 28646                           ;UART.c: 591: TXREG2=(str);
 28647  01B042  C060  FF1C         	movff	usart_str_2@str,3868	;volatile
 28648  01B046  0012               	return		;funcret
 28649  01B048                     __end_of_usart_str_2:
 28650                           	opt stack 0
 28651                           tblptru	equ	0xFF8
 28652                           tblptrh	equ	0xFF7
 28653                           tblptrl	equ	0xFF6
 28654                           tablat	equ	0xFF5
 28655                           prodh	equ	0xFF4
 28656                           prodl	equ	0xFF3
 28657                           intcon	equ	0xFF2
 28658                           postinc0	equ	0xFEE
 28659                           wreg	equ	0xFE8
 28660                           postdec1	equ	0xFE5
 28661                           fsr1h	equ	0xFE2
 28662                           fsr1l	equ	0xFE1
 28663                           indf2	equ	0xFDF
 28664                           postinc2	equ	0xFDE
 28665                           postdec2	equ	0xFDD
 28666                           fsr2h	equ	0xFDA
 28667                           fsr2l	equ	0xFD9
 28668                           status	equ	0xFD8
 28669                           
 28670 ;; *************** function _usart2_init *****************
 28671 ;; Defined at:
 28672 ;;		line 543 in file "UART.c"
 28673 ;; Parameters:    Size  Location     Type
 28674 ;;		None
 28675 ;; Auto vars:     Size  Location     Type
 28676 ;;		None
 28677 ;; Return value:  Size  Location     Type
 28678 ;;                  1    wreg      void 
 28679 ;; Registers used:
 28680 ;;		wreg, status,2
 28681 ;; Tracked objects:
 28682 ;;		On entry : 0/0
 28683 ;;		On exit  : 0/0
 28684 ;;		Unchanged: 0/0
 28685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28690 ;;Total ram usage:        0 bytes
 28691 ;; Hardware stack levels used:    1
 28692 ;; Hardware stack levels required when called:    3
 28693 ;; This function calls:
 28694 ;;		Nothing
 28695 ;; This function is called by:
 28696 ;;		_RS485_Data_communication
 28697 ;; This function uses a non-reentrant model
 28698 ;;
 28699                           
 28700                           	psect	text100
 28701  01AD4A                     __ptext100:
 28702                           	opt stack 0
 28703  01AD4A                     _usart2_init:
 28704                           	opt stack 26
 28705                           
 28706                           ;UART.c: 546: ANSEL18 = 0;
 28707                           
 28708                           ;incstack = 0
 28709  01AD4A  010F               	movlb	15	; () banked
 28710  01AD4C  9523               	bcf	35,2,b	;volatile
 28711                           
 28712                           ;UART.c: 547: ANSEL19 = 0;
 28713  01AD4E  010F               	movlb	15	; () banked
 28714  01AD50  9723               	bcf	35,3,b	;volatile
 28715                           
 28716                           ;UART.c: 548: TRISGbits.TRISG2 = 1;
 28717  01AD52  8498               	bsf	3992,2,c	;volatile
 28718                           
 28719                           ;UART.c: 549: TRISGbits.TRISG1 = 0;
 28720  01AD54  9298               	bcf	3992,1,c	;volatile
 28721                           
 28722                           ;UART.c: 550: TXSTA2bits.SYNC = 0;
 28723  01AD56  010F               	movlb	15	; () banked
 28724  01AD58  9921               	bcf	33,4,b	;volatile
 28725                           
 28726                           ;UART.c: 551: TXSTA2bits.BRGH = 1;
 28727  01AD5A  010F               	movlb	15	; () banked
 28728  01AD5C  8521               	bsf	33,2,b	;volatile
 28729                           
 28730                           ;UART.c: 552: BAUDCON2bits.BRG16 = 0;
 28731  01AD5E  010F               	movlb	15	; () banked
 28732  01AD60  9720               	bcf	32,3,b	;volatile
 28733                           
 28734                           ;UART.c: 553: TXSTA2bits.TXEN = 1;
 28735  01AD62  010F               	movlb	15	; () banked
 28736  01AD64  8B21               	bsf	33,5,b	;volatile
 28737                           
 28738                           ;UART.c: 554: RCSTA2bits.CREN = 1;
 28739  01AD66  010F               	movlb	15	; () banked
 28740  01AD68  8922               	bsf	34,4,b	;volatile
 28741                           
 28742                           ;UART.c: 555: RCSTA2bits.SPEN = 1;
 28743  01AD6A  010F               	movlb	15	; () banked
 28744  01AD6C  8F22               	bsf	34,7,b	;volatile
 28745                           
 28746                           ; BSR set to: 15
 28747                           ;UART.c: 556: SPBRG2=51;
 28748  01AD6E  0E33               	movlw	51
 28749  01AD70  010F               	movlb	15	; () banked
 28750  01AD72  6F1E               	movwf	30,b	;volatile
 28751                           
 28752                           ; BSR set to: 15
 28753                           ;UART.c: 558: PIR3bits.RC2IF = 0;
 28754  01AD74  9AA4               	bcf	4004,5,c	;volatile
 28755                           
 28756                           ; BSR set to: 15
 28757                           ;UART.c: 559: PIE3bits.RC2IE = 1;
 28758  01AD76  8AA3               	bsf	4003,5,c	;volatile
 28759                           
 28760                           ; BSR set to: 15
 28761  01AD78  0012               	return		;funcret
 28762  01AD7A                     __end_of_usart2_init:
 28763                           	opt stack 0
 28764                           tblptru	equ	0xFF8
 28765                           tblptrh	equ	0xFF7
 28766                           tblptrl	equ	0xFF6
 28767                           tablat	equ	0xFF5
 28768                           prodh	equ	0xFF4
 28769                           prodl	equ	0xFF3
 28770                           intcon	equ	0xFF2
 28771                           postinc0	equ	0xFEE
 28772                           wreg	equ	0xFE8
 28773                           postdec1	equ	0xFE5
 28774                           fsr1h	equ	0xFE2
 28775                           fsr1l	equ	0xFE1
 28776                           indf2	equ	0xFDF
 28777                           postinc2	equ	0xFDE
 28778                           postdec2	equ	0xFDD
 28779                           fsr2h	equ	0xFDA
 28780                           fsr2l	equ	0xFD9
 28781                           status	equ	0xFD8
 28782                           
 28783 ;; *************** function _RPM_Data_Kill *****************
 28784 ;; Defined at:
 28785 ;;		line 265 in file "RPM_Measurement.c"
 28786 ;; Parameters:    Size  Location     Type
 28787 ;;		None
 28788 ;; Auto vars:     Size  Location     Type
 28789 ;;		None
 28790 ;; Return value:  Size  Location     Type
 28791 ;;                  1    wreg      void 
 28792 ;; Registers used:
 28793 ;;		wreg, status,2, status,0
 28794 ;; Tracked objects:
 28795 ;;		On entry : 0/0
 28796 ;;		On exit  : 0/0
 28797 ;;		Unchanged: 0/0
 28798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28803 ;;Total ram usage:        0 bytes
 28804 ;; Hardware stack levels used:    1
 28805 ;; Hardware stack levels required when called:    3
 28806 ;; This function calls:
 28807 ;;		Nothing
 28808 ;; This function is called by:
 28809 ;;		_main
 28810 ;; This function uses a non-reentrant model
 28811 ;;
 28812                           
 28813                           	psect	text101
 28814  017BA0                     __ptext101:
 28815                           	opt stack 0
 28816  017BA0                     _RPM_Data_Kill:
 28817                           	opt stack 27
 28818                           
 28819                           ;RPM_Measurement.c: 269: if(Timer1_OF_counter_Turbine > 50)
 28820                           
 28821                           ; BSR set to: 15
 28822                           ;incstack = 0
 28823  017BA0  0103               	movlb	3	; () banked
 28824  017BA2  51F5               	movf	(_Timer1_OF_counter_Turbine+1)& (0+255),w,b
 28825  017BA4  E105               	bnz	u17600
 28826  017BA6  0E33               	movlw	51
 28827  017BA8  0103               	movlb	3	; () banked
 28828  017BAA  5DF4               	subwf	_Timer1_OF_counter_Turbine& (0+255),w,b
 28829  017BAC  A0D8               	btfss	status,0,c
 28830  017BAE  D042               	goto	l22921
 28831  017BB0                     u17600:
 28832                           
 28833                           ; BSR set to: 3
 28834                           ;RPM_Measurement.c: 270: {
 28835                           ;RPM_Measurement.c: 271: Timer1_OF_counter_Turbine = 0;
 28836  017BB0  0E00               	movlw	0
 28837  017BB2  0103               	movlb	3	; () banked
 28838  017BB4  6FF5               	movwf	(_Timer1_OF_counter_Turbine+1)& (0+255),b
 28839  017BB6  0E00               	movlw	0
 28840  017BB8  6FF4               	movwf	_Timer1_OF_counter_Turbine& (0+255),b
 28841                           
 28842                           ;RPM_Measurement.c: 272: Turbine_RPM = 0;
 28843  017BBA  0E00               	movlw	0
 28844  017BBC  6E0A               	movwf	_Turbine_RPM,c
 28845  017BBE  0E00               	movlw	0
 28846  017BC0  6E0B               	movwf	_Turbine_RPM+1,c
 28847  017BC2  0E00               	movlw	0
 28848  017BC4  6E0C               	movwf	_Turbine_RPM+2,c
 28849                           
 28850                           ;RPM_Measurement.c: 273: RPM_PWM = 0;
 28851  017BC6  0E00               	movlw	0
 28852  017BC8  0102               	movlb	2	; () banked
 28853  017BCA  6FFB               	movwf	(_RPM_PWM+1)& (0+255),b
 28854  017BCC  0E00               	movlw	0
 28855  017BCE  6FFA               	movwf	_RPM_PWM& (0+255),b
 28856                           
 28857                           ;RPM_Measurement.c: 274: RPM_Time = 0;
 28858  017BD0  0E00               	movlw	0
 28859  017BD2  0101               	movlb	1	; () banked
 28860  017BD4  6F2D               	movwf	(_RPM_Time+1)& (0+255),b
 28861  017BD6  0E00               	movlw	0
 28862  017BD8  6F2C               	movwf	_RPM_Time& (0+255),b
 28863                           
 28864                           ;RPM_Measurement.c: 275: TRPM_Frequency = 0;
 28865  017BDA  0E00               	movlw	0
 28866  017BDC  0104               	movlb	4	; () banked
 28867  017BDE  6FEA               	movwf	_TRPM_Frequency& (0+255),b
 28868  017BE0  0E00               	movlw	0
 28869  017BE2  0104               	movlb	4	; () banked
 28870  017BE4  6FEB               	movwf	(_TRPM_Frequency+1)& (0+255),b
 28871  017BE6  0E00               	movlw	0
 28872  017BE8  0104               	movlb	4	; () banked
 28873  017BEA  6FEC               	movwf	(_TRPM_Frequency+2)& (0+255),b
 28874                           
 28875                           ;RPM_Measurement.c: 276: TRPM_Time = 0;
 28876  017BEC  0E00               	movlw	0
 28877  017BEE  0104               	movlb	4	; () banked
 28878  017BF0  6FED               	movwf	_TRPM_Time& (0+255),b
 28879  017BF2  0E00               	movlw	0
 28880  017BF4  0104               	movlb	4	; () banked
 28881  017BF6  6FEE               	movwf	(_TRPM_Time+1)& (0+255),b
 28882  017BF8  0E00               	movlw	0
 28883  017BFA  0104               	movlb	4	; () banked
 28884  017BFC  6FEF               	movwf	(_TRPM_Time+2)& (0+255),b
 28885                           
 28886                           ;RPM_Measurement.c: 277: Turb_RPM = 0; Turbine_RPM_Old = 0; Turbine_RPM_New = 0;
 28887  017BFE  0E00               	movlw	0
 28888  017C00  0104               	movlb	4	; () banked
 28889  017C02  6FB7               	movwf	_Turb_RPM& (0+255),b
 28890  017C04  0E00               	movlw	0
 28891  017C06  0104               	movlb	4	; () banked
 28892  017C08  6FB8               	movwf	(_Turb_RPM+1)& (0+255),b
 28893  017C0A  0E00               	movlw	0
 28894  017C0C  0104               	movlb	4	; () banked
 28895  017C0E  6FB9               	movwf	(_Turb_RPM+2)& (0+255),b
 28896  017C10  0E00               	movlw	0
 28897  017C12  0101               	movlb	1	; () banked
 28898  017C14  6F18               	movwf	_Turbine_RPM_Old& (0+255),b
 28899  017C16  0E00               	movlw	0
 28900  017C18  0101               	movlb	1	; () banked
 28901  017C1A  6F19               	movwf	(_Turbine_RPM_Old+1)& (0+255),b
 28902  017C1C  0E00               	movlw	0
 28903  017C1E  0101               	movlb	1	; () banked
 28904  017C20  6F1A               	movwf	(_Turbine_RPM_Old+2)& (0+255),b
 28905  017C22  0E00               	movlw	0
 28906  017C24  0101               	movlb	1	; () banked
 28907  017C26  6F15               	movwf	_Turbine_RPM_New& (0+255),b
 28908  017C28  0E00               	movlw	0
 28909  017C2A  0101               	movlb	1	; () banked
 28910  017C2C  6F16               	movwf	(_Turbine_RPM_New+1)& (0+255),b
 28911  017C2E  0E00               	movlw	0
 28912  017C30  0101               	movlb	1	; () banked
 28913  017C32  6F17               	movwf	(_Turbine_RPM_New+2)& (0+255),b
 28914  017C34                     l22921:
 28915                           
 28916                           ;RPM_Measurement.c: 278: }
 28917                           ;RPM_Measurement.c: 279: if(Timer1_OF_counter_Generator > 10)
 28918  017C34  0103               	movlb	3	; () banked
 28919  017C36  51F3               	movf	(_Timer1_OF_counter_Generator+1)& (0+255),w,b
 28920  017C38  E105               	bnz	u17610
 28921  017C3A  0E0B               	movlw	11
 28922  017C3C  0103               	movlb	3	; () banked
 28923  017C3E  5DF2               	subwf	_Timer1_OF_counter_Generator& (0+255),w,b
 28924  017C40  A0D8               	btfss	status,0,c
 28925  017C42  D01E               	goto	l22925
 28926  017C44                     u17610:
 28927                           
 28928                           ; BSR set to: 3
 28929                           ;RPM_Measurement.c: 280: {
 28930                           ;RPM_Measurement.c: 281: Timer1_OF_counter_Generator = 0;
 28931  017C44  0E00               	movlw	0
 28932  017C46  0103               	movlb	3	; () banked
 28933  017C48  6FF3               	movwf	(_Timer1_OF_counter_Generator+1)& (0+255),b
 28934  017C4A  0E00               	movlw	0
 28935  017C4C  6FF2               	movwf	_Timer1_OF_counter_Generator& (0+255),b
 28936                           
 28937                           ;RPM_Measurement.c: 282: GRPM_Frequency = 0; GRPM_Cap_New = 0;Generator_RPM_FLT = 0;Gene
      +                          rator_RPM_INT = 0;
 28938  017C4E  0E00               	movlw	0
 28939  017C50  0104               	movlb	4	; () banked
 28940  017C52  6FE1               	movwf	_GRPM_Frequency& (0+255),b
 28941  017C54  0E00               	movlw	0
 28942  017C56  0104               	movlb	4	; () banked
 28943  017C58  6FE2               	movwf	(_GRPM_Frequency+1)& (0+255),b
 28944  017C5A  0E00               	movlw	0
 28945  017C5C  0104               	movlb	4	; () banked
 28946  017C5E  6FE3               	movwf	(_GRPM_Frequency+2)& (0+255),b
 28947  017C60  0E00               	movlw	0
 28948  017C62  0101               	movlb	1	; () banked
 28949  017C64  6F23               	movwf	(_GRPM_Cap_New+1)& (0+255),b
 28950  017C66  0E00               	movlw	0
 28951  017C68  6F22               	movwf	_GRPM_Cap_New& (0+255),b
 28952  017C6A  0E00               	movlw	0
 28953  017C6C  6E04               	movwf	_Generator_RPM_FLT,c
 28954  017C6E  0E00               	movlw	0
 28955  017C70  6E05               	movwf	_Generator_RPM_FLT+1,c
 28956  017C72  0E00               	movlw	0
 28957  017C74  6E06               	movwf	_Generator_RPM_FLT+2,c
 28958  017C76  0E00               	movlw	0
 28959  017C78  0102               	movlb	2	; () banked
 28960  017C7A  6F89               	movwf	(_Generator_RPM_INT+1)& (0+255),b
 28961  017C7C  0E00               	movlw	0
 28962  017C7E  6F88               	movwf	_Generator_RPM_INT& (0+255),b
 28963  017C80                     l22925:
 28964                           
 28965                           ;RPM_Measurement.c: 283: }
 28966                           ;RPM_Measurement.c: 284: if(Timer1_OF_counter_Wind > 10)
 28967  017C80  0103               	movlb	3	; () banked
 28968  017C82  51F7               	movf	(_Timer1_OF_counter_Wind+1)& (0+255),w,b
 28969  017C84  E105               	bnz	u17620
 28970  017C86  0E0B               	movlw	11
 28971  017C88  0103               	movlb	3	; () banked
 28972  017C8A  5DF6               	subwf	_Timer1_OF_counter_Wind& (0+255),w,b
 28973  017C8C  A0D8               	btfss	status,0,c
 28974  017C8E  D01C               	goto	l22929
 28975  017C90                     u17620:
 28976                           
 28977                           ; BSR set to: 3
 28978                           ;RPM_Measurement.c: 285: {
 28979                           ;RPM_Measurement.c: 286: Timer1_OF_counter_Wind = 0;
 28980  017C90  0E00               	movlw	0
 28981  017C92  0103               	movlb	3	; () banked
 28982  017C94  6FF7               	movwf	(_Timer1_OF_counter_Wind+1)& (0+255),b
 28983  017C96  0E00               	movlw	0
 28984  017C98  6FF6               	movwf	_Timer1_OF_counter_Wind& (0+255),b
 28985                           
 28986                           ;RPM_Measurement.c: 287: Wind_Frequency = 0;Wind_Cap_New = 0;Wind_Speed = 0;
 28987  017C9A  0E00               	movlw	0
 28988  017C9C  0104               	movlb	4	; () banked
 28989  017C9E  6FBD               	movwf	_Wind_Frequency& (0+255),b
 28990  017CA0  0E00               	movlw	0
 28991  017CA2  0104               	movlb	4	; () banked
 28992  017CA4  6FBE               	movwf	(_Wind_Frequency+1)& (0+255),b
 28993  017CA6  0E00               	movlw	0
 28994  017CA8  0104               	movlb	4	; () banked
 28995  017CAA  6FBF               	movwf	(_Wind_Frequency+2)& (0+255),b
 28996  017CAC  0E00               	movlw	0
 28997  017CAE  0101               	movlb	1	; () banked
 28998  017CB0  6F41               	movwf	(_Wind_Cap_New+1)& (0+255),b
 28999  017CB2  0E00               	movlw	0
 29000  017CB4  6F40               	movwf	_Wind_Cap_New& (0+255),b
 29001  017CB6  0E00               	movlw	0
 29002  017CB8  0102               	movlb	2	; () banked
 29003  017CBA  6F33               	movwf	_Wind_Speed& (0+255),b
 29004  017CBC  0E00               	movlw	0
 29005  017CBE  0102               	movlb	2	; () banked
 29006  017CC0  6F34               	movwf	(_Wind_Speed+1)& (0+255),b
 29007  017CC2  0E00               	movlw	0
 29008  017CC4  0102               	movlb	2	; () banked
 29009  017CC6  6F35               	movwf	(_Wind_Speed+2)& (0+255),b
 29010  017CC8                     l22929:
 29011                           
 29012                           ;RPM_Measurement.c: 288: }
 29013                           ;RPM_Measurement.c: 289: if(Timer1_OF_counter_Wind_2 > 10)
 29014  017CC8  0103               	movlb	3	; () banked
 29015  017CCA  51F9               	movf	(_Timer1_OF_counter_Wind_2+1)& (0+255),w,b
 29016  017CCC  E105               	bnz	u17630
 29017  017CCE  0E0B               	movlw	11
 29018  017CD0  0103               	movlb	3	; () banked
 29019  017CD2  5DF8               	subwf	_Timer1_OF_counter_Wind_2& (0+255),w,b
 29020  017CD4  A0D8               	btfss	status,0,c
 29021  017CD6  0012               	return	
 29022  017CD8                     u17630:
 29023                           
 29024                           ; BSR set to: 3
 29025                           ;RPM_Measurement.c: 290: {
 29026                           ;RPM_Measurement.c: 291: Timer1_OF_counter_Wind_2 = 0;
 29027  017CD8  0E00               	movlw	0
 29028  017CDA  0103               	movlb	3	; () banked
 29029  017CDC  6FF9               	movwf	(_Timer1_OF_counter_Wind_2+1)& (0+255),b
 29030  017CDE  0E00               	movlw	0
 29031  017CE0  6FF8               	movwf	_Timer1_OF_counter_Wind_2& (0+255),b
 29032                           
 29033                           ;RPM_Measurement.c: 292: wind_Frequency_2 = 0;Wind_Cap_New_2 = 0;Wind_Speed_2 = 0;
 29034  017CE2  0E00               	movlw	0
 29035  017CE4  0104               	movlb	4	; () banked
 29036  017CE6  6FD8               	movwf	_wind_Frequency_2& (0+255),b
 29037  017CE8  0E00               	movlw	0
 29038  017CEA  0104               	movlb	4	; () banked
 29039  017CEC  6FD9               	movwf	(_wind_Frequency_2+1)& (0+255),b
 29040  017CEE  0E00               	movlw	0
 29041  017CF0  0104               	movlb	4	; () banked
 29042  017CF2  6FDA               	movwf	(_wind_Frequency_2+2)& (0+255),b
 29043  017CF4  0E00               	movlw	0
 29044  017CF6  0101               	movlb	1	; () banked
 29045  017CF8  6F43               	movwf	(_Wind_Cap_New_2+1)& (0+255),b
 29046  017CFA  0E00               	movlw	0
 29047  017CFC  6F42               	movwf	_Wind_Cap_New_2& (0+255),b
 29048  017CFE  0E00               	movlw	0
 29049  017D00  0102               	movlb	2	; () banked
 29050  017D02  6F42               	movwf	_Wind_Speed_2& (0+255),b
 29051  017D04  0E00               	movlw	0
 29052  017D06  0102               	movlb	2	; () banked
 29053  017D08  6F43               	movwf	(_Wind_Speed_2+1)& (0+255),b
 29054  017D0A  0E00               	movlw	0
 29055  017D0C  0102               	movlb	2	; () banked
 29056  017D0E  6F44               	movwf	(_Wind_Speed_2+2)& (0+255),b
 29057  017D10  0012               	return	
 29058  017D12                     __end_of_RPM_Data_Kill:
 29059                           	opt stack 0
 29060                           tblptru	equ	0xFF8
 29061                           tblptrh	equ	0xFF7
 29062                           tblptrl	equ	0xFF6
 29063                           tablat	equ	0xFF5
 29064                           prodh	equ	0xFF4
 29065                           prodl	equ	0xFF3
 29066                           intcon	equ	0xFF2
 29067                           postinc0	equ	0xFEE
 29068                           wreg	equ	0xFE8
 29069                           postdec1	equ	0xFE5
 29070                           fsr1h	equ	0xFE2
 29071                           fsr1l	equ	0xFE1
 29072                           indf2	equ	0xFDF
 29073                           postinc2	equ	0xFDE
 29074                           postdec2	equ	0xFDD
 29075                           fsr2h	equ	0xFDA
 29076                           fsr2l	equ	0xFD9
 29077                           status	equ	0xFD8
 29078                           
 29079 ;; *************** function _Power_Factor *****************
 29080 ;; Defined at:
 29081 ;;		line 604 in file "Power_Meter.c"
 29082 ;; Parameters:    Size  Location     Type
 29083 ;;		None
 29084 ;; Auto vars:     Size  Location     Type
 29085 ;;		None
 29086 ;; Return value:  Size  Location     Type
 29087 ;;                  1    wreg      void 
 29088 ;; Registers used:
 29089 ;;		wreg, status,2, status,0, cstack
 29090 ;; Tracked objects:
 29091 ;;		On entry : 0/0
 29092 ;;		On exit  : 0/0
 29093 ;;		Unchanged: 0/0
 29094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29096 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29098 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29099 ;;Total ram usage:        3 bytes
 29100 ;; Hardware stack levels used:    1
 29101 ;; Hardware stack levels required when called:    5
 29102 ;; This function calls:
 29103 ;;		___ftadd
 29104 ;;		___ftdiv
 29105 ;;		___ftge
 29106 ;; This function is called by:
 29107 ;;		_main
 29108 ;; This function uses a non-reentrant model
 29109 ;;
 29110                           
 29111                           	psect	text102
 29112  01969E                     __ptext102:
 29113                           	opt stack 0
 29114  01969E                     _Power_Factor:
 29115                           	opt stack 25
 29116                           
 29117                           ;Power_Meter.c: 606: if ( Avg_RYB_Current > 0.5)
 29118                           
 29119                           ;incstack = 0
 29120  01969E  0E00               	movlw	0
 29121  0196A0  0100               	movlb	0	; () banked
 29122  0196A2  6F99               	movwf	___ftge@ff1& (0+255),b
 29123  0196A4  0E00               	movlw	0
 29124  0196A6  0100               	movlb	0	; () banked
 29125  0196A8  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 29126  0196AA  0E3F               	movlw	63
 29127  0196AC  0100               	movlb	0	; () banked
 29128  0196AE  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 29129  0196B0  C100  F09C         	movff	_Avg_RYB_Current,___ftge@ff2
 29130  0196B4  C101  F09D         	movff	_Avg_RYB_Current+1,___ftge@ff2+1
 29131  0196B8  C102  F09E         	movff	_Avg_RYB_Current+2,___ftge@ff2+2
 29132  0196BC  ECEB  F0CA         	call	___ftge	;wreg free
 29133  0196C0  0100               	movlb	0	; () banked
 29134  0196C2  B0D8               	btfsc	status,0,c
 29135  0196C4  D03A               	goto	l22731
 29136                           
 29137                           ; BSR set to: 0
 29138                           ;Power_Meter.c: 607: {
 29139                           ;Power_Meter.c: 608: Total_Power_Factor = ((R_Power_Factor + Y_Power_Factor + B_Power_Fa
      +                          ctor) / 3);
 29140  0196C6  C272  F090         	movff	_Y_Power_Factor,___ftadd@f2
 29141  0196CA  C273  F091         	movff	_Y_Power_Factor+1,___ftadd@f2+1
 29142  0196CE  C274  F092         	movff	_Y_Power_Factor+2,___ftadd@f2+2
 29143  0196D2  C597  F08D         	movff	_R_Power_Factor,___ftadd@f1
 29144  0196D6  C598  F08E         	movff	_R_Power_Factor+1,___ftadd@f1+1
 29145  0196DA  C599  F08F         	movff	_R_Power_Factor+2,___ftadd@f1+2
 29146  0196DE  EC69  F0B2         	call	___ftadd	;wreg free
 29147  0196E2  C08D  F0B4         	movff	?___ftadd,_Power_Factor$8144
 29148  0196E6  C08E  F0B5         	movff	?___ftadd+1,_Power_Factor$8144+1
 29149  0196EA  C08F  F0B6         	movff	?___ftadd+2,_Power_Factor$8144+2
 29150                           
 29151                           ;Power_Meter.c: 607: {
 29152                           ;Power_Meter.c: 608: Total_Power_Factor = ((R_Power_Factor + Y_Power_Factor + B_Power_Fa
      +                          ctor) / 3);
 29153  0196EE  C51F  F090         	movff	_B_Power_Factor,___ftadd@f2
 29154  0196F2  C520  F091         	movff	_B_Power_Factor+1,___ftadd@f2+1
 29155  0196F6  C521  F092         	movff	_B_Power_Factor+2,___ftadd@f2+2
 29156  0196FA  C0B4  F08D         	movff	_Power_Factor$8144,___ftadd@f1
 29157  0196FE  C0B5  F08E         	movff	_Power_Factor$8144+1,___ftadd@f1+1
 29158  019702  C0B6  F08F         	movff	_Power_Factor$8144+2,___ftadd@f1+2
 29159  019706  EC69  F0B2         	call	___ftadd	;wreg free
 29160  01970A  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 29161  01970E  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 29162  019712  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 29163  019716  0E00               	movlw	0
 29164  019718  0100               	movlb	0	; () banked
 29165  01971A  6FA8               	movwf	___ftdiv@f2& (0+255),b
 29166  01971C  0E40               	movlw	64
 29167  01971E  0100               	movlb	0	; () banked
 29168  019720  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 29169  019722  0E40               	movlw	64
 29170  019724  0100               	movlb	0	; () banked
 29171  019726  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 29172  019728  EC53  F0C1         	call	___ftdiv	;wreg free
 29173  01972C  C0A5  F22A         	movff	?___ftdiv,_Total_Power_Factor
 29174  019730  C0A6  F22B         	movff	?___ftdiv+1,_Total_Power_Factor+1
 29175  019734  C0A7  F22C         	movff	?___ftdiv+2,_Total_Power_Factor+2
 29176                           
 29177                           ;Power_Meter.c: 609: }
 29178  019738  0012               	return	
 29179  01973A                     l22731:
 29180                           
 29181                           ;Power_Meter.c: 610: else
 29182                           ;Power_Meter.c: 611: {
 29183                           ;Power_Meter.c: 612: Total_Power_Factor = 0;
 29184  01973A  0E00               	movlw	0
 29185  01973C  0102               	movlb	2	; () banked
 29186  01973E  6F2A               	movwf	_Total_Power_Factor& (0+255),b
 29187  019740  0E00               	movlw	0
 29188  019742  0102               	movlb	2	; () banked
 29189  019744  6F2B               	movwf	(_Total_Power_Factor+1)& (0+255),b
 29190  019746  0E00               	movlw	0
 29191  019748  0102               	movlb	2	; () banked
 29192  01974A  6F2C               	movwf	(_Total_Power_Factor+2)& (0+255),b
 29193                           
 29194                           ;Power_Meter.c: 613: Y_Power_Factor = 0;
 29195  01974C  0E00               	movlw	0
 29196  01974E  0102               	movlb	2	; () banked
 29197  019750  6F72               	movwf	_Y_Power_Factor& (0+255),b
 29198  019752  0E00               	movlw	0
 29199  019754  0102               	movlb	2	; () banked
 29200  019756  6F73               	movwf	(_Y_Power_Factor+1)& (0+255),b
 29201  019758  0E00               	movlw	0
 29202  01975A  0102               	movlb	2	; () banked
 29203  01975C  6F74               	movwf	(_Y_Power_Factor+2)& (0+255),b
 29204  01975E  0012               	return	
 29205  019760                     __end_of_Power_Factor:
 29206                           	opt stack 0
 29207                           tblptru	equ	0xFF8
 29208                           tblptrh	equ	0xFF7
 29209                           tblptrl	equ	0xFF6
 29210                           tablat	equ	0xFF5
 29211                           prodh	equ	0xFF4
 29212                           prodl	equ	0xFF3
 29213                           intcon	equ	0xFF2
 29214                           postinc0	equ	0xFEE
 29215                           wreg	equ	0xFE8
 29216                           postdec1	equ	0xFE5
 29217                           fsr1h	equ	0xFE2
 29218                           fsr1l	equ	0xFE1
 29219                           indf2	equ	0xFDF
 29220                           postinc2	equ	0xFDE
 29221                           postdec2	equ	0xFDD
 29222                           fsr2h	equ	0xFDA
 29223                           fsr2l	equ	0xFD9
 29224                           status	equ	0xFD8
 29225                           
 29226 ;; *************** function _Power_Calc *****************
 29227 ;; Defined at:
 29228 ;;		line 630 in file "Power_Meter.c"
 29229 ;; Parameters:    Size  Location     Type
 29230 ;;		None
 29231 ;; Auto vars:     Size  Location     Type
 29232 ;;		None
 29233 ;; Return value:  Size  Location     Type
 29234 ;;                  1    wreg      void 
 29235 ;; Registers used:
 29236 ;;		wreg, status,2, status,0, cstack
 29237 ;; Tracked objects:
 29238 ;;		On entry : 0/0
 29239 ;;		On exit  : 0/0
 29240 ;;		Unchanged: 0/0
 29241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29243 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29245 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29246 ;;Total ram usage:        9 bytes
 29247 ;; Hardware stack levels used:    1
 29248 ;; Hardware stack levels required when called:    7
 29249 ;; This function calls:
 29250 ;;		___ftadd
 29251 ;;		___ftdiv
 29252 ;;		___ftmul
 29253 ;;		___ftneg
 29254 ;;		_sqrt
 29255 ;; This function is called by:
 29256 ;;		_main
 29257 ;; This function uses a non-reentrant model
 29258 ;;
 29259                           
 29260                           	psect	text103
 29261  01673A                     __ptext103:
 29262                           	opt stack 0
 29263  01673A                     _Power_Calc:
 29264                           	opt stack 23
 29265                           
 29266                           ;Power_Meter.c: 632: KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Total_Power_Factor * 1.7
      +                          32) / 1000);
 29267                           
 29268                           ;incstack = 0
 29269  01673A  C100  F077         	movff	_Avg_RYB_Current,___ftmul@f2
 29270  01673E  C101  F078         	movff	_Avg_RYB_Current+1,___ftmul@f2+1
 29271  016742  C102  F079         	movff	_Avg_RYB_Current+2,___ftmul@f2+2
 29272  016746  C200  F074         	movff	_Avg_RYB_Voltage,___ftmul@f1
 29273  01674A  C201  F075         	movff	_Avg_RYB_Voltage+1,___ftmul@f1+1
 29274  01674E  C202  F076         	movff	_Avg_RYB_Voltage+2,___ftmul@f1+2
 29275  016752  ECA4  F0C0         	call	___ftmul	;wreg free
 29276  016756  C074  F1B0         	movff	?___ftmul,_Power_Calc$8145
 29277  01675A  C075  F1B1         	movff	?___ftmul+1,_Power_Calc$8145+1
 29278  01675E  C076  F1B2         	movff	?___ftmul+2,_Power_Calc$8145+2
 29279                           
 29280                           ;Power_Meter.c: 632: KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Total_Power_Factor * 1.7
      +                          32) / 1000);
 29281  016762  C22A  F077         	movff	_Total_Power_Factor,___ftmul@f2
 29282  016766  C22B  F078         	movff	_Total_Power_Factor+1,___ftmul@f2+1
 29283  01676A  C22C  F079         	movff	_Total_Power_Factor+2,___ftmul@f2+2
 29284  01676E  C1B0  F074         	movff	_Power_Calc$8145,___ftmul@f1
 29285  016772  C1B1  F075         	movff	_Power_Calc$8145+1,___ftmul@f1+1
 29286  016776  C1B2  F076         	movff	_Power_Calc$8145+2,___ftmul@f1+2
 29287  01677A  ECA4  F0C0         	call	___ftmul	;wreg free
 29288  01677E  C074  F1AD         	movff	?___ftmul,_Power_Calc$8146
 29289  016782  C075  F1AE         	movff	?___ftmul+1,_Power_Calc$8146+1
 29290  016786  C076  F1AF         	movff	?___ftmul+2,_Power_Calc$8146+2
 29291                           
 29292                           ;Power_Meter.c: 632: KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Total_Power_Factor * 1.7
      +                          32) / 1000);
 29293  01678A  0EB2               	movlw	178
 29294  01678C  0100               	movlb	0	; () banked
 29295  01678E  6F77               	movwf	___ftmul@f2& (0+255),b
 29296  016790  0EDD               	movlw	221
 29297  016792  0100               	movlb	0	; () banked
 29298  016794  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 29299  016796  0E3F               	movlw	63
 29300  016798  0100               	movlb	0	; () banked
 29301  01679A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 29302  01679C  C1AD  F074         	movff	_Power_Calc$8146,___ftmul@f1
 29303  0167A0  C1AE  F075         	movff	_Power_Calc$8146+1,___ftmul@f1+1
 29304  0167A4  C1AF  F076         	movff	_Power_Calc$8146+2,___ftmul@f1+2
 29305  0167A8  ECA4  F0C0         	call	___ftmul	;wreg free
 29306  0167AC  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 29307  0167B0  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 29308  0167B4  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 29309  0167B8  0E00               	movlw	0
 29310  0167BA  0100               	movlb	0	; () banked
 29311  0167BC  6FA8               	movwf	___ftdiv@f2& (0+255),b
 29312  0167BE  0E7A               	movlw	122
 29313  0167C0  0100               	movlb	0	; () banked
 29314  0167C2  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 29315  0167C4  0E44               	movlw	68
 29316  0167C6  0100               	movlb	0	; () banked
 29317  0167C8  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 29318  0167CA  EC53  F0C1         	call	___ftdiv	;wreg free
 29319  0167CE  C0A5  F022         	movff	?___ftdiv,_KW
 29320  0167D2  C0A6  F023         	movff	?___ftdiv+1,_KW+1
 29321  0167D6  C0A7  F024         	movff	?___ftdiv+2,_KW+2
 29322                           
 29323                           ;Power_Meter.c: 633: KVA = (((Avg_RYB_Voltage * Avg_RYB_Current)*1.732) / 1000);
 29324  0167DA  C100  F077         	movff	_Avg_RYB_Current,___ftmul@f2
 29325  0167DE  C101  F078         	movff	_Avg_RYB_Current+1,___ftmul@f2+1
 29326  0167E2  C102  F079         	movff	_Avg_RYB_Current+2,___ftmul@f2+2
 29327  0167E6  C200  F074         	movff	_Avg_RYB_Voltage,___ftmul@f1
 29328  0167EA  C201  F075         	movff	_Avg_RYB_Voltage+1,___ftmul@f1+1
 29329  0167EE  C202  F076         	movff	_Avg_RYB_Voltage+2,___ftmul@f1+2
 29330  0167F2  ECA4  F0C0         	call	___ftmul	;wreg free
 29331  0167F6  C074  F1B0         	movff	?___ftmul,_Power_Calc$8145
 29332  0167FA  C075  F1B1         	movff	?___ftmul+1,_Power_Calc$8145+1
 29333  0167FE  C076  F1B2         	movff	?___ftmul+2,_Power_Calc$8145+2
 29334                           
 29335                           ;Power_Meter.c: 633: KVA = (((Avg_RYB_Voltage * Avg_RYB_Current)*1.732) / 1000);
 29336  016802  0EB2               	movlw	178
 29337  016804  0100               	movlb	0	; () banked
 29338  016806  6F77               	movwf	___ftmul@f2& (0+255),b
 29339  016808  0EDD               	movlw	221
 29340  01680A  0100               	movlb	0	; () banked
 29341  01680C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 29342  01680E  0E3F               	movlw	63
 29343  016810  0100               	movlb	0	; () banked
 29344  016812  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 29345  016814  C1B0  F074         	movff	_Power_Calc$8145,___ftmul@f1
 29346  016818  C1B1  F075         	movff	_Power_Calc$8145+1,___ftmul@f1+1
 29347  01681C  C1B2  F076         	movff	_Power_Calc$8145+2,___ftmul@f1+2
 29348  016820  ECA4  F0C0         	call	___ftmul	;wreg free
 29349  016824  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 29350  016828  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 29351  01682C  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 29352  016830  0E00               	movlw	0
 29353  016832  0100               	movlb	0	; () banked
 29354  016834  6FA8               	movwf	___ftdiv@f2& (0+255),b
 29355  016836  0E7A               	movlw	122
 29356  016838  0100               	movlb	0	; () banked
 29357  01683A  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 29358  01683C  0E44               	movlw	68
 29359  01683E  0100               	movlb	0	; () banked
 29360  016840  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 29361  016842  EC53  F0C1         	call	___ftdiv	;wreg free
 29362  016846  C0A5  F218         	movff	?___ftdiv,_KVA
 29363  01684A  C0A6  F219         	movff	?___ftdiv+1,_KVA+1
 29364  01684E  C0A7  F21A         	movff	?___ftdiv+2,_KVA+2
 29365                           
 29366                           ;Power_Meter.c: 634: KVAr = (sqrt ((KVA * KVA)-(KW * KW)));
 29367  016852  C218  F077         	movff	_KVA,___ftmul@f2
 29368  016856  C219  F078         	movff	_KVA+1,___ftmul@f2+1
 29369  01685A  C21A  F079         	movff	_KVA+2,___ftmul@f2+2
 29370  01685E  C218  F074         	movff	_KVA,___ftmul@f1
 29371  016862  C219  F075         	movff	_KVA+1,___ftmul@f1+1
 29372  016866  C21A  F076         	movff	_KVA+2,___ftmul@f1+2
 29373  01686A  ECA4  F0C0         	call	___ftmul	;wreg free
 29374  01686E  C074  F08D         	movff	?___ftmul,___ftadd@f1
 29375  016872  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 29376  016876  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 29377  01687A  C022  F077         	movff	_KW,___ftmul@f2
 29378  01687E  C023  F078         	movff	_KW+1,___ftmul@f2+1
 29379  016882  C024  F079         	movff	_KW+2,___ftmul@f2+2
 29380  016886  C022  F074         	movff	_KW,___ftmul@f1
 29381  01688A  C023  F075         	movff	_KW+1,___ftmul@f1+1
 29382  01688E  C024  F076         	movff	_KW+2,___ftmul@f1+2
 29383  016892  ECA4  F0C0         	call	___ftmul	;wreg free
 29384  016896  C074  F083         	movff	?___ftmul,___ftneg@f1
 29385  01689A  C075  F084         	movff	?___ftmul+1,___ftneg@f1+1
 29386  01689E  C076  F085         	movff	?___ftmul+2,___ftneg@f1+2
 29387  0168A2  ECBD  F0D6         	call	___ftneg	;wreg free
 29388  0168A6  C083  F090         	movff	?___ftneg,___ftadd@f2
 29389  0168AA  C084  F091         	movff	?___ftneg+1,___ftadd@f2+1
 29390  0168AE  C085  F092         	movff	?___ftneg+2,___ftadd@f2+2
 29391  0168B2  EC69  F0B2         	call	___ftadd	;wreg free
 29392  0168B6  C08D  F1AA         	movff	?___ftadd,_Power_Calc$8147
 29393  0168BA  C08E  F1AB         	movff	?___ftadd+1,_Power_Calc$8147+1
 29394  0168BE  C08F  F1AC         	movff	?___ftadd+2,_Power_Calc$8147+2
 29395                           
 29396                           ;Power_Meter.c: 634: KVAr = (sqrt ((KVA * KVA)-(KW * KW)));
 29397  0168C2  C1AA  F0B1         	movff	_Power_Calc$8147,sqrt@a
 29398  0168C6  C1AB  F0B2         	movff	_Power_Calc$8147+1,sqrt@a+1
 29399  0168CA  C1AC  F0B3         	movff	_Power_Calc$8147+2,sqrt@a+2
 29400  0168CE  ECF0  F0B8         	call	_sqrt	;wreg free
 29401  0168D2  C0B1  F4A5         	movff	?_sqrt,_KVAr
 29402  0168D6  C0B2  F4A6         	movff	?_sqrt+1,_KVAr+1
 29403  0168DA  C0B3  F4A7         	movff	?_sqrt+2,_KVAr+2
 29404                           
 29405                           ;Power_Meter.c: 635: Y_KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Y_Power_Factor * 1.732
      +                          ) / 1000);
 29406  0168DE  C100  F077         	movff	_Avg_RYB_Current,___ftmul@f2
 29407  0168E2  C101  F078         	movff	_Avg_RYB_Current+1,___ftmul@f2+1
 29408  0168E6  C102  F079         	movff	_Avg_RYB_Current+2,___ftmul@f2+2
 29409  0168EA  C200  F074         	movff	_Avg_RYB_Voltage,___ftmul@f1
 29410  0168EE  C201  F075         	movff	_Avg_RYB_Voltage+1,___ftmul@f1+1
 29411  0168F2  C202  F076         	movff	_Avg_RYB_Voltage+2,___ftmul@f1+2
 29412  0168F6  ECA4  F0C0         	call	___ftmul	;wreg free
 29413  0168FA  C074  F1B0         	movff	?___ftmul,_Power_Calc$8145
 29414  0168FE  C075  F1B1         	movff	?___ftmul+1,_Power_Calc$8145+1
 29415  016902  C076  F1B2         	movff	?___ftmul+2,_Power_Calc$8145+2
 29416                           
 29417                           ;Power_Meter.c: 635: Y_KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Y_Power_Factor * 1.732
      +                          ) / 1000);
 29418  016906  C272  F077         	movff	_Y_Power_Factor,___ftmul@f2
 29419  01690A  C273  F078         	movff	_Y_Power_Factor+1,___ftmul@f2+1
 29420  01690E  C274  F079         	movff	_Y_Power_Factor+2,___ftmul@f2+2
 29421  016912  C1B0  F074         	movff	_Power_Calc$8145,___ftmul@f1
 29422  016916  C1B1  F075         	movff	_Power_Calc$8145+1,___ftmul@f1+1
 29423  01691A  C1B2  F076         	movff	_Power_Calc$8145+2,___ftmul@f1+2
 29424  01691E  ECA4  F0C0         	call	___ftmul	;wreg free
 29425  016922  C074  F1AD         	movff	?___ftmul,_Power_Calc$8146
 29426  016926  C075  F1AE         	movff	?___ftmul+1,_Power_Calc$8146+1
 29427  01692A  C076  F1AF         	movff	?___ftmul+2,_Power_Calc$8146+2
 29428                           
 29429                           ;Power_Meter.c: 635: Y_KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Y_Power_Factor * 1.732
      +                          ) / 1000);
 29430  01692E  0EB2               	movlw	178
 29431  016930  0100               	movlb	0	; () banked
 29432  016932  6F77               	movwf	___ftmul@f2& (0+255),b
 29433  016934  0EDD               	movlw	221
 29434  016936  0100               	movlb	0	; () banked
 29435  016938  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 29436  01693A  0E3F               	movlw	63
 29437  01693C  0100               	movlb	0	; () banked
 29438  01693E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 29439  016940  C1AD  F074         	movff	_Power_Calc$8146,___ftmul@f1
 29440  016944  C1AE  F075         	movff	_Power_Calc$8146+1,___ftmul@f1+1
 29441  016948  C1AF  F076         	movff	_Power_Calc$8146+2,___ftmul@f1+2
 29442  01694C  ECA4  F0C0         	call	___ftmul	;wreg free
 29443  016950  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 29444  016954  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 29445  016958  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 29446  01695C  0E00               	movlw	0
 29447  01695E  0100               	movlb	0	; () banked
 29448  016960  6FA8               	movwf	___ftdiv@f2& (0+255),b
 29449  016962  0E7A               	movlw	122
 29450  016964  0100               	movlb	0	; () banked
 29451  016966  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 29452  016968  0E44               	movlw	68
 29453  01696A  0100               	movlb	0	; () banked
 29454  01696C  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 29455  01696E  EC53  F0C1         	call	___ftdiv	;wreg free
 29456  016972  C0A5  F2F1         	movff	?___ftdiv,_Y_KW
 29457  016976  C0A6  F2F2         	movff	?___ftdiv+1,_Y_KW+1
 29458  01697A  C0A7  F2F3         	movff	?___ftdiv+2,_Y_KW+2
 29459  01697E  0012               	return		;funcret
 29460  016980                     __end_of_Power_Calc:
 29461                           	opt stack 0
 29462                           tblptru	equ	0xFF8
 29463                           tblptrh	equ	0xFF7
 29464                           tblptrl	equ	0xFF6
 29465                           tablat	equ	0xFF5
 29466                           prodh	equ	0xFF4
 29467                           prodl	equ	0xFF3
 29468                           intcon	equ	0xFF2
 29469                           postinc0	equ	0xFEE
 29470                           wreg	equ	0xFE8
 29471                           postdec1	equ	0xFE5
 29472                           fsr1h	equ	0xFE2
 29473                           fsr1l	equ	0xFE1
 29474                           indf2	equ	0xFDF
 29475                           postinc2	equ	0xFDE
 29476                           postdec2	equ	0xFDD
 29477                           fsr2h	equ	0xFDA
 29478                           fsr2l	equ	0xFD9
 29479                           status	equ	0xFD8
 29480                           
 29481 ;; *************** function _sqrt *****************
 29482 ;; Defined at:
 29483 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\sprcsqrt.c"
 29484 ;; Parameters:    Size  Location     Type
 29485 ;;  a               3   81[BANK0 ] void 
 29486 ;; Auto vars:     Size  Location     Type
 29487 ;;  x               3   97[BANK0 ] void 
 29488 ;;  q               3   94[BANK0 ] void 
 29489 ;;  z               3   90[BANK0 ] void 
 29490 ;;  og              3   87[BANK0 ] void 
 29491 ;;  i               1   93[BANK0 ] unsigned char 
 29492 ;; Return value:  Size  Location     Type
 29493 ;;                  3   81[BANK0 ] unsigned char 
 29494 ;; Registers used:
 29495 ;;		wreg, status,2, status,0, cstack
 29496 ;; Tracked objects:
 29497 ;;		On entry : 0/0
 29498 ;;		On exit  : 0/0
 29499 ;;		Unchanged: 0/0
 29500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29501 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29502 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29503 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29504 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29505 ;;Total ram usage:       19 bytes
 29506 ;; Hardware stack levels used:    1
 29507 ;; Hardware stack levels required when called:    6
 29508 ;; This function calls:
 29509 ;;		___ftge
 29510 ;;		___ftmul
 29511 ;;		___ftsub
 29512 ;; This function is called by:
 29513 ;;		_Power_Calc
 29514 ;; This function uses a non-reentrant model
 29515 ;;
 29516                           
 29517                           	psect	text104
 29518  0171E0                     __ptext104:
 29519                           	opt stack 0
 29520  0171E0                     _sqrt:
 29521                           	opt stack 23
 29522                           
 29523                           ;incstack = 0
 29524  0171E0  0E00               	movlw	0
 29525  0171E2  0100               	movlb	0	; () banked
 29526  0171E4  6F99               	movwf	___ftge@ff1& (0+255),b
 29527  0171E6  0E00               	movlw	0
 29528  0171E8  0100               	movlb	0	; () banked
 29529  0171EA  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 29530  0171EC  0E00               	movlw	0
 29531  0171EE  0100               	movlb	0	; () banked
 29532  0171F0  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 29533  0171F2  C0B1  F09C         	movff	sqrt@a,___ftge@ff2
 29534  0171F6  C0B2  F09D         	movff	sqrt@a+1,___ftge@ff2+1
 29535  0171FA  C0B3  F09E         	movff	sqrt@a+2,___ftge@ff2+2
 29536  0171FE  ECEB  F0CA         	call	___ftge	;wreg free
 29537  017202  0100               	movlb	0	; () banked
 29538  017204  A0D8               	btfss	status,0,c
 29539  017206  D012               	goto	l10969
 29540                           
 29541                           ; BSR set to: 0
 29542  017208  0100               	movlb	0	; () banked
 29543  01720A  AFB3               	btfss	(sqrt@a+2)& (0+255),7,b
 29544  01720C  D005               	goto	l10970
 29545                           
 29546                           ; BSR set to: 0
 29547  01720E  0E00               	movlw	0
 29548  017210  0105               	movlb	5	; () banked
 29549  017212  6FF1               	movwf	(_errno+1)& (0+255),b
 29550  017214  0E21               	movlw	33
 29551  017216  6FF0               	movwf	_errno& (0+255),b
 29552  017218                     l10970:
 29553  017218  0E00               	movlw	0
 29554  01721A  0100               	movlb	0	; () banked
 29555  01721C  6FB1               	movwf	?_sqrt& (0+255),b
 29556  01721E  0E00               	movlw	0
 29557  017220  0100               	movlb	0	; () banked
 29558  017222  6FB2               	movwf	(?_sqrt+1)& (0+255),b
 29559  017224  0E00               	movlw	0
 29560  017226  0100               	movlb	0	; () banked
 29561  017228  6FB3               	movwf	(?_sqrt+2)& (0+255),b
 29562                           
 29563                           ; BSR set to: 0
 29564  01722A  0012               	return	
 29565  01722C                     l10969:
 29566                           
 29567                           ; BSR set to: 0
 29568  01722C  C0B1  F0BA         	movff	sqrt@a,sqrt@z
 29569  017230  C0B2  F0BB         	movff	sqrt@a+1,sqrt@z+1
 29570  017234  C0B3  F0BC         	movff	sqrt@a+2,sqrt@z+2
 29571                           
 29572                           ; BSR set to: 0
 29573  017238  C0B1  F0B4         	movff	sqrt@a,??_sqrt
 29574  01723C  C0B2  F0B5         	movff	sqrt@a+1,??_sqrt+1
 29575  017240  C0B3  F0B6         	movff	sqrt@a+2,??_sqrt+2
 29576  017244  0100               	movlb	0	; () banked
 29577  017246  1FB4               	comf	??_sqrt& (0+255),f,b
 29578  017248  1FB5               	comf	(??_sqrt+1)& (0+255),f,b
 29579  01724A  1FB6               	comf	(??_sqrt+2)& (0+255),f,b
 29580  01724C  2BB4               	incf	??_sqrt& (0+255),f,b
 29581  01724E  0E00               	movlw	0
 29582  017250  23B5               	addwfc	(??_sqrt+1)& (0+255),f,b
 29583  017252  23B6               	addwfc	(??_sqrt+2)& (0+255),f,b
 29584  017254  0EC8               	movlw	200
 29585  017256  0100               	movlb	0	; () banked
 29586  017258  25B4               	addwf	??_sqrt& (0+255),w,b
 29587  01725A  0100               	movlb	0	; () banked
 29588  01725C  6FC1               	movwf	sqrt@x& (0+255),b
 29589  01725E  0E6E               	movlw	110
 29590  017260  0100               	movlb	0	; () banked
 29591  017262  21B5               	addwfc	(??_sqrt+1)& (0+255),w,b
 29592  017264  0100               	movlb	0	; () banked
 29593  017266  6FC2               	movwf	(sqrt@x+1)& (0+255),b
 29594  017268  0EBE               	movlw	190
 29595  01726A  0100               	movlb	0	; () banked
 29596  01726C  21B6               	addwfc	(??_sqrt+2)& (0+255),w,b
 29597  01726E  0100               	movlb	0	; () banked
 29598  017270  6FC3               	movwf	(sqrt@x+2)& (0+255),b
 29599                           
 29600                           ; BSR set to: 0
 29601  017272  0100               	movlb	0	; () banked
 29602  017274  90D8               	bcf	status,0,c
 29603  017276  33C3               	rrcf	(sqrt@x+2)& (0+255),f,b
 29604  017278  33C2               	rrcf	(sqrt@x+1)& (0+255),f,b
 29605  01727A  33C1               	rrcf	sqrt@x& (0+255),f,b
 29606                           
 29607                           ; BSR set to: 0
 29608  01727C  0E00               	movlw	0
 29609  01727E  0100               	movlb	0	; () banked
 29610  017280  5FBA               	subwf	sqrt@z& (0+255),f,b
 29611  017282  0E80               	movlw	128
 29612  017284  0100               	movlb	0	; () banked
 29613  017286  5BBB               	subwfb	(sqrt@z+1)& (0+255),f,b
 29614  017288  0E00               	movlw	0
 29615  01728A  0100               	movlb	0	; () banked
 29616  01728C  5BBC               	subwfb	(sqrt@z+2)& (0+255),f,b
 29617                           
 29618                           ; BSR set to: 0
 29619  01728E  0E04               	movlw	4
 29620  017290  0100               	movlb	0	; () banked
 29621  017292  6FBD               	movwf	sqrt@i& (0+255),b
 29622  017294                     l22191:
 29623                           
 29624                           ; BSR set to: 0
 29625  017294  C0C1  F0B7         	movff	sqrt@x,sqrt@og
 29626  017298  C0C2  F0B8         	movff	sqrt@x+1,sqrt@og+1
 29627  01729C  C0C3  F0B9         	movff	sqrt@x+2,sqrt@og+2
 29628                           
 29629                           ; BSR set to: 0
 29630  0172A0  C0C1  F074         	movff	sqrt@x,___ftmul@f1
 29631  0172A4  C0C2  F075         	movff	sqrt@x+1,___ftmul@f1+1
 29632  0172A8  C0C3  F076         	movff	sqrt@x+2,___ftmul@f1+2
 29633  0172AC  C0BA  F077         	movff	sqrt@z,___ftmul@f2
 29634  0172B0  C0BB  F078         	movff	sqrt@z+1,___ftmul@f2+1
 29635  0172B4  C0BC  F079         	movff	sqrt@z+2,___ftmul@f2+2
 29636  0172B8  ECA4  F0C0         	call	___ftmul	;wreg free
 29637  0172BC  C074  F0BE         	movff	?___ftmul,sqrt@q
 29638  0172C0  C075  F0BF         	movff	?___ftmul+1,sqrt@q+1
 29639  0172C4  C076  F0C0         	movff	?___ftmul+2,sqrt@q+2
 29640  0172C8  C0BE  F074         	movff	sqrt@q,___ftmul@f1
 29641  0172CC  C0BF  F075         	movff	sqrt@q+1,___ftmul@f1+1
 29642  0172D0  C0C0  F076         	movff	sqrt@q+2,___ftmul@f1+2
 29643  0172D4  C0C1  F077         	movff	sqrt@x,___ftmul@f2
 29644  0172D8  C0C2  F078         	movff	sqrt@x+1,___ftmul@f2+1
 29645  0172DC  C0C3  F079         	movff	sqrt@x+2,___ftmul@f2+2
 29646  0172E0  ECA4  F0C0         	call	___ftmul	;wreg free
 29647  0172E4  C074  F0BE         	movff	?___ftmul,sqrt@q
 29648  0172E8  C075  F0BF         	movff	?___ftmul+1,sqrt@q+1
 29649  0172EC  C076  F0C0         	movff	?___ftmul+2,sqrt@q+2
 29650  0172F0  C0BE  F074         	movff	sqrt@q,___ftmul@f1
 29651  0172F4  C0BF  F075         	movff	sqrt@q+1,___ftmul@f1+1
 29652  0172F8  C0C0  F076         	movff	sqrt@q+2,___ftmul@f1+2
 29653  0172FC  C0C1  F077         	movff	sqrt@x,___ftmul@f2
 29654  017300  C0C2  F078         	movff	sqrt@x+1,___ftmul@f2+1
 29655  017304  C0C3  F079         	movff	sqrt@x+2,___ftmul@f2+2
 29656  017308  ECA4  F0C0         	call	___ftmul	;wreg free
 29657  01730C  C074  F0BE         	movff	?___ftmul,sqrt@q
 29658  017310  C075  F0BF         	movff	?___ftmul+1,sqrt@q+1
 29659  017314  C076  F0C0         	movff	?___ftmul+2,sqrt@q+2
 29660  017318  C0C1  F074         	movff	sqrt@x,___ftmul@f1
 29661  01731C  C0C2  F075         	movff	sqrt@x+1,___ftmul@f1+1
 29662  017320  C0C3  F076         	movff	sqrt@x+2,___ftmul@f1+2
 29663  017324  0E00               	movlw	0
 29664  017326  0100               	movlb	0	; () banked
 29665  017328  6F77               	movwf	___ftmul@f2& (0+255),b
 29666  01732A  0EC0               	movlw	192
 29667  01732C  0100               	movlb	0	; () banked
 29668  01732E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 29669  017330  0E3F               	movlw	63
 29670  017332  0100               	movlb	0	; () banked
 29671  017334  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 29672  017336  ECA4  F0C0         	call	___ftmul	;wreg free
 29673  01733A  C074  F0C1         	movff	?___ftmul,sqrt@x
 29674  01733E  C075  F0C2         	movff	?___ftmul+1,sqrt@x+1
 29675  017342  C076  F0C3         	movff	?___ftmul+2,sqrt@x+2
 29676  017346  C0C1  F0AB         	movff	sqrt@x,___ftsub@f1
 29677  01734A  C0C2  F0AC         	movff	sqrt@x+1,___ftsub@f1+1
 29678  01734E  C0C3  F0AD         	movff	sqrt@x+2,___ftsub@f1+2
 29679  017352  C0BE  F0AE         	movff	sqrt@q,___ftsub@f2
 29680  017356  C0BF  F0AF         	movff	sqrt@q+1,___ftsub@f2+1
 29681  01735A  C0C0  F0B0         	movff	sqrt@q+2,___ftsub@f2+2
 29682  01735E  EC61  F0D5         	call	___ftsub	;wreg free
 29683  017362  C0AB  F0C1         	movff	?___ftsub,sqrt@x
 29684  017366  C0AC  F0C2         	movff	?___ftsub+1,sqrt@x+1
 29685  01736A  C0AD  F0C3         	movff	?___ftsub+2,sqrt@x+2
 29686  01736E  0100               	movlb	0	; () banked
 29687  017370  2FBD               	decfsz	sqrt@i& (0+255),f,b
 29688  017372  D790               	goto	l22191
 29689                           
 29690                           ; BSR set to: 0
 29691                           
 29692                           ; BSR set to: 0
 29693  017374  C0C1  F074         	movff	sqrt@x,___ftmul@f1
 29694  017378  C0C2  F075         	movff	sqrt@x+1,___ftmul@f1+1
 29695  01737C  C0C3  F076         	movff	sqrt@x+2,___ftmul@f1+2
 29696  017380  C0B1  F077         	movff	sqrt@a,___ftmul@f2
 29697  017384  C0B2  F078         	movff	sqrt@a+1,___ftmul@f2+1
 29698  017388  C0B3  F079         	movff	sqrt@a+2,___ftmul@f2+2
 29699  01738C  ECA4  F0C0         	call	___ftmul	;wreg free
 29700  017390  C074  F0B1         	movff	?___ftmul,?_sqrt
 29701  017394  C075  F0B2         	movff	?___ftmul+1,?_sqrt+1
 29702  017398  C076  F0B3         	movff	?___ftmul+2,?_sqrt+2
 29703  01739C  0012               	return	
 29704  01739E                     __end_of_sqrt:
 29705                           	opt stack 0
 29706                           tblptru	equ	0xFF8
 29707                           tblptrh	equ	0xFF7
 29708                           tblptrl	equ	0xFF6
 29709                           tablat	equ	0xFF5
 29710                           prodh	equ	0xFF4
 29711                           prodl	equ	0xFF3
 29712                           intcon	equ	0xFF2
 29713                           postinc0	equ	0xFEE
 29714                           wreg	equ	0xFE8
 29715                           postdec1	equ	0xFE5
 29716                           fsr1h	equ	0xFE2
 29717                           fsr1l	equ	0xFE1
 29718                           indf2	equ	0xFDF
 29719                           postinc2	equ	0xFDE
 29720                           postdec2	equ	0xFDD
 29721                           fsr2h	equ	0xFDA
 29722                           fsr2l	equ	0xFD9
 29723                           status	equ	0xFD8
 29724                           
 29725 ;; *************** function _Phase_Sequence *****************
 29726 ;; Defined at:
 29727 ;;		line 270 in file "Power_Meter.c"
 29728 ;; Parameters:    Size  Location     Type
 29729 ;;		None
 29730 ;; Auto vars:     Size  Location     Type
 29731 ;;		None
 29732 ;; Return value:  Size  Location     Type
 29733 ;;                  1    wreg      void 
 29734 ;; Registers used:
 29735 ;;		wreg, status,2, status,0, cstack
 29736 ;; Tracked objects:
 29737 ;;		On entry : 0/0
 29738 ;;		On exit  : 0/0
 29739 ;;		Unchanged: 0/0
 29740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29745 ;;Total ram usage:        0 bytes
 29746 ;; Hardware stack levels used:    1
 29747 ;; Hardware stack levels required when called:    4
 29748 ;; This function calls:
 29749 ;;		_Read_Adc
 29750 ;; This function is called by:
 29751 ;;		_main
 29752 ;; This function uses a non-reentrant model
 29753 ;;
 29754                           
 29755                           	psect	text105
 29756  017FE2                     __ptext105:
 29757                           	opt stack 0
 29758  017FE2                     _Phase_Sequence:
 29759                           	opt stack 26
 29760                           
 29761                           ;Power_Meter.c: 272: RV_PS_Max = 0;
 29762                           
 29763                           ;incstack = 0
 29764  017FE2  0E00               	movlw	0
 29765  017FE4  0103               	movlb	3	; () banked
 29766  017FE6  6FED               	movwf	(_RV_PS_Max+1)& (0+255),b
 29767  017FE8  0E00               	movlw	0
 29768  017FEA  6FEC               	movwf	_RV_PS_Max& (0+255),b
 29769                           
 29770                           ;Power_Meter.c: 273: YV_PS_Max = 0;
 29771  017FEC  0E00               	movlw	0
 29772  017FEE  0103               	movlb	3	; () banked
 29773  017FF0  6FFF               	movwf	(_YV_PS_Max+1)& (0+255),b
 29774  017FF2  0E00               	movlw	0
 29775  017FF4  6FFE               	movwf	_YV_PS_Max& (0+255),b
 29776                           
 29777                           ;Power_Meter.c: 274: BV_PS_Max = 0;
 29778  017FF6  0E00               	movlw	0
 29779  017FF8  0103               	movlb	3	; () banked
 29780  017FFA  6FE5               	movwf	(_BV_PS_Max+1)& (0+255),b
 29781  017FFC  0E00               	movlw	0
 29782  017FFE  6FE4               	movwf	_BV_PS_Max& (0+255),b
 29783                           
 29784                           ;Power_Meter.c: 275: R_Peak = 0;
 29785  018000  0E00               	movlw	0
 29786  018002  0101               	movlb	1	; () banked
 29787  018004  6F2F               	movwf	(_R_Peak+1)& (0+255),b
 29788  018006  0E00               	movlw	0
 29789  018008  6F2E               	movwf	_R_Peak& (0+255),b
 29790                           
 29791                           ;Power_Meter.c: 276: Y_Peak = 0;
 29792  01800A  0E00               	movlw	0
 29793  01800C  0101               	movlb	1	; () banked
 29794  01800E  6F49               	movwf	(_Y_Peak+1)& (0+255),b
 29795  018010  0E00               	movlw	0
 29796  018012  6F48               	movwf	_Y_Peak& (0+255),b
 29797                           
 29798                           ;Power_Meter.c: 277: B_Peak = 0;
 29799  018014  0E00               	movlw	0
 29800  018016  0101               	movlb	1	; () banked
 29801  018018  6F1F               	movwf	(_B_Peak+1)& (0+255),b
 29802  01801A  0E00               	movlw	0
 29803  01801C  6F1E               	movwf	_B_Peak& (0+255),b
 29804                           
 29805                           ;Power_Meter.c: 279: for(PS = 0; PS < 70; PS++)
 29806  01801E  0E00               	movlw	0
 29807  018020  6E1D               	movwf	_PS,c
 29808  018022                     l22343:
 29809                           
 29810                           ; BSR set to: 1
 29811  018022  0E45               	movlw	69
 29812  018024  641D               	cpfsgt	_PS,c
 29813  018026  D001               	goto	l22347
 29814  018028  D04D               	goto	l22365
 29815  01802A                     l22347:
 29816                           
 29817                           ;Power_Meter.c: 280: {
 29818                           ;Power_Meter.c: 281: RV_PS = Read_Adc(1);
 29819  01802A  0E01               	movlw	1
 29820  01802C  ECA9  F0D5         	call	_Read_Adc
 29821  018030  C060  F29A         	movff	?_Read_Adc,_RV_PS
 29822  018034  C061  F29B         	movff	?_Read_Adc+1,_RV_PS+1
 29823                           
 29824                           ;Power_Meter.c: 282: YV_PS = Read_Adc(2);
 29825  018038  0E02               	movlw	2
 29826  01803A  ECA9  F0D5         	call	_Read_Adc
 29827  01803E  C060  F2B4         	movff	?_Read_Adc,_YV_PS
 29828  018042  C061  F2B5         	movff	?_Read_Adc+1,_YV_PS+1
 29829                           
 29830                           ;Power_Meter.c: 283: BV_PS = Read_Adc(3);
 29831  018046  0E03               	movlw	3
 29832  018048  ECA9  F0D5         	call	_Read_Adc
 29833  01804C  C060  F27E         	movff	?_Read_Adc,_BV_PS
 29834  018050  C061  F27F         	movff	?_Read_Adc+1,_BV_PS+1
 29835                           
 29836                           ;Power_Meter.c: 285: if(RV_PS_Max < RV_PS)
 29837  018054  0102               	movlb	2	; () banked
 29838  018056  519A               	movf	_RV_PS& (0+255),w,b
 29839  018058  0103               	movlb	3	; () banked
 29840  01805A  5DEC               	subwf	_RV_PS_Max& (0+255),w,b
 29841  01805C  0102               	movlb	2	; () banked
 29842  01805E  519B               	movf	(_RV_PS+1)& (0+255),w,b
 29843  018060  0103               	movlb	3	; () banked
 29844  018062  59ED               	subwfb	(_RV_PS_Max+1)& (0+255),w,b
 29845  018064  B0D8               	btfsc	status,0,c
 29846  018066  D008               	goto	l22353
 29847                           
 29848                           ; BSR set to: 3
 29849                           ;Power_Meter.c: 286: {
 29850                           ;Power_Meter.c: 287: RV_PS_Max = RV_PS;
 29851  018068  C29A  F3EC         	movff	_RV_PS,_RV_PS_Max
 29852  01806C  C29B  F3ED         	movff	_RV_PS+1,_RV_PS_Max+1
 29853                           
 29854                           ;Power_Meter.c: 288: R_Peak = PS;
 29855  018070  C01D  F12E         	movff	_PS,_R_Peak
 29856  018074  0101               	movlb	1	; () banked
 29857  018076  6B2F               	clrf	(_R_Peak+1)& (0+255),b
 29858  018078                     l22353:
 29859                           
 29860                           ;Power_Meter.c: 289: }
 29861                           ;Power_Meter.c: 291: if(YV_PS_Max < YV_PS)
 29862  018078  0102               	movlb	2	; () banked
 29863  01807A  51B4               	movf	_YV_PS& (0+255),w,b
 29864  01807C  0103               	movlb	3	; () banked
 29865  01807E  5DFE               	subwf	_YV_PS_Max& (0+255),w,b
 29866  018080  0102               	movlb	2	; () banked
 29867  018082  51B5               	movf	(_YV_PS+1)& (0+255),w,b
 29868  018084  0103               	movlb	3	; () banked
 29869  018086  59FF               	subwfb	(_YV_PS_Max+1)& (0+255),w,b
 29870  018088  B0D8               	btfsc	status,0,c
 29871  01808A  D008               	goto	l22357
 29872                           
 29873                           ; BSR set to: 3
 29874                           ;Power_Meter.c: 292: {
 29875                           ;Power_Meter.c: 293: YV_PS_Max = YV_PS;
 29876  01808C  C2B4  F3FE         	movff	_YV_PS,_YV_PS_Max
 29877  018090  C2B5  F3FF         	movff	_YV_PS+1,_YV_PS_Max+1
 29878                           
 29879                           ;Power_Meter.c: 294: Y_Peak = PS;
 29880  018094  C01D  F148         	movff	_PS,_Y_Peak
 29881  018098  0101               	movlb	1	; () banked
 29882  01809A  6B49               	clrf	(_Y_Peak+1)& (0+255),b
 29883  01809C                     l22357:
 29884                           
 29885                           ;Power_Meter.c: 295: }
 29886                           ;Power_Meter.c: 297: if(BV_PS_Max < BV_PS)
 29887  01809C  0102               	movlb	2	; () banked
 29888  01809E  517E               	movf	_BV_PS& (0+255),w,b
 29889  0180A0  0103               	movlb	3	; () banked
 29890  0180A2  5DE4               	subwf	_BV_PS_Max& (0+255),w,b
 29891  0180A4  0102               	movlb	2	; () banked
 29892  0180A6  517F               	movf	(_BV_PS+1)& (0+255),w,b
 29893  0180A8  0103               	movlb	3	; () banked
 29894  0180AA  59E5               	subwfb	(_BV_PS_Max+1)& (0+255),w,b
 29895  0180AC  B0D8               	btfsc	status,0,c
 29896  0180AE  D008               	goto	l22361
 29897                           
 29898                           ; BSR set to: 3
 29899                           ;Power_Meter.c: 298: {
 29900                           ;Power_Meter.c: 299: BV_PS_Max = BV_PS;
 29901  0180B0  C27E  F3E4         	movff	_BV_PS,_BV_PS_Max
 29902  0180B4  C27F  F3E5         	movff	_BV_PS+1,_BV_PS_Max+1
 29903                           
 29904                           ;Power_Meter.c: 300: B_Peak = PS;
 29905  0180B8  C01D  F11E         	movff	_PS,_B_Peak
 29906  0180BC  0101               	movlb	1	; () banked
 29907  0180BE  6B1F               	clrf	(_B_Peak+1)& (0+255),b
 29908  0180C0                     l22361:
 29909  0180C0  2A1D               	incf	_PS,f,c
 29910  0180C2  D7AF               	goto	l22343
 29911  0180C4                     l22365:
 29912                           
 29913                           ;Power_Meter.c: 301: }
 29914                           ;Power_Meter.c: 302: }
 29915                           ;Power_Meter.c: 304: if( ((R_Peak > B_Peak) && (B_Peak > Y_Peak)) || ((Y_Peak > R_Peak) 
      +                          && (R_Peak > B_Peak)) || ((B_Peak > Y_Peak) && (Y_Peak > R_Peak)) )
 29916  0180C4  0101               	movlb	1	; () banked
 29917  0180C6  512E               	movf	_R_Peak& (0+255),w,b
 29918  0180C8  0101               	movlb	1	; () banked
 29919  0180CA  5D1E               	subwf	_B_Peak& (0+255),w,b
 29920  0180CC  0101               	movlb	1	; () banked
 29921  0180CE  512F               	movf	(_R_Peak+1)& (0+255),w,b
 29922  0180D0  0101               	movlb	1	; () banked
 29923  0180D2  591F               	subwfb	(_B_Peak+1)& (0+255),w,b
 29924  0180D4  B0D8               	btfsc	status,0,c
 29925  0180D6  D00A               	goto	l22369
 29926                           
 29927                           ; BSR set to: 1
 29928  0180D8  0101               	movlb	1	; () banked
 29929  0180DA  511E               	movf	_B_Peak& (0+255),w,b
 29930  0180DC  0101               	movlb	1	; () banked
 29931  0180DE  5D48               	subwf	_Y_Peak& (0+255),w,b
 29932  0180E0  0101               	movlb	1	; () banked
 29933  0180E2  511F               	movf	(_B_Peak+1)& (0+255),w,b
 29934  0180E4  0101               	movlb	1	; () banked
 29935  0180E6  5949               	subwfb	(_Y_Peak+1)& (0+255),w,b
 29936  0180E8  A0D8               	btfss	status,0,c
 29937  0180EA  D028               	goto	l22377
 29938  0180EC                     l22369:
 29939                           
 29940                           ; BSR set to: 1
 29941  0180EC  0101               	movlb	1	; () banked
 29942  0180EE  5148               	movf	_Y_Peak& (0+255),w,b
 29943  0180F0  0101               	movlb	1	; () banked
 29944  0180F2  5D2E               	subwf	_R_Peak& (0+255),w,b
 29945  0180F4  0101               	movlb	1	; () banked
 29946  0180F6  5149               	movf	(_Y_Peak+1)& (0+255),w,b
 29947  0180F8  0101               	movlb	1	; () banked
 29948  0180FA  592F               	subwfb	(_R_Peak+1)& (0+255),w,b
 29949  0180FC  B0D8               	btfsc	status,0,c
 29950  0180FE  D00A               	goto	l22373
 29951                           
 29952                           ; BSR set to: 1
 29953  018100  0101               	movlb	1	; () banked
 29954  018102  512E               	movf	_R_Peak& (0+255),w,b
 29955  018104  0101               	movlb	1	; () banked
 29956  018106  5D1E               	subwf	_B_Peak& (0+255),w,b
 29957  018108  0101               	movlb	1	; () banked
 29958  01810A  512F               	movf	(_R_Peak+1)& (0+255),w,b
 29959  01810C  0101               	movlb	1	; () banked
 29960  01810E  591F               	subwfb	(_B_Peak+1)& (0+255),w,b
 29961  018110  A0D8               	btfss	status,0,c
 29962  018112  D014               	goto	l22377
 29963  018114                     l22373:
 29964                           
 29965                           ; BSR set to: 1
 29966  018114  0101               	movlb	1	; () banked
 29967  018116  511E               	movf	_B_Peak& (0+255),w,b
 29968  018118  0101               	movlb	1	; () banked
 29969  01811A  5D48               	subwf	_Y_Peak& (0+255),w,b
 29970  01811C  0101               	movlb	1	; () banked
 29971  01811E  511F               	movf	(_B_Peak+1)& (0+255),w,b
 29972  018120  0101               	movlb	1	; () banked
 29973  018122  5949               	subwfb	(_Y_Peak+1)& (0+255),w,b
 29974  018124  B0D8               	btfsc	status,0,c
 29975  018126  D00D               	goto	l22379
 29976                           
 29977                           ; BSR set to: 1
 29978  018128  0101               	movlb	1	; () banked
 29979  01812A  5148               	movf	_Y_Peak& (0+255),w,b
 29980  01812C  0101               	movlb	1	; () banked
 29981  01812E  5D2E               	subwf	_R_Peak& (0+255),w,b
 29982  018130  0101               	movlb	1	; () banked
 29983  018132  5149               	movf	(_Y_Peak+1)& (0+255),w,b
 29984  018134  0101               	movlb	1	; () banked
 29985  018136  592F               	subwfb	(_R_Peak+1)& (0+255),w,b
 29986  018138  B0D8               	btfsc	status,0,c
 29987  01813A  D003               	goto	l22379
 29988  01813C                     l22377:
 29989                           
 29990                           ; BSR set to: 1
 29991                           ;Power_Meter.c: 305: {
 29992                           ;Power_Meter.c: 306: Phase_Sequence_Ok = 1;
 29993  01813C  0E01               	movlw	1
 29994  01813E  6E1E               	movwf	_Phase_Sequence_Ok,c
 29995                           
 29996                           ;Power_Meter.c: 307: }
 29997  018140  0012               	return	
 29998  018142                     l22379:
 29999                           
 30000                           ; BSR set to: 1
 30001                           ;Power_Meter.c: 309: else
 30002                           ;Power_Meter.c: 310: {
 30003                           ;Power_Meter.c: 311: Phase_Sequence_Ok = 0;
 30004  018142  0E00               	movlw	0
 30005  018144  6E1E               	movwf	_Phase_Sequence_Ok,c
 30006  018146  0012               	return	
 30007  018148                     __end_of_Phase_Sequence:
 30008                           	opt stack 0
 30009                           tblptru	equ	0xFF8
 30010                           tblptrh	equ	0xFF7
 30011                           tblptrl	equ	0xFF6
 30012                           tablat	equ	0xFF5
 30013                           prodh	equ	0xFF4
 30014                           prodl	equ	0xFF3
 30015                           intcon	equ	0xFF2
 30016                           postinc0	equ	0xFEE
 30017                           wreg	equ	0xFE8
 30018                           postdec1	equ	0xFE5
 30019                           fsr1h	equ	0xFE2
 30020                           fsr1l	equ	0xFE1
 30021                           indf2	equ	0xFDF
 30022                           postinc2	equ	0xFDE
 30023                           postdec2	equ	0xFDD
 30024                           fsr2h	equ	0xFDA
 30025                           fsr2l	equ	0xFD9
 30026                           status	equ	0xFD8
 30027                           
 30028 ;; *************** function _Read_Adc *****************
 30029 ;; Defined at:
 30030 ;;		line 111 in file "Power_Meter.c"
 30031 ;; Parameters:    Size  Location     Type
 30032 ;;  ch              1    wreg     unsigned char 
 30033 ;; Auto vars:     Size  Location     Type
 30034 ;;  ch              1    4[BANK0 ] unsigned char 
 30035 ;; Return value:  Size  Location     Type
 30036 ;;                  2    0[BANK0 ] unsigned int 
 30037 ;; Registers used:
 30038 ;;		wreg, status,2, status,0
 30039 ;; Tracked objects:
 30040 ;;		On entry : 0/0
 30041 ;;		On exit  : 0/0
 30042 ;;		Unchanged: 0/0
 30043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30044 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30047 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30048 ;;Total ram usage:        5 bytes
 30049 ;; Hardware stack levels used:    1
 30050 ;; Hardware stack levels required when called:    3
 30051 ;; This function calls:
 30052 ;;		Nothing
 30053 ;; This function is called by:
 30054 ;;		_Temp_Read
 30055 ;;		_Volt_Curr_Read
 30056 ;;		_Phase_Sequence
 30057 ;; This function uses a non-reentrant model
 30058 ;;
 30059                           
 30060                           	psect	text106
 30061  01AB52                     __ptext106:
 30062                           	opt stack 0
 30063  01AB52                     _Read_Adc:
 30064                           	opt stack 26
 30065                           
 30066                           ; BSR set to: 1
 30067                           ;incstack = 0
 30068                           ;Read_Adc@ch stored from wreg
 30069  01AB52  0100               	movlb	0	; () banked
 30070  01AB54  6F64               	movwf	Read_Adc@ch& (0+255),b
 30071                           
 30072                           ;Power_Meter.c: 113: ADCON0 = 0b00000000;
 30073  01AB56  0E00               	movlw	0
 30074  01AB58  6EC2               	movwf	4034,c	;volatile
 30075                           
 30076                           ;Power_Meter.c: 114: ADCON0 = (ch<<2);
 30077  01AB5A  0100               	movlb	0	; () banked
 30078  01AB5C  4564               	rlncf	Read_Adc@ch& (0+255),w,b
 30079  01AB5E  46E8               	rlncf	wreg,f,c
 30080  01AB60  0BFC               	andlw	252
 30081  01AB62  6EC2               	movwf	4034,c	;volatile
 30082                           
 30083                           ; BSR set to: 0
 30084                           ;Power_Meter.c: 115: ADON = 1;
 30085  01AB64  80C2               	bsf	4034,0,c	;volatile
 30086                           
 30087                           ; BSR set to: 0
 30088                           ;Power_Meter.c: 116: GODONE = 1;
 30089  01AB66  82C2               	bsf	4034,1,c	;volatile
 30090  01AB68                     l9167:
 30091  01AB68  B2C2               	btfsc	4034,1,c	;volatile
 30092  01AB6A  D7FE               	goto	l9167
 30093                           
 30094                           ;Power_Meter.c: 118: ADON = 0;
 30095  01AB6C  90C2               	bcf	4034,0,c	;volatile
 30096                           
 30097                           ;Power_Meter.c: 119: return ((ADRESH << 8) | ADRESL);
 30098  01AB6E  50C3               	movf	4035,w,c	;volatile
 30099  01AB70  CFC4 F062          	movff	4036,??_Read_Adc	;volatile
 30100  01AB74  0100               	movlb	0	; () banked
 30101  01AB76  6B63               	clrf	(??_Read_Adc+1)& (0+255),b
 30102  01AB78  C062  F063         	movff	??_Read_Adc,??_Read_Adc+1
 30103  01AB7C  0100               	movlb	0	; () banked
 30104  01AB7E  6B62               	clrf	??_Read_Adc& (0+255),b
 30105  01AB80  0100               	movlb	0	; () banked
 30106  01AB82  1162               	iorwf	??_Read_Adc& (0+255),w,b
 30107  01AB84  0100               	movlb	0	; () banked
 30108  01AB86  6F60               	movwf	?_Read_Adc& (0+255),b
 30109  01AB88  0100               	movlb	0	; () banked
 30110  01AB8A  5163               	movf	(??_Read_Adc+1)& (0+255),w,b
 30111  01AB8C  0100               	movlb	0	; () banked
 30112  01AB8E  6F61               	movwf	(?_Read_Adc+1)& (0+255),b
 30113  01AB90  0012               	return	
 30114  01AB92                     __end_of_Read_Adc:
 30115                           	opt stack 0
 30116                           tblptru	equ	0xFF8
 30117                           tblptrh	equ	0xFF7
 30118                           tblptrl	equ	0xFF6
 30119                           tablat	equ	0xFF5
 30120                           prodh	equ	0xFF4
 30121                           prodl	equ	0xFF3
 30122                           intcon	equ	0xFF2
 30123                           postinc0	equ	0xFEE
 30124                           wreg	equ	0xFE8
 30125                           postdec1	equ	0xFE5
 30126                           fsr1h	equ	0xFE2
 30127                           fsr1l	equ	0xFE1
 30128                           indf2	equ	0xFDF
 30129                           postinc2	equ	0xFDE
 30130                           postdec2	equ	0xFDD
 30131                           fsr2h	equ	0xFDA
 30132                           fsr2l	equ	0xFD9
 30133                           status	equ	0xFD8
 30134                           
 30135 ;; *************** function _PM_Timer_Initialization *****************
 30136 ;; Defined at:
 30137 ;;		line 94 in file "Power_Meter.c"
 30138 ;; Parameters:    Size  Location     Type
 30139 ;;		None
 30140 ;; Auto vars:     Size  Location     Type
 30141 ;;		None
 30142 ;; Return value:  Size  Location     Type
 30143 ;;                  1    wreg      void 
 30144 ;; Registers used:
 30145 ;;		wreg, status,2
 30146 ;; Tracked objects:
 30147 ;;		On entry : 0/0
 30148 ;;		On exit  : 0/0
 30149 ;;		Unchanged: 0/0
 30150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30155 ;;Total ram usage:        0 bytes
 30156 ;; Hardware stack levels used:    1
 30157 ;; Hardware stack levels required when called:    3
 30158 ;; This function calls:
 30159 ;;		Nothing
 30160 ;; This function is called by:
 30161 ;;		_main
 30162 ;; This function uses a non-reentrant model
 30163 ;;
 30164                           
 30165                           	psect	text107
 30166  01B0A4                     __ptext107:
 30167                           	opt stack 0
 30168  01B0A4                     _PM_Timer_Initialization:
 30169                           	opt stack 27
 30170                           
 30171                           ;Power_Meter.c: 96: T0CON = 0b11000111;
 30172                           
 30173                           ; BSR set to: 0
 30174                           ;incstack = 0
 30175  01B0A4  0EC7               	movlw	199
 30176  01B0A6  6ED5               	movwf	4053,c	;volatile
 30177                           
 30178                           ;Power_Meter.c: 98: TMR0IE = 1;
 30179  01B0A8  8AF2               	bsf	intcon,5,c	;volatile
 30180                           
 30181                           ;Power_Meter.c: 99: TMR0IF = 0;
 30182  01B0AA  94F2               	bcf	intcon,2,c	;volatile
 30183  01B0AC  0012               	return		;funcret
 30184  01B0AE                     __end_of_PM_Timer_Initialization:
 30185                           	opt stack 0
 30186                           tblptru	equ	0xFF8
 30187                           tblptrh	equ	0xFF7
 30188                           tblptrl	equ	0xFF6
 30189                           tablat	equ	0xFF5
 30190                           prodh	equ	0xFF4
 30191                           prodl	equ	0xFF3
 30192                           intcon	equ	0xFF2
 30193                           postinc0	equ	0xFEE
 30194                           wreg	equ	0xFE8
 30195                           postdec1	equ	0xFE5
 30196                           fsr1h	equ	0xFE2
 30197                           fsr1l	equ	0xFE1
 30198                           indf2	equ	0xFDF
 30199                           postinc2	equ	0xFDE
 30200                           postdec2	equ	0xFDD
 30201                           fsr2h	equ	0xFDA
 30202                           fsr2l	equ	0xFD9
 30203                           status	equ	0xFD8
 30204                           
 30205 ;; *************** function _PM_IO_Initialization *****************
 30206 ;; Defined at:
 30207 ;;		line 16 in file "Power_Meter.c"
 30208 ;; Parameters:    Size  Location     Type
 30209 ;;		None
 30210 ;; Auto vars:     Size  Location     Type
 30211 ;;		None
 30212 ;; Return value:  Size  Location     Type
 30213 ;;                  1    wreg      void 
 30214 ;; Registers used:
 30215 ;;		wreg, status,2
 30216 ;; Tracked objects:
 30217 ;;		On entry : 0/0
 30218 ;;		On exit  : 0/0
 30219 ;;		Unchanged: 0/0
 30220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30225 ;;Total ram usage:        0 bytes
 30226 ;; Hardware stack levels used:    1
 30227 ;; Hardware stack levels required when called:    3
 30228 ;; This function calls:
 30229 ;;		Nothing
 30230 ;; This function is called by:
 30231 ;;		_main
 30232 ;; This function uses a non-reentrant model
 30233 ;;
 30234                           
 30235                           	psect	text108
 30236  01A848                     __ptext108:
 30237                           	opt stack 0
 30238  01A848                     _PM_IO_Initialization:
 30239                           	opt stack 27
 30240                           
 30241                           ;Power_Meter.c: 20: TRISAbits.TRISA0 = 1;
 30242                           
 30243                           ;incstack = 0
 30244  01A848  8092               	bsf	3986,0,c	;volatile
 30245                           
 30246                           ;Power_Meter.c: 22: TRISAbits.TRISA1 = 1;
 30247  01A84A  8292               	bsf	3986,1,c	;volatile
 30248                           
 30249                           ;Power_Meter.c: 23: TRISAbits.TRISA2 = 1;
 30250  01A84C  8492               	bsf	3986,2,c	;volatile
 30251                           
 30252                           ;Power_Meter.c: 24: TRISAbits.TRISA3 = 1;
 30253  01A84E  8692               	bsf	3986,3,c	;volatile
 30254                           
 30255                           ;Power_Meter.c: 26: TRISFbits.TRISF4 = 1;
 30256  01A850  8897               	bsf	3991,4,c	;volatile
 30257                           
 30258                           ;Power_Meter.c: 27: TRISFbits.TRISF5 = 1;
 30259  01A852  8A97               	bsf	3991,5,c	;volatile
 30260                           
 30261                           ;Power_Meter.c: 28: TRISFbits.TRISF6 = 1;
 30262  01A854  8C97               	bsf	3991,6,c	;volatile
 30263                           
 30264                           ;Power_Meter.c: 31: ANSEL0 = 1;
 30265  01A856  010F               	movlb	15	; () banked
 30266  01A858  8125               	bsf	37,0,b	;volatile
 30267                           
 30268                           ;Power_Meter.c: 33: ANSEL1 = 1;
 30269  01A85A  010F               	movlb	15	; () banked
 30270  01A85C  8325               	bsf	37,1,b	;volatile
 30271                           
 30272                           ;Power_Meter.c: 34: ANSEL2 = 1;
 30273  01A85E  010F               	movlb	15	; () banked
 30274  01A860  8525               	bsf	37,2,b	;volatile
 30275                           
 30276                           ;Power_Meter.c: 35: ANSEL3 = 1;
 30277  01A862  010F               	movlb	15	; () banked
 30278  01A864  8725               	bsf	37,3,b	;volatile
 30279                           
 30280                           ;Power_Meter.c: 37: ANSEL9 = 1;
 30281  01A866  010F               	movlb	15	; () banked
 30282  01A868  8324               	bsf	36,1,b	;volatile
 30283                           
 30284                           ;Power_Meter.c: 38: ANSEL10 = 1;
 30285  01A86A  010F               	movlb	15	; () banked
 30286  01A86C  8524               	bsf	36,2,b	;volatile
 30287                           
 30288                           ;Power_Meter.c: 39: ANSEL11 = 1;
 30289  01A86E  010F               	movlb	15	; () banked
 30290  01A870  8724               	bsf	36,3,b	;volatile
 30291                           
 30292                           ;Power_Meter.c: 45: TRISFbits.TRISF7 = 0;
 30293  01A872  9E97               	bcf	3991,7,c	;volatile
 30294                           
 30295                           ;Power_Meter.c: 46: (RF7 = 0);
 30296  01A874  9E85               	bcf	3973,7,c	;volatile
 30297                           
 30298                           ;Power_Meter.c: 52: TRISCbits.TRISC2 = 1;
 30299  01A876  8494               	bsf	3988,2,c	;volatile
 30300                           
 30301                           ; BSR set to: 15
 30302                           ;Power_Meter.c: 53: CCP1CON = 0x04;
 30303  01A878  0E04               	movlw	4
 30304  01A87A  6EBB               	movwf	4027,c	;volatile
 30305                           
 30306                           ; BSR set to: 15
 30307                           ;Power_Meter.c: 54: CCP1IE = 1;
 30308  01A87C  82A3               	bsf	4003,1,c	;volatile
 30309                           
 30310                           ; BSR set to: 15
 30311                           ;Power_Meter.c: 55: CCP1IF = 0;
 30312  01A87E  92A4               	bcf	4004,1,c	;volatile
 30313                           
 30314                           ; BSR set to: 15
 30315                           ;Power_Meter.c: 61: TRISGbits.TRISG0 = 1;
 30316  01A880  8098               	bsf	3992,0,c	;volatile
 30317                           
 30318                           ;Power_Meter.c: 62: CCP3CON = 0x04;
 30319  01A882  0E04               	movlw	4
 30320  01A884  010F               	movlb	15	; () banked
 30321  01A886  6F49               	movwf	73,b	;volatile
 30322                           
 30323                           ; BSR set to: 15
 30324                           ;Power_Meter.c: 63: CCP3IE = 1;
 30325  01A888  80B6               	bsf	4022,0,c	;volatile
 30326                           
 30327                           ; BSR set to: 15
 30328                           ;Power_Meter.c: 64: CCP3IF = 0;
 30329  01A88A  90B7               	bcf	4023,0,c	;volatile
 30330                           
 30331                           ; BSR set to: 15
 30332                           ;Power_Meter.c: 66: TRISGbits.TRISG3 = 1;
 30333  01A88C  8698               	bsf	3992,3,c	;volatile
 30334                           
 30335                           ; BSR set to: 15
 30336                           ;Power_Meter.c: 67: ANSEL17 = 0;
 30337  01A88E  010F               	movlb	15	; () banked
 30338  01A890  9323               	bcf	35,1,b	;volatile
 30339                           
 30340                           ;Power_Meter.c: 68: CCP4CON = 0x04;
 30341  01A892  0E04               	movlw	4
 30342  01A894  6E77               	movwf	3959,c	;volatile
 30343                           
 30344                           ; BSR set to: 15
 30345                           ;Power_Meter.c: 69: CCP4IE = 1;
 30346  01A896  82B6               	bsf	4022,1,c	;volatile
 30347                           
 30348                           ; BSR set to: 15
 30349                           ;Power_Meter.c: 70: CCP4IF = 0;
 30350  01A898  92B7               	bcf	4023,1,c	;volatile
 30351                           
 30352                           ; BSR set to: 15
 30353                           ;Power_Meter.c: 72: TRISGbits.TRISG4 = 1;
 30354  01A89A  8898               	bsf	3992,4,c	;volatile
 30355                           
 30356                           ; BSR set to: 15
 30357                           ;Power_Meter.c: 73: ANSEL16 = 0;
 30358  01A89C  010F               	movlb	15	; () banked
 30359  01A89E  9123               	bcf	35,0,b	;volatile
 30360                           
 30361                           ;Power_Meter.c: 74: CCP5CON = 0x04;
 30362  01A8A0  0E04               	movlw	4
 30363  01A8A2  6E74               	movwf	3956,c	;volatile
 30364                           
 30365                           ; BSR set to: 15
 30366                           ;Power_Meter.c: 75: CCP5IE = 1;
 30367  01A8A4  84B6               	bsf	4022,2,c	;volatile
 30368                           
 30369                           ; BSR set to: 15
 30370                           ;Power_Meter.c: 76: CCP5IF = 0;
 30371  01A8A6  94B7               	bcf	4023,2,c	;volatile
 30372                           
 30373                           ; BSR set to: 15
 30374  01A8A8  0012               	return		;funcret
 30375  01A8AA                     __end_of_PM_IO_Initialization:
 30376                           	opt stack 0
 30377                           tblptru	equ	0xFF8
 30378                           tblptrh	equ	0xFF7
 30379                           tblptrl	equ	0xFF6
 30380                           tablat	equ	0xFF5
 30381                           prodh	equ	0xFF4
 30382                           prodl	equ	0xFF3
 30383                           intcon	equ	0xFF2
 30384                           postinc0	equ	0xFEE
 30385                           wreg	equ	0xFE8
 30386                           postdec1	equ	0xFE5
 30387                           fsr1h	equ	0xFE2
 30388                           fsr1l	equ	0xFE1
 30389                           indf2	equ	0xFDF
 30390                           postinc2	equ	0xFDE
 30391                           postdec2	equ	0xFDD
 30392                           fsr2h	equ	0xFDA
 30393                           fsr2l	equ	0xFD9
 30394                           status	equ	0xFD8
 30395                           
 30396 ;; *************** function _PM_ADC_Initialization *****************
 30397 ;; Defined at:
 30398 ;;		line 105 in file "Power_Meter.c"
 30399 ;; Parameters:    Size  Location     Type
 30400 ;;		None
 30401 ;; Auto vars:     Size  Location     Type
 30402 ;;		None
 30403 ;; Return value:  Size  Location     Type
 30404 ;;                  1    wreg      void 
 30405 ;; Registers used:
 30406 ;;		wreg, status,2
 30407 ;; Tracked objects:
 30408 ;;		On entry : 0/0
 30409 ;;		On exit  : 0/0
 30410 ;;		Unchanged: 0/0
 30411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30416 ;;Total ram usage:        0 bytes
 30417 ;; Hardware stack levels used:    1
 30418 ;; Hardware stack levels required when called:    3
 30419 ;; This function calls:
 30420 ;;		Nothing
 30421 ;; This function is called by:
 30422 ;;		_main
 30423 ;; This function uses a non-reentrant model
 30424 ;;
 30425                           
 30426                           	psect	text109
 30427  01B0AE                     __ptext109:
 30428                           	opt stack 0
 30429  01B0AE                     _PM_ADC_Initialization:
 30430                           	opt stack 27
 30431                           
 30432                           ;Power_Meter.c: 107: ADCON1 = 0b01000000;
 30433                           
 30434                           ; BSR set to: 15
 30435                           ;incstack = 0
 30436  01B0AE  0E40               	movlw	64
 30437  01B0B0  6EC1               	movwf	4033,c	;volatile
 30438                           
 30439                           ;Power_Meter.c: 108: ADCON2 = 0b10001101;
 30440  01B0B2  0E8D               	movlw	141
 30441  01B0B4  6EC0               	movwf	4032,c	;volatile
 30442  01B0B6  0012               	return		;funcret
 30443  01B0B8                     __end_of_PM_ADC_Initialization:
 30444                           	opt stack 0
 30445                           tblptru	equ	0xFF8
 30446                           tblptrh	equ	0xFF7
 30447                           tblptrl	equ	0xFF6
 30448                           tablat	equ	0xFF5
 30449                           prodh	equ	0xFF4
 30450                           prodl	equ	0xFF3
 30451                           intcon	equ	0xFF2
 30452                           postinc0	equ	0xFEE
 30453                           wreg	equ	0xFE8
 30454                           postdec1	equ	0xFE5
 30455                           fsr1h	equ	0xFE2
 30456                           fsr1l	equ	0xFE1
 30457                           indf2	equ	0xFDF
 30458                           postinc2	equ	0xFDE
 30459                           postdec2	equ	0xFDD
 30460                           fsr2h	equ	0xFDA
 30461                           fsr2l	equ	0xFD9
 30462                           status	equ	0xFD8
 30463                           
 30464 ;; *************** function _OSCILLATOR *****************
 30465 ;; Defined at:
 30466 ;;		line 12 in file "Initialization.c"
 30467 ;; Parameters:    Size  Location     Type
 30468 ;;		None
 30469 ;; Auto vars:     Size  Location     Type
 30470 ;;		None
 30471 ;; Return value:  Size  Location     Type
 30472 ;;                  1    wreg      void 
 30473 ;; Registers used:
 30474 ;;		wreg, status,2
 30475 ;; Tracked objects:
 30476 ;;		On entry : 0/0
 30477 ;;		On exit  : 0/0
 30478 ;;		Unchanged: 0/0
 30479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30484 ;;Total ram usage:        0 bytes
 30485 ;; Hardware stack levels used:    1
 30486 ;; Hardware stack levels required when called:    3
 30487 ;; This function calls:
 30488 ;;		Nothing
 30489 ;; This function is called by:
 30490 ;;		_main
 30491 ;; This function uses a non-reentrant model
 30492 ;;
 30493                           
 30494                           	psect	text110
 30495  01B0FC                     __ptext110:
 30496                           	opt stack 0
 30497  01B0FC                     _OSCILLATOR:
 30498                           	opt stack 27
 30499                           
 30500                           ;Initialization.c: 14: OSCCON = 0b11101110;
 30501                           
 30502                           ;incstack = 0
 30503  01B0FC  0EEE               	movlw	238
 30504  01B0FE  6ED3               	movwf	4051,c	;volatile
 30505  01B100  0012               	return		;funcret
 30506  01B102                     __end_of_OSCILLATOR:
 30507                           	opt stack 0
 30508                           tblptru	equ	0xFF8
 30509                           tblptrh	equ	0xFF7
 30510                           tblptrl	equ	0xFF6
 30511                           tablat	equ	0xFF5
 30512                           prodh	equ	0xFF4
 30513                           prodl	equ	0xFF3
 30514                           intcon	equ	0xFF2
 30515                           postinc0	equ	0xFEE
 30516                           wreg	equ	0xFE8
 30517                           postdec1	equ	0xFE5
 30518                           fsr1h	equ	0xFE2
 30519                           fsr1l	equ	0xFE1
 30520                           indf2	equ	0xFDF
 30521                           postinc2	equ	0xFDE
 30522                           postdec2	equ	0xFDD
 30523                           fsr2h	equ	0xFDA
 30524                           fsr2l	equ	0xFD9
 30525                           status	equ	0xFD8
 30526                           
 30527 ;; *************** function _IO_Initiate *****************
 30528 ;; Defined at:
 30529 ;;		line 62 in file "Initialization.c"
 30530 ;; Parameters:    Size  Location     Type
 30531 ;;		None
 30532 ;; Auto vars:     Size  Location     Type
 30533 ;;		None
 30534 ;; Return value:  Size  Location     Type
 30535 ;;                  2   24[None  ] int 
 30536 ;; Registers used:
 30537 ;;		cstack
 30538 ;; Tracked objects:
 30539 ;;		On entry : 0/0
 30540 ;;		On exit  : 0/0
 30541 ;;		Unchanged: 0/0
 30542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30547 ;;Total ram usage:        0 bytes
 30548 ;; Hardware stack levels used:    1
 30549 ;; Hardware stack levels required when called:    4
 30550 ;; This function calls:
 30551 ;;		_Generator_IO_init
 30552 ;;		_Pitch_Solenoid_init
 30553 ;;		_Power_Meter_Error_IO
 30554 ;;		_VFD_Contactor_IO_init
 30555 ;;		_VFD_Error_IO
 30556 ;; This function is called by:
 30557 ;;		_main
 30558 ;; This function uses a non-reentrant model
 30559 ;;
 30560                           
 30561                           	psect	text111
 30562  01AB92                     __ptext111:
 30563                           	opt stack 0
 30564  01AB92                     _IO_Initiate:
 30565                           	opt stack 26
 30566                           
 30567                           ;Initialization.c: 64: TRISE0 = 0;
 30568                           
 30569                           ;incstack = 0
 30570  01AB92  9096               	bcf	3990,0,c	;volatile
 30571                           
 30572                           ;Initialization.c: 65: RE0 = 0;
 30573  01AB94  9084               	bcf	3972,0,c	;volatile
 30574                           
 30575                           ;Initialization.c: 67: TRISA5 = 0;
 30576  01AB96  9A92               	bcf	3986,5,c	;volatile
 30577                           
 30578                           ;Initialization.c: 68: ANSEL4 = 0;
 30579  01AB98  010F               	movlb	15	; () banked
 30580  01AB9A  9925               	bcf	37,4,b	;volatile
 30581                           
 30582                           ;Initialization.c: 69: RA5 = 0;
 30583  01AB9C  9A80               	bcf	3968,5,c	;volatile
 30584                           
 30585                           ; BSR set to: 15
 30586                           ;Initialization.c: 71: Pitch_Solenoid_init();
 30587  01AB9E  EC73  F0D8         	call	_Pitch_Solenoid_init	;wreg free
 30588                           
 30589                           ;Initialization.c: 72: VFD_Contactor_IO_init();
 30590  01ABA2  EC5C  F0D8         	call	_VFD_Contactor_IO_init	;wreg free
 30591                           
 30592                           ;Initialization.c: 73: Generator_IO_init();
 30593  01ABA6  EC77  F0D8         	call	_Generator_IO_init	;wreg free
 30594                           
 30595                           ;Initialization.c: 74: VFD_Error_IO();
 30596  01ABAA  EC3D  F0D8         	call	_VFD_Error_IO	;wreg free
 30597                           
 30598                           ;Initialization.c: 75: Power_Meter_Error_IO();
 30599  01ABAE  EC61  F0D8         	call	_Power_Meter_Error_IO	;wreg free
 30600                           
 30601                           ;Initialization.c: 77: TRISA4 = 0;
 30602  01ABB2  9892               	bcf	3986,4,c	;volatile
 30603                           
 30604                           ;Initialization.c: 78: RA4 = 0;
 30605  01ABB4  9880               	bcf	3968,4,c	;volatile
 30606                           
 30607                           ;Initialization.c: 80: TRISE1 = 1;
 30608  01ABB6  8296               	bsf	3990,1,c	;volatile
 30609                           
 30610                           ;Initialization.c: 82: TRISE7 = 0;
 30611  01ABB8  9E96               	bcf	3990,7,c	;volatile
 30612                           
 30613                           ;Initialization.c: 83: RE7 = 0;
 30614  01ABBA  9E84               	bcf	3972,7,c	;volatile
 30615                           
 30616                           ;Initialization.c: 85: TRISC5 = 1;
 30617  01ABBC  8A94               	bsf	3988,5,c	;volatile
 30618                           
 30619                           ;Initialization.c: 87: TRISB4 = 0;
 30620  01ABBE  9893               	bcf	3987,4,c	;volatile
 30621                           
 30622                           ;Initialization.c: 88: RB4 = 0;
 30623  01ABC0  9881               	bcf	3969,4,c	;volatile
 30624                           
 30625                           ;Initialization.c: 90: TRISB5 = 0;
 30626  01ABC2  9A93               	bcf	3987,5,c	;volatile
 30627                           
 30628                           ;Initialization.c: 91: RB5 = 1;
 30629  01ABC4  8A81               	bsf	3969,5,c	;volatile
 30630                           
 30631                           ;Initialization.c: 93: TRISF1 = 0;
 30632  01ABC6  9297               	bcf	3991,1,c	;volatile
 30633                           
 30634                           ;Initialization.c: 94: ANSEL6 = 0;
 30635  01ABC8  010F               	movlb	15	; () banked
 30636  01ABCA  9D25               	bcf	37,6,b	;volatile
 30637                           
 30638                           ; BSR set to: 15
 30639                           ;Initialization.c: 95: RF1 = 0;
 30640  01ABCC  9285               	bcf	3973,1,c	;volatile
 30641                           
 30642                           ; BSR set to: 15
 30643                           ;Initialization.c: 97: TRISC0 = 1;
 30644  01ABCE  8094               	bsf	3988,0,c	;volatile
 30645                           
 30646                           ; BSR set to: 15
 30647  01ABD0  0012               	return		;funcret
 30648  01ABD2                     __end_of_IO_Initiate:
 30649                           	opt stack 0
 30650                           tblptru	equ	0xFF8
 30651                           tblptrh	equ	0xFF7
 30652                           tblptrl	equ	0xFF6
 30653                           tablat	equ	0xFF5
 30654                           prodh	equ	0xFF4
 30655                           prodl	equ	0xFF3
 30656                           intcon	equ	0xFF2
 30657                           postinc0	equ	0xFEE
 30658                           wreg	equ	0xFE8
 30659                           postdec1	equ	0xFE5
 30660                           fsr1h	equ	0xFE2
 30661                           fsr1l	equ	0xFE1
 30662                           indf2	equ	0xFDF
 30663                           postinc2	equ	0xFDE
 30664                           postdec2	equ	0xFDD
 30665                           fsr2h	equ	0xFDA
 30666                           fsr2l	equ	0xFD9
 30667                           status	equ	0xFD8
 30668                           
 30669 ;; *************** function _VFD_Error_IO *****************
 30670 ;; Defined at:
 30671 ;;		line 121 in file "Initialization.c"
 30672 ;; Parameters:    Size  Location     Type
 30673 ;;		None
 30674 ;; Auto vars:     Size  Location     Type
 30675 ;;		None
 30676 ;; Return value:  Size  Location     Type
 30677 ;;                  1    wreg      void 
 30678 ;; Registers used:
 30679 ;;		None
 30680 ;; Tracked objects:
 30681 ;;		On entry : 0/0
 30682 ;;		On exit  : 0/0
 30683 ;;		Unchanged: 0/0
 30684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30689 ;;Total ram usage:        0 bytes
 30690 ;; Hardware stack levels used:    1
 30691 ;; Hardware stack levels required when called:    3
 30692 ;; This function calls:
 30693 ;;		Nothing
 30694 ;; This function is called by:
 30695 ;;		_IO_Initiate
 30696 ;; This function uses a non-reentrant model
 30697 ;;
 30698                           
 30699                           	psect	text112
 30700  01B07A                     __ptext112:
 30701                           	opt stack 0
 30702  01B07A                     _VFD_Error_IO:
 30703                           	opt stack 26
 30704                           
 30705                           ;Initialization.c: 123: TRISE3 = 1;
 30706                           
 30707                           ; BSR set to: 15
 30708                           ;incstack = 0
 30709  01B07A  8696               	bsf	3990,3,c	;volatile
 30710                           
 30711                           ;Initialization.c: 124: TRISF3 = 0;
 30712  01B07C  9697               	bcf	3991,3,c	;volatile
 30713                           
 30714                           ;Initialization.c: 125: ANSEL8 = 0;
 30715  01B07E  010F               	movlb	15	; () banked
 30716  01B080  9124               	bcf	36,0,b	;volatile
 30717                           
 30718                           ;Initialization.c: 126: RF3 = 0;
 30719  01B082  9685               	bcf	3973,3,c	;volatile
 30720                           
 30721                           ; BSR set to: 15
 30722  01B084  0012               	return		;funcret
 30723  01B086                     __end_of_VFD_Error_IO:
 30724                           	opt stack 0
 30725                           tblptru	equ	0xFF8
 30726                           tblptrh	equ	0xFF7
 30727                           tblptrl	equ	0xFF6
 30728                           tablat	equ	0xFF5
 30729                           prodh	equ	0xFF4
 30730                           prodl	equ	0xFF3
 30731                           intcon	equ	0xFF2
 30732                           postinc0	equ	0xFEE
 30733                           wreg	equ	0xFE8
 30734                           postdec1	equ	0xFE5
 30735                           fsr1h	equ	0xFE2
 30736                           fsr1l	equ	0xFE1
 30737                           indf2	equ	0xFDF
 30738                           postinc2	equ	0xFDE
 30739                           postdec2	equ	0xFDD
 30740                           fsr2h	equ	0xFDA
 30741                           fsr2l	equ	0xFD9
 30742                           status	equ	0xFD8
 30743                           
 30744 ;; *************** function _VFD_Contactor_IO_init *****************
 30745 ;; Defined at:
 30746 ;;		line 108 in file "Initialization.c"
 30747 ;; Parameters:    Size  Location     Type
 30748 ;;		None
 30749 ;; Auto vars:     Size  Location     Type
 30750 ;;		None
 30751 ;; Return value:  Size  Location     Type
 30752 ;;                  1    wreg      void 
 30753 ;; Registers used:
 30754 ;;		None
 30755 ;; Tracked objects:
 30756 ;;		On entry : 0/0
 30757 ;;		On exit  : 0/0
 30758 ;;		Unchanged: 0/0
 30759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30764 ;;Total ram usage:        0 bytes
 30765 ;; Hardware stack levels used:    1
 30766 ;; Hardware stack levels required when called:    3
 30767 ;; This function calls:
 30768 ;;		Nothing
 30769 ;; This function is called by:
 30770 ;;		_IO_Initiate
 30771 ;; This function uses a non-reentrant model
 30772 ;;
 30773                           
 30774                           	psect	text113
 30775  01B0B8                     __ptext113:
 30776                           	opt stack 0
 30777  01B0B8                     _VFD_Contactor_IO_init:
 30778                           	opt stack 26
 30779                           
 30780                           ;Initialization.c: 110: TRISD0 = 0;
 30781                           
 30782                           ; BSR set to: 15
 30783                           ;incstack = 0
 30784  01B0B8  9095               	bcf	3989,0,c	;volatile
 30785                           
 30786                           ;Initialization.c: 111: TRISD1 = 0;
 30787  01B0BA  9295               	bcf	3989,1,c	;volatile
 30788                           
 30789                           ;Initialization.c: 112: RD0 = 0; RD1 = 0;
 30790  01B0BC  9083               	bcf	3971,0,c	;volatile
 30791  01B0BE  9283               	bcf	3971,1,c	;volatile
 30792  01B0C0  0012               	return		;funcret
 30793  01B0C2                     __end_of_VFD_Contactor_IO_init:
 30794                           	opt stack 0
 30795                           tblptru	equ	0xFF8
 30796                           tblptrh	equ	0xFF7
 30797                           tblptrl	equ	0xFF6
 30798                           tablat	equ	0xFF5
 30799                           prodh	equ	0xFF4
 30800                           prodl	equ	0xFF3
 30801                           intcon	equ	0xFF2
 30802                           postinc0	equ	0xFEE
 30803                           wreg	equ	0xFE8
 30804                           postdec1	equ	0xFE5
 30805                           fsr1h	equ	0xFE2
 30806                           fsr1l	equ	0xFE1
 30807                           indf2	equ	0xFDF
 30808                           postinc2	equ	0xFDE
 30809                           postdec2	equ	0xFDD
 30810                           fsr2h	equ	0xFDA
 30811                           fsr2l	equ	0xFD9
 30812                           status	equ	0xFD8
 30813                           
 30814 ;; *************** function _Power_Meter_Error_IO *****************
 30815 ;; Defined at:
 30816 ;;		line 128 in file "Initialization.c"
 30817 ;; Parameters:    Size  Location     Type
 30818 ;;		None
 30819 ;; Auto vars:     Size  Location     Type
 30820 ;;		None
 30821 ;; Return value:  Size  Location     Type
 30822 ;;                  1    wreg      void 
 30823 ;; Registers used:
 30824 ;;		None
 30825 ;; Tracked objects:
 30826 ;;		On entry : 0/0
 30827 ;;		On exit  : 0/0
 30828 ;;		Unchanged: 0/0
 30829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30834 ;;Total ram usage:        0 bytes
 30835 ;; Hardware stack levels used:    1
 30836 ;; Hardware stack levels required when called:    3
 30837 ;; This function calls:
 30838 ;;		Nothing
 30839 ;; This function is called by:
 30840 ;;		_IO_Initiate
 30841 ;; This function uses a non-reentrant model
 30842 ;;
 30843                           
 30844                           	psect	text114
 30845  01B0C2                     __ptext114:
 30846                           	opt stack 0
 30847  01B0C2                     _Power_Meter_Error_IO:
 30848                           	opt stack 26
 30849                           
 30850                           ;Initialization.c: 130: TRISC2 = 1;
 30851                           
 30852                           ;incstack = 0
 30853  01B0C2  8494               	bsf	3988,2,c	;volatile
 30854                           
 30855                           ;Initialization.c: 131: TRISF4 = 0;
 30856  01B0C4  9897               	bcf	3991,4,c	;volatile
 30857                           
 30858                           ;Initialization.c: 132: ANSEL9 = 0;
 30859  01B0C6  010F               	movlb	15	; () banked
 30860  01B0C8  9324               	bcf	36,1,b	;volatile
 30861                           
 30862                           ; BSR set to: 15
 30863  01B0CA  0012               	return		;funcret
 30864  01B0CC                     __end_of_Power_Meter_Error_IO:
 30865                           	opt stack 0
 30866                           tblptru	equ	0xFF8
 30867                           tblptrh	equ	0xFF7
 30868                           tblptrl	equ	0xFF6
 30869                           tablat	equ	0xFF5
 30870                           prodh	equ	0xFF4
 30871                           prodl	equ	0xFF3
 30872                           intcon	equ	0xFF2
 30873                           postinc0	equ	0xFEE
 30874                           wreg	equ	0xFE8
 30875                           postdec1	equ	0xFE5
 30876                           fsr1h	equ	0xFE2
 30877                           fsr1l	equ	0xFE1
 30878                           indf2	equ	0xFDF
 30879                           postinc2	equ	0xFDE
 30880                           postdec2	equ	0xFDD
 30881                           fsr2h	equ	0xFDA
 30882                           fsr2l	equ	0xFD9
 30883                           status	equ	0xFD8
 30884                           
 30885 ;; *************** function _Pitch_Solenoid_init *****************
 30886 ;; Defined at:
 30887 ;;		line 101 in file "Initialization.c"
 30888 ;; Parameters:    Size  Location     Type
 30889 ;;		None
 30890 ;; Auto vars:     Size  Location     Type
 30891 ;;		None
 30892 ;; Return value:  Size  Location     Type
 30893 ;;                  1    wreg      void 
 30894 ;; Registers used:
 30895 ;;		None
 30896 ;; Tracked objects:
 30897 ;;		On entry : 0/0
 30898 ;;		On exit  : 0/0
 30899 ;;		Unchanged: 0/0
 30900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30905 ;;Total ram usage:        0 bytes
 30906 ;; Hardware stack levels used:    1
 30907 ;; Hardware stack levels required when called:    3
 30908 ;; This function calls:
 30909 ;;		Nothing
 30910 ;; This function is called by:
 30911 ;;		_IO_Initiate
 30912 ;; This function uses a non-reentrant model
 30913 ;;
 30914                           
 30915                           	psect	text115
 30916  01B0E6                     __ptext115:
 30917                           	opt stack 0
 30918  01B0E6                     _Pitch_Solenoid_init:
 30919                           	opt stack 26
 30920                           
 30921                           ;Initialization.c: 103: TRISB0 = 0;
 30922                           
 30923                           ; BSR set to: 15
 30924                           ;incstack = 0
 30925  01B0E6  9093               	bcf	3987,0,c	;volatile
 30926                           
 30927                           ;Initialization.c: 104: RB0 = 0;
 30928  01B0E8  9081               	bcf	3969,0,c	;volatile
 30929                           
 30930                           ;Initialization.c: 106: TRISB1 = 1;
 30931  01B0EA  8293               	bsf	3987,1,c	;volatile
 30932  01B0EC  0012               	return		;funcret
 30933  01B0EE                     __end_of_Pitch_Solenoid_init:
 30934                           	opt stack 0
 30935                           tblptru	equ	0xFF8
 30936                           tblptrh	equ	0xFF7
 30937                           tblptrl	equ	0xFF6
 30938                           tablat	equ	0xFF5
 30939                           prodh	equ	0xFF4
 30940                           prodl	equ	0xFF3
 30941                           intcon	equ	0xFF2
 30942                           postinc0	equ	0xFEE
 30943                           wreg	equ	0xFE8
 30944                           postdec1	equ	0xFE5
 30945                           fsr1h	equ	0xFE2
 30946                           fsr1l	equ	0xFE1
 30947                           indf2	equ	0xFDF
 30948                           postinc2	equ	0xFDE
 30949                           postdec2	equ	0xFDD
 30950                           fsr2h	equ	0xFDA
 30951                           fsr2l	equ	0xFD9
 30952                           status	equ	0xFD8
 30953                           
 30954 ;; *************** function _Generator_IO_init *****************
 30955 ;; Defined at:
 30956 ;;		line 114 in file "Initialization.c"
 30957 ;; Parameters:    Size  Location     Type
 30958 ;;		None
 30959 ;; Auto vars:     Size  Location     Type
 30960 ;;		None
 30961 ;; Return value:  Size  Location     Type
 30962 ;;                  1    wreg      void 
 30963 ;; Registers used:
 30964 ;;		None
 30965 ;; Tracked objects:
 30966 ;;		On entry : 0/0
 30967 ;;		On exit  : 0/0
 30968 ;;		Unchanged: 0/0
 30969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30974 ;;Total ram usage:        0 bytes
 30975 ;; Hardware stack levels used:    1
 30976 ;; Hardware stack levels required when called:    3
 30977 ;; This function calls:
 30978 ;;		Nothing
 30979 ;; This function is called by:
 30980 ;;		_IO_Initiate
 30981 ;; This function uses a non-reentrant model
 30982 ;;
 30983                           
 30984                           	psect	text116
 30985  01B0EE                     __ptext116:
 30986                           	opt stack 0
 30987  01B0EE                     _Generator_IO_init:
 30988                           	opt stack 26
 30989                           
 30990                           ;Initialization.c: 116: TRISD2 = 0;
 30991                           
 30992                           ;incstack = 0
 30993  01B0EE  9495               	bcf	3989,2,c	;volatile
 30994                           
 30995                           ;Initialization.c: 117: RD2 = 0;
 30996  01B0F0  9483               	bcf	3971,2,c	;volatile
 30997                           
 30998                           ;Initialization.c: 119: TRISB2 = 1;
 30999  01B0F2  8493               	bsf	3987,2,c	;volatile
 31000  01B0F4  0012               	return		;funcret
 31001  01B0F6                     __end_of_Generator_IO_init:
 31002                           	opt stack 0
 31003                           tblptru	equ	0xFF8
 31004                           tblptrh	equ	0xFF7
 31005                           tblptrl	equ	0xFF6
 31006                           tablat	equ	0xFF5
 31007                           prodh	equ	0xFF4
 31008                           prodl	equ	0xFF3
 31009                           intcon	equ	0xFF2
 31010                           postinc0	equ	0xFEE
 31011                           wreg	equ	0xFE8
 31012                           postdec1	equ	0xFE5
 31013                           fsr1h	equ	0xFE2
 31014                           fsr1l	equ	0xFE1
 31015                           indf2	equ	0xFDF
 31016                           postinc2	equ	0xFDE
 31017                           postdec2	equ	0xFDD
 31018                           fsr2h	equ	0xFDA
 31019                           fsr2l	equ	0xFD9
 31020                           status	equ	0xFD8
 31021                           
 31022 ;; *************** function _Generator_RPM_Initiate *****************
 31023 ;; Defined at:
 31024 ;;		line 41 in file "Initialization.c"
 31025 ;; Parameters:    Size  Location     Type
 31026 ;;		None
 31027 ;; Auto vars:     Size  Location     Type
 31028 ;;		None
 31029 ;; Return value:  Size  Location     Type
 31030 ;;                  2   16[None  ] int 
 31031 ;; Registers used:
 31032 ;;		wreg, status,2
 31033 ;; Tracked objects:
 31034 ;;		On entry : 0/0
 31035 ;;		On exit  : 0/0
 31036 ;;		Unchanged: 0/0
 31037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31042 ;;Total ram usage:        0 bytes
 31043 ;; Hardware stack levels used:    1
 31044 ;; Hardware stack levels required when called:    3
 31045 ;; This function calls:
 31046 ;;		Nothing
 31047 ;; This function is called by:
 31048 ;;		_main
 31049 ;; This function uses a non-reentrant model
 31050 ;;
 31051                           
 31052                           	psect	text117
 31053  01B048                     __ptext117:
 31054                           	opt stack 0
 31055  01B048                     _Generator_RPM_Initiate:
 31056                           	opt stack 27
 31057                           
 31058                           ;Initialization.c: 43: TRISEbits.TRISE4=1;
 31059                           
 31060                           ;incstack = 0
 31061  01B048  8896               	bsf	3990,4,c	;volatile
 31062                           
 31063                           ;Initialization.c: 44: CCP8CON = 0x06;
 31064  01B04A  0E06               	movlw	6
 31065  01B04C  010F               	movlb	15	; () banked
 31066  01B04E  6F46               	movwf	70,b	;volatile
 31067                           
 31068                           ; BSR set to: 15
 31069                           ;Initialization.c: 45: CCP8IE = 1;
 31070  01B050  8AB6               	bsf	4022,5,c	;volatile
 31071                           
 31072                           ; BSR set to: 15
 31073                           ;Initialization.c: 46: CCP8IF = 0;
 31074  01B052  9AB7               	bcf	4023,5,c	;volatile
 31075                           
 31076                           ; BSR set to: 15
 31077  01B054  0012               	return		;funcret
 31078  01B056                     __end_of_Generator_RPM_Initiate:
 31079                           	opt stack 0
 31080                           tblptru	equ	0xFF8
 31081                           tblptrh	equ	0xFF7
 31082                           tblptrl	equ	0xFF6
 31083                           tablat	equ	0xFF5
 31084                           prodh	equ	0xFF4
 31085                           prodl	equ	0xFF3
 31086                           intcon	equ	0xFF2
 31087                           postinc0	equ	0xFEE
 31088                           wreg	equ	0xFE8
 31089                           postdec1	equ	0xFE5
 31090                           fsr1h	equ	0xFE2
 31091                           fsr1l	equ	0xFE1
 31092                           indf2	equ	0xFDF
 31093                           postinc2	equ	0xFDE
 31094                           postdec2	equ	0xFDD
 31095                           fsr2h	equ	0xFDA
 31096                           fsr2l	equ	0xFD9
 31097                           status	equ	0xFD8
 31098                           
 31099 ;; *************** function _Generator_RPM_Cal *****************
 31100 ;; Defined at:
 31101 ;;		line 100 in file "RPM_Measurement.c"
 31102 ;; Parameters:    Size  Location     Type
 31103 ;;		None
 31104 ;; Auto vars:     Size  Location     Type
 31105 ;;		None
 31106 ;; Return value:  Size  Location     Type
 31107 ;;                  1    wreg      void 
 31108 ;; Registers used:
 31109 ;;		wreg, status,2, status,0, cstack
 31110 ;; Tracked objects:
 31111 ;;		On entry : 0/0
 31112 ;;		On exit  : 0/0
 31113 ;;		Unchanged: 0/0
 31114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31119 ;;Total ram usage:        2 bytes
 31120 ;; Hardware stack levels used:    1
 31121 ;; Hardware stack levels required when called:    5
 31122 ;; This function calls:
 31123 ;;		___ftadd
 31124 ;;		___ftdiv
 31125 ;;		___ftge
 31126 ;;		___ftmul
 31127 ;;		___fttol
 31128 ;;		___lwtoft
 31129 ;; This function is called by:
 31130 ;;		_main
 31131 ;; This function uses a non-reentrant model
 31132 ;;
 31133                           
 31134                           	psect	text118
 31135  014E34                     __ptext118:
 31136                           	opt stack 0
 31137  014E34                     _Generator_RPM_Cal:
 31138                           	opt stack 25
 31139                           
 31140                           ;RPM_Measurement.c: 102: CCP8IE = 0;
 31141                           
 31142                           ; BSR set to: 15
 31143                           ;incstack = 0
 31144  014E34  9AB6               	bcf	4022,5,c	;volatile
 31145                           
 31146                           ;RPM_Measurement.c: 103: if(GRPM_Cap_New > GRPM_Cap_Old)
 31147  014E36  0101               	movlb	1	; () banked
 31148  014E38  5122               	movf	_GRPM_Cap_New& (0+255),w,b
 31149  014E3A  0101               	movlb	1	; () banked
 31150  014E3C  5D24               	subwf	_GRPM_Cap_Old& (0+255),w,b
 31151  014E3E  0101               	movlb	1	; () banked
 31152  014E40  5123               	movf	(_GRPM_Cap_New+1)& (0+255),w,b
 31153  014E42  0101               	movlb	1	; () banked
 31154  014E44  5925               	subwfb	(_GRPM_Cap_Old+1)& (0+255),w,b
 31155  014E46  B0D8               	btfsc	status,0,c
 31156  014E48  D02F               	goto	l22757
 31157                           
 31158                           ; BSR set to: 1
 31159                           ;RPM_Measurement.c: 104: {
 31160                           ;RPM_Measurement.c: 105: GRPM_Pulse_width = (GRPM_Cap_New - GRPM_Cap_Old + 1) ;
 31161  014E4A  C124  F0B4         	movff	_GRPM_Cap_Old,??_Generator_RPM_Cal
 31162  014E4E  C125  F0B5         	movff	_GRPM_Cap_Old+1,??_Generator_RPM_Cal+1
 31163  014E52  0100               	movlb	0	; () banked
 31164  014E54  1FB4               	comf	??_Generator_RPM_Cal& (0+255),f,b
 31165  014E56  1FB5               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31166  014E58  4BB4               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 31167  014E5A  2BB5               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31168  014E5C  0101               	movlb	1	; () banked
 31169  014E5E  5122               	movf	_GRPM_Cap_New& (0+255),w,b
 31170  014E60  0100               	movlb	0	; () banked
 31171  014E62  27B4               	addwf	??_Generator_RPM_Cal& (0+255),f,b
 31172  014E64  0101               	movlb	1	; () banked
 31173  014E66  5123               	movf	(_GRPM_Cap_New+1)& (0+255),w,b
 31174  014E68  0100               	movlb	0	; () banked
 31175  014E6A  23B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31176  014E6C  0E01               	movlw	1
 31177  014E6E  0100               	movlb	0	; () banked
 31178  014E70  25B4               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 31179  014E72  0102               	movlb	2	; () banked
 31180  014E74  6FF4               	movwf	_GRPM_Pulse_width& (0+255),b
 31181  014E76  0E00               	movlw	0
 31182  014E78  0100               	movlb	0	; () banked
 31183  014E7A  21B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 31184  014E7C  0102               	movlb	2	; () banked
 31185  014E7E  6FF5               	movwf	(_GRPM_Pulse_width+1)& (0+255),b
 31186                           
 31187                           ;RPM_Measurement.c: 106: GRPM_Counter = (Timer1_OF_counter_Generator_New - Timer1_OF_cou
      +                          nter_Generator_Old);
 31188  014E80  C2A0  F0B4         	movff	_Timer1_OF_counter_Generator_Old,??_Generator_RPM_Cal
 31189  014E84  C2A1  F0B5         	movff	_Timer1_OF_counter_Generator_Old+1,??_Generator_RPM_Cal+1
 31190  014E88  0100               	movlb	0	; () banked
 31191  014E8A  1FB4               	comf	??_Generator_RPM_Cal& (0+255),f,b
 31192  014E8C  1FB5               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31193  014E8E  4BB4               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 31194  014E90  2BB5               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31195  014E92  0101               	movlb	1	; () banked
 31196  014E94  5134               	movf	_Timer1_OF_counter_Generator_New& (0+255),w,b
 31197  014E96  0100               	movlb	0	; () banked
 31198  014E98  25B4               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 31199  014E9A  0102               	movlb	2	; () banked
 31200  014E9C  6F86               	movwf	_GRPM_Counter& (0+255),b
 31201  014E9E  0101               	movlb	1	; () banked
 31202  014EA0  5135               	movf	(_Timer1_OF_counter_Generator_New+1)& (0+255),w,b
 31203  014EA2  0100               	movlb	0	; () banked
 31204  014EA4  21B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 31205  014EA6  D038               	goto	L14
 31206  014EA8                     l22757:
 31207                           
 31208                           ;RPM_Measurement.c: 108: else
 31209                           ;RPM_Measurement.c: 109: {
 31210                           ;RPM_Measurement.c: 110: GRPM_Pulse_width = (GRPM_Cap_New - GRPM_Cap_Old + 1) + 65536;
 31211  014EA8  C124  F0B4         	movff	_GRPM_Cap_Old,??_Generator_RPM_Cal
 31212  014EAC  C125  F0B5         	movff	_GRPM_Cap_Old+1,??_Generator_RPM_Cal+1
 31213  014EB0  0100               	movlb	0	; () banked
 31214  014EB2  1FB4               	comf	??_Generator_RPM_Cal& (0+255),f,b
 31215  014EB4  1FB5               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31216  014EB6  4BB4               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 31217  014EB8  2BB5               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31218  014EBA  0101               	movlb	1	; () banked
 31219  014EBC  5122               	movf	_GRPM_Cap_New& (0+255),w,b
 31220  014EBE  0100               	movlb	0	; () banked
 31221  014EC0  27B4               	addwf	??_Generator_RPM_Cal& (0+255),f,b
 31222  014EC2  0101               	movlb	1	; () banked
 31223  014EC4  5123               	movf	(_GRPM_Cap_New+1)& (0+255),w,b
 31224  014EC6  0100               	movlb	0	; () banked
 31225  014EC8  23B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31226  014ECA  0E01               	movlw	1
 31227  014ECC  0100               	movlb	0	; () banked
 31228  014ECE  25B4               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 31229  014ED0  0102               	movlb	2	; () banked
 31230  014ED2  6FF4               	movwf	_GRPM_Pulse_width& (0+255),b
 31231  014ED4  0E00               	movlw	0
 31232  014ED6  0100               	movlb	0	; () banked
 31233  014ED8  21B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 31234  014EDA  0102               	movlb	2	; () banked
 31235  014EDC  6FF5               	movwf	(_GRPM_Pulse_width+1)& (0+255),b
 31236                           
 31237                           ;RPM_Measurement.c: 111: GRPM_Counter = (Timer1_OF_counter_Generator_New - Timer1_OF_cou
      +                          nter_Generator_Old);
 31238  014EDE  C2A0  F0B4         	movff	_Timer1_OF_counter_Generator_Old,??_Generator_RPM_Cal
 31239  014EE2  C2A1  F0B5         	movff	_Timer1_OF_counter_Generator_Old+1,??_Generator_RPM_Cal+1
 31240  014EE6  0100               	movlb	0	; () banked
 31241  014EE8  1FB4               	comf	??_Generator_RPM_Cal& (0+255),f,b
 31242  014EEA  1FB5               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31243  014EEC  4BB4               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 31244  014EEE  2BB5               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 31245  014EF0  0101               	movlb	1	; () banked
 31246  014EF2  5134               	movf	_Timer1_OF_counter_Generator_New& (0+255),w,b
 31247  014EF4  0100               	movlb	0	; () banked
 31248  014EF6  25B4               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 31249  014EF8  0102               	movlb	2	; () banked
 31250  014EFA  6F86               	movwf	_GRPM_Counter& (0+255),b
 31251  014EFC  0101               	movlb	1	; () banked
 31252  014EFE  5135               	movf	(_Timer1_OF_counter_Generator_New+1)& (0+255),w,b
 31253  014F00  0100               	movlb	0	; () banked
 31254  014F02  21B5               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 31255  014F04  0102               	movlb	2	; () banked
 31256  014F06  6F87               	movwf	(_GRPM_Counter+1)& (0+255),b
 31257                           
 31258                           ;RPM_Measurement.c: 112: GRPM_Counter = GRPM_Counter -1;
 31259  014F08  0EFF               	movlw	255
 31260  014F0A  0102               	movlb	2	; () banked
 31261  014F0C  2586               	addwf	_GRPM_Counter& (0+255),w,b
 31262  014F0E  0102               	movlb	2	; () banked
 31263  014F10  6F86               	movwf	_GRPM_Counter& (0+255),b
 31264  014F12  0EFF               	movlw	255
 31265  014F14  0102               	movlb	2	; () banked
 31266  014F16  2187               	addwfc	(_GRPM_Counter+1)& (0+255),w,b
 31267  014F18                     L14:
 31268  014F18  0102               	movlb	2	; () banked
 31269  014F1A  6F87               	movwf	(_GRPM_Counter+1)& (0+255),b
 31270                           
 31271                           ; BSR set to: 2
 31272                           ;RPM_Measurement.c: 113: }
 31273                           ;RPM_Measurement.c: 114: GRPM_Time = (0.000004 * GRPM_Pulse_width);
 31274                           
 31275                           ; BSR set to: 2
 31276  014F1C  C2F4  F068         	movff	_GRPM_Pulse_width,___lwtoft@c
 31277  014F20  C2F5  F069         	movff	_GRPM_Pulse_width+1,___lwtoft@c+1
 31278  014F24  EC6E  F0D7         	call	___lwtoft	;wreg free
 31279  014F28  C068  F074         	movff	?___lwtoft,___ftmul@f1
 31280  014F2C  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
 31281  014F30  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
 31282  014F34  0E38               	movlw	56
 31283  014F36  0100               	movlb	0	; () banked
 31284  014F38  6F77               	movwf	___ftmul@f2& (0+255),b
 31285  014F3A  0E86               	movlw	134
 31286  014F3C  0100               	movlb	0	; () banked
 31287  014F3E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31288  014F40  0E36               	movlw	54
 31289  014F42  0100               	movlb	0	; () banked
 31290  014F44  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31291  014F46  ECA4  F0C0         	call	___ftmul	;wreg free
 31292  014F4A  C074  F49F         	movff	?___ftmul,_GRPM_Time
 31293  014F4E  C075  F4A0         	movff	?___ftmul+1,_GRPM_Time+1
 31294  014F52  C076  F4A1         	movff	?___ftmul+2,_GRPM_Time+2
 31295                           
 31296                           ;RPM_Measurement.c: 116: GRPM_Time_1 = GRPM_Time + (0.262 * GRPM_Counter);
 31297  014F56  0E25               	movlw	37
 31298  014F58  0100               	movlb	0	; () banked
 31299  014F5A  6F77               	movwf	___ftmul@f2& (0+255),b
 31300  014F5C  0E86               	movlw	134
 31301  014F5E  0100               	movlb	0	; () banked
 31302  014F60  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31303  014F62  0E3E               	movlw	62
 31304  014F64  0100               	movlb	0	; () banked
 31305  014F66  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31306  014F68  C286  F068         	movff	_GRPM_Counter,___lwtoft@c
 31307  014F6C  C287  F069         	movff	_GRPM_Counter+1,___lwtoft@c+1
 31308  014F70  EC6E  F0D7         	call	___lwtoft	;wreg free
 31309  014F74  C068  F074         	movff	?___lwtoft,___ftmul@f1
 31310  014F78  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
 31311  014F7C  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
 31312  014F80  ECA4  F0C0         	call	___ftmul	;wreg free
 31313  014F84  C074  F08D         	movff	?___ftmul,___ftadd@f1
 31314  014F88  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 31315  014F8C  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 31316  014F90  C49F  F090         	movff	_GRPM_Time,___ftadd@f2
 31317  014F94  C4A0  F091         	movff	_GRPM_Time+1,___ftadd@f2+1
 31318  014F98  C4A1  F092         	movff	_GRPM_Time+2,___ftadd@f2+2
 31319  014F9C  EC69  F0B2         	call	___ftadd	;wreg free
 31320  014FA0  C08D  F2E8         	movff	?___ftadd,_GRPM_Time_1
 31321  014FA4  C08E  F2E9         	movff	?___ftadd+1,_GRPM_Time_1+1
 31322  014FA8  C08F  F2EA         	movff	?___ftadd+2,_GRPM_Time_1+2
 31323                           
 31324                           ;RPM_Measurement.c: 118: GRPM_Time_1 = GRPM_Time_1 / 4;
 31325  014FAC  C2E8  F0A5         	movff	_GRPM_Time_1,___ftdiv@f1
 31326  014FB0  C2E9  F0A6         	movff	_GRPM_Time_1+1,___ftdiv@f1+1
 31327  014FB4  C2EA  F0A7         	movff	_GRPM_Time_1+2,___ftdiv@f1+2
 31328  014FB8  0E00               	movlw	0
 31329  014FBA  0100               	movlb	0	; () banked
 31330  014FBC  6FA8               	movwf	___ftdiv@f2& (0+255),b
 31331  014FBE  0E80               	movlw	128
 31332  014FC0  0100               	movlb	0	; () banked
 31333  014FC2  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 31334  014FC4  0E40               	movlw	64
 31335  014FC6  0100               	movlb	0	; () banked
 31336  014FC8  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 31337  014FCA  EC53  F0C1         	call	___ftdiv	;wreg free
 31338  014FCE  C0A5  F2E8         	movff	?___ftdiv,_GRPM_Time_1
 31339  014FD2  C0A6  F2E9         	movff	?___ftdiv+1,_GRPM_Time_1+1
 31340  014FD6  C0A7  F2EA         	movff	?___ftdiv+2,_GRPM_Time_1+2
 31341                           
 31342                           ;RPM_Measurement.c: 120: GRPM_Frequency = 1/GRPM_Time_1;
 31343  014FDA  0E00               	movlw	0
 31344  014FDC  0100               	movlb	0	; () banked
 31345  014FDE  6FA5               	movwf	___ftdiv@f1& (0+255),b
 31346  014FE0  0E80               	movlw	128
 31347  014FE2  0100               	movlb	0	; () banked
 31348  014FE4  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
 31349  014FE6  0E3F               	movlw	63
 31350  014FE8  0100               	movlb	0	; () banked
 31351  014FEA  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
 31352  014FEC  C2E8  F0A8         	movff	_GRPM_Time_1,___ftdiv@f2
 31353  014FF0  C2E9  F0A9         	movff	_GRPM_Time_1+1,___ftdiv@f2+1
 31354  014FF4  C2EA  F0AA         	movff	_GRPM_Time_1+2,___ftdiv@f2+2
 31355  014FF8  EC53  F0C1         	call	___ftdiv	;wreg free
 31356  014FFC  C0A5  F4E1         	movff	?___ftdiv,_GRPM_Frequency
 31357  015000  C0A6  F4E2         	movff	?___ftdiv+1,_GRPM_Frequency+1
 31358  015004  C0A7  F4E3         	movff	?___ftdiv+2,_GRPM_Frequency+2
 31359                           
 31360                           ;RPM_Measurement.c: 122: if(G_RPM_counter < (2))
 31361  015008  0E02               	movlw	2
 31362  01500A  0100               	movlb	0	; () banked
 31363  01500C  61E2               	cpfslt	_G_RPM_counter& (0+255),b
 31364  01500E  D002               	goto	l22769
 31365                           
 31366                           ; BSR set to: 0
 31367                           ;RPM_Measurement.c: 123: {
 31368                           ;RPM_Measurement.c: 124: G_RPM_counter++;
 31369  015010  0100               	movlb	0	; () banked
 31370  015012  2BE2               	incf	_G_RPM_counter& (0+255),f,b
 31371  015014                     l22769:
 31372                           
 31373                           ; BSR set to: 0
 31374                           ;RPM_Measurement.c: 125: }
 31375                           ;RPM_Measurement.c: 126: if(G_RPM_counter == (2))
 31376  015014  0E02               	movlw	2
 31377  015016  0100               	movlb	0	; () banked
 31378  015018  19E2               	xorwf	_G_RPM_counter& (0+255),w,b
 31379  01501A  A4D8               	btfss	status,2,c
 31380  01501C  D02E               	goto	l22775
 31381                           
 31382                           ; BSR set to: 0
 31383                           ;RPM_Measurement.c: 127: {
 31384                           ;RPM_Measurement.c: 128: Generator_RPM_Old = Generator_RPM_New;
 31385  01501E  C106  F109         	movff	_Generator_RPM_New,_Generator_RPM_Old
 31386  015022  C107  F10A         	movff	_Generator_RPM_New+1,_Generator_RPM_Old+1
 31387  015026  C108  F10B         	movff	_Generator_RPM_New+2,_Generator_RPM_Old+2
 31388                           
 31389                           ; BSR set to: 0
 31390                           ;RPM_Measurement.c: 129: Generator_RPM_New = ((60 * GRPM_Frequency) / (2));
 31391  01502A  0E00               	movlw	0
 31392  01502C  0100               	movlb	0	; () banked
 31393  01502E  6F77               	movwf	___ftmul@f2& (0+255),b
 31394  015030  0E70               	movlw	112
 31395  015032  0100               	movlb	0	; () banked
 31396  015034  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31397  015036  0E42               	movlw	66
 31398  015038  0100               	movlb	0	; () banked
 31399  01503A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31400  01503C  C4E1  F074         	movff	_GRPM_Frequency,___ftmul@f1
 31401  015040  C4E2  F075         	movff	_GRPM_Frequency+1,___ftmul@f1+1
 31402  015044  C4E3  F076         	movff	_GRPM_Frequency+2,___ftmul@f1+2
 31403  015048  ECA4  F0C0         	call	___ftmul	;wreg free
 31404  01504C  C074  F0A5         	movff	?___ftmul,___ftdiv@f1
 31405  015050  C075  F0A6         	movff	?___ftmul+1,___ftdiv@f1+1
 31406  015054  C076  F0A7         	movff	?___ftmul+2,___ftdiv@f1+2
 31407  015058  0E00               	movlw	0
 31408  01505A  0100               	movlb	0	; () banked
 31409  01505C  6FA8               	movwf	___ftdiv@f2& (0+255),b
 31410  01505E  0E00               	movlw	0
 31411  015060  0100               	movlb	0	; () banked
 31412  015062  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 31413  015064  0E40               	movlw	64
 31414  015066  0100               	movlb	0	; () banked
 31415  015068  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 31416  01506A  EC53  F0C1         	call	___ftdiv	;wreg free
 31417  01506E  C0A5  F106         	movff	?___ftdiv,_Generator_RPM_New
 31418  015072  C0A6  F107         	movff	?___ftdiv+1,_Generator_RPM_New+1
 31419  015076  C0A7  F108         	movff	?___ftdiv+2,_Generator_RPM_New+2
 31420  01507A                     l22775:
 31421                           
 31422                           ;RPM_Measurement.c: 131: }
 31423                           ;RPM_Measurement.c: 133: if(Turbine_state == RUNNING_STATE)
 31424  01507A  0E02               	movlw	2
 31425  01507C  0100               	movlb	0	; () banked
 31426  01507E  19F0               	xorwf	_Turbine_state& (0+255),w,b
 31427  015080  A4D8               	btfss	status,2,c
 31428  015082  D051               	goto	l3780
 31429                           
 31430                           ; BSR set to: 0
 31431                           ;RPM_Measurement.c: 134: {
 31432                           ;RPM_Measurement.c: 135: if ( (Generator_RPM_Old > (Generator_RPM_New * 0.8)) && (Genera
      +                          tor_RPM_Old < (Generator_RPM_New * 1.2)) )
 31433  015084  0ECD               	movlw	205
 31434  015086  0100               	movlb	0	; () banked
 31435  015088  6F77               	movwf	___ftmul@f2& (0+255),b
 31436  01508A  0E4C               	movlw	76
 31437  01508C  0100               	movlb	0	; () banked
 31438  01508E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31439  015090  0E3F               	movlw	63
 31440  015092  0100               	movlb	0	; () banked
 31441  015094  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31442  015096  C106  F074         	movff	_Generator_RPM_New,___ftmul@f1
 31443  01509A  C107  F075         	movff	_Generator_RPM_New+1,___ftmul@f1+1
 31444  01509E  C108  F076         	movff	_Generator_RPM_New+2,___ftmul@f1+2
 31445  0150A2  ECA4  F0C0         	call	___ftmul	;wreg free
 31446  0150A6  C074  F099         	movff	?___ftmul,___ftge@ff1
 31447  0150AA  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
 31448  0150AE  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
 31449  0150B2  C109  F09C         	movff	_Generator_RPM_Old,___ftge@ff2
 31450  0150B6  C10A  F09D         	movff	_Generator_RPM_Old+1,___ftge@ff2+1
 31451  0150BA  C10B  F09E         	movff	_Generator_RPM_Old+2,___ftge@ff2+2
 31452  0150BE  ECEB  F0CA         	call	___ftge	;wreg free
 31453  0150C2  0100               	movlb	0	; () banked
 31454  0150C4  B0D8               	btfsc	status,0,c
 31455  0150C6  D022               	goto	l3781
 31456                           
 31457                           ; BSR set to: 0
 31458  0150C8  C109  F099         	movff	_Generator_RPM_Old,___ftge@ff1
 31459  0150CC  C10A  F09A         	movff	_Generator_RPM_Old+1,___ftge@ff1+1
 31460  0150D0  C10B  F09B         	movff	_Generator_RPM_Old+2,___ftge@ff1+2
 31461  0150D4  0E9A               	movlw	154
 31462  0150D6  0100               	movlb	0	; () banked
 31463  0150D8  6F77               	movwf	___ftmul@f2& (0+255),b
 31464  0150DA  0E99               	movlw	153
 31465  0150DC  0100               	movlb	0	; () banked
 31466  0150DE  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31467  0150E0  0E3F               	movlw	63
 31468  0150E2  0100               	movlb	0	; () banked
 31469  0150E4  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31470  0150E6  C106  F074         	movff	_Generator_RPM_New,___ftmul@f1
 31471  0150EA  C107  F075         	movff	_Generator_RPM_New+1,___ftmul@f1+1
 31472  0150EE  C108  F076         	movff	_Generator_RPM_New+2,___ftmul@f1+2
 31473  0150F2  ECA4  F0C0         	call	___ftmul	;wreg free
 31474  0150F6  C074  F09C         	movff	?___ftmul,___ftge@ff2
 31475  0150FA  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
 31476  0150FE  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
 31477  015102  ECEB  F0CA         	call	___ftge	;wreg free
 31478  015106  0100               	movlb	0	; () banked
 31479  015108  A0D8               	btfss	status,0,c
 31480  01510A  D00D               	goto	l3780
 31481  01510C                     l3781:
 31482                           
 31483                           ; BSR set to: 0
 31484                           ;RPM_Measurement.c: 139: else
 31485                           ;RPM_Measurement.c: 140: {
 31486                           ;RPM_Measurement.c: 141: Generator_RPM_FLT = Generator_RPM_Old;
 31487  01510C  C109  F004         	movff	_Generator_RPM_Old,_Generator_RPM_FLT
 31488  015110  C10A  F005         	movff	_Generator_RPM_Old+1,_Generator_RPM_FLT+1
 31489  015114  C10B  F006         	movff	_Generator_RPM_Old+2,_Generator_RPM_FLT+2
 31490                           
 31491                           ;RPM_Measurement.c: 142: Generator_RPM_New = Generator_RPM_Old;
 31492  015118  C109  F106         	movff	_Generator_RPM_Old,_Generator_RPM_New
 31493  01511C  C10A  F107         	movff	_Generator_RPM_Old+1,_Generator_RPM_New+1
 31494  015120  C10B  F108         	movff	_Generator_RPM_Old+2,_Generator_RPM_New+2
 31495                           
 31496                           ; BSR set to: 0
 31497                           ;RPM_Measurement.c: 143: }
 31498                           ;RPM_Measurement.c: 144: }
 31499  015124  D006               	goto	l22783
 31500  015126                     l3780:
 31501                           
 31502                           ; BSR set to: 0
 31503                           ;RPM_Measurement.c: 145: else
 31504                           ;RPM_Measurement.c: 146: {
 31505                           ;RPM_Measurement.c: 147: Generator_RPM_FLT = Generator_RPM_New;
 31506  015126  C106  F004         	movff	_Generator_RPM_New,_Generator_RPM_FLT
 31507  01512A  C107  F005         	movff	_Generator_RPM_New+1,_Generator_RPM_FLT+1
 31508  01512E  C108  F006         	movff	_Generator_RPM_New+2,_Generator_RPM_FLT+2
 31509  015132                     l22783:
 31510                           
 31511                           ; BSR set to: 0
 31512                           ;RPM_Measurement.c: 148: }
 31513                           ;RPM_Measurement.c: 149: Generator_RPM_INT = Generator_RPM_FLT;
 31514  015132  C004  F08A         	movff	_Generator_RPM_FLT,___fttol@f1
 31515  015136  C005  F08B         	movff	_Generator_RPM_FLT+1,___fttol@f1+1
 31516  01513A  C006  F08C         	movff	_Generator_RPM_FLT+2,___fttol@f1+2
 31517  01513E  ECF9  F0C1         	call	___fttol	;wreg free
 31518  015142  C08A  F288         	movff	?___fttol,_Generator_RPM_INT
 31519  015146  C08B  F289         	movff	?___fttol+1,_Generator_RPM_INT+1
 31520                           
 31521                           ;RPM_Measurement.c: 152: Timer1_OF_counter_Generator = 0;
 31522  01514A  0E00               	movlw	0
 31523  01514C  0103               	movlb	3	; () banked
 31524  01514E  6FF3               	movwf	(_Timer1_OF_counter_Generator+1)& (0+255),b
 31525  015150  0E00               	movlw	0
 31526  015152  6FF2               	movwf	_Timer1_OF_counter_Generator& (0+255),b
 31527                           
 31528                           ; BSR set to: 3
 31529                           ;RPM_Measurement.c: 153: GRPM_Pulse_width = 0;
 31530  015154  0E00               	movlw	0
 31531  015156  0102               	movlb	2	; () banked
 31532  015158  6FF5               	movwf	(_GRPM_Pulse_width+1)& (0+255),b
 31533  01515A  0E00               	movlw	0
 31534  01515C  6FF4               	movwf	_GRPM_Pulse_width& (0+255),b
 31535                           
 31536                           ; BSR set to: 2
 31537                           ;RPM_Measurement.c: 154: GRPM_Frequency = 0;
 31538  01515E  0E00               	movlw	0
 31539  015160  0104               	movlb	4	; () banked
 31540  015162  6FE1               	movwf	_GRPM_Frequency& (0+255),b
 31541  015164  0E00               	movlw	0
 31542  015166  0104               	movlb	4	; () banked
 31543  015168  6FE2               	movwf	(_GRPM_Frequency+1)& (0+255),b
 31544  01516A  0E00               	movlw	0
 31545  01516C  0104               	movlb	4	; () banked
 31546  01516E  6FE3               	movwf	(_GRPM_Frequency+2)& (0+255),b
 31547                           
 31548                           ; BSR set to: 4
 31549                           ;RPM_Measurement.c: 155: GRPM_Time = 0;
 31550  015170  0E00               	movlw	0
 31551  015172  0104               	movlb	4	; () banked
 31552  015174  6F9F               	movwf	_GRPM_Time& (0+255),b
 31553  015176  0E00               	movlw	0
 31554  015178  0104               	movlb	4	; () banked
 31555  01517A  6FA0               	movwf	(_GRPM_Time+1)& (0+255),b
 31556  01517C  0E00               	movlw	0
 31557  01517E  0104               	movlb	4	; () banked
 31558  015180  6FA1               	movwf	(_GRPM_Time+2)& (0+255),b
 31559                           
 31560                           ; BSR set to: 4
 31561                           ;RPM_Measurement.c: 156: GRPM_Time_1 = 0;
 31562  015182  0E00               	movlw	0
 31563  015184  0102               	movlb	2	; () banked
 31564  015186  6FE8               	movwf	_GRPM_Time_1& (0+255),b
 31565  015188  0E00               	movlw	0
 31566  01518A  0102               	movlb	2	; () banked
 31567  01518C  6FE9               	movwf	(_GRPM_Time_1+1)& (0+255),b
 31568  01518E  0E00               	movlw	0
 31569  015190  0102               	movlb	2	; () banked
 31570  015192  6FEA               	movwf	(_GRPM_Time_1+2)& (0+255),b
 31571                           
 31572                           ; BSR set to: 2
 31573                           ;RPM_Measurement.c: 158: CCP8IE = 1;
 31574  015194  8AB6               	bsf	4022,5,c	;volatile
 31575                           
 31576                           ; BSR set to: 2
 31577                           ;RPM_Measurement.c: 159: CCP8IF = 0;
 31578  015196  9AB7               	bcf	4023,5,c	;volatile
 31579                           
 31580                           ; BSR set to: 2
 31581  015198  0012               	return		;funcret
 31582  01519A                     __end_of_Generator_RPM_Cal:
 31583                           	opt stack 0
 31584                           tblptru	equ	0xFF8
 31585                           tblptrh	equ	0xFF7
 31586                           tblptrl	equ	0xFF6
 31587                           tablat	equ	0xFF5
 31588                           prodh	equ	0xFF4
 31589                           prodl	equ	0xFF3
 31590                           intcon	equ	0xFF2
 31591                           postinc0	equ	0xFEE
 31592                           wreg	equ	0xFE8
 31593                           postdec1	equ	0xFE5
 31594                           fsr1h	equ	0xFE2
 31595                           fsr1l	equ	0xFE1
 31596                           indf2	equ	0xFDF
 31597                           postinc2	equ	0xFDE
 31598                           postdec2	equ	0xFDD
 31599                           fsr2h	equ	0xFDA
 31600                           fsr2l	equ	0xFD9
 31601                           status	equ	0xFD8
 31602                           
 31603 ;; *************** function ___lwtoft *****************
 31604 ;; Defined at:
 31605 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
 31606 ;; Parameters:    Size  Location     Type
 31607 ;;  c               2    8[BANK0 ] unsigned int 
 31608 ;; Auto vars:     Size  Location     Type
 31609 ;;		None
 31610 ;; Return value:  Size  Location     Type
 31611 ;;                  3    8[BANK0 ] float 
 31612 ;; Registers used:
 31613 ;;		wreg, status,2, status,0, cstack
 31614 ;; Tracked objects:
 31615 ;;		On entry : 0/0
 31616 ;;		On exit  : 0/0
 31617 ;;		Unchanged: 0/0
 31618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31619 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31622 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31623 ;;Total ram usage:        3 bytes
 31624 ;; Hardware stack levels used:    1
 31625 ;; Hardware stack levels required when called:    4
 31626 ;; This function calls:
 31627 ;;		___ftpack
 31628 ;; This function is called by:
 31629 ;;		_Turbine_RPM_Cal
 31630 ;;		_Generator_RPM_Cal
 31631 ;;		_Wind_Speed_Cal
 31632 ;;		_Wind_Speed_2_Cal
 31633 ;;		_VFD_RS485_Data
 31634 ;;		_Temp_Read
 31635 ;;		_Volt_Curr_Read
 31636 ;; This function uses a non-reentrant model
 31637 ;;
 31638                           
 31639                           	psect	text119
 31640  01AEDC                     __ptext119:
 31641                           	opt stack 0
 31642  01AEDC                     ___lwtoft:
 31643                           	opt stack 25
 31644                           
 31645                           ; BSR set to: 2
 31646                           ;incstack = 0
 31647  01AEDC  C068  F060         	movff	___lwtoft@c,___ftpack@arg
 31648  01AEE0  C069  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
 31649  01AEE4  0100               	movlb	0	; () banked
 31650  01AEE6  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 31651  01AEE8  0E8E               	movlw	142
 31652  01AEEA  0100               	movlb	0	; () banked
 31653  01AEEC  6F63               	movwf	___ftpack@exp& (0+255),b
 31654  01AEEE  0E00               	movlw	0
 31655  01AEF0  0100               	movlb	0	; () banked
 31656  01AEF2  6F64               	movwf	___ftpack@sign& (0+255),b
 31657  01AEF4  ECF2  F0C4         	call	___ftpack	;wreg free
 31658  01AEF8  C060  F068         	movff	?___ftpack,?___lwtoft
 31659  01AEFC  C061  F069         	movff	?___ftpack+1,?___lwtoft+1
 31660  01AF00  C062  F06A         	movff	?___ftpack+2,?___lwtoft+2
 31661  01AF04  0012               	return	
 31662  01AF06                     __end_of___lwtoft:
 31663                           	opt stack 0
 31664                           tblptru	equ	0xFF8
 31665                           tblptrh	equ	0xFF7
 31666                           tblptrl	equ	0xFF6
 31667                           tablat	equ	0xFF5
 31668                           prodh	equ	0xFF4
 31669                           prodl	equ	0xFF3
 31670                           intcon	equ	0xFF2
 31671                           postinc0	equ	0xFEE
 31672                           wreg	equ	0xFE8
 31673                           postdec1	equ	0xFE5
 31674                           fsr1h	equ	0xFE2
 31675                           fsr1l	equ	0xFE1
 31676                           indf2	equ	0xFDF
 31677                           postinc2	equ	0xFDE
 31678                           postdec2	equ	0xFDD
 31679                           fsr2h	equ	0xFDA
 31680                           fsr2l	equ	0xFD9
 31681                           status	equ	0xFD8
 31682                           
 31683 ;; *************** function _Freq_Calc *****************
 31684 ;; Defined at:
 31685 ;;		line 329 in file "Power_Meter.c"
 31686 ;; Parameters:    Size  Location     Type
 31687 ;;		None
 31688 ;; Auto vars:     Size  Location     Type
 31689 ;;		None
 31690 ;; Return value:  Size  Location     Type
 31691 ;;                  1    wreg      void 
 31692 ;; Registers used:
 31693 ;;		wreg, status,2, status,0, cstack
 31694 ;; Tracked objects:
 31695 ;;		On entry : 0/0
 31696 ;;		On exit  : 0/0
 31697 ;;		Unchanged: 0/0
 31698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31700 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31702 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31703 ;;Total ram usage:        3 bytes
 31704 ;; Hardware stack levels used:    1
 31705 ;; Hardware stack levels required when called:    5
 31706 ;; This function calls:
 31707 ;;		___ftadd
 31708 ;;		___ftdiv
 31709 ;;		___ftge
 31710 ;;		___ftmul
 31711 ;;		___ftneg
 31712 ;; This function is called by:
 31713 ;;		_main
 31714 ;; This function uses a non-reentrant model
 31715 ;;
 31716                           
 31717                           	psect	text120
 31718  01700A                     __ptext120:
 31719                           	opt stack 0
 31720  01700A                     _Freq_Calc:
 31721                           	opt stack 25
 31722                           
 31723                           ;Power_Meter.c: 331: if(R_V_New > R_V_Old)
 31724                           
 31725                           ;incstack = 0
 31726  01700A  C0D0  F099         	movff	_R_V_Old,___ftge@ff1
 31727  01700E  C0D1  F09A         	movff	_R_V_Old+1,___ftge@ff1+1
 31728  017012  C0D2  F09B         	movff	_R_V_Old+2,___ftge@ff1+2
 31729  017016  C0F7  F09C         	movff	_R_V_New,___ftge@ff2
 31730  01701A  C0F8  F09D         	movff	_R_V_New+1,___ftge@ff2+1
 31731  01701E  C0F9  F09E         	movff	_R_V_New+2,___ftge@ff2+2
 31732  017022  ECEB  F0CA         	call	___ftge	;wreg free
 31733  017026  0100               	movlb	0	; () banked
 31734  017028  B0D8               	btfsc	status,0,c
 31735  01702A  D02E               	goto	l22455
 31736                           
 31737                           ; BSR set to: 0
 31738                           ;Power_Meter.c: 332: {
 31739                           ;Power_Meter.c: 333: Time_Diff = (R_V_New - R_V_Old + 1);
 31740  01702C  C0F7  F090         	movff	_R_V_New,___ftadd@f2
 31741  017030  C0F8  F091         	movff	_R_V_New+1,___ftadd@f2+1
 31742  017034  C0F9  F092         	movff	_R_V_New+2,___ftadd@f2+2
 31743  017038  C0D0  F083         	movff	_R_V_Old,___ftneg@f1
 31744  01703C  C0D1  F084         	movff	_R_V_Old+1,___ftneg@f1+1
 31745  017040  C0D2  F085         	movff	_R_V_Old+2,___ftneg@f1+2
 31746  017044  ECBD  F0D6         	call	___ftneg	;wreg free
 31747  017048  C083  F08D         	movff	?___ftneg,___ftadd@f1
 31748  01704C  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 31749  017050  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 31750  017054  EC69  F0B2         	call	___ftadd	;wreg free
 31751  017058  C08D  F0B4         	movff	?___ftadd,_Freq_Calc$8056
 31752  01705C  C08E  F0B5         	movff	?___ftadd+1,_Freq_Calc$8056+1
 31753  017060  C08F  F0B6         	movff	?___ftadd+2,_Freq_Calc$8056+2
 31754                           
 31755                           ;Power_Meter.c: 332: {
 31756                           ;Power_Meter.c: 333: Time_Diff = (R_V_New - R_V_Old + 1);
 31757  017064  C0B4  F08D         	movff	_Freq_Calc$8056,___ftadd@f1
 31758  017068  C0B5  F08E         	movff	_Freq_Calc$8056+1,___ftadd@f1+1
 31759  01706C  C0B6  F08F         	movff	_Freq_Calc$8056+2,___ftadd@f1+2
 31760  017070  0E00               	movlw	0
 31761  017072  0100               	movlb	0	; () banked
 31762  017074  6F90               	movwf	___ftadd@f2& (0+255),b
 31763  017076  0E80               	movlw	128
 31764  017078  0100               	movlb	0	; () banked
 31765  01707A  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 31766  01707C  0E3F               	movlw	63
 31767  01707E  0100               	movlb	0	; () banked
 31768  017080  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 31769  017082  EC69  F0B2         	call	___ftadd	;wreg free
 31770  017086  D02D               	goto	L15
 31771  017088                     l22455:
 31772                           
 31773                           ;Power_Meter.c: 335: else
 31774                           ;Power_Meter.c: 336: {
 31775                           ;Power_Meter.c: 337: Time_Diff = ((R_V_New - R_V_Old + 1) + 65536);
 31776  017088  C0F7  F090         	movff	_R_V_New,___ftadd@f2
 31777  01708C  C0F8  F091         	movff	_R_V_New+1,___ftadd@f2+1
 31778  017090  C0F9  F092         	movff	_R_V_New+2,___ftadd@f2+2
 31779  017094  C0D0  F083         	movff	_R_V_Old,___ftneg@f1
 31780  017098  C0D1  F084         	movff	_R_V_Old+1,___ftneg@f1+1
 31781  01709C  C0D2  F085         	movff	_R_V_Old+2,___ftneg@f1+2
 31782  0170A0  ECBD  F0D6         	call	___ftneg	;wreg free
 31783  0170A4  C083  F08D         	movff	?___ftneg,___ftadd@f1
 31784  0170A8  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 31785  0170AC  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 31786  0170B0  EC69  F0B2         	call	___ftadd	;wreg free
 31787  0170B4  C08D  F0B4         	movff	?___ftadd,_Freq_Calc$8056
 31788  0170B8  C08E  F0B5         	movff	?___ftadd+1,_Freq_Calc$8056+1
 31789  0170BC  C08F  F0B6         	movff	?___ftadd+2,_Freq_Calc$8056+2
 31790                           
 31791                           ;Power_Meter.c: 335: else
 31792                           ;Power_Meter.c: 336: {
 31793                           ;Power_Meter.c: 337: Time_Diff = ((R_V_New - R_V_Old + 1) + 65536);
 31794  0170C0  C0B4  F08D         	movff	_Freq_Calc$8056,___ftadd@f1
 31795  0170C4  C0B5  F08E         	movff	_Freq_Calc$8056+1,___ftadd@f1+1
 31796  0170C8  C0B6  F08F         	movff	_Freq_Calc$8056+2,___ftadd@f1+2
 31797  0170CC  0E01               	movlw	1
 31798  0170CE  0100               	movlb	0	; () banked
 31799  0170D0  6F90               	movwf	___ftadd@f2& (0+255),b
 31800  0170D2  0E80               	movlw	128
 31801  0170D4  0100               	movlb	0	; () banked
 31802  0170D6  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 31803  0170D8  0E47               	movlw	71
 31804  0170DA  0100               	movlb	0	; () banked
 31805  0170DC  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 31806  0170DE  EC69  F0B2         	call	___ftadd	;wreg free
 31807  0170E2                     L15:
 31808  0170E2  C08D  F4F0         	movff	?___ftadd,_Time_Diff
 31809  0170E6  C08E  F4F1         	movff	?___ftadd+1,_Time_Diff+1
 31810  0170EA  C08F  F4F2         	movff	?___ftadd+2,_Time_Diff+2
 31811                           
 31812                           ;Power_Meter.c: 338: }
 31813                           ;Power_Meter.c: 340: Time_Old = Time_New;
 31814  0170EE  C1A4  F227         	movff	_Time_New,_Time_Old
 31815  0170F2  C1A5  F228         	movff	_Time_New+1,_Time_Old+1
 31816  0170F6  C1A6  F229         	movff	_Time_New+2,_Time_Old+2
 31817                           
 31818                           ;Power_Meter.c: 341: Time_New = (0.000004 * Time_Diff);
 31819  0170FA  C4F0  F074         	movff	_Time_Diff,___ftmul@f1
 31820  0170FE  C4F1  F075         	movff	_Time_Diff+1,___ftmul@f1+1
 31821  017102  C4F2  F076         	movff	_Time_Diff+2,___ftmul@f1+2
 31822  017106  0E38               	movlw	56
 31823  017108  0100               	movlb	0	; () banked
 31824  01710A  6F77               	movwf	___ftmul@f2& (0+255),b
 31825  01710C  0E86               	movlw	134
 31826  01710E  0100               	movlb	0	; () banked
 31827  017110  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31828  017112  0E36               	movlw	54
 31829  017114  0100               	movlb	0	; () banked
 31830  017116  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31831  017118  ECA4  F0C0         	call	___ftmul	;wreg free
 31832  01711C  C074  F1A4         	movff	?___ftmul,_Time_New
 31833  017120  C075  F1A5         	movff	?___ftmul+1,_Time_New+1
 31834  017124  C076  F1A6         	movff	?___ftmul+2,_Time_New+2
 31835                           
 31836                           ;Power_Meter.c: 343: if ( (Time_Old > (Time_New * 0.8)) && (Time_Old < (Time_New * 1.2))
      +                          )
 31837  017128  0ECD               	movlw	205
 31838  01712A  0100               	movlb	0	; () banked
 31839  01712C  6F77               	movwf	___ftmul@f2& (0+255),b
 31840  01712E  0E4C               	movlw	76
 31841  017130  0100               	movlb	0	; () banked
 31842  017132  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31843  017134  0E3F               	movlw	63
 31844  017136  0100               	movlb	0	; () banked
 31845  017138  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31846  01713A  C1A4  F074         	movff	_Time_New,___ftmul@f1
 31847  01713E  C1A5  F075         	movff	_Time_New+1,___ftmul@f1+1
 31848  017142  C1A6  F076         	movff	_Time_New+2,___ftmul@f1+2
 31849  017146  ECA4  F0C0         	call	___ftmul	;wreg free
 31850  01714A  C074  F099         	movff	?___ftmul,___ftge@ff1
 31851  01714E  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
 31852  017152  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
 31853  017156  C227  F09C         	movff	_Time_Old,___ftge@ff2
 31854  01715A  C228  F09D         	movff	_Time_Old+1,___ftge@ff2+1
 31855  01715E  C229  F09E         	movff	_Time_Old+2,___ftge@ff2+2
 31856  017162  ECEB  F0CA         	call	___ftge	;wreg free
 31857  017166  0100               	movlb	0	; () banked
 31858  017168  B0D8               	btfsc	status,0,c
 31859  01716A  0012               	return	
 31860                           
 31861                           ; BSR set to: 0
 31862  01716C  C227  F099         	movff	_Time_Old,___ftge@ff1
 31863  017170  C228  F09A         	movff	_Time_Old+1,___ftge@ff1+1
 31864  017174  C229  F09B         	movff	_Time_Old+2,___ftge@ff1+2
 31865  017178  0E9A               	movlw	154
 31866  01717A  0100               	movlb	0	; () banked
 31867  01717C  6F77               	movwf	___ftmul@f2& (0+255),b
 31868  01717E  0E99               	movlw	153
 31869  017180  0100               	movlb	0	; () banked
 31870  017182  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 31871  017184  0E3F               	movlw	63
 31872  017186  0100               	movlb	0	; () banked
 31873  017188  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 31874  01718A  C1A4  F074         	movff	_Time_New,___ftmul@f1
 31875  01718E  C1A5  F075         	movff	_Time_New+1,___ftmul@f1+1
 31876  017192  C1A6  F076         	movff	_Time_New+2,___ftmul@f1+2
 31877  017196  ECA4  F0C0         	call	___ftmul	;wreg free
 31878  01719A  C074  F09C         	movff	?___ftmul,___ftge@ff2
 31879  01719E  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
 31880  0171A2  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
 31881  0171A6  ECEB  F0CA         	call	___ftge	;wreg free
 31882  0171AA  0100               	movlb	0	; () banked
 31883  0171AC  B0D8               	btfsc	status,0,c
 31884  0171AE  0012               	return	
 31885                           
 31886                           ; BSR set to: 0
 31887                           ;Power_Meter.c: 344: {
 31888                           ;Power_Meter.c: 345: Frequency = (1 / Time_New);
 31889  0171B0  0E00               	movlw	0
 31890  0171B2  0100               	movlb	0	; () banked
 31891  0171B4  6FA5               	movwf	___ftdiv@f1& (0+255),b
 31892  0171B6  0E80               	movlw	128
 31893  0171B8  0100               	movlb	0	; () banked
 31894  0171BA  6FA6               	movwf	(___ftdiv@f1+1)& (0+255),b
 31895  0171BC  0E3F               	movlw	63
 31896  0171BE  0100               	movlb	0	; () banked
 31897  0171C0  6FA7               	movwf	(___ftdiv@f1+2)& (0+255),b
 31898  0171C2  C1A4  F0A8         	movff	_Time_New,___ftdiv@f2
 31899  0171C6  C1A5  F0A9         	movff	_Time_New+1,___ftdiv@f2+1
 31900  0171CA  C1A6  F0AA         	movff	_Time_New+2,___ftdiv@f2+2
 31901  0171CE  EC53  F0C1         	call	___ftdiv	;wreg free
 31902  0171D2  C0A5  F0C7         	movff	?___ftdiv,_Frequency
 31903  0171D6  C0A6  F0C8         	movff	?___ftdiv+1,_Frequency+1
 31904  0171DA  C0A7  F0C9         	movff	?___ftdiv+2,_Frequency+2
 31905  0171DE  0012               	return	
 31906  0171E0                     __end_of_Freq_Calc:
 31907                           	opt stack 0
 31908                           tblptru	equ	0xFF8
 31909                           tblptrh	equ	0xFF7
 31910                           tblptrl	equ	0xFF6
 31911                           tablat	equ	0xFF5
 31912                           prodh	equ	0xFF4
 31913                           prodl	equ	0xFF3
 31914                           intcon	equ	0xFF2
 31915                           postinc0	equ	0xFEE
 31916                           wreg	equ	0xFE8
 31917                           postdec1	equ	0xFE5
 31918                           fsr1h	equ	0xFE2
 31919                           fsr1l	equ	0xFE1
 31920                           indf2	equ	0xFDF
 31921                           postinc2	equ	0xFDE
 31922                           postdec2	equ	0xFDD
 31923                           fsr2h	equ	0xFDA
 31924                           fsr2l	equ	0xFD9
 31925                           status	equ	0xFD8
 31926                           
 31927 ;; *************** function _Cons_Gene *****************
 31928 ;; Defined at:
 31929 ;;		line 315 in file "Power_Meter.c"
 31930 ;; Parameters:    Size  Location     Type
 31931 ;;		None
 31932 ;; Auto vars:     Size  Location     Type
 31933 ;;		None
 31934 ;; Return value:  Size  Location     Type
 31935 ;;                  1    wreg      void 
 31936 ;; Registers used:
 31937 ;;		wreg, status,2, status,0, cstack
 31938 ;; Tracked objects:
 31939 ;;		On entry : 0/0
 31940 ;;		On exit  : 0/0
 31941 ;;		Unchanged: 0/0
 31942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31947 ;;Total ram usage:        0 bytes
 31948 ;; Hardware stack levels used:    1
 31949 ;; Hardware stack levels required when called:    5
 31950 ;; This function calls:
 31951 ;;		___ftge
 31952 ;;		___ftmul
 31953 ;; This function is called by:
 31954 ;;		_main
 31955 ;; This function uses a non-reentrant model
 31956 ;;
 31957                           
 31958                           	psect	text121
 31959  0188D8                     __ptext121:
 31960                           	opt stack 0
 31961  0188D8                     _Cons_Gene:
 31962                           	opt stack 25
 31963                           
 31964                           ;Power_Meter.c: 317: if((R_V_Max > (2119)) && (R_C_Max > (2119)))
 31965                           
 31966                           ;incstack = 0
 31967  0188D8  0E70               	movlw	112
 31968  0188DA  0100               	movlb	0	; () banked
 31969  0188DC  6F99               	movwf	___ftge@ff1& (0+255),b
 31970  0188DE  0E04               	movlw	4
 31971  0188E0  0100               	movlb	0	; () banked
 31972  0188E2  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 31973  0188E4  0E45               	movlw	69
 31974  0188E6  0100               	movlb	0	; () banked
 31975  0188E8  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 31976  0188EA  C112  F09C         	movff	_R_V_Max,___ftge@ff2
 31977  0188EE  C113  F09D         	movff	_R_V_Max+1,___ftge@ff2+1
 31978  0188F2  C114  F09E         	movff	_R_V_Max+2,___ftge@ff2+2
 31979  0188F6  ECEB  F0CA         	call	___ftge	;wreg free
 31980  0188FA  0100               	movlb	0	; () banked
 31981  0188FC  B0D8               	btfsc	status,0,c
 31982  0188FE  D046               	goto	l22745
 31983                           
 31984                           ; BSR set to: 0
 31985  018900  0E70               	movlw	112
 31986  018902  0100               	movlb	0	; () banked
 31987  018904  6F99               	movwf	___ftge@ff1& (0+255),b
 31988  018906  0E04               	movlw	4
 31989  018908  0100               	movlb	0	; () banked
 31990  01890A  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 31991  01890C  0E45               	movlw	69
 31992  01890E  0100               	movlb	0	; () banked
 31993  018910  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 31994  018912  C10C  F09C         	movff	_R_C_Max,___ftge@ff2
 31995  018916  C10D  F09D         	movff	_R_C_Max+1,___ftge@ff2+1
 31996  01891A  C10E  F09E         	movff	_R_C_Max+2,___ftge@ff2+2
 31997  01891E  ECEB  F0CA         	call	___ftge	;wreg free
 31998  018922  0100               	movlb	0	; () banked
 31999  018924  B0D8               	btfsc	status,0,c
 32000  018926  D032               	goto	l22745
 32001                           
 32002                           ; BSR set to: 0
 32003                           ;Power_Meter.c: 318: {
 32004                           ;Power_Meter.c: 319: Consumption = 0;
 32005  018928  0E00               	movlw	0
 32006  01892A  0102               	movlb	2	; () banked
 32007  01892C  6FBB               	movwf	_Consumption& (0+255),b
 32008                           
 32009                           ; BSR set to: 2
 32010                           ;Power_Meter.c: 320: KW = ((-1) * KW);
 32011  01892E  C022  F074         	movff	_KW,___ftmul@f1
 32012  018932  C023  F075         	movff	_KW+1,___ftmul@f1+1
 32013  018936  C024  F076         	movff	_KW+2,___ftmul@f1+2
 32014  01893A  0E00               	movlw	0
 32015  01893C  0100               	movlb	0	; () banked
 32016  01893E  6F77               	movwf	___ftmul@f2& (0+255),b
 32017  018940  0E80               	movlw	128
 32018  018942  0100               	movlb	0	; () banked
 32019  018944  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32020  018946  0EBF               	movlw	191
 32021  018948  0100               	movlb	0	; () banked
 32022  01894A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32023  01894C  ECA4  F0C0         	call	___ftmul	;wreg free
 32024  018950  C074  F022         	movff	?___ftmul,_KW
 32025  018954  C075  F023         	movff	?___ftmul+1,_KW+1
 32026  018958  C076  F024         	movff	?___ftmul+2,_KW+2
 32027                           
 32028                           ;Power_Meter.c: 321: Y_KW = ((-1) * Y_KW);
 32029  01895C  C2F1  F074         	movff	_Y_KW,___ftmul@f1
 32030  018960  C2F2  F075         	movff	_Y_KW+1,___ftmul@f1+1
 32031  018964  C2F3  F076         	movff	_Y_KW+2,___ftmul@f1+2
 32032  018968  0E00               	movlw	0
 32033  01896A  0100               	movlb	0	; () banked
 32034  01896C  6F77               	movwf	___ftmul@f2& (0+255),b
 32035  01896E  0E80               	movlw	128
 32036  018970  0100               	movlb	0	; () banked
 32037  018972  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32038  018974  0EBF               	movlw	191
 32039  018976  0100               	movlb	0	; () banked
 32040  018978  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32041  01897A  ECA4  F0C0         	call	___ftmul	;wreg free
 32042  01897E  C074  F2F1         	movff	?___ftmul,_Y_KW
 32043  018982  C075  F2F2         	movff	?___ftmul+1,_Y_KW+1
 32044  018986  C076  F2F3         	movff	?___ftmul+2,_Y_KW+2
 32045                           
 32046                           ;Power_Meter.c: 322: }
 32047  01898A  0012               	return	
 32048  01898C                     l22745:
 32049                           
 32050                           ;Power_Meter.c: 323: else if((R_V_Max > (2119)) && (R_C_Max < (2119)))
 32051  01898C  0E70               	movlw	112
 32052  01898E  0100               	movlb	0	; () banked
 32053  018990  6F99               	movwf	___ftge@ff1& (0+255),b
 32054  018992  0E04               	movlw	4
 32055  018994  0100               	movlb	0	; () banked
 32056  018996  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 32057  018998  0E45               	movlw	69
 32058  01899A  0100               	movlb	0	; () banked
 32059  01899C  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 32060  01899E  C112  F09C         	movff	_R_V_Max,___ftge@ff2
 32061  0189A2  C113  F09D         	movff	_R_V_Max+1,___ftge@ff2+1
 32062  0189A6  C114  F09E         	movff	_R_V_Max+2,___ftge@ff2+2
 32063  0189AA  ECEB  F0CA         	call	___ftge	;wreg free
 32064  0189AE  0100               	movlb	0	; () banked
 32065  0189B0  B0D8               	btfsc	status,0,c
 32066  0189B2  0012               	return	
 32067                           
 32068                           ; BSR set to: 0
 32069  0189B4  C10C  F099         	movff	_R_C_Max,___ftge@ff1
 32070  0189B8  C10D  F09A         	movff	_R_C_Max+1,___ftge@ff1+1
 32071  0189BC  C10E  F09B         	movff	_R_C_Max+2,___ftge@ff1+2
 32072  0189C0  0E70               	movlw	112
 32073  0189C2  0100               	movlb	0	; () banked
 32074  0189C4  6F9C               	movwf	___ftge@ff2& (0+255),b
 32075  0189C6  0E04               	movlw	4
 32076  0189C8  0100               	movlb	0	; () banked
 32077  0189CA  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 32078  0189CC  0E45               	movlw	69
 32079  0189CE  0100               	movlb	0	; () banked
 32080  0189D0  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 32081  0189D2  ECEB  F0CA         	call	___ftge	;wreg free
 32082  0189D6  0100               	movlb	0	; () banked
 32083  0189D8  B0D8               	btfsc	status,0,c
 32084  0189DA  0012               	return	
 32085                           
 32086                           ; BSR set to: 0
 32087                           ;Power_Meter.c: 324: {
 32088                           ;Power_Meter.c: 325: Consumption = 1;
 32089  0189DC  0E01               	movlw	1
 32090  0189DE  0102               	movlb	2	; () banked
 32091  0189E0  6FBB               	movwf	_Consumption& (0+255),b
 32092                           
 32093                           ; BSR set to: 2
 32094  0189E2  0012               	return	
 32095  0189E4                     __end_of_Cons_Gene:
 32096                           	opt stack 0
 32097                           tblptru	equ	0xFF8
 32098                           tblptrh	equ	0xFF7
 32099                           tblptrl	equ	0xFF6
 32100                           tablat	equ	0xFF5
 32101                           prodh	equ	0xFF4
 32102                           prodl	equ	0xFF3
 32103                           intcon	equ	0xFF2
 32104                           postinc0	equ	0xFEE
 32105                           wreg	equ	0xFE8
 32106                           postdec1	equ	0xFE5
 32107                           fsr1h	equ	0xFE2
 32108                           fsr1l	equ	0xFE1
 32109                           indf2	equ	0xFDF
 32110                           postinc2	equ	0xFDE
 32111                           postdec2	equ	0xFDD
 32112                           fsr2h	equ	0xFDA
 32113                           fsr2l	equ	0xFD9
 32114                           status	equ	0xFD8
 32115                           
 32116 ;; *************** function _B_PF_Calc *****************
 32117 ;; Defined at:
 32118 ;;		line 520 in file "Power_Meter.c"
 32119 ;; Parameters:    Size  Location     Type
 32120 ;;		None
 32121 ;; Auto vars:     Size  Location     Type
 32122 ;;		None
 32123 ;; Return value:  Size  Location     Type
 32124 ;;                  1    wreg      void 
 32125 ;; Registers used:
 32126 ;;		wreg, status,2, status,0, cstack
 32127 ;; Tracked objects:
 32128 ;;		On entry : 0/0
 32129 ;;		On exit  : 0/0
 32130 ;;		Unchanged: 0/0
 32131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32133 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32135 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32136 ;;Total ram usage:        3 bytes
 32137 ;; Hardware stack levels used:    1
 32138 ;; Hardware stack levels required when called:    5
 32139 ;; This function calls:
 32140 ;;		___ftadd
 32141 ;;		___ftdiv
 32142 ;;		___ftge
 32143 ;;		___ftmul
 32144 ;;		___ftneg
 32145 ;; This function is called by:
 32146 ;;		_main
 32147 ;; This function uses a non-reentrant model
 32148 ;;
 32149                           
 32150                           	psect	text122
 32151  016DDC                     __ptext122:
 32152                           	opt stack 0
 32153  016DDC                     _B_PF_Calc:
 32154                           	opt stack 25
 32155                           
 32156                           ;Power_Meter.c: 522: if(Bcurr_V_New < Bcurr_V_Old)
 32157                           
 32158                           ;incstack = 0
 32159  016DDC  C0F4  F099         	movff	_Bcurr_V_New,___ftge@ff1
 32160  016DE0  C0F5  F09A         	movff	_Bcurr_V_New+1,___ftge@ff1+1
 32161  016DE4  C0F6  F09B         	movff	_Bcurr_V_New+2,___ftge@ff1+2
 32162  016DE8  C20C  F09C         	movff	_Bcurr_V_Old,___ftge@ff2
 32163  016DEC  C20D  F09D         	movff	_Bcurr_V_Old+1,___ftge@ff2+1
 32164  016DF0  C20E  F09E         	movff	_Bcurr_V_Old+2,___ftge@ff2+2
 32165  016DF4  ECEB  F0CA         	call	___ftge	;wreg free
 32166  016DF8  0100               	movlb	0	; () banked
 32167  016DFA  B0D8               	btfsc	status,0,c
 32168  016DFC  D02E               	goto	l22643
 32169                           
 32170                           ; BSR set to: 0
 32171                           ;Power_Meter.c: 523: {
 32172                           ;Power_Meter.c: 524: B_V_Gap = ((Bcurr_V_New - Bcurr_V_Old + 1) + 65536);
 32173  016DFE  C0F4  F090         	movff	_Bcurr_V_New,___ftadd@f2
 32174  016E02  C0F5  F091         	movff	_Bcurr_V_New+1,___ftadd@f2+1
 32175  016E06  C0F6  F092         	movff	_Bcurr_V_New+2,___ftadd@f2+2
 32176  016E0A  C20C  F083         	movff	_Bcurr_V_Old,___ftneg@f1
 32177  016E0E  C20D  F084         	movff	_Bcurr_V_Old+1,___ftneg@f1+1
 32178  016E12  C20E  F085         	movff	_Bcurr_V_Old+2,___ftneg@f1+2
 32179  016E16  ECBD  F0D6         	call	___ftneg	;wreg free
 32180  016E1A  C083  F08D         	movff	?___ftneg,___ftadd@f1
 32181  016E1E  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 32182  016E22  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 32183  016E26  EC69  F0B2         	call	___ftadd	;wreg free
 32184  016E2A  C08D  F0B4         	movff	?___ftadd,_B_PF_Calc$8115
 32185  016E2E  C08E  F0B5         	movff	?___ftadd+1,_B_PF_Calc$8115+1
 32186  016E32  C08F  F0B6         	movff	?___ftadd+2,_B_PF_Calc$8115+2
 32187                           
 32188                           ;Power_Meter.c: 523: {
 32189                           ;Power_Meter.c: 524: B_V_Gap = ((Bcurr_V_New - Bcurr_V_Old + 1) + 65536);
 32190  016E36  C0B4  F08D         	movff	_B_PF_Calc$8115,___ftadd@f1
 32191  016E3A  C0B5  F08E         	movff	_B_PF_Calc$8115+1,___ftadd@f1+1
 32192  016E3E  C0B6  F08F         	movff	_B_PF_Calc$8115+2,___ftadd@f1+2
 32193  016E42  0E01               	movlw	1
 32194  016E44  0100               	movlb	0	; () banked
 32195  016E46  6F90               	movwf	___ftadd@f2& (0+255),b
 32196  016E48  0E80               	movlw	128
 32197  016E4A  0100               	movlb	0	; () banked
 32198  016E4C  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 32199  016E4E  0E47               	movlw	71
 32200  016E50  0100               	movlb	0	; () banked
 32201  016E52  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 32202  016E54  EC69  F0B2         	call	___ftadd	;wreg free
 32203  016E58  D088               	goto	L16
 32204  016E5A                     l22643:
 32205                           
 32206                           ;Power_Meter.c: 527: else if((Bcurr_New + 100) < Bcurr_V_New)
 32207  016E5A  0E00               	movlw	0
 32208  016E5C  0100               	movlb	0	; () banked
 32209  016E5E  6F90               	movwf	___ftadd@f2& (0+255),b
 32210  016E60  0EC8               	movlw	200
 32211  016E62  0100               	movlb	0	; () banked
 32212  016E64  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 32213  016E66  0E42               	movlw	66
 32214  016E68  0100               	movlb	0	; () banked
 32215  016E6A  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 32216  016E6C  C19E  F08D         	movff	_Bcurr_New,___ftadd@f1
 32217  016E70  C19F  F08E         	movff	_Bcurr_New+1,___ftadd@f1+1
 32218  016E74  C1A0  F08F         	movff	_Bcurr_New+2,___ftadd@f1+2
 32219  016E78  EC69  F0B2         	call	___ftadd	;wreg free
 32220  016E7C  C08D  F099         	movff	?___ftadd,___ftge@ff1
 32221  016E80  C08E  F09A         	movff	?___ftadd+1,___ftge@ff1+1
 32222  016E84  C08F  F09B         	movff	?___ftadd+2,___ftge@ff1+2
 32223  016E88  C0F4  F09C         	movff	_Bcurr_V_New,___ftge@ff2
 32224  016E8C  C0F5  F09D         	movff	_Bcurr_V_New+1,___ftge@ff2+1
 32225  016E90  C0F6  F09E         	movff	_Bcurr_V_New+2,___ftge@ff2+2
 32226  016E94  ECEB  F0CA         	call	___ftge	;wreg free
 32227  016E98  0100               	movlb	0	; () banked
 32228  016E9A  B0D8               	btfsc	status,0,c
 32229  016E9C  D034               	goto	l22647
 32230                           
 32231                           ; BSR set to: 0
 32232                           ;Power_Meter.c: 528: {
 32233                           ;Power_Meter.c: 529: B_C_Gap = ((Bcurr_New - Bcurr_V_New + 1) + 65536);
 32234  016E9E  C19E  F090         	movff	_Bcurr_New,___ftadd@f2
 32235  016EA2  C19F  F091         	movff	_Bcurr_New+1,___ftadd@f2+1
 32236  016EA6  C1A0  F092         	movff	_Bcurr_New+2,___ftadd@f2+2
 32237  016EAA  C0F4  F083         	movff	_Bcurr_V_New,___ftneg@f1
 32238  016EAE  C0F5  F084         	movff	_Bcurr_V_New+1,___ftneg@f1+1
 32239  016EB2  C0F6  F085         	movff	_Bcurr_V_New+2,___ftneg@f1+2
 32240  016EB6  ECBD  F0D6         	call	___ftneg	;wreg free
 32241  016EBA  C083  F08D         	movff	?___ftneg,___ftadd@f1
 32242  016EBE  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 32243  016EC2  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 32244  016EC6  EC69  F0B2         	call	___ftadd	;wreg free
 32245  016ECA  C08D  F0B4         	movff	?___ftadd,_B_PF_Calc$8115
 32246  016ECE  C08E  F0B5         	movff	?___ftadd+1,_B_PF_Calc$8115+1
 32247  016ED2  C08F  F0B6         	movff	?___ftadd+2,_B_PF_Calc$8115+2
 32248                           
 32249                           ;Power_Meter.c: 528: {
 32250                           ;Power_Meter.c: 529: B_C_Gap = ((Bcurr_New - Bcurr_V_New + 1) + 65536);
 32251  016ED6  C0B4  F08D         	movff	_B_PF_Calc$8115,___ftadd@f1
 32252  016EDA  C0B5  F08E         	movff	_B_PF_Calc$8115+1,___ftadd@f1+1
 32253  016EDE  C0B6  F08F         	movff	_B_PF_Calc$8115+2,___ftadd@f1+2
 32254  016EE2  0E01               	movlw	1
 32255  016EE4  0100               	movlb	0	; () banked
 32256  016EE6  6F90               	movwf	___ftadd@f2& (0+255),b
 32257  016EE8  0E80               	movlw	128
 32258  016EEA  0100               	movlb	0	; () banked
 32259  016EEC  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 32260  016EEE  0E47               	movlw	71
 32261  016EF0  0100               	movlb	0	; () banked
 32262  016EF2  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 32263  016EF4  EC69  F0B2         	call	___ftadd	;wreg free
 32264  016EF8  C08D  F516         	movff	?___ftadd,_B_C_Gap
 32265  016EFC  C08E  F517         	movff	?___ftadd+1,_B_C_Gap+1
 32266  016F00  C08F  F518         	movff	?___ftadd+2,_B_C_Gap+2
 32267                           
 32268                           ;Power_Meter.c: 530: }
 32269  016F04  D038               	goto	l9250
 32270  016F06                     l22647:
 32271                           
 32272                           ;Power_Meter.c: 532: else
 32273                           ;Power_Meter.c: 533: {
 32274                           ;Power_Meter.c: 534: B_C_Gap = (Bcurr_New - Bcurr_V_New);
 32275  016F06  C0F4  F083         	movff	_Bcurr_V_New,___ftneg@f1
 32276  016F0A  C0F5  F084         	movff	_Bcurr_V_New+1,___ftneg@f1+1
 32277  016F0E  C0F6  F085         	movff	_Bcurr_V_New+2,___ftneg@f1+2
 32278  016F12  ECBD  F0D6         	call	___ftneg	;wreg free
 32279  016F16  C083  F08D         	movff	?___ftneg,___ftadd@f1
 32280  016F1A  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 32281  016F1E  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 32282  016F22  C19E  F090         	movff	_Bcurr_New,___ftadd@f2
 32283  016F26  C19F  F091         	movff	_Bcurr_New+1,___ftadd@f2+1
 32284  016F2A  C1A0  F092         	movff	_Bcurr_New+2,___ftadd@f2+2
 32285  016F2E  EC69  F0B2         	call	___ftadd	;wreg free
 32286  016F32  C08D  F516         	movff	?___ftadd,_B_C_Gap
 32287  016F36  C08E  F517         	movff	?___ftadd+1,_B_C_Gap+1
 32288  016F3A  C08F  F518         	movff	?___ftadd+2,_B_C_Gap+2
 32289                           
 32290                           ;Power_Meter.c: 535: B_V_Gap = (Bcurr_V_New - Bcurr_V_Old);
 32291  016F3E  C20C  F083         	movff	_Bcurr_V_Old,___ftneg@f1
 32292  016F42  C20D  F084         	movff	_Bcurr_V_Old+1,___ftneg@f1+1
 32293  016F46  C20E  F085         	movff	_Bcurr_V_Old+2,___ftneg@f1+2
 32294  016F4A  ECBD  F0D6         	call	___ftneg	;wreg free
 32295  016F4E  C083  F08D         	movff	?___ftneg,___ftadd@f1
 32296  016F52  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 32297  016F56  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 32298  016F5A  C0F4  F090         	movff	_Bcurr_V_New,___ftadd@f2
 32299  016F5E  C0F5  F091         	movff	_Bcurr_V_New+1,___ftadd@f2+1
 32300  016F62  C0F6  F092         	movff	_Bcurr_V_New+2,___ftadd@f2+2
 32301  016F66  EC69  F0B2         	call	___ftadd	;wreg free
 32302  016F6A                     L16:
 32303  016F6A  C08D  F525         	movff	?___ftadd,_B_V_Gap
 32304  016F6E  C08E  F526         	movff	?___ftadd+1,_B_V_Gap+1
 32305  016F72  C08F  F527         	movff	?___ftadd+2,_B_V_Gap+2
 32306  016F76                     l9250:
 32307                           
 32308                           ;Power_Meter.c: 536: }
 32309                           ;Power_Meter.c: 538: B_Gap_Ratio = (B_C_Gap / B_V_Gap);
 32310  016F76  C516  F0A5         	movff	_B_C_Gap,___ftdiv@f1
 32311  016F7A  C517  F0A6         	movff	_B_C_Gap+1,___ftdiv@f1+1
 32312  016F7E  C518  F0A7         	movff	_B_C_Gap+2,___ftdiv@f1+2
 32313  016F82  C525  F0A8         	movff	_B_V_Gap,___ftdiv@f2
 32314  016F86  C526  F0A9         	movff	_B_V_Gap+1,___ftdiv@f2+1
 32315  016F8A  C527  F0AA         	movff	_B_V_Gap+2,___ftdiv@f2+2
 32316  016F8E  EC53  F0C1         	call	___ftdiv	;wreg free
 32317  016F92  C0A5  F103         	movff	?___ftdiv,_B_Gap_Ratio
 32318  016F96  C0A6  F104         	movff	?___ftdiv+1,_B_Gap_Ratio+1
 32319  016F9A  C0A7  F105         	movff	?___ftdiv+2,_B_Gap_Ratio+2
 32320                           
 32321                           ;Power_Meter.c: 539: B_Deg = B_Gap_Ratio * 360;
 32322  016F9E  C103  F074         	movff	_B_Gap_Ratio,___ftmul@f1
 32323  016FA2  C104  F075         	movff	_B_Gap_Ratio+1,___ftmul@f1+1
 32324  016FA6  C105  F076         	movff	_B_Gap_Ratio+2,___ftmul@f1+2
 32325  016FAA  0E00               	movlw	0
 32326  016FAC  0100               	movlb	0	; () banked
 32327  016FAE  6F77               	movwf	___ftmul@f2& (0+255),b
 32328  016FB0  0EB4               	movlw	180
 32329  016FB2  0100               	movlb	0	; () banked
 32330  016FB4  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32331  016FB6  0E43               	movlw	67
 32332  016FB8  0100               	movlb	0	; () banked
 32333  016FBA  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32334  016FBC  ECA4  F0C0         	call	___ftmul	;wreg free
 32335  016FC0  C074  F642         	movff	?___ftmul,_B_Deg
 32336  016FC4  C075  F643         	movff	?___ftmul+1,_B_Deg+1
 32337  016FC8  C076  F644         	movff	?___ftmul+2,_B_Deg+2
 32338                           
 32339                           ;Power_Meter.c: 541: BGR_Arr_1[4] = BGR_Arr_1[3];
 32340  016FCC  C463  F466         	movff	_BGR_Arr_1+9,_BGR_Arr_1+12
 32341  016FD0  C464  F467         	movff	_BGR_Arr_1+10,_BGR_Arr_1+13
 32342  016FD4  C465  F468         	movff	_BGR_Arr_1+11,_BGR_Arr_1+14
 32343                           
 32344                           ;Power_Meter.c: 542: BGR_Arr_1[3] = BGR_Arr_1[2];
 32345  016FD8  C460  F463         	movff	_BGR_Arr_1+6,_BGR_Arr_1+9
 32346  016FDC  C461  F464         	movff	_BGR_Arr_1+7,_BGR_Arr_1+10
 32347  016FE0  C462  F465         	movff	_BGR_Arr_1+8,_BGR_Arr_1+11
 32348                           
 32349                           ;Power_Meter.c: 543: BGR_Arr_1[2] = BGR_Arr_1[1];
 32350  016FE4  C45D  F460         	movff	_BGR_Arr_1+3,_BGR_Arr_1+6
 32351  016FE8  C45E  F461         	movff	_BGR_Arr_1+4,_BGR_Arr_1+7
 32352  016FEC  C45F  F462         	movff	_BGR_Arr_1+5,_BGR_Arr_1+8
 32353                           
 32354                           ;Power_Meter.c: 544: BGR_Arr_1[1] = BGR_Arr_1[0];
 32355  016FF0  C45A  F45D         	movff	_BGR_Arr_1,_BGR_Arr_1+3
 32356  016FF4  C45B  F45E         	movff	_BGR_Arr_1+1,_BGR_Arr_1+4
 32357  016FF8  C45C  F45F         	movff	_BGR_Arr_1+2,_BGR_Arr_1+5
 32358                           
 32359                           ;Power_Meter.c: 545: BGR_Arr_1[0] = B_Gap_Ratio;
 32360  016FFC  C103  F45A         	movff	_B_Gap_Ratio,_BGR_Arr_1
 32361  017000  C104  F45B         	movff	_B_Gap_Ratio+1,_BGR_Arr_1+1
 32362  017004  C105  F45C         	movff	_B_Gap_Ratio+2,_BGR_Arr_1+2
 32363  017008  0012               	return		;funcret
 32364  01700A                     __end_of_B_PF_Calc:
 32365                           	opt stack 0
 32366                           tblptru	equ	0xFF8
 32367                           tblptrh	equ	0xFF7
 32368                           tblptrl	equ	0xFF6
 32369                           tablat	equ	0xFF5
 32370                           prodh	equ	0xFF4
 32371                           prodl	equ	0xFF3
 32372                           intcon	equ	0xFF2
 32373                           postinc0	equ	0xFEE
 32374                           wreg	equ	0xFE8
 32375                           postdec1	equ	0xFE5
 32376                           fsr1h	equ	0xFE2
 32377                           fsr1l	equ	0xFE1
 32378                           indf2	equ	0xFDF
 32379                           postinc2	equ	0xFDE
 32380                           postdec2	equ	0xFDD
 32381                           fsr2h	equ	0xFDA
 32382                           fsr2l	equ	0xFD9
 32383                           status	equ	0xFD8
 32384                           
 32385 ;; *************** function _B_PF_Avg *****************
 32386 ;; Defined at:
 32387 ;;		line 549 in file "Power_Meter.c"
 32388 ;; Parameters:    Size  Location     Type
 32389 ;;		None
 32390 ;; Auto vars:     Size  Location     Type
 32391 ;;		None
 32392 ;; Return value:  Size  Location     Type
 32393 ;;                  1    wreg      void 
 32394 ;; Registers used:
 32395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32396 ;; Tracked objects:
 32397 ;;		On entry : 0/0
 32398 ;;		On exit  : 0/0
 32399 ;;		Unchanged: 0/0
 32400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32402 ;;      Locals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 32403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32404 ;;      Totals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 32405 ;;Total ram usage:       84 bytes
 32406 ;; Hardware stack levels used:    1
 32407 ;; Hardware stack levels required when called:    8
 32408 ;; This function calls:
 32409 ;;		___ftadd
 32410 ;;		___ftdiv
 32411 ;;		___ftge
 32412 ;;		___ftmul
 32413 ;;		_cos
 32414 ;; This function is called by:
 32415 ;;		_main
 32416 ;; This function uses a non-reentrant model
 32417 ;;
 32418                           
 32419                           	psect	text123
 32420  01296A                     __ptext123:
 32421                           	opt stack 0
 32422  01296A                     _B_PF_Avg:
 32423                           	opt stack 22
 32424                           
 32425                           ;Power_Meter.c: 551: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 32426                           
 32427                           ;incstack = 0
 32428  01296A  C463  F090         	movff	_BGR_Arr_1+9,___ftadd@f2
 32429  01296E  C464  F091         	movff	_BGR_Arr_1+10,___ftadd@f2+1
 32430  012972  C465  F092         	movff	_BGR_Arr_1+11,___ftadd@f2+2
 32431  012976  C466  F08D         	movff	_BGR_Arr_1+12,___ftadd@f1
 32432  01297A  C467  F08E         	movff	_BGR_Arr_1+13,___ftadd@f1+1
 32433  01297E  C468  F08F         	movff	_BGR_Arr_1+14,___ftadd@f1+2
 32434  012982  EC69  F0B2         	call	___ftadd	;wreg free
 32435  012986  C08D  F6C0         	movff	?___ftadd,_B_PF_Avg$8116
 32436  01298A  C08E  F6C1         	movff	?___ftadd+1,_B_PF_Avg$8116+1
 32437  01298E  C08F  F6C2         	movff	?___ftadd+2,_B_PF_Avg$8116+2
 32438                           
 32439                           ;Power_Meter.c: 551: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 32440  012992  C460  F090         	movff	_BGR_Arr_1+6,___ftadd@f2
 32441  012996  C461  F091         	movff	_BGR_Arr_1+7,___ftadd@f2+1
 32442  01299A  C462  F092         	movff	_BGR_Arr_1+8,___ftadd@f2+2
 32443  01299E  C6C0  F08D         	movff	_B_PF_Avg$8116,___ftadd@f1
 32444  0129A2  C6C1  F08E         	movff	_B_PF_Avg$8116+1,___ftadd@f1+1
 32445  0129A6  C6C2  F08F         	movff	_B_PF_Avg$8116+2,___ftadd@f1+2
 32446  0129AA  EC69  F0B2         	call	___ftadd	;wreg free
 32447  0129AE  C08D  F6C3         	movff	?___ftadd,_B_PF_Avg$8117
 32448  0129B2  C08E  F6C4         	movff	?___ftadd+1,_B_PF_Avg$8117+1
 32449  0129B6  C08F  F6C5         	movff	?___ftadd+2,_B_PF_Avg$8117+2
 32450                           
 32451                           ;Power_Meter.c: 551: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 32452  0129BA  C45D  F090         	movff	_BGR_Arr_1+3,___ftadd@f2
 32453  0129BE  C45E  F091         	movff	_BGR_Arr_1+4,___ftadd@f2+1
 32454  0129C2  C45F  F092         	movff	_BGR_Arr_1+5,___ftadd@f2+2
 32455  0129C6  C6C3  F08D         	movff	_B_PF_Avg$8117,___ftadd@f1
 32456  0129CA  C6C4  F08E         	movff	_B_PF_Avg$8117+1,___ftadd@f1+1
 32457  0129CE  C6C5  F08F         	movff	_B_PF_Avg$8117+2,___ftadd@f1+2
 32458  0129D2  EC69  F0B2         	call	___ftadd	;wreg free
 32459  0129D6  C08D  F6C6         	movff	?___ftadd,_B_PF_Avg$8118
 32460  0129DA  C08E  F6C7         	movff	?___ftadd+1,_B_PF_Avg$8118+1
 32461  0129DE  C08F  F6C8         	movff	?___ftadd+2,_B_PF_Avg$8118+2
 32462                           
 32463                           ;Power_Meter.c: 551: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 32464  0129E2  C45A  F090         	movff	_BGR_Arr_1,___ftadd@f2
 32465  0129E6  C45B  F091         	movff	_BGR_Arr_1+1,___ftadd@f2+1
 32466  0129EA  C45C  F092         	movff	_BGR_Arr_1+2,___ftadd@f2+2
 32467  0129EE  C6C6  F08D         	movff	_B_PF_Avg$8118,___ftadd@f1
 32468  0129F2  C6C7  F08E         	movff	_B_PF_Avg$8118+1,___ftadd@f1+1
 32469  0129F6  C6C8  F08F         	movff	_B_PF_Avg$8118+2,___ftadd@f1+2
 32470  0129FA  EC69  F0B2         	call	___ftadd	;wreg free
 32471  0129FE  C08D  F0A5         	movff	?___ftadd,___ftdiv@f1
 32472  012A02  C08E  F0A6         	movff	?___ftadd+1,___ftdiv@f1+1
 32473  012A06  C08F  F0A7         	movff	?___ftadd+2,___ftdiv@f1+2
 32474  012A0A  0E00               	movlw	0
 32475  012A0C  0100               	movlb	0	; () banked
 32476  012A0E  6FA8               	movwf	___ftdiv@f2& (0+255),b
 32477  012A10  0EA0               	movlw	160
 32478  012A12  0100               	movlb	0	; () banked
 32479  012A14  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 32480  012A16  0E40               	movlw	64
 32481  012A18  0100               	movlb	0	; () banked
 32482  012A1A  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 32483  012A1C  EC53  F0C1         	call	___ftdiv	;wreg free
 32484  012A20  C0A5  F203         	movff	?___ftdiv,_BGR_Avg_1
 32485  012A24  C0A6  F204         	movff	?___ftdiv+1,_BGR_Avg_1+1
 32486  012A28  C0A7  F205         	movff	?___ftdiv+2,_BGR_Avg_1+2
 32487                           
 32488                           ;Power_Meter.c: 554: BGR_Arr[29] = BGR_Arr[28];
 32489  012A2C  C454  F457         	movff	_BGR_Arr+84,_BGR_Arr+87
 32490  012A30  C455  F458         	movff	_BGR_Arr+85,_BGR_Arr+88
 32491  012A34  C456  F459         	movff	_BGR_Arr+86,_BGR_Arr+89
 32492                           
 32493                           ;Power_Meter.c: 555: BGR_Arr[28] = BGR_Arr[27];
 32494  012A38  C451  F454         	movff	_BGR_Arr+81,_BGR_Arr+84
 32495  012A3C  C452  F455         	movff	_BGR_Arr+82,_BGR_Arr+85
 32496  012A40  C453  F456         	movff	_BGR_Arr+83,_BGR_Arr+86
 32497                           
 32498                           ;Power_Meter.c: 556: BGR_Arr[27] = BGR_Arr[26];
 32499  012A44  C44E  F451         	movff	_BGR_Arr+78,_BGR_Arr+81
 32500  012A48  C44F  F452         	movff	_BGR_Arr+79,_BGR_Arr+82
 32501  012A4C  C450  F453         	movff	_BGR_Arr+80,_BGR_Arr+83
 32502                           
 32503                           ;Power_Meter.c: 557: BGR_Arr[26] = BGR_Arr[25];
 32504  012A50  C44B  F44E         	movff	_BGR_Arr+75,_BGR_Arr+78
 32505  012A54  C44C  F44F         	movff	_BGR_Arr+76,_BGR_Arr+79
 32506  012A58  C44D  F450         	movff	_BGR_Arr+77,_BGR_Arr+80
 32507                           
 32508                           ;Power_Meter.c: 558: BGR_Arr[25] = BGR_Arr[24];
 32509  012A5C  C448  F44B         	movff	_BGR_Arr+72,_BGR_Arr+75
 32510  012A60  C449  F44C         	movff	_BGR_Arr+73,_BGR_Arr+76
 32511  012A64  C44A  F44D         	movff	_BGR_Arr+74,_BGR_Arr+77
 32512                           
 32513                           ;Power_Meter.c: 559: BGR_Arr[24] = BGR_Arr[23];
 32514  012A68  C445  F448         	movff	_BGR_Arr+69,_BGR_Arr+72
 32515  012A6C  C446  F449         	movff	_BGR_Arr+70,_BGR_Arr+73
 32516  012A70  C447  F44A         	movff	_BGR_Arr+71,_BGR_Arr+74
 32517                           
 32518                           ;Power_Meter.c: 560: BGR_Arr[23] = BGR_Arr[22];
 32519  012A74  C442  F445         	movff	_BGR_Arr+66,_BGR_Arr+69
 32520  012A78  C443  F446         	movff	_BGR_Arr+67,_BGR_Arr+70
 32521  012A7C  C444  F447         	movff	_BGR_Arr+68,_BGR_Arr+71
 32522                           
 32523                           ;Power_Meter.c: 561: BGR_Arr[22] = BGR_Arr[21];
 32524  012A80  C43F  F442         	movff	_BGR_Arr+63,_BGR_Arr+66
 32525  012A84  C440  F443         	movff	_BGR_Arr+64,_BGR_Arr+67
 32526  012A88  C441  F444         	movff	_BGR_Arr+65,_BGR_Arr+68
 32527                           
 32528                           ;Power_Meter.c: 562: BGR_Arr[21] = BGR_Arr[20];
 32529  012A8C  C43C  F43F         	movff	_BGR_Arr+60,_BGR_Arr+63
 32530  012A90  C43D  F440         	movff	_BGR_Arr+61,_BGR_Arr+64
 32531  012A94  C43E  F441         	movff	_BGR_Arr+62,_BGR_Arr+65
 32532                           
 32533                           ;Power_Meter.c: 563: BGR_Arr[20] = BGR_Arr[19];
 32534  012A98  C439  F43C         	movff	_BGR_Arr+57,_BGR_Arr+60
 32535  012A9C  C43A  F43D         	movff	_BGR_Arr+58,_BGR_Arr+61
 32536  012AA0  C43B  F43E         	movff	_BGR_Arr+59,_BGR_Arr+62
 32537                           
 32538                           ;Power_Meter.c: 564: BGR_Arr[19] = BGR_Arr[18];
 32539  012AA4  C436  F439         	movff	_BGR_Arr+54,_BGR_Arr+57
 32540  012AA8  C437  F43A         	movff	_BGR_Arr+55,_BGR_Arr+58
 32541  012AAC  C438  F43B         	movff	_BGR_Arr+56,_BGR_Arr+59
 32542                           
 32543                           ;Power_Meter.c: 565: BGR_Arr[18] = BGR_Arr[17];
 32544  012AB0  C433  F436         	movff	_BGR_Arr+51,_BGR_Arr+54
 32545  012AB4  C434  F437         	movff	_BGR_Arr+52,_BGR_Arr+55
 32546  012AB8  C435  F438         	movff	_BGR_Arr+53,_BGR_Arr+56
 32547                           
 32548                           ;Power_Meter.c: 566: BGR_Arr[17] = BGR_Arr[16];
 32549  012ABC  C430  F433         	movff	_BGR_Arr+48,_BGR_Arr+51
 32550  012AC0  C431  F434         	movff	_BGR_Arr+49,_BGR_Arr+52
 32551  012AC4  C432  F435         	movff	_BGR_Arr+50,_BGR_Arr+53
 32552                           
 32553                           ;Power_Meter.c: 567: BGR_Arr[16] = BGR_Arr[15];
 32554  012AC8  C42D  F430         	movff	_BGR_Arr+45,_BGR_Arr+48
 32555  012ACC  C42E  F431         	movff	_BGR_Arr+46,_BGR_Arr+49
 32556  012AD0  C42F  F432         	movff	_BGR_Arr+47,_BGR_Arr+50
 32557                           
 32558                           ;Power_Meter.c: 568: BGR_Arr[15] = BGR_Arr[14];
 32559  012AD4  C42A  F42D         	movff	_BGR_Arr+42,_BGR_Arr+45
 32560  012AD8  C42B  F42E         	movff	_BGR_Arr+43,_BGR_Arr+46
 32561  012ADC  C42C  F42F         	movff	_BGR_Arr+44,_BGR_Arr+47
 32562                           
 32563                           ;Power_Meter.c: 569: BGR_Arr[14] = BGR_Arr[13];
 32564  012AE0  C427  F42A         	movff	_BGR_Arr+39,_BGR_Arr+42
 32565  012AE4  C428  F42B         	movff	_BGR_Arr+40,_BGR_Arr+43
 32566  012AE8  C429  F42C         	movff	_BGR_Arr+41,_BGR_Arr+44
 32567                           
 32568                           ;Power_Meter.c: 570: BGR_Arr[13] = BGR_Arr[12];
 32569  012AEC  C424  F427         	movff	_BGR_Arr+36,_BGR_Arr+39
 32570  012AF0  C425  F428         	movff	_BGR_Arr+37,_BGR_Arr+40
 32571  012AF4  C426  F429         	movff	_BGR_Arr+38,_BGR_Arr+41
 32572                           
 32573                           ;Power_Meter.c: 571: BGR_Arr[12] = BGR_Arr[11];
 32574  012AF8  C421  F424         	movff	_BGR_Arr+33,_BGR_Arr+36
 32575  012AFC  C422  F425         	movff	_BGR_Arr+34,_BGR_Arr+37
 32576  012B00  C423  F426         	movff	_BGR_Arr+35,_BGR_Arr+38
 32577                           
 32578                           ;Power_Meter.c: 572: BGR_Arr[11] = BGR_Arr[10];
 32579  012B04  C41E  F421         	movff	_BGR_Arr+30,_BGR_Arr+33
 32580  012B08  C41F  F422         	movff	_BGR_Arr+31,_BGR_Arr+34
 32581  012B0C  C420  F423         	movff	_BGR_Arr+32,_BGR_Arr+35
 32582                           
 32583                           ;Power_Meter.c: 573: BGR_Arr[10] = BGR_Arr[9];
 32584  012B10  C41B  F41E         	movff	_BGR_Arr+27,_BGR_Arr+30
 32585  012B14  C41C  F41F         	movff	_BGR_Arr+28,_BGR_Arr+31
 32586  012B18  C41D  F420         	movff	_BGR_Arr+29,_BGR_Arr+32
 32587                           
 32588                           ;Power_Meter.c: 574: BGR_Arr[9] = BGR_Arr[8];
 32589  012B1C  C418  F41B         	movff	_BGR_Arr+24,_BGR_Arr+27
 32590  012B20  C419  F41C         	movff	_BGR_Arr+25,_BGR_Arr+28
 32591  012B24  C41A  F41D         	movff	_BGR_Arr+26,_BGR_Arr+29
 32592                           
 32593                           ;Power_Meter.c: 575: BGR_Arr[8] = BGR_Arr[7];
 32594  012B28  C415  F418         	movff	_BGR_Arr+21,_BGR_Arr+24
 32595  012B2C  C416  F419         	movff	_BGR_Arr+22,_BGR_Arr+25
 32596  012B30  C417  F41A         	movff	_BGR_Arr+23,_BGR_Arr+26
 32597                           
 32598                           ;Power_Meter.c: 576: BGR_Arr[7] = BGR_Arr[6];
 32599  012B34  C412  F415         	movff	_BGR_Arr+18,_BGR_Arr+21
 32600  012B38  C413  F416         	movff	_BGR_Arr+19,_BGR_Arr+22
 32601  012B3C  C414  F417         	movff	_BGR_Arr+20,_BGR_Arr+23
 32602                           
 32603                           ;Power_Meter.c: 577: BGR_Arr[6] = BGR_Arr[5];
 32604  012B40  C40F  F412         	movff	_BGR_Arr+15,_BGR_Arr+18
 32605  012B44  C410  F413         	movff	_BGR_Arr+16,_BGR_Arr+19
 32606  012B48  C411  F414         	movff	_BGR_Arr+17,_BGR_Arr+20
 32607                           
 32608                           ;Power_Meter.c: 578: BGR_Arr[5] = BGR_Arr[4];
 32609  012B4C  C40C  F40F         	movff	_BGR_Arr+12,_BGR_Arr+15
 32610  012B50  C40D  F410         	movff	_BGR_Arr+13,_BGR_Arr+16
 32611  012B54  C40E  F411         	movff	_BGR_Arr+14,_BGR_Arr+17
 32612                           
 32613                           ;Power_Meter.c: 579: BGR_Arr[4] = BGR_Arr[3];
 32614  012B58  C409  F40C         	movff	_BGR_Arr+9,_BGR_Arr+12
 32615  012B5C  C40A  F40D         	movff	_BGR_Arr+10,_BGR_Arr+13
 32616  012B60  C40B  F40E         	movff	_BGR_Arr+11,_BGR_Arr+14
 32617                           
 32618                           ;Power_Meter.c: 580: BGR_Arr[3] = BGR_Arr[2];
 32619  012B64  C406  F409         	movff	_BGR_Arr+6,_BGR_Arr+9
 32620  012B68  C407  F40A         	movff	_BGR_Arr+7,_BGR_Arr+10
 32621  012B6C  C408  F40B         	movff	_BGR_Arr+8,_BGR_Arr+11
 32622                           
 32623                           ;Power_Meter.c: 581: BGR_Arr[2] = BGR_Arr[1];
 32624  012B70  C403  F406         	movff	_BGR_Arr+3,_BGR_Arr+6
 32625  012B74  C404  F407         	movff	_BGR_Arr+4,_BGR_Arr+7
 32626  012B78  C405  F408         	movff	_BGR_Arr+5,_BGR_Arr+8
 32627                           
 32628                           ;Power_Meter.c: 582: BGR_Arr[1] = BGR_Arr[0];
 32629  012B7C  C400  F403         	movff	_BGR_Arr,_BGR_Arr+3
 32630  012B80  C401  F404         	movff	_BGR_Arr+1,_BGR_Arr+4
 32631  012B84  C402  F405         	movff	_BGR_Arr+2,_BGR_Arr+5
 32632                           
 32633                           ;Power_Meter.c: 584: if( (BGR_Avg_1 > (B_Gap_Ratio * 0.8)) && (BGR_Avg_1 < (B_Gap_Ratio 
      +                          * 1.2)) )
 32634  012B88  0ECD               	movlw	205
 32635  012B8A  0100               	movlb	0	; () banked
 32636  012B8C  6F77               	movwf	___ftmul@f2& (0+255),b
 32637  012B8E  0E4C               	movlw	76
 32638  012B90  0100               	movlb	0	; () banked
 32639  012B92  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32640  012B94  0E3F               	movlw	63
 32641  012B96  0100               	movlb	0	; () banked
 32642  012B98  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32643  012B9A  C103  F074         	movff	_B_Gap_Ratio,___ftmul@f1
 32644  012B9E  C104  F075         	movff	_B_Gap_Ratio+1,___ftmul@f1+1
 32645  012BA2  C105  F076         	movff	_B_Gap_Ratio+2,___ftmul@f1+2
 32646  012BA6  ECA4  F0C0         	call	___ftmul	;wreg free
 32647  012BAA  C074  F099         	movff	?___ftmul,___ftge@ff1
 32648  012BAE  C075  F09A         	movff	?___ftmul+1,___ftge@ff1+1
 32649  012BB2  C076  F09B         	movff	?___ftmul+2,___ftge@ff1+2
 32650  012BB6  C203  F09C         	movff	_BGR_Avg_1,___ftge@ff2
 32651  012BBA  C204  F09D         	movff	_BGR_Avg_1+1,___ftge@ff2+1
 32652  012BBE  C205  F09E         	movff	_BGR_Avg_1+2,___ftge@ff2+2
 32653  012BC2  ECEB  F0CA         	call	___ftge	;wreg free
 32654  012BC6  0100               	movlb	0	; () banked
 32655  012BC8  B0D8               	btfsc	status,0,c
 32656  012BCA  D028               	goto	l22723
 32657                           
 32658                           ; BSR set to: 0
 32659  012BCC  C203  F099         	movff	_BGR_Avg_1,___ftge@ff1
 32660  012BD0  C204  F09A         	movff	_BGR_Avg_1+1,___ftge@ff1+1
 32661  012BD4  C205  F09B         	movff	_BGR_Avg_1+2,___ftge@ff1+2
 32662  012BD8  0E9A               	movlw	154
 32663  012BDA  0100               	movlb	0	; () banked
 32664  012BDC  6F77               	movwf	___ftmul@f2& (0+255),b
 32665  012BDE  0E99               	movlw	153
 32666  012BE0  0100               	movlb	0	; () banked
 32667  012BE2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 32668  012BE4  0E3F               	movlw	63
 32669  012BE6  0100               	movlb	0	; () banked
 32670  012BE8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 32671  012BEA  C103  F074         	movff	_B_Gap_Ratio,___ftmul@f1
 32672  012BEE  C104  F075         	movff	_B_Gap_Ratio+1,___ftmul@f1+1
 32673  012BF2  C105  F076         	movff	_B_Gap_Ratio+2,___ftmul@f1+2
 32674  012BF6  ECA4  F0C0         	call	___ftmul	;wreg free
 32675  012BFA  C074  F09C         	movff	?___ftmul,___ftge@ff2
 32676  012BFE  C075  F09D         	movff	?___ftmul+1,___ftge@ff2+1
 32677  012C02  C076  F09E         	movff	?___ftmul+2,___ftge@ff2+2
 32678  012C06  ECEB  F0CA         	call	___ftge	;wreg free
 32679  012C0A  0100               	movlb	0	; () banked
 32680  012C0C  B0D8               	btfsc	status,0,c
 32681  012C0E  D006               	goto	l22723
 32682                           
 32683                           ; BSR set to: 0
 32684                           ;Power_Meter.c: 585: {
 32685                           ;Power_Meter.c: 586: BGR_Arr[0] = B_Gap_Ratio;
 32686  012C10  C103  F400         	movff	_B_Gap_Ratio,_BGR_Arr
 32687  012C14  C104  F401         	movff	_B_Gap_Ratio+1,_BGR_Arr+1
 32688  012C18  C105  F402         	movff	_B_Gap_Ratio+2,_BGR_Arr+2
 32689  012C1C                     l22723:
 32690                           
 32691                           ; BSR set to: 0
 32692                           ;Power_Meter.c: 587: }
 32693                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32694                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32695                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32696                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32697  012C1C  C454  F090         	movff	_BGR_Arr+84,___ftadd@f2
 32698  012C20  C455  F091         	movff	_BGR_Arr+85,___ftadd@f2+1
 32699  012C24  C456  F092         	movff	_BGR_Arr+86,___ftadd@f2+2
 32700  012C28  C457  F08D         	movff	_BGR_Arr+87,___ftadd@f1
 32701  012C2C  C458  F08E         	movff	_BGR_Arr+88,___ftadd@f1+1
 32702  012C30  C459  F08F         	movff	_BGR_Arr+89,___ftadd@f1+2
 32703  012C34  EC69  F0B2         	call	___ftadd	;wreg free
 32704  012C38  C08D  F6C0         	movff	?___ftadd,_B_PF_Avg$8116
 32705  012C3C  C08E  F6C1         	movff	?___ftadd+1,_B_PF_Avg$8116+1
 32706  012C40  C08F  F6C2         	movff	?___ftadd+2,_B_PF_Avg$8116+2
 32707                           
 32708                           ;Power_Meter.c: 587: }
 32709                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32710                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32711                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32712                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32713  012C44  C451  F090         	movff	_BGR_Arr+81,___ftadd@f2
 32714  012C48  C452  F091         	movff	_BGR_Arr+82,___ftadd@f2+1
 32715  012C4C  C453  F092         	movff	_BGR_Arr+83,___ftadd@f2+2
 32716  012C50  C6C0  F08D         	movff	_B_PF_Avg$8116,___ftadd@f1
 32717  012C54  C6C1  F08E         	movff	_B_PF_Avg$8116+1,___ftadd@f1+1
 32718  012C58  C6C2  F08F         	movff	_B_PF_Avg$8116+2,___ftadd@f1+2
 32719  012C5C  EC69  F0B2         	call	___ftadd	;wreg free
 32720  012C60  C08D  F6C3         	movff	?___ftadd,_B_PF_Avg$8117
 32721  012C64  C08E  F6C4         	movff	?___ftadd+1,_B_PF_Avg$8117+1
 32722  012C68  C08F  F6C5         	movff	?___ftadd+2,_B_PF_Avg$8117+2
 32723                           
 32724                           ;Power_Meter.c: 587: }
 32725                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32726                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32727                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32728                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32729  012C6C  C44E  F090         	movff	_BGR_Arr+78,___ftadd@f2
 32730  012C70  C44F  F091         	movff	_BGR_Arr+79,___ftadd@f2+1
 32731  012C74  C450  F092         	movff	_BGR_Arr+80,___ftadd@f2+2
 32732  012C78  C6C3  F08D         	movff	_B_PF_Avg$8117,___ftadd@f1
 32733  012C7C  C6C4  F08E         	movff	_B_PF_Avg$8117+1,___ftadd@f1+1
 32734  012C80  C6C5  F08F         	movff	_B_PF_Avg$8117+2,___ftadd@f1+2
 32735  012C84  EC69  F0B2         	call	___ftadd	;wreg free
 32736  012C88  C08D  F6C6         	movff	?___ftadd,_B_PF_Avg$8118
 32737  012C8C  C08E  F6C7         	movff	?___ftadd+1,_B_PF_Avg$8118+1
 32738  012C90  C08F  F6C8         	movff	?___ftadd+2,_B_PF_Avg$8118+2
 32739                           
 32740                           ;Power_Meter.c: 587: }
 32741                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32742                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32743                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32744                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32745  012C94  C44B  F090         	movff	_BGR_Arr+75,___ftadd@f2
 32746  012C98  C44C  F091         	movff	_BGR_Arr+76,___ftadd@f2+1
 32747  012C9C  C44D  F092         	movff	_BGR_Arr+77,___ftadd@f2+2
 32748  012CA0  C6C6  F08D         	movff	_B_PF_Avg$8118,___ftadd@f1
 32749  012CA4  C6C7  F08E         	movff	_B_PF_Avg$8118+1,___ftadd@f1+1
 32750  012CA8  C6C8  F08F         	movff	_B_PF_Avg$8118+2,___ftadd@f1+2
 32751  012CAC  EC69  F0B2         	call	___ftadd	;wreg free
 32752  012CB0  C08D  F675         	movff	?___ftadd,_B_PF_Avg$8119
 32753  012CB4  C08E  F676         	movff	?___ftadd+1,_B_PF_Avg$8119+1
 32754  012CB8  C08F  F677         	movff	?___ftadd+2,_B_PF_Avg$8119+2
 32755                           
 32756                           ;Power_Meter.c: 587: }
 32757                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32758                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32759                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32760                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32761  012CBC  C448  F090         	movff	_BGR_Arr+72,___ftadd@f2
 32762  012CC0  C449  F091         	movff	_BGR_Arr+73,___ftadd@f2+1
 32763  012CC4  C44A  F092         	movff	_BGR_Arr+74,___ftadd@f2+2
 32764  012CC8  C675  F08D         	movff	_B_PF_Avg$8119,___ftadd@f1
 32765  012CCC  C676  F08E         	movff	_B_PF_Avg$8119+1,___ftadd@f1+1
 32766  012CD0  C677  F08F         	movff	_B_PF_Avg$8119+2,___ftadd@f1+2
 32767  012CD4  EC69  F0B2         	call	___ftadd	;wreg free
 32768  012CD8  C08D  F678         	movff	?___ftadd,_B_PF_Avg$8120
 32769  012CDC  C08E  F679         	movff	?___ftadd+1,_B_PF_Avg$8120+1
 32770  012CE0  C08F  F67A         	movff	?___ftadd+2,_B_PF_Avg$8120+2
 32771                           
 32772                           ;Power_Meter.c: 587: }
 32773                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32774                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32775                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32776                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32777  012CE4  C445  F090         	movff	_BGR_Arr+69,___ftadd@f2
 32778  012CE8  C446  F091         	movff	_BGR_Arr+70,___ftadd@f2+1
 32779  012CEC  C447  F092         	movff	_BGR_Arr+71,___ftadd@f2+2
 32780  012CF0  C678  F08D         	movff	_B_PF_Avg$8120,___ftadd@f1
 32781  012CF4  C679  F08E         	movff	_B_PF_Avg$8120+1,___ftadd@f1+1
 32782  012CF8  C67A  F08F         	movff	_B_PF_Avg$8120+2,___ftadd@f1+2
 32783  012CFC  EC69  F0B2         	call	___ftadd	;wreg free
 32784  012D00  C08D  F67B         	movff	?___ftadd,_B_PF_Avg$8121
 32785  012D04  C08E  F67C         	movff	?___ftadd+1,_B_PF_Avg$8121+1
 32786  012D08  C08F  F67D         	movff	?___ftadd+2,_B_PF_Avg$8121+2
 32787                           
 32788                           ;Power_Meter.c: 587: }
 32789                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32790                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32791                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32792                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32793  012D0C  C442  F090         	movff	_BGR_Arr+66,___ftadd@f2
 32794  012D10  C443  F091         	movff	_BGR_Arr+67,___ftadd@f2+1
 32795  012D14  C444  F092         	movff	_BGR_Arr+68,___ftadd@f2+2
 32796  012D18  C67B  F08D         	movff	_B_PF_Avg$8121,___ftadd@f1
 32797  012D1C  C67C  F08E         	movff	_B_PF_Avg$8121+1,___ftadd@f1+1
 32798  012D20  C67D  F08F         	movff	_B_PF_Avg$8121+2,___ftadd@f1+2
 32799  012D24  EC69  F0B2         	call	___ftadd	;wreg free
 32800  012D28  C08D  F67E         	movff	?___ftadd,_B_PF_Avg$8122
 32801  012D2C  C08E  F67F         	movff	?___ftadd+1,_B_PF_Avg$8122+1
 32802  012D30  C08F  F680         	movff	?___ftadd+2,_B_PF_Avg$8122+2
 32803                           
 32804                           ;Power_Meter.c: 587: }
 32805                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32806                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32807                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32808                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32809  012D34  C43F  F090         	movff	_BGR_Arr+63,___ftadd@f2
 32810  012D38  C440  F091         	movff	_BGR_Arr+64,___ftadd@f2+1
 32811  012D3C  C441  F092         	movff	_BGR_Arr+65,___ftadd@f2+2
 32812  012D40  C67E  F08D         	movff	_B_PF_Avg$8122,___ftadd@f1
 32813  012D44  C67F  F08E         	movff	_B_PF_Avg$8122+1,___ftadd@f1+1
 32814  012D48  C680  F08F         	movff	_B_PF_Avg$8122+2,___ftadd@f1+2
 32815  012D4C  EC69  F0B2         	call	___ftadd	;wreg free
 32816  012D50  C08D  F681         	movff	?___ftadd,_B_PF_Avg$8123
 32817  012D54  C08E  F682         	movff	?___ftadd+1,_B_PF_Avg$8123+1
 32818  012D58  C08F  F683         	movff	?___ftadd+2,_B_PF_Avg$8123+2
 32819                           
 32820                           ;Power_Meter.c: 587: }
 32821                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32822                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32823                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32824                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32825  012D5C  C43C  F090         	movff	_BGR_Arr+60,___ftadd@f2
 32826  012D60  C43D  F091         	movff	_BGR_Arr+61,___ftadd@f2+1
 32827  012D64  C43E  F092         	movff	_BGR_Arr+62,___ftadd@f2+2
 32828  012D68  C681  F08D         	movff	_B_PF_Avg$8123,___ftadd@f1
 32829  012D6C  C682  F08E         	movff	_B_PF_Avg$8123+1,___ftadd@f1+1
 32830  012D70  C683  F08F         	movff	_B_PF_Avg$8123+2,___ftadd@f1+2
 32831  012D74  EC69  F0B2         	call	___ftadd	;wreg free
 32832  012D78  C08D  F684         	movff	?___ftadd,_B_PF_Avg$8124
 32833  012D7C  C08E  F685         	movff	?___ftadd+1,_B_PF_Avg$8124+1
 32834  012D80  C08F  F686         	movff	?___ftadd+2,_B_PF_Avg$8124+2
 32835                           
 32836                           ;Power_Meter.c: 587: }
 32837                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32838                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32839                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32840                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32841  012D84  C439  F090         	movff	_BGR_Arr+57,___ftadd@f2
 32842  012D88  C43A  F091         	movff	_BGR_Arr+58,___ftadd@f2+1
 32843  012D8C  C43B  F092         	movff	_BGR_Arr+59,___ftadd@f2+2
 32844  012D90  C684  F08D         	movff	_B_PF_Avg$8124,___ftadd@f1
 32845  012D94  C685  F08E         	movff	_B_PF_Avg$8124+1,___ftadd@f1+1
 32846  012D98  C686  F08F         	movff	_B_PF_Avg$8124+2,___ftadd@f1+2
 32847  012D9C  EC69  F0B2         	call	___ftadd	;wreg free
 32848  012DA0  C08D  F687         	movff	?___ftadd,_B_PF_Avg$8125
 32849  012DA4  C08E  F688         	movff	?___ftadd+1,_B_PF_Avg$8125+1
 32850  012DA8  C08F  F689         	movff	?___ftadd+2,_B_PF_Avg$8125+2
 32851                           
 32852                           ;Power_Meter.c: 587: }
 32853                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32854                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32855                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32856                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32857  012DAC  C436  F090         	movff	_BGR_Arr+54,___ftadd@f2
 32858  012DB0  C437  F091         	movff	_BGR_Arr+55,___ftadd@f2+1
 32859  012DB4  C438  F092         	movff	_BGR_Arr+56,___ftadd@f2+2
 32860  012DB8  C687  F08D         	movff	_B_PF_Avg$8125,___ftadd@f1
 32861  012DBC  C688  F08E         	movff	_B_PF_Avg$8125+1,___ftadd@f1+1
 32862  012DC0  C689  F08F         	movff	_B_PF_Avg$8125+2,___ftadd@f1+2
 32863  012DC4  EC69  F0B2         	call	___ftadd	;wreg free
 32864  012DC8  C08D  F68A         	movff	?___ftadd,_B_PF_Avg$8126
 32865  012DCC  C08E  F68B         	movff	?___ftadd+1,_B_PF_Avg$8126+1
 32866  012DD0  C08F  F68C         	movff	?___ftadd+2,_B_PF_Avg$8126+2
 32867                           
 32868                           ;Power_Meter.c: 587: }
 32869                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32870                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32871                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32872                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32873  012DD4  C433  F090         	movff	_BGR_Arr+51,___ftadd@f2
 32874  012DD8  C434  F091         	movff	_BGR_Arr+52,___ftadd@f2+1
 32875  012DDC  C435  F092         	movff	_BGR_Arr+53,___ftadd@f2+2
 32876  012DE0  C68A  F08D         	movff	_B_PF_Avg$8126,___ftadd@f1
 32877  012DE4  C68B  F08E         	movff	_B_PF_Avg$8126+1,___ftadd@f1+1
 32878  012DE8  C68C  F08F         	movff	_B_PF_Avg$8126+2,___ftadd@f1+2
 32879  012DEC  EC69  F0B2         	call	___ftadd	;wreg free
 32880  012DF0  C08D  F68D         	movff	?___ftadd,_B_PF_Avg$8127
 32881  012DF4  C08E  F68E         	movff	?___ftadd+1,_B_PF_Avg$8127+1
 32882  012DF8  C08F  F68F         	movff	?___ftadd+2,_B_PF_Avg$8127+2
 32883                           
 32884                           ;Power_Meter.c: 587: }
 32885                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32886                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32887                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32888                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32889  012DFC  C430  F090         	movff	_BGR_Arr+48,___ftadd@f2
 32890  012E00  C431  F091         	movff	_BGR_Arr+49,___ftadd@f2+1
 32891  012E04  C432  F092         	movff	_BGR_Arr+50,___ftadd@f2+2
 32892  012E08  C68D  F08D         	movff	_B_PF_Avg$8127,___ftadd@f1
 32893  012E0C  C68E  F08E         	movff	_B_PF_Avg$8127+1,___ftadd@f1+1
 32894  012E10  C68F  F08F         	movff	_B_PF_Avg$8127+2,___ftadd@f1+2
 32895  012E14  EC69  F0B2         	call	___ftadd	;wreg free
 32896  012E18  C08D  F690         	movff	?___ftadd,_B_PF_Avg$8128
 32897  012E1C  C08E  F691         	movff	?___ftadd+1,_B_PF_Avg$8128+1
 32898  012E20  C08F  F692         	movff	?___ftadd+2,_B_PF_Avg$8128+2
 32899                           
 32900                           ;Power_Meter.c: 587: }
 32901                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32902                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32903                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32904                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32905  012E24  C42D  F090         	movff	_BGR_Arr+45,___ftadd@f2
 32906  012E28  C42E  F091         	movff	_BGR_Arr+46,___ftadd@f2+1
 32907  012E2C  C42F  F092         	movff	_BGR_Arr+47,___ftadd@f2+2
 32908  012E30  C690  F08D         	movff	_B_PF_Avg$8128,___ftadd@f1
 32909  012E34  C691  F08E         	movff	_B_PF_Avg$8128+1,___ftadd@f1+1
 32910  012E38  C692  F08F         	movff	_B_PF_Avg$8128+2,___ftadd@f1+2
 32911  012E3C  EC69  F0B2         	call	___ftadd	;wreg free
 32912  012E40  C08D  F693         	movff	?___ftadd,_B_PF_Avg$8129
 32913  012E44  C08E  F694         	movff	?___ftadd+1,_B_PF_Avg$8129+1
 32914  012E48  C08F  F695         	movff	?___ftadd+2,_B_PF_Avg$8129+2
 32915                           
 32916                           ;Power_Meter.c: 587: }
 32917                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32918                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32919                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32920                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32921  012E4C  C42A  F090         	movff	_BGR_Arr+42,___ftadd@f2
 32922  012E50  C42B  F091         	movff	_BGR_Arr+43,___ftadd@f2+1
 32923  012E54  C42C  F092         	movff	_BGR_Arr+44,___ftadd@f2+2
 32924  012E58  C693  F08D         	movff	_B_PF_Avg$8129,___ftadd@f1
 32925  012E5C  C694  F08E         	movff	_B_PF_Avg$8129+1,___ftadd@f1+1
 32926  012E60  C695  F08F         	movff	_B_PF_Avg$8129+2,___ftadd@f1+2
 32927  012E64  EC69  F0B2         	call	___ftadd	;wreg free
 32928  012E68  C08D  F696         	movff	?___ftadd,_B_PF_Avg$8130
 32929  012E6C  C08E  F697         	movff	?___ftadd+1,_B_PF_Avg$8130+1
 32930  012E70  C08F  F698         	movff	?___ftadd+2,_B_PF_Avg$8130+2
 32931                           
 32932                           ;Power_Meter.c: 587: }
 32933                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32934                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32935                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32936                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32937  012E74  C427  F090         	movff	_BGR_Arr+39,___ftadd@f2
 32938  012E78  C428  F091         	movff	_BGR_Arr+40,___ftadd@f2+1
 32939  012E7C  C429  F092         	movff	_BGR_Arr+41,___ftadd@f2+2
 32940  012E80  C696  F08D         	movff	_B_PF_Avg$8130,___ftadd@f1
 32941  012E84  C697  F08E         	movff	_B_PF_Avg$8130+1,___ftadd@f1+1
 32942  012E88  C698  F08F         	movff	_B_PF_Avg$8130+2,___ftadd@f1+2
 32943  012E8C  EC69  F0B2         	call	___ftadd	;wreg free
 32944  012E90  C08D  F699         	movff	?___ftadd,_B_PF_Avg$8131
 32945  012E94  C08E  F69A         	movff	?___ftadd+1,_B_PF_Avg$8131+1
 32946  012E98  C08F  F69B         	movff	?___ftadd+2,_B_PF_Avg$8131+2
 32947                           
 32948                           ;Power_Meter.c: 587: }
 32949                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32950                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32951                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32952                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32953  012E9C  C424  F090         	movff	_BGR_Arr+36,___ftadd@f2
 32954  012EA0  C425  F091         	movff	_BGR_Arr+37,___ftadd@f2+1
 32955  012EA4  C426  F092         	movff	_BGR_Arr+38,___ftadd@f2+2
 32956  012EA8  C699  F08D         	movff	_B_PF_Avg$8131,___ftadd@f1
 32957  012EAC  C69A  F08E         	movff	_B_PF_Avg$8131+1,___ftadd@f1+1
 32958  012EB0  C69B  F08F         	movff	_B_PF_Avg$8131+2,___ftadd@f1+2
 32959  012EB4  EC69  F0B2         	call	___ftadd	;wreg free
 32960  012EB8  C08D  F69C         	movff	?___ftadd,_B_PF_Avg$8132
 32961  012EBC  C08E  F69D         	movff	?___ftadd+1,_B_PF_Avg$8132+1
 32962  012EC0  C08F  F69E         	movff	?___ftadd+2,_B_PF_Avg$8132+2
 32963                           
 32964                           ;Power_Meter.c: 587: }
 32965                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32966                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32967                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32968                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32969  012EC4  C421  F090         	movff	_BGR_Arr+33,___ftadd@f2
 32970  012EC8  C422  F091         	movff	_BGR_Arr+34,___ftadd@f2+1
 32971  012ECC  C423  F092         	movff	_BGR_Arr+35,___ftadd@f2+2
 32972  012ED0  C69C  F08D         	movff	_B_PF_Avg$8132,___ftadd@f1
 32973  012ED4  C69D  F08E         	movff	_B_PF_Avg$8132+1,___ftadd@f1+1
 32974  012ED8  C69E  F08F         	movff	_B_PF_Avg$8132+2,___ftadd@f1+2
 32975  012EDC  EC69  F0B2         	call	___ftadd	;wreg free
 32976  012EE0  C08D  F69F         	movff	?___ftadd,_B_PF_Avg$8133
 32977  012EE4  C08E  F6A0         	movff	?___ftadd+1,_B_PF_Avg$8133+1
 32978  012EE8  C08F  F6A1         	movff	?___ftadd+2,_B_PF_Avg$8133+2
 32979                           
 32980                           ;Power_Meter.c: 587: }
 32981                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32982                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32983                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32984                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32985  012EEC  C41E  F090         	movff	_BGR_Arr+30,___ftadd@f2
 32986  012EF0  C41F  F091         	movff	_BGR_Arr+31,___ftadd@f2+1
 32987  012EF4  C420  F092         	movff	_BGR_Arr+32,___ftadd@f2+2
 32988  012EF8  C69F  F08D         	movff	_B_PF_Avg$8133,___ftadd@f1
 32989  012EFC  C6A0  F08E         	movff	_B_PF_Avg$8133+1,___ftadd@f1+1
 32990  012F00  C6A1  F08F         	movff	_B_PF_Avg$8133+2,___ftadd@f1+2
 32991  012F04  EC69  F0B2         	call	___ftadd	;wreg free
 32992  012F08  C08D  F6A2         	movff	?___ftadd,_B_PF_Avg$8134
 32993  012F0C  C08E  F6A3         	movff	?___ftadd+1,_B_PF_Avg$8134+1
 32994  012F10  C08F  F6A4         	movff	?___ftadd+2,_B_PF_Avg$8134+2
 32995                           
 32996                           ;Power_Meter.c: 587: }
 32997                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32998                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32999                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33000                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33001  012F14  C41B  F090         	movff	_BGR_Arr+27,___ftadd@f2
 33002  012F18  C41C  F091         	movff	_BGR_Arr+28,___ftadd@f2+1
 33003  012F1C  C41D  F092         	movff	_BGR_Arr+29,___ftadd@f2+2
 33004  012F20  C6A2  F08D         	movff	_B_PF_Avg$8134,___ftadd@f1
 33005  012F24  C6A3  F08E         	movff	_B_PF_Avg$8134+1,___ftadd@f1+1
 33006  012F28  C6A4  F08F         	movff	_B_PF_Avg$8134+2,___ftadd@f1+2
 33007  012F2C  EC69  F0B2         	call	___ftadd	;wreg free
 33008  012F30  C08D  F6A5         	movff	?___ftadd,_B_PF_Avg$8135
 33009  012F34  C08E  F6A6         	movff	?___ftadd+1,_B_PF_Avg$8135+1
 33010  012F38  C08F  F6A7         	movff	?___ftadd+2,_B_PF_Avg$8135+2
 33011                           
 33012                           ;Power_Meter.c: 587: }
 33013                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33014                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33015                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33016                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33017  012F3C  C418  F090         	movff	_BGR_Arr+24,___ftadd@f2
 33018  012F40  C419  F091         	movff	_BGR_Arr+25,___ftadd@f2+1
 33019  012F44  C41A  F092         	movff	_BGR_Arr+26,___ftadd@f2+2
 33020  012F48  C6A5  F08D         	movff	_B_PF_Avg$8135,___ftadd@f1
 33021  012F4C  C6A6  F08E         	movff	_B_PF_Avg$8135+1,___ftadd@f1+1
 33022  012F50  C6A7  F08F         	movff	_B_PF_Avg$8135+2,___ftadd@f1+2
 33023  012F54  EC69  F0B2         	call	___ftadd	;wreg free
 33024  012F58  C08D  F6A8         	movff	?___ftadd,_B_PF_Avg$8136
 33025  012F5C  C08E  F6A9         	movff	?___ftadd+1,_B_PF_Avg$8136+1
 33026  012F60  C08F  F6AA         	movff	?___ftadd+2,_B_PF_Avg$8136+2
 33027                           
 33028                           ;Power_Meter.c: 587: }
 33029                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33030                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33031                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33032                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33033  012F64  C415  F090         	movff	_BGR_Arr+21,___ftadd@f2
 33034  012F68  C416  F091         	movff	_BGR_Arr+22,___ftadd@f2+1
 33035  012F6C  C417  F092         	movff	_BGR_Arr+23,___ftadd@f2+2
 33036  012F70  C6A8  F08D         	movff	_B_PF_Avg$8136,___ftadd@f1
 33037  012F74  C6A9  F08E         	movff	_B_PF_Avg$8136+1,___ftadd@f1+1
 33038  012F78  C6AA  F08F         	movff	_B_PF_Avg$8136+2,___ftadd@f1+2
 33039  012F7C  EC69  F0B2         	call	___ftadd	;wreg free
 33040  012F80  C08D  F6AB         	movff	?___ftadd,_B_PF_Avg$8137
 33041  012F84  C08E  F6AC         	movff	?___ftadd+1,_B_PF_Avg$8137+1
 33042  012F88  C08F  F6AD         	movff	?___ftadd+2,_B_PF_Avg$8137+2
 33043                           
 33044                           ;Power_Meter.c: 587: }
 33045                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33046                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33047                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33048                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33049  012F8C  C412  F090         	movff	_BGR_Arr+18,___ftadd@f2
 33050  012F90  C413  F091         	movff	_BGR_Arr+19,___ftadd@f2+1
 33051  012F94  C414  F092         	movff	_BGR_Arr+20,___ftadd@f2+2
 33052  012F98  C6AB  F08D         	movff	_B_PF_Avg$8137,___ftadd@f1
 33053  012F9C  C6AC  F08E         	movff	_B_PF_Avg$8137+1,___ftadd@f1+1
 33054  012FA0  C6AD  F08F         	movff	_B_PF_Avg$8137+2,___ftadd@f1+2
 33055  012FA4  EC69  F0B2         	call	___ftadd	;wreg free
 33056  012FA8  C08D  F6AE         	movff	?___ftadd,_B_PF_Avg$8138
 33057  012FAC  C08E  F6AF         	movff	?___ftadd+1,_B_PF_Avg$8138+1
 33058  012FB0  C08F  F6B0         	movff	?___ftadd+2,_B_PF_Avg$8138+2
 33059                           
 33060                           ;Power_Meter.c: 587: }
 33061                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33062                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33063                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33064                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33065  012FB4  C40F  F090         	movff	_BGR_Arr+15,___ftadd@f2
 33066  012FB8  C410  F091         	movff	_BGR_Arr+16,___ftadd@f2+1
 33067  012FBC  C411  F092         	movff	_BGR_Arr+17,___ftadd@f2+2
 33068  012FC0  C6AE  F08D         	movff	_B_PF_Avg$8138,___ftadd@f1
 33069  012FC4  C6AF  F08E         	movff	_B_PF_Avg$8138+1,___ftadd@f1+1
 33070  012FC8  C6B0  F08F         	movff	_B_PF_Avg$8138+2,___ftadd@f1+2
 33071  012FCC  EC69  F0B2         	call	___ftadd	;wreg free
 33072  012FD0  C08D  F6B1         	movff	?___ftadd,_B_PF_Avg$8139
 33073  012FD4  C08E  F6B2         	movff	?___ftadd+1,_B_PF_Avg$8139+1
 33074  012FD8  C08F  F6B3         	movff	?___ftadd+2,_B_PF_Avg$8139+2
 33075                           
 33076                           ;Power_Meter.c: 587: }
 33077                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33078                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33079                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33080                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33081  012FDC  C40C  F090         	movff	_BGR_Arr+12,___ftadd@f2
 33082  012FE0  C40D  F091         	movff	_BGR_Arr+13,___ftadd@f2+1
 33083  012FE4  C40E  F092         	movff	_BGR_Arr+14,___ftadd@f2+2
 33084  012FE8  C6B1  F08D         	movff	_B_PF_Avg$8139,___ftadd@f1
 33085  012FEC  C6B2  F08E         	movff	_B_PF_Avg$8139+1,___ftadd@f1+1
 33086  012FF0  C6B3  F08F         	movff	_B_PF_Avg$8139+2,___ftadd@f1+2
 33087  012FF4  EC69  F0B2         	call	___ftadd	;wreg free
 33088  012FF8  C08D  F6B4         	movff	?___ftadd,_B_PF_Avg$8140
 33089  012FFC  C08E  F6B5         	movff	?___ftadd+1,_B_PF_Avg$8140+1
 33090  013000  C08F  F6B6         	movff	?___ftadd+2,_B_PF_Avg$8140+2
 33091                           
 33092                           ;Power_Meter.c: 587: }
 33093                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33094                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33095                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33096                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33097  013004  C409  F090         	movff	_BGR_Arr+9,___ftadd@f2
 33098  013008  C40A  F091         	movff	_BGR_Arr+10,___ftadd@f2+1
 33099  01300C  C40B  F092         	movff	_BGR_Arr+11,___ftadd@f2+2
 33100  013010  C6B4  F08D         	movff	_B_PF_Avg$8140,___ftadd@f1
 33101  013014  C6B5  F08E         	movff	_B_PF_Avg$8140+1,___ftadd@f1+1
 33102  013018  C6B6  F08F         	movff	_B_PF_Avg$8140+2,___ftadd@f1+2
 33103  01301C  EC69  F0B2         	call	___ftadd	;wreg free
 33104  013020  C08D  F6B7         	movff	?___ftadd,_B_PF_Avg$8141
 33105  013024  C08E  F6B8         	movff	?___ftadd+1,_B_PF_Avg$8141+1
 33106  013028  C08F  F6B9         	movff	?___ftadd+2,_B_PF_Avg$8141+2
 33107                           
 33108                           ;Power_Meter.c: 587: }
 33109                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33110                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33111                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33112                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33113  01302C  C406  F090         	movff	_BGR_Arr+6,___ftadd@f2
 33114  013030  C407  F091         	movff	_BGR_Arr+7,___ftadd@f2+1
 33115  013034  C408  F092         	movff	_BGR_Arr+8,___ftadd@f2+2
 33116  013038  C6B7  F08D         	movff	_B_PF_Avg$8141,___ftadd@f1
 33117  01303C  C6B8  F08E         	movff	_B_PF_Avg$8141+1,___ftadd@f1+1
 33118  013040  C6B9  F08F         	movff	_B_PF_Avg$8141+2,___ftadd@f1+2
 33119  013044  EC69  F0B2         	call	___ftadd	;wreg free
 33120  013048  C08D  F6BA         	movff	?___ftadd,_B_PF_Avg$8142
 33121  01304C  C08E  F6BB         	movff	?___ftadd+1,_B_PF_Avg$8142+1
 33122  013050  C08F  F6BC         	movff	?___ftadd+2,_B_PF_Avg$8142+2
 33123                           
 33124                           ;Power_Meter.c: 587: }
 33125                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33126                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33127                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33128                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33129  013054  C403  F090         	movff	_BGR_Arr+3,___ftadd@f2
 33130  013058  C404  F091         	movff	_BGR_Arr+4,___ftadd@f2+1
 33131  01305C  C405  F092         	movff	_BGR_Arr+5,___ftadd@f2+2
 33132  013060  C6BA  F08D         	movff	_B_PF_Avg$8142,___ftadd@f1
 33133  013064  C6BB  F08E         	movff	_B_PF_Avg$8142+1,___ftadd@f1+1
 33134  013068  C6BC  F08F         	movff	_B_PF_Avg$8142+2,___ftadd@f1+2
 33135  01306C  EC69  F0B2         	call	___ftadd	;wreg free
 33136  013070  C08D  F6BD         	movff	?___ftadd,_B_PF_Avg$8143
 33137  013074  C08E  F6BE         	movff	?___ftadd+1,_B_PF_Avg$8143+1
 33138  013078  C08F  F6BF         	movff	?___ftadd+2,_B_PF_Avg$8143+2
 33139                           
 33140                           ;Power_Meter.c: 587: }
 33141                           ;Power_Meter.c: 589: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 33142                           ;Power_Meter.c: 590: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 33143                           ;Power_Meter.c: 591: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 33144                           ;Power_Meter.c: 592: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 33145  01307C  C6BD  F08D         	movff	_B_PF_Avg$8143,___ftadd@f1
 33146  013080  C6BE  F08E         	movff	_B_PF_Avg$8143+1,___ftadd@f1+1
 33147  013084  C6BF  F08F         	movff	_B_PF_Avg$8143+2,___ftadd@f1+2
 33148  013088  C400  F090         	movff	_BGR_Arr,___ftadd@f2
 33149  01308C  C401  F091         	movff	_BGR_Arr+1,___ftadd@f2+1
 33150  013090  C402  F092         	movff	_BGR_Arr+2,___ftadd@f2+2
 33151  013094  EC69  F0B2         	call	___ftadd	;wreg free
 33152  013098  C08D  F2E5         	movff	?___ftadd,_BGR_Avg
 33153  01309C  C08E  F2E6         	movff	?___ftadd+1,_BGR_Avg+1
 33154  0130A0  C08F  F2E7         	movff	?___ftadd+2,_BGR_Avg+2
 33155                           
 33156                           ;Power_Meter.c: 594: BGR_Avg = (BGR_Avg / 30);
 33157  0130A4  C2E5  F0A5         	movff	_BGR_Avg,___ftdiv@f1
 33158  0130A8  C2E6  F0A6         	movff	_BGR_Avg+1,___ftdiv@f1+1
 33159  0130AC  C2E7  F0A7         	movff	_BGR_Avg+2,___ftdiv@f1+2
 33160  0130B0  0E00               	movlw	0
 33161  0130B2  0100               	movlb	0	; () banked
 33162  0130B4  6FA8               	movwf	___ftdiv@f2& (0+255),b
 33163  0130B6  0EF0               	movlw	240
 33164  0130B8  0100               	movlb	0	; () banked
 33165  0130BA  6FA9               	movwf	(___ftdiv@f2+1)& (0+255),b
 33166  0130BC  0E41               	movlw	65
 33167  0130BE  0100               	movlb	0	; () banked
 33168  0130C0  6FAA               	movwf	(___ftdiv@f2+2)& (0+255),b
 33169  0130C2  EC53  F0C1         	call	___ftdiv	;wreg free
 33170  0130C6  C0A5  F2E5         	movff	?___ftdiv,_BGR_Avg
 33171  0130CA  C0A6  F2E6         	movff	?___ftdiv+1,_BGR_Avg+1
 33172  0130CE  C0A7  F2E7         	movff	?___ftdiv+2,_BGR_Avg+2
 33173                           
 33174                           ;Power_Meter.c: 595: B_Rad = ((BGR_Avg * 2 * 3.1412) - (0.575959));
 33175  0130D2  0E09               	movlw	9
 33176  0130D4  0100               	movlb	0	; () banked
 33177  0130D6  6F77               	movwf	___ftmul@f2& (0+255),b
 33178  0130D8  0EC9               	movlw	201
 33179  0130DA  0100               	movlb	0	; () banked
 33180  0130DC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 33181  0130DE  0E40               	movlw	64
 33182  0130E0  0100               	movlb	0	; () banked
 33183  0130E2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 33184  0130E4  C2E5  F074         	movff	_BGR_Avg,___ftmul@f1
 33185  0130E8  C2E6  F075         	movff	_BGR_Avg+1,___ftmul@f1+1
 33186  0130EC  C2E7  F076         	movff	_BGR_Avg+2,___ftmul@f1+2
 33187  0130F0  ECA4  F0C0         	call	___ftmul	;wreg free
 33188  0130F4  C074  F08D         	movff	?___ftmul,___ftadd@f1
 33189  0130F8  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 33190  0130FC  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 33191  013100  0E72               	movlw	114
 33192  013102  0100               	movlb	0	; () banked
 33193  013104  6F90               	movwf	___ftadd@f2& (0+255),b
 33194  013106  0E13               	movlw	19
 33195  013108  0100               	movlb	0	; () banked
 33196  01310A  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33197  01310C  0EBF               	movlw	191
 33198  01310E  0100               	movlb	0	; () banked
 33199  013110  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33200  013112  EC69  F0B2         	call	___ftadd	;wreg free
 33201  013116  C08D  F522         	movff	?___ftadd,_B_Rad
 33202  01311A  C08E  F523         	movff	?___ftadd+1,_B_Rad+1
 33203  01311E  C08F  F524         	movff	?___ftadd+2,_B_Rad+2
 33204                           
 33205                           ;Power_Meter.c: 596: B_Power_Factor = (cos(B_Rad));
 33206  013122  C522  F0C1         	movff	_B_Rad,cos@f
 33207  013126  C523  F0C2         	movff	_B_Rad+1,cos@f+1
 33208  01312A  C524  F0C3         	movff	_B_Rad+2,cos@f+2
 33209  01312E  ECB0  F0CB         	call	_cos	;wreg free
 33210  013132  C0C1  F51F         	movff	?_cos,_B_Power_Factor
 33211  013136  C0C2  F520         	movff	?_cos+1,_B_Power_Factor+1
 33212  01313A  C0C3  F521         	movff	?_cos+2,_B_Power_Factor+2
 33213  01313E  0012               	return		;funcret
 33214  013140                     __end_of_B_PF_Avg:
 33215                           	opt stack 0
 33216                           tblptru	equ	0xFF8
 33217                           tblptrh	equ	0xFF7
 33218                           tblptrl	equ	0xFF6
 33219                           tablat	equ	0xFF5
 33220                           prodh	equ	0xFF4
 33221                           prodl	equ	0xFF3
 33222                           intcon	equ	0xFF2
 33223                           postinc0	equ	0xFEE
 33224                           wreg	equ	0xFE8
 33225                           postdec1	equ	0xFE5
 33226                           fsr1h	equ	0xFE2
 33227                           fsr1l	equ	0xFE1
 33228                           indf2	equ	0xFDF
 33229                           postinc2	equ	0xFDE
 33230                           postdec2	equ	0xFDD
 33231                           fsr2h	equ	0xFDA
 33232                           fsr2l	equ	0xFD9
 33233                           status	equ	0xFD8
 33234                           
 33235 ;; *************** function _cos *****************
 33236 ;; Defined at:
 33237 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\cos.c"
 33238 ;; Parameters:    Size  Location     Type
 33239 ;;  f               3   97[BANK0 ] void 
 33240 ;; Auto vars:     Size  Location     Type
 33241 ;;		None
 33242 ;; Return value:  Size  Location     Type
 33243 ;;                  3   97[BANK0 ] void 
 33244 ;; Registers used:
 33245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33246 ;; Tracked objects:
 33247 ;;		On entry : 0/0
 33248 ;;		On exit  : 0/0
 33249 ;;		Unchanged: 0/0
 33250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33251 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33252 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33254 ;;      Totals:         0       3       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33255 ;;Total ram usage:        6 bytes
 33256 ;; Hardware stack levels used:    1
 33257 ;; Hardware stack levels required when called:    7
 33258 ;; This function calls:
 33259 ;;		___ftadd
 33260 ;;		___ftge
 33261 ;;		_sin
 33262 ;; This function is called by:
 33263 ;;		_R_PF_Avg
 33264 ;;		_Y_PF_Avg
 33265 ;;		_B_PF_Avg
 33266 ;; This function uses a non-reentrant model
 33267 ;;
 33268                           
 33269                           	psect	text124
 33270  019760                     __ptext124:
 33271                           	opt stack 0
 33272  019760                     _cos:
 33273                           	opt stack 22
 33274                           
 33275                           ;incstack = 0
 33276  019760  0E10               	movlw	16
 33277  019762  0100               	movlb	0	; () banked
 33278  019764  6F99               	movwf	___ftge@ff1& (0+255),b
 33279  019766  0E49               	movlw	73
 33280  019768  0100               	movlb	0	; () banked
 33281  01976A  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 33282  01976C  0E40               	movlw	64
 33283  01976E  0100               	movlb	0	; () banked
 33284  019770  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 33285  019772  C0C1  F09C         	movff	cos@f,___ftge@ff2
 33286  019776  C0C2  F09D         	movff	cos@f+1,___ftge@ff2+1
 33287  01977A  C0C3  F09E         	movff	cos@f+2,___ftge@ff2+2
 33288  01977E  ECEB  F0CA         	call	___ftge	;wreg free
 33289  019782  0100               	movlb	0	; () banked
 33290  019784  B0D8               	btfsc	status,0,c
 33291  019786  D026               	goto	l22169
 33292                           
 33293                           ; BSR set to: 0
 33294  019788  C0C1  F08D         	movff	cos@f,___ftadd@f1
 33295  01978C  C0C2  F08E         	movff	cos@f+1,___ftadd@f1+1
 33296  019790  C0C3  F08F         	movff	cos@f+2,___ftadd@f1+2
 33297  019794  0ECC               	movlw	204
 33298  019796  0100               	movlb	0	; () banked
 33299  019798  6F90               	movwf	___ftadd@f2& (0+255),b
 33300  01979A  0E96               	movlw	150
 33301  01979C  0100               	movlb	0	; () banked
 33302  01979E  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33303  0197A0  0EC0               	movlw	192
 33304  0197A2  0100               	movlb	0	; () banked
 33305  0197A4  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33306  0197A6  EC69  F0B2         	call	___ftadd	;wreg free
 33307  0197AA  C08D  F1AA         	movff	?___ftadd,_cos$8152
 33308  0197AE  C08E  F1AB         	movff	?___ftadd+1,_cos$8152+1
 33309  0197B2  C08F  F1AC         	movff	?___ftadd+2,_cos$8152+2
 33310  0197B6  C1AA  F0B4         	movff	_cos$8152,sin@f
 33311  0197BA  C1AB  F0B5         	movff	_cos$8152+1,sin@f+1
 33312  0197BE  C1AC  F0B6         	movff	_cos$8152+2,sin@f+2
 33313  0197C2  EC76  F0AD         	call	_sin	;wreg free
 33314  0197C6  C0B4  F0C1         	movff	?_sin,?_cos
 33315  0197CA  C0B5  F0C2         	movff	?_sin+1,?_cos+1
 33316  0197CE  C0B6  F0C3         	movff	?_sin+2,?_cos+2
 33317  0197D2  0012               	return	
 33318  0197D4                     l22169:
 33319  0197D4  C0C1  F08D         	movff	cos@f,___ftadd@f1
 33320  0197D8  C0C2  F08E         	movff	cos@f+1,___ftadd@f1+1
 33321  0197DC  C0C3  F08F         	movff	cos@f+2,___ftadd@f1+2
 33322  0197E0  0E10               	movlw	16
 33323  0197E2  0100               	movlb	0	; () banked
 33324  0197E4  6F90               	movwf	___ftadd@f2& (0+255),b
 33325  0197E6  0EC9               	movlw	201
 33326  0197E8  0100               	movlb	0	; () banked
 33327  0197EA  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33328  0197EC  0E3F               	movlw	63
 33329  0197EE  0100               	movlb	0	; () banked
 33330  0197F0  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33331  0197F2  EC69  F0B2         	call	___ftadd	;wreg free
 33332  0197F6  C08D  F1AA         	movff	?___ftadd,_cos$8152
 33333  0197FA  C08E  F1AB         	movff	?___ftadd+1,_cos$8152+1
 33334  0197FE  C08F  F1AC         	movff	?___ftadd+2,_cos$8152+2
 33335  019802  C1AA  F0B4         	movff	_cos$8152,sin@f
 33336  019806  C1AB  F0B5         	movff	_cos$8152+1,sin@f+1
 33337  01980A  C1AC  F0B6         	movff	_cos$8152+2,sin@f+2
 33338  01980E  EC76  F0AD         	call	_sin	;wreg free
 33339  019812  C0B4  F0C1         	movff	?_sin,?_cos
 33340  019816  C0B5  F0C2         	movff	?_sin+1,?_cos+1
 33341  01981A  C0B6  F0C3         	movff	?_sin+2,?_cos+2
 33342  01981E  0012               	return	
 33343  019820                     __end_of_cos:
 33344                           	opt stack 0
 33345                           tblptru	equ	0xFF8
 33346                           tblptrh	equ	0xFF7
 33347                           tblptrl	equ	0xFF6
 33348                           tablat	equ	0xFF5
 33349                           prodh	equ	0xFF4
 33350                           prodl	equ	0xFF3
 33351                           intcon	equ	0xFF2
 33352                           postinc0	equ	0xFEE
 33353                           wreg	equ	0xFE8
 33354                           postdec1	equ	0xFE5
 33355                           fsr1h	equ	0xFE2
 33356                           fsr1l	equ	0xFE1
 33357                           indf2	equ	0xFDF
 33358                           postinc2	equ	0xFDE
 33359                           postdec2	equ	0xFDD
 33360                           fsr2h	equ	0xFDA
 33361                           fsr2l	equ	0xFD9
 33362                           status	equ	0xFD8
 33363                           
 33364 ;; *************** function _sin *****************
 33365 ;; Defined at:
 33366 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\sin.c"
 33367 ;; Parameters:    Size  Location     Type
 33368 ;;  f               3   84[BANK0 ] void 
 33369 ;; Auto vars:     Size  Location     Type
 33370 ;;  x2              3   93[BANK0 ] void 
 33371 ;;  y               3   87[BANK0 ] void 
 33372 ;;  sgn             1   96[BANK0 ] unsigned char 
 33373 ;; Return value:  Size  Location     Type
 33374 ;;                  3   84[BANK0 ] unsigned char 
 33375 ;; Registers used:
 33376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33377 ;; Tracked objects:
 33378 ;;		On entry : 0/0
 33379 ;;		On exit  : 0/0
 33380 ;;		Unchanged: 0/0
 33381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33382 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33383 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33385 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33386 ;;Total ram usage:       13 bytes
 33387 ;; Hardware stack levels used:    1
 33388 ;; Hardware stack levels required when called:    6
 33389 ;; This function calls:
 33390 ;;		___ftadd
 33391 ;;		___ftdiv
 33392 ;;		___ftge
 33393 ;;		___ftmul
 33394 ;;		___ftneg
 33395 ;;		___ftsub
 33396 ;;		_eval_poly
 33397 ;;		_floor
 33398 ;; This function is called by:
 33399 ;;		_cos
 33400 ;; This function uses a non-reentrant model
 33401 ;;
 33402                           
 33403                           	psect	text125
 33404  015AEC                     __ptext125:
 33405                           	opt stack 0
 33406  015AEC                     _sin:
 33407                           	opt stack 22
 33408                           
 33409                           ;incstack = 0
 33410  015AEC  0E00               	movlw	0
 33411  015AEE  0100               	movlb	0	; () banked
 33412  015AF0  6FC0               	movwf	sin@sgn& (0+255),b
 33413                           
 33414                           ; BSR set to: 0
 33415  015AF2  0100               	movlb	0	; () banked
 33416  015AF4  AFB6               	btfss	(sin@f+2)& (0+255),7,b
 33417  015AF6  D011               	goto	l21511
 33418                           
 33419                           ; BSR set to: 0
 33420  015AF8  C0B4  F083         	movff	sin@f,___ftneg@f1
 33421  015AFC  C0B5  F084         	movff	sin@f+1,___ftneg@f1+1
 33422  015B00  C0B6  F085         	movff	sin@f+2,___ftneg@f1+2
 33423  015B04  ECBD  F0D6         	call	___ftneg	;wreg free
 33424  015B08  C083  F0B4         	movff	?___ftneg,sin@f
 33425  015B0C  C084  F0B5         	movff	?___ftneg+1,sin@f+1
 33426  015B10  C085  F0B6         	movff	?___ftneg+2,sin@f+2
 33427  015B14  0E01               	movlw	1
 33428  015B16  0100               	movlb	0	; () banked
 33429  015B18  6FC0               	movwf	sin@sgn& (0+255),b
 33430  015B1A                     l21511:
 33431                           
 33432                           ; BSR set to: 0
 33433  015B1A  C0B4  F074         	movff	sin@f,___ftmul@f1
 33434  015B1E  C0B5  F075         	movff	sin@f+1,___ftmul@f1+1
 33435  015B22  C0B6  F076         	movff	sin@f+2,___ftmul@f1+2
 33436  015B26  0EFA               	movlw	250
 33437  015B28  0100               	movlb	0	; () banked
 33438  015B2A  6F77               	movwf	___ftmul@f2& (0+255),b
 33439  015B2C  0E22               	movlw	34
 33440  015B2E  0100               	movlb	0	; () banked
 33441  015B30  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 33442  015B32  0E3E               	movlw	62
 33443  015B34  0100               	movlb	0	; () banked
 33444  015B36  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 33445  015B38  ECA4  F0C0         	call	___ftmul	;wreg free
 33446  015B3C  C074  F0B4         	movff	?___ftmul,sin@f
 33447  015B40  C075  F0B5         	movff	?___ftmul+1,sin@f+1
 33448  015B44  C076  F0B6         	movff	?___ftmul+2,sin@f+2
 33449  015B48  C0B4  F0AB         	movff	sin@f,___ftsub@f1
 33450  015B4C  C0B5  F0AC         	movff	sin@f+1,___ftsub@f1+1
 33451  015B50  C0B6  F0AD         	movff	sin@f+2,___ftsub@f1+2
 33452  015B54  C0B4  F0A3         	movff	sin@f,floor@x
 33453  015B58  C0B5  F0A4         	movff	sin@f+1,floor@x+1
 33454  015B5C  C0B6  F0A5         	movff	sin@f+2,floor@x+2
 33455  015B60  ECFD  F0C5         	call	_floor	;wreg free
 33456  015B64  C0A3  F0AE         	movff	?_floor,___ftsub@f2
 33457  015B68  C0A4  F0AF         	movff	?_floor+1,___ftsub@f2+1
 33458  015B6C  C0A5  F0B0         	movff	?_floor+2,___ftsub@f2+2
 33459  015B70  EC61  F0D5         	call	___ftsub	;wreg free
 33460  015B74  C0AB  F0B4         	movff	?___ftsub,sin@f
 33461  015B78  C0AC  F0B5         	movff	?___ftsub+1,sin@f+1
 33462  015B7C  C0AD  F0B6         	movff	?___ftsub+2,sin@f+2
 33463  015B80  C0B4  F074         	movff	sin@f,___ftmul@f1
 33464  015B84  C0B5  F075         	movff	sin@f+1,___ftmul@f1+1
 33465  015B88  C0B6  F076         	movff	sin@f+2,___ftmul@f1+2
 33466  015B8C  0E00               	movlw	0
 33467  015B8E  0100               	movlb	0	; () banked
 33468  015B90  6F77               	movwf	___ftmul@f2& (0+255),b
 33469  015B92  0E80               	movlw	128
 33470  015B94  0100               	movlb	0	; () banked
 33471  015B96  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
 33472  015B98  0E40               	movlw	64
 33473  015B9A  0100               	movlb	0	; () banked
 33474  015B9C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
 33475  015B9E  ECA4  F0C0         	call	___ftmul	;wreg free
 33476  015BA2  C074  F0B4         	movff	?___ftmul,sin@f
 33477  015BA6  C075  F0B5         	movff	?___ftmul+1,sin@f+1
 33478  015BAA  C076  F0B6         	movff	?___ftmul+2,sin@f+2
 33479  015BAE  0E00               	movlw	0
 33480  015BB0  0100               	movlb	0	; () banked
 33481  015BB2  6F99               	movwf	___ftge@ff1& (0+255),b
 33482  015BB4  0E00               	movlw	0
 33483  015BB6  0100               	movlb	0	; () banked
 33484  015BB8  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 33485  015BBA  0E40               	movlw	64
 33486  015BBC  0100               	movlb	0	; () banked
 33487  015BBE  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 33488  015BC0  C0B4  F09C         	movff	sin@f,___ftge@ff2
 33489  015BC4  C0B5  F09D         	movff	sin@f+1,___ftge@ff2+1
 33490  015BC8  C0B6  F09E         	movff	sin@f+2,___ftge@ff2+2
 33491  015BCC  ECEB  F0CA         	call	___ftge	;wreg free
 33492  015BD0  0100               	movlb	0	; () banked
 33493  015BD2  B0D8               	btfsc	status,0,c
 33494  015BD4  D021               	goto	l21523
 33495                           
 33496                           ; BSR set to: 0
 33497  015BD6  C0B4  F0AB         	movff	sin@f,___ftsub@f1
 33498  015BDA  C0B5  F0AC         	movff	sin@f+1,___ftsub@f1+1
 33499  015BDE  C0B6  F0AD         	movff	sin@f+2,___ftsub@f1+2
 33500  015BE2  0E00               	movlw	0
 33501  015BE4  0100               	movlb	0	; () banked
 33502  015BE6  6FAE               	movwf	___ftsub@f2& (0+255),b
 33503  015BE8  0E00               	movlw	0
 33504  015BEA  0100               	movlb	0	; () banked
 33505  015BEC  6FAF               	movwf	(___ftsub@f2+1)& (0+255),b
 33506  015BEE  0E40               	movlw	64
 33507  015BF0  0100               	movlb	0	; () banked
 33508  015BF2  6FB0               	movwf	(___ftsub@f2+2)& (0+255),b
 33509  015BF4  EC61  F0D5         	call	___ftsub	;wreg free
 33510  015BF8  C0AB  F0B4         	movff	?___ftsub,sin@f
 33511  015BFC  C0AC  F0B5         	movff	?___ftsub+1,sin@f+1
 33512  015C00  C0AD  F0B6         	movff	?___ftsub+2,sin@f+2
 33513  015C04  0100               	movlb	0	; () banked
 33514  015C06  51C0               	movf	sin@sgn& (0+255),w,b
 33515  015C08  0100               	movlb	0	; () banked
 33516  015C0A  A4D8               	btfss	status,2,c
 33517  015C0C  D002               	goto	u16430
 33518  015C0E  0E01               	movlw	1
 33519  015C10  D001               	goto	u16440
 33520  015C12                     u16430:
 33521  015C12  0E00               	movlw	0
 33522  015C14                     u16440:
 33523  015C14  0100               	movlb	0	; () banked
 33524  015C16  6FC0               	movwf	sin@sgn& (0+255),b
 33525  015C18                     l21523:
 33526                           
 33527                           ; BSR set to: 0
 33528  015C18  0E00               	movlw	0
 33529  015C1A  0100               	movlb	0	; () banked
 33530  015C1C  6F99               	movwf	___ftge@ff1& (0+255),b
 33531  015C1E  0E80               	movlw	128
 33532  015C20  0100               	movlb	0	; () banked
 33533  015C22  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 33534  015C24  0E3F               	movlw	63
 33535  015C26  0100               	movlb	0	; () banked
 33536  015C28  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 33537  015C2A  C0B4  F09C         	movff	sin@f,___ftge@ff2
 33538  015C2E  C0B5  F09D         	movff	sin@f+1,___ftge@ff2+1
 33539  015C32  C0B6  F09E         	movff	sin@f+2,___ftge@ff2+2
 33540  015C36  ECEB  F0CA         	call	___ftge	;wreg free
 33541  015C3A  0100               	movlb	0	; () banked
 33542  015C3C  B0D8               	btfsc	status,0,c
 33543  015C3E  D01F               	goto	l10842
 33544                           
 33545                           ; BSR set to: 0
 33546  015C40  C0B4  F083         	movff	sin@f,___ftneg@f1
 33547  015C44  C0B5  F084         	movff	sin@f+1,___ftneg@f1+1
 33548  015C48  C0B6  F085         	movff	sin@f+2,___ftneg@f1+2
 33549  015C4C  ECBD  F0D6         	call	___ftneg	;wreg free
 33550  015C50  C083  F08D         	movff	?___ftneg,___ftadd@f1
 33551  015C54  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
 33552  015C58  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
 33553  015C5C  0E00               	movlw	0
 33554  015C5E  0100               	movlb	0	; () banked
 33555  015C60  6F90               	movwf	___ftadd@f2& (0+255),b
 33556  015C62  0E00               	movlw	0
 33557  015C64  0100               	movlb	0	; () banked
 33558  015C66  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33559  015C68  0E40               	movlw	64
 33560  015C6A  0100               	movlb	0	; () banked
 33561  015C6C  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33562  015C6E  EC69  F0B2         	call	___ftadd	;wreg free
 33563  015C72  C08D  F0B4         	movff	?___ftadd,sin@f
 33564  015C76  C08E  F0B5         	movff	?___ftadd+1,sin@f+1
 33565  015C7A  C08F  F0B6         	movff	?___ftadd+2,sin@f+2
 33566  015C7E                     l10842:
 33567  015C7E  C0B4  F074         	movff	sin@f,___ftmul@f1
 33568  015C82  C0B5  F075         	movff	sin@f+1,___ftmul@f1+1
 33569  015C86  C0B6  F076         	movff	sin@f+2,___ftmul@f1+2
 33570  015C8A  C0B4  F077         	movff	sin@f,___ftmul@f2
 33571  015C8E  C0B5  F078         	movff	sin@f+1,___ftmul@f2+1
 33572  015C92  C0B6  F079         	movff	sin@f+2,___ftmul@f2+2
 33573  015C96  ECA4  F0C0         	call	___ftmul	;wreg free
 33574  015C9A  C074  F0BD         	movff	?___ftmul,sin@x2
 33575  015C9E  C075  F0BE         	movff	?___ftmul+1,sin@x2+1
 33576  015CA2  C076  F0BF         	movff	?___ftmul+2,sin@x2+2
 33577  015CA6  C0BD  F099         	movff	sin@x2,eval_poly@x
 33578  015CAA  C0BE  F09A         	movff	sin@x2+1,eval_poly@x+1
 33579  015CAE  C0BF  F09B         	movff	sin@x2+2,eval_poly@x+2
 33580  015CB2  0E3C               	movlw	low sin@coeff_b
 33581  015CB4  0100               	movlb	0	; () banked
 33582  015CB6  6F9C               	movwf	eval_poly@d& (0+255),b
 33583  015CB8  0EFC               	movlw	high sin@coeff_b
 33584  015CBA  0100               	movlb	0	; () banked
 33585  015CBC  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
 33586  015CBE  0E00               	movlw	0
 33587  015CC0  0100               	movlb	0	; () banked
 33588  015CC2  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
 33589  015CC4  0E03               	movlw	3
 33590  015CC6  6F9E               	movwf	eval_poly@n& (0+255),b
 33591  015CC8  EC71  F0C7         	call	_eval_poly	;wreg free
 33592  015CCC  C099  F0B7         	movff	?_eval_poly,sin@y
 33593  015CD0  C09A  F0B8         	movff	?_eval_poly+1,sin@y+1
 33594  015CD4  C09B  F0B9         	movff	?_eval_poly+2,sin@y+2
 33595  015CD8  C0B7  F0A8         	movff	sin@y,___ftdiv@f2
 33596  015CDC  C0B8  F0A9         	movff	sin@y+1,___ftdiv@f2+1
 33597  015CE0  C0B9  F0AA         	movff	sin@y+2,___ftdiv@f2+2
 33598  015CE4  0E00               	movlw	0
 33599  015CE6  0100               	movlb	0	; () banked
 33600  015CE8  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
 33601  015CEA  0E04               	movlw	4
 33602  015CEC  6F9E               	movwf	eval_poly@n& (0+255),b
 33603  015CEE  0E2D               	movlw	low sin@coeff_a
 33604  015CF0  0100               	movlb	0	; () banked
 33605  015CF2  6F9C               	movwf	eval_poly@d& (0+255),b
 33606  015CF4  0EFC               	movlw	high sin@coeff_a
 33607  015CF6  0100               	movlb	0	; () banked
 33608  015CF8  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
 33609  015CFA  C0BD  F099         	movff	sin@x2,eval_poly@x
 33610  015CFE  C0BE  F09A         	movff	sin@x2+1,eval_poly@x+1
 33611  015D02  C0BF  F09B         	movff	sin@x2+2,eval_poly@x+2
 33612  015D06  EC71  F0C7         	call	_eval_poly	;wreg free
 33613  015D0A  C099  F0A5         	movff	?_eval_poly,___ftdiv@f1
 33614  015D0E  C09A  F0A6         	movff	?_eval_poly+1,___ftdiv@f1+1
 33615  015D12  C09B  F0A7         	movff	?_eval_poly+2,___ftdiv@f1+2
 33616  015D16  EC53  F0C1         	call	___ftdiv	;wreg free
 33617  015D1A  C0A5  F0BA         	movff	?___ftdiv,_sin$8153
 33618  015D1E  C0A6  F0BB         	movff	?___ftdiv+1,_sin$8153+1
 33619  015D22  C0A7  F0BC         	movff	?___ftdiv+2,_sin$8153+2
 33620  015D26  C0B4  F074         	movff	sin@f,___ftmul@f1
 33621  015D2A  C0B5  F075         	movff	sin@f+1,___ftmul@f1+1
 33622  015D2E  C0B6  F076         	movff	sin@f+2,___ftmul@f1+2
 33623  015D32  C0BA  F077         	movff	_sin$8153,___ftmul@f2
 33624  015D36  C0BB  F078         	movff	_sin$8153+1,___ftmul@f2+1
 33625  015D3A  C0BC  F079         	movff	_sin$8153+2,___ftmul@f2+2
 33626  015D3E  ECA4  F0C0         	call	___ftmul	;wreg free
 33627  015D42  C074  F0B4         	movff	?___ftmul,sin@f
 33628  015D46  C075  F0B5         	movff	?___ftmul+1,sin@f+1
 33629  015D4A  C076  F0B6         	movff	?___ftmul+2,sin@f+2
 33630  015D4E  0100               	movlb	0	; () banked
 33631  015D50  51C0               	movf	sin@sgn& (0+255),w,b
 33632  015D52  0100               	movlb	0	; () banked
 33633  015D54  B4D8               	btfsc	status,2,c
 33634  015D56  D00F               	goto	l10843
 33635                           
 33636                           ; BSR set to: 0
 33637  015D58  C0B4  F083         	movff	sin@f,___ftneg@f1
 33638  015D5C  C0B5  F084         	movff	sin@f+1,___ftneg@f1+1
 33639  015D60  C0B6  F085         	movff	sin@f+2,___ftneg@f1+2
 33640  015D64  ECBD  F0D6         	call	___ftneg	;wreg free
 33641  015D68  C083  F0B4         	movff	?___ftneg,?_sin
 33642  015D6C  C084  F0B5         	movff	?___ftneg+1,?_sin+1
 33643  015D70  C085  F0B6         	movff	?___ftneg+2,?_sin+2
 33644  015D74  0012               	return	
 33645  015D76                     l10843:
 33646                           
 33647                           ; BSR set to: 0
 33648  015D76  C0B4  F0B4         	movff	sin@f,?_sin
 33649  015D7A  C0B5  F0B5         	movff	sin@f+1,?_sin+1
 33650  015D7E  C0B6  F0B6         	movff	sin@f+2,?_sin+2
 33651  015D82  0012               	return		;funcret
 33652  015D84                     __end_of_sin:
 33653                           	opt stack 0
 33654                           tblptru	equ	0xFF8
 33655                           tblptrh	equ	0xFF7
 33656                           tblptrl	equ	0xFF6
 33657                           tablat	equ	0xFF5
 33658                           prodh	equ	0xFF4
 33659                           prodl	equ	0xFF3
 33660                           intcon	equ	0xFF2
 33661                           postinc0	equ	0xFEE
 33662                           wreg	equ	0xFE8
 33663                           postdec1	equ	0xFE5
 33664                           fsr1h	equ	0xFE2
 33665                           fsr1l	equ	0xFE1
 33666                           indf2	equ	0xFDF
 33667                           postinc2	equ	0xFDE
 33668                           postdec2	equ	0xFDD
 33669                           fsr2h	equ	0xFDA
 33670                           fsr2l	equ	0xFD9
 33671                           status	equ	0xFD8
 33672                           
 33673 ;; *************** function _floor *****************
 33674 ;; Defined at:
 33675 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\floor.c"
 33676 ;; Parameters:    Size  Location     Type
 33677 ;;  x               3   67[BANK0 ] unsigned char 
 33678 ;; Auto vars:     Size  Location     Type
 33679 ;;  i               3   70[BANK0 ] unsigned char 
 33680 ;;  expon           2   73[BANK0 ] int 
 33681 ;; Return value:  Size  Location     Type
 33682 ;;                  3   67[BANK0 ] int 
 33683 ;; Registers used:
 33684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 33685 ;; Tracked objects:
 33686 ;;		On entry : 0/0
 33687 ;;		On exit  : 0/0
 33688 ;;		Unchanged: 0/0
 33689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33690 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33691 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33693 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33694 ;;Total ram usage:        8 bytes
 33695 ;; Hardware stack levels used:    1
 33696 ;; Hardware stack levels required when called:    5
 33697 ;; This function calls:
 33698 ;;		___altoft
 33699 ;;		___ftadd
 33700 ;;		___ftge
 33701 ;;		___fttol
 33702 ;;		_frexp
 33703 ;; This function is called by:
 33704 ;;		_sin
 33705 ;; This function uses a non-reentrant model
 33706 ;;
 33707                           
 33708                           	psect	text126
 33709  018BFA                     __ptext126:
 33710                           	opt stack 0
 33711  018BFA                     _floor:
 33712                           	opt stack 22
 33713                           
 33714                           ;incstack = 0
 33715  018BFA  C0A3  F060         	movff	floor@x,frexp@value
 33716  018BFE  C0A4  F061         	movff	floor@x+1,frexp@value+1
 33717  018C02  C0A5  F062         	movff	floor@x+2,frexp@value+2
 33718  018C06  0EA9               	movlw	low floor@expon
 33719  018C08  0100               	movlb	0	; () banked
 33720  018C0A  6F63               	movwf	frexp@eptr& (0+255),b
 33721  018C0C  0E00               	movlw	high floor@expon
 33722  018C0E  0100               	movlb	0	; () banked
 33723  018C10  6F64               	movwf	(frexp@eptr+1)& (0+255),b
 33724  018C12  EC84  F0D1         	call	_frexp	;wreg free
 33725  018C16  0100               	movlb	0	; () banked
 33726  018C18  AFAA               	btfss	(floor@expon+1)& (0+255),7,b
 33727  018C1A  D017               	goto	l20617
 33728                           
 33729                           ; BSR set to: 0
 33730  018C1C  0100               	movlb	0	; () banked
 33731  018C1E  AFA5               	btfss	(floor@x+2)& (0+255),7,b
 33732  018C20  D00A               	goto	l20613
 33733                           
 33734                           ; BSR set to: 0
 33735  018C22  0E00               	movlw	0
 33736  018C24  0100               	movlb	0	; () banked
 33737  018C26  6FA3               	movwf	?_floor& (0+255),b
 33738  018C28  0E80               	movlw	128
 33739  018C2A  0100               	movlb	0	; () banked
 33740  018C2C  6FA4               	movwf	(?_floor+1)& (0+255),b
 33741  018C2E  0EBF               	movlw	191
 33742  018C30  0100               	movlb	0	; () banked
 33743  018C32  6FA5               	movwf	(?_floor+2)& (0+255),b
 33744                           
 33745                           ; BSR set to: 0
 33746  018C34  0012               	return	
 33747  018C36                     l20613:
 33748                           
 33749                           ; BSR set to: 0
 33750  018C36  0E00               	movlw	0
 33751  018C38  0100               	movlb	0	; () banked
 33752  018C3A  6FA3               	movwf	?_floor& (0+255),b
 33753  018C3C  0E00               	movlw	0
 33754  018C3E  0100               	movlb	0	; () banked
 33755  018C40  6FA4               	movwf	(?_floor+1)& (0+255),b
 33756  018C42  0E00               	movlw	0
 33757  018C44  0100               	movlb	0	; () banked
 33758  018C46  6FA5               	movwf	(?_floor+2)& (0+255),b
 33759                           
 33760                           ; BSR set to: 0
 33761  018C48  0012               	return	
 33762  018C4A                     l20617:
 33763                           
 33764                           ; BSR set to: 0
 33765  018C4A  0100               	movlb	0	; () banked
 33766  018C4C  51AA               	movf	(floor@expon+1)& (0+255),w,b
 33767  018C4E  E105               	bnz	u14680
 33768  018C50  0E15               	movlw	21
 33769  018C52  0100               	movlb	0	; () banked
 33770  018C54  5DA9               	subwf	floor@expon& (0+255),w,b
 33771  018C56  A0D8               	btfss	status,0,c
 33772  018C58  D007               	goto	l20621
 33773  018C5A                     u14680:
 33774                           
 33775                           ; BSR set to: 0
 33776  018C5A  C0A3  F0A3         	movff	floor@x,?_floor
 33777  018C5E  C0A4  F0A4         	movff	floor@x+1,?_floor+1
 33778  018C62  C0A5  F0A5         	movff	floor@x+2,?_floor+2
 33779  018C66  0012               	return	
 33780  018C68                     l20621:
 33781                           
 33782                           ; BSR set to: 0
 33783  018C68  C0A3  F08A         	movff	floor@x,___fttol@f1
 33784  018C6C  C0A4  F08B         	movff	floor@x+1,___fttol@f1+1
 33785  018C70  C0A5  F08C         	movff	floor@x+2,___fttol@f1+2
 33786  018C74  ECF9  F0C1         	call	___fttol	;wreg free
 33787  018C78  C08A  F099         	movff	?___fttol,___altoft@c
 33788  018C7C  C08B  F09A         	movff	?___fttol+1,___altoft@c+1
 33789  018C80  C08C  F09B         	movff	?___fttol+2,___altoft@c+2
 33790  018C84  C08D  F09C         	movff	?___fttol+3,___altoft@c+3
 33791  018C88  ECE8  F0D0         	call	___altoft	;wreg free
 33792  018C8C  C099  F0A6         	movff	?___altoft,floor@i
 33793  018C90  C09A  F0A7         	movff	?___altoft+1,floor@i+1
 33794  018C94  C09B  F0A8         	movff	?___altoft+2,floor@i+2
 33795  018C98  C0A3  F099         	movff	floor@x,___ftge@ff1
 33796  018C9C  C0A4  F09A         	movff	floor@x+1,___ftge@ff1+1
 33797  018CA0  C0A5  F09B         	movff	floor@x+2,___ftge@ff1+2
 33798  018CA4  C0A6  F09C         	movff	floor@i,___ftge@ff2
 33799  018CA8  C0A7  F09D         	movff	floor@i+1,___ftge@ff2+1
 33800  018CAC  C0A8  F09E         	movff	floor@i+2,___ftge@ff2+2
 33801  018CB0  ECEB  F0CA         	call	___ftge	;wreg free
 33802  018CB4  0100               	movlb	0	; () banked
 33803  018CB6  B0D8               	btfsc	status,0,c
 33804  018CB8  D018               	goto	l11009
 33805                           
 33806                           ; BSR set to: 0
 33807  018CBA  C0A6  F08D         	movff	floor@i,___ftadd@f1
 33808  018CBE  C0A7  F08E         	movff	floor@i+1,___ftadd@f1+1
 33809  018CC2  C0A8  F08F         	movff	floor@i+2,___ftadd@f1+2
 33810  018CC6  0E00               	movlw	0
 33811  018CC8  0100               	movlb	0	; () banked
 33812  018CCA  6F90               	movwf	___ftadd@f2& (0+255),b
 33813  018CCC  0E80               	movlw	128
 33814  018CCE  0100               	movlb	0	; () banked
 33815  018CD0  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 33816  018CD2  0EBF               	movlw	191
 33817  018CD4  0100               	movlb	0	; () banked
 33818  018CD6  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 33819  018CD8  EC69  F0B2         	call	___ftadd	;wreg free
 33820  018CDC  C08D  F0A3         	movff	?___ftadd,?_floor
 33821  018CE0  C08E  F0A4         	movff	?___ftadd+1,?_floor+1
 33822  018CE4  C08F  F0A5         	movff	?___ftadd+2,?_floor+2
 33823  018CE8  0012               	return	
 33824  018CEA                     l11009:
 33825                           
 33826                           ; BSR set to: 0
 33827  018CEA  C0A6  F0A3         	movff	floor@i,?_floor
 33828  018CEE  C0A7  F0A4         	movff	floor@i+1,?_floor+1
 33829  018CF2  C0A8  F0A5         	movff	floor@i+2,?_floor+2
 33830  018CF6  0012               	return		;funcret
 33831  018CF8                     __end_of_floor:
 33832                           	opt stack 0
 33833                           tblptru	equ	0xFF8
 33834                           tblptrh	equ	0xFF7
 33835                           tblptrl	equ	0xFF6
 33836                           tablat	equ	0xFF5
 33837                           prodh	equ	0xFF4
 33838                           prodl	equ	0xFF3
 33839                           intcon	equ	0xFF2
 33840                           postinc0	equ	0xFEE
 33841                           wreg	equ	0xFE8
 33842                           postdec1	equ	0xFE5
 33843                           fsr1h	equ	0xFE2
 33844                           fsr1l	equ	0xFE1
 33845                           indf2	equ	0xFDF
 33846                           postinc2	equ	0xFDE
 33847                           postdec2	equ	0xFDD
 33848                           fsr2h	equ	0xFDA
 33849                           fsr2l	equ	0xFD9
 33850                           status	equ	0xFD8
 33851                           
 33852 ;; *************** function _frexp *****************
 33853 ;; Defined at:
 33854 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
 33855 ;; Parameters:    Size  Location     Type
 33856 ;;  value           3    0[BANK0 ] int 
 33857 ;;  eptr            2    3[BANK0 ] PTR int 
 33858 ;;		 -> floor@expon(2), 
 33859 ;; Auto vars:     Size  Location     Type
 33860 ;;		None
 33861 ;; Return value:  Size  Location     Type
 33862 ;;                  3    0[BANK0 ] PTR int 
 33863 ;; Registers used:
 33864 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 33865 ;; Tracked objects:
 33866 ;;		On entry : 0/0
 33867 ;;		On exit  : 0/0
 33868 ;;		Unchanged: 0/0
 33869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33870 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33872 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33873 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33874 ;;Total ram usage:        7 bytes
 33875 ;; Hardware stack levels used:    1
 33876 ;; Hardware stack levels required when called:    3
 33877 ;; This function calls:
 33878 ;;		Nothing
 33879 ;; This function is called by:
 33880 ;;		_floor
 33881 ;; This function uses a non-reentrant model
 33882 ;;
 33883                           
 33884                           	psect	text127
 33885  01A308                     __ptext127:
 33886                           	opt stack 0
 33887  01A308                     _frexp:
 33888                           	opt stack 23
 33889                           
 33890                           ;incstack = 0
 33891  01A308  0100               	movlb	0	; () banked
 33892  01A30A  5160               	movf	frexp@value& (0+255),w,b
 33893  01A30C  0100               	movlb	0	; () banked
 33894  01A30E  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 33895  01A310  0100               	movlb	0	; () banked
 33896  01A312  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 33897  01A314  A4D8               	btfss	status,2,c
 33898  01A316  D009               	goto	l20085
 33899                           
 33900                           ; BSR set to: 0
 33901  01A318  C063  FFD9         	movff	frexp@eptr,fsr2l
 33902  01A31C  C064  FFDA         	movff	frexp@eptr+1,fsr2h
 33903  01A320  0E00               	movlw	0
 33904  01A322  6EDE               	movwf	postinc2,c
 33905  01A324  0E00               	movlw	0
 33906  01A326  6EDD               	movwf	postdec2,c
 33907                           
 33908                           ; BSR set to: 0
 33909                           ;	Return value of _frexp is never used
 33910  01A328  0012               	return	
 33911  01A32A                     l20085:
 33912                           
 33913                           ; BSR set to: 0
 33914  01A32A  0100               	movlb	0	; () banked
 33915  01A32C  5162               	movf	(frexp@value+2)& (0+255),w,b
 33916  01A32E  0B7F               	andlw	127
 33917  01A330  0100               	movlb	0	; () banked
 33918  01A332  6F65               	movwf	??_frexp& (0+255),b
 33919  01A334  6B66               	clrf	(??_frexp+1)& (0+255),b
 33920  01A336  90D8               	bcf	status,0,c
 33921  01A338  0100               	movlb	0	; () banked
 33922  01A33A  3765               	rlcf	??_frexp& (0+255),f,b
 33923  01A33C  3766               	rlcf	(??_frexp+1)& (0+255),f,b
 33924  01A33E  C063  FFD9         	movff	frexp@eptr,fsr2l
 33925  01A342  C064  FFDA         	movff	frexp@eptr+1,fsr2h
 33926  01A346  C065  FFDE         	movff	??_frexp,postinc2
 33927  01A34A  C066  FFDD         	movff	??_frexp+1,postdec2
 33928  01A34E  0100               	movlb	0	; () banked
 33929  01A350  AF61               	btfss	(frexp@value+1)& (0+255),7,b
 33930  01A352  D004               	goto	u13680
 33931  01A354  0100               	movlb	0	; () banked
 33932  01A356  6B65               	clrf	??_frexp& (0+255),b
 33933  01A358  2B65               	incf	??_frexp& (0+255),f,b
 33934  01A35A  D002               	goto	u13688
 33935  01A35C                     u13680:
 33936  01A35C  0100               	movlb	0	; () banked
 33937  01A35E  6B65               	clrf	??_frexp& (0+255),b
 33938  01A360                     u13688:
 33939  01A360  0100               	movlb	0	; () banked
 33940  01A362  5165               	movf	??_frexp& (0+255),w,b
 33941  01A364  C063  FFD9         	movff	frexp@eptr,fsr2l
 33942  01A368  C064  FFDA         	movff	frexp@eptr+1,fsr2h
 33943  01A36C  12DE               	iorwf	postinc2,f,c
 33944  01A36E  0E00               	movlw	0
 33945  01A370  12DD               	iorwf	postdec2,f,c
 33946                           
 33947                           ; BSR set to: 0
 33948  01A372  C063  FFD9         	movff	frexp@eptr,fsr2l
 33949  01A376  C064  FFDA         	movff	frexp@eptr+1,fsr2h
 33950  01A37A  0E82               	movlw	130
 33951  01A37C  26DE               	addwf	postinc2,f,c
 33952  01A37E  0EFF               	movlw	255
 33953  01A380  22DD               	addwfc	postdec2,f,c
 33954                           
 33955                           ; BSR set to: 0
 33956  01A382  0100               	movlb	0	; () banked
 33957  01A384  8162               	bsf	(frexp@value+2)& (0+255),0,b
 33958  01A386  8362               	bsf	(frexp@value+2)& (0+255),1,b
 33959  01A388  8562               	bsf	(frexp@value+2)& (0+255),2,b
 33960  01A38A  8762               	bsf	(frexp@value+2)& (0+255),3,b
 33961  01A38C  8962               	bsf	(frexp@value+2)& (0+255),4,b
 33962  01A38E  8B62               	bsf	(frexp@value+2)& (0+255),5,b
 33963  01A390  9D62               	bcf	(frexp@value+2)& (0+255),6,b
 33964                           
 33965                           ; BSR set to: 0
 33966  01A392  0100               	movlb	0	; () banked
 33967  01A394  9F61               	bcf	(frexp@value+1)& (0+255),7,b
 33968  01A396  0012               	return	
 33969  01A398                     __end_of_frexp:
 33970                           	opt stack 0
 33971                           tblptru	equ	0xFF8
 33972                           tblptrh	equ	0xFF7
 33973                           tblptrl	equ	0xFF6
 33974                           tablat	equ	0xFF5
 33975                           prodh	equ	0xFF4
 33976                           prodl	equ	0xFF3
 33977                           intcon	equ	0xFF2
 33978                           postinc0	equ	0xFEE
 33979                           wreg	equ	0xFE8
 33980                           postdec1	equ	0xFE5
 33981                           fsr1h	equ	0xFE2
 33982                           fsr1l	equ	0xFE1
 33983                           indf2	equ	0xFDF
 33984                           postinc2	equ	0xFDE
 33985                           postdec2	equ	0xFDD
 33986                           fsr2h	equ	0xFDA
 33987                           fsr2l	equ	0xFD9
 33988                           status	equ	0xFD8
 33989                           
 33990 ;; *************** function ___fttol *****************
 33991 ;; Defined at:
 33992 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 33993 ;; Parameters:    Size  Location     Type
 33994 ;;  f1              3   42[BANK0 ] float 
 33995 ;; Auto vars:     Size  Location     Type
 33996 ;;  lval            4   52[BANK0 ] unsigned long 
 33997 ;;  exp1            1   56[BANK0 ] unsigned char 
 33998 ;;  sign1           1   51[BANK0 ] unsigned char 
 33999 ;; Return value:  Size  Location     Type
 34000 ;;                  4   42[BANK0 ] long 
 34001 ;; Registers used:
 34002 ;;		wreg, status,2, status,0
 34003 ;; Tracked objects:
 34004 ;;		On entry : 0/0
 34005 ;;		On exit  : 0/0
 34006 ;;		Unchanged: 0/0
 34007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34008 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34009 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34010 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34011 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34012 ;;Total ram usage:       15 bytes
 34013 ;; Hardware stack levels used:    1
 34014 ;; Hardware stack levels required when called:    3
 34015 ;; This function calls:
 34016 ;;		Nothing
 34017 ;; This function is called by:
 34018 ;;		_Generator_RPM_Cal
 34019 ;;		_printf
 34020 ;;		_floor
 34021 ;; This function uses a non-reentrant model
 34022 ;;
 34023                           
 34024                           	psect	text128
 34025  0183F2                     __ptext128:
 34026                           	opt stack 0
 34027  0183F2                     ___fttol:
 34028                           	opt stack 23
 34029                           
 34030                           ; BSR set to: 0
 34031                           ;incstack = 0
 34032  0183F2  C08C  F08E         	movff	___fttol@f1+2,??___fttol
 34033  0183F6  0100               	movlb	0	; () banked
 34034  0183F8  6B8F               	clrf	(??___fttol+1)& (0+255),b
 34035  0183FA  6B90               	clrf	(??___fttol+2)& (0+255),b
 34036  0183FC  0100               	movlb	0	; () banked
 34037  0183FE  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 34038  018400  0100               	movlb	0	; () banked
 34039  018402  378E               	rlcf	??___fttol& (0+255),f,b
 34040  018404  E301               	bnc	u13521
 34041  018406  818F               	bsf	(??___fttol+1)& (0+255),0,b
 34042  018408                     u13521:
 34043  018408  0100               	movlb	0	; () banked
 34044  01840A  518E               	movf	??___fttol& (0+255),w,b
 34045  01840C  0100               	movlb	0	; () banked
 34046  01840E  6F98               	movwf	___fttol@exp1& (0+255),b
 34047  018410  0100               	movlb	0	; () banked
 34048  018412  5198               	movf	___fttol@exp1& (0+255),w,b
 34049  018414  A4D8               	btfss	status,2,c
 34050  018416  D00A               	goto	l19991
 34051                           
 34052                           ; BSR set to: 0
 34053  018418  0E00               	movlw	0
 34054  01841A  0100               	movlb	0	; () banked
 34055  01841C  6F8A               	movwf	?___fttol& (0+255),b
 34056  01841E  0E00               	movlw	0
 34057  018420  6F8B               	movwf	(?___fttol+1)& (0+255),b
 34058  018422  0E00               	movlw	0
 34059  018424  6F8C               	movwf	(?___fttol+2)& (0+255),b
 34060  018426  0E00               	movlw	0
 34061  018428  6F8D               	movwf	(?___fttol+3)& (0+255),b
 34062                           
 34063                           ; BSR set to: 0
 34064  01842A  0012               	return	
 34065  01842C                     l19991:
 34066                           
 34067                           ; BSR set to: 0
 34068  01842C  0E17               	movlw	23
 34069  01842E  0100               	movlb	0	; () banked
 34070  018430  6F8E               	movwf	??___fttol& (0+255),b
 34071  018432  C08A  F08F         	movff	___fttol@f1,??___fttol+1
 34072  018436  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
 34073  01843A  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
 34074  01843E  0100               	movlb	0	; () banked
 34075  018440  298E               	incf	??___fttol& (0+255),w,b
 34076  018442  0100               	movlb	0	; () banked
 34077  018444  6F92               	movwf	(??___fttol+4)& (0+255),b
 34078  018446  D005               	goto	u13540
 34079  018448                     u13545:
 34080  018448  0100               	movlb	0	; () banked
 34081  01844A  90D8               	bcf	status,0,c
 34082  01844C  3391               	rrcf	(??___fttol+3)& (0+255),f,b
 34083  01844E  3390               	rrcf	(??___fttol+2)& (0+255),f,b
 34084  018450  338F               	rrcf	(??___fttol+1)& (0+255),f,b
 34085  018452                     u13540:
 34086  018452  0100               	movlb	0	; () banked
 34087  018454  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
 34088  018456  D7F8               	goto	u13545
 34089  018458  0100               	movlb	0	; () banked
 34090  01845A  518F               	movf	(??___fttol+1)& (0+255),w,b
 34091  01845C  0100               	movlb	0	; () banked
 34092  01845E  6F93               	movwf	___fttol@sign1& (0+255),b
 34093                           
 34094                           ; BSR set to: 0
 34095  018460  0100               	movlb	0	; () banked
 34096  018462  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
 34097                           
 34098                           ; BSR set to: 0
 34099  018464  0EFF               	movlw	255
 34100  018466  0100               	movlb	0	; () banked
 34101  018468  178A               	andwf	___fttol@f1& (0+255),f,b
 34102  01846A  0EFF               	movlw	255
 34103  01846C  0100               	movlb	0	; () banked
 34104  01846E  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
 34105  018470  0E00               	movlw	0
 34106  018472  0100               	movlb	0	; () banked
 34107  018474  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
 34108                           
 34109                           ; BSR set to: 0
 34110  018476  0100               	movlb	0	; () banked
 34111  018478  518A               	movf	___fttol@f1& (0+255),w,b
 34112  01847A  0100               	movlb	0	; () banked
 34113  01847C  6F94               	movwf	___fttol@lval& (0+255),b
 34114  01847E  0100               	movlb	0	; () banked
 34115  018480  518B               	movf	(___fttol@f1+1)& (0+255),w,b
 34116  018482  0100               	movlb	0	; () banked
 34117  018484  6F95               	movwf	(___fttol@lval+1)& (0+255),b
 34118  018486  0100               	movlb	0	; () banked
 34119  018488  518C               	movf	(___fttol@f1+2)& (0+255),w,b
 34120  01848A  0100               	movlb	0	; () banked
 34121  01848C  6F96               	movwf	(___fttol@lval+2)& (0+255),b
 34122  01848E  0100               	movlb	0	; () banked
 34123  018490  6B97               	clrf	(___fttol@lval+3)& (0+255),b
 34124                           
 34125                           ; BSR set to: 0
 34126  018492  0E8E               	movlw	142
 34127  018494  0100               	movlb	0	; () banked
 34128  018496  5F98               	subwf	___fttol@exp1& (0+255),f,b
 34129                           
 34130                           ; BSR set to: 0
 34131  018498  0100               	movlb	0	; () banked
 34132  01849A  AF98               	btfss	___fttol@exp1& (0+255),7,b
 34133  01849C  D01A               	goto	l20013
 34134                           
 34135                           ; BSR set to: 0
 34136  01849E  0100               	movlb	0	; () banked
 34137  0184A0  5198               	movf	___fttol@exp1& (0+255),w,b
 34138  0184A2  0A80               	xorlw	128
 34139  0184A4  0F8F               	addlw	143
 34140  0184A6  B0D8               	btfsc	status,0,c
 34141  0184A8  D00A               	goto	l20009
 34142                           
 34143                           ; BSR set to: 0
 34144  0184AA  0E00               	movlw	0
 34145  0184AC  0100               	movlb	0	; () banked
 34146  0184AE  6F8A               	movwf	?___fttol& (0+255),b
 34147  0184B0  0E00               	movlw	0
 34148  0184B2  6F8B               	movwf	(?___fttol+1)& (0+255),b
 34149  0184B4  0E00               	movlw	0
 34150  0184B6  6F8C               	movwf	(?___fttol+2)& (0+255),b
 34151  0184B8  0E00               	movlw	0
 34152  0184BA  6F8D               	movwf	(?___fttol+3)& (0+255),b
 34153                           
 34154                           ; BSR set to: 0
 34155  0184BC  0012               	return	
 34156  0184BE                     l20009:
 34157                           
 34158                           ; BSR set to: 0
 34159  0184BE  0100               	movlb	0	; () banked
 34160  0184C0  90D8               	bcf	status,0,c
 34161  0184C2  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
 34162  0184C4  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
 34163  0184C6  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
 34164  0184C8  3394               	rrcf	___fttol@lval& (0+255),f,b
 34165                           
 34166                           ; BSR set to: 0
 34167  0184CA  0100               	movlb	0	; () banked
 34168  0184CC  3F98               	incfsz	___fttol@exp1& (0+255),f,b
 34169  0184CE  D7F7               	goto	l20009
 34170                           
 34171                           ; BSR set to: 0
 34172  0184D0  D01B               	goto	l20023
 34173  0184D2                     l20013:
 34174                           
 34175                           ; BSR set to: 0
 34176  0184D2  0E17               	movlw	23
 34177  0184D4  0100               	movlb	0	; () banked
 34178  0184D6  6598               	cpfsgt	___fttol@exp1& (0+255),b
 34179  0184D8  D012               	goto	l20021
 34180                           
 34181                           ; BSR set to: 0
 34182  0184DA  0E00               	movlw	0
 34183  0184DC  0100               	movlb	0	; () banked
 34184  0184DE  6F8A               	movwf	?___fttol& (0+255),b
 34185  0184E0  0E00               	movlw	0
 34186  0184E2  6F8B               	movwf	(?___fttol+1)& (0+255),b
 34187  0184E4  0E00               	movlw	0
 34188  0184E6  6F8C               	movwf	(?___fttol+2)& (0+255),b
 34189  0184E8  0E00               	movlw	0
 34190  0184EA  6F8D               	movwf	(?___fttol+3)& (0+255),b
 34191                           
 34192                           ; BSR set to: 0
 34193  0184EC  0012               	return	
 34194  0184EE                     l20019:
 34195                           
 34196                           ; BSR set to: 0
 34197  0184EE  0100               	movlb	0	; () banked
 34198  0184F0  90D8               	bcf	status,0,c
 34199  0184F2  3794               	rlcf	___fttol@lval& (0+255),f,b
 34200  0184F4  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
 34201  0184F6  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
 34202  0184F8  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
 34203  0184FA  0100               	movlb	0	; () banked
 34204  0184FC  0798               	decf	___fttol@exp1& (0+255),f,b
 34205  0184FE                     l20021:
 34206                           
 34207                           ; BSR set to: 0
 34208  0184FE  0100               	movlb	0	; () banked
 34209  018500  5198               	movf	___fttol@exp1& (0+255),w,b
 34210  018502  0100               	movlb	0	; () banked
 34211  018504  A4D8               	btfss	status,2,c
 34212  018506  D7F3               	goto	l20019
 34213  018508                     l20023:
 34214                           
 34215                           ; BSR set to: 0
 34216  018508  0100               	movlb	0	; () banked
 34217  01850A  5193               	movf	___fttol@sign1& (0+255),w,b
 34218  01850C  0100               	movlb	0	; () banked
 34219  01850E  B4D8               	btfsc	status,2,c
 34220  018510  D009               	goto	l20027
 34221                           
 34222                           ; BSR set to: 0
 34223  018512  0100               	movlb	0	; () banked
 34224  018514  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
 34225  018516  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
 34226  018518  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
 34227  01851A  6D94               	negf	___fttol@lval& (0+255),b
 34228  01851C  0E00               	movlw	0
 34229  01851E  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
 34230  018520  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
 34231  018522  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
 34232  018524                     l20027:
 34233                           
 34234                           ; BSR set to: 0
 34235  018524  C094  F08A         	movff	___fttol@lval,?___fttol
 34236  018528  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
 34237  01852C  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
 34238  018530  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
 34239  018534  0012               	return	
 34240  018536                     __end_of___fttol:
 34241                           	opt stack 0
 34242                           tblptru	equ	0xFF8
 34243                           tblptrh	equ	0xFF7
 34244                           tblptrl	equ	0xFF6
 34245                           tablat	equ	0xFF5
 34246                           prodh	equ	0xFF4
 34247                           prodl	equ	0xFF3
 34248                           intcon	equ	0xFF2
 34249                           postinc0	equ	0xFEE
 34250                           wreg	equ	0xFE8
 34251                           postdec1	equ	0xFE5
 34252                           fsr1h	equ	0xFE2
 34253                           fsr1l	equ	0xFE1
 34254                           indf2	equ	0xFDF
 34255                           postinc2	equ	0xFDE
 34256                           postdec2	equ	0xFDD
 34257                           fsr2h	equ	0xFDA
 34258                           fsr2l	equ	0xFD9
 34259                           status	equ	0xFD8
 34260                           
 34261 ;; *************** function ___ftge *****************
 34262 ;; Defined at:
 34263 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 34264 ;; Parameters:    Size  Location     Type
 34265 ;;  ff1             3   57[BANK0 ] float 
 34266 ;;  ff2             3   60[BANK0 ] float 
 34267 ;; Auto vars:     Size  Location     Type
 34268 ;;		None
 34269 ;; Return value:  Size  Location     Type
 34270 ;;		None               void
 34271 ;; Registers used:
 34272 ;;		wreg, status,2, status,0
 34273 ;; Tracked objects:
 34274 ;;		On entry : 0/0
 34275 ;;		On exit  : 0/0
 34276 ;;		Unchanged: 0/0
 34277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34278 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34280 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34281 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34282 ;;Total ram usage:        9 bytes
 34283 ;; Hardware stack levels used:    1
 34284 ;; Hardware stack levels required when called:    3
 34285 ;; This function calls:
 34286 ;;		Nothing
 34287 ;; This function is called by:
 34288 ;;		_Turbine_RPM_Cal
 34289 ;;		_Generator_RPM_Cal
 34290 ;;		_Stopping_state_function
 34291 ;;		_Turbine_Restore_Check
 34292 ;;		_Wind_Speed_Error_Trigger
 34293 ;;		_Grid_UV
 34294 ;;		_Grid_OV
 34295 ;;		_Turbine_Over_Speed
 34296 ;;		_Turbine_Under_speed
 34297 ;;		_Grid_Frequency
 34298 ;;		_Grid_Over_Current
 34299 ;;		_Generator_RPM
 34300 ;;		_Grid_Minimum_Power
 34301 ;;		_Grid_Maximum_Power
 34302 ;;		_Turbine_OverLoaded_Error
 34303 ;;		_VFD_Freq_Step_up
 34304 ;;		_Volt_Curr_Read
 34305 ;;		_Cons_Gene
 34306 ;;		_Freq_Calc
 34307 ;;		_R_PF_Calc
 34308 ;;		_R_PF_Avg
 34309 ;;		_Y_PF_Calc
 34310 ;;		_Y_PF_Avg
 34311 ;;		_B_PF_Calc
 34312 ;;		_B_PF_Avg
 34313 ;;		_Power_Factor
 34314 ;;		_Ramp_Up_Slip
 34315 ;;		_Ramp_Up_Slip_Error_Trigger
 34316 ;;		_printf
 34317 ;;		_cos
 34318 ;;		_sin
 34319 ;;		_sqrt
 34320 ;;		_floor
 34321 ;;		_Turbine2Wheel_Ratio
 34322 ;;		_Turbine_RPM_Checking_Rampup
 34323 ;; This function uses a non-reentrant model
 34324 ;;
 34325                           
 34326                           	psect	text129
 34327  0195D6                     __ptext129:
 34328                           	opt stack 0
 34329  0195D6                     ___ftge:
 34330                           	opt stack 26
 34331                           
 34332                           ; BSR set to: 0
 34333                           ;incstack = 0
 34334  0195D6  0100               	movlb	0	; () banked
 34335  0195D8  AF9B               	btfss	(___ftge@ff1+2)& (0+255),7,b
 34336  0195DA  D01D               	goto	l19967
 34337                           
 34338                           ; BSR set to: 0
 34339  0195DC  C099  F09F         	movff	___ftge@ff1,??___ftge
 34340  0195E0  C09A  F0A0         	movff	___ftge@ff1+1,??___ftge+1
 34341  0195E4  C09B  F0A1         	movff	___ftge@ff1+2,??___ftge+2
 34342  0195E8  0100               	movlb	0	; () banked
 34343  0195EA  1F9F               	comf	??___ftge& (0+255),f,b
 34344  0195EC  1FA0               	comf	(??___ftge+1)& (0+255),f,b
 34345  0195EE  1FA1               	comf	(??___ftge+2)& (0+255),f,b
 34346  0195F0  2B9F               	incf	??___ftge& (0+255),f,b
 34347  0195F2  0E00               	movlw	0
 34348  0195F4  23A0               	addwfc	(??___ftge+1)& (0+255),f,b
 34349  0195F6  23A1               	addwfc	(??___ftge+2)& (0+255),f,b
 34350  0195F8  0E00               	movlw	0
 34351  0195FA  0100               	movlb	0	; () banked
 34352  0195FC  259F               	addwf	??___ftge& (0+255),w,b
 34353  0195FE  0100               	movlb	0	; () banked
 34354  019600  6F99               	movwf	___ftge@ff1& (0+255),b
 34355  019602  0E00               	movlw	0
 34356  019604  0100               	movlb	0	; () banked
 34357  019606  21A0               	addwfc	(??___ftge+1)& (0+255),w,b
 34358  019608  0100               	movlb	0	; () banked
 34359  01960A  6F9A               	movwf	(___ftge@ff1+1)& (0+255),b
 34360  01960C  0E80               	movlw	128
 34361  01960E  0100               	movlb	0	; () banked
 34362  019610  21A1               	addwfc	(??___ftge+2)& (0+255),w,b
 34363  019612  0100               	movlb	0	; () banked
 34364  019614  6F9B               	movwf	(___ftge@ff1+2)& (0+255),b
 34365  019616                     l19967:
 34366                           
 34367                           ; BSR set to: 0
 34368  019616  0100               	movlb	0	; () banked
 34369  019618  AF9E               	btfss	(___ftge@ff2+2)& (0+255),7,b
 34370  01961A  D01D               	goto	l19971
 34371                           
 34372                           ; BSR set to: 0
 34373  01961C  C09C  F09F         	movff	___ftge@ff2,??___ftge
 34374  019620  C09D  F0A0         	movff	___ftge@ff2+1,??___ftge+1
 34375  019624  C09E  F0A1         	movff	___ftge@ff2+2,??___ftge+2
 34376  019628  0100               	movlb	0	; () banked
 34377  01962A  1F9F               	comf	??___ftge& (0+255),f,b
 34378  01962C  1FA0               	comf	(??___ftge+1)& (0+255),f,b
 34379  01962E  1FA1               	comf	(??___ftge+2)& (0+255),f,b
 34380  019630  2B9F               	incf	??___ftge& (0+255),f,b
 34381  019632  0E00               	movlw	0
 34382  019634  23A0               	addwfc	(??___ftge+1)& (0+255),f,b
 34383  019636  23A1               	addwfc	(??___ftge+2)& (0+255),f,b
 34384  019638  0E00               	movlw	0
 34385  01963A  0100               	movlb	0	; () banked
 34386  01963C  259F               	addwf	??___ftge& (0+255),w,b
 34387  01963E  0100               	movlb	0	; () banked
 34388  019640  6F9C               	movwf	___ftge@ff2& (0+255),b
 34389  019642  0E00               	movlw	0
 34390  019644  0100               	movlb	0	; () banked
 34391  019646  21A0               	addwfc	(??___ftge+1)& (0+255),w,b
 34392  019648  0100               	movlb	0	; () banked
 34393  01964A  6F9D               	movwf	(___ftge@ff2+1)& (0+255),b
 34394  01964C  0E80               	movlw	128
 34395  01964E  0100               	movlb	0	; () banked
 34396  019650  21A1               	addwfc	(??___ftge+2)& (0+255),w,b
 34397  019652  0100               	movlb	0	; () banked
 34398  019654  6F9E               	movwf	(___ftge@ff2+2)& (0+255),b
 34399  019656                     l19971:
 34400                           
 34401                           ; BSR set to: 0
 34402  019656  0E00               	movlw	0
 34403  019658  0100               	movlb	0	; () banked
 34404  01965A  1B99               	xorwf	___ftge@ff1& (0+255),f,b
 34405  01965C  0E00               	movlw	0
 34406  01965E  0100               	movlb	0	; () banked
 34407  019660  1B9A               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 34408  019662  0E80               	movlw	128
 34409  019664  0100               	movlb	0	; () banked
 34410  019666  1B9B               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 34411                           
 34412                           ; BSR set to: 0
 34413  019668  0E00               	movlw	0
 34414  01966A  0100               	movlb	0	; () banked
 34415  01966C  1B9C               	xorwf	___ftge@ff2& (0+255),f,b
 34416  01966E  0E00               	movlw	0
 34417  019670  0100               	movlb	0	; () banked
 34418  019672  1B9D               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 34419  019674  0E80               	movlw	128
 34420  019676  0100               	movlb	0	; () banked
 34421  019678  1B9E               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 34422  01967A  0100               	movlb	0	; () banked
 34423  01967C  519C               	movf	___ftge@ff2& (0+255),w,b
 34424  01967E  0100               	movlb	0	; () banked
 34425  019680  5D99               	subwf	___ftge@ff1& (0+255),w,b
 34426  019682  0100               	movlb	0	; () banked
 34427  019684  519D               	movf	(___ftge@ff2+1)& (0+255),w,b
 34428  019686  0100               	movlb	0	; () banked
 34429  019688  599A               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 34430  01968A  0100               	movlb	0	; () banked
 34431  01968C  519E               	movf	(___ftge@ff2+2)& (0+255),w,b
 34432  01968E  0100               	movlb	0	; () banked
 34433  019690  599B               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 34434  019692  B0D8               	btfsc	status,0,c
 34435  019694  D002               	goto	l19977
 34436                           
 34437                           ; BSR set to: 0
 34438  019696  90D8               	bcf	status,0,c
 34439  019698  0012               	return	
 34440  01969A                     l19977:
 34441                           
 34442                           ; BSR set to: 0
 34443  01969A  80D8               	bsf	status,0,c
 34444                           
 34445                           ; BSR set to: 0
 34446  01969C  0012               	return	
 34447  01969E                     __end_of___ftge:
 34448                           	opt stack 0
 34449                           tblptru	equ	0xFF8
 34450                           tblptrh	equ	0xFF7
 34451                           tblptrl	equ	0xFF6
 34452                           tablat	equ	0xFF5
 34453                           prodh	equ	0xFF4
 34454                           prodl	equ	0xFF3
 34455                           intcon	equ	0xFF2
 34456                           postinc0	equ	0xFEE
 34457                           wreg	equ	0xFE8
 34458                           postdec1	equ	0xFE5
 34459                           fsr1h	equ	0xFE2
 34460                           fsr1l	equ	0xFE1
 34461                           indf2	equ	0xFDF
 34462                           postinc2	equ	0xFDE
 34463                           postdec2	equ	0xFDD
 34464                           fsr2h	equ	0xFDA
 34465                           fsr2l	equ	0xFD9
 34466                           status	equ	0xFD8
 34467                           
 34468 ;; *************** function ___altoft *****************
 34469 ;; Defined at:
 34470 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 34471 ;; Parameters:    Size  Location     Type
 34472 ;;  c               4   57[BANK0 ] long 
 34473 ;; Auto vars:     Size  Location     Type
 34474 ;;  sign            1   66[BANK0 ] unsigned char 
 34475 ;;  exp             1   65[BANK0 ] unsigned char 
 34476 ;; Return value:  Size  Location     Type
 34477 ;;                  3   57[BANK0 ] float 
 34478 ;; Registers used:
 34479 ;;		wreg, status,2, status,0, cstack
 34480 ;; Tracked objects:
 34481 ;;		On entry : 0/0
 34482 ;;		On exit  : 0/0
 34483 ;;		Unchanged: 0/0
 34484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34485 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34486 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34487 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34488 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34489 ;;Total ram usage:       10 bytes
 34490 ;; Hardware stack levels used:    1
 34491 ;; Hardware stack levels required when called:    4
 34492 ;; This function calls:
 34493 ;;		___ftpack
 34494 ;; This function is called by:
 34495 ;;		_floor
 34496 ;; This function uses a non-reentrant model
 34497 ;;
 34498                           
 34499                           	psect	text130
 34500  01A1D0                     __ptext130:
 34501                           	opt stack 0
 34502  01A1D0                     ___altoft:
 34503                           	opt stack 22
 34504                           
 34505                           ; BSR set to: 0
 34506                           ;incstack = 0
 34507  01A1D0  0E00               	movlw	0
 34508  01A1D2  0100               	movlb	0	; () banked
 34509  01A1D4  6FA2               	movwf	___altoft@sign& (0+255),b
 34510  01A1D6  0E8E               	movlw	142
 34511  01A1D8  0100               	movlb	0	; () banked
 34512  01A1DA  6FA1               	movwf	___altoft@exp& (0+255),b
 34513                           
 34514                           ; BSR set to: 0
 34515  01A1DC  0100               	movlb	0	; () banked
 34516  01A1DE  AF9C               	btfss	(___altoft@c+3)& (0+255),7,b
 34517  01A1E0  D015               	goto	l19949
 34518                           
 34519                           ; BSR set to: 0
 34520  01A1E2  0100               	movlb	0	; () banked
 34521  01A1E4  1F9C               	comf	(___altoft@c+3)& (0+255),f,b
 34522  01A1E6  1F9B               	comf	(___altoft@c+2)& (0+255),f,b
 34523  01A1E8  1F9A               	comf	(___altoft@c+1)& (0+255),f,b
 34524  01A1EA  6D99               	negf	___altoft@c& (0+255),b
 34525  01A1EC  0E00               	movlw	0
 34526  01A1EE  239A               	addwfc	(___altoft@c+1)& (0+255),f,b
 34527  01A1F0  239B               	addwfc	(___altoft@c+2)& (0+255),f,b
 34528  01A1F2  239C               	addwfc	(___altoft@c+3)& (0+255),f,b
 34529                           
 34530                           ; BSR set to: 0
 34531  01A1F4  0E01               	movlw	1
 34532  01A1F6  0100               	movlb	0	; () banked
 34533  01A1F8  6FA2               	movwf	___altoft@sign& (0+255),b
 34534                           
 34535                           ; BSR set to: 0
 34536  01A1FA  D008               	goto	l19949
 34537  01A1FC                     l19947:
 34538                           
 34539                           ; BSR set to: 0
 34540  01A1FC  0100               	movlb	0	; () banked
 34541  01A1FE  90D8               	bcf	status,0,c
 34542  01A200  339C               	rrcf	(___altoft@c+3)& (0+255),f,b
 34543  01A202  339B               	rrcf	(___altoft@c+2)& (0+255),f,b
 34544  01A204  339A               	rrcf	(___altoft@c+1)& (0+255),f,b
 34545  01A206  3399               	rrcf	___altoft@c& (0+255),f,b
 34546  01A208  0100               	movlb	0	; () banked
 34547  01A20A  2BA1               	incf	___altoft@exp& (0+255),f,b
 34548  01A20C                     l19949:
 34549                           
 34550                           ; BSR set to: 0
 34551  01A20C  0E00               	movlw	0
 34552  01A20E  0100               	movlb	0	; () banked
 34553  01A210  1599               	andwf	___altoft@c& (0+255),w,b
 34554  01A212  0100               	movlb	0	; () banked
 34555  01A214  6F9D               	movwf	??___altoft& (0+255),b
 34556  01A216  0E00               	movlw	0
 34557  01A218  0100               	movlb	0	; () banked
 34558  01A21A  159A               	andwf	(___altoft@c+1)& (0+255),w,b
 34559  01A21C  0100               	movlb	0	; () banked
 34560  01A21E  6F9E               	movwf	(??___altoft+1)& (0+255),b
 34561  01A220  0E00               	movlw	0
 34562  01A222  0100               	movlb	0	; () banked
 34563  01A224  159B               	andwf	(___altoft@c+2)& (0+255),w,b
 34564  01A226  0100               	movlb	0	; () banked
 34565  01A228  6F9F               	movwf	(??___altoft+2)& (0+255),b
 34566  01A22A  0EFF               	movlw	255
 34567  01A22C  0100               	movlb	0	; () banked
 34568  01A22E  159C               	andwf	(___altoft@c+3)& (0+255),w,b
 34569  01A230  0100               	movlb	0	; () banked
 34570  01A232  6FA0               	movwf	(??___altoft+3)& (0+255),b
 34571  01A234  0100               	movlb	0	; () banked
 34572  01A236  519D               	movf	??___altoft& (0+255),w,b
 34573  01A238  0100               	movlb	0	; () banked
 34574  01A23A  119E               	iorwf	(??___altoft+1)& (0+255),w,b
 34575  01A23C  0100               	movlb	0	; () banked
 34576  01A23E  119F               	iorwf	(??___altoft+2)& (0+255),w,b
 34577  01A240  0100               	movlb	0	; () banked
 34578  01A242  11A0               	iorwf	(??___altoft+3)& (0+255),w,b
 34579  01A244  A4D8               	btfss	status,2,c
 34580  01A246  D7DA               	goto	l19947
 34581                           
 34582                           ; BSR set to: 0
 34583                           
 34584                           ; BSR set to: 0
 34585  01A248  C099  F060         	movff	___altoft@c,___ftpack@arg
 34586  01A24C  C09A  F061         	movff	___altoft@c+1,___ftpack@arg+1
 34587  01A250  C09B  F062         	movff	___altoft@c+2,___ftpack@arg+2
 34588  01A254  C0A1  F063         	movff	___altoft@exp,___ftpack@exp
 34589  01A258  C0A2  F064         	movff	___altoft@sign,___ftpack@sign
 34590  01A25C  ECF2  F0C4         	call	___ftpack	;wreg free
 34591  01A260  C060  F099         	movff	?___ftpack,?___altoft
 34592  01A264  C061  F09A         	movff	?___ftpack+1,?___altoft+1
 34593  01A268  C062  F09B         	movff	?___ftpack+2,?___altoft+2
 34594  01A26C  0012               	return	
 34595  01A26E                     __end_of___altoft:
 34596                           	opt stack 0
 34597                           tblptru	equ	0xFF8
 34598                           tblptrh	equ	0xFF7
 34599                           tblptrl	equ	0xFF6
 34600                           tablat	equ	0xFF5
 34601                           prodh	equ	0xFF4
 34602                           prodl	equ	0xFF3
 34603                           intcon	equ	0xFF2
 34604                           postinc0	equ	0xFEE
 34605                           wreg	equ	0xFE8
 34606                           postdec1	equ	0xFE5
 34607                           fsr1h	equ	0xFE2
 34608                           fsr1l	equ	0xFE1
 34609                           indf2	equ	0xFDF
 34610                           postinc2	equ	0xFDE
 34611                           postdec2	equ	0xFDD
 34612                           fsr2h	equ	0xFDA
 34613                           fsr2l	equ	0xFD9
 34614                           status	equ	0xFD8
 34615                           
 34616 ;; *************** function _eval_poly *****************
 34617 ;; Defined at:
 34618 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
 34619 ;; Parameters:    Size  Location     Type
 34620 ;;  x               3   57[BANK0 ] float 
 34621 ;;  d               2   60[BANK0 ] PTR const 
 34622 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
 34623 ;;  n               2   62[BANK0 ] int 
 34624 ;; Auto vars:     Size  Location     Type
 34625 ;;  res             3   66[BANK0 ] int 
 34626 ;; Return value:  Size  Location     Type
 34627 ;;                  3   57[BANK0 ] int 
 34628 ;; Registers used:
 34629 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34630 ;; Tracked objects:
 34631 ;;		On entry : 0/0
 34632 ;;		On exit  : 0/0
 34633 ;;		Unchanged: 0/0
 34634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34635 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34636 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34637 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34638 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34639 ;;Total ram usage:       12 bytes
 34640 ;; Hardware stack levels used:    1
 34641 ;; Hardware stack levels required when called:    5
 34642 ;; This function calls:
 34643 ;;		___ftadd
 34644 ;;		___ftmul
 34645 ;;		___wmul
 34646 ;; This function is called by:
 34647 ;;		_sin
 34648 ;; This function uses a non-reentrant model
 34649 ;;
 34650                           
 34651                           	psect	text131
 34652  018EE2                     __ptext131:
 34653                           	opt stack 0
 34654  018EE2                     _eval_poly:
 34655                           	opt stack 22
 34656                           
 34657                           ;incstack = 0
 34658  018EE2  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
 34659  018EE6  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
 34660  018EEA  0E00               	movlw	0
 34661  018EEC  0100               	movlb	0	; () banked
 34662  018EEE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 34663  018EF0  0E03               	movlw	3
 34664  018EF2  6F70               	movwf	___wmul@multiplicand& (0+255),b
 34665  018EF4  EC59  F0D6         	call	___wmul	;wreg free
 34666  018EF8  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
 34667  018EFC  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
 34668  018F00  0100               	movlb	0	; () banked
 34669  018F02  516E               	movf	?___wmul& (0+255),w,b
 34670  018F04  0100               	movlb	0	; () banked
 34671  018F06  27A0               	addwf	??_eval_poly& (0+255),f,b
 34672  018F08  0100               	movlb	0	; () banked
 34673  018F0A  516F               	movf	(?___wmul+1)& (0+255),w,b
 34674  018F0C  0100               	movlb	0	; () banked
 34675  018F0E  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
 34676  018F10  C0A0  FFF6         	movff	??_eval_poly,tblptrl
 34677  018F14  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
 34678  018F18                     	if	0	;tblptru may be non-zero
 34679  018F18                     	endif
 34680  018F18                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 34681  018F18  0E00               	movlw	low (__mediumconst shr (0+16))
 34682  018F1A  6EF8               	movwf	tblptru,c
 34683  018F1C                     	endif
 34684  018F1C  0009               	tblrd		*+
 34685  018F1E  CFF5 F0A2          	movff	tablat,eval_poly@res
 34686  018F22  0009               	tblrd		*+
 34687  018F24  CFF5 F0A3          	movff	tablat,eval_poly@res+1
 34688  018F28  000A               	tblrd		*-
 34689  018F2A  CFF5 F0A4          	movff	tablat,eval_poly@res+2
 34690  018F2E  D046               	goto	l20631
 34691  018F30                     l20629:
 34692                           
 34693                           ; BSR set to: 0
 34694  018F30  C0A2  F077         	movff	eval_poly@res,___ftmul@f2
 34695  018F34  C0A3  F078         	movff	eval_poly@res+1,___ftmul@f2+1
 34696  018F38  C0A4  F079         	movff	eval_poly@res+2,___ftmul@f2+2
 34697  018F3C  C099  F074         	movff	eval_poly@x,___ftmul@f1
 34698  018F40  C09A  F075         	movff	eval_poly@x+1,___ftmul@f1+1
 34699  018F44  C09B  F076         	movff	eval_poly@x+2,___ftmul@f1+2
 34700  018F48  ECA4  F0C0         	call	___ftmul	;wreg free
 34701  018F4C  C074  F08D         	movff	?___ftmul,___ftadd@f1
 34702  018F50  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 34703  018F54  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 34704  018F58  0E00               	movlw	0
 34705  018F5A  0100               	movlb	0	; () banked
 34706  018F5C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 34707  018F5E  0E03               	movlw	3
 34708  018F60  6F70               	movwf	___wmul@multiplicand& (0+255),b
 34709  018F62  0100               	movlb	0	; () banked
 34710  018F64  079E               	decf	eval_poly@n& (0+255),f,b
 34711  018F66  A0D8               	btfss	status,0,c
 34712  018F68  079F               	decf	(eval_poly@n+1)& (0+255),f,b
 34713  018F6A  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
 34714  018F6E  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
 34715  018F72  EC59  F0D6         	call	___wmul	;wreg free
 34716  018F76  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
 34717  018F7A  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
 34718  018F7E  0100               	movlb	0	; () banked
 34719  018F80  516E               	movf	?___wmul& (0+255),w,b
 34720  018F82  0100               	movlb	0	; () banked
 34721  018F84  27A0               	addwf	??_eval_poly& (0+255),f,b
 34722  018F86  0100               	movlb	0	; () banked
 34723  018F88  516F               	movf	(?___wmul+1)& (0+255),w,b
 34724  018F8A  0100               	movlb	0	; () banked
 34725  018F8C  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
 34726  018F8E  C0A0  FFF6         	movff	??_eval_poly,tblptrl
 34727  018F92  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
 34728  018F96                     	if	0	;tblptru may be non-zero
 34729  018F96                     	endif
 34730  018F96                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 34731  018F96  0E00               	movlw	low (__mediumconst shr (0+16))
 34732  018F98  6EF8               	movwf	tblptru,c
 34733  018F9A                     	endif
 34734  018F9A  0009               	tblrd		*+
 34735  018F9C  CFF5 F090          	movff	tablat,___ftadd@f2
 34736  018FA0  0009               	tblrd		*+
 34737  018FA2  CFF5 F091          	movff	tablat,___ftadd@f2+1
 34738  018FA6  000A               	tblrd		*-
 34739  018FA8  CFF5 F092          	movff	tablat,___ftadd@f2+2
 34740  018FAC  EC69  F0B2         	call	___ftadd	;wreg free
 34741  018FB0  C08D  F0A2         	movff	?___ftadd,eval_poly@res
 34742  018FB4  C08E  F0A3         	movff	?___ftadd+1,eval_poly@res+1
 34743  018FB8  C08F  F0A4         	movff	?___ftadd+2,eval_poly@res+2
 34744  018FBC                     l20631:
 34745  018FBC  0100               	movlb	0	; () banked
 34746  018FBE  519E               	movf	eval_poly@n& (0+255),w,b
 34747  018FC0  0100               	movlb	0	; () banked
 34748  018FC2  119F               	iorwf	(eval_poly@n+1)& (0+255),w,b
 34749  018FC4  A4D8               	btfss	status,2,c
 34750  018FC6  D7B4               	goto	l20629
 34751                           
 34752                           ; BSR set to: 0
 34753  018FC8  C0A2  F099         	movff	eval_poly@res,?_eval_poly
 34754  018FCC  C0A3  F09A         	movff	eval_poly@res+1,?_eval_poly+1
 34755  018FD0  C0A4  F09B         	movff	eval_poly@res+2,?_eval_poly+2
 34756                           
 34757                           ; BSR set to: 0
 34758  018FD4  0012               	return		;funcret
 34759  018FD6                     __end_of_eval_poly:
 34760                           	opt stack 0
 34761                           tblptru	equ	0xFF8
 34762                           tblptrh	equ	0xFF7
 34763                           tblptrl	equ	0xFF6
 34764                           tablat	equ	0xFF5
 34765                           prodh	equ	0xFF4
 34766                           prodl	equ	0xFF3
 34767                           intcon	equ	0xFF2
 34768                           postinc0	equ	0xFEE
 34769                           wreg	equ	0xFE8
 34770                           postdec1	equ	0xFE5
 34771                           fsr1h	equ	0xFE2
 34772                           fsr1l	equ	0xFE1
 34773                           indf2	equ	0xFDF
 34774                           postinc2	equ	0xFDE
 34775                           postdec2	equ	0xFDD
 34776                           fsr2h	equ	0xFDA
 34777                           fsr2l	equ	0xFD9
 34778                           status	equ	0xFD8
 34779                           
 34780 ;; *************** function ___wmul *****************
 34781 ;; Defined at:
 34782 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 34783 ;; Parameters:    Size  Location     Type
 34784 ;;  multiplier      2   14[BANK0 ] unsigned int 
 34785 ;;  multiplicand    2   16[BANK0 ] unsigned int 
 34786 ;; Auto vars:     Size  Location     Type
 34787 ;;  product         2   18[BANK0 ] unsigned int 
 34788 ;; Return value:  Size  Location     Type
 34789 ;;                  2   14[BANK0 ] unsigned int 
 34790 ;; Registers used:
 34791 ;;		wreg, status,2, status,0, prodl, prodh
 34792 ;; Tracked objects:
 34793 ;;		On entry : 0/0
 34794 ;;		On exit  : 0/0
 34795 ;;		Unchanged: 0/0
 34796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34797 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34798 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34800 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34801 ;;Total ram usage:        6 bytes
 34802 ;; Hardware stack levels used:    1
 34803 ;; Hardware stack levels required when called:    3
 34804 ;; This function calls:
 34805 ;;		Nothing
 34806 ;; This function is called by:
 34807 ;;		_BCDtoI
 34808 ;;		_fround
 34809 ;;		_scale
 34810 ;;		_printf
 34811 ;;		_eval_poly
 34812 ;; This function uses a non-reentrant model
 34813 ;;
 34814                           
 34815                           	psect	text132
 34816  01ACB2                     __ptext132:
 34817                           	opt stack 0
 34818  01ACB2                     ___wmul:
 34819                           	opt stack 23
 34820                           
 34821                           ; BSR set to: 0
 34822                           ;incstack = 0
 34823  01ACB2  0100               	movlb	0	; () banked
 34824  01ACB4  516E               	movf	___wmul@multiplier& (0+255),w,b
 34825  01ACB6  0100               	movlb	0	; () banked
 34826  01ACB8  0370               	mulwf	___wmul@multiplicand& (0+255),b
 34827  01ACBA  CFF3 F072          	movff	prodl,___wmul@product
 34828  01ACBE  CFF4 F073          	movff	prodh,___wmul@product+1
 34829  01ACC2  0100               	movlb	0	; () banked
 34830  01ACC4  516E               	movf	___wmul@multiplier& (0+255),w,b
 34831  01ACC6  0100               	movlb	0	; () banked
 34832  01ACC8  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 34833  01ACCA  50F3               	movf	prodl,w,c
 34834  01ACCC  0100               	movlb	0	; () banked
 34835  01ACCE  2773               	addwf	(___wmul@product+1)& (0+255),f,b
 34836  01ACD0  0100               	movlb	0	; () banked
 34837  01ACD2  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
 34838  01ACD4  0100               	movlb	0	; () banked
 34839  01ACD6  0370               	mulwf	___wmul@multiplicand& (0+255),b
 34840  01ACD8  50F3               	movf	prodl,w,c
 34841  01ACDA  0100               	movlb	0	; () banked
 34842  01ACDC  2773               	addwf	(___wmul@product+1)& (0+255),f,b
 34843                           
 34844                           ; BSR set to: 0
 34845  01ACDE  C072  F06E         	movff	___wmul@product,?___wmul
 34846  01ACE2  C073  F06F         	movff	___wmul@product+1,?___wmul+1
 34847  01ACE6  0012               	return	
 34848  01ACE8                     __end_of___wmul:
 34849                           	opt stack 0
 34850                           tblptru	equ	0xFF8
 34851                           tblptrh	equ	0xFF7
 34852                           tblptrl	equ	0xFF6
 34853                           tablat	equ	0xFF5
 34854                           prodh	equ	0xFF4
 34855                           prodl	equ	0xFF3
 34856                           intcon	equ	0xFF2
 34857                           postinc0	equ	0xFEE
 34858                           wreg	equ	0xFE8
 34859                           postdec1	equ	0xFE5
 34860                           fsr1h	equ	0xFE2
 34861                           fsr1l	equ	0xFE1
 34862                           indf2	equ	0xFDF
 34863                           postinc2	equ	0xFDE
 34864                           postdec2	equ	0xFDD
 34865                           fsr2h	equ	0xFDA
 34866                           fsr2l	equ	0xFD9
 34867                           status	equ	0xFD8
 34868                           
 34869 ;; *************** function ___ftmul *****************
 34870 ;; Defined at:
 34871 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 34872 ;; Parameters:    Size  Location     Type
 34873 ;;  f1              3   20[BANK0 ] float 
 34874 ;;  f2              3   23[BANK0 ] float 
 34875 ;; Auto vars:     Size  Location     Type
 34876 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
 34877 ;;  sign            1   34[BANK0 ] unsigned char 
 34878 ;;  cntr            1   33[BANK0 ] unsigned char 
 34879 ;;  exp             1   29[BANK0 ] unsigned char 
 34880 ;; Return value:  Size  Location     Type
 34881 ;;                  3   20[BANK0 ] float 
 34882 ;; Registers used:
 34883 ;;		wreg, status,2, status,0, cstack
 34884 ;; Tracked objects:
 34885 ;;		On entry : 0/0
 34886 ;;		On exit  : 0/0
 34887 ;;		Unchanged: 0/0
 34888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34889 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34890 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34891 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34892 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34893 ;;Total ram usage:       15 bytes
 34894 ;; Hardware stack levels used:    1
 34895 ;; Hardware stack levels required when called:    4
 34896 ;; This function calls:
 34897 ;;		___ftpack
 34898 ;; This function is called by:
 34899 ;;		_Turbine_RPM_Cal
 34900 ;;		_Generator_RPM_Cal
 34901 ;;		_Wind_Speed_Cal
 34902 ;;		_Wind_Speed_2_Cal
 34903 ;;		_VFD_Freq_Step_up
 34904 ;;		_Temp_Read
 34905 ;;		_Volt_Curr_Avg
 34906 ;;		_Cons_Gene
 34907 ;;		_Freq_Calc
 34908 ;;		_R_PF_Calc
 34909 ;;		_R_PF_Avg
 34910 ;;		_Y_PF_Calc
 34911 ;;		_Y_PF_Avg
 34912 ;;		_B_PF_Calc
 34913 ;;		_B_PF_Avg
 34914 ;;		_Power_Calc
 34915 ;;		_Rotor_Slip_Cal
 34916 ;;		_Motor_Slip_Cal
 34917 ;;		_fround
 34918 ;;		_scale
 34919 ;;		_printf
 34920 ;;		_sin
 34921 ;;		_sqrt
 34922 ;;		_eval_poly
 34923 ;; This function uses a non-reentrant model
 34924 ;;
 34925                           
 34926                           	psect	text133
 34927  018148                     __ptext133:
 34928                           	opt stack 0
 34929  018148                     ___ftmul:
 34930                           	opt stack 25
 34931                           
 34932                           ; BSR set to: 0
 34933                           ;incstack = 0
 34934  018148  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
 34935  01814C  0100               	movlb	0	; () banked
 34936  01814E  6B7B               	clrf	(??___ftmul+1)& (0+255),b
 34937  018150  6B7C               	clrf	(??___ftmul+2)& (0+255),b
 34938  018152  0100               	movlb	0	; () banked
 34939  018154  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 34940  018156  0100               	movlb	0	; () banked
 34941  018158  377A               	rlcf	??___ftmul& (0+255),f,b
 34942  01815A  E301               	bnc	u12921
 34943  01815C  817B               	bsf	(??___ftmul+1)& (0+255),0,b
 34944  01815E                     u12921:
 34945  01815E  0100               	movlb	0	; () banked
 34946  018160  517A               	movf	??___ftmul& (0+255),w,b
 34947  018162  0100               	movlb	0	; () banked
 34948  018164  6F7D               	movwf	___ftmul@exp& (0+255),b
 34949  018166  0100               	movlb	0	; () banked
 34950  018168  517D               	movf	___ftmul@exp& (0+255),w,b
 34951  01816A  A4D8               	btfss	status,2,c
 34952  01816C  D00A               	goto	l19573
 34953                           
 34954                           ; BSR set to: 0
 34955  01816E  0E00               	movlw	0
 34956  018170  0100               	movlb	0	; () banked
 34957  018172  6F74               	movwf	?___ftmul& (0+255),b
 34958  018174  0E00               	movlw	0
 34959  018176  0100               	movlb	0	; () banked
 34960  018178  6F75               	movwf	(?___ftmul+1)& (0+255),b
 34961  01817A  0E00               	movlw	0
 34962  01817C  0100               	movlb	0	; () banked
 34963  01817E  6F76               	movwf	(?___ftmul+2)& (0+255),b
 34964                           
 34965                           ; BSR set to: 0
 34966  018180  0012               	return	
 34967  018182                     l19573:
 34968                           
 34969                           ; BSR set to: 0
 34970  018182  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
 34971  018186  0100               	movlb	0	; () banked
 34972  018188  6B7B               	clrf	(??___ftmul+1)& (0+255),b
 34973  01818A  6B7C               	clrf	(??___ftmul+2)& (0+255),b
 34974  01818C  0100               	movlb	0	; () banked
 34975  01818E  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 34976  018190  0100               	movlb	0	; () banked
 34977  018192  377A               	rlcf	??___ftmul& (0+255),f,b
 34978  018194  E301               	bnc	u12941
 34979  018196  817B               	bsf	(??___ftmul+1)& (0+255),0,b
 34980  018198                     u12941:
 34981  018198  0100               	movlb	0	; () banked
 34982  01819A  517A               	movf	??___ftmul& (0+255),w,b
 34983  01819C  0100               	movlb	0	; () banked
 34984  01819E  6F82               	movwf	___ftmul@sign& (0+255),b
 34985  0181A0  0100               	movlb	0	; () banked
 34986  0181A2  5182               	movf	___ftmul@sign& (0+255),w,b
 34987  0181A4  A4D8               	btfss	status,2,c
 34988  0181A6  D00A               	goto	l19579
 34989                           
 34990                           ; BSR set to: 0
 34991  0181A8  0E00               	movlw	0
 34992  0181AA  0100               	movlb	0	; () banked
 34993  0181AC  6F74               	movwf	?___ftmul& (0+255),b
 34994  0181AE  0E00               	movlw	0
 34995  0181B0  0100               	movlb	0	; () banked
 34996  0181B2  6F75               	movwf	(?___ftmul+1)& (0+255),b
 34997  0181B4  0E00               	movlw	0
 34998  0181B6  0100               	movlb	0	; () banked
 34999  0181B8  6F76               	movwf	(?___ftmul+2)& (0+255),b
 35000                           
 35001                           ; BSR set to: 0
 35002  0181BA  0012               	return	
 35003  0181BC                     l19579:
 35004                           
 35005                           ; BSR set to: 0
 35006  0181BC  0100               	movlb	0	; () banked
 35007  0181BE  5182               	movf	___ftmul@sign& (0+255),w,b
 35008  0181C0  0F7B               	addlw	123
 35009  0181C2  0100               	movlb	0	; () banked
 35010  0181C4  277D               	addwf	___ftmul@exp& (0+255),f,b
 35011                           
 35012                           ; BSR set to: 0
 35013  0181C6  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
 35014  0181CA  0100               	movlb	0	; () banked
 35015  0181CC  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 35016  0181CE  0100               	movlb	0	; () banked
 35017  0181D0  1B82               	xorwf	___ftmul@sign& (0+255),f,b
 35018  0181D2  0E80               	movlw	128
 35019  0181D4  0100               	movlb	0	; () banked
 35020  0181D6  1782               	andwf	___ftmul@sign& (0+255),f,b
 35021                           
 35022                           ; BSR set to: 0
 35023  0181D8  0100               	movlb	0	; () banked
 35024  0181DA  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
 35025                           
 35026                           ; BSR set to: 0
 35027  0181DC  0100               	movlb	0	; () banked
 35028  0181DE  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
 35029                           
 35030                           ; BSR set to: 0
 35031  0181E0  0EFF               	movlw	255
 35032  0181E2  0100               	movlb	0	; () banked
 35033  0181E4  1777               	andwf	___ftmul@f2& (0+255),f,b
 35034  0181E6  0EFF               	movlw	255
 35035  0181E8  0100               	movlb	0	; () banked
 35036  0181EA  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
 35037  0181EC  0E00               	movlw	0
 35038  0181EE  0100               	movlb	0	; () banked
 35039  0181F0  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
 35040                           
 35041                           ; BSR set to: 0
 35042  0181F2  0E00               	movlw	0
 35043  0181F4  0100               	movlb	0	; () banked
 35044  0181F6  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
 35045  0181F8  0E00               	movlw	0
 35046  0181FA  0100               	movlb	0	; () banked
 35047  0181FC  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 35048  0181FE  0E00               	movlw	0
 35049  018200  0100               	movlb	0	; () banked
 35050  018202  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 35051                           
 35052                           ; BSR set to: 0
 35053  018204  0E07               	movlw	7
 35054  018206  0100               	movlb	0	; () banked
 35055  018208  6F81               	movwf	___ftmul@cntr& (0+255),b
 35056  01820A                     l19593:
 35057                           
 35058                           ; BSR set to: 0
 35059  01820A  0100               	movlb	0	; () banked
 35060  01820C  A174               	btfss	___ftmul@f1& (0+255),0,b
 35061  01820E  D00C               	goto	l19597
 35062                           
 35063                           ; BSR set to: 0
 35064  018210  0100               	movlb	0	; () banked
 35065  018212  5177               	movf	___ftmul@f2& (0+255),w,b
 35066  018214  0100               	movlb	0	; () banked
 35067  018216  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 35068  018218  0100               	movlb	0	; () banked
 35069  01821A  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
 35070  01821C  0100               	movlb	0	; () banked
 35071  01821E  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 35072  018220  0100               	movlb	0	; () banked
 35073  018222  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 35074  018224  0100               	movlb	0	; () banked
 35075  018226  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 35076  018228                     l19597:
 35077                           
 35078                           ; BSR set to: 0
 35079  018228  0100               	movlb	0	; () banked
 35080  01822A  90D8               	bcf	status,0,c
 35081  01822C  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 35082  01822E  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 35083  018230  3374               	rrcf	___ftmul@f1& (0+255),f,b
 35084  018232  0100               	movlb	0	; () banked
 35085  018234  90D8               	bcf	status,0,c
 35086  018236  3777               	rlcf	___ftmul@f2& (0+255),f,b
 35087  018238  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 35088  01823A  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 35089                           
 35090                           ; BSR set to: 0
 35091  01823C  0100               	movlb	0	; () banked
 35092  01823E  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
 35093  018240  D7E4               	goto	l19593
 35094                           
 35095                           ; BSR set to: 0
 35096                           
 35097                           ; BSR set to: 0
 35098  018242  0E09               	movlw	9
 35099  018244  0100               	movlb	0	; () banked
 35100  018246  6F81               	movwf	___ftmul@cntr& (0+255),b
 35101  018248                     l19603:
 35102                           
 35103                           ; BSR set to: 0
 35104  018248  0100               	movlb	0	; () banked
 35105  01824A  A174               	btfss	___ftmul@f1& (0+255),0,b
 35106  01824C  D00C               	goto	l19607
 35107                           
 35108                           ; BSR set to: 0
 35109  01824E  0100               	movlb	0	; () banked
 35110  018250  5177               	movf	___ftmul@f2& (0+255),w,b
 35111  018252  0100               	movlb	0	; () banked
 35112  018254  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 35113  018256  0100               	movlb	0	; () banked
 35114  018258  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
 35115  01825A  0100               	movlb	0	; () banked
 35116  01825C  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 35117  01825E  0100               	movlb	0	; () banked
 35118  018260  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 35119  018262  0100               	movlb	0	; () banked
 35120  018264  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 35121  018266                     l19607:
 35122                           
 35123                           ; BSR set to: 0
 35124  018266  0100               	movlb	0	; () banked
 35125  018268  90D8               	bcf	status,0,c
 35126  01826A  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 35127  01826C  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 35128  01826E  3374               	rrcf	___ftmul@f1& (0+255),f,b
 35129  018270  0100               	movlb	0	; () banked
 35130  018272  90D8               	bcf	status,0,c
 35131  018274  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 35132  018276  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 35133  018278  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 35134                           
 35135                           ; BSR set to: 0
 35136  01827A  0100               	movlb	0	; () banked
 35137  01827C  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
 35138  01827E  D7E4               	goto	l19603
 35139                           
 35140                           ; BSR set to: 0
 35141                           
 35142                           ; BSR set to: 0
 35143  018280  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
 35144  018284  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 35145  018288  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 35146  01828C  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
 35147  018290  C082  F064         	movff	___ftmul@sign,___ftpack@sign
 35148  018294  ECF2  F0C4         	call	___ftpack	;wreg free
 35149  018298  C060  F074         	movff	?___ftpack,?___ftmul
 35150  01829C  C061  F075         	movff	?___ftpack+1,?___ftmul+1
 35151  0182A0  C062  F076         	movff	?___ftpack+2,?___ftmul+2
 35152  0182A4  0012               	return	
 35153  0182A6                     __end_of___ftmul:
 35154                           	opt stack 0
 35155                           tblptru	equ	0xFF8
 35156                           tblptrh	equ	0xFF7
 35157                           tblptrl	equ	0xFF6
 35158                           tablat	equ	0xFF5
 35159                           prodh	equ	0xFF4
 35160                           prodl	equ	0xFF3
 35161                           intcon	equ	0xFF2
 35162                           postinc0	equ	0xFEE
 35163                           wreg	equ	0xFE8
 35164                           postdec1	equ	0xFE5
 35165                           fsr1h	equ	0xFE2
 35166                           fsr1l	equ	0xFE1
 35167                           indf2	equ	0xFDF
 35168                           postinc2	equ	0xFDE
 35169                           postdec2	equ	0xFDD
 35170                           fsr2h	equ	0xFDA
 35171                           fsr2l	equ	0xFD9
 35172                           status	equ	0xFD8
 35173                           
 35174 ;; *************** function ___ftsub *****************
 35175 ;; Defined at:
 35176 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
 35177 ;; Parameters:    Size  Location     Type
 35178 ;;  f1              3   75[BANK0 ] float 
 35179 ;;  f2              3   78[BANK0 ] float 
 35180 ;; Auto vars:     Size  Location     Type
 35181 ;;		None
 35182 ;; Return value:  Size  Location     Type
 35183 ;;                  3   75[BANK0 ] float 
 35184 ;; Registers used:
 35185 ;;		wreg, status,2, status,0, cstack
 35186 ;; Tracked objects:
 35187 ;;		On entry : 0/0
 35188 ;;		On exit  : 0/0
 35189 ;;		Unchanged: 0/0
 35190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35191 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35194 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35195 ;;Total ram usage:        6 bytes
 35196 ;; Hardware stack levels used:    1
 35197 ;; Hardware stack levels required when called:    5
 35198 ;; This function calls:
 35199 ;;		___ftadd
 35200 ;; This function is called by:
 35201 ;;		_printf
 35202 ;;		_sin
 35203 ;;		_sqrt
 35204 ;; This function uses a non-reentrant model
 35205 ;;
 35206                           
 35207                           	psect	text134
 35208  01AAC2                     __ptext134:
 35209                           	opt stack 0
 35210  01AAC2                     ___ftsub:
 35211                           	opt stack 22
 35212                           
 35213                           ;incstack = 0
 35214  01AAC2  0100               	movlb	0	; () banked
 35215  01AAC4  51AE               	movf	___ftsub@f2& (0+255),w,b
 35216  01AAC6  0100               	movlb	0	; () banked
 35217  01AAC8  11AF               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 35218  01AACA  0100               	movlb	0	; () banked
 35219  01AACC  11B0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 35220  01AACE  B4D8               	btfsc	status,2,c
 35221  01AAD0  D009               	goto	l19959
 35222                           
 35223                           ; BSR set to: 0
 35224  01AAD2  0E00               	movlw	0
 35225  01AAD4  0100               	movlb	0	; () banked
 35226  01AAD6  1BAE               	xorwf	___ftsub@f2& (0+255),f,b
 35227  01AAD8  0E00               	movlw	0
 35228  01AADA  0100               	movlb	0	; () banked
 35229  01AADC  1BAF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 35230  01AADE  0E80               	movlw	128
 35231  01AAE0  0100               	movlb	0	; () banked
 35232  01AAE2  1BB0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 35233  01AAE4                     l19959:
 35234                           
 35235                           ; BSR set to: 0
 35236  01AAE4  C0AB  F08D         	movff	___ftsub@f1,___ftadd@f1
 35237  01AAE8  C0AC  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
 35238  01AAEC  C0AD  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
 35239  01AAF0  C0AE  F090         	movff	___ftsub@f2,___ftadd@f2
 35240  01AAF4  C0AF  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
 35241  01AAF8  C0B0  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
 35242  01AAFC  EC69  F0B2         	call	___ftadd	;wreg free
 35243  01AB00  C08D  F0AB         	movff	?___ftadd,?___ftsub
 35244  01AB04  C08E  F0AC         	movff	?___ftadd+1,?___ftsub+1
 35245  01AB08  C08F  F0AD         	movff	?___ftadd+2,?___ftsub+2
 35246  01AB0C  0012               	return	
 35247  01AB0E                     __end_of___ftsub:
 35248                           	opt stack 0
 35249                           tblptru	equ	0xFF8
 35250                           tblptrh	equ	0xFF7
 35251                           tblptrl	equ	0xFF6
 35252                           tablat	equ	0xFF5
 35253                           prodh	equ	0xFF4
 35254                           prodl	equ	0xFF3
 35255                           intcon	equ	0xFF2
 35256                           postinc0	equ	0xFEE
 35257                           wreg	equ	0xFE8
 35258                           postdec1	equ	0xFE5
 35259                           fsr1h	equ	0xFE2
 35260                           fsr1l	equ	0xFE1
 35261                           indf2	equ	0xFDF
 35262                           postinc2	equ	0xFDE
 35263                           postdec2	equ	0xFDD
 35264                           fsr2h	equ	0xFDA
 35265                           fsr2l	equ	0xFD9
 35266                           status	equ	0xFD8
 35267                           
 35268 ;; *************** function ___ftadd *****************
 35269 ;; Defined at:
 35270 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 35271 ;; Parameters:    Size  Location     Type
 35272 ;;  f1              3   45[BANK0 ] float 
 35273 ;;  f2              3   48[BANK0 ] float 
 35274 ;; Auto vars:     Size  Location     Type
 35275 ;;  exp1            1   56[BANK0 ] unsigned char 
 35276 ;;  exp2            1   55[BANK0 ] unsigned char 
 35277 ;;  sign            1   54[BANK0 ] unsigned char 
 35278 ;; Return value:  Size  Location     Type
 35279 ;;                  3   45[BANK0 ] float 
 35280 ;; Registers used:
 35281 ;;		wreg, status,2, status,0, cstack
 35282 ;; Tracked objects:
 35283 ;;		On entry : 0/0
 35284 ;;		On exit  : 0/0
 35285 ;;		Unchanged: 0/0
 35286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35287 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35288 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35289 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35290 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35291 ;;Total ram usage:       12 bytes
 35292 ;; Hardware stack levels used:    1
 35293 ;; Hardware stack levels required when called:    4
 35294 ;; This function calls:
 35295 ;;		___ftpack
 35296 ;; This function is called by:
 35297 ;;		_Turbine_RPM_Cal
 35298 ;;		_Generator_RPM_Cal
 35299 ;;		_Wind_Speed_Cal
 35300 ;;		_Wind_Speed_2_Cal
 35301 ;;		_Wind_Average
 35302 ;;		_Temp_Read
 35303 ;;		_Volt_Curr_Avg
 35304 ;;		_Freq_Calc
 35305 ;;		_R_PF_Calc
 35306 ;;		_R_PF_Avg
 35307 ;;		_Y_PF_Calc
 35308 ;;		_Y_PF_Avg
 35309 ;;		_B_PF_Calc
 35310 ;;		_B_PF_Avg
 35311 ;;		_Power_Factor
 35312 ;;		_Power_Calc
 35313 ;;		_Rotor_Slip_Cal
 35314 ;;		_Motor_Slip_Cal
 35315 ;;		_printf
 35316 ;;		_cos
 35317 ;;		___ftsub
 35318 ;;		_sin
 35319 ;;		_eval_poly
 35320 ;;		_floor
 35321 ;;		_Turbine2Wheel_Ratio
 35322 ;;		_Turbine_RPM_Checking_Rampup
 35323 ;; This function uses a non-reentrant model
 35324 ;;
 35325                           
 35326                           	psect	text135
 35327  0164D2                     __ptext135:
 35328                           	opt stack 0
 35329  0164D2                     ___ftadd:
 35330                           	opt stack 25
 35331                           
 35332                           ;incstack = 0
 35333  0164D2  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
 35334  0164D6  0100               	movlb	0	; () banked
 35335  0164D8  6B94               	clrf	(??___ftadd+1)& (0+255),b
 35336  0164DA  6B95               	clrf	(??___ftadd+2)& (0+255),b
 35337  0164DC  0100               	movlb	0	; () banked
 35338  0164DE  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 35339  0164E0  0100               	movlb	0	; () banked
 35340  0164E2  3793               	rlcf	??___ftadd& (0+255),f,b
 35341  0164E4  E301               	bnc	u12711
 35342  0164E6  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 35343  0164E8                     u12711:
 35344  0164E8  0100               	movlb	0	; () banked
 35345  0164EA  5193               	movf	??___ftadd& (0+255),w,b
 35346  0164EC  0100               	movlb	0	; () banked
 35347  0164EE  6F98               	movwf	___ftadd@exp1& (0+255),b
 35348  0164F0  C092  F093         	movff	___ftadd@f2+2,??___ftadd
 35349  0164F4  0100               	movlb	0	; () banked
 35350  0164F6  6B94               	clrf	(??___ftadd+1)& (0+255),b
 35351  0164F8  6B95               	clrf	(??___ftadd+2)& (0+255),b
 35352  0164FA  0100               	movlb	0	; () banked
 35353  0164FC  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 35354  0164FE  0100               	movlb	0	; () banked
 35355  016500  3793               	rlcf	??___ftadd& (0+255),f,b
 35356  016502  E301               	bnc	u12721
 35357  016504  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 35358  016506                     u12721:
 35359  016506  0100               	movlb	0	; () banked
 35360  016508  5193               	movf	??___ftadd& (0+255),w,b
 35361  01650A  0100               	movlb	0	; () banked
 35362  01650C  6F97               	movwf	___ftadd@exp2& (0+255),b
 35363                           
 35364                           ; BSR set to: 0
 35365  01650E  0100               	movlb	0	; () banked
 35366  016510  5198               	movf	___ftadd@exp1& (0+255),w,b
 35367  016512  0100               	movlb	0	; () banked
 35368  016514  B4D8               	btfsc	status,2,c
 35369  016516  D011               	goto	l10626
 35370                           
 35371                           ; BSR set to: 0
 35372  016518  0100               	movlb	0	; () banked
 35373  01651A  5197               	movf	___ftadd@exp2& (0+255),w,b
 35374  01651C  0100               	movlb	0	; () banked
 35375  01651E  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 35376  016520  B0D8               	btfsc	status,0,c
 35377  016522  D012               	goto	l19505
 35378                           
 35379                           ; BSR set to: 0
 35380  016524  0100               	movlb	0	; () banked
 35381  016526  5198               	movf	___ftadd@exp1& (0+255),w,b
 35382  016528  0800               	sublw	0
 35383  01652A  0100               	movlb	0	; () banked
 35384  01652C  2597               	addwf	___ftadd@exp2& (0+255),w,b
 35385  01652E  0100               	movlb	0	; () banked
 35386  016530  6F93               	movwf	??___ftadd& (0+255),b
 35387  016532  0E18               	movlw	24
 35388  016534  0100               	movlb	0	; () banked
 35389  016536  6593               	cpfsgt	??___ftadd& (0+255),b
 35390  016538  D007               	goto	l19505
 35391  01653A                     l10626:
 35392                           
 35393                           ; BSR set to: 0
 35394  01653A  C090  F08D         	movff	___ftadd@f2,?___ftadd
 35395  01653E  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
 35396  016542  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
 35397  016546  0012               	return	
 35398  016548                     l19505:
 35399                           
 35400                           ; BSR set to: 0
 35401  016548  0100               	movlb	0	; () banked
 35402  01654A  5197               	movf	___ftadd@exp2& (0+255),w,b
 35403  01654C  0100               	movlb	0	; () banked
 35404  01654E  B4D8               	btfsc	status,2,c
 35405  016550  D011               	goto	l10630
 35406                           
 35407                           ; BSR set to: 0
 35408  016552  0100               	movlb	0	; () banked
 35409  016554  5198               	movf	___ftadd@exp1& (0+255),w,b
 35410  016556  0100               	movlb	0	; () banked
 35411  016558  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 35412  01655A  B0D8               	btfsc	status,0,c
 35413  01655C  D012               	goto	l19511
 35414                           
 35415                           ; BSR set to: 0
 35416  01655E  0100               	movlb	0	; () banked
 35417  016560  5197               	movf	___ftadd@exp2& (0+255),w,b
 35418  016562  0800               	sublw	0
 35419  016564  0100               	movlb	0	; () banked
 35420  016566  2598               	addwf	___ftadd@exp1& (0+255),w,b
 35421  016568  0100               	movlb	0	; () banked
 35422  01656A  6F93               	movwf	??___ftadd& (0+255),b
 35423  01656C  0E18               	movlw	24
 35424  01656E  0100               	movlb	0	; () banked
 35425  016570  6593               	cpfsgt	??___ftadd& (0+255),b
 35426  016572  D007               	goto	l19511
 35427  016574                     l10630:
 35428                           
 35429                           ; BSR set to: 0
 35430  016574  C08D  F08D         	movff	___ftadd@f1,?___ftadd
 35431  016578  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
 35432  01657C  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
 35433  016580  0012               	return	
 35434  016582                     l19511:
 35435                           
 35436                           ; BSR set to: 0
 35437  016582  0E06               	movlw	6
 35438  016584  0100               	movlb	0	; () banked
 35439  016586  6F96               	movwf	___ftadd@sign& (0+255),b
 35440                           
 35441                           ; BSR set to: 0
 35442  016588  0100               	movlb	0	; () banked
 35443  01658A  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 35444  01658C  D002               	goto	l19517
 35445                           
 35446                           ; BSR set to: 0
 35447  01658E  0100               	movlb	0	; () banked
 35448  016590  8F96               	bsf	___ftadd@sign& (0+255),7,b
 35449  016592                     l19517:
 35450                           
 35451                           ; BSR set to: 0
 35452  016592  0100               	movlb	0	; () banked
 35453  016594  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 35454  016596  D002               	goto	l10632
 35455                           
 35456                           ; BSR set to: 0
 35457  016598  0100               	movlb	0	; () banked
 35458  01659A  8D96               	bsf	___ftadd@sign& (0+255),6,b
 35459  01659C                     l10632:
 35460                           
 35461                           ; BSR set to: 0
 35462  01659C  0100               	movlb	0	; () banked
 35463  01659E  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 35464                           
 35465                           ; BSR set to: 0
 35466  0165A0  0EFF               	movlw	255
 35467  0165A2  0100               	movlb	0	; () banked
 35468  0165A4  178D               	andwf	___ftadd@f1& (0+255),f,b
 35469  0165A6  0EFF               	movlw	255
 35470  0165A8  0100               	movlb	0	; () banked
 35471  0165AA  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 35472  0165AC  0E00               	movlw	0
 35473  0165AE  0100               	movlb	0	; () banked
 35474  0165B0  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 35475  0165B2  0100               	movlb	0	; () banked
 35476  0165B4  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
 35477                           
 35478                           ; BSR set to: 0
 35479  0165B6  0EFF               	movlw	255
 35480  0165B8  0100               	movlb	0	; () banked
 35481  0165BA  1790               	andwf	___ftadd@f2& (0+255),f,b
 35482  0165BC  0EFF               	movlw	255
 35483  0165BE  0100               	movlb	0	; () banked
 35484  0165C0  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
 35485  0165C2  0E00               	movlw	0
 35486  0165C4  0100               	movlb	0	; () banked
 35487  0165C6  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
 35488                           
 35489                           ; BSR set to: 0
 35490  0165C8  0100               	movlb	0	; () banked
 35491  0165CA  5197               	movf	___ftadd@exp2& (0+255),w,b
 35492  0165CC  0100               	movlb	0	; () banked
 35493  0165CE  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 35494  0165D0  B0D8               	btfsc	status,0,c
 35495  0165D2  D025               	goto	l19537
 35496  0165D4                     l19527:
 35497                           
 35498                           ; BSR set to: 0
 35499  0165D4  0100               	movlb	0	; () banked
 35500  0165D6  90D8               	bcf	status,0,c
 35501  0165D8  3790               	rlcf	___ftadd@f2& (0+255),f,b
 35502  0165DA  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 35503  0165DC  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 35504  0165DE  0100               	movlb	0	; () banked
 35505  0165E0  0797               	decf	___ftadd@exp2& (0+255),f,b
 35506                           
 35507                           ; BSR set to: 0
 35508  0165E2  0100               	movlb	0	; () banked
 35509  0165E4  5198               	movf	___ftadd@exp1& (0+255),w,b
 35510  0165E6  0100               	movlb	0	; () banked
 35511  0165E8  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 35512  0165EA  B4D8               	btfsc	status,2,c
 35513  0165EC  D011               	goto	l19535
 35514                           
 35515                           ; BSR set to: 0
 35516  0165EE  0100               	movlb	0	; () banked
 35517  0165F0  0796               	decf	___ftadd@sign& (0+255),f,b
 35518  0165F2  C096  F093         	movff	___ftadd@sign,??___ftadd
 35519  0165F6  0E07               	movlw	7
 35520  0165F8  0100               	movlb	0	; () banked
 35521  0165FA  1793               	andwf	??___ftadd& (0+255),f,b
 35522  0165FC  B4D8               	btfsc	status,2,c
 35523  0165FE  D008               	goto	l19535
 35524  016600  D7E9               	goto	l19527
 35525  016602                     l19533:
 35526                           
 35527                           ; BSR set to: 0
 35528  016602  0100               	movlb	0	; () banked
 35529  016604  90D8               	bcf	status,0,c
 35530  016606  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 35531  016608  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 35532  01660A  338D               	rrcf	___ftadd@f1& (0+255),f,b
 35533  01660C  0100               	movlb	0	; () banked
 35534  01660E  2B98               	incf	___ftadd@exp1& (0+255),f,b
 35535  016610                     l19535:
 35536                           
 35537                           ; BSR set to: 0
 35538  016610  0100               	movlb	0	; () banked
 35539  016612  5197               	movf	___ftadd@exp2& (0+255),w,b
 35540  016614  0100               	movlb	0	; () banked
 35541  016616  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 35542  016618  B4D8               	btfsc	status,2,c
 35543  01661A  D02B               	goto	l10641
 35544  01661C  D7F2               	goto	l19533
 35545  01661E                     l19537:
 35546                           
 35547                           ; BSR set to: 0
 35548  01661E  0100               	movlb	0	; () banked
 35549  016620  5198               	movf	___ftadd@exp1& (0+255),w,b
 35550  016622  0100               	movlb	0	; () banked
 35551  016624  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 35552  016626  B0D8               	btfsc	status,0,c
 35553  016628  D024               	goto	l10641
 35554  01662A                     l19539:
 35555                           
 35556                           ; BSR set to: 0
 35557  01662A  0100               	movlb	0	; () banked
 35558  01662C  90D8               	bcf	status,0,c
 35559  01662E  378D               	rlcf	___ftadd@f1& (0+255),f,b
 35560  016630  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 35561  016632  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 35562  016634  0100               	movlb	0	; () banked
 35563  016636  0798               	decf	___ftadd@exp1& (0+255),f,b
 35564                           
 35565                           ; BSR set to: 0
 35566  016638  0100               	movlb	0	; () banked
 35567  01663A  5198               	movf	___ftadd@exp1& (0+255),w,b
 35568  01663C  0100               	movlb	0	; () banked
 35569  01663E  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 35570  016640  B4D8               	btfsc	status,2,c
 35571  016642  D011               	goto	l19547
 35572                           
 35573                           ; BSR set to: 0
 35574  016644  0100               	movlb	0	; () banked
 35575  016646  0796               	decf	___ftadd@sign& (0+255),f,b
 35576  016648  C096  F093         	movff	___ftadd@sign,??___ftadd
 35577  01664C  0E07               	movlw	7
 35578  01664E  0100               	movlb	0	; () banked
 35579  016650  1793               	andwf	??___ftadd& (0+255),f,b
 35580  016652  B4D8               	btfsc	status,2,c
 35581  016654  D008               	goto	l19547
 35582  016656  D7E9               	goto	l19539
 35583  016658                     l19545:
 35584                           
 35585                           ; BSR set to: 0
 35586  016658  0100               	movlb	0	; () banked
 35587  01665A  90D8               	bcf	status,0,c
 35588  01665C  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 35589  01665E  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 35590  016660  3390               	rrcf	___ftadd@f2& (0+255),f,b
 35591  016662  0100               	movlb	0	; () banked
 35592  016664  2B97               	incf	___ftadd@exp2& (0+255),f,b
 35593  016666                     l19547:
 35594                           
 35595                           ; BSR set to: 0
 35596  016666  0100               	movlb	0	; () banked
 35597  016668  5197               	movf	___ftadd@exp2& (0+255),w,b
 35598  01666A  0100               	movlb	0	; () banked
 35599  01666C  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 35600  01666E  A4D8               	btfss	status,2,c
 35601  016670  D7F3               	goto	l19545
 35602  016672                     l10641:
 35603                           
 35604                           ; BSR set to: 0
 35605  016672  0100               	movlb	0	; () banked
 35606  016674  AF96               	btfss	___ftadd@sign& (0+255),7,b
 35607  016676  D012               	goto	l10650
 35608                           
 35609                           ; BSR set to: 0
 35610  016678  0EFF               	movlw	255
 35611  01667A  0100               	movlb	0	; () banked
 35612  01667C  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
 35613  01667E  0EFF               	movlw	255
 35614  016680  0100               	movlb	0	; () banked
 35615  016682  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 35616  016684  0EFF               	movlw	255
 35617  016686  0100               	movlb	0	; () banked
 35618  016688  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 35619  01668A  0E01               	movlw	1
 35620  01668C  0100               	movlb	0	; () banked
 35621  01668E  278D               	addwf	___ftadd@f1& (0+255),f,b
 35622  016690  0E00               	movlw	0
 35623  016692  0100               	movlb	0	; () banked
 35624  016694  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 35625  016696  0E00               	movlw	0
 35626  016698  0100               	movlb	0	; () banked
 35627  01669A  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 35628  01669C                     l10650:
 35629                           
 35630                           ; BSR set to: 0
 35631  01669C  0100               	movlb	0	; () banked
 35632  01669E  AD96               	btfss	___ftadd@sign& (0+255),6,b
 35633  0166A0  D012               	goto	l19553
 35634                           
 35635                           ; BSR set to: 0
 35636  0166A2  0EFF               	movlw	255
 35637  0166A4  0100               	movlb	0	; () banked
 35638  0166A6  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 35639  0166A8  0EFF               	movlw	255
 35640  0166AA  0100               	movlb	0	; () banked
 35641  0166AC  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 35642  0166AE  0EFF               	movlw	255
 35643  0166B0  0100               	movlb	0	; () banked
 35644  0166B2  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 35645  0166B4  0E01               	movlw	1
 35646  0166B6  0100               	movlb	0	; () banked
 35647  0166B8  2790               	addwf	___ftadd@f2& (0+255),f,b
 35648  0166BA  0E00               	movlw	0
 35649  0166BC  0100               	movlb	0	; () banked
 35650  0166BE  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 35651  0166C0  0E00               	movlw	0
 35652  0166C2  0100               	movlb	0	; () banked
 35653  0166C4  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 35654  0166C6                     l19553:
 35655                           
 35656                           ; BSR set to: 0
 35657  0166C6  0E00               	movlw	0
 35658  0166C8  0100               	movlb	0	; () banked
 35659  0166CA  6F96               	movwf	___ftadd@sign& (0+255),b
 35660                           
 35661                           ; BSR set to: 0
 35662  0166CC  0100               	movlb	0	; () banked
 35663  0166CE  518D               	movf	___ftadd@f1& (0+255),w,b
 35664  0166D0  0100               	movlb	0	; () banked
 35665  0166D2  2790               	addwf	___ftadd@f2& (0+255),f,b
 35666  0166D4  0100               	movlb	0	; () banked
 35667  0166D6  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
 35668  0166D8  0100               	movlb	0	; () banked
 35669  0166DA  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 35670  0166DC  0100               	movlb	0	; () banked
 35671  0166DE  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
 35672  0166E0  0100               	movlb	0	; () banked
 35673  0166E2  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 35674                           
 35675                           ; BSR set to: 0
 35676  0166E4  0100               	movlb	0	; () banked
 35677  0166E6  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 35678  0166E8  D015               	goto	l19563
 35679                           
 35680                           ; BSR set to: 0
 35681  0166EA  0EFF               	movlw	255
 35682  0166EC  0100               	movlb	0	; () banked
 35683  0166EE  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 35684  0166F0  0EFF               	movlw	255
 35685  0166F2  0100               	movlb	0	; () banked
 35686  0166F4  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 35687  0166F6  0EFF               	movlw	255
 35688  0166F8  0100               	movlb	0	; () banked
 35689  0166FA  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 35690  0166FC  0E01               	movlw	1
 35691  0166FE  0100               	movlb	0	; () banked
 35692  016700  2790               	addwf	___ftadd@f2& (0+255),f,b
 35693  016702  0E00               	movlw	0
 35694  016704  0100               	movlb	0	; () banked
 35695  016706  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 35696  016708  0E00               	movlw	0
 35697  01670A  0100               	movlb	0	; () banked
 35698  01670C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 35699                           
 35700                           ; BSR set to: 0
 35701  01670E  0E01               	movlw	1
 35702  016710  0100               	movlb	0	; () banked
 35703  016712  6F96               	movwf	___ftadd@sign& (0+255),b
 35704  016714                     l19563:
 35705                           
 35706                           ; BSR set to: 0
 35707  016714  C090  F060         	movff	___ftadd@f2,___ftpack@arg
 35708  016718  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 35709  01671C  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 35710  016720  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
 35711  016724  C096  F064         	movff	___ftadd@sign,___ftpack@sign
 35712  016728  ECF2  F0C4         	call	___ftpack	;wreg free
 35713  01672C  C060  F08D         	movff	?___ftpack,?___ftadd
 35714  016730  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
 35715  016734  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
 35716  016738  0012               	return	
 35717  01673A                     __end_of___ftadd:
 35718                           	opt stack 0
 35719                           tblptru	equ	0xFF8
 35720                           tblptrh	equ	0xFF7
 35721                           tblptrl	equ	0xFF6
 35722                           tablat	equ	0xFF5
 35723                           prodh	equ	0xFF4
 35724                           prodl	equ	0xFF3
 35725                           intcon	equ	0xFF2
 35726                           postinc0	equ	0xFEE
 35727                           wreg	equ	0xFE8
 35728                           postdec1	equ	0xFE5
 35729                           fsr1h	equ	0xFE2
 35730                           fsr1l	equ	0xFE1
 35731                           indf2	equ	0xFDF
 35732                           postinc2	equ	0xFDE
 35733                           postdec2	equ	0xFDD
 35734                           fsr2h	equ	0xFDA
 35735                           fsr2l	equ	0xFD9
 35736                           status	equ	0xFD8
 35737                           
 35738 ;; *************** function ___ftneg *****************
 35739 ;; Defined at:
 35740 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 35741 ;; Parameters:    Size  Location     Type
 35742 ;;  f1              3   35[BANK0 ] float 
 35743 ;; Auto vars:     Size  Location     Type
 35744 ;;		None
 35745 ;; Return value:  Size  Location     Type
 35746 ;;                  3   35[BANK0 ] float 
 35747 ;; Registers used:
 35748 ;;		wreg, status,2, status,0
 35749 ;; Tracked objects:
 35750 ;;		On entry : 0/0
 35751 ;;		On exit  : 0/0
 35752 ;;		Unchanged: 0/0
 35753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35754 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35757 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35758 ;;Total ram usage:        3 bytes
 35759 ;; Hardware stack levels used:    1
 35760 ;; Hardware stack levels required when called:    3
 35761 ;; This function calls:
 35762 ;;		Nothing
 35763 ;; This function is called by:
 35764 ;;		_Freq_Calc
 35765 ;;		_R_PF_Calc
 35766 ;;		_Y_PF_Calc
 35767 ;;		_B_PF_Calc
 35768 ;;		_Power_Calc
 35769 ;;		_Rotor_Slip_Cal
 35770 ;;		_Motor_Slip_Cal
 35771 ;;		_printf
 35772 ;;		_sin
 35773 ;;		_Turbine_RPM_Checking_Rampup
 35774 ;; This function uses a non-reentrant model
 35775 ;;
 35776                           
 35777                           	psect	text136
 35778  01AD7A                     __ptext136:
 35779                           	opt stack 0
 35780  01AD7A                     ___ftneg:
 35781                           	opt stack 26
 35782                           
 35783                           ;incstack = 0
 35784  01AD7A  0100               	movlb	0	; () banked
 35785  01AD7C  5183               	movf	___ftneg@f1& (0+255),w,b
 35786  01AD7E  0100               	movlb	0	; () banked
 35787  01AD80  1184               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 35788  01AD82  0100               	movlb	0	; () banked
 35789  01AD84  1185               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 35790  01AD86  B4D8               	btfsc	status,2,c
 35791  01AD88  D009               	goto	l10700
 35792                           
 35793                           ; BSR set to: 0
 35794  01AD8A  0E00               	movlw	0
 35795  01AD8C  0100               	movlb	0	; () banked
 35796  01AD8E  1B83               	xorwf	___ftneg@f1& (0+255),f,b
 35797  01AD90  0E00               	movlw	0
 35798  01AD92  0100               	movlb	0	; () banked
 35799  01AD94  1B84               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 35800  01AD96  0E80               	movlw	128
 35801  01AD98  0100               	movlb	0	; () banked
 35802  01AD9A  1B85               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 35803  01AD9C                     l10700:
 35804                           
 35805                           ; BSR set to: 0
 35806  01AD9C  C083  F083         	movff	___ftneg@f1,?___ftneg
 35807  01ADA0  C084  F084         	movff	___ftneg@f1+1,?___ftneg+1
 35808  01ADA4  C085  F085         	movff	___ftneg@f1+2,?___ftneg+2
 35809                           
 35810                           ; BSR set to: 0
 35811  01ADA8  0012               	return		;funcret
 35812  01ADAA                     __end_of___ftneg:
 35813                           	opt stack 0
 35814                           tblptru	equ	0xFF8
 35815                           tblptrh	equ	0xFF7
 35816                           tblptrl	equ	0xFF6
 35817                           tablat	equ	0xFF5
 35818                           prodh	equ	0xFF4
 35819                           prodl	equ	0xFF3
 35820                           intcon	equ	0xFF2
 35821                           postinc0	equ	0xFEE
 35822                           wreg	equ	0xFE8
 35823                           postdec1	equ	0xFE5
 35824                           fsr1h	equ	0xFE2
 35825                           fsr1l	equ	0xFE1
 35826                           indf2	equ	0xFDF
 35827                           postinc2	equ	0xFDE
 35828                           postdec2	equ	0xFDD
 35829                           fsr2h	equ	0xFDA
 35830                           fsr2l	equ	0xFD9
 35831                           status	equ	0xFD8
 35832                           
 35833 ;; *************** function ___ftdiv *****************
 35834 ;; Defined at:
 35835 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 35836 ;; Parameters:    Size  Location     Type
 35837 ;;  f1              3   69[BANK0 ] float 
 35838 ;;  f2              3   72[BANK0 ] float 
 35839 ;; Auto vars:     Size  Location     Type
 35840 ;;  f3              3   79[BANK0 ] float 
 35841 ;;  sign            1   83[BANK0 ] unsigned char 
 35842 ;;  exp             1   82[BANK0 ] unsigned char 
 35843 ;;  cntr            1   78[BANK0 ] unsigned char 
 35844 ;; Return value:  Size  Location     Type
 35845 ;;                  3   69[BANK0 ] float 
 35846 ;; Registers used:
 35847 ;;		wreg, status,2, status,0, cstack
 35848 ;; Tracked objects:
 35849 ;;		On entry : 0/0
 35850 ;;		On exit  : 0/0
 35851 ;;		Unchanged: 0/0
 35852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35853 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35854 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35855 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35856 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35857 ;;Total ram usage:       15 bytes
 35858 ;; Hardware stack levels used:    1
 35859 ;; Hardware stack levels required when called:    4
 35860 ;; This function calls:
 35861 ;;		___ftpack
 35862 ;; This function is called by:
 35863 ;;		_Turbine_RPM_Cal
 35864 ;;		_Generator_RPM_Cal
 35865 ;;		_Wind_Speed_Cal
 35866 ;;		_Wind_Speed_2_Cal
 35867 ;;		_Wind_Average
 35868 ;;		_VFD_Freq_Step_up
 35869 ;;		_VFD_RS485_Data
 35870 ;;		_Temp_Read
 35871 ;;		_Volt_Curr_Avg
 35872 ;;		_Freq_Calc
 35873 ;;		_R_PF_Calc
 35874 ;;		_R_PF_Avg
 35875 ;;		_Y_PF_Calc
 35876 ;;		_Y_PF_Avg
 35877 ;;		_B_PF_Calc
 35878 ;;		_B_PF_Avg
 35879 ;;		_Power_Factor
 35880 ;;		_Power_Calc
 35881 ;;		_Rotor_Slip_Cal
 35882 ;;		_Motor_Slip_Cal
 35883 ;;		_sin
 35884 ;; This function uses a non-reentrant model
 35885 ;;
 35886                           
 35887                           	psect	text137
 35888  0182A6                     __ptext137:
 35889                           	opt stack 0
 35890  0182A6                     ___ftdiv:
 35891                           	opt stack 25
 35892                           
 35893                           ; BSR set to: 0
 35894                           ;incstack = 0
 35895  0182A6  C0A7  F0AB         	movff	___ftdiv@f1+2,??___ftdiv
 35896  0182AA  0100               	movlb	0	; () banked
 35897  0182AC  6BAC               	clrf	(??___ftdiv+1)& (0+255),b
 35898  0182AE  6BAD               	clrf	(??___ftdiv+2)& (0+255),b
 35899  0182B0  0100               	movlb	0	; () banked
 35900  0182B2  35A6               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 35901  0182B4  0100               	movlb	0	; () banked
 35902  0182B6  37AB               	rlcf	??___ftdiv& (0+255),f,b
 35903  0182B8  E301               	bnc	u14611
 35904  0182BA  81AC               	bsf	(??___ftdiv+1)& (0+255),0,b
 35905  0182BC                     u14611:
 35906  0182BC  0100               	movlb	0	; () banked
 35907  0182BE  51AB               	movf	??___ftdiv& (0+255),w,b
 35908  0182C0  0100               	movlb	0	; () banked
 35909  0182C2  6FB2               	movwf	___ftdiv@exp& (0+255),b
 35910  0182C4  0100               	movlb	0	; () banked
 35911  0182C6  51B2               	movf	___ftdiv@exp& (0+255),w,b
 35912  0182C8  A4D8               	btfss	status,2,c
 35913  0182CA  D00A               	goto	l20555
 35914                           
 35915                           ; BSR set to: 0
 35916  0182CC  0E00               	movlw	0
 35917  0182CE  0100               	movlb	0	; () banked
 35918  0182D0  6FA5               	movwf	?___ftdiv& (0+255),b
 35919  0182D2  0E00               	movlw	0
 35920  0182D4  0100               	movlb	0	; () banked
 35921  0182D6  6FA6               	movwf	(?___ftdiv+1)& (0+255),b
 35922  0182D8  0E00               	movlw	0
 35923  0182DA  0100               	movlb	0	; () banked
 35924  0182DC  6FA7               	movwf	(?___ftdiv+2)& (0+255),b
 35925                           
 35926                           ; BSR set to: 0
 35927  0182DE  0012               	return	
 35928  0182E0                     l20555:
 35929                           
 35930                           ; BSR set to: 0
 35931  0182E0  C0AA  F0AB         	movff	___ftdiv@f2+2,??___ftdiv
 35932  0182E4  0100               	movlb	0	; () banked
 35933  0182E6  6BAC               	clrf	(??___ftdiv+1)& (0+255),b
 35934  0182E8  6BAD               	clrf	(??___ftdiv+2)& (0+255),b
 35935  0182EA  0100               	movlb	0	; () banked
 35936  0182EC  35A9               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 35937  0182EE  0100               	movlb	0	; () banked
 35938  0182F0  37AB               	rlcf	??___ftdiv& (0+255),f,b
 35939  0182F2  E301               	bnc	u14631
 35940  0182F4  81AC               	bsf	(??___ftdiv+1)& (0+255),0,b
 35941  0182F6                     u14631:
 35942  0182F6  0100               	movlb	0	; () banked
 35943  0182F8  51AB               	movf	??___ftdiv& (0+255),w,b
 35944  0182FA  0100               	movlb	0	; () banked
 35945  0182FC  6FB3               	movwf	___ftdiv@sign& (0+255),b
 35946  0182FE  0100               	movlb	0	; () banked
 35947  018300  51B3               	movf	___ftdiv@sign& (0+255),w,b
 35948  018302  A4D8               	btfss	status,2,c
 35949  018304  D00A               	goto	l20561
 35950                           
 35951                           ; BSR set to: 0
 35952  018306  0E00               	movlw	0
 35953  018308  0100               	movlb	0	; () banked
 35954  01830A  6FA5               	movwf	?___ftdiv& (0+255),b
 35955  01830C  0E00               	movlw	0
 35956  01830E  0100               	movlb	0	; () banked
 35957  018310  6FA6               	movwf	(?___ftdiv+1)& (0+255),b
 35958  018312  0E00               	movlw	0
 35959  018314  0100               	movlb	0	; () banked
 35960  018316  6FA7               	movwf	(?___ftdiv+2)& (0+255),b
 35961                           
 35962                           ; BSR set to: 0
 35963  018318  0012               	return	
 35964  01831A                     l20561:
 35965                           
 35966                           ; BSR set to: 0
 35967  01831A  0E00               	movlw	0
 35968  01831C  0100               	movlb	0	; () banked
 35969  01831E  6FAF               	movwf	___ftdiv@f3& (0+255),b
 35970  018320  0E00               	movlw	0
 35971  018322  0100               	movlb	0	; () banked
 35972  018324  6FB0               	movwf	(___ftdiv@f3+1)& (0+255),b
 35973  018326  0E00               	movlw	0
 35974  018328  0100               	movlb	0	; () banked
 35975  01832A  6FB1               	movwf	(___ftdiv@f3+2)& (0+255),b
 35976                           
 35977                           ; BSR set to: 0
 35978  01832C  0100               	movlb	0	; () banked
 35979  01832E  51B3               	movf	___ftdiv@sign& (0+255),w,b
 35980  018330  0F89               	addlw	137
 35981  018332  0100               	movlb	0	; () banked
 35982  018334  5FB2               	subwf	___ftdiv@exp& (0+255),f,b
 35983                           
 35984                           ; BSR set to: 0
 35985  018336  C0A7  F0B3         	movff	___ftdiv@f1+2,___ftdiv@sign
 35986                           
 35987                           ; BSR set to: 0
 35988  01833A  0100               	movlb	0	; () banked
 35989  01833C  51AA               	movf	(___ftdiv@f2+2)& (0+255),w,b
 35990  01833E  0100               	movlb	0	; () banked
 35991  018340  1BB3               	xorwf	___ftdiv@sign& (0+255),f,b
 35992                           
 35993                           ; BSR set to: 0
 35994  018342  0E80               	movlw	128
 35995  018344  0100               	movlb	0	; () banked
 35996  018346  17B3               	andwf	___ftdiv@sign& (0+255),f,b
 35997                           
 35998                           ; BSR set to: 0
 35999  018348  0100               	movlb	0	; () banked
 36000  01834A  8FA6               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 36001                           
 36002                           ; BSR set to: 0
 36003  01834C  0EFF               	movlw	255
 36004  01834E  0100               	movlb	0	; () banked
 36005  018350  17A5               	andwf	___ftdiv@f1& (0+255),f,b
 36006  018352  0EFF               	movlw	255
 36007  018354  0100               	movlb	0	; () banked
 36008  018356  17A6               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 36009  018358  0E00               	movlw	0
 36010  01835A  0100               	movlb	0	; () banked
 36011  01835C  17A7               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 36012                           
 36013                           ; BSR set to: 0
 36014  01835E  0100               	movlb	0	; () banked
 36015  018360  8FA9               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 36016                           
 36017                           ; BSR set to: 0
 36018  018362  0EFF               	movlw	255
 36019  018364  0100               	movlb	0	; () banked
 36020  018366  17A8               	andwf	___ftdiv@f2& (0+255),f,b
 36021  018368  0EFF               	movlw	255
 36022  01836A  0100               	movlb	0	; () banked
 36023  01836C  17A9               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 36024  01836E  0E00               	movlw	0
 36025  018370  0100               	movlb	0	; () banked
 36026  018372  17AA               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 36027                           
 36028                           ; BSR set to: 0
 36029  018374  0E18               	movlw	24
 36030  018376  0100               	movlb	0	; () banked
 36031  018378  6FAE               	movwf	___ftdiv@cntr& (0+255),b
 36032  01837A                     l20581:
 36033                           
 36034                           ; BSR set to: 0
 36035  01837A  0100               	movlb	0	; () banked
 36036  01837C  90D8               	bcf	status,0,c
 36037  01837E  37AF               	rlcf	___ftdiv@f3& (0+255),f,b
 36038  018380  37B0               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 36039  018382  37B1               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 36040                           
 36041                           ; BSR set to: 0
 36042  018384  0100               	movlb	0	; () banked
 36043  018386  51A8               	movf	___ftdiv@f2& (0+255),w,b
 36044  018388  0100               	movlb	0	; () banked
 36045  01838A  5DA5               	subwf	___ftdiv@f1& (0+255),w,b
 36046  01838C  0100               	movlb	0	; () banked
 36047  01838E  51A9               	movf	(___ftdiv@f2+1)& (0+255),w,b
 36048  018390  0100               	movlb	0	; () banked
 36049  018392  59A6               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 36050  018394  0100               	movlb	0	; () banked
 36051  018396  51AA               	movf	(___ftdiv@f2+2)& (0+255),w,b
 36052  018398  0100               	movlb	0	; () banked
 36053  01839A  59A7               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 36054  01839C  A0D8               	btfss	status,0,c
 36055  01839E  D00E               	goto	l10661
 36056                           
 36057                           ; BSR set to: 0
 36058  0183A0  0100               	movlb	0	; () banked
 36059  0183A2  51A8               	movf	___ftdiv@f2& (0+255),w,b
 36060  0183A4  0100               	movlb	0	; () banked
 36061  0183A6  5FA5               	subwf	___ftdiv@f1& (0+255),f,b
 36062  0183A8  0100               	movlb	0	; () banked
 36063  0183AA  51A9               	movf	(___ftdiv@f2+1)& (0+255),w,b
 36064  0183AC  0100               	movlb	0	; () banked
 36065  0183AE  5BA6               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 36066  0183B0  0100               	movlb	0	; () banked
 36067  0183B2  51AA               	movf	(___ftdiv@f2+2)& (0+255),w,b
 36068  0183B4  0100               	movlb	0	; () banked
 36069  0183B6  5BA7               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 36070                           
 36071                           ; BSR set to: 0
 36072  0183B8  0100               	movlb	0	; () banked
 36073  0183BA  81AF               	bsf	___ftdiv@f3& (0+255),0,b
 36074  0183BC                     l10661:
 36075                           
 36076                           ; BSR set to: 0
 36077  0183BC  0100               	movlb	0	; () banked
 36078  0183BE  90D8               	bcf	status,0,c
 36079  0183C0  37A5               	rlcf	___ftdiv@f1& (0+255),f,b
 36080  0183C2  37A6               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 36081  0183C4  37A7               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 36082                           
 36083                           ; BSR set to: 0
 36084  0183C6  0100               	movlb	0	; () banked
 36085  0183C8  2FAE               	decfsz	___ftdiv@cntr& (0+255),f,b
 36086  0183CA  D7D7               	goto	l20581
 36087                           
 36088                           ; BSR set to: 0
 36089                           
 36090                           ; BSR set to: 0
 36091  0183CC  C0AF  F060         	movff	___ftdiv@f3,___ftpack@arg
 36092  0183D0  C0B0  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
 36093  0183D4  C0B1  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
 36094  0183D8  C0B2  F063         	movff	___ftdiv@exp,___ftpack@exp
 36095  0183DC  C0B3  F064         	movff	___ftdiv@sign,___ftpack@sign
 36096  0183E0  ECF2  F0C4         	call	___ftpack	;wreg free
 36097  0183E4  C060  F0A5         	movff	?___ftpack,?___ftdiv
 36098  0183E8  C061  F0A6         	movff	?___ftpack+1,?___ftdiv+1
 36099  0183EC  C062  F0A7         	movff	?___ftpack+2,?___ftdiv+2
 36100  0183F0  0012               	return	
 36101  0183F2                     __end_of___ftdiv:
 36102                           	opt stack 0
 36103                           tblptru	equ	0xFF8
 36104                           tblptrh	equ	0xFF7
 36105                           tblptrl	equ	0xFF6
 36106                           tablat	equ	0xFF5
 36107                           prodh	equ	0xFF4
 36108                           prodl	equ	0xFF3
 36109                           intcon	equ	0xFF2
 36110                           postinc0	equ	0xFEE
 36111                           wreg	equ	0xFE8
 36112                           postdec1	equ	0xFE5
 36113                           fsr1h	equ	0xFE2
 36114                           fsr1l	equ	0xFE1
 36115                           indf2	equ	0xFDF
 36116                           postinc2	equ	0xFDE
 36117                           postdec2	equ	0xFDD
 36118                           fsr2h	equ	0xFDA
 36119                           fsr2l	equ	0xFD9
 36120                           status	equ	0xFD8
 36121                           
 36122 ;; *************** function ___ftpack *****************
 36123 ;; Defined at:
 36124 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 36125 ;; Parameters:    Size  Location     Type
 36126 ;;  arg             3    0[BANK0 ] unsigned um
 36127 ;;  exp             1    3[BANK0 ] unsigned char 
 36128 ;;  sign            1    4[BANK0 ] unsigned char 
 36129 ;; Auto vars:     Size  Location     Type
 36130 ;;		None
 36131 ;; Return value:  Size  Location     Type
 36132 ;;                  3    0[BANK0 ] float 
 36133 ;; Registers used:
 36134 ;;		wreg, status,2, status,0
 36135 ;; Tracked objects:
 36136 ;;		On entry : 0/0
 36137 ;;		On exit  : 0/0
 36138 ;;		Unchanged: 0/0
 36139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36140 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36142 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36143 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36144 ;;Total ram usage:        8 bytes
 36145 ;; Hardware stack levels used:    1
 36146 ;; Hardware stack levels required when called:    3
 36147 ;; This function calls:
 36148 ;;		Nothing
 36149 ;; This function is called by:
 36150 ;;		___altoft
 36151 ;;		___ftadd
 36152 ;;		___ftdiv
 36153 ;;		___ftmul
 36154 ;;		___lbtoft
 36155 ;;		___lltoft
 36156 ;;		___lwtoft
 36157 ;; This function uses a non-reentrant model
 36158 ;;
 36159                           
 36160                           	psect	text138
 36161  0189E4                     __ptext138:
 36162                           	opt stack 0
 36163  0189E4                     ___ftpack:
 36164                           	opt stack 25
 36165                           
 36166                           ;incstack = 0
 36167  0189E4  0100               	movlb	0	; () banked
 36168  0189E6  5163               	movf	___ftpack@exp& (0+255),w,b
 36169  0189E8  0100               	movlb	0	; () banked
 36170  0189EA  B4D8               	btfsc	status,2,c
 36171  0189EC  D008               	goto	l19453
 36172                           
 36173                           ; BSR set to: 0
 36174  0189EE  0100               	movlb	0	; () banked
 36175  0189F0  5160               	movf	___ftpack@arg& (0+255),w,b
 36176  0189F2  0100               	movlb	0	; () banked
 36177  0189F4  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 36178  0189F6  0100               	movlb	0	; () banked
 36179  0189F8  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 36180  0189FA  A4D8               	btfss	status,2,c
 36181  0189FC  D011               	goto	l19459
 36182  0189FE                     l19453:
 36183                           
 36184                           ; BSR set to: 0
 36185  0189FE  0E00               	movlw	0
 36186  018A00  0100               	movlb	0	; () banked
 36187  018A02  6F60               	movwf	?___ftpack& (0+255),b
 36188  018A04  0E00               	movlw	0
 36189  018A06  0100               	movlb	0	; () banked
 36190  018A08  6F61               	movwf	(?___ftpack+1)& (0+255),b
 36191  018A0A  0E00               	movlw	0
 36192  018A0C  0100               	movlb	0	; () banked
 36193  018A0E  6F62               	movwf	(?___ftpack+2)& (0+255),b
 36194                           
 36195                           ; BSR set to: 0
 36196  018A10  0012               	return	
 36197  018A12                     l19457:
 36198                           
 36199                           ; BSR set to: 0
 36200  018A12  0100               	movlb	0	; () banked
 36201  018A14  2B63               	incf	___ftpack@exp& (0+255),f,b
 36202  018A16  0100               	movlb	0	; () banked
 36203  018A18  90D8               	bcf	status,0,c
 36204  018A1A  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 36205  018A1C  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 36206  018A1E  3360               	rrcf	___ftpack@arg& (0+255),f,b
 36207  018A20                     l19459:
 36208                           
 36209                           ; BSR set to: 0
 36210  018A20  0E00               	movlw	0
 36211  018A22  0100               	movlb	0	; () banked
 36212  018A24  1560               	andwf	___ftpack@arg& (0+255),w,b
 36213  018A26  0100               	movlb	0	; () banked
 36214  018A28  6F65               	movwf	??___ftpack& (0+255),b
 36215  018A2A  0E00               	movlw	0
 36216  018A2C  0100               	movlb	0	; () banked
 36217  018A2E  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 36218  018A30  0100               	movlb	0	; () banked
 36219  018A32  6F66               	movwf	(??___ftpack+1)& (0+255),b
 36220  018A34  0EFE               	movlw	254
 36221  018A36  0100               	movlb	0	; () banked
 36222  018A38  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 36223  018A3A  0100               	movlb	0	; () banked
 36224  018A3C  6F67               	movwf	(??___ftpack+2)& (0+255),b
 36225  018A3E  0100               	movlb	0	; () banked
 36226  018A40  5165               	movf	??___ftpack& (0+255),w,b
 36227  018A42  0100               	movlb	0	; () banked
 36228  018A44  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 36229  018A46  0100               	movlb	0	; () banked
 36230  018A48  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 36231  018A4A  B4D8               	btfsc	status,2,c
 36232  018A4C  D011               	goto	l19465
 36233  018A4E  D7E1               	goto	l19457
 36234  018A50                     l19461:
 36235                           
 36236                           ; BSR set to: 0
 36237  018A50  0100               	movlb	0	; () banked
 36238  018A52  2B63               	incf	___ftpack@exp& (0+255),f,b
 36239                           
 36240                           ; BSR set to: 0
 36241  018A54  0E01               	movlw	1
 36242  018A56  0100               	movlb	0	; () banked
 36243  018A58  2760               	addwf	___ftpack@arg& (0+255),f,b
 36244  018A5A  0E00               	movlw	0
 36245  018A5C  0100               	movlb	0	; () banked
 36246  018A5E  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 36247  018A60  0E00               	movlw	0
 36248  018A62  0100               	movlb	0	; () banked
 36249  018A64  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 36250  018A66  0100               	movlb	0	; () banked
 36251  018A68  90D8               	bcf	status,0,c
 36252  018A6A  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 36253  018A6C  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 36254  018A6E  3360               	rrcf	___ftpack@arg& (0+255),f,b
 36255  018A70                     l19465:
 36256                           
 36257                           ; BSR set to: 0
 36258  018A70  0E00               	movlw	0
 36259  018A72  0100               	movlb	0	; () banked
 36260  018A74  1560               	andwf	___ftpack@arg& (0+255),w,b
 36261  018A76  0100               	movlb	0	; () banked
 36262  018A78  6F65               	movwf	??___ftpack& (0+255),b
 36263  018A7A  0E00               	movlw	0
 36264  018A7C  0100               	movlb	0	; () banked
 36265  018A7E  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 36266  018A80  0100               	movlb	0	; () banked
 36267  018A82  6F66               	movwf	(??___ftpack+1)& (0+255),b
 36268  018A84  0EFF               	movlw	255
 36269  018A86  0100               	movlb	0	; () banked
 36270  018A88  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 36271  018A8A  0100               	movlb	0	; () banked
 36272  018A8C  6F67               	movwf	(??___ftpack+2)& (0+255),b
 36273  018A8E  0100               	movlb	0	; () banked
 36274  018A90  5165               	movf	??___ftpack& (0+255),w,b
 36275  018A92  0100               	movlb	0	; () banked
 36276  018A94  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 36277  018A96  0100               	movlb	0	; () banked
 36278  018A98  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 36279  018A9A  B4D8               	btfsc	status,2,c
 36280  018A9C  D008               	goto	l19469
 36281  018A9E  D7D8               	goto	l19461
 36282  018AA0                     l19467:
 36283                           
 36284                           ; BSR set to: 0
 36285  018AA0  0100               	movlb	0	; () banked
 36286  018AA2  0763               	decf	___ftpack@exp& (0+255),f,b
 36287  018AA4  0100               	movlb	0	; () banked
 36288  018AA6  90D8               	bcf	status,0,c
 36289  018AA8  3760               	rlcf	___ftpack@arg& (0+255),f,b
 36290  018AAA  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 36291  018AAC  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 36292  018AAE                     l19469:
 36293                           
 36294                           ; BSR set to: 0
 36295  018AAE  0100               	movlb	0	; () banked
 36296  018AB0  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 36297  018AB2  D004               	goto	l10603
 36298                           
 36299                           ; BSR set to: 0
 36300  018AB4  0E02               	movlw	2
 36301  018AB6  0100               	movlb	0	; () banked
 36302  018AB8  6163               	cpfslt	___ftpack@exp& (0+255),b
 36303  018ABA  D7F2               	goto	l19467
 36304  018ABC                     l10603:
 36305                           
 36306                           ; BSR set to: 0
 36307  018ABC  0100               	movlb	0	; () banked
 36308  018ABE  B163               	btfsc	___ftpack@exp& (0+255),0,b
 36309  018AC0  D002               	goto	l19475
 36310                           
 36311                           ; BSR set to: 0
 36312  018AC2  0100               	movlb	0	; () banked
 36313  018AC4  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 36314  018AC6                     l19475:
 36315                           
 36316                           ; BSR set to: 0
 36317  018AC6  0100               	movlb	0	; () banked
 36318  018AC8  90D8               	bcf	status,0,c
 36319  018ACA  3363               	rrcf	___ftpack@exp& (0+255),f,b
 36320  018ACC  0100               	movlb	0	; () banked
 36321  018ACE  5163               	movf	___ftpack@exp& (0+255),w,b
 36322  018AD0  0100               	movlb	0	; () banked
 36323  018AD2  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 36324                           
 36325                           ; BSR set to: 0
 36326  018AD4  0100               	movlb	0	; () banked
 36327  018AD6  5164               	movf	___ftpack@sign& (0+255),w,b
 36328  018AD8  0100               	movlb	0	; () banked
 36329  018ADA  B4D8               	btfsc	status,2,c
 36330  018ADC  D002               	goto	l19481
 36331                           
 36332                           ; BSR set to: 0
 36333  018ADE  0100               	movlb	0	; () banked
 36334  018AE0  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 36335  018AE2                     l19481:
 36336                           
 36337                           ; BSR set to: 0
 36338  018AE2  C060  F060         	movff	___ftpack@arg,?___ftpack
 36339  018AE6  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 36340  018AEA  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 36341  018AEE  0012               	return	
 36342  018AF0                     __end_of___ftpack:
 36343                           	opt stack 0
 36344                           tblptru	equ	0xFF8
 36345                           tblptrh	equ	0xFF7
 36346                           tblptrl	equ	0xFF6
 36347                           tablat	equ	0xFF5
 36348                           prodh	equ	0xFF4
 36349                           prodl	equ	0xFF3
 36350                           intcon	equ	0xFF2
 36351                           postinc0	equ	0xFEE
 36352                           wreg	equ	0xFE8
 36353                           postdec1	equ	0xFE5
 36354                           fsr1h	equ	0xFE2
 36355                           fsr1l	equ	0xFE1
 36356                           indf2	equ	0xFDF
 36357                           postinc2	equ	0xFDE
 36358                           postdec2	equ	0xFDD
 36359                           fsr2h	equ	0xFDA
 36360                           fsr2l	equ	0xFD9
 36361                           status	equ	0xFD8
 36362                           
 36363 ;; *************** function _ISR *****************
 36364 ;; Defined at:
 36365 ;;		line 18 in file "ISR.c"
 36366 ;; Parameters:    Size  Location     Type
 36367 ;;		None
 36368 ;; Auto vars:     Size  Location     Type
 36369 ;;		None
 36370 ;; Return value:  Size  Location     Type
 36371 ;;                  1    wreg      void 
 36372 ;; Registers used:
 36373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36374 ;; Tracked objects:
 36375 ;;		On entry : 0/0
 36376 ;;		On exit  : 0/0
 36377 ;;		Unchanged: 0/0
 36378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36381 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36382 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36383 ;;Total ram usage:       16 bytes
 36384 ;; Hardware stack levels used:    1
 36385 ;; Hardware stack levels required when called:    2
 36386 ;; This function calls:
 36387 ;;		_Error_Checking_Interrupt_Overflow
 36388 ;;		_PM_Error_Led
 36389 ;;		___awtoft
 36390 ;;		i2___ftadd
 36391 ;; This function is called by:
 36392 ;;		Interrupt level 2
 36393 ;; This function uses a non-reentrant model
 36394 ;;
 36395                           
 36396                           	psect	intcode
 36397  000008                     __pintcode:
 36398                           	opt stack 0
 36399  000008                     _ISR:
 36400                           	opt stack 21
 36401                           
 36402                           ; BSR set to: 0
 36403                           ;incstack = 0
 36404  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 36405  00000A  CFFA F03B          	movff	pclath,??_ISR+2
 36406  00000E  CFFB F03C          	movff	pclatu,??_ISR+3
 36407  000012  CFE9 F03D          	movff	fsr0l,??_ISR+4
 36408  000016  CFEA F03E          	movff	fsr0h,??_ISR+5
 36409  00001A  CFE1 F03F          	movff	fsr1l,??_ISR+6
 36410  00001E  CFE2 F040          	movff	fsr1h,??_ISR+7
 36411  000022  CFD9 F041          	movff	fsr2l,??_ISR+8
 36412  000026  CFDA F042          	movff	fsr2h,??_ISR+9
 36413  00002A  CFF3 F043          	movff	prodl,??_ISR+10
 36414  00002E  CFF4 F044          	movff	prodh,??_ISR+11
 36415  000032  CFF6 F045          	movff	tblptrl,??_ISR+12
 36416  000036  CFF7 F046          	movff	tblptrh,??_ISR+13
 36417  00003A  CFF8 F047          	movff	tblptru,??_ISR+14
 36418  00003E  CFF5 F048          	movff	tablat,??_ISR+15
 36419                           
 36420                           ;ISR.c: 20: if(TMR7IF)
 36421  000042  A6BA               	btfss	4026,3,c	;volatile
 36422  000044  D02F               	goto	i2l19289
 36423                           
 36424                           ;ISR.c: 21: {
 36425                           ;ISR.c: 22: TMR7IF = 0;
 36426  000046  96BA               	bcf	4026,3,c	;volatile
 36427                           
 36428                           ;ISR.c: 23: Error_Checking_Interrupt_Overflow();
 36429  000048  EC66  F0D8         	call	_Error_Checking_Interrupt_Overflow	;wreg free
 36430                           
 36431                           ;ISR.c: 24: Timer1_counter++;
 36432  00004C  0102               	movlb	2	; () banked
 36433  00004E  4BA8               	infsnz	_Timer1_counter& (0+255),f,b
 36434  000050  2BA9               	incf	(_Timer1_counter+1)& (0+255),f,b
 36435                           
 36436                           ; BSR set to: 2
 36437                           ;ISR.c: 25: if(Timer0_Initial_delay_flag == 0)
 36438  000052  0101               	movlb	1	; () banked
 36439  000054  5185               	movf	_Timer0_Initial_delay_flag& (0+255),w,b
 36440  000056  A4D8               	btfss	status,2,c
 36441  000058  D002               	goto	i2l19277
 36442                           
 36443                           ; BSR set to: 1
 36444                           ;ISR.c: 26: {
 36445                           ;ISR.c: 27: Timer1_Initial_counter++;
 36446  00005A  0101               	movlb	1	; () banked
 36447  00005C  2B86               	incf	_Timer1_Initial_counter& (0+255),f,b
 36448  00005E                     i2l19277:
 36449                           
 36450                           ; BSR set to: 1
 36451                           ;ISR.c: 28: }
 36452                           ;ISR.c: 30: if(Timer1_counter == 2)
 36453  00005E  0E02               	movlw	2
 36454  000060  0102               	movlb	2	; () banked
 36455  000062  19A8               	xorwf	_Timer1_counter& (0+255),w,b
 36456  000064  0102               	movlb	2	; () banked
 36457  000066  11A9               	iorwf	(_Timer1_counter+1)& (0+255),w,b
 36458  000068  A4D8               	btfss	status,2,c
 36459  00006A  D003               	goto	i2l19281
 36460                           
 36461                           ; BSR set to: 2
 36462                           ;ISR.c: 31: {
 36463                           ;ISR.c: 32: Timer0_Falg2 = 1;
 36464  00006C  0E01               	movlw	1
 36465  00006E  0101               	movlb	1	; () banked
 36466  000070  6F84               	movwf	_Timer0_Falg2& (0+255),b
 36467  000072                     i2l19281:
 36468                           
 36469                           ;ISR.c: 33: }
 36470                           ;ISR.c: 34: if(Timer1_counter == 4)
 36471  000072  0E04               	movlw	4
 36472  000074  0102               	movlb	2	; () banked
 36473  000076  19A8               	xorwf	_Timer1_counter& (0+255),w,b
 36474  000078  0102               	movlb	2	; () banked
 36475  00007A  11A9               	iorwf	(_Timer1_counter+1)& (0+255),w,b
 36476  00007C  A4D8               	btfss	status,2,c
 36477  00007E  D00A               	goto	i2l19285
 36478                           
 36479                           ; BSR set to: 2
 36480                           ;ISR.c: 35: {
 36481                           ;ISR.c: 36: Timer1_counter = 0;
 36482  000080  0E00               	movlw	0
 36483  000082  0102               	movlb	2	; () banked
 36484  000084  6FA9               	movwf	(_Timer1_counter+1)& (0+255),b
 36485  000086  0E00               	movlw	0
 36486  000088  6FA8               	movwf	_Timer1_counter& (0+255),b
 36487                           
 36488                           ;ISR.c: 37: Timer0_1Sec_Flag = 1;
 36489  00008A  0E00               	movlw	0
 36490  00008C  0103               	movlb	3	; () banked
 36491  00008E  6FF1               	movwf	(_Timer0_1Sec_Flag+1)& (0+255),b
 36492  000090  0E01               	movlw	1
 36493  000092  6FF0               	movwf	_Timer0_1Sec_Flag& (0+255),b
 36494  000094                     i2l19285:
 36495                           
 36496                           ;ISR.c: 38: }
 36497                           ;ISR.c: 39: if(Timer1_Initial_counter == 12)
 36498  000094  0E0C               	movlw	12
 36499  000096  0101               	movlb	1	; () banked
 36500  000098  1986               	xorwf	_Timer1_Initial_counter& (0+255),w,b
 36501  00009A  A4D8               	btfss	status,2,c
 36502  00009C  D003               	goto	i2l19289
 36503                           
 36504                           ; BSR set to: 1
 36505                           ;ISR.c: 40: {
 36506                           ;ISR.c: 41: Timer0_Initial_delay_flag = 1;
 36507  00009E  0E01               	movlw	1
 36508  0000A0  0101               	movlb	1	; () banked
 36509  0000A2  6F85               	movwf	_Timer0_Initial_delay_flag& (0+255),b
 36510  0000A4                     i2l19289:
 36511                           
 36512                           ;ISR.c: 42: }
 36513                           ;ISR.c: 46: }
 36514                           ;ISR.c: 47: if(TMR0IF)
 36515  0000A4  A4F2               	btfss	intcon,2,c	;volatile
 36516  0000A6  D009               	goto	i2l19299
 36517                           
 36518                           ;ISR.c: 48: {
 36519                           ;ISR.c: 49: TMR0IF = 0;
 36520  0000A8  94F2               	bcf	intcon,2,c	;volatile
 36521                           
 36522                           ;ISR.c: 50: Volt_Curr_Flag = 1;
 36523  0000AA  0E01               	movlw	1
 36524  0000AC  0101               	movlb	1	; () banked
 36525  0000AE  6F9A               	movwf	_Volt_Curr_Flag& (0+255),b
 36526                           
 36527                           ; BSR set to: 1
 36528                           ;ISR.c: 51: PM_Error_Led();
 36529  0000B0  ECCD  F0A8         	call	_PM_Error_Led	;wreg free
 36530                           
 36531                           ;ISR.c: 52: Timer0_counter++;
 36532  0000B4  0105               	movlb	5	; () banked
 36533  0000B6  4BDE               	infsnz	_Timer0_counter& (0+255),f,b
 36534  0000B8  2BDF               	incf	(_Timer0_counter+1)& (0+255),f,b
 36535  0000BA                     i2l19299:
 36536                           
 36537                           ;ISR.c: 53: }
 36538                           ;ISR.c: 55: if(CCP1IF)
 36539  0000BA  A2A4               	btfss	4004,1,c	;volatile
 36540  0000BC  D01E               	goto	i2l19309
 36541                           
 36542                           ;ISR.c: 56: {
 36543                           ;ISR.c: 57: CCP1IF = 0;
 36544  0000BE  92A4               	bcf	4004,1,c	;volatile
 36545                           
 36546                           ;ISR.c: 58: CCP1IE = 1;
 36547  0000C0  82A3               	bsf	4003,1,c	;volatile
 36548                           
 36549                           ;ISR.c: 59: Freq_Flag = 1;
 36550  0000C2  0E01               	movlw	1
 36551  0000C4  0101               	movlb	1	; () banked
 36552  0000C6  6F58               	movwf	_Freq_Flag& (0+255),b
 36553                           
 36554                           ; BSR set to: 1
 36555                           ;ISR.c: 60: R_V_Old = R_V_New;
 36556  0000C8  C0F7  F0D0         	movff	_R_V_New,_R_V_Old
 36557  0000CC  C0F8  F0D1         	movff	_R_V_New+1,_R_V_Old+1
 36558  0000D0  C0F9  F0D2         	movff	_R_V_New+2,_R_V_Old+2
 36559                           
 36560                           ; BSR set to: 1
 36561                           ;ISR.c: 61: R_V_New = ((CCPR1H << 8) | CCPR1L);
 36562  0000D4  50BC               	movf	4028,w,c	;volatile
 36563  0000D6  CFBD F039          	movff	4029,??_ISR	;volatile
 36564  0000DA  6A3A               	clrf	(??_ISR+1)& (0+255),c
 36565  0000DC  C039  F03A         	movff	??_ISR,??_ISR+1
 36566  0000E0  6A39               	clrf	??_ISR,c
 36567  0000E2  1039               	iorwf	??_ISR,w,c
 36568  0000E4  6E2D               	movwf	___awtoft@c,c
 36569  0000E6  503A               	movf	??_ISR+1,w,c
 36570  0000E8  6E2E               	movwf	___awtoft@c+1,c
 36571  0000EA  EC07  F0D6         	call	___awtoft	;wreg free
 36572  0000EE  C02D  F0F7         	movff	?___awtoft,_R_V_New
 36573  0000F2  C02E  F0F8         	movff	?___awtoft+1,_R_V_New+1
 36574  0000F6  C02F  F0F9         	movff	?___awtoft+2,_R_V_New+2
 36575  0000FA                     i2l19309:
 36576                           
 36577                           ;ISR.c: 62: }
 36578                           ;ISR.c: 64: if(CCP3IF)
 36579  0000FA  A0B7               	btfss	4023,0,c	;volatile
 36580  0000FC  D047               	goto	i2l19323
 36581                           
 36582                           ;ISR.c: 65: {
 36583                           ;ISR.c: 66: CCP3IF = 0;
 36584  0000FE  90B7               	bcf	4023,0,c	;volatile
 36585                           
 36586                           ;ISR.c: 67: CCP3IE = 1;
 36587  000100  80B6               	bsf	4022,0,c	;volatile
 36588                           
 36589                           ;ISR.c: 68: R_PF_Flag = 1;
 36590  000102  0E01               	movlw	1
 36591  000104  0101               	movlb	1	; () banked
 36592  000106  6F78               	movwf	_R_PF_Flag& (0+255),b
 36593                           
 36594                           ; BSR set to: 1
 36595                           ;ISR.c: 69: Rcurr_Old = Rcurr_New;
 36596  000108  C1A1  F669         	movff	_Rcurr_New,_Rcurr_Old
 36597  00010C  C1A2  F66A         	movff	_Rcurr_New+1,_Rcurr_Old+1
 36598  000110  C1A3  F66B         	movff	_Rcurr_New+2,_Rcurr_Old+2
 36599                           
 36600                           ; BSR set to: 1
 36601                           ;ISR.c: 70: Rcurr_New = ((CCPR3H << 8) | CCPR3L);
 36602  000114  010F               	movlb	15	; () banked
 36603  000116  514A               	movf	74,w,b	;volatile
 36604  000118  CF4B F039          	movff	3915,??_ISR	;volatile
 36605  00011C  6A3A               	clrf	(??_ISR+1)& (0+255),c
 36606  00011E  C039  F03A         	movff	??_ISR,??_ISR+1
 36607  000122  6A39               	clrf	??_ISR,c
 36608  000124  1039               	iorwf	??_ISR,w,c
 36609  000126  6E2D               	movwf	___awtoft@c,c
 36610  000128  503A               	movf	??_ISR+1,w,c
 36611  00012A  6E2E               	movwf	___awtoft@c+1,c
 36612  00012C  EC07  F0D6         	call	___awtoft	;wreg free
 36613  000130  C02D  F1A1         	movff	?___awtoft,_Rcurr_New
 36614  000134  C02E  F1A2         	movff	?___awtoft+1,_Rcurr_New+1
 36615  000138  C02F  F1A3         	movff	?___awtoft+2,_Rcurr_New+2
 36616                           
 36617                           ;ISR.c: 71: Rcurr_V_Old = (R_V_Old - (1666.667));
 36618  00013C  C0D0  F02D         	movff	_R_V_Old,i2___ftadd@f1
 36619  000140  C0D1  F02E         	movff	_R_V_Old+1,i2___ftadd@f1+1
 36620  000144  C0D2  F02F         	movff	_R_V_Old+2,i2___ftadd@f1+2
 36621  000148  0E55               	movlw	85
 36622  00014A  6E30               	movwf	i2___ftadd@f2,c
 36623  00014C  0ED0               	movlw	208
 36624  00014E  6E31               	movwf	i2___ftadd@f2+1,c
 36625  000150  0EC4               	movlw	196
 36626  000152  6E32               	movwf	i2___ftadd@f2+2,c
 36627  000154  ECA9  F0BA         	call	i2___ftadd	;wreg free
 36628  000158  C02D  F21E         	movff	?i2___ftadd,_Rcurr_V_Old
 36629  00015C  C02E  F21F         	movff	?i2___ftadd+1,_Rcurr_V_Old+1
 36630  000160  C02F  F220         	movff	?i2___ftadd+2,_Rcurr_V_Old+2
 36631                           
 36632                           ;ISR.c: 72: Rcurr_V_New = (R_V_New - (1666.667));
 36633  000164  C0F7  F02D         	movff	_R_V_New,i2___ftadd@f1
 36634  000168  C0F8  F02E         	movff	_R_V_New+1,i2___ftadd@f1+1
 36635  00016C  C0F9  F02F         	movff	_R_V_New+2,i2___ftadd@f1+2
 36636  000170  0E55               	movlw	85
 36637  000172  6E30               	movwf	i2___ftadd@f2,c
 36638  000174  0ED0               	movlw	208
 36639  000176  6E31               	movwf	i2___ftadd@f2+1,c
 36640  000178  0EC4               	movlw	196
 36641  00017A  6E32               	movwf	i2___ftadd@f2+2,c
 36642  00017C  ECA9  F0BA         	call	i2___ftadd	;wreg free
 36643  000180  C02D  F0FA         	movff	?i2___ftadd,_Rcurr_V_New
 36644  000184  C02E  F0FB         	movff	?i2___ftadd+1,_Rcurr_V_New+1
 36645  000188  C02F  F0FC         	movff	?i2___ftadd+2,_Rcurr_V_New+2
 36646  00018C                     i2l19323:
 36647                           
 36648                           ;ISR.c: 73: }
 36649                           ;ISR.c: 75: if(CCP4IF)
 36650  00018C  A2B7               	btfss	4023,1,c	;volatile
 36651  00018E  D02A               	goto	i2l19337
 36652                           
 36653                           ;ISR.c: 76: {
 36654                           ;ISR.c: 77: CCP4IF = 0;
 36655  000190  92B7               	bcf	4023,1,c	;volatile
 36656                           
 36657                           ;ISR.c: 78: CCP4IE = 1;
 36658  000192  82B6               	bsf	4022,1,c	;volatile
 36659                           
 36660                           ;ISR.c: 79: Y_PF_Flag = 1;
 36661  000194  0E01               	movlw	1
 36662  000196  0101               	movlb	1	; () banked
 36663  000198  6F9D               	movwf	_Y_PF_Flag& (0+255),b
 36664                           
 36665                           ; BSR set to: 1
 36666                           ;ISR.c: 80: Ycurr_Old = Ycurr_New;
 36667  00019A  C1A7  F672         	movff	_Ycurr_New,_Ycurr_Old
 36668  00019E  C1A8  F673         	movff	_Ycurr_New+1,_Ycurr_Old+1
 36669  0001A2  C1A9  F674         	movff	_Ycurr_New+2,_Ycurr_Old+2
 36670                           
 36671                           ; BSR set to: 1
 36672                           ;ISR.c: 81: Ycurr_New = ((CCPR4H << 8) | CCPR4L);
 36673  0001A6  5078               	movf	3960,w,c	;volatile
 36674  0001A8  CF79 F039          	movff	3961,??_ISR	;volatile
 36675  0001AC  6A3A               	clrf	(??_ISR+1)& (0+255),c
 36676  0001AE  C039  F03A         	movff	??_ISR,??_ISR+1
 36677  0001B2  6A39               	clrf	??_ISR,c
 36678  0001B4  1039               	iorwf	??_ISR,w,c
 36679  0001B6  6E2D               	movwf	___awtoft@c,c
 36680  0001B8  503A               	movf	??_ISR+1,w,c
 36681  0001BA  6E2E               	movwf	___awtoft@c+1,c
 36682  0001BC  EC07  F0D6         	call	___awtoft	;wreg free
 36683  0001C0  C02D  F1A7         	movff	?___awtoft,_Ycurr_New
 36684  0001C4  C02E  F1A8         	movff	?___awtoft+1,_Ycurr_New+1
 36685  0001C8  C02F  F1A9         	movff	?___awtoft+2,_Ycurr_New+2
 36686                           
 36687                           ;ISR.c: 82: Ycurr_V_Old = R_V_Old;
 36688  0001CC  C0D0  F278         	movff	_R_V_Old,_Ycurr_V_Old
 36689  0001D0  C0D1  F279         	movff	_R_V_Old+1,_Ycurr_V_Old+1
 36690  0001D4  C0D2  F27A         	movff	_R_V_Old+2,_Ycurr_V_Old+2
 36691                           
 36692                           ;ISR.c: 83: Ycurr_V_New = R_V_New;
 36693  0001D8  C0F7  F0FD         	movff	_R_V_New,_Ycurr_V_New
 36694  0001DC  C0F8  F0FE         	movff	_R_V_New+1,_Ycurr_V_New+1
 36695  0001E0  C0F9  F0FF         	movff	_R_V_New+2,_Ycurr_V_New+2
 36696  0001E4                     i2l19337:
 36697                           
 36698                           ;ISR.c: 84: }
 36699                           ;ISR.c: 86: if(CCP5IF)
 36700  0001E4  A4B7               	btfss	4023,2,c	;volatile
 36701  0001E6  D046               	goto	i2l19351
 36702                           
 36703                           ;ISR.c: 87: {
 36704                           ;ISR.c: 88: CCP5IF = 0;
 36705  0001E8  94B7               	bcf	4023,2,c	;volatile
 36706                           
 36707                           ;ISR.c: 89: CCP5IE = 1;
 36708  0001EA  84B6               	bsf	4022,2,c	;volatile
 36709                           
 36710                           ;ISR.c: 90: B_PF_Flag = 1;
 36711  0001EC  0E01               	movlw	1
 36712  0001EE  0101               	movlb	1	; () banked
 36713  0001F0  6F4A               	movwf	_B_PF_Flag& (0+255),b
 36714                           
 36715                           ; BSR set to: 1
 36716                           ;ISR.c: 91: Bcurr_Old = Bcurr_New;
 36717  0001F2  C19E  F645         	movff	_Bcurr_New,_Bcurr_Old
 36718  0001F6  C19F  F646         	movff	_Bcurr_New+1,_Bcurr_Old+1
 36719  0001FA  C1A0  F647         	movff	_Bcurr_New+2,_Bcurr_Old+2
 36720                           
 36721                           ; BSR set to: 1
 36722                           ;ISR.c: 92: Bcurr_New = ((CCPR5H << 8) | CCPR5L);
 36723  0001FE  5075               	movf	3957,w,c	;volatile
 36724  000200  CF76 F039          	movff	3958,??_ISR	;volatile
 36725  000204  6A3A               	clrf	(??_ISR+1)& (0+255),c
 36726  000206  C039  F03A         	movff	??_ISR,??_ISR+1
 36727  00020A  6A39               	clrf	??_ISR,c
 36728  00020C  1039               	iorwf	??_ISR,w,c
 36729  00020E  6E2D               	movwf	___awtoft@c,c
 36730  000210  503A               	movf	??_ISR+1,w,c
 36731  000212  6E2E               	movwf	___awtoft@c+1,c
 36732  000214  EC07  F0D6         	call	___awtoft	;wreg free
 36733  000218  C02D  F19E         	movff	?___awtoft,_Bcurr_New
 36734  00021C  C02E  F19F         	movff	?___awtoft+1,_Bcurr_New+1
 36735  000220  C02F  F1A0         	movff	?___awtoft+2,_Bcurr_New+2
 36736                           
 36737                           ;ISR.c: 93: Bcurr_V_Old = (R_V_Old + (1666.667));
 36738  000224  C0D0  F02D         	movff	_R_V_Old,i2___ftadd@f1
 36739  000228  C0D1  F02E         	movff	_R_V_Old+1,i2___ftadd@f1+1
 36740  00022C  C0D2  F02F         	movff	_R_V_Old+2,i2___ftadd@f1+2
 36741  000230  0E55               	movlw	85
 36742  000232  6E30               	movwf	i2___ftadd@f2,c
 36743  000234  0ED0               	movlw	208
 36744  000236  6E31               	movwf	i2___ftadd@f2+1,c
 36745  000238  0E44               	movlw	68
 36746  00023A  6E32               	movwf	i2___ftadd@f2+2,c
 36747  00023C  ECA9  F0BA         	call	i2___ftadd	;wreg free
 36748  000240  C02D  F20C         	movff	?i2___ftadd,_Bcurr_V_Old
 36749  000244  C02E  F20D         	movff	?i2___ftadd+1,_Bcurr_V_Old+1
 36750  000248  C02F  F20E         	movff	?i2___ftadd+2,_Bcurr_V_Old+2
 36751                           
 36752                           ;ISR.c: 94: Bcurr_V_New = (R_V_New + (1666.667));
 36753  00024C  C0F7  F02D         	movff	_R_V_New,i2___ftadd@f1
 36754  000250  C0F8  F02E         	movff	_R_V_New+1,i2___ftadd@f1+1
 36755  000254  C0F9  F02F         	movff	_R_V_New+2,i2___ftadd@f1+2
 36756  000258  0E55               	movlw	85
 36757  00025A  6E30               	movwf	i2___ftadd@f2,c
 36758  00025C  0ED0               	movlw	208
 36759  00025E  6E31               	movwf	i2___ftadd@f2+1,c
 36760  000260  0E44               	movlw	68
 36761  000262  6E32               	movwf	i2___ftadd@f2+2,c
 36762  000264  ECA9  F0BA         	call	i2___ftadd	;wreg free
 36763  000268  C02D  F0F4         	movff	?i2___ftadd,_Bcurr_V_New
 36764  00026C  C02E  F0F5         	movff	?i2___ftadd+1,_Bcurr_V_New+1
 36765  000270  C02F  F0F6         	movff	?i2___ftadd+2,_Bcurr_V_New+2
 36766  000274                     i2l19351:
 36767                           
 36768                           ;ISR.c: 95: }
 36769                           ;ISR.c: 97: if(TMR1IF)
 36770  000274  A09E               	btfss	3998,0,c	;volatile
 36771  000276  D01C               	goto	i2l19359
 36772                           
 36773                           ;ISR.c: 98: {
 36774                           ;ISR.c: 99: TMR1IF = 0;
 36775  000278  909E               	bcf	3998,0,c	;volatile
 36776                           
 36777                           ;ISR.c: 100: Gi_Timer1_OF_counter++;
 36778  00027A  0102               	movlb	2	; () banked
 36779  00027C  4B94               	infsnz	_Gi_Timer1_OF_counter& (0+255),f,b
 36780  00027E  2B95               	incf	(_Gi_Timer1_OF_counter+1)& (0+255),f,b
 36781                           
 36782                           ;ISR.c: 101: Timer1_OF_counter_Turbine++;
 36783  000280  0103               	movlb	3	; () banked
 36784  000282  4BF4               	infsnz	_Timer1_OF_counter_Turbine& (0+255),f,b
 36785  000284  2BF5               	incf	(_Timer1_OF_counter_Turbine+1)& (0+255),f,b
 36786                           
 36787                           ;ISR.c: 103: Timer1_OF_counter_Generator++;
 36788  000286  0103               	movlb	3	; () banked
 36789  000288  4BF2               	infsnz	_Timer1_OF_counter_Generator& (0+255),f,b
 36790  00028A  2BF3               	incf	(_Timer1_OF_counter_Generator+1)& (0+255),f,b
 36791                           
 36792                           ;ISR.c: 104: Gi_Timer1_OF_counter_Generator_Temp++;
 36793  00028C  0103               	movlb	3	; () banked
 36794  00028E  4BE8               	infsnz	_Gi_Timer1_OF_counter_Generator_Temp& (0+255),f,b
 36795  000290  2BE9               	incf	(_Gi_Timer1_OF_counter_Generator_Temp+1)& (0+255),f,b
 36796                           
 36797                           ;ISR.c: 106: Timer1_OF_counter_Wind++;
 36798  000292  0103               	movlb	3	; () banked
 36799  000294  4BF6               	infsnz	_Timer1_OF_counter_Wind& (0+255),f,b
 36800  000296  2BF7               	incf	(_Timer1_OF_counter_Wind+1)& (0+255),f,b
 36801                           
 36802                           ;ISR.c: 107: Timer1_OF_counter_Wind_temp++;
 36803  000298  0103               	movlb	3	; () banked
 36804  00029A  4BFC               	infsnz	_Timer1_OF_counter_Wind_temp& (0+255),f,b
 36805  00029C  2BFD               	incf	(_Timer1_OF_counter_Wind_temp+1)& (0+255),f,b
 36806                           
 36807                           ;ISR.c: 109: Timer1_OF_counter_Wind_2++;
 36808  00029E  0103               	movlb	3	; () banked
 36809  0002A0  4BF8               	infsnz	_Timer1_OF_counter_Wind_2& (0+255),f,b
 36810  0002A2  2BF9               	incf	(_Timer1_OF_counter_Wind_2+1)& (0+255),f,b
 36811                           
 36812                           ;ISR.c: 110: Timer1_OF_counter_Wind_2_temp++;
 36813  0002A4  0103               	movlb	3	; () banked
 36814  0002A6  4BFA               	infsnz	_Timer1_OF_counter_Wind_2_temp& (0+255),f,b
 36815  0002A8  2BFB               	incf	(_Timer1_OF_counter_Wind_2_temp+1)& (0+255),f,b
 36816                           
 36817                           ; BSR set to: 3
 36818                           ;ISR.c: 112: Timer1_interrupt_flag = 1;
 36819  0002AA  0E01               	movlw	1
 36820  0002AC  0101               	movlb	1	; () banked
 36821  0002AE  6F87               	movwf	_Timer1_interrupt_flag& (0+255),b
 36822  0002B0                     i2l19359:
 36823                           
 36824                           ;ISR.c: 114: }
 36825                           ;ISR.c: 116: if(CCP7IF)
 36826  0002B0  A8B7               	btfss	4023,4,c	;volatile
 36827  0002B2  D01B               	goto	i2l19371
 36828                           
 36829                           ;ISR.c: 117: {
 36830                           ;ISR.c: 118: CCP7IF = 0;
 36831  0002B4  98B7               	bcf	4023,4,c	;volatile
 36832                           
 36833                           ;ISR.c: 119: TRPM_Cap_Old = TRPM_Cap_New;
 36834  0002B6  C130  F132         	movff	_TRPM_Cap_New,_TRPM_Cap_Old
 36835  0002BA  C131  F133         	movff	_TRPM_Cap_New+1,_TRPM_Cap_Old+1
 36836                           
 36837                           ;ISR.c: 120: TRPM_Cap_New = (256*CCPR7H)+CCPR7L;
 36838  0002BE  5070               	movf	3952,w,c	;volatile
 36839  0002C0  6E3A               	movwf	(??_ISR+1)& (0+255),c
 36840  0002C2  6A39               	clrf	??_ISR& (0+255),c
 36841  0002C4  506F               	movf	3951,w,c	;volatile
 36842  0002C6  2439               	addwf	??_ISR,w,c
 36843  0002C8  0101               	movlb	1	; () banked
 36844  0002CA  6F30               	movwf	_TRPM_Cap_New& (0+255),b
 36845  0002CC  0E00               	movlw	0
 36846  0002CE  203A               	addwfc	??_ISR+1,w,c
 36847  0002D0  0101               	movlb	1	; () banked
 36848  0002D2  6F31               	movwf	(_TRPM_Cap_New+1)& (0+255),b
 36849                           
 36850                           ; BSR set to: 1
 36851                           ;ISR.c: 121: Timer1_OF_counter_Old = Timer1_OF_counter_New;
 36852  0002D4  C136  F2A2         	movff	_Timer1_OF_counter_New,_Timer1_OF_counter_Old
 36853  0002D8  C137  F2A3         	movff	_Timer1_OF_counter_New+1,_Timer1_OF_counter_Old+1
 36854                           
 36855                           ; BSR set to: 1
 36856                           ;ISR.c: 122: Timer1_OF_counter_New = Gi_Timer1_OF_counter;
 36857  0002DC  C294  F136         	movff	_Gi_Timer1_OF_counter,_Timer1_OF_counter_New
 36858  0002E0  C295  F137         	movff	_Gi_Timer1_OF_counter+1,_Timer1_OF_counter_New+1
 36859                           
 36860                           ; BSR set to: 1
 36861                           ;ISR.c: 123: TRPM_Cal = 1;
 36862  0002E4  0E01               	movlw	1
 36863  0002E6  0100               	movlb	0	; () banked
 36864  0002E8  6FEA               	movwf	_TRPM_Cal& (0+255),b
 36865  0002EA                     i2l19371:
 36866                           
 36867                           ;ISR.c: 125: }
 36868                           ;ISR.c: 126: if(CCP8IF)
 36869  0002EA  AAB7               	btfss	4023,5,c	;volatile
 36870  0002EC  D020               	goto	i2l19383
 36871                           
 36872                           ;ISR.c: 127: {
 36873                           ;ISR.c: 128: CCP8IF = 0;
 36874  0002EE  9AB7               	bcf	4023,5,c	;volatile
 36875                           
 36876                           ;ISR.c: 129: GRPM_Cap_Old = GRPM_Cap_New;
 36877  0002F0  C122  F124         	movff	_GRPM_Cap_New,_GRPM_Cap_Old
 36878  0002F4  C123  F125         	movff	_GRPM_Cap_New+1,_GRPM_Cap_Old+1
 36879                           
 36880                           ;ISR.c: 130: GRPM_Cap_New = ((256*CCPR8H)+CCPR8L);
 36881  0002F8  010F               	movlb	15	; () banked
 36882  0002FA  5148               	movf	72,w,b	;volatile
 36883  0002FC  6E3A               	movwf	(??_ISR+1)& (0+255),c
 36884  0002FE  6A39               	clrf	??_ISR& (0+255),c
 36885  000300  010F               	movlb	15	; () banked
 36886  000302  5147               	movf	71,w,b	;volatile
 36887  000304  2439               	addwf	??_ISR,w,c
 36888  000306  0101               	movlb	1	; () banked
 36889  000308  6F22               	movwf	_GRPM_Cap_New& (0+255),b
 36890  00030A  010F               	movlb	15	; () banked
 36891  00030C  0E00               	movlw	0
 36892  00030E  203A               	addwfc	??_ISR+1,w,c
 36893  000310  0101               	movlb	1	; () banked
 36894  000312  6F23               	movwf	(_GRPM_Cap_New+1)& (0+255),b
 36895                           
 36896                           ; BSR set to: 1
 36897                           ;ISR.c: 131: Timer1_OF_counter_Generator_Old = Timer1_OF_counter_Generator_New;
 36898  000314  C134  F2A0         	movff	_Timer1_OF_counter_Generator_New,_Timer1_OF_counter_Generator_Old
 36899  000318  C135  F2A1         	movff	_Timer1_OF_counter_Generator_New+1,_Timer1_OF_counter_Generator_Old+1
 36900                           
 36901                           ; BSR set to: 1
 36902                           ;ISR.c: 132: Timer1_OF_counter_Generator_New = Gi_Timer1_OF_counter_Generator_Temp;
 36903  00031C  C3E8  F134         	movff	_Gi_Timer1_OF_counter_Generator_Temp,_Timer1_OF_counter_Generator_New
 36904  000320  C3E9  F135         	movff	_Gi_Timer1_OF_counter_Generator_Temp+1,_Timer1_OF_counter_Generator_New+1
 36905                           
 36906                           ; BSR set to: 1
 36907                           ;ISR.c: 133: GRPM_Cap = 1;
 36908  000324  0E00               	movlw	0
 36909  000326  0102               	movlb	2	; () banked
 36910  000328  6F85               	movwf	(_GRPM_Cap+1)& (0+255),b
 36911  00032A  0E01               	movlw	1
 36912  00032C  6F84               	movwf	_GRPM_Cap& (0+255),b
 36913  00032E                     i2l19383:
 36914                           
 36915                           ;ISR.c: 134: }
 36916                           ;ISR.c: 135: if(CCP10IF)
 36917  00032E  AEB7               	btfss	4023,7,c	;volatile
 36918  000330  D020               	goto	i2l19395
 36919                           
 36920                           ;ISR.c: 136: {
 36921                           ;ISR.c: 137: CCP10IF = 0;
 36922  000332  9EB7               	bcf	4023,7,c	;volatile
 36923                           
 36924                           ;ISR.c: 138: Wind_Cap_Old_2 = Wind_Cap_New_2;
 36925  000334  C142  F146         	movff	_Wind_Cap_New_2,_Wind_Cap_Old_2
 36926  000338  C143  F147         	movff	_Wind_Cap_New_2+1,_Wind_Cap_Old_2+1
 36927                           
 36928                           ;ISR.c: 139: Wind_Cap_New_2 = (256*CCPR10H)+CCPR10L;
 36929  00033C  010F               	movlb	15	; () banked
 36930  00033E  5142               	movf	66,w,b	;volatile
 36931  000340  6E3A               	movwf	(??_ISR+1)& (0+255),c
 36932  000342  6A39               	clrf	??_ISR& (0+255),c
 36933  000344  010F               	movlb	15	; () banked
 36934  000346  5141               	movf	65,w,b	;volatile
 36935  000348  2439               	addwf	??_ISR,w,c
 36936  00034A  0101               	movlb	1	; () banked
 36937  00034C  6F42               	movwf	_Wind_Cap_New_2& (0+255),b
 36938  00034E  010F               	movlb	15	; () banked
 36939  000350  0E00               	movlw	0
 36940  000352  203A               	addwfc	??_ISR+1,w,c
 36941  000354  0101               	movlb	1	; () banked
 36942  000356  6F43               	movwf	(_Wind_Cap_New_2+1)& (0+255),b
 36943                           
 36944                           ; BSR set to: 1
 36945                           ;ISR.c: 140: Timer1_OF_counter_Wind_2_temp_Old = Timer1_OF_counter_Wind_2_temp_New;
 36946  000358  C138  F2A4         	movff	_Timer1_OF_counter_Wind_2_temp_New,_Timer1_OF_counter_Wind_2_temp_Old
 36947  00035C  C139  F2A5         	movff	_Timer1_OF_counter_Wind_2_temp_New+1,_Timer1_OF_counter_Wind_2_temp_Old+1
 36948                           
 36949                           ; BSR set to: 1
 36950                           ;ISR.c: 141: Timer1_OF_counter_Wind_2_temp_New = Timer1_OF_counter_Wind_2_temp;
 36951  000360  C3FA  F138         	movff	_Timer1_OF_counter_Wind_2_temp,_Timer1_OF_counter_Wind_2_temp_New
 36952  000364  C3FB  F139         	movff	_Timer1_OF_counter_Wind_2_temp+1,_Timer1_OF_counter_Wind_2_temp_New+1
 36953                           
 36954                           ; BSR set to: 1
 36955                           ;ISR.c: 142: Wind_Cap_2 = 1;
 36956  000368  0E00               	movlw	0
 36957  00036A  0102               	movlb	2	; () banked
 36958  00036C  6FB3               	movwf	(_Wind_Cap_2+1)& (0+255),b
 36959  00036E  0E01               	movlw	1
 36960  000370  6FB2               	movwf	_Wind_Cap_2& (0+255),b
 36961  000372                     i2l19395:
 36962                           
 36963                           ;ISR.c: 143: }
 36964                           ;ISR.c: 144: if(CCP6IF)
 36965  000372  A6B7               	btfss	4023,3,c	;volatile
 36966  000374  D01D               	goto	i2l19407
 36967                           
 36968                           ;ISR.c: 145: {
 36969                           ;ISR.c: 146: CCP6IF = 0;
 36970  000376  96B7               	bcf	4023,3,c	;volatile
 36971                           
 36972                           ;ISR.c: 147: Wind_Cap_Old = Wind_Cap_New;
 36973  000378  C140  F144         	movff	_Wind_Cap_New,_Wind_Cap_Old
 36974  00037C  C141  F145         	movff	_Wind_Cap_New+1,_Wind_Cap_Old+1
 36975                           
 36976                           ;ISR.c: 148: Wind_Cap_New = ((256*CCPR6H)+CCPR6L);
 36977  000380  5073               	movf	3955,w,c	;volatile
 36978  000382  6E3A               	movwf	(??_ISR+1)& (0+255),c
 36979  000384  6A39               	clrf	??_ISR& (0+255),c
 36980  000386  5072               	movf	3954,w,c	;volatile
 36981  000388  2439               	addwf	??_ISR,w,c
 36982  00038A  0101               	movlb	1	; () banked
 36983  00038C  6F40               	movwf	_Wind_Cap_New& (0+255),b
 36984  00038E  0E00               	movlw	0
 36985  000390  203A               	addwfc	??_ISR+1,w,c
 36986  000392  0101               	movlb	1	; () banked
 36987  000394  6F41               	movwf	(_Wind_Cap_New+1)& (0+255),b
 36988                           
 36989                           ; BSR set to: 1
 36990                           ;ISR.c: 149: Timer1_OF_counter_Wind_temp_Old = Timer1_OF_counter_Wind_temp_New;
 36991  000396  C13A  F2A6         	movff	_Timer1_OF_counter_Wind_temp_New,_Timer1_OF_counter_Wind_temp_Old
 36992  00039A  C13B  F2A7         	movff	_Timer1_OF_counter_Wind_temp_New+1,_Timer1_OF_counter_Wind_temp_Old+1
 36993                           
 36994                           ; BSR set to: 1
 36995                           ;ISR.c: 150: Timer1_OF_counter_Wind_temp_New = Timer1_OF_counter_Wind_temp;
 36996  00039E  C3FC  F13A         	movff	_Timer1_OF_counter_Wind_temp,_Timer1_OF_counter_Wind_temp_New
 36997  0003A2  C3FD  F13B         	movff	_Timer1_OF_counter_Wind_temp+1,_Timer1_OF_counter_Wind_temp_New+1
 36998                           
 36999                           ; BSR set to: 1
 37000                           ;ISR.c: 151: Wind_Cap = 1;
 37001  0003A6  0E00               	movlw	0
 37002  0003A8  0102               	movlb	2	; () banked
 37003  0003AA  6FB1               	movwf	(_Wind_Cap+1)& (0+255),b
 37004  0003AC  0E01               	movlw	1
 37005  0003AE  6FB0               	movwf	_Wind_Cap& (0+255),b
 37006  0003B0                     i2l19407:
 37007                           
 37008                           ;ISR.c: 152: }
 37009                           ;ISR.c: 154: if(PIR3bits.RC2IF)
 37010  0003B0  AAA4               	btfss	4004,5,c	;volatile
 37011  0003B2  D02A               	goto	i2l4537
 37012                           
 37013                           ;ISR.c: 155: {
 37014                           ;ISR.c: 156: if(RCSTA2bits.OERR==1)
 37015  0003B4  010F               	movlb	15	; () banked
 37016  0003B6  A322               	btfss	34,1,b	;volatile
 37017  0003B8  D004               	goto	i2l19413
 37018                           
 37019                           ; BSR set to: 15
 37020                           ;ISR.c: 157: {
 37021                           ;ISR.c: 158: RCSTA2bits.CREN=0;
 37022  0003BA  010F               	movlb	15	; () banked
 37023  0003BC  9922               	bcf	34,4,b	;volatile
 37024                           
 37025                           ;ISR.c: 159: RCSTA2bits.CREN=1;
 37026  0003BE  010F               	movlb	15	; () banked
 37027  0003C0  8922               	bsf	34,4,b	;volatile
 37028  0003C2                     i2l19413:
 37029                           
 37030                           ; BSR set to: 15
 37031                           ;ISR.c: 160: }
 37032                           ;ISR.c: 161: if(RS485_Data_Flag == 1)
 37033  0003C2  0101               	movlb	1	; () banked
 37034  0003C4  0577               	decf	_RS485_Data_Flag& (0+255),w,b
 37035  0003C6  A4D8               	btfss	status,2,c
 37036  0003C8  D01E               	goto	i2l19423
 37037                           
 37038                           ; BSR set to: 1
 37039                           ;ISR.c: 162: {
 37040                           ;ISR.c: 163: Data_1[counter_1] = RCREG2;
 37041  0003CA  010F               	movlb	15	; () banked
 37042  0003CC  511D               	movf	29,w,b	;volatile
 37043  0003CE  6E39               	movwf	??_ISR& (0+255),c
 37044  0003D0  6A3A               	clrf	(??_ISR+1)& (0+255),c
 37045  0003D2  0100               	movlb	0	; () banked
 37046  0003D4  51F3               	movf	_counter_1& (0+255),w,b
 37047  0003D6  0D02               	mullw	2
 37048  0003D8  0E00               	movlw	low _Data_1
 37049  0003DA  24F3               	addwf	prodl,w,c
 37050  0003DC  6ED9               	movwf	fsr2l,c
 37051  0003DE  0E05               	movlw	high _Data_1
 37052  0003E0  20F4               	addwfc	prodh,w,c
 37053  0003E2  6EDA               	movwf	fsr2h,c
 37054  0003E4  C039  FFDE         	movff	??_ISR,postinc2
 37055  0003E8  C03A  FFDD         	movff	??_ISR+1,postdec2
 37056                           
 37057                           ; BSR set to: 0
 37058                           ;ISR.c: 164: if(Data_1[0] == 0x20)
 37059  0003EC  0E20               	movlw	32
 37060  0003EE  0105               	movlb	5	; () banked
 37061  0003F0  1900               	xorwf	_Data_1& (0+255),w,b
 37062  0003F2  0105               	movlb	5	; () banked
 37063  0003F4  1101               	iorwf	(_Data_1+1)& (0+255),w,b
 37064  0003F6  A4D8               	btfss	status,2,c
 37065  0003F8  D006               	goto	i2l19423
 37066                           
 37067                           ; BSR set to: 5
 37068                           ;ISR.c: 165: {
 37069                           ;ISR.c: 166: if(counter_1 < 10)
 37070  0003FA  0E0A               	movlw	10
 37071  0003FC  0100               	movlb	0	; () banked
 37072  0003FE  61F3               	cpfslt	_counter_1& (0+255),b
 37073  000400  D002               	goto	i2l19423
 37074                           
 37075                           ; BSR set to: 0
 37076                           ;ISR.c: 167: {
 37077                           ;ISR.c: 168: counter_1++;
 37078  000402  0100               	movlb	0	; () banked
 37079  000404  2BF3               	incf	_counter_1& (0+255),f,b
 37080  000406                     i2l19423:
 37081                           
 37082                           ;ISR.c: 169: }
 37083                           ;ISR.c: 170: }
 37084                           ;ISR.c: 171: }
 37085                           ;ISR.c: 172: PIR3bits.RC2IF = 0;
 37086  000406  9AA4               	bcf	4004,5,c	;volatile
 37087  000408                     i2l4537:
 37088  000408  C048  FFF5         	movff	??_ISR+15,tablat
 37089  00040C  C047  FFF8         	movff	??_ISR+14,tblptru
 37090  000410  C046  FFF7         	movff	??_ISR+13,tblptrh
 37091  000414  C045  FFF6         	movff	??_ISR+12,tblptrl
 37092  000418  C044  FFF4         	movff	??_ISR+11,prodh
 37093  00041C  C043  FFF3         	movff	??_ISR+10,prodl
 37094  000420  C042  FFDA         	movff	??_ISR+9,fsr2h
 37095  000424  C041  FFD9         	movff	??_ISR+8,fsr2l
 37096  000428  C040  FFE2         	movff	??_ISR+7,fsr1h
 37097  00042C  C03F  FFE1         	movff	??_ISR+6,fsr1l
 37098  000430  C03E  FFEA         	movff	??_ISR+5,fsr0h
 37099  000434  C03D  FFE9         	movff	??_ISR+4,fsr0l
 37100  000438  C03C  FFFB         	movff	??_ISR+3,pclatu
 37101  00043C  C03B  FFFA         	movff	??_ISR+2,pclath
 37102  000440  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 37103  000442  0011               	retfie		f
 37104  000444                     __end_of_ISR:
 37105                           	opt stack 0
 37106                           pclatu	equ	0xFFB
 37107                           pclath	equ	0xFFA
 37108                           tblptru	equ	0xFF8
 37109                           tblptrh	equ	0xFF7
 37110                           tblptrl	equ	0xFF6
 37111                           tablat	equ	0xFF5
 37112                           prodh	equ	0xFF4
 37113                           prodl	equ	0xFF3
 37114                           intcon	equ	0xFF2
 37115                           postinc0	equ	0xFEE
 37116                           fsr0h	equ	0xFEA
 37117                           fsr0l	equ	0xFE9
 37118                           wreg	equ	0xFE8
 37119                           postdec1	equ	0xFE5
 37120                           fsr1h	equ	0xFE2
 37121                           fsr1l	equ	0xFE1
 37122                           indf2	equ	0xFDF
 37123                           postinc2	equ	0xFDE
 37124                           postdec2	equ	0xFDD
 37125                           fsr2h	equ	0xFDA
 37126                           fsr2l	equ	0xFD9
 37127                           status	equ	0xFD8
 37128                           
 37129 ;; *************** function i2___ftadd *****************
 37130 ;; Defined at:
 37131 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 37132 ;; Parameters:    Size  Location     Type
 37133 ;;  f1              3    8[COMRAM] float 
 37134 ;;  f2              3   11[COMRAM] float 
 37135 ;; Auto vars:     Size  Location     Type
 37136 ;;  __ftadd         1   19[COMRAM] unsigned char 
 37137 ;;  __ftadd         1   18[COMRAM] unsigned char 
 37138 ;;  __ftadd         1   17[COMRAM] unsigned char 
 37139 ;; Return value:  Size  Location     Type
 37140 ;;                  3    8[COMRAM] float 
 37141 ;; Registers used:
 37142 ;;		wreg, status,2, status,0, cstack
 37143 ;; Tracked objects:
 37144 ;;		On entry : 0/0
 37145 ;;		On exit  : 0/0
 37146 ;;		Unchanged: 0/0
 37147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37148 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37149 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37150 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37151 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37152 ;;Total ram usage:       12 bytes
 37153 ;; Hardware stack levels used:    1
 37154 ;; Hardware stack levels required when called:    1
 37155 ;; This function calls:
 37156 ;;		i2___ftpack
 37157 ;; This function is called by:
 37158 ;;		_ISR
 37159 ;; This function uses a non-reentrant model
 37160 ;;
 37161                           
 37162                           	psect	text140
 37163  017552                     __ptext140:
 37164                           	opt stack 0
 37165  017552                     i2___ftadd:
 37166                           	opt stack 21
 37167                           
 37168                           ;incstack = 0
 37169  017552  C02F  F033         	movff	i2___ftadd@f1+2,??i2___ftadd
 37170  017556  6A34               	clrf	(??i2___ftadd+1)& (0+255),c
 37171  017558  6A35               	clrf	(??i2___ftadd+2)& (0+255),c
 37172  01755A  342E               	rlcf	i2___ftadd@f1+1,w,c
 37173  01755C  3633               	rlcf	??i2___ftadd& (0+255),f,c
 37174  01755E  E301               	bnc	u1204_41
 37175  017560  8034               	bsf	(??i2___ftadd+1)& (0+255),0,c
 37176  017562                     u1204_41:
 37177  017562  5033               	movf	??i2___ftadd,w,c
 37178  017564  6E38               	movwf	i2___ftadd@exp1,c
 37179  017566  C032  F033         	movff	i2___ftadd@f2+2,??i2___ftadd
 37180  01756A  6A34               	clrf	(??i2___ftadd+1)& (0+255),c
 37181  01756C  6A35               	clrf	(??i2___ftadd+2)& (0+255),c
 37182  01756E  3431               	rlcf	i2___ftadd@f2+1,w,c
 37183  017570  3633               	rlcf	??i2___ftadd& (0+255),f,c
 37184  017572  E301               	bnc	u1205_41
 37185  017574  8034               	bsf	(??i2___ftadd+1)& (0+255),0,c
 37186  017576                     u1205_41:
 37187  017576  5033               	movf	??i2___ftadd,w,c
 37188  017578  6E37               	movwf	i2___ftadd@exp2,c
 37189  01757A  5038               	movf	i2___ftadd@exp1,w,c
 37190  01757C  B4D8               	btfsc	status,2,c
 37191  01757E  D00B               	goto	i2l10626
 37192  017580  5037               	movf	i2___ftadd@exp2,w,c
 37193  017582  5C38               	subwf	i2___ftadd@exp1,w,c
 37194  017584  B0D8               	btfsc	status,0,c
 37195  017586  D00E               	goto	i2l19037
 37196  017588  5038               	movf	i2___ftadd@exp1,w,c
 37197  01758A  0800               	sublw	0
 37198  01758C  2437               	addwf	i2___ftadd@exp2,w,c
 37199  01758E  6E33               	movwf	??i2___ftadd& (0+255),c
 37200  017590  0E18               	movlw	24
 37201  017592  6433               	cpfsgt	??i2___ftadd,c
 37202  017594  D007               	goto	i2l19037
 37203  017596                     i2l10626:
 37204  017596  C030  F02D         	movff	i2___ftadd@f2,?i2___ftadd
 37205  01759A  C031  F02E         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 37206  01759E  C032  F02F         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 37207  0175A2  0012               	return	
 37208  0175A4                     i2l19037:
 37209  0175A4  5037               	movf	i2___ftadd@exp2,w,c
 37210  0175A6  B4D8               	btfsc	status,2,c
 37211  0175A8  D00B               	goto	i2l10630
 37212  0175AA  5038               	movf	i2___ftadd@exp1,w,c
 37213  0175AC  5C37               	subwf	i2___ftadd@exp2,w,c
 37214  0175AE  B0D8               	btfsc	status,0,c
 37215  0175B0  D00E               	goto	i2l19043
 37216  0175B2  5037               	movf	i2___ftadd@exp2,w,c
 37217  0175B4  0800               	sublw	0
 37218  0175B6  2438               	addwf	i2___ftadd@exp1,w,c
 37219  0175B8  6E33               	movwf	??i2___ftadd& (0+255),c
 37220  0175BA  0E18               	movlw	24
 37221  0175BC  6433               	cpfsgt	??i2___ftadd,c
 37222  0175BE  D007               	goto	i2l19043
 37223  0175C0                     i2l10630:
 37224  0175C0  C02D  F02D         	movff	i2___ftadd@f1,?i2___ftadd
 37225  0175C4  C02E  F02E         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 37226  0175C8  C02F  F02F         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 37227  0175CC  0012               	return	
 37228  0175CE                     i2l19043:
 37229  0175CE  0E06               	movlw	6
 37230  0175D0  6E36               	movwf	i2___ftadd@sign,c
 37231  0175D2  BE2F               	btfsc	i2___ftadd@f1+2,7,c
 37232  0175D4  8E36               	bsf	i2___ftadd@sign,7,c
 37233  0175D6  BE32               	btfsc	i2___ftadd@f2+2,7,c
 37234  0175D8  8C36               	bsf	i2___ftadd@sign,6,c
 37235  0175DA  8E2E               	bsf	i2___ftadd@f1+1,7,c
 37236  0175DC  0EFF               	movlw	255
 37237  0175DE  162D               	andwf	i2___ftadd@f1,f,c
 37238  0175E0  0EFF               	movlw	255
 37239  0175E2  162E               	andwf	i2___ftadd@f1+1,f,c
 37240  0175E4  0E00               	movlw	0
 37241  0175E6  162F               	andwf	i2___ftadd@f1+2,f,c
 37242  0175E8  8E31               	bsf	i2___ftadd@f2+1,7,c
 37243  0175EA  0EFF               	movlw	255
 37244  0175EC  1630               	andwf	i2___ftadd@f2,f,c
 37245  0175EE  0EFF               	movlw	255
 37246  0175F0  1631               	andwf	i2___ftadd@f2+1,f,c
 37247  0175F2  0E00               	movlw	0
 37248  0175F4  1632               	andwf	i2___ftadd@f2+2,f,c
 37249  0175F6  5037               	movf	i2___ftadd@exp2,w,c
 37250  0175F8  5C38               	subwf	i2___ftadd@exp1,w,c
 37251  0175FA  B0D8               	btfsc	status,0,c
 37252  0175FC  D01B               	goto	i2l19069
 37253  0175FE                     i2l19059:
 37254  0175FE  90D8               	bcf	status,0,c
 37255  017600  3630               	rlcf	i2___ftadd@f2,f,c
 37256  017602  3631               	rlcf	i2___ftadd@f2+1,f,c
 37257  017604  3632               	rlcf	i2___ftadd@f2+2,f,c
 37258  017606  0637               	decf	i2___ftadd@exp2,f,c
 37259  017608  5038               	movf	i2___ftadd@exp1,w,c
 37260  01760A  1837               	xorwf	i2___ftadd@exp2,w,c
 37261  01760C  B4D8               	btfsc	status,2,c
 37262  01760E  D00D               	goto	i2l19067
 37263  017610  0636               	decf	i2___ftadd@sign,f,c
 37264  017612  C036  F033         	movff	i2___ftadd@sign,??i2___ftadd
 37265  017616  0E07               	movlw	7
 37266  017618  1633               	andwf	??i2___ftadd,f,c
 37267  01761A  B4D8               	btfsc	status,2,c
 37268  01761C  D006               	goto	i2l19067
 37269  01761E  D7EF               	goto	i2l19059
 37270  017620                     i2l19065:
 37271  017620  90D8               	bcf	status,0,c
 37272  017622  322F               	rrcf	i2___ftadd@f1+2,f,c
 37273  017624  322E               	rrcf	i2___ftadd@f1+1,f,c
 37274  017626  322D               	rrcf	i2___ftadd@f1,f,c
 37275  017628  2A38               	incf	i2___ftadd@exp1,f,c
 37276  01762A                     i2l19067:
 37277  01762A  5037               	movf	i2___ftadd@exp2,w,c
 37278  01762C  1838               	xorwf	i2___ftadd@exp1,w,c
 37279  01762E  B4D8               	btfsc	status,2,c
 37280  017630  D01F               	goto	i2l10641
 37281  017632  D7F6               	goto	i2l19065
 37282  017634                     i2l19069:
 37283  017634  5038               	movf	i2___ftadd@exp1,w,c
 37284  017636  5C37               	subwf	i2___ftadd@exp2,w,c
 37285  017638  B0D8               	btfsc	status,0,c
 37286  01763A  D01A               	goto	i2l10641
 37287  01763C                     i2l19071:
 37288  01763C  90D8               	bcf	status,0,c
 37289  01763E  362D               	rlcf	i2___ftadd@f1,f,c
 37290  017640  362E               	rlcf	i2___ftadd@f1+1,f,c
 37291  017642  362F               	rlcf	i2___ftadd@f1+2,f,c
 37292  017644  0638               	decf	i2___ftadd@exp1,f,c
 37293  017646  5038               	movf	i2___ftadd@exp1,w,c
 37294  017648  1837               	xorwf	i2___ftadd@exp2,w,c
 37295  01764A  B4D8               	btfsc	status,2,c
 37296  01764C  D00D               	goto	i2l19079
 37297  01764E  0636               	decf	i2___ftadd@sign,f,c
 37298  017650  C036  F033         	movff	i2___ftadd@sign,??i2___ftadd
 37299  017654  0E07               	movlw	7
 37300  017656  1633               	andwf	??i2___ftadd,f,c
 37301  017658  B4D8               	btfsc	status,2,c
 37302  01765A  D006               	goto	i2l19079
 37303  01765C  D7EF               	goto	i2l19071
 37304  01765E                     i2l19077:
 37305  01765E  90D8               	bcf	status,0,c
 37306  017660  3232               	rrcf	i2___ftadd@f2+2,f,c
 37307  017662  3231               	rrcf	i2___ftadd@f2+1,f,c
 37308  017664  3230               	rrcf	i2___ftadd@f2,f,c
 37309  017666  2A37               	incf	i2___ftadd@exp2,f,c
 37310  017668                     i2l19079:
 37311  017668  5037               	movf	i2___ftadd@exp2,w,c
 37312  01766A  1838               	xorwf	i2___ftadd@exp1,w,c
 37313  01766C  A4D8               	btfss	status,2,c
 37314  01766E  D7F7               	goto	i2l19077
 37315  017670                     i2l10641:
 37316  017670  AE36               	btfss	i2___ftadd@sign,7,c
 37317  017672  D00C               	goto	i2l10650
 37318  017674  0EFF               	movlw	255
 37319  017676  1A2D               	xorwf	i2___ftadd@f1,f,c
 37320  017678  0EFF               	movlw	255
 37321  01767A  1A2E               	xorwf	i2___ftadd@f1+1,f,c
 37322  01767C  0EFF               	movlw	255
 37323  01767E  1A2F               	xorwf	i2___ftadd@f1+2,f,c
 37324  017680  0E01               	movlw	1
 37325  017682  262D               	addwf	i2___ftadd@f1,f,c
 37326  017684  0E00               	movlw	0
 37327  017686  222E               	addwfc	i2___ftadd@f1+1,f,c
 37328  017688  0E00               	movlw	0
 37329  01768A  222F               	addwfc	i2___ftadd@f1+2,f,c
 37330  01768C                     i2l10650:
 37331  01768C  AC36               	btfss	i2___ftadd@sign,6,c
 37332  01768E  D00C               	goto	i2l19085
 37333  017690  0EFF               	movlw	255
 37334  017692  1A30               	xorwf	i2___ftadd@f2,f,c
 37335  017694  0EFF               	movlw	255
 37336  017696  1A31               	xorwf	i2___ftadd@f2+1,f,c
 37337  017698  0EFF               	movlw	255
 37338  01769A  1A32               	xorwf	i2___ftadd@f2+2,f,c
 37339  01769C  0E01               	movlw	1
 37340  01769E  2630               	addwf	i2___ftadd@f2,f,c
 37341  0176A0  0E00               	movlw	0
 37342  0176A2  2231               	addwfc	i2___ftadd@f2+1,f,c
 37343  0176A4  0E00               	movlw	0
 37344  0176A6  2232               	addwfc	i2___ftadd@f2+2,f,c
 37345  0176A8                     i2l19085:
 37346  0176A8  0E00               	movlw	0
 37347  0176AA  6E36               	movwf	i2___ftadd@sign,c
 37348  0176AC  502D               	movf	i2___ftadd@f1,w,c
 37349  0176AE  2630               	addwf	i2___ftadd@f2,f,c
 37350  0176B0  502E               	movf	i2___ftadd@f1+1,w,c
 37351  0176B2  2231               	addwfc	i2___ftadd@f2+1,f,c
 37352  0176B4  502F               	movf	i2___ftadd@f1+2,w,c
 37353  0176B6  2232               	addwfc	i2___ftadd@f2+2,f,c
 37354  0176B8  AE32               	btfss	i2___ftadd@f2+2,7,c
 37355  0176BA  D00E               	goto	i2l19095
 37356  0176BC  0EFF               	movlw	255
 37357  0176BE  1A30               	xorwf	i2___ftadd@f2,f,c
 37358  0176C0  0EFF               	movlw	255
 37359  0176C2  1A31               	xorwf	i2___ftadd@f2+1,f,c
 37360  0176C4  0EFF               	movlw	255
 37361  0176C6  1A32               	xorwf	i2___ftadd@f2+2,f,c
 37362  0176C8  0E01               	movlw	1
 37363  0176CA  2630               	addwf	i2___ftadd@f2,f,c
 37364  0176CC  0E00               	movlw	0
 37365  0176CE  2231               	addwfc	i2___ftadd@f2+1,f,c
 37366  0176D0  0E00               	movlw	0
 37367  0176D2  2232               	addwfc	i2___ftadd@f2+2,f,c
 37368  0176D4  0E01               	movlw	1
 37369  0176D6  6E36               	movwf	i2___ftadd@sign,c
 37370  0176D8                     i2l19095:
 37371  0176D8  C030  F025         	movff	i2___ftadd@f2,i2___ftpack@arg
 37372  0176DC  C031  F026         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 37373  0176E0  C032  F027         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 37374  0176E4  C038  F028         	movff	i2___ftadd@exp1,i2___ftpack@exp
 37375  0176E8  C036  F029         	movff	i2___ftadd@sign,i2___ftpack@sign
 37376  0176EC  EC9D  F0CF         	call	i2___ftpack	;wreg free
 37377  0176F0  C025  F02D         	movff	?i2___ftpack,?i2___ftadd
 37378  0176F4  C026  F02E         	movff	?i2___ftpack+1,?i2___ftadd+1
 37379  0176F8  C027  F02F         	movff	?i2___ftpack+2,?i2___ftadd+2
 37380  0176FC  0012               	return	
 37381  0176FE                     __end_ofi2___ftadd:
 37382                           	opt stack 0
 37383                           pclatu	equ	0xFFB
 37384                           pclath	equ	0xFFA
 37385                           tblptru	equ	0xFF8
 37386                           tblptrh	equ	0xFF7
 37387                           tblptrl	equ	0xFF6
 37388                           tablat	equ	0xFF5
 37389                           prodh	equ	0xFF4
 37390                           prodl	equ	0xFF3
 37391                           intcon	equ	0xFF2
 37392                           postinc0	equ	0xFEE
 37393                           fsr0h	equ	0xFEA
 37394                           fsr0l	equ	0xFE9
 37395                           wreg	equ	0xFE8
 37396                           postdec1	equ	0xFE5
 37397                           fsr1h	equ	0xFE2
 37398                           fsr1l	equ	0xFE1
 37399                           indf2	equ	0xFDF
 37400                           postinc2	equ	0xFDE
 37401                           postdec2	equ	0xFDD
 37402                           fsr2h	equ	0xFDA
 37403                           fsr2l	equ	0xFD9
 37404                           status	equ	0xFD8
 37405                           
 37406 ;; *************** function ___awtoft *****************
 37407 ;; Defined at:
 37408 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 37409 ;; Parameters:    Size  Location     Type
 37410 ;;  c               2    8[COMRAM] int 
 37411 ;; Auto vars:     Size  Location     Type
 37412 ;;  sign            1   11[COMRAM] unsigned char 
 37413 ;; Return value:  Size  Location     Type
 37414 ;;                  3    8[COMRAM] float 
 37415 ;; Registers used:
 37416 ;;		wreg, status,2, status,0, cstack
 37417 ;; Tracked objects:
 37418 ;;		On entry : 0/0
 37419 ;;		On exit  : 0/0
 37420 ;;		Unchanged: 0/0
 37421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37422 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37425 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37426 ;;Total ram usage:        4 bytes
 37427 ;; Hardware stack levels used:    1
 37428 ;; Hardware stack levels required when called:    1
 37429 ;; This function calls:
 37430 ;;		i2___ftpack
 37431 ;; This function is called by:
 37432 ;;		_ISR
 37433 ;; This function uses a non-reentrant model
 37434 ;;
 37435                           
 37436                           	psect	text141
 37437  01AC0E                     __ptext141:
 37438                           	opt stack 0
 37439  01AC0E                     ___awtoft:
 37440                           	opt stack 21
 37441                           
 37442                           ;incstack = 0
 37443  01AC0E  0E00               	movlw	0
 37444  01AC10  6E30               	movwf	___awtoft@sign,c
 37445  01AC12  AE2E               	btfss	___awtoft@c+1,7,c
 37446  01AC14  D006               	goto	i2l19025
 37447  01AC16  6C2D               	negf	___awtoft@c,c
 37448  01AC18  1E2E               	comf	___awtoft@c+1,f,c
 37449  01AC1A  B0D8               	btfsc	status,0,c
 37450  01AC1C  2A2E               	incf	___awtoft@c+1,f,c
 37451  01AC1E  0E01               	movlw	1
 37452  01AC20  6E30               	movwf	___awtoft@sign,c
 37453  01AC22                     i2l19025:
 37454  01AC22  C02D  F025         	movff	___awtoft@c,i2___ftpack@arg
 37455  01AC26  C02E  F026         	movff	___awtoft@c+1,i2___ftpack@arg+1
 37456  01AC2A  6A27               	clrf	i2___ftpack@arg+2,c
 37457  01AC2C  0E8E               	movlw	142
 37458  01AC2E  6E28               	movwf	i2___ftpack@exp,c
 37459  01AC30  C030  F029         	movff	___awtoft@sign,i2___ftpack@sign
 37460  01AC34  EC9D  F0CF         	call	i2___ftpack	;wreg free
 37461  01AC38  C025  F02D         	movff	?i2___ftpack,?___awtoft
 37462  01AC3C  C026  F02E         	movff	?i2___ftpack+1,?___awtoft+1
 37463  01AC40  C027  F02F         	movff	?i2___ftpack+2,?___awtoft+2
 37464  01AC44  0012               	return	
 37465  01AC46                     __end_of___awtoft:
 37466                           	opt stack 0
 37467                           pclatu	equ	0xFFB
 37468                           pclath	equ	0xFFA
 37469                           tblptru	equ	0xFF8
 37470                           tblptrh	equ	0xFF7
 37471                           tblptrl	equ	0xFF6
 37472                           tablat	equ	0xFF5
 37473                           prodh	equ	0xFF4
 37474                           prodl	equ	0xFF3
 37475                           intcon	equ	0xFF2
 37476                           postinc0	equ	0xFEE
 37477                           fsr0h	equ	0xFEA
 37478                           fsr0l	equ	0xFE9
 37479                           wreg	equ	0xFE8
 37480                           postdec1	equ	0xFE5
 37481                           fsr1h	equ	0xFE2
 37482                           fsr1l	equ	0xFE1
 37483                           indf2	equ	0xFDF
 37484                           postinc2	equ	0xFDE
 37485                           postdec2	equ	0xFDD
 37486                           fsr2h	equ	0xFDA
 37487                           fsr2l	equ	0xFD9
 37488                           status	equ	0xFD8
 37489                           
 37490 ;; *************** function i2___ftpack *****************
 37491 ;; Defined at:
 37492 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 37493 ;; Parameters:    Size  Location     Type
 37494 ;;  arg             3    0[COMRAM] unsigned um
 37495 ;;  exp             1    3[COMRAM] unsigned char 
 37496 ;;  sign            1    4[COMRAM] unsigned char 
 37497 ;; Auto vars:     Size  Location     Type
 37498 ;;		None
 37499 ;; Return value:  Size  Location     Type
 37500 ;;                  3    0[COMRAM] float 
 37501 ;; Registers used:
 37502 ;;		wreg, status,2, status,0
 37503 ;; Tracked objects:
 37504 ;;		On entry : 0/0
 37505 ;;		On exit  : 0/0
 37506 ;;		Unchanged: 0/0
 37507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37508 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37510 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37511 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37512 ;;Total ram usage:        8 bytes
 37513 ;; Hardware stack levels used:    1
 37514 ;; This function calls:
 37515 ;;		Nothing
 37516 ;; This function is called by:
 37517 ;;		___awtoft
 37518 ;;		i2___ftadd
 37519 ;; This function uses a non-reentrant model
 37520 ;;
 37521                           
 37522                           	psect	text142
 37523  019F3A                     __ptext142:
 37524                           	opt stack 0
 37525  019F3A                     i2___ftpack:
 37526                           	opt stack 21
 37527                           
 37528                           ;incstack = 0
 37529  019F3A  5028               	movf	i2___ftpack@exp,w,c
 37530  019F3C  B4D8               	btfsc	status,2,c
 37531  019F3E  D005               	goto	i2l18083
 37532  019F40  5025               	movf	i2___ftpack@arg,w,c
 37533  019F42  1026               	iorwf	i2___ftpack@arg+1,w,c
 37534  019F44  1027               	iorwf	i2___ftpack@arg+2,w,c
 37535  019F46  A4D8               	btfss	status,2,c
 37536  019F48  D00C               	goto	i2l18089
 37537  019F4A                     i2l18083:
 37538  019F4A  0E00               	movlw	0
 37539  019F4C  6E25               	movwf	?i2___ftpack,c
 37540  019F4E  0E00               	movlw	0
 37541  019F50  6E26               	movwf	?i2___ftpack+1,c
 37542  019F52  0E00               	movlw	0
 37543  019F54  6E27               	movwf	?i2___ftpack+2,c
 37544  019F56  0012               	return	
 37545  019F58                     i2l18087:
 37546  019F58  2A28               	incf	i2___ftpack@exp,f,c
 37547  019F5A  90D8               	bcf	status,0,c
 37548  019F5C  3227               	rrcf	i2___ftpack@arg+2,f,c
 37549  019F5E  3226               	rrcf	i2___ftpack@arg+1,f,c
 37550  019F60  3225               	rrcf	i2___ftpack@arg,f,c
 37551  019F62                     i2l18089:
 37552  019F62  0E00               	movlw	0
 37553  019F64  1425               	andwf	i2___ftpack@arg,w,c
 37554  019F66  6E2A               	movwf	??i2___ftpack& (0+255),c
 37555  019F68  0E00               	movlw	0
 37556  019F6A  1426               	andwf	i2___ftpack@arg+1,w,c
 37557  019F6C  6E2B               	movwf	(??i2___ftpack+1)& (0+255),c
 37558  019F6E  0EFE               	movlw	254
 37559  019F70  1427               	andwf	i2___ftpack@arg+2,w,c
 37560  019F72  6E2C               	movwf	(??i2___ftpack+2)& (0+255),c
 37561  019F74  502A               	movf	??i2___ftpack,w,c
 37562  019F76  102B               	iorwf	??i2___ftpack+1,w,c
 37563  019F78  102C               	iorwf	??i2___ftpack+2,w,c
 37564  019F7A  B4D8               	btfsc	status,2,c
 37565  019F7C  D00C               	goto	i2l18095
 37566  019F7E  D7EC               	goto	i2l18087
 37567  019F80                     i2l18091:
 37568  019F80  2A28               	incf	i2___ftpack@exp,f,c
 37569  019F82  0E01               	movlw	1
 37570  019F84  2625               	addwf	i2___ftpack@arg,f,c
 37571  019F86  0E00               	movlw	0
 37572  019F88  2226               	addwfc	i2___ftpack@arg+1,f,c
 37573  019F8A  0E00               	movlw	0
 37574  019F8C  2227               	addwfc	i2___ftpack@arg+2,f,c
 37575  019F8E  90D8               	bcf	status,0,c
 37576  019F90  3227               	rrcf	i2___ftpack@arg+2,f,c
 37577  019F92  3226               	rrcf	i2___ftpack@arg+1,f,c
 37578  019F94  3225               	rrcf	i2___ftpack@arg,f,c
 37579  019F96                     i2l18095:
 37580  019F96  0E00               	movlw	0
 37581  019F98  1425               	andwf	i2___ftpack@arg,w,c
 37582  019F9A  6E2A               	movwf	??i2___ftpack& (0+255),c
 37583  019F9C  0E00               	movlw	0
 37584  019F9E  1426               	andwf	i2___ftpack@arg+1,w,c
 37585  019FA0  6E2B               	movwf	(??i2___ftpack+1)& (0+255),c
 37586  019FA2  0EFF               	movlw	255
 37587  019FA4  1427               	andwf	i2___ftpack@arg+2,w,c
 37588  019FA6  6E2C               	movwf	(??i2___ftpack+2)& (0+255),c
 37589  019FA8  502A               	movf	??i2___ftpack,w,c
 37590  019FAA  102B               	iorwf	??i2___ftpack+1,w,c
 37591  019FAC  102C               	iorwf	??i2___ftpack+2,w,c
 37592  019FAE  B4D8               	btfsc	status,2,c
 37593  019FB0  D006               	goto	i2l18099
 37594  019FB2  D7E6               	goto	i2l18091
 37595  019FB4                     i2l18097:
 37596  019FB4  0628               	decf	i2___ftpack@exp,f,c
 37597  019FB6  90D8               	bcf	status,0,c
 37598  019FB8  3625               	rlcf	i2___ftpack@arg,f,c
 37599  019FBA  3626               	rlcf	i2___ftpack@arg+1,f,c
 37600  019FBC  3627               	rlcf	i2___ftpack@arg+2,f,c
 37601  019FBE                     i2l18099:
 37602  019FBE  BE26               	btfsc	i2___ftpack@arg+1,7,c
 37603  019FC0  D003               	goto	i2l10603
 37604  019FC2  0E02               	movlw	2
 37605  019FC4  6028               	cpfslt	i2___ftpack@exp,c
 37606  019FC6  D7F6               	goto	i2l18097
 37607  019FC8                     i2l10603:
 37608  019FC8  A028               	btfss	i2___ftpack@exp,0,c
 37609  019FCA  9E26               	bcf	i2___ftpack@arg+1,7,c
 37610  019FCC  90D8               	bcf	status,0,c
 37611  019FCE  3228               	rrcf	i2___ftpack@exp,f,c
 37612  019FD0  5028               	movf	i2___ftpack@exp,w,c
 37613  019FD2  1227               	iorwf	i2___ftpack@arg+2,f,c
 37614  019FD4  5029               	movf	i2___ftpack@sign,w,c
 37615  019FD6  A4D8               	btfss	status,2,c
 37616  019FD8  8E27               	bsf	i2___ftpack@arg+2,7,c
 37617  019FDA  C025  F025         	movff	i2___ftpack@arg,?i2___ftpack
 37618  019FDE  C026  F026         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 37619  019FE2  C027  F027         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 37620  019FE6  0012               	return	
 37621  019FE8                     __end_ofi2___ftpack:
 37622                           	opt stack 0
 37623                           pclatu	equ	0xFFB
 37624                           pclath	equ	0xFFA
 37625                           tblptru	equ	0xFF8
 37626                           tblptrh	equ	0xFF7
 37627                           tblptrl	equ	0xFF6
 37628                           tablat	equ	0xFF5
 37629                           prodh	equ	0xFF4
 37630                           prodl	equ	0xFF3
 37631                           intcon	equ	0xFF2
 37632                           postinc0	equ	0xFEE
 37633                           fsr0h	equ	0xFEA
 37634                           fsr0l	equ	0xFE9
 37635                           wreg	equ	0xFE8
 37636                           postdec1	equ	0xFE5
 37637                           fsr1h	equ	0xFE2
 37638                           fsr1l	equ	0xFE1
 37639                           indf2	equ	0xFDF
 37640                           postinc2	equ	0xFDE
 37641                           postdec2	equ	0xFDD
 37642                           fsr2h	equ	0xFDA
 37643                           fsr2l	equ	0xFD9
 37644                           status	equ	0xFD8
 37645                           
 37646 ;; *************** function _PM_Error_Led *****************
 37647 ;; Defined at:
 37648 ;;		line 637 in file "Power_Meter.c"
 37649 ;; Parameters:    Size  Location     Type
 37650 ;;		None
 37651 ;; Auto vars:     Size  Location     Type
 37652 ;;		None
 37653 ;; Return value:  Size  Location     Type
 37654 ;;                  1    wreg      void 
 37655 ;; Registers used:
 37656 ;;		wreg, status,2, status,0, cstack
 37657 ;; Tracked objects:
 37658 ;;		On entry : 0/0
 37659 ;;		On exit  : 0/0
 37660 ;;		Unchanged: 0/0
 37661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37666 ;;Total ram usage:        0 bytes
 37667 ;; Hardware stack levels used:    1
 37668 ;; Hardware stack levels required when called:    1
 37669 ;; This function calls:
 37670 ;;		i2___ftge
 37671 ;; This function is called by:
 37672 ;;		_ISR
 37673 ;; This function uses a non-reentrant model
 37674 ;;
 37675                           
 37676                           	psect	text143
 37677  01519A                     __ptext143:
 37678                           	opt stack 0
 37679  01519A                     _PM_Error_Led:
 37680                           	opt stack 21
 37681                           
 37682                           ;Power_Meter.c: 639: if ((Phase_Sequence_Ok == 0) || (R_Volt <= (370)) || (Y_Volt <= (37
      +                          0)) ||
 37683                           ;Power_Meter.c: 640: (B_Volt <= (370)) || (R_Volt >= (450)) || (Y_Volt >= (450)) ||
 37684                           ;Power_Meter.c: 641: (B_Volt >= (450)) || (R_Curr >= (12)) || (Y_Curr >= (12)) ||
 37685                           ;Power_Meter.c: 642: (B_Curr >= (12)) || (Frequency <= 47.5) || (Frequency >=52.5) || (K
      +                          W <= (-5.0)) ||
 37686                           ;Power_Meter.c: 643: (KW >= (6.0) ))
 37687                           
 37688                           ;incstack = 0
 37689  01519A  501E               	movf	_Phase_Sequence_Ok,w,c
 37690  01519C  B4D8               	btfsc	status,2,c
 37691  01519E  D0D0               	goto	i2l9270
 37692  0151A0  0E00               	movlw	0
 37693  0151A2  6E25               	movwf	i2___ftge@ff1,c
 37694  0151A4  0EB9               	movlw	185
 37695  0151A6  6E26               	movwf	i2___ftge@ff1+1,c
 37696  0151A8  0E43               	movlw	67
 37697  0151AA  6E27               	movwf	i2___ftge@ff1+2,c
 37698  0151AC  C007  F028         	movff	_R_Volt,i2___ftge@ff2
 37699  0151B0  C008  F029         	movff	_R_Volt+1,i2___ftge@ff2+1
 37700  0151B4  C009  F02A         	movff	_R_Volt+2,i2___ftge@ff2+2
 37701  0151B8  ECCC  F0D1         	call	i2___ftge	;wreg free
 37702  0151BC  B0D8               	btfsc	status,0,c
 37703  0151BE  D0C0               	goto	i2l9270
 37704  0151C0  0E00               	movlw	0
 37705  0151C2  6E25               	movwf	i2___ftge@ff1,c
 37706  0151C4  0EB9               	movlw	185
 37707  0151C6  6E26               	movwf	i2___ftge@ff1+1,c
 37708  0151C8  0E43               	movlw	67
 37709  0151CA  6E27               	movwf	i2___ftge@ff1+2,c
 37710  0151CC  C010  F028         	movff	_Y_Volt,i2___ftge@ff2
 37711  0151D0  C011  F029         	movff	_Y_Volt+1,i2___ftge@ff2+1
 37712  0151D4  C012  F02A         	movff	_Y_Volt+2,i2___ftge@ff2+2
 37713  0151D8  ECCC  F0D1         	call	i2___ftge	;wreg free
 37714  0151DC  B0D8               	btfsc	status,0,c
 37715  0151DE  D0B0               	goto	i2l9270
 37716  0151E0  0E00               	movlw	0
 37717  0151E2  6E25               	movwf	i2___ftge@ff1,c
 37718  0151E4  0EB9               	movlw	185
 37719  0151E6  6E26               	movwf	i2___ftge@ff1+1,c
 37720  0151E8  0E43               	movlw	67
 37721  0151EA  6E27               	movwf	i2___ftge@ff1+2,c
 37722  0151EC  C001  F028         	movff	_B_Volt,i2___ftge@ff2
 37723  0151F0  C002  F029         	movff	_B_Volt+1,i2___ftge@ff2+1
 37724  0151F4  C003  F02A         	movff	_B_Volt+2,i2___ftge@ff2+2
 37725  0151F8  ECCC  F0D1         	call	i2___ftge	;wreg free
 37726  0151FC  B0D8               	btfsc	status,0,c
 37727  0151FE  D0A0               	goto	i2l9270
 37728  015200  C007  F025         	movff	_R_Volt,i2___ftge@ff1
 37729  015204  C008  F026         	movff	_R_Volt+1,i2___ftge@ff1+1
 37730  015208  C009  F027         	movff	_R_Volt+2,i2___ftge@ff1+2
 37731  01520C  0E00               	movlw	0
 37732  01520E  6E28               	movwf	i2___ftge@ff2,c
 37733  015210  0EE1               	movlw	225
 37734  015212  6E29               	movwf	i2___ftge@ff2+1,c
 37735  015214  0E43               	movlw	67
 37736  015216  6E2A               	movwf	i2___ftge@ff2+2,c
 37737  015218  ECCC  F0D1         	call	i2___ftge	;wreg free
 37738  01521C  B0D8               	btfsc	status,0,c
 37739  01521E  D090               	goto	i2l9270
 37740  015220  C010  F025         	movff	_Y_Volt,i2___ftge@ff1
 37741  015224  C011  F026         	movff	_Y_Volt+1,i2___ftge@ff1+1
 37742  015228  C012  F027         	movff	_Y_Volt+2,i2___ftge@ff1+2
 37743  01522C  0E00               	movlw	0
 37744  01522E  6E28               	movwf	i2___ftge@ff2,c
 37745  015230  0EE1               	movlw	225
 37746  015232  6E29               	movwf	i2___ftge@ff2+1,c
 37747  015234  0E43               	movlw	67
 37748  015236  6E2A               	movwf	i2___ftge@ff2+2,c
 37749  015238  ECCC  F0D1         	call	i2___ftge	;wreg free
 37750  01523C  B0D8               	btfsc	status,0,c
 37751  01523E  D080               	goto	i2l9270
 37752  015240  C001  F025         	movff	_B_Volt,i2___ftge@ff1
 37753  015244  C002  F026         	movff	_B_Volt+1,i2___ftge@ff1+1
 37754  015248  C003  F027         	movff	_B_Volt+2,i2___ftge@ff1+2
 37755  01524C  0E00               	movlw	0
 37756  01524E  6E28               	movwf	i2___ftge@ff2,c
 37757  015250  0EE1               	movlw	225
 37758  015252  6E29               	movwf	i2___ftge@ff2+1,c
 37759  015254  0E43               	movlw	67
 37760  015256  6E2A               	movwf	i2___ftge@ff2+2,c
 37761  015258  ECCC  F0D1         	call	i2___ftge	;wreg free
 37762  01525C  B0D8               	btfsc	status,0,c
 37763  01525E  D070               	goto	i2l9270
 37764  015260  C0CD  F025         	movff	_R_Curr,i2___ftge@ff1
 37765  015264  C0CE  F026         	movff	_R_Curr+1,i2___ftge@ff1+1
 37766  015268  C0CF  F027         	movff	_R_Curr+2,i2___ftge@ff1+2
 37767  01526C  0E00               	movlw	0
 37768  01526E  6E28               	movwf	i2___ftge@ff2,c
 37769  015270  0E40               	movlw	64
 37770  015272  6E29               	movwf	i2___ftge@ff2+1,c
 37771  015274  0E41               	movlw	65
 37772  015276  6E2A               	movwf	i2___ftge@ff2+2,c
 37773  015278  ECCC  F0D1         	call	i2___ftge	;wreg free
 37774  01527C  B0D8               	btfsc	status,0,c
 37775  01527E  D060               	goto	i2l9270
 37776  015280  C0D6  F025         	movff	_Y_Curr,i2___ftge@ff1
 37777  015284  C0D7  F026         	movff	_Y_Curr+1,i2___ftge@ff1+1
 37778  015288  C0D8  F027         	movff	_Y_Curr+2,i2___ftge@ff1+2
 37779  01528C  0E00               	movlw	0
 37780  01528E  6E28               	movwf	i2___ftge@ff2,c
 37781  015290  0E40               	movlw	64
 37782  015292  6E29               	movwf	i2___ftge@ff2+1,c
 37783  015294  0E41               	movlw	65
 37784  015296  6E2A               	movwf	i2___ftge@ff2+2,c
 37785  015298  ECCC  F0D1         	call	i2___ftge	;wreg free
 37786  01529C  B0D8               	btfsc	status,0,c
 37787  01529E  D050               	goto	i2l9270
 37788  0152A0  C0C4  F025         	movff	_B_Curr,i2___ftge@ff1
 37789  0152A4  C0C5  F026         	movff	_B_Curr+1,i2___ftge@ff1+1
 37790  0152A8  C0C6  F027         	movff	_B_Curr+2,i2___ftge@ff1+2
 37791  0152AC  0E00               	movlw	0
 37792  0152AE  6E28               	movwf	i2___ftge@ff2,c
 37793  0152B0  0E40               	movlw	64
 37794  0152B2  6E29               	movwf	i2___ftge@ff2+1,c
 37795  0152B4  0E41               	movlw	65
 37796  0152B6  6E2A               	movwf	i2___ftge@ff2+2,c
 37797  0152B8  ECCC  F0D1         	call	i2___ftge	;wreg free
 37798  0152BC  B0D8               	btfsc	status,0,c
 37799  0152BE  D040               	goto	i2l9270
 37800  0152C0  0E00               	movlw	0
 37801  0152C2  6E25               	movwf	i2___ftge@ff1,c
 37802  0152C4  0E3E               	movlw	62
 37803  0152C6  6E26               	movwf	i2___ftge@ff1+1,c
 37804  0152C8  0E42               	movlw	66
 37805  0152CA  6E27               	movwf	i2___ftge@ff1+2,c
 37806  0152CC  C0C7  F028         	movff	_Frequency,i2___ftge@ff2
 37807  0152D0  C0C8  F029         	movff	_Frequency+1,i2___ftge@ff2+1
 37808  0152D4  C0C9  F02A         	movff	_Frequency+2,i2___ftge@ff2+2
 37809  0152D8  ECCC  F0D1         	call	i2___ftge	;wreg free
 37810  0152DC  B0D8               	btfsc	status,0,c
 37811  0152DE  D030               	goto	i2l9270
 37812  0152E0  C0C7  F025         	movff	_Frequency,i2___ftge@ff1
 37813  0152E4  C0C8  F026         	movff	_Frequency+1,i2___ftge@ff1+1
 37814  0152E8  C0C9  F027         	movff	_Frequency+2,i2___ftge@ff1+2
 37815  0152EC  0E00               	movlw	0
 37816  0152EE  6E28               	movwf	i2___ftge@ff2,c
 37817  0152F0  0E52               	movlw	82
 37818  0152F2  6E29               	movwf	i2___ftge@ff2+1,c
 37819  0152F4  0E42               	movlw	66
 37820  0152F6  6E2A               	movwf	i2___ftge@ff2+2,c
 37821  0152F8  ECCC  F0D1         	call	i2___ftge	;wreg free
 37822  0152FC  B0D8               	btfsc	status,0,c
 37823  0152FE  D020               	goto	i2l9270
 37824  015300  0E00               	movlw	0
 37825  015302  6E25               	movwf	i2___ftge@ff1,c
 37826  015304  0EA0               	movlw	160
 37827  015306  6E26               	movwf	i2___ftge@ff1+1,c
 37828  015308  0EC0               	movlw	192
 37829  01530A  6E27               	movwf	i2___ftge@ff1+2,c
 37830  01530C  C022  F028         	movff	_KW,i2___ftge@ff2
 37831  015310  C023  F029         	movff	_KW+1,i2___ftge@ff2+1
 37832  015314  C024  F02A         	movff	_KW+2,i2___ftge@ff2+2
 37833  015318  ECCC  F0D1         	call	i2___ftge	;wreg free
 37834  01531C  B0D8               	btfsc	status,0,c
 37835  01531E  D010               	goto	i2l9270
 37836  015320  C022  F025         	movff	_KW,i2___ftge@ff1
 37837  015324  C023  F026         	movff	_KW+1,i2___ftge@ff1+1
 37838  015328  C024  F027         	movff	_KW+2,i2___ftge@ff1+2
 37839  01532C  0E00               	movlw	0
 37840  01532E  6E28               	movwf	i2___ftge@ff2,c
 37841  015330  0EC0               	movlw	192
 37842  015332  6E29               	movwf	i2___ftge@ff2+1,c
 37843  015334  0E40               	movlw	64
 37844  015336  6E2A               	movwf	i2___ftge@ff2+2,c
 37845  015338  ECCC  F0D1         	call	i2___ftge	;wreg free
 37846  01533C  A0D8               	btfss	status,0,c
 37847  01533E  D002               	goto	i2l18987
 37848  015340                     i2l9270:
 37849                           
 37850                           ;Power_Meter.c: 644: {
 37851                           ;Power_Meter.c: 645: (RF7 = 1);
 37852  015340  8E85               	bsf	3973,7,c	;volatile
 37853                           
 37854                           ;Power_Meter.c: 646: }
 37855  015342  0012               	return	
 37856  015344                     i2l18987:
 37857                           
 37858                           ;Power_Meter.c: 647: else if ((Phase_Sequence_Ok == 1) && (R_Volt >= (370)) && (Y_Volt >
      +                          = (370)) &&
 37859                           ;Power_Meter.c: 648: (B_Volt >= (370)) && (R_Volt <= (450)) && (Y_Volt <= (450)) &&
 37860                           ;Power_Meter.c: 649: (B_Volt <= (450)) && (R_Curr <= (12)) && (Y_Curr <= (12)) &&
 37861                           ;Power_Meter.c: 650: (B_Curr <= (12)) && (Frequency >= 47.5) && (Frequency <=52.5) && (K
      +                          W >= (-5.0)) &&
 37862                           ;Power_Meter.c: 651: (KW <= (6.0) ))
 37863  015344  041E               	decf	_Phase_Sequence_Ok,w,c
 37864  015346  A4D8               	btfss	status,2,c
 37865  015348  0012               	return	
 37866  01534A  C007  F025         	movff	_R_Volt,i2___ftge@ff1
 37867  01534E  C008  F026         	movff	_R_Volt+1,i2___ftge@ff1+1
 37868  015352  C009  F027         	movff	_R_Volt+2,i2___ftge@ff1+2
 37869  015356  0E00               	movlw	0
 37870  015358  6E28               	movwf	i2___ftge@ff2,c
 37871  01535A  0EB9               	movlw	185
 37872  01535C  6E29               	movwf	i2___ftge@ff2+1,c
 37873  01535E  0E43               	movlw	67
 37874  015360  6E2A               	movwf	i2___ftge@ff2+2,c
 37875  015362  ECCC  F0D1         	call	i2___ftge	;wreg free
 37876  015366  A0D8               	btfss	status,0,c
 37877  015368  0012               	return	
 37878  01536A  C010  F025         	movff	_Y_Volt,i2___ftge@ff1
 37879  01536E  C011  F026         	movff	_Y_Volt+1,i2___ftge@ff1+1
 37880  015372  C012  F027         	movff	_Y_Volt+2,i2___ftge@ff1+2
 37881  015376  0E00               	movlw	0
 37882  015378  6E28               	movwf	i2___ftge@ff2,c
 37883  01537A  0EB9               	movlw	185
 37884  01537C  6E29               	movwf	i2___ftge@ff2+1,c
 37885  01537E  0E43               	movlw	67
 37886  015380  6E2A               	movwf	i2___ftge@ff2+2,c
 37887  015382  ECCC  F0D1         	call	i2___ftge	;wreg free
 37888  015386  A0D8               	btfss	status,0,c
 37889  015388  0012               	return	
 37890  01538A  C001  F025         	movff	_B_Volt,i2___ftge@ff1
 37891  01538E  C002  F026         	movff	_B_Volt+1,i2___ftge@ff1+1
 37892  015392  C003  F027         	movff	_B_Volt+2,i2___ftge@ff1+2
 37893  015396  0E00               	movlw	0
 37894  015398  6E28               	movwf	i2___ftge@ff2,c
 37895  01539A  0EB9               	movlw	185
 37896  01539C  6E29               	movwf	i2___ftge@ff2+1,c
 37897  01539E  0E43               	movlw	67
 37898  0153A0  6E2A               	movwf	i2___ftge@ff2+2,c
 37899  0153A2  ECCC  F0D1         	call	i2___ftge	;wreg free
 37900  0153A6  A0D8               	btfss	status,0,c
 37901  0153A8  0012               	return	
 37902  0153AA  0E00               	movlw	0
 37903  0153AC  6E25               	movwf	i2___ftge@ff1,c
 37904  0153AE  0EE1               	movlw	225
 37905  0153B0  6E26               	movwf	i2___ftge@ff1+1,c
 37906  0153B2  0E43               	movlw	67
 37907  0153B4  6E27               	movwf	i2___ftge@ff1+2,c
 37908  0153B6  C007  F028         	movff	_R_Volt,i2___ftge@ff2
 37909  0153BA  C008  F029         	movff	_R_Volt+1,i2___ftge@ff2+1
 37910  0153BE  C009  F02A         	movff	_R_Volt+2,i2___ftge@ff2+2
 37911  0153C2  ECCC  F0D1         	call	i2___ftge	;wreg free
 37912  0153C6  A0D8               	btfss	status,0,c
 37913  0153C8  0012               	return	
 37914  0153CA  0E00               	movlw	0
 37915  0153CC  6E25               	movwf	i2___ftge@ff1,c
 37916  0153CE  0EE1               	movlw	225
 37917  0153D0  6E26               	movwf	i2___ftge@ff1+1,c
 37918  0153D2  0E43               	movlw	67
 37919  0153D4  6E27               	movwf	i2___ftge@ff1+2,c
 37920  0153D6  C010  F028         	movff	_Y_Volt,i2___ftge@ff2
 37921  0153DA  C011  F029         	movff	_Y_Volt+1,i2___ftge@ff2+1
 37922  0153DE  C012  F02A         	movff	_Y_Volt+2,i2___ftge@ff2+2
 37923  0153E2  ECCC  F0D1         	call	i2___ftge	;wreg free
 37924  0153E6  A0D8               	btfss	status,0,c
 37925  0153E8  0012               	return	
 37926  0153EA  0E00               	movlw	0
 37927  0153EC  6E25               	movwf	i2___ftge@ff1,c
 37928  0153EE  0EE1               	movlw	225
 37929  0153F0  6E26               	movwf	i2___ftge@ff1+1,c
 37930  0153F2  0E43               	movlw	67
 37931  0153F4  6E27               	movwf	i2___ftge@ff1+2,c
 37932  0153F6  C001  F028         	movff	_B_Volt,i2___ftge@ff2
 37933  0153FA  C002  F029         	movff	_B_Volt+1,i2___ftge@ff2+1
 37934  0153FE  C003  F02A         	movff	_B_Volt+2,i2___ftge@ff2+2
 37935  015402  ECCC  F0D1         	call	i2___ftge	;wreg free
 37936  015406  A0D8               	btfss	status,0,c
 37937  015408  0012               	return	
 37938  01540A  0E00               	movlw	0
 37939  01540C  6E25               	movwf	i2___ftge@ff1,c
 37940  01540E  0E40               	movlw	64
 37941  015410  6E26               	movwf	i2___ftge@ff1+1,c
 37942  015412  0E41               	movlw	65
 37943  015414  6E27               	movwf	i2___ftge@ff1+2,c
 37944  015416  C0CD  F028         	movff	_R_Curr,i2___ftge@ff2
 37945  01541A  C0CE  F029         	movff	_R_Curr+1,i2___ftge@ff2+1
 37946  01541E  C0CF  F02A         	movff	_R_Curr+2,i2___ftge@ff2+2
 37947  015422  ECCC  F0D1         	call	i2___ftge	;wreg free
 37948  015426  A0D8               	btfss	status,0,c
 37949  015428  0012               	return	
 37950  01542A  0E00               	movlw	0
 37951  01542C  6E25               	movwf	i2___ftge@ff1,c
 37952  01542E  0E40               	movlw	64
 37953  015430  6E26               	movwf	i2___ftge@ff1+1,c
 37954  015432  0E41               	movlw	65
 37955  015434  6E27               	movwf	i2___ftge@ff1+2,c
 37956  015436  C0D6  F028         	movff	_Y_Curr,i2___ftge@ff2
 37957  01543A  C0D7  F029         	movff	_Y_Curr+1,i2___ftge@ff2+1
 37958  01543E  C0D8  F02A         	movff	_Y_Curr+2,i2___ftge@ff2+2
 37959  015442  ECCC  F0D1         	call	i2___ftge	;wreg free
 37960  015446  A0D8               	btfss	status,0,c
 37961  015448  0012               	return	
 37962  01544A  0E00               	movlw	0
 37963  01544C  6E25               	movwf	i2___ftge@ff1,c
 37964  01544E  0E40               	movlw	64
 37965  015450  6E26               	movwf	i2___ftge@ff1+1,c
 37966  015452  0E41               	movlw	65
 37967  015454  6E27               	movwf	i2___ftge@ff1+2,c
 37968  015456  C0C4  F028         	movff	_B_Curr,i2___ftge@ff2
 37969  01545A  C0C5  F029         	movff	_B_Curr+1,i2___ftge@ff2+1
 37970  01545E  C0C6  F02A         	movff	_B_Curr+2,i2___ftge@ff2+2
 37971  015462  ECCC  F0D1         	call	i2___ftge	;wreg free
 37972  015466  A0D8               	btfss	status,0,c
 37973  015468  0012               	return	
 37974  01546A  C0C7  F025         	movff	_Frequency,i2___ftge@ff1
 37975  01546E  C0C8  F026         	movff	_Frequency+1,i2___ftge@ff1+1
 37976  015472  C0C9  F027         	movff	_Frequency+2,i2___ftge@ff1+2
 37977  015476  0E00               	movlw	0
 37978  015478  6E28               	movwf	i2___ftge@ff2,c
 37979  01547A  0E3E               	movlw	62
 37980  01547C  6E29               	movwf	i2___ftge@ff2+1,c
 37981  01547E  0E42               	movlw	66
 37982  015480  6E2A               	movwf	i2___ftge@ff2+2,c
 37983  015482  ECCC  F0D1         	call	i2___ftge	;wreg free
 37984  015486  A0D8               	btfss	status,0,c
 37985  015488  0012               	return	
 37986  01548A  0E00               	movlw	0
 37987  01548C  6E25               	movwf	i2___ftge@ff1,c
 37988  01548E  0E52               	movlw	82
 37989  015490  6E26               	movwf	i2___ftge@ff1+1,c
 37990  015492  0E42               	movlw	66
 37991  015494  6E27               	movwf	i2___ftge@ff1+2,c
 37992  015496  C0C7  F028         	movff	_Frequency,i2___ftge@ff2
 37993  01549A  C0C8  F029         	movff	_Frequency+1,i2___ftge@ff2+1
 37994  01549E  C0C9  F02A         	movff	_Frequency+2,i2___ftge@ff2+2
 37995  0154A2  ECCC  F0D1         	call	i2___ftge	;wreg free
 37996  0154A6  A0D8               	btfss	status,0,c
 37997  0154A8  0012               	return	
 37998  0154AA  C022  F025         	movff	_KW,i2___ftge@ff1
 37999  0154AE  C023  F026         	movff	_KW+1,i2___ftge@ff1+1
 38000  0154B2  C024  F027         	movff	_KW+2,i2___ftge@ff1+2
 38001  0154B6  0E00               	movlw	0
 38002  0154B8  6E28               	movwf	i2___ftge@ff2,c
 38003  0154BA  0EA0               	movlw	160
 38004  0154BC  6E29               	movwf	i2___ftge@ff2+1,c
 38005  0154BE  0EC0               	movlw	192
 38006  0154C0  6E2A               	movwf	i2___ftge@ff2+2,c
 38007  0154C2  ECCC  F0D1         	call	i2___ftge	;wreg free
 38008  0154C6  A0D8               	btfss	status,0,c
 38009  0154C8  0012               	return	
 38010  0154CA  0E00               	movlw	0
 38011  0154CC  6E25               	movwf	i2___ftge@ff1,c
 38012  0154CE  0EC0               	movlw	192
 38013  0154D0  6E26               	movwf	i2___ftge@ff1+1,c
 38014  0154D2  0E40               	movlw	64
 38015  0154D4  6E27               	movwf	i2___ftge@ff1+2,c
 38016  0154D6  C022  F028         	movff	_KW,i2___ftge@ff2
 38017  0154DA  C023  F029         	movff	_KW+1,i2___ftge@ff2+1
 38018  0154DE  C024  F02A         	movff	_KW+2,i2___ftge@ff2+2
 38019  0154E2  ECCC  F0D1         	call	i2___ftge	;wreg free
 38020  0154E6  A0D8               	btfss	status,0,c
 38021  0154E8  0012               	return	
 38022                           
 38023                           ;Power_Meter.c: 652: {
 38024                           ;Power_Meter.c: 653: (RF7 = 0);
 38025  0154EA  9E85               	bcf	3973,7,c	;volatile
 38026  0154EC  0012               	return	
 38027  0154EE                     __end_of_PM_Error_Led:
 38028                           	opt stack 0
 38029                           pclatu	equ	0xFFB
 38030                           pclath	equ	0xFFA
 38031                           tblptru	equ	0xFF8
 38032                           tblptrh	equ	0xFF7
 38033                           tblptrl	equ	0xFF6
 38034                           tablat	equ	0xFF5
 38035                           prodh	equ	0xFF4
 38036                           prodl	equ	0xFF3
 38037                           intcon	equ	0xFF2
 38038                           postinc0	equ	0xFEE
 38039                           fsr0h	equ	0xFEA
 38040                           fsr0l	equ	0xFE9
 38041                           wreg	equ	0xFE8
 38042                           postdec1	equ	0xFE5
 38043                           fsr1h	equ	0xFE2
 38044                           fsr1l	equ	0xFE1
 38045                           indf2	equ	0xFDF
 38046                           postinc2	equ	0xFDE
 38047                           postdec2	equ	0xFDD
 38048                           fsr2h	equ	0xFDA
 38049                           fsr2l	equ	0xFD9
 38050                           status	equ	0xFD8
 38051                           
 38052 ;; *************** function i2___ftge *****************
 38053 ;; Defined at:
 38054 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 38055 ;; Parameters:    Size  Location     Type
 38056 ;;  ff1             3    0[COMRAM] float 
 38057 ;;  ff2             3    3[COMRAM] float 
 38058 ;; Auto vars:     Size  Location     Type
 38059 ;;		None
 38060 ;; Return value:  Size  Location     Type
 38061 ;;		None               void
 38062 ;; Registers used:
 38063 ;;		wreg, status,2, status,0
 38064 ;; Tracked objects:
 38065 ;;		On entry : 0/0
 38066 ;;		On exit  : 0/0
 38067 ;;		Unchanged: 0/0
 38068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38069 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38071 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38072 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38073 ;;Total ram usage:        9 bytes
 38074 ;; Hardware stack levels used:    1
 38075 ;; This function calls:
 38076 ;;		Nothing
 38077 ;; This function is called by:
 38078 ;;		_PM_Error_Led
 38079 ;; This function uses a non-reentrant model
 38080 ;;
 38081                           
 38082                           	psect	text144
 38083  01A398                     __ptext144:
 38084                           	opt stack 0
 38085  01A398                     i2___ftge:
 38086                           	opt stack 21
 38087                           
 38088                           ;incstack = 0
 38089  01A398  AE27               	btfss	i2___ftge@ff1+2,7,c
 38090  01A39A  D016               	goto	i2l18119
 38091  01A39C  C025  F02B         	movff	i2___ftge@ff1,??i2___ftge
 38092  01A3A0  C026  F02C         	movff	i2___ftge@ff1+1,??i2___ftge+1
 38093  01A3A4  C027  F02D         	movff	i2___ftge@ff1+2,??i2___ftge+2
 38094  01A3A8  1E2B               	comf	??i2___ftge,f,c
 38095  01A3AA  1E2C               	comf	??i2___ftge+1,f,c
 38096  01A3AC  1E2D               	comf	??i2___ftge+2,f,c
 38097  01A3AE  2A2B               	incf	??i2___ftge,f,c
 38098  01A3B0  0E00               	movlw	0
 38099  01A3B2  222C               	addwfc	??i2___ftge+1,f,c
 38100  01A3B4  222D               	addwfc	??i2___ftge+2,f,c
 38101  01A3B6  0E00               	movlw	0
 38102  01A3B8  242B               	addwf	??i2___ftge,w,c
 38103  01A3BA  6E25               	movwf	i2___ftge@ff1,c
 38104  01A3BC  0E00               	movlw	0
 38105  01A3BE  202C               	addwfc	??i2___ftge+1,w,c
 38106  01A3C0  6E26               	movwf	i2___ftge@ff1+1,c
 38107  01A3C2  0E80               	movlw	128
 38108  01A3C4  202D               	addwfc	??i2___ftge+2,w,c
 38109  01A3C6  6E27               	movwf	i2___ftge@ff1+2,c
 38110  01A3C8                     i2l18119:
 38111  01A3C8  AE2A               	btfss	i2___ftge@ff2+2,7,c
 38112  01A3CA  D016               	goto	i2l18123
 38113  01A3CC  C028  F02B         	movff	i2___ftge@ff2,??i2___ftge
 38114  01A3D0  C029  F02C         	movff	i2___ftge@ff2+1,??i2___ftge+1
 38115  01A3D4  C02A  F02D         	movff	i2___ftge@ff2+2,??i2___ftge+2
 38116  01A3D8  1E2B               	comf	??i2___ftge,f,c
 38117  01A3DA  1E2C               	comf	??i2___ftge+1,f,c
 38118  01A3DC  1E2D               	comf	??i2___ftge+2,f,c
 38119  01A3DE  2A2B               	incf	??i2___ftge,f,c
 38120  01A3E0  0E00               	movlw	0
 38121  01A3E2  222C               	addwfc	??i2___ftge+1,f,c
 38122  01A3E4  222D               	addwfc	??i2___ftge+2,f,c
 38123  01A3E6  0E00               	movlw	0
 38124  01A3E8  242B               	addwf	??i2___ftge,w,c
 38125  01A3EA  6E28               	movwf	i2___ftge@ff2,c
 38126  01A3EC  0E00               	movlw	0
 38127  01A3EE  202C               	addwfc	??i2___ftge+1,w,c
 38128  01A3F0  6E29               	movwf	i2___ftge@ff2+1,c
 38129  01A3F2  0E80               	movlw	128
 38130  01A3F4  202D               	addwfc	??i2___ftge+2,w,c
 38131  01A3F6  6E2A               	movwf	i2___ftge@ff2+2,c
 38132  01A3F8                     i2l18123:
 38133  01A3F8  0E00               	movlw	0
 38134  01A3FA  1A25               	xorwf	i2___ftge@ff1,f,c
 38135  01A3FC  0E00               	movlw	0
 38136  01A3FE  1A26               	xorwf	i2___ftge@ff1+1,f,c
 38137  01A400  0E80               	movlw	128
 38138  01A402  1A27               	xorwf	i2___ftge@ff1+2,f,c
 38139  01A404  0E00               	movlw	0
 38140  01A406  1A28               	xorwf	i2___ftge@ff2,f,c
 38141  01A408  0E00               	movlw	0
 38142  01A40A  1A29               	xorwf	i2___ftge@ff2+1,f,c
 38143  01A40C  0E80               	movlw	128
 38144  01A40E  1A2A               	xorwf	i2___ftge@ff2+2,f,c
 38145  01A410  5028               	movf	i2___ftge@ff2,w,c
 38146  01A412  5C25               	subwf	i2___ftge@ff1,w,c
 38147  01A414  5029               	movf	i2___ftge@ff2+1,w,c
 38148  01A416  5826               	subwfb	i2___ftge@ff1+1,w,c
 38149  01A418  502A               	movf	i2___ftge@ff2+2,w,c
 38150  01A41A  5827               	subwfb	i2___ftge@ff1+2,w,c
 38151  01A41C  B0D8               	btfsc	status,0,c
 38152  01A41E  D002               	goto	i2l18129
 38153  01A420  90D8               	bcf	status,0,c
 38154  01A422  0012               	return	
 38155  01A424                     i2l18129:
 38156  01A424  80D8               	bsf	status,0,c
 38157  01A426  0012               	return	
 38158  01A428                     __end_ofi2___ftge:
 38159                           	opt stack 0
 38160                           pclatu	equ	0xFFB
 38161                           pclath	equ	0xFFA
 38162                           tblptru	equ	0xFF8
 38163                           tblptrh	equ	0xFF7
 38164                           tblptrl	equ	0xFF6
 38165                           tablat	equ	0xFF5
 38166                           prodh	equ	0xFF4
 38167                           prodl	equ	0xFF3
 38168                           intcon	equ	0xFF2
 38169                           postinc0	equ	0xFEE
 38170                           fsr0h	equ	0xFEA
 38171                           fsr0l	equ	0xFE9
 38172                           wreg	equ	0xFE8
 38173                           postdec1	equ	0xFE5
 38174                           fsr1h	equ	0xFE2
 38175                           fsr1l	equ	0xFE1
 38176                           indf2	equ	0xFDF
 38177                           postinc2	equ	0xFDE
 38178                           postdec2	equ	0xFDD
 38179                           fsr2h	equ	0xFDA
 38180                           fsr2l	equ	0xFD9
 38181                           status	equ	0xFD8
 38182                           
 38183 ;; *************** function _Error_Checking_Interrupt_Overflow *****************
 38184 ;; Defined at:
 38185 ;;		line 73 in file "ERROR_HANDLING.c"
 38186 ;; Parameters:    Size  Location     Type
 38187 ;;		None
 38188 ;; Auto vars:     Size  Location     Type
 38189 ;;		None
 38190 ;; Return value:  Size  Location     Type
 38191 ;;                  2  3812[None  ] int 
 38192 ;; Registers used:
 38193 ;;		wreg, status,2, status,0, cstack
 38194 ;; Tracked objects:
 38195 ;;		On entry : 0/0
 38196 ;;		On exit  : 0/0
 38197 ;;		Unchanged: 0/0
 38198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38203 ;;Total ram usage:        0 bytes
 38204 ;; Hardware stack levels used:    1
 38205 ;; Hardware stack levels required when called:    1
 38206 ;; This function calls:
 38207 ;;		_Capacitor_Adding
 38208 ;;		_VFD_IO_Error
 38209 ;; This function is called by:
 38210 ;;		_ISR
 38211 ;; This function uses a non-reentrant model
 38212 ;;
 38213                           
 38214                           	psect	text145
 38215  01B0CC                     __ptext145:
 38216                           	opt stack 0
 38217  01B0CC                     _Error_Checking_Interrupt_Overflow:
 38218                           	opt stack 21
 38219                           
 38220                           ;ERROR_HANDLING.c: 75: Capacitor_Adding();
 38221                           
 38222                           ;incstack = 0
 38223  01B0CC  ECD5  F0D2         	call	_Capacitor_Adding	;wreg free
 38224                           
 38225                           ;ERROR_HANDLING.c: 76: VFD_IO_Error();
 38226  01B0D0  ECD2  F0D7         	call	_VFD_IO_Error	;wreg free
 38227  01B0D4  0012               	return		;funcret
 38228  01B0D6                     __end_of_Error_Checking_Interrupt_Overflow:
 38229                           	opt stack 0
 38230                           pclatu	equ	0xFFB
 38231                           pclath	equ	0xFFA
 38232                           tblptru	equ	0xFF8
 38233                           tblptrh	equ	0xFF7
 38234                           tblptrl	equ	0xFF6
 38235                           tablat	equ	0xFF5
 38236                           prodh	equ	0xFF4
 38237                           prodl	equ	0xFF3
 38238                           intcon	equ	0xFF2
 38239                           postinc0	equ	0xFEE
 38240                           fsr0h	equ	0xFEA
 38241                           fsr0l	equ	0xFE9
 38242                           wreg	equ	0xFE8
 38243                           postdec1	equ	0xFE5
 38244                           fsr1h	equ	0xFE2
 38245                           fsr1l	equ	0xFE1
 38246                           indf2	equ	0xFDF
 38247                           postinc2	equ	0xFDE
 38248                           postdec2	equ	0xFDD
 38249                           fsr2h	equ	0xFDA
 38250                           fsr2l	equ	0xFD9
 38251                           status	equ	0xFD8
 38252                           
 38253 ;; *************** function _VFD_IO_Error *****************
 38254 ;; Defined at:
 38255 ;;		line 667 in file "ERROR_HANDLING.c"
 38256 ;; Parameters:    Size  Location     Type
 38257 ;;		None
 38258 ;; Auto vars:     Size  Location     Type
 38259 ;;		None
 38260 ;; Return value:  Size  Location     Type
 38261 ;;                  1    wreg      void 
 38262 ;; Registers used:
 38263 ;;		wreg, status,2
 38264 ;; Tracked objects:
 38265 ;;		On entry : 0/0
 38266 ;;		On exit  : 0/0
 38267 ;;		Unchanged: 0/0
 38268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38273 ;;Total ram usage:        0 bytes
 38274 ;; Hardware stack levels used:    1
 38275 ;; This function calls:
 38276 ;;		Nothing
 38277 ;; This function is called by:
 38278 ;;		_Error_Checking_Interrupt_Overflow
 38279 ;; This function uses a non-reentrant model
 38280 ;;
 38281                           
 38282                           	psect	text146
 38283  01AFA4                     __ptext146:
 38284                           	opt stack 0
 38285  01AFA4                     _VFD_IO_Error:
 38286                           	opt stack 21
 38287                           
 38288                           ;ERROR_HANDLING.c: 669: if(RC5 == 1)
 38289                           
 38290                           ;incstack = 0
 38291  01AFA4  AA82               	btfss	3970,5,c	;volatile
 38292  01AFA6  D006               	goto	i2l18017
 38293                           
 38294                           ;ERROR_HANDLING.c: 670: {
 38295                           ;ERROR_HANDLING.c: 671: VFD_Error_Flag = 1;
 38296  01AFA8  0E01               	movlw	1
 38297  01AFAA  0101               	movlb	1	; () banked
 38298  01AFAC  6F93               	movwf	_VFD_Error_Flag& (0+255),b
 38299                           
 38300                           ;ERROR_HANDLING.c: 672: Errors = VFD_ERROR_IO;
 38301  01AFAE  0E19               	movlw	25
 38302  01AFB0  6E1B               	movwf	_Errors,c
 38303                           
 38304                           ;ERROR_HANDLING.c: 673: }
 38305  01AFB2  0012               	return	
 38306  01AFB4                     i2l18017:
 38307                           
 38308                           ;ERROR_HANDLING.c: 674: else
 38309                           ;ERROR_HANDLING.c: 675: {
 38310                           ;ERROR_HANDLING.c: 676: VFD_Error_Flag = 0;
 38311  01AFB4  0E00               	movlw	0
 38312  01AFB6  0101               	movlb	1	; () banked
 38313  01AFB8  6F93               	movwf	_VFD_Error_Flag& (0+255),b
 38314  01AFBA  0012               	return	
 38315  01AFBC                     __end_of_VFD_IO_Error:
 38316                           	opt stack 0
 38317                           pclatu	equ	0xFFB
 38318                           pclath	equ	0xFFA
 38319                           tblptru	equ	0xFF8
 38320                           tblptrh	equ	0xFF7
 38321                           tblptrl	equ	0xFF6
 38322                           tablat	equ	0xFF5
 38323                           prodh	equ	0xFF4
 38324                           prodl	equ	0xFF3
 38325                           intcon	equ	0xFF2
 38326                           postinc0	equ	0xFEE
 38327                           fsr0h	equ	0xFEA
 38328                           fsr0l	equ	0xFE9
 38329                           wreg	equ	0xFE8
 38330                           postdec1	equ	0xFE5
 38331                           fsr1h	equ	0xFE2
 38332                           fsr1l	equ	0xFE1
 38333                           indf2	equ	0xFDF
 38334                           postinc2	equ	0xFDE
 38335                           postdec2	equ	0xFDD
 38336                           fsr2h	equ	0xFDA
 38337                           fsr2l	equ	0xFD9
 38338                           status	equ	0xFD8
 38339                           
 38340 ;; *************** function _Capacitor_Adding *****************
 38341 ;; Defined at:
 38342 ;;		line 656 in file "Power_Meter.c"
 38343 ;; Parameters:    Size  Location     Type
 38344 ;;		None
 38345 ;; Auto vars:     Size  Location     Type
 38346 ;;		None
 38347 ;; Return value:  Size  Location     Type
 38348 ;;                  1    wreg      void 
 38349 ;; Registers used:
 38350 ;;		wreg, status,2, status,0
 38351 ;; Tracked objects:
 38352 ;;		On entry : 0/0
 38353 ;;		On exit  : 0/0
 38354 ;;		Unchanged: 0/0
 38355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38360 ;;Total ram usage:        0 bytes
 38361 ;; Hardware stack levels used:    1
 38362 ;; This function calls:
 38363 ;;		Nothing
 38364 ;; This function is called by:
 38365 ;;		_Error_Checking_Interrupt_Overflow
 38366 ;; This function uses a non-reentrant model
 38367 ;;
 38368                           
 38369                           	psect	text147
 38370  01A5AA                     __ptext147:
 38371                           	opt stack 0
 38372  01A5AA                     _Capacitor_Adding:
 38373                           	opt stack 21
 38374                           
 38375                           ;Power_Meter.c: 658: if(Capacitor_Counter < 40 && Turbine_state == RUNNING_STATE)
 38376                           
 38377                           ; BSR set to: 1
 38378                           ;incstack = 0
 38379  01A5AA  0101               	movlb	1	; () banked
 38380  01A5AC  5121               	movf	(_Capacitor_Counter+1)& (0+255),w,b
 38381  01A5AE  E10D               	bnz	i2l17993
 38382  01A5B0  0E28               	movlw	40
 38383  01A5B2  0101               	movlb	1	; () banked
 38384  01A5B4  5D20               	subwf	_Capacitor_Counter& (0+255),w,b
 38385  01A5B6  B0D8               	btfsc	status,0,c
 38386  01A5B8  D008               	goto	i2l17993
 38387                           
 38388                           ; BSR set to: 1
 38389  01A5BA  0E02               	movlw	2
 38390  01A5BC  0100               	movlb	0	; () banked
 38391  01A5BE  19F0               	xorwf	_Turbine_state& (0+255),w,b
 38392  01A5C0  A4D8               	btfss	status,2,c
 38393  01A5C2  D003               	goto	i2l17993
 38394                           
 38395                           ; BSR set to: 0
 38396                           ;Power_Meter.c: 659: {
 38397                           ;Power_Meter.c: 660: Capacitor_Counter++;
 38398  01A5C4  0101               	movlb	1	; () banked
 38399  01A5C6  4B20               	infsnz	_Capacitor_Counter& (0+255),f,b
 38400  01A5C8  2B21               	incf	(_Capacitor_Counter+1)& (0+255),f,b
 38401  01A5CA                     i2l17993:
 38402                           
 38403                           ;Power_Meter.c: 661: }
 38404                           ;Power_Meter.c: 662: if(Turbine_state != RUNNING_STATE )
 38405  01A5CA  0E02               	movlw	2
 38406  01A5CC  0100               	movlb	0	; () banked
 38407  01A5CE  19F0               	xorwf	_Turbine_state& (0+255),w,b
 38408  01A5D0  B4D8               	btfsc	status,2,c
 38409  01A5D2  D006               	goto	i2l17999
 38410                           
 38411                           ; BSR set to: 0
 38412                           ;Power_Meter.c: 663: {
 38413                           ;Power_Meter.c: 664: (RF1 = 0);
 38414  01A5D4  9285               	bcf	3973,1,c	;volatile
 38415                           
 38416                           ; BSR set to: 0
 38417                           ;Power_Meter.c: 665: Capacitor_Counter = 0;
 38418  01A5D6  0E00               	movlw	0
 38419  01A5D8  0101               	movlb	1	; () banked
 38420  01A5DA  6F21               	movwf	(_Capacitor_Counter+1)& (0+255),b
 38421  01A5DC  0E00               	movlw	0
 38422  01A5DE  6F20               	movwf	_Capacitor_Counter& (0+255),b
 38423  01A5E0                     i2l17999:
 38424                           
 38425                           ;Power_Meter.c: 666: }
 38426                           ;Power_Meter.c: 667: if(Capacitor_Counter == 40 && Turbine_state == RUNNING_STATE)
 38427  01A5E0  0E28               	movlw	40
 38428  01A5E2  0101               	movlb	1	; () banked
 38429  01A5E4  1920               	xorwf	_Capacitor_Counter& (0+255),w,b
 38430  01A5E6  0101               	movlb	1	; () banked
 38431  01A5E8  1121               	iorwf	(_Capacitor_Counter+1)& (0+255),w,b
 38432  01A5EA  A4D8               	btfss	status,2,c
 38433  01A5EC  D00A               	goto	i2l18007
 38434                           
 38435                           ; BSR set to: 1
 38436  01A5EE  0E02               	movlw	2
 38437  01A5F0  0100               	movlb	0	; () banked
 38438  01A5F2  19F0               	xorwf	_Turbine_state& (0+255),w,b
 38439  01A5F4  A4D8               	btfss	status,2,c
 38440  01A5F6  D005               	goto	i2l18007
 38441                           
 38442                           ; BSR set to: 0
 38443                           ;Power_Meter.c: 668: {
 38444                           ;Power_Meter.c: 669: (RF1 = 1);
 38445  01A5F8  8285               	bsf	3973,1,c	;volatile
 38446                           
 38447                           ; BSR set to: 0
 38448                           ;Power_Meter.c: 670: Five_Second_flag = 1;
 38449  01A5FA  0E01               	movlw	1
 38450  01A5FC  0101               	movlb	1	; () banked
 38451  01A5FE  6F57               	movwf	_Five_Second_flag& (0+255),b
 38452                           
 38453                           ;Power_Meter.c: 671: }
 38454  01A600  0012               	return	
 38455  01A602                     i2l18007:
 38456                           
 38457                           ;Power_Meter.c: 672: else if(Capacitor_Counter < 40 || Turbine_state != RUNNING_STATE)
 38458  01A602  0101               	movlb	1	; () banked
 38459  01A604  5121               	movf	(_Capacitor_Counter+1)& (0+255),w,b
 38460  01A606  E105               	bnz	i2u1068_40
 38461  01A608  0E28               	movlw	40
 38462  01A60A  0101               	movlb	1	; () banked
 38463  01A60C  5D20               	subwf	_Capacitor_Counter& (0+255),w,b
 38464  01A60E  A0D8               	btfss	status,0,c
 38465  01A610  D005               	goto	i2l18011
 38466  01A612                     i2u1068_40:
 38467                           
 38468                           ; BSR set to: 1
 38469  01A612  0E02               	movlw	2
 38470  01A614  0100               	movlb	0	; () banked
 38471  01A616  19F0               	xorwf	_Turbine_state& (0+255),w,b
 38472  01A618  B4D8               	btfsc	status,2,c
 38473  01A61A  0012               	return	
 38474  01A61C                     i2l18011:
 38475                           
 38476                           ;Power_Meter.c: 673: {
 38477                           ;Power_Meter.c: 674: Five_Second_flag = 0;
 38478  01A61C  0E00               	movlw	0
 38479  01A61E  0101               	movlb	1	; () banked
 38480  01A620  6F57               	movwf	_Five_Second_flag& (0+255),b
 38481                           
 38482                           ; BSR set to: 1
 38483  01A622  0012               	return	
 38484  01A624                     __end_of_Capacitor_Adding:
 38485                           	opt stack 0
 38486                           pclatu	equ	0xFFB
 38487                           pclath	equ	0xFFA
 38488                           tblptru	equ	0xFF8
 38489                           tblptrh	equ	0xFF7
 38490                           tblptrl	equ	0xFF6
 38491                           tablat	equ	0xFF5
 38492                           prodh	equ	0xFF4
 38493                           prodl	equ	0xFF3
 38494                           intcon	equ	0xFF2
 38495                           postinc0	equ	0xFEE
 38496                           fsr0h	equ	0xFEA
 38497                           fsr0l	equ	0xFE9
 38498                           wreg	equ	0xFE8
 38499                           postdec1	equ	0xFE5
 38500                           fsr1h	equ	0xFE2
 38501                           fsr1l	equ	0xFE1
 38502                           indf2	equ	0xFDF
 38503                           postinc2	equ	0xFDE
 38504                           postdec2	equ	0xFDD
 38505                           fsr2h	equ	0xFDA
 38506                           fsr2l	equ	0xFD9
 38507                           status	equ	0xFD8
 38508                           pclatu	equ	0xFFB
 38509                           pclath	equ	0xFFA
 38510                           tblptru	equ	0xFF8
 38511                           tblptrh	equ	0xFF7
 38512                           tblptrl	equ	0xFF6
 38513                           tablat	equ	0xFF5
 38514                           prodh	equ	0xFF4
 38515                           prodl	equ	0xFF3
 38516                           intcon	equ	0xFF2
 38517                           postinc0	equ	0xFEE
 38518                           fsr0h	equ	0xFEA
 38519                           fsr0l	equ	0xFE9
 38520                           wreg	equ	0xFE8
 38521                           postdec1	equ	0xFE5
 38522                           fsr1h	equ	0xFE2
 38523                           fsr1l	equ	0xFE1
 38524                           indf2	equ	0xFDF
 38525                           postinc2	equ	0xFDE
 38526                           postdec2	equ	0xFDD
 38527                           fsr2h	equ	0xFDA
 38528                           fsr2l	equ	0xFD9
 38529                           status	equ	0xFD8
 38530                           
 38531                           	psect	rparam
 38532  0000                     pclatu	equ	0xFFB
 38533                           pclath	equ	0xFFA
 38534                           tblptru	equ	0xFF8
 38535                           tblptrh	equ	0xFF7
 38536                           tblptrl	equ	0xFF6
 38537                           tablat	equ	0xFF5
 38538                           prodh	equ	0xFF4
 38539                           prodl	equ	0xFF3
 38540                           intcon	equ	0xFF2
 38541                           postinc0	equ	0xFEE
 38542                           fsr0h	equ	0xFEA
 38543                           fsr0l	equ	0xFE9
 38544                           wreg	equ	0xFE8
 38545                           postdec1	equ	0xFE5
 38546                           fsr1h	equ	0xFE2
 38547                           fsr1l	equ	0xFE1
 38548                           indf2	equ	0xFDF
 38549                           postinc2	equ	0xFDE
 38550                           postdec2	equ	0xFDD
 38551                           fsr2h	equ	0xFDA
 38552                           fsr2l	equ	0xFD9
 38553                           status	equ	0xFD8
 38554                           
 38555                           	psect	temp
 38556  000049                     btemp:
 38557                           	opt stack 0
 38558  000049                     	ds	1
 38559  0000                     int$flags	set	btemp
 38560                           pclatu	equ	0xFFB
 38561                           pclath	equ	0xFFA
 38562                           tblptru	equ	0xFF8
 38563                           tblptrh	equ	0xFF7
 38564                           tblptrl	equ	0xFF6
 38565                           tablat	equ	0xFF5
 38566                           prodh	equ	0xFF4
 38567                           prodl	equ	0xFF3
 38568                           intcon	equ	0xFF2
 38569                           postinc0	equ	0xFEE
 38570                           fsr0h	equ	0xFEA
 38571                           fsr0l	equ	0xFE9
 38572                           wreg	equ	0xFE8
 38573                           postdec1	equ	0xFE5
 38574                           fsr1h	equ	0xFE2
 38575                           fsr1l	equ	0xFE1
 38576                           indf2	equ	0xFDF
 38577                           postinc2	equ	0xFDE
 38578                           postdec2	equ	0xFDD
 38579                           fsr2h	equ	0xFDA
 38580                           fsr2l	equ	0xFD9
 38581                           status	equ	0xFD8


Data Sizes:
    Strings     950
    Constant    145
    Data        4
    BSS         1402
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      72
    BANK0           160    100     160
    BANK1           256     29     201
    BANK2           256      0     256
    BANK3           256      0     256
    BANK4           256      0     255
    BANK5           256      0     254
    BANK6           256     84     201
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_227(CODE[7]), Hours_2(BANK2[2]), Mot_Frequency(BANK5[3]), Time_New(BANK1[3]), 
		 -> wind_Time_1_2(BANK4[3]), Wind_Time_1(BANK4[3]), GRPM_Frequency(BANK4[3]), GRPM_Time_1(BANK2[3]), 
		 -> TRPM_Frequency(BANK4[3]), TRPM_Time(BANK4[3]), STR_224(CODE[20]), STR_222(CODE[24]), 
		 -> STR_220(CODE[18]), STR_218(CODE[18]), STR_216(CODE[18]), STR_214(CODE[16]), 
		 -> STR_212(CODE[8]), STR_210(CODE[10]), STR_208(CODE[14]), STR_206(CODE[11]), 
		 -> STR_204(CODE[19]), STR_202(CODE[19]), STR_200(CODE[27]), STR_198(CODE[13]), 
		 -> STR_196(CODE[10]), STR_194(CODE[13]), STR_192(CODE[12]), STR_190(CODE[5]), 
		 -> STR_188(CODE[5]), STR_186(CODE[14]), STR_184(CODE[16]), STR_182(CODE[9]), 
		 -> STR_180(CODE[13]), STR_178(CODE[10]), STR_176(CODE[12]), STR_174(CODE[10]), 
		 -> STR_172(CODE[15]), STR_170(CODE[13]), STR_168(CODE[5]), STR_166(CODE[4]), 
		 -> STR_164(CODE[5]), STR_162(CODE[3]), STR_160(CODE[10]), STR_158(CODE[10]), 
		 -> STR_156(CODE[10]), STR_154(CODE[7]), STR_152(CODE[7]), STR_150(CODE[7]), 
		 -> STR_148(CODE[15]), STR_146(CODE[15]), STR_144(CODE[7]), STR_142(CODE[15]), 
		 -> STR_140(CODE[15]), STR_138(CODE[14]), STR_136(CODE[12]), STR_134(CODE[11]), 
		 -> STR_132(CODE[15]), STR_130(CODE[9]), STR_128(CODE[13]), STR_126(CODE[11]), 
		 -> STR_124(CODE[10]), STR_89(CODE[9]), STR_87(CODE[8]), STR_85(CODE[7]), 
		 -> STR_83(CODE[8]), STR_81(CODE[11]), STR_79(CODE[14]), STR_77(CODE[12]), 
		 -> STR_75(CODE[7]), STR_73(CODE[9]), STR_71(CODE[11]), STR_69(CODE[11]), 
		 -> STR_67(CODE[10]), STR_65(CODE[10]), STR_63(CODE[10]), STR_61(CODE[7]), 
		 -> STR_59(CODE[14]), STR_57(CODE[11]), STR_55(CODE[11]), STR_53(CODE[7]), 
		 -> STR_51(CODE[8]), STR_49(CODE[13]), STR_47(CODE[11]), STR_45(CODE[5]), 
		 -> STR_43(CODE[10]), STR_41(CODE[18]), STR_39(CODE[9]), STR_37(CODE[10]), 
		 -> STR_35(CODE[11]), STR_33(CODE[9]), Y_KW(BANK2[3]), KW(COMRAM[3]), 
		 -> STR_3(CODE[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_223(CODE[3]), STR_221(CODE[3]), STR_219(CODE[3]), STR_217(CODE[3]), 
		 -> STR_215(CODE[3]), STR_213(CODE[3]), STR_211(CODE[3]), STR_209(CODE[3]), 
		 -> STR_207(CODE[3]), STR_205(CODE[3]), STR_203(CODE[3]), STR_201(CODE[3]), 
		 -> STR_199(CODE[3]), STR_197(CODE[3]), STR_195(CODE[3]), STR_193(CODE[3]), 
		 -> STR_191(CODE[3]), STR_189(CODE[3]), STR_187(CODE[3]), STR_185(CODE[3]), 
		 -> STR_183(CODE[3]), STR_181(CODE[3]), STR_179(CODE[3]), STR_177(CODE[3]), 
		 -> STR_175(CODE[3]), STR_173(CODE[3]), STR_171(CODE[3]), STR_169(CODE[3]), 
		 -> STR_167(CODE[3]), STR_165(CODE[3]), STR_163(CODE[3]), STR_161(CODE[3]), 
		 -> STR_159(CODE[3]), STR_157(CODE[3]), STR_155(CODE[3]), STR_153(CODE[3]), 
		 -> STR_151(CODE[3]), STR_149(CODE[3]), STR_147(CODE[3]), STR_145(CODE[3]), 
		 -> STR_143(CODE[3]), STR_141(CODE[3]), STR_139(CODE[3]), STR_137(CODE[3]), 
		 -> STR_135(CODE[3]), STR_133(CODE[3]), STR_131(CODE[3]), STR_129(CODE[3]), 
		 -> STR_127(CODE[3]), STR_125(CODE[3]), STR_123(CODE[3]), STR_118(CODE[3]), 
		 -> STR_117(CODE[3]), STR_116(CODE[3]), STR_115(CODE[3]), STR_114(CODE[3]), 
		 -> STR_113(CODE[3]), STR_112(CODE[3]), STR_111(CODE[3]), STR_110(CODE[3]), 
		 -> STR_109(CODE[3]), STR_108(CODE[3]), STR_107(CODE[3]), STR_106(CODE[3]), 
		 -> STR_105(CODE[3]), STR_104(CODE[3]), STR_103(CODE[3]), STR_102(CODE[3]), 
		 -> STR_101(CODE[3]), STR_100(CODE[3]), STR_99(CODE[3]), STR_98(CODE[3]), 
		 -> STR_97(CODE[3]), STR_96(CODE[7]), STR_95(CODE[3]), STR_94(CODE[3]), 
		 -> STR_93(CODE[3]), STR_92(CODE[3]), STR_91(CODE[3]), STR_90(CODE[3]), 
		 -> STR_88(CODE[3]), STR_86(CODE[3]), STR_84(CODE[3]), STR_82(CODE[3]), 
		 -> STR_80(CODE[3]), STR_78(CODE[3]), STR_76(CODE[3]), STR_74(CODE[3]), 
		 -> STR_72(CODE[3]), STR_70(CODE[3]), STR_68(CODE[3]), STR_66(CODE[3]), 
		 -> STR_64(CODE[3]), STR_62(CODE[3]), STR_60(CODE[3]), STR_58(CODE[3]), 
		 -> STR_56(CODE[3]), STR_54(CODE[3]), STR_52(CODE[3]), STR_50(CODE[3]), 
		 -> STR_48(CODE[3]), STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), 
		 -> STR_40(CODE[3]), STR_38(CODE[3]), STR_36(CODE[3]), STR_34(CODE[3]), 
		 -> STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[3]), STR_29(CODE[3]), 
		 -> STR_28(CODE[3]), STR_27(CODE[7]), STR_26(CODE[7]), STR_25(CODE[7]), 
		 -> STR_24(CODE[7]), STR_23(CODE[7]), STR_22(CODE[7]), STR_21(CODE[7]), 
		 -> STR_20(CODE[7]), STR_19(CODE[7]), STR_18(CODE[7]), STR_17(CODE[6]), 
		 -> STR_16(CODE[6]), STR_15(CODE[6]), STR_14(CODE[7]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), STR_11(CODE[7]), STR_10(CODE[7]), STR_9(CODE[3]), 
		 -> STR_8(CODE[7]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    usart_str@str	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_226(CODE[2]), STR_225(CODE[2]), STR_122(CODE[2]), STR_121(CODE[2]), 
		 -> STR_120(CODE[2]), STR_119(CODE[2]), 

    RTC_GetDateTime@rtc	PTR struct . size(2) Largest target is 7
		 -> rtc(BANK5[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->i2___ftadd
    i2___ftadd->i2___ftpack
    ___awtoft->i2___ftpack
    _PM_Error_Led->i2___ftge

Critical Paths under _main in BANK0

    _Y_PF_Calc->___ftdiv
    _Y_PF_Avg->_cos
    _Wind_Speed_Cal->___ftdiv
    _Wind_Speed_2_Cal->___ftdiv
    _Volt_Curr_Read->___ftge
    _Volt_Curr_Avg->___ftdiv
    _Turbine_RPM_Cal->___ftdiv
    _Wind_Average->___ftdiv
    _VFD_RS485_Data_filter->_VFD_RS485_Data
    _VFD_RS485_Data->___ftdiv
    _UART_Data->_printf
    _UART_Data_String->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _RTC_GetDateTime->_I2C_Read
    _BCDtoI->___wmul
    _Error_Scan_Ramp_up->_EEPROM_Error_Stop
    _Stopping_state_function->___ftge
    _EEPROM_Error_Stop->_int_eeprom_read
    _EEPROM_Error_Stop->_int_eeprom_write
    _Last_3_EEPROM_ERROR_Trigger->_int_eeprom_write
    _Wind_Speed_Error_Trigger->___ftge
    _Turbine_Under_speed->___ftge
    _Turbine_Restore_Check->___ftge
    _Turbine_Over_Speed->___ftge
    _Turbine_OverLoaded_Error->___ftge
    _Start_Stop->_int_eeprom_write
    _Rotor_Slip_Cal->___ftdiv
    _Ramp_Up_Slip_Error_Trigger->___ftge
    _Ramp_Up_Slip->___ftge
    _Pitch_Feedback->_int_eeprom_write
    _Motor_Slip_Cal->___ftdiv
    ___lbtoft->___ftpack
    _Grid_UV->___ftge
    _Grid_Over_Current->___ftge
    _Grid_OV->___ftge
    _Grid_Minimum_Power->___ftge
    _Grid_Maximum_Power->___ftge
    _Grid_Frequency->___ftge
    _Generator_RPM->___ftge
    _Generator_One_Feedback->_int_eeprom_write
    _EEPROM_Error_Monitor->_int_eeprom_read
    _EEPROM_Error_Monitor->_int_eeprom_write
    _Temp_Read->___ftdiv
    _Rampup_state_function->_RAMP_UP
    _VFD_Freq_Step_up->___ftdiv
    _R_PF_Calc->___ftdiv
    _R_PF_Avg->_cos
    _RTC_Init->_I2C_Write
    _RS485_Data_communication->_usart_str_2
    _Power_Factor->___ftdiv
    _Power_Calc->_sqrt
    _sqrt->___ftsub
    _Phase_Sequence->_Read_Adc
    _Generator_RPM_Cal->___ftdiv
    ___lwtoft->___ftpack
    _Freq_Calc->___ftdiv
    _Cons_Gene->___ftge
    _B_PF_Calc->___ftdiv
    _B_PF_Avg->_cos
    _cos->_sin
    _sin->___ftdiv
    _floor->___altoft
    ___fttol->_scale
    ___ftge->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftsub->_floor
    ___ftadd->_fround
    ___ftneg->___ftmul
    ___ftdiv->_eval_poly

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Y_PF_Avg->_cos
    _UART_Data->_printf
    _UART_Data_String->_printf
    _R_PF_Avg->_cos
    _B_PF_Avg->_cos

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    _main->_B_PF_Avg
    _main->_R_PF_Avg
    _main->_Y_PF_Avg

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0 2911723
                           _B_PF_Avg
                          _B_PF_Calc
                          _Cons_Gene
                  _EEPROM_Error_Stop
                          _Freq_Calc
                  _Generator_RPM_Cal
             _Generator_RPM_Initiate
                        _IO_Initiate
                         _OSCILLATOR
              _PM_ADC_Initialization
               _PM_IO_Initialization
            _PM_Timer_Initialization
                     _Phase_Sequence
                         _Power_Calc
                       _Power_Factor
                      _RPM_Data_Kill
           _RS485_Data_communication
                           _RTC_Init
                           _R_PF_Avg
                          _R_PF_Calc
              _Rampup_state_function
                          _Temp_Read
          _Timer0_OneSecond_Function
                    _Timer1_Initiate
                        _Timer7_Init
                    _Turbine_RPM_Cal
               _Turbine_RPM_Initiate
                      _Volt_Curr_Avg
                     _Volt_Curr_Read
                   _Wind_Speed_2_Cal
              _Wind_Speed_2_Initiate
                     _Wind_Speed_Cal
                _Wind_Speed_Initiate
                           _Y_PF_Avg
                          _Y_PF_Calc
             _startup_state_function
                         _usart_init
 ---------------------------------------------------------------------------------
 (1) _usart_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _startup_state_function                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Y_PF_Calc                                            6     6      0   76331
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _Y_PF_Avg                                            93    93      0  345029
                                              0 BANK6     84    84      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                                _cos
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_Initiate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_Cal                                       2     2      0   62980
                                             84 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_2_Initiate                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_2_Cal                                     2     2      0   62980
                                             84 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Volt_Curr_Read                                       0     0      0   20135
                           _Read_Adc
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Volt_Curr_Avg                                       24    24      0   60832
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _Turbine_RPM_Initiate                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Turbine_RPM_Cal                                      2     2      0   78760
                                             84 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Timer7_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Initiate                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_OneSecond_Function                            0     0      0  871149
               _EEPROM_Error_Monitor
          _Error_Checking_One_Second
                 _Error_Scan_Running
                    _Last_Five_Error
            _Stopping_state_function
           _Turbine_Ramp_up_1_Second
          _Turbine_Start_up_1_Second
                      _Two_Sec_Delay
                          _UART_Data
                     _VFD_RS485_Data
              _VFD_RS485_Data_filter
                       _Wind_Average
 ---------------------------------------------------------------------------------
 (2) _Wind_Average                                        48    48      0   44685
                                              0 BANK1     24    24      0
                            ___ftadd
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (2) _VFD_RS485_Data_filter                                0     0      0   14079
                     _VFD_RS485_Data
 ---------------------------------------------------------------------------------
 (3) _VFD_RS485_Data                                       2     2      0   14079
                                             84 BANK0      2     2      0
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _UART_Data                                            0     0      0  355299
                             _BCDtoI
                    _RTC_GetDateTime
                   _UART_Data_String
                             _printf
                          _usart_str
                        _usart_str_1
 ---------------------------------------------------------------------------------
 (3) _UART_Data_String                                     0     0      0  175213
                             _printf
                          _usart_str
                        _usart_str_1
 ---------------------------------------------------------------------------------
 (3) _usart_str_1                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _usart_str                                            2     0      2     527
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _printf                                              41    36      5  174655
                                             81 BANK0     11     6      5
                                              0 BANK1     29    29      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   23334
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   23055
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2778
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _RTC_GetDateTime                                      2     0      2     393
                                              2 BANK0      2     0      2
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             2     2      0      68
                                              0 BANK0      2     2      0
                            _i2c_Ack
                          _i2c_NoAck
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (5) _i2c_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BCDtoI                                               7     5      2    4480
                                             20 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Turbine_Start_up_1_Second                            0     0      0       0
                _Error_Scan_start_up
                      _VFD_Data_Kill
 ---------------------------------------------------------------------------------
 (3) _Error_Scan_start_up                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Turbine_Ramp_up_1_Second                             0     0      0   13841
                 _Error_Scan_Ramp_up
                     _Five_Sec_Delay
                      _One_Sec_Delay
                      _Two_Sec_Delay
 ---------------------------------------------------------------------------------
 (2) _Two_Sec_Delay                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _One_Sec_Delay                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Five_Sec_Delay                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Error_Scan_Ramp_up                                   0     0      0   13841
                  _EEPROM_Error_Stop
 ---------------------------------------------------------------------------------
 (2) _Last_Five_Error                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error_Scan_Running                                   0     0      0   36007
                  _EEPROM_Error_Stop
            _Stopping_state_function
 ---------------------------------------------------------------------------------
 (2) _Stopping_state_function                              0     0      0   22166
                    _Error_Flag_Kill
                         _Start_Stop
                   _Turbine_Pitching
                      _VFD_Data_Kill
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Error_Flag_Kill                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEPROM_Error_Stop                                    2     2      0   13841
                                              4 BANK0      2     2      0
        _Last_3_EEPROM_ERROR_Trigger
                    _int_eeprom_read
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (5) _Last_3_EEPROM_ERROR_Trigger                          0     0      0    6386
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (2) _Error_Checking_One_Second                            0     0      0  363538
                _Communication_Error
                     _DC_Bus_Voltage
             _Generator_One_Feedback
                      _Generator_RPM
                     _Grid_Frequency
                 _Grid_Maximum_Power
                 _Grid_Minimum_Power
                            _Grid_OV
                  _Grid_Over_Current
                _Grid_Phase_Sequence
                            _Grid_UV
                     _Motor_Slip_Cal
                     _Pitch_Feedback
               _Pitch_PS_ON_Function
                       _Ramp_Up_Slip
         _Ramp_Up_Slip_Error_Trigger
                     _Rotor_Slip_Cal
                         _Start_Stop
           _Turbine_OverLoaded_Error
                 _Turbine_Over_Speed
              _Turbine_Restore_Check
                _Turbine_Under_speed
                 _VFD_PS_ON_Function
                 _VFD_Run_Time_Error
           _Wind_Speed_Error_Trigger
 ---------------------------------------------------------------------------------
 (3) _Wind_Speed_Error_Trigger                             0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _VFD_Run_Time_Error                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _VFD_PS_ON_Function                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Turbine_Under_speed                                  0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Turbine_Restore_Check                                0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Turbine_Over_Speed                                   0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Turbine_OverLoaded_Error                             0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Start_Stop                                           0     0      0    6386
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (3) _Rotor_Slip_Cal                                       0     0      0   60415
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (3) _Ramp_Up_Slip_Error_Trigger                           0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Ramp_Up_Slip                                         0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Pitch_PS_ON_Function                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Pitch_Feedback                                       0     0      0    6386
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (3) _Motor_Slip_Cal                                       0     0      0   63045
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2630
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _Grid_UV                                              0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Phase_Sequence                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Grid_Over_Current                                    0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_OV                                              0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Minimum_Power                                   0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Maximum_Power                                   0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Frequency                                       0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Generator_RPM                                        0     0      0   15780
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Generator_One_Feedback                               0     0      0    6386
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (3) _DC_Bus_Voltage                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Communication_Error                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Error_Monitor                                 0     0      0    7455
                    _int_eeprom_read
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (5) _int_eeprom_write                                     4     0      4    6386
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _int_eeprom_read                                      4     2      2    1069
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Temp_Read                                           12    12      0   63147
                                             84 BANK0     12    12      0
                           _Read_Adc
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Rampup_state_function                                0     0      0   40594
                            _RAMP_UP
 ---------------------------------------------------------------------------------
 (2) _RAMP_UP                                              1     1      0   40594
                                             84 BANK0      1     1      0
                      _Pitch_Release
                   _Turbine_Pitching
                      _VFD_Data_Kill
                   _VFD_Freq_Step_up
 ---------------------------------------------------------------------------------
 (3) _VFD_Freq_Step_up                                     0     0      0   40594
                            ___ftdiv
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) _VFD_Data_Kill                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Turbine_Pitching                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Pitch_Release                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _R_PF_Calc                                            6     6      0   76331
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _R_PF_Avg                                            93    93      0  345029
                                              0 BANK6     84    84      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                                _cos
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0      31
                           _I2C_Init
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            1     1      0      31
                                              0 BANK0      1     1      0
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (5) _i2c_WaitForIdle                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Data_communication                             1     1      0      31
                                              1 BANK0      1     1      0
                        _usart2_init
                        _usart_str_2
 ---------------------------------------------------------------------------------
 (2) _usart_str_2                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _usart2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RPM_Data_Kill                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Power_Factor                                         3     3      0   59411
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _Power_Calc                                          18    18      0  127035
                                              0 BANK1      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                19    16      3   66144
                                             81 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftneg (ARG)
                            ___ftsub
 ---------------------------------------------------------------------------------
 (1) _Phase_Sequence                                       0     0      0      31
                           _Read_Adc
 ---------------------------------------------------------------------------------
 (2) _Read_Adc                                             5     3      2      31
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _PM_Timer_Initialization                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PM_IO_Initialization                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PM_ADC_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IO_Initiate                                          0     0      0       0
                  _Generator_IO_init
                _Pitch_Solenoid_init
               _Power_Meter_Error_IO
              _VFD_Contactor_IO_init
                       _VFD_Error_IO
 ---------------------------------------------------------------------------------
 (2) _VFD_Error_IO                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _VFD_Contactor_IO_init                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Power_Meter_Error_IO                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Pitch_Solenoid_init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Generator_IO_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Generator_RPM_Initiate                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Generator_RPM_Cal                                    2     2      0   79516
                                             84 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    4324
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _Freq_Calc                                            6     6      0   76331
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _Cons_Gene                                            0     0      0   30839
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _B_PF_Calc                                            6     6      0   76331
                                             84 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _B_PF_Avg                                            93    93      0  345029
                                              0 BANK6     84    84      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3  269335
                                             97 BANK0      3     0      3
                                              0 BANK1      3     3      0
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 13    10      3  219253
                                             84 BANK0     13    10      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   54155
                                             67 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     452
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     756
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6   15780
                                             57 BANK0      9     3      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2880
                                             57 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   53391
                                             57 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3774
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6   15059
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6   34668
                                             75 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6   33842
                                             45 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3    1759
                                             35 BANK0      3     0      3
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    9755
                                             69 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2599
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0    3657
                                             20 COMRAM    16    16      0
  _Error_Checking_Interrupt_Overflow
                       _PM_Error_Led
                           ___awtoft
                          i2___ftadd
 ---------------------------------------------------------------------------------
 (9) i2___ftadd                                           12     6      6    1435
                                              8 COMRAM    12     6      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3     734
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _PM_Error_Led                                         0     0      0    1488
                           i2___ftge
 ---------------------------------------------------------------------------------
 (10) i2___ftge                                            9     3      6    1488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) _Error_Checking_Interrupt_Overflow                    0     0      0       0
                   _Capacitor_Adding
                       _VFD_IO_Error
 ---------------------------------------------------------------------------------
 (10) _VFD_IO_Error                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Capacitor_Adding                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _B_PF_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sin
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _B_PF_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Cons_Gene
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _EEPROM_Error_Stop
     _Last_3_EEPROM_ERROR_Trigger
       _int_eeprom_write
     _int_eeprom_read
     _int_eeprom_write
   _Freq_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Generator_RPM_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Generator_RPM_Initiate
   _IO_Initiate
     _Generator_IO_init
     _Pitch_Solenoid_init
     _Power_Meter_Error_IO
     _VFD_Contactor_IO_init
     _VFD_Error_IO
   _OSCILLATOR
   _PM_ADC_Initialization
   _PM_IO_Initialization
   _PM_Timer_Initialization
   _Phase_Sequence
     _Read_Adc
   _Power_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _sqrt
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _Power_Factor
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
   _RPM_Data_Kill
   _RS485_Data_communication
     _usart2_init
     _usart_str_2
   _RTC_Init
     _I2C_Init
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _R_PF_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sin
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _R_PF_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Rampup_state_function
     _RAMP_UP
       _Pitch_Release
       _Turbine_Pitching
       _VFD_Data_Kill
       _VFD_Freq_Step_up
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _Temp_Read
     _Read_Adc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Timer0_OneSecond_Function
     _EEPROM_Error_Monitor
       _int_eeprom_read
       _int_eeprom_write
     _Error_Checking_One_Second
       _Communication_Error
       _DC_Bus_Voltage
       _Generator_One_Feedback
         _int_eeprom_write
       _Generator_RPM
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Frequency
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Maximum_Power
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Minimum_Power
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_OV
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Over_Current
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Phase_Sequence
       _Grid_UV
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Motor_Slip_Cal
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lbtoft
           ___ftpack
       _Pitch_Feedback
         _int_eeprom_write
       _Pitch_PS_ON_Function
       _Ramp_Up_Slip
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Ramp_Up_Slip_Error_Trigger
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Rotor_Slip_Cal
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Start_Stop
         _int_eeprom_write
       _Turbine_OverLoaded_Error
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Turbine_Over_Speed
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Turbine_Restore_Check
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Turbine_Under_speed
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _VFD_PS_ON_Function
       _VFD_Run_Time_Error
       _Wind_Speed_Error_Trigger
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _Error_Scan_Running
       _EEPROM_Error_Stop
         _Last_3_EEPROM_ERROR_Trigger
           _int_eeprom_write
         _int_eeprom_read
         _int_eeprom_write
       _Stopping_state_function
         _Error_Flag_Kill
         _Start_Stop
           _int_eeprom_write
         _Turbine_Pitching
         _VFD_Data_Kill
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _Last_Five_Error
     _Stopping_state_function
       _Error_Flag_Kill
       _Start_Stop
         _int_eeprom_write
       _Turbine_Pitching
       _VFD_Data_Kill
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _Turbine_Ramp_up_1_Second
       _Error_Scan_Ramp_up
         _EEPROM_Error_Stop
           _Last_3_EEPROM_ERROR_Trigger
             _int_eeprom_write
           _int_eeprom_read
           _int_eeprom_write
       _Five_Sec_Delay
       _One_Sec_Delay
       _Two_Sec_Delay
     _Turbine_Start_up_1_Second
       _Error_Scan_start_up
       _VFD_Data_Kill
     _Two_Sec_Delay
     _UART_Data
       _BCDtoI
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _RTC_GetDateTime
         _I2C_Read
           _i2c_Ack
           _i2c_NoAck
           _i2c_WaitForIdle
         _I2C_Start
         _I2C_Stop
         _I2C_Write
           _i2c_WaitForIdle
       _UART_Data_String
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftsub
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
             _floor (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
                 ___ftadd (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _usart_str
         _usart_str_1
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _usart_str
       _usart_str_1
     _VFD_RS485_Data
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lwtoft
         ___ftpack
     _VFD_RS485_Data_filter
       _VFD_RS485_Data
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft
           ___ftpack
     _Wind_Average
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _Timer1_Initiate
   _Timer7_Init
   _Turbine_RPM_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Turbine_RPM_Initiate
   _Volt_Curr_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Volt_Curr_Read
     _Read_Adc
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _Wind_Speed_2_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Wind_Speed_2_Initiate
   _Wind_Speed_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Wind_Speed_Initiate
   _Y_PF_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sin
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _Y_PF_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _startup_state_function
   _usart_init

 _ISR (ROOT)
   _Error_Checking_Interrupt_Overflow
     _Capacitor_Adding
     _VFD_IO_Error
   _PM_Error_Led
     i2___ftge
   ___awtoft
     i2___ftpack
   i2___ftadd
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100     54      C9      18       78.5%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      FE      16       99.2%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      FF      14       99.6%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1D      C9       7       78.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     64      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      48       1       76.6%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     677      12        0.0%
DATA                 0      0     677       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Dec 13 11:45:50 2017

                                _KW_Counter 0168                                  _RPM_Time_1 05D4  
                   _Gf_Yellow_Phase_Voltage 0663                             ?_Grid_Frequency 0025  
                     __end_of_Pitch_Release AC0E                                ___altoft@exp 00A1  
                                         _i 0021                          __size_of_I2C_Start 0008  
                          ?_i2c_WaitForIdle 0025                               ___altoft@sign 00A2  
             __size_of_Power_Meter_Error_IO 000A                          __size_of_I2C_Write 0012  
                                        _T1 05D8                                          _KW 0022  
                                        _PS 001D                              ?_RPM_Data_Kill 0025  
                              ___awdiv@sign 006B                         ___wmul@multiplicand 0070  
                               __CFG_BORV$0 000000                                _PM_Error_Led 519A  
                                i2___ftpack 9F3A                    _TRPM_Under_Speed_Counter 0180  
                          ??_Wind_Speed_Cal 00B4            __end_of_Turbine_OverLoaded_Error A962  
                ?_Turbine_Start_up_1_Second 0025                         _Ten_Sec_RampUp_Flag 00ED  
                              ___ftadd@exp1 0098                                ___ftadd@exp2 0097  
                              ___ftadd@sign 0096                                         _GIE 007F97  
                                       _RB0 007C08                                         _RB1 007C09  
                                       _RC0 007C10                                         _RB2 007C0A  
                                       _RA4 007C04                                         _RA5 007C05  
                                       _RD0 007C18                                         _RB4 007C0C  
                                       _RD1 007C19                                         _RB5 007C0D  
                                       _RE0 007C20                                         _RD2 007C1A  
                                       _RE1 007C21                                         _RC5 007C15  
                                       _RF1 007C29                                         _RF3 007C2B  
                                       _RE7 007C27                                         _B_C 0280  
                                       _RF7 007C2F                                         _KVA 0218  
                                       _B_V 0282                                         _ISR 0008  
                                       _R_C 029C                                         _R_V 029E  
                               _usart2_init AD4A                                         _Y_C 02B6  
              __end_of_Pitch_PS_ON_Function ACB2                                         _Y_V 02B8  
           __end_of_PM_Timer_Initialization B0AE                              _KW_Counter_Max 0169  
                                       _cos 9760                                         _sin 5AEC  
                                       _rtc 05F2                                ___awmod@sign 0065  
                                       prod 000FF3                          _Turbine_Over_Speed AA1A  
                             _Two_Sec_Delay AE88                                         wreg 000FE8  
                 __size_of_Capacitor_Adding 007A                                  _TXSTA2bits 000F21  
                                _OV_Counter 0171                  __size_of_EEPROM_Error_Stop 032E  
                               _RPM_counter 00E9                               _Volt_Curr_Avg 3848  
                                      ?_ISR 0025                      _Generator_One_Feedback A774  
                              ___ftdiv@cntr 00AE                                ___ftdiv@sign 00B3  
                                      l1021 AFE0                                        l1015 AFD6  
                                      l1007 AD26                                        l1033 B094  
                                      l1027 B08A                                        l1045 B0D8  
                                      l1039 B0E0                                        l2432 AC48  
                                      l2445 B030                                        l2439 B022  
                                      l2457 B03E                                        ?_cos 00C1  
                                      l7013 A696                                        l6134 87CE  
                                      l6207 85E6                                        l6119 9502  
                                      l6314 9998                                        l3762 49C4  
                                      l3780 5126                                        l6084 9128  
                                      l3772 4A46                                        l3781 510C  
                                      l6309 993C                                        l6263 9268  
                                      l3767 49F0                                        l6295 A7A0  
                                      l6288 A746                                        l9250 6F76  
                                      l9228 6D48                                        l9180 4B30  
                                      l9190 4DD2                                        l9167 AB68  
                                      l9191 4D88                                        l9239 6B1A  
                                      l9185 4CA6                                        l9186 4C5C  
                                      l9179 4B7A                                        ?_sin 00B4  
                                      _ADON 007E10                                        l6990 8DF0  
                                      l6993 8E1A                                        l6994 8E30  
                                      l6998 8E62                                        STR_1 FFF7  
                                      STR_2 FFF4                                        STR_3 FCEB  
                                      STR_4 FFC5                                        STR_5 FFC5  
                                      STR_6 FFC5                                        STR_7 FFC5  
                                      STR_8 FFC5                                        STR_9 FFF1  
                              _TRPM_Cap_Old 0132                                _TRPM_Cap_New 0130  
                           __end_of_RAMP_UP 8EE2                                printf@tmpval 01B5  
                           ?_Pitch_Feedback 0025                         ?_Turbine_Over_Speed 0025  
                                      _PEIE 007F96                                        _KW_1 0588  
                                      _KVAr 04A5                                        _TXIF 007CF4  
                                      _GfKw 055B                     __size_of_Motor_Slip_Cal 010A  
                                      _Data 0600                             ?_Rotor_Slip_Cal 0025  
                           _Avg_RYB_Current 0100                                        _Y_KW 02F1  
                           _Power_Calc$8145 01B0                             _Power_Calc$8146 01AD  
                           _Power_Calc$8147 01AA                                        _Temp 0221  
                                Read_Adc@ch 0064                                        _Wind 04BA  
                                      _data 05E4                _Gc_Turbine2Wheel_Ratio_Error 02D1  
                                      _main 739E                   __size_of_Turbine_Pitching 0004  
                              ___ftpack@arg 0060                                 _usart_str_1 B01E  
                               _usart_str_2 B03A                                        cos@f 00C1  
                              ___ftpack@exp 0063                             _VFD_Bus_Voltage 013C  
                          __end_of_I2C_Init B002                            __end_of_I2C_Read AD4A  
                     _Rampup_state_function B0F6                                        fsr0h 000FEA  
                                      fsr1h 000FE2                                        fsr0l 000FE9  
                                      fsr2h 000FDA                                        fsr1l 000FE1  
                                      indf2 000FDF                                        fsr2l 000FD9  
                                      btemp 0049                                        _sqrt 71E0  
                               _GfR_current 055E                _Generator_One_Feedback_Error 0162  
                          __end_of_I2C_Stop B0DE                                i2___ftadd@f1 002D  
                              i2___ftadd@f2 0030                       _Timer1_Time_per_Count 05A3  
                                      pclat 000FFA                                        sin@f 00B4  
                              i2___ftge@ff1 0025                                        sin@y 00B7  
                              i2___ftge@ff2 0028                                        prodh 000FF4  
                                      prodl 000FF3                           ?_Wind_Speed_2_Cal 0025  
                                      start 0444                                 _Gi_TRPM_Cap 05CC  
                               ?_OSCILLATOR 0025                             _Avg_RYB_Voltage 0200  
                             __CFG_MCLRE$ON 000000                          ??_Wind_Speed_2_Cal 00B4  
                              ___ftmul@cntr 0081                                ___param_bank 000010  
                           __end_of_i2c_Ack B09A                                ___ftmul@sign 0082  
                           __end_of_Grid_OV 7FE2                             __end_of_Grid_UV 7E7A  
                                _Gen_Theory 0215                               _GCR_slip_flag 02C3  
                          ??_DC_Bus_Voltage 0060                                _Gf_TRPM_Time 0573  
                        __size_of_B_PF_Calc 022E                                       ??_ISR 0039  
                __end_of_VFD_Run_Time_Error AB52                              _Temp_Read$8051 00B4  
                            _Temp_Read$8052 00B7                              _Temp_Read$8053 00BA  
                            _Temp_Read$8054 00BD                                ___fttol@exp1 0098  
                            _Volt_Curr_Flag 019A                                       ??_cos 00C4  
                              ___fttol@lval 0094                                       ??_sin 00B7  
                            _Volt_Curr_Read 4A96                        ??_Turbine_Over_Speed 00A2  
                              _BAUDCON2bits 000F20                 _Timer1_OF_counter_Generator 03F2  
                                     l10211 AD02                                       l10205 AE46  
                                     l10214 AD0C                                       l11009 8CEA  
                                     l10322 0844                                       l20021 84FE  
                                     l20013 84D2                                       l20023 8508  
                                     l20009 84BE                                       l10193 57F6  
                                     l20105 55CA                                       l20113 561E  
                                     l20041 99E0                                       l10603 8ABC  
                                     l20027 8524                                       l20019 84EE  
                                     l20131 5728                                       l20211 016A  
                                     l10700 AD9C                                       l20037 99CA  
                                     l20061 A2A0                                       l20205 0106  
                                     l10630 6574                                       l21023 9BC0  
                                     l20039 99DA                                       l20071 A536  
                                     l20303 04BC                                       l20215 017A  
                                     l10632 659C                                       l10288 09D0  
                                     l10641 6672                                       l21201 A49E  
                                     l20153 5814                                       l20145 57EA  
                                     l20137 5784                                       l21009 9B86  
                                     l20049 9A34                                       l20065 A2E4  
                                     l20057 A28A                                       l20073 A546  
                                     l20401 09B4                                       l20305 04D2  
                                     l20241 0252                                       l20225 01B2  
                                     l20217 0180                                       l20209 0150  
                                     l22001 4334                                       l10650 669C  
                                     l10626 653A                                       l21211 91DC  
                                     l21131 7DB0                                       l20139 5790  
                                     l20059 A29A                                       l10571 7A12  
                                     l20315 0562                                       l20307 0502  
                                     l20251 02A8                                       l20243 025E  
                                     l20227 01BE                                       l10661 83BC  
                                     l20085 A32A                                       l21133 7DB8  
                                     l21125 7D92                                       l21109 AC8E  
                                     l20173 AD40                                       l20421 0A44  
                                     l20405 09C2                                       l20333 0654  
                                     l20309 0518                                       l20253 02C2  
                                     l20245 0264                                       l20237 022C  
                                     l20229 01C4                                       l20181 0010  
                                     l22005 44C8                                       l10750 9A46  
                                     l22111 8E36                                       l21231 924C  
                                     l21223 9220                                       l21215 91F4  
                                     l21151 7E6C                                       l21143 7E46  
                                     l21135 7DC4                                       l20511 98FA  
                                     l21311 A8F8                                       l21063 8852  
                                     l21047 87C0                                       l20175 AD44  
                                     l20351 06F6                                       l20335 065A  
                                     l20319 0590                                       l20247 027C  
                                     l20191 005C                                       l10760 A2F6  
                                     l22041 5DFA                                       l21321 AAB4  
                                     l21161 7EFA                                       l21241 AF58  
                                     l21073 88A2                                       l20441 0ABC  
                                     l20417 0A1C                                       l20361 073A  
                                     l20329 05EE                                       l20265 0326  
                                     l20257 02C8                                       l20185 0026  
                                     l10842 5C7E                                       l10843 5D76  
                                     l22051 5E3A                                       l21171 7F2C  
                                     l21251 9CD2                                       l21059 881E  
                                     l10675 788A                                       l20427 0A6A  
                                     l20371 07F6                                       l20355 0718  
                                     l20347 06A6                                       l20291 041E  
                                     l20275 036C                                       l20259 030C  
                                     l10668 77C6                                       l20621 8C68  
                                     l20613 8C36                                       l22053 5E52  
                                     l22045 5E0E                                       l21405 A9A8  
                                     l21149 7E64                                       l21333 8B26  
                                     l20541 9982                                       l21309 A8F0  
                                     l21085 A642                                       l10669 780A  
                                     l20461 0B80                                       l20445 0AE4  
                                     l20429 0A70                                       l20373 0804  
                                     l20365 0762                                       l20357 071E  
                                     l22029 454C                                       l23101 7446  
                                     l20631 8FBC                                       l21511 5B1A  
                                     l23015 A16C                                       l22135 8EA4  
                                     l22119 8E5C                                       l22047 5E26  
                                     l21271 A83A                                       l21407 A9B0  
                                     l21167 7F18                                       l21431 9F32  
                                     l21095 A672                                       l20471 0BD8  
                                     l20463 0B8A                                       l20455 0B48  
                                     l20383 0848                                       l20359 0726  
                                     l20199 00DA                                       l20561 831A  
                                     l20617 8C4A                                       l23017 A170  
                                     l22057 5E5E                                       l21193 A478  
                                     l21417 AA04                                       l21185 7FCC  
                                     l21169 7F20                                       l21329 8B0A  
                                     l21441 86D0                                       l20545 9992  
                                     l21249 9CC8                                       l20449 0B14  
                                     l20393 08BE                                       l20377 0812  
                                     l23121 7482                                       l10970 7218  
                                     l20555 82E0                                       l21523 5C18  
                                     l22147 8EBE                                       l22059 5E76  
                                     l21267 A824                                       l21419 AA0C  
                                     l21187 7FD4                                       l21179 7FAE  
                                     l21283 85C0                                       l21427 9EE2  
                                     l20539 997C                                       l20483 0CAA  
                                     l20475 0BF2                                       l20467 0BC2  
                                     l20379 0826                                       l20299 048E  
                                     l22403 4ACE                                       l20581 837A  
                                     l20629 8F30                                       l21269 A82C  
                                     l21277 8548                                       l21453 873C  
                                     l21437 86A2                                       l20469 0BCC  
                                     l20389 086C                                       l20485 0CC0  
                                     l22413 4BC4                                       l23133 74AE  
                                     l23109 745C                                       l22343 8022  
                                     l22191 7294                                       l21199 A496  
                                     l21383 AA60                                       l21471 AB3A  
                                     l20479 0C1A                                       l20399 09A6  
                                     l21711 135A                                       l21703 1312  
                                     l22431 4D1E                                       l22415 4BF2  
                                     l23127 7494                                       l22169 97D4  
                                     l22361 80C0                                       l22353 8078  
                                     l10969 722C                                       l21297 8666  
                                     l21289 85DC                                       l21457 876A  
                                     l21449 8710                                       l21393 A94C  
                                     l20913 A07E                                       l20497 AC64  
                                     l22441 4DCE                                       l22425 4CA2  
                                     l22409 4B76                                       l23145 74DC  
                                     l22347 802A                                       l21299 8670  
                                     l21395 A954                                       l21731 140E  
                                     l21723 13C6                                       l21715 137E  
                                     l21707 1336                                       l21651 113E  
                                     l21643 10F6                                       l22435 4D26  
                                     l22419 4BFA                                       l23163 7512  
                                     l23139 74C8                                       l22373 8114  
                                     l22357 809C                                       l22365 80C4  
                                     l21741 1456                                       l22429 4CF0  
                                     l23173 754C                                       l23165 7528  
                                     l23093 7430                                       l23085 741A  
                                     l23069 73EE                                       l22455 7088  
                                     l22471 6CD8                                       l21479 8D00  
                                     l20943 9116                                       l21751 1538  
                                     l21743 14F0                                       l21735 1432  
                                     l21727 13EA                                       l21719 13A2  
                                     l21671 11F2                                       l21663 11AA  
                                     l21655 1162                                       l21647 111A  
                                     l21639 10D2                                       l22447 4E1C  
                                     l23159 750C                                       l23079 7408  
                                     l22377 813C                                       l22369 80EC  
                                     l21761 1580                                       l22723 2C1C  
                                     l22643 6E5A                                       l22379 8142  
                                     l22731 973A                                       l22547 2446  
                                     l22467 6C2C                                       l21923 94CE  
                                     l21915 9474                                       l21755 155C  
                                     l21747 1514                                       l21763 159C  
                                     l21691 12A6                                       l21683 125E  
                                     l21675 1216                                       l21667 11CE  
                                     l21659 1186                                       l22811 4770  
                                     l22635 1C70                                       l22555 69FE  
                                     l21909 A4C8                                       l22397 4A98  
                               _GfY_current 0567                                       l22647 6F06  
                                     l21695 12CA                                       l21687 1282  
                                     l21679 123A                                       l22399 4AC6  
                                     l22559 6AAA                                       l22745 898C  
                                     l22921 7C34                                       l22841 49DE  
                                     l22825 48B8                                       l21699 12EE  
                                     l22851 4A1C                                       l22757 4EA8  
                                     l22925 7C80                                       l22837 493C  
                                     l22845 49FC                                       l22783 5132  
                                     l22775 507A                                       l21975 9E56  
                                     l22855 4A2E                                       l22769 5014  
                                     l22929 7CC8                                       l22961 92D0  
                                     l22937 AF1A                                       l21987 9E82  
                                     l21979 9E66                                       l22971 92F2  
                                     l22981 931C                                       l22869 6068  
                                     l22975 9306                                       l22895 62D6  
                                     l22985 932C                                       l22987 9332  
                                     l19511 6582                                       l19505 6548  
                                     l19603 8248                                       l19461 8A50  
                                     l19453 89FE                                       l19533 6602  
                                     l19517 6592                                       l19535 6610  
                                     l19527 65D4                                       l19607 8266  
                                     l19623 983C                                       l19481 8AE2  
                                     l19465 8A70                                       l19457 8A12  
                                     l19553 66C6                                       l19545 6658  
                                     l19537 661E                                       l19801 41B2  
                                     l19475 8AC6                                       l19467 8AA0  
                                     l19459 8A20                                       l19563 6714  
                                     l19547 6666                                       l19539 662A  
                                     l19635 9870                                       l19651 98C0  
                                     l19469 8AAE                                       l19573 8182  
                                     l19637 987C                                       l19629 9852  
                                     l19655 98D4                                       l19647 98B2  
                                     l19639 9882                                       l19671 A0BA  
                                     l19807 4284                                       l19593 820A  
                                     l19745 90A4                                       l19913 7990  
                                     l19905 793C                                       l19761 59AE  
                                     l19579 81BC                                       l19835 7772  
                                     l19691 A126                                       l19683 A104  
                                     l19675 A0CE                                       l19667 A0AA  
                                     l19819 AE7E                                       l19597 8228  
                                     l19925 79C8                                       l19829 7738  
                                     l19677 A0DA                                       l19935 79F8  
                                     l19679 A0E0                                       l19687 A112  
                                     l19783 3F3E                                       l19937 7A08  
                                     l19929 79DC                                       l19865 7840  
                                     l19769 5A9E                                       l19793 403C  
                                     l19947 A1FC                                       l19971 9656  
                                     l19891 78E8                                       l19875 7870  
                                     l19949 A20C                                       l19885 78C2  
                                     l19877 7880                                       l19869 7854  
                                     l19789 4010                                       l19959 AAE4  
                                     l19967 9616                                       l19991 842C  
                                     l19977 969A                                       ?_main 0025  
                           __end_of___awdiv 98DE                                       _EEADR 000F62  
                           __end_of___ftadd 673A                                       STR_10 FFC5  
                                     STR_11 FFC5                                       STR_12 FFF1  
                                     STR_20 FFBE                                       STR_13 FFF1  
                                     STR_21 FFC5                                       STR_30 FFF1  
                                     STR_22 FFC5                                       STR_14 FFBE  
                                     STR_31 FFF1                                       STR_23 FFC5  
                                     STR_15 FFD3                                       STR_16 FFD3  
                                     STR_24 FFC5                                       STR_40 FFF4  
                                     STR_32 FFF4                            __end_of_B_PF_Avg 3140  
                                     STR_17 FFD3                                       STR_25 FFC5  
                                     STR_33 FF54                                       STR_41 FCFD  
                                     STR_18 FFBE                                       STR_26 FFC5  
                                     STR_50 FFF4                                       STR_42 FFF4  
                                     STR_34 FFF4                                       STR_19 FFBE  
                                     STR_27 FFC5                                       STR_51 FF6E  
                                     STR_43 FED6                                       STR_35 FEA3  
                                     STR_28 FFF1                                       STR_60 FFF4  
                                     STR_52 FFF4                                       STR_44 FFF4  
                                     STR_36 FFF4                             __end_of___awmod A130  
                                     STR_29 FFF1                                       STR_45 FFDE  
                                     STR_61 FFA2                                       STR_53 FF94  
                                     STR_37 FEAE                                       STR_70 FFF4  
                                     STR_62 FFF4                                       STR_54 FFF4  
                                     STR_46 FFF4                                       STR_38 FFF4  
                                     STR_39 FF5D                                       STR_63 FEB8  
                                     STR_71 FE98                                       STR_47 FE77  
                                     STR_55 FE6C                                       STR_80 FFF4  
                                     STR_72 FFF4                                       STR_64 FFF4  
                                     STR_56 FFF4                                       STR_48 FFF4  
                                     STR_73 FF30                                       STR_65 FF12  
                                     STR_81 FE82                                       STR_57 FE61  
                                     STR_49 FDCF                                       STR_90 FFF1  
                                     STR_82 FFF4                                       STR_74 FFF4  
                                     STR_66 FFF4                                       STR_58 FFF4  
                                     STR_91 FFF1                                       STR_75 FF8D  
                                     STR_83 FF7E                                       STR_67 FEC2  
                                     STR_59 FDB3                                       STR_92 FFF1  
                                     STR_84 FFF4                                       STR_76 FFF4  
                                     STR_68 FFF4                                       STR_93 FFF1  
                                     STR_85 FF9B                                       STR_69 FE56  
                                     STR_77 FE34                                       STR_94 FFF1  
                                     STR_86 FFF4                                       STR_78 FFF4  
                                     STR_95 FFF1                                       STR_87 FF66  
                                     STR_79 FDA5                                       STR_96 FFBE  
                                     STR_88 FFF4                                       STR_97 FFF1  
                                     STR_89 FF39                                       STR_98 FFF1  
                                     STR_99 FFF1                             __end_of___ftdiv 83F2  
                           __end_of___ftneg ADAA                             __end_of___lldiv 9A58  
                                     ?_sqrt 00B1                             __end_of___ftmul 82A6  
                                     _T0CON 000FD5                             ___awdiv@divisor 0068  
                           __end_of___llmod A308                             __end_of___ftsub AB0E  
                           __end_of___fttol 8536                                       u14030 03B2  
                                     u13311 774E                                       u14035 03A6  
                                     u14220 083C                                       u12711 64E8  
                                     u12721 6506                                       u13521 8408  
                                     u13291 7714                                       u13540 8452  
                                     u12921 815E                                       u13545 8448  
                                     u14611 82BC                                       u12941 8198  
                                     u13750 576C                                       u13910 01FE  
                                     u14631 82F6                                       u13680 A35C  
                                     u15450 ACA4                                       u15370 A634  
                                     u13770 57D4                                       u14715 93D4  
                                     u13917 01F4                                       u16430 5C12  
                                     u14590 9990                                       u18007 8E8E  
                                     u13688 A360                                       u14680 8C5A  
                                     u16440 5C14                                       u18017 A190  
                                     u13970 029E                                       u18027 A1C2  
                         _Pitch_EP_Err_Flag 00E7                                       u17600 7BB0  
                                     _T7CON 000F3D                         _Turbine_Under_speed A8AA  
                                     u13977 0294                                       u17610 7C44  
                                     u15850 A804                                       u17620 7C90  
                                     u17630 7CD8                                       u17810 A158  
                                     u17780 9362                                       u17960 754A  
                               _GiMinutes_1 00DB                                 _GiMinutes_2 0013  
                               _GiMinutes_3 00DD                                       _BV_PS 027E  
                           ___awdiv@counter 006A                                       _KVA_1 0582  
                                     _B_Deg 0642                                       _B_Rad 0522  
                                     _TX1IF 007CF4                                       _TX2IF 007D24  
                            ?_Two_Sec_Delay 0025                                       _PORTD 000F83  
                                     _GcMin 015D                                       _GcSec 015F  
                        __end_ofsin@coeff_a FC3C                                       _GiDay 05CA  
                        __end_ofsin@coeff_b FC48                                       _Gf_KW 056D  
                                     _GfKva 0555                                       _TXREG 000FAD  
                                     _Check 02BA                                       _RV_PS 029A  
                                     _R_Deg 0666                                       _R_Rad 059A  
                                     _YV_PS 02B4                                       _Y_Deg 066F  
                              ___lltoft@exp 0070                                       _Dummy 05C4  
                                     _Y_Rad 05BE                          __size_of_UART_Data 0CDA  
                                     _Hours 02D4                             _GCB_phasev_flag 02BD  
                            ?_Volt_Curr_Avg 0025          __end_of_Ramp_Up_Slip_Error_Trigger 87AC  
                _Ramp_Up_Slip_Error_Trigger 8676                               _Y_V_Avg_Steps 04F9  
                             ___awtoft@sign 0030                __end_of_Turbine_RPM_Initiate B06E  
                           __end_of_dpowers FBDF                                       _floor 8BFA  
                                     _frexp A308                                       _errno 05F0  
                                     _scale 3DBA                             __end_of_isdigit AE88  
                    _Timer1_Initial_counter 0186                               ___ftpack@sign 0064  
                          __end_of_RTC_Init AF8A                                       _putch B02C  
                   __end_of_Last_Five_Error AF4A                  ?_Timer0_OneSecond_Function 0025  
                         __end_of_I2C_Start B0E6                           __end_of_I2C_Write AFE0  
                          _GRPM_Pulse_width 02F4                                       sin@x2 00BD  
                                     tablat 000FF5                            __end_ofi2___ftge A428  
                         ??_Timer1_Initiate 0060                      __size_of_One_Sec_Delay 002A  
                                     sqrt@a 00B1                     __size_of_VFD_RS485_Data 0072  
                                     sqrt@i 00BD                                       sqrt@q 00BE  
                                     sqrt@x 00C1                                       sqrt@z 00BA  
                                     status 000FD8                            __end_of_R_PF_Avg 296A  
                      ?_Turbine_Under_speed 0025                                 _Bcurr_V_Old 020C  
                               _Bcurr_V_New 00F4                          __size_ofi2___ftadd 01AC  
                         ??_int_eeprom_read 0062                                 _R_Gap_Ratio 010F  
                  __size_of_Error_Flag_Kill 00CA                       _Rotor_Slip_Error_Flag 0179  
                           __initialization 9BC6            __end_of_RS485_Data_communication A1D0  
                    __end_of_Volt_Curr_Read 4E34                            __end_of_Y_PF_Avg 2194  
                              __end_of_main 7552                             ??_RPM_Data_Kill 0060  
                        __size_of_R_PF_Calc 022E                                __end_of_sqrt 739E  
            __size_of_VFD_RS485_Data_filter 0082                            _VFD_Freq_Step_up 8CF8  
             __end_of_VFD_RS485_Data_filter A52E                            __end_of_Read_Adc AB92  
                               _Avg_Current 063C                        _Gc_TRPM_Rampup_Error 02D0  
                               ?i2___ftpack 0025                               _Initial_Check 02D5  
                                    ??_main 00C4                               ___fttol@sign1 0093  
                ??_Wind_Speed_Error_Trigger 00A2         __end_of_Last_3_EEPROM_ERROR_Trigger 90C4  
               _Last_3_EEPROM_ERROR_Trigger 8FD6                 _Timer1_OF_counter_Wind_temp 03FC  
                          _Gf_Turbine_RPM_1 0579                                      ??_sqrt 00B4  
                             __activetblptr 000003                        _Wind_Cut_Out_Counter 019C  
                               _Avg_Voltage 063F                                _WRPM_Counter 02AC  
                    _VFD_SHORT_CIRCUIT_fLAG 02AA                        __size_of__tdiv_to_l_ 019E  
       _Gi_Timer1_OF_counter_Generator_Temp 03E8                         __size_of_OSCILLATOR 0006  
                         _Timer0_RS485_flag 05DC                                   ??_RAMP_UP 00B4  
               ??_Error_Checking_One_Second 00B4                               _Turbine_state 00F0  
                        __size_of_Cons_Gene 010C                                 _S_S_Counter 017A  
                       _Error_Scan_start_up 90C4                          __size_of_Y_PF_Calc 022E  
                   ??_Wind_Speed_2_Initiate 0060                                      _ADCON0 000FC2  
                                    _ADCON1 000FC1                                      _ADCON2 000FC0  
                                    _CCP1IE 007D19                                      ?_floor 00A3  
                                    _CCP1IF 007D21                                      _CCP3IE 007DB0  
                                    _CCP3IF 007DB8                                ?_IO_Initiate 0025  
                                    _CCP4IE 007DB1                                      _CCP4IF 007DB9  
                                    _CCP5IE 007DB2                                      _CCP5IF 007DBA  
                                    _CCP6IE 007DB3                                      _CCP6IF 007DBB  
                                    _CCP7IE 007DB4                                      ?_frexp 0060  
                                    _CCP7IF 007DBC                                      _CCP8IE 007DB5  
                                    _CCP8IF 007DBD                            __end_of___altoft A26E  
                          ___llmod@dividend 006D                                      ?_scale 0083  
                                    STR_100 FFF1                                      STR_101 FFF1  
                                    STR_110 FFF1                                      STR_102 FFF1  
                                    STR_111 FFF1                                      STR_103 FFF1  
                                    STR_112 FFF1                                      STR_104 FFF1  
                                    STR_120 FFFA                                      STR_200 FC48  
                                    STR_121 FFFC                                      STR_113 FFF1  
                                    STR_105 FFF1                                      STR_201 FFF4  
                                    STR_122 FFFA                                      STR_114 FFF1  
                                    STR_106 FFF1                                      STR_130 FF42  
                                    STR_210 FECC                                      STR_202 FCA2  
                                    _ADRESH 000FC4                           __end_of_B_PF_Calc 700A  
                                    STR_115 FFF1                                      STR_107 FFF1  
                                    STR_211 FFF4                                      STR_203 FFF4  
                                    STR_131 FFF4                                      STR_123 FFF4  
                                    STR_116 FFF1                                      STR_108 FFF1  
                                    STR_212 FF76                                      STR_124 FF26  
                                    STR_132 FD6B                                      STR_140 FD3E  
                                    STR_220 FCD9                                      STR_204 FC8F  
                                    STR_117 FFF1                                      STR_109 FFF1  
                                    STR_221 FFF4                                      STR_213 FFF4  
                                    STR_205 FFF4                                      STR_141 FFF4  
                                    STR_133 FFF4                                      STR_125 FFF4  
                                    STR_118 FFF1                                      STR_150 FFB0  
                                    STR_206 FE8D                                      STR_134 FE4B  
                                    STR_126 FE40                                      STR_142 FD4D  
                                    STR_214 FD0F                                      STR_222 FC63  
                                    _ADRESL 000FC3                                      STR_223 FFF4  
                                    STR_215 FFF4                                      STR_207 FFF4  
                                    STR_151 FFF4                                      STR_143 FFF4  
                                    STR_135 FFF4                                      STR_127 FFF4  
                                    STR_119 FFFC                                      STR_144 FFCC  
                                    STR_152 FFB7                                      STR_160 FEF4  
                                    STR_136 FE28                                      STR_128 FDF6  
                                    STR_208 FDC1                                      STR_216 FCC7  
                                    STR_224 FC7B                                      STR_225 FFFC  
                                    STR_217 FFF4                                      STR_209 FFF4  
                                    STR_161 FFF4                                      STR_153 FFF4  
                                    STR_145 FFF4                                      STR_137 FFF4  
                                    STR_129 FFF4                                      STR_226 FFFA  
                                    STR_170 FD5E                                      STR_162 FFEA  
                                    STR_154 FFA9                                      STR_138 FD97  
                                    STR_146 FD2F                                      STR_218 FCB5  
                                    STR_219 FFF4                                      STR_171 FFF4  
                                    STR_163 FFF4                                      STR_155 FFF4  
                                    STR_147 FFF4                                      STR_139 FFF4  
                                    STR_227 FF86                                      STR_164 FFE8  
                                    STR_156 FEFE                                      STR_180 FE03  
                                    STR_148 FD7A                                      STR_172 FD5C  
                                    STR_181 FFF4                                      STR_173 FFF4  
                                    STR_165 FFF4                                      STR_157 FFF4  
                                    STR_149 FFF4                                      _EEDATA 000F61  
                                    STR_190 FCC2                                      STR_166 FFED  
                                    STR_182 FF4B                                      STR_174 FF1C  
                                    STR_158 FF08                                      STR_191 FFF4  
                                    STR_183 FFF4                                      STR_175 FFF4  
                                    STR_167 FFF4                                      STR_159 FFF4  
                                    STR_168 FFE3                                      STR_192 FE1C  
                                    STR_176 FE10                                      STR_184 FD1F  
                                    STR_193 FFF4                                      STR_185 FFF4  
                                    STR_177 FFF4                                      STR_169 FFF4  
                                    STR_178 FEE0                                      STR_194 FDE9  
                                    STR_186 FD89                                      _CCPR1H 000FBD  
                                    STR_195 FFF4                                      STR_187 FFF4  
                                    STR_179 FFF4                                      STR_188 FFD9  
                                    STR_196 FEEA                                      STR_197 FFF4  
                                    STR_189 FFF4                                      STR_198 FDDC  
                                    _CCPR1L 000FBC                                      _CCPR3H 000F4B  
                                    STR_199 FFF4                          __size_of_Freq_Calc 01D6  
                                    _CCPR4H 000F79                                      _CCPR5H 000F76  
                                    _CCPR3L 000F4A                                      _CCPR6H 000F73  
                                    _CCPR4L 000F78                          __size_of_i2c_NoAck 000A  
                                    _CCPR7H 000F70                                      _CCPR5L 000F75  
                                    _CCPR6L 000F72                                      _CCPR8H 000F48  
                                    _EECON2 000F7E                                      _CCPR7L 000F6F  
                                    _CCPR8L 000F47                                 _R_Current_1 0594  
                          ___awdiv@dividend 0066                                      _ANSEL0 007928  
                                    _ANSEL1 007929                                      _ANSEL2 00792A  
                                    _ANSEL3 00792B                                      _ANSEL4 00792C  
                                    _ANSEL6 00792E                                      _ANSEL8 007920  
                                    _ANSEL9 007921                            __end_of___awtoft AC46  
                                    ?_putch 0025                                      _BCDtoI 9368  
                          __end_of___ftpack 8AF0                            __end_of___lbtoft ADD8  
                                    _GODONE 007E11                               ?_Ramp_Up_Slip 0025  
                          __end_of___lltoft A5AA                         _DC_Bus_Voltage_Flag 014E  
                            __CFG_WDTEN$OFF 000000                                      i2l4537 0408  
                          _lcDC_Bus_Counter 02E0                                      i2l9270 5340  
                      _Grid_Frequency_Error 00E4                                      _RCREG2 000F1D  
         __end_of_Timer0_OneSecond_Function 9368                            __end_of___lwtoft AF06  
                    ?_Rampup_state_function 0025                             _GCR_phasev_flag 02C2  
                                    _OSCCON 000FD3                                      _TEMP_1 05DA  
                                    _B_Peak 011E                                      _B_Curr 00C4  
                                    _TMR0IE 007F95                                      _SPBRG1 000FAF  
                                    _TMR0IF 007F92                                      _SPBRG2 000F1E  
                                    _TMR1IE 007CE8                                      _TMR1IF 007CF0  
                                    _KVAr_1 0585                                      _TMR1ON 007E68  
                                    _TMR7IE 007DCB                                      _TMR7IF 007DD3  
                     ??_Turbine_Under_speed 00A2                                      _TRISB0 007C98  
                                    _B_Volt 0001                                      _TRISB1 007C99  
                                    _TRISC0 007CA0                                      _TRISB2 007C9A  
                                    _TRISA4 007C94                                      _TRISA5 007C95  
                                    _TRISD0 007CA8                                      _TRISC2 007CA2  
                                    _TRISB4 007C9C                                      _TRISD1 007CA9  
                                    _TRISC3 007CA3                                      _TRISB5 007C9D  
                                    _TRISE0 007CB0                                      _TRISD2 007CAA  
                                    _TRISC4 007CA4                                      _TRISE1 007CB1  
                                    _TRISC5 007CA5                                      _TRISF1 007CB9  
                                    _TRISE3 007CB3                                      _TRISF3 007CBB  
                                    _TRISF4 007CBC                                      _TRISE7 007CB7  
                                    _GcDate 015B           __size_of_Turbine_OverLoaded_Error 005C  
                                 ??_i2c_Ack 0060                                      _GiData 028A  
                                    _TXREG1 000FAD                                      _TXREG2 000F1C  
                                    _GcHour 015C                   ?_Turbine_OverLoaded_Error 0025  
                        _Grid_Maximum_Power A9BE                                   ??_Grid_OV 00A2  
                                 ??_Grid_UV 00A2                                      _GcYear 0160  
                                    _Data_1 0500                                      _GfKvar 0558  
                        _Volt_Curr_Avg$8055 00B4                                      _GiYear 03E6  
                                    _R_Peak 012E                                      _R_Curr 00CD  
                                    _Gfwind 057F                                      _R_Volt 0007  
                      _Pitch_PS_ON_Function AC7C                                      _Y_Peak 0148  
                  _Turbine_Ramp_up_1_Second AFBC                                      _Y_Curr 00D6  
                                    _Errors 001B                              __CFG_PWRTEN$ON 000000  
                            __CFG_XINST$OFF 000000                               ??_Timer7_Init 0060  
                                    _Y_Volt 0010                                      _Temp_1 02DA  
                                    _Temp_2 02DB                                      _Temp_3 02DC  
                                    _Temp_4 02DD                                      _Temp_5 02DE  
                                    _Temp_6 02DF            __size_of_PM_Timer_Initialization 000A  
                      ?_Error_Scan_start_up 0025                            __end_of__powers_ FC2D  
                  ?_Stopping_state_function 0025                              _lc_Avg_Counter 02E1  
                         __end_of_UART_Data 19BE                       I2C_Write@v_i2cData_u8 0060  
                           ?_Volt_Curr_Read 0025                                      ___ftge 95D6  
                       ?_Grid_Maximum_Power 0025                                   BCDtoI@BCD 0074  
                                    ___wmul ACB2                    __size_of_Turbine_RPM_Cal 03B4  
                                 ??___awdiv 006A                                   ??___ftadd 0093  
                                 ??___awmod 0064                                  _Motor_slip 00CA  
                            _Timer0_counter 05DE                     ?_startup_state_function 0025  
                                 ??___ftdiv 00AB                                   ??___ftneg 0086  
                                    _digit1 05E6                                      _digit2 05E8  
                                    _digit3 05EA                                      _digit4 05EC  
                                    _digit5 05EE                                   ??___lldiv 0068  
                                 ??___ftmul 007A                                   ??___llmod 0075  
                                 ??___ftsub 00B1                                   ??___fttol 008E  
                            _Timer1_counter 02A8                                  _Temprature 0224  
                                    _fround 581C                                      clear_0 9BFC  
                                    clear_1 9C08                                      clear_2 9C16  
                                    clear_3 9C2A                                      clear_4 9C3E  
                                    clear_5 9C50                                      clear_6 9C5C  
                                    clear_7 9C68                            ___awdiv@quotient 006C  
                        __size_of_Temp_Read 017C                             ___awmod@divisor 0062  
                _RAMP_UP_TURBINE_CUT_IN_RPM 04AE                 _lc_Rotor_Slip_Error_Counter 02E4  
                             _One_Sec_Delay AEB2                                      _wind_2 04D5  
                           ___awmod@counter 0064                                      _printf 0000  
                           ??_Two_Sec_Delay 0060                    ??_Generator_RPM_Initiate 0060  
                                _Power_Calc 673A                                  _Wind_Cap_2 02B2  
              __size_of_Grid_Phase_Sequence 0020                                      floor@i 00A6  
                                    floor@x 00A3                       ___ftmul@f3_as_product 007E  
                       int_eeprom_read@temp 0062                               _B_C_Avg_Steps 04DB  
                                _Wind_Spd_2 0230                                   ??_isdigit 0060  
                           ??_Volt_Curr_Avg 00B4                                   ?_I2C_Init 0025  
                                 ?_I2C_Read 0025                       _Turbine_Restore_Check 9C78  
                                _Wind_Speed 0233                           __end_ofi2___ftadd 76FE  
                            i2___ftadd@exp1 0038                              i2___ftadd@exp2 0037  
                                 ?_I2C_Stop 0025                                      sin@sgn 00C0  
                          _Capacitor_Adding A5AA                              i2___ftadd@sign 0036  
                     _Turbine_Restore_Error 018A                       _VFD_Contactor_IO_init B0B8  
                              __mediumconst FBB6                         _Gc_Rotor_Slip_Error 02CF  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                              _TRPM_Frequency 04EA  
                      ??_Grid_Maximum_Power 00A2                                      sqrt@og 00B7  
                          _Stopping_Counter 017E                                 _Consumption 02BB  
                                _Start_Stop 98DE                               _B_PF_Avg$8120 0678  
                             _B_PF_Avg$8121 067B                               _B_PF_Avg$8130 0696  
                             _B_PF_Avg$8122 067E                               _B_PF_Avg$8131 0699  
                             _B_PF_Avg$8123 0681                               _B_PF_Avg$8116 06C0  
                             _B_PF_Avg$8140 06B4                               _B_PF_Avg$8132 069C  
                             _B_PF_Avg$8124 0684                               _B_PF_Avg$8117 06C3  
                             _B_PF_Avg$8141 06B7                               _B_PF_Avg$8133 069F  
                             _B_PF_Avg$8125 0687                               _B_PF_Avg$8118 06C6  
                             _B_PF_Avg$8142 06BA                               _B_PF_Avg$8134 06A2  
                             _B_PF_Avg$8126 068A                               _B_PF_Avg$8143 06BD  
                             _B_PF_Avg$8135 06A5                               _B_PF_Avg$8127 068D  
                             _B_PF_Avg$8119 0675                               _B_PF_Avg$8136 06A8  
                             _B_PF_Avg$8128 0690                               _B_PF_Avg$8137 06AB  
                             _B_PF_Avg$8129 0693                               _B_PF_Avg$8138 06AE  
                             _B_PF_Avg$8139 06B1                           __end_of_R_PF_Calc 6DDC  
                            ??_Ramp_Up_Slip 00A2                                  _Total_Pf_1 05AC  
             __size_of_EEPROM_Error_Monitor 0272                                 _Key_Counter 016C  
                            _Motor_Slip_Cal 8AF0                            ?_Last_Five_Error 0025  
                       _Gf_Turbine_RPM_Prev 057C                           _Gf_TRPM_Frequency 0570  
                             _One_Time_Flag 0173                  __end_of_Error_Scan_Ramp_up 9BC6  
                 __size_of_UART_Data_String 0708                                  _Rotor_slip 00D3  
                               _Y_Gap_Ratio 011B                                  __accesstop 0060  
                   __end_of__initialization 9C6E                                  ___altoft@c 0099  
                          _Turbine_Pitching B102                                  ___ftadd@f1 008D  
                                ___ftadd@f2 0090                         __size_ofi2___ftpack 00AE  
                         ?_int_eeprom_write 0060                        _Initial_Delay_Second 012A  
                                ___ftge@ff1 0099                                  ___ftge@ff2 009C  
               __size_of_VFD_PS_ON_Function 0074                            ??_Grid_Frequency 00A2  
                              eval_poly@res 00A2                               ___rparam_used 000001  
                     __end_of_VFD_Data_Kill AE06                  __end_of_Error_Scan_Running 9E8C  
                                ___ftdiv@f1 00A5                                  ___ftdiv@f2 00A8  
                                ___ftdiv@f3 00AF                       ?_Pitch_PS_ON_Function 0025  
                                 ?_B_PF_Avg 0025                _Gc_Pitch_Coil_Feedback_Error 02CE  
                     __end_of_Generator_RPM AAC2                                  ___ftneg@f1 0083  
                                ___awtoft@c 002D                   _Error_Checking_One_Second 943C  
                        ??_int_eeprom_write 0064                              i2___ftpack@arg 0025  
               __end_of_Pitch_Solenoid_init B0EE                              i2___ftpack@exp 0028  
                     ??_Error_Scan_start_up 0060                                  ___lbtoft@c 006B  
                    _Gf_Wind_Cut_In_Counter 02D3                                 _Frequency_1 0528  
                                ___ftmul@f1 0074                                  ___ftmul@f2 0077  
                                ___ftsub@f1 00AB                                  ___ftsub@f2 00AE  
            __end_of_startup_state_function AF2A                                  ___fttol@f1 008A  
                         __end_of_Cons_Gene 89E4                              __pcstackCOMRAM 0025  
                         __end_of_Y_PF_Calc 6BAE                                __pidataBANK1 B106  
                              __pidataBANK5 B108                                  ___lltoft@c 0068  
                           _Wind_Speed_10_2 05B2                        _Turbine_RPM_Initiate B062  
                         __end_of_Freq_Calc 71E0                           __end_of_i2c_NoAck B090  
                             __end_of_floor 8CF8                      _TRPM_OverSpeed_Counter 017F  
                             __end_of_frexp A398                               __end_of_scale 42B0  
                        _One_sec_Delay_Flag 0174                          _Two_sec_Delay_Flag 018E  
                             __end_of_putch B03A                              ?_One_Sec_Delay 0025  
                                 ?_RTC_Init 0025                    _RS485_Data_communication A130  
                       __end_of_Timer7_Init B07A                           ??_Error_Flag_Kill 0060  
                            _Gf_TRPM_Time_1 0576                                  ___lwtoft@c 0068  
                                 ?i2___ftge 0025                 ??_Turbine_Start_up_1_Second 0060  
                              ?_usart2_init 0025                          _Grid_Minimum_Power A962  
                                __div_to_l_ 789C                         int_eeprom_write@adr 0060  
                       int_eeprom_write@dat 0062                                 _Y_Current_1 05BB  
                                ??_I2C_Init 0060                                  ??_I2C_Read 0060  
                                 ?_R_PF_Avg 0025                __size_of_Wind_Speed_Initiate 000C  
                                ??_I2C_Stop 0060                     ?_Generator_One_Feedback 0025  
                   __size_of_Phase_Sequence 0166                            ??_Pitch_Feedback 0064  
                          ??_Rotor_Slip_Cal 00B4                         _Five_sec_Delay_Flag 02BC  
                    __end_of_Motor_Slip_Cal 8BFA                             __div_to_l_@exp1 006B  
                                   ??_floor 00A6                         ?_Grid_Minimum_Power 0025  
                           __div_to_l_@cntr 006A                                     ??_frexp 0065  
              __end_of_Power_Meter_Error_IO B0CC                               _R_C_Avg_Steps 04E4  
                                   ??_scale 0086                                 _Phase_Angle 0175  
                     _PM_ADC_Initialization B0AE                             __div_to_l_@quot 0066  
                                 ?_Y_PF_Avg 0025                    __size_of_RTC_GetDateTime 00B8  
                                   ??_putch 0060                                     ?_BCDtoI 0074  
                                __pbssBANK0 00C4                                  __pbssBANK1 0100  
                                __pbssBANK2 0200                                  __pbssBANK3 0300  
                                __pbssBANK4 0400                                  __pbssBANK5 0500  
                                __pbssBANK6 0600                            _KW_Maximum_Error 016A  
                        __size_of_eval_poly 00F4                 __end_of_Communication_Error A848  
                            _VFD_RS485_Data A698                                   ?_Read_Adc 0060  
                         __end_of_Temp_Read 7BA0                                ?_usart_str_1 0025  
                              ?_usart_str_2 0025                               _R_PF_Avg$8060 06C6  
                             _R_PF_Avg$8061 0675                               _R_PF_Avg$8070 0690  
                             _R_PF_Avg$8062 0678                               _R_PF_Avg$8071 0693  
                             _R_PF_Avg$8063 067B                               _R_PF_Avg$8080 06AE  
                             _R_PF_Avg$8072 0696                               _R_PF_Avg$8064 067E  
                             _R_PF_Avg$8081 06B1                               _R_PF_Avg$8073 0699  
                             _R_PF_Avg$8065 0681                               _R_PF_Avg$8058 06C0  
                             _R_PF_Avg$8082 06B4                               _R_PF_Avg$8074 069C  
                             _R_PF_Avg$8066 0684                               _R_PF_Avg$8059 06C3  
                             _R_PF_Avg$8083 06B7                               _R_PF_Avg$8075 069F  
                             _R_PF_Avg$8067 0687                               _R_PF_Avg$8084 06BA  
                             _R_PF_Avg$8076 06A2                               _R_PF_Avg$8068 068A  
                             _R_PF_Avg$8085 06BD                               _R_PF_Avg$8077 06A5  
                             _R_PF_Avg$8069 068D                               _R_PF_Avg$8078 06A8  
                             _R_PF_Avg$8079 06AB                           _Grid_Over_Current 8536  
                             __div_to_l_@f1 0060                               __div_to_l_@f2 0063  
                              ??_OSCILLATOR 0060                                  ??_B_PF_Avg 00C4  
                     _lc_Pitch_Coil_Counter 02E3                               _Gf_Motor_Slip 0651  
                        ?_Grid_Over_Current 0025               __size_of_PM_IO_Initialization 0062  
                                   ?___ftge 0099                        ??_Grid_Minimum_Power 00A2  
                                   ?___wmul 006E                       ?_Turbine_RPM_Initiate 0025  
                      _GENERATOR_RPM_THEORY 0212                                     _CCP10IE 007DB7  
                                   _CCP10IF 007DBF                                     _CCP1CON 000FBB  
                                   _CCP3CON 000F49                                     _CCP4CON 000F77  
                                   _CCP5CON 000F74                                     _CCP6CON 000F71  
                                   _CCP7CON 000F6E                                     _CCP8CON 000F46  
                                 ?___altoft 0099                                     _CCPR10H 000F42  
                                   _CCPR10L 000F41                                     ?_fround 0083  
                                ??_RTC_Init 0061                         ??_Grid_Over_Current 00A2  
                                 ?___awtoft 002D                                   ?___ftpack 0060  
                                 ?___lbtoft 0068                           _Power_Factor$8144 00B4  
                              usart_str@str 0060                                     _ANSEL10 007922  
                                   _ANSEL11 007923                                     _ANSEL16 007918  
                                   _ANSEL17 007919                                     _ANSEL18 00791A  
                                   _ANSEL19 00791B                                     ?_printf 00B1  
                                 ?___lltoft 0068               _Timer1_OF_counter_Wind_2_temp 03FA  
                                ??i2___ftge 002B                                     _T1CKPS0 007E6C  
                                   _T1CKPS1 007E6D                                 ?_Power_Calc 0025  
                                   _BGR_Avg 02E5                                     _BGR_Arr 0400  
                    ?_Turbine_Restore_Check 0025                                   ?___lwtoft 0068  
                 __size_of_Wind_Speed_2_Cal 026E              __end_of_Generator_One_Feedback A7DE  
                                   u1204_41 7562                                     u1205_41 7576  
           __size_of_Generator_RPM_Initiate 000E                           ??_Turbine_RPM_Cal 00B4  
                    ?_VFD_Contactor_IO_init 0025                           _Grid_Over_current 001C  
                                   i2l10603 9FC8                                     i2l10630 75C0  
                                   i2l10641 7670                                     i2l10650 768C  
                                   i2l10626 7596                                     i2l18011 A61C  
                                   i2l18007 A602                                     i2l18017 AFB4  
                                   i2l18123 A3F8                                     i2l18119 A3C8  
                                   i2l18129 A424                                     i2l19025 AC22  
                                   i2l18091 9F80                                     i2l18083 9F4A  
                                   i2l19043 75CE                                     i2l19037 75A4  
                                   i2l18095 9F96                                     i2l18087 9F58  
                                   i2l19071 763C                                     i2l18097 9FB4  
                                   i2l18089 9F62                                     i2l19065 7620  
                                   i2l18099 9FBE                                     i2l19067 762A  
                                   i2l19059 75FE                                     i2l19323 018C  
                                   i2l19085 76A8                                     i2l19077 765E  
                                   i2l19069 7634                                     i2l19413 03C2  
                                   i2l19309 00FA                                     i2l19095 76D8  
                                   i2l19079 7668                                     i2l19423 0406  
                                   i2l19407 03B0                                     i2l19351 0274  
                                   i2l19337 01E4                                     i2l19281 0072  
                                   i2l19371 02EA                                     i2l19285 0094  
                                   i2l19277 005E                                     i2l19383 032E  
                                   i2l19359 02B0                                     i2l19289 00A4  
                                   i2l19395 0372                                     i2l19299 00BA  
                           _Timer1_Initiate B010                                     i2l17993 A5CA  
                                ??_R_PF_Avg 00C4                                     i2l17999 A5E0  
                                   i2l18987 5344                                     _B_C_Gap 0516  
                                   _B_C_Arr 0469                                     _B_C_Max 0206  
                  __size_of_i2c_WaitForIdle 0012                                     _RAMP_UP 8DEE  
                             _Mot_Frequency 05F9                          _VFD_Run_Time_Error AB0E  
                          _Wind_Cut_In_Flag 019B                                     _B_V_Gap 0525  
                                   _B_V_Arr 0472                          __end_of_OSCILLATOR B102  
                                   _B_V_Max 0209                               _PW_Error_Flag 02D8  
                                   _SSP1ADD 000FC8                 ?_Ramp_Up_Slip_Error_Trigger 0025  
                                   _SSP1BUF 000FC9                            _lc_Current_T_RPM 027B  
                           ?_Motor_Slip_Cal 0025                               _Gf_Rotor_Slip 065A  
                                   _RGR_Avg 02EB                                     _RGR_Arr 0300  
                               ?_Start_Stop 0025                        _Gi_Timer1_OF_counter 0294  
                           _int_eeprom_read AE32                                     _RPM_PWM 02FA  
                             ?_VFD_IO_Error 0025                      __end_of_VFD_RS485_Data A70A  
                                ??_Y_PF_Avg 00C4                                     _GfG_rpm 0552  
                    __size_of_Pitch_Release 003C                    __end_of_VFD_Freq_Step_up 8DEE  
                                   _GcMonth 015E                                     _YGR_Avg 02EE  
                                   _YGR_Arr 035A                             __size_of_BCDtoI 00D4  
                                   _GfT_rpm 0564                 ??_Timer0_OneSecond_Function 00BC  
                                   _R_C_Gap 058E                                     _R_C_Arr 047B  
                                   _R_C_Max 010C                                     _GiHours 028C  
                                   _GiMonth 0290                      _Timer1_OF_counter_Wind 03F6  
                   _VFD_DC_EXTREM_LOW_Error 0192                        __size_of_IO_Initiate 0040  
                        __size_of_usart_str 0036                         ?_VFD_Run_Time_Error 0025  
                                ??_Read_Adc 0062                   __end_of_Grid_Over_Current 8676  
                                   _R_V_Gap 04B1                                     _R_V_Arr 0484  
                 _Turbine_Start_up_1_Second B09A                                     _R_V_Max 0112  
                                   _R_V_Old 00D0                                     _R_V_New 00F7  
                    ??_Pitch_PS_ON_Function 0060                                     _Y_C_Gap 05B5  
                                   _Y_C_Arr 048D                                     _Y_C_Max 026F  
                                   _i2c_Ack B090                                     _Grid_OV 7E7A  
                                   _Grid_UV 7D12                                   _I2C_Start B0DE  
                               _Temp_Sensor 03EE                                   _I2C_Write AFCE  
                                   _Y_V_Gap 05C1                                     _Y_V_Arr 0496  
                                   _Y_V_Max 0275                                     _Errors1 00E1  
                                   _Errors2 0150                                     _Errors3 0151  
                                   _Errors4 0152                                     _Errors5 0153  
                   _PM_Timer_Initialization B0A4                                     _Hours_1 02F6  
                                   _Hours_2 02F8                     __size_of_Five_Sec_Delay 002C  
                         __end_of__npowers_ FC06                              usart_str_1@str 0060  
                                   __Hparam 0000                              usart_str_2@str 0060  
                               _Rcurr_V_Old 021E                                 _Rcurr_V_New 00FA  
                                   _Minutes 016E                                  _scale$8150 0086  
                                   __Lparam 0000                         _Gc_Generator_One_Fb 02C9  
                               _Timer7_Init B06E                          _DC_BUS_Low_Counter 014D  
                           __size_of___ftge 00C8                             ??_One_Sec_Delay 0060  
                                   ___awdiv 9820                                     ___ftadd 64D2  
                                   ___awmod A08E                    _VFD_DC_Bus_Current_Error 018F  
                                   ___ftdiv 82A6                                     ___ftneg AD7A  
                                   ___lldiv 999C                             __size_of___wmul 0036  
                                   ___ftmul 8148                                     ___llmod A26E  
                                   ___ftsub AAC2                                     ___fttol 83F2  
                      __end_of_Ramp_Up_Slip 9F3A                 __size_of_Turbine_Over_Speed 0054  
                                ??___altoft 009D                                     __pcinit 9BC6  
                      ??_VFD_Run_Time_Error 0060                                ??i2___ftpack 002A  
                                ??___awtoft 0030                            _KW_Minimum_Error 016B  
                                ??___ftpack 0065                                   _BGR_Avg_1 0203  
                                ??___lbtoft 006B                           __end_of_eval_poly 8FD6  
                                 _BGR_Arr_1 045A                             __size_of_fround 02D0  
                                   __ramtop 1000                               ?_Power_Factor 0025  
                                ??___lltoft 006C                                     __ptext0 739E  
                                   __ptext1 AF8A                                     __ptext2 AF06  
                                   __ptext3 6980                                     __ptext4 19BE  
                                   __ptext5 B056                                     __ptext6 5FF6  
                                   __ptext7 B002                                     __ptext8 6264  
                                   __ptext9 4A96                             __size_of_printf 0CE4  
                             ?_VFD_Error_IO 0025                                  ??___lwtoft 006B  
                              __size_of_ISR 043C                                   _T1CONbits 000FCD  
                               ?__div_to_l_ 0060                                     _counter 05E2  
                                   _dpowers FBB7                                __size_of_cos 00C0  
                                   _isdigit AE5E                                __size_of_sin 0298  
                             ?_Wind_Average 0025                            ___awmod@dividend 0060  
                    ?_PM_ADC_Initialization 0025                              ??_VFD_IO_Error 0025  
                   ??_Rampup_state_function 00B5                             ?_VFD_RS485_Data 0025  
                              _GCG_rpm_flag 02C0                  ??_Turbine_Ramp_up_1_Second 0066  
                   __size_of_Wind_Speed_Cal 026E              __size_of_Wind_Speed_2_Initiate 000E  
                      end_of_initialization 9C6E               __end_of_Wind_Speed_2_Initiate B010  
                          _Five_Second_flag 0157                      I2C_Read@v_ackOption_u8 0060  
                          _UART_Data_String 3140                _RAMP_UP_GENERATOR_CUT_IN_RPM 04AB  
      __size_of_Last_3_EEPROM_ERROR_Trigger 00EE                            __CFG_BOREN$NOSLP 000000  
                                 _B_PF_Calc 6DDC                                   _GRPM_Time 049F  
                                 _B_PF_Flag 014A                                 _Wind_Time_1 04F3  
                               _Wind_Time_2 04CC                      _Generator_RPM_Initiate B048  
                                 _BV_PS_Max 03E4                            ??_Volt_Curr_Read 00A2  
                       _Grid_Phase_Sequence AF4A                                   i2u1068_40 A612  
                                ?_I2C_Start 0025                          __end_ofi2___ftpack 9FE8  
                                ?_I2C_Write 0025                         __size_of_Power_Calc 0246  
                         ??_RTC_GetDateTime 0064                             ___lldiv@divisor 0064  
                  __end_of_Capacitor_Adding A624                             ___lldiv@counter 006C  
                     _Motor_Slip_Error_Flag 0170                        _VFD_Run_Time_Counter 013E  
                    ??_Turbine_RPM_Initiate 0060                               _Pitch_Counter 0296  
                                 _RCSTAbits 000FAB                                     printf@c 01C6  
                                   printf@f 00B1                                     postdec1 000FE5  
                                   postdec2 000FDD                           _Capacitor_Counter 0120  
                                   postinc0 000FEE                                     postinc2 000FDE  
                             _Delay_counter 014F                               _Pitch_Release ABD2  
                         _One_Sec_Delay_vab 0172                              _GRPM_Frequency 04E1  
                         _Two_Sec_Delay_vab 018D                                   _B_Current 0519  
                      _VFD_DC_Bus_Low_Error 0191                   _Timer0_OneSecond_Function 9292  
                            __tdiv_to_l_@f1 0060                              _B_PF_Calc$8115 00B4  
                            __tdiv_to_l_@f2 0063                         __size_of_Start_Stop 00BE  
                   __end_of_Timer1_Initiate B01E                        _Power_Meter_Error_IO B0C2  
                     __end_of_RPM_Data_Kill 7D12                            _VFD_Temp_counter 05E0  
                                 _UART_Data 0CE4                        _Slip_Error_Counter_1 017C  
                            ??_Power_Factor 00B4                               ??__tdiv_to_l_ 0066  
                                 _RGR_Avg_1 021B                                   _RGR_Arr_1 03C6  
        __size_of_Error_Checking_One_Second 00D0                              ??_VFD_Error_IO 0060  
                         __end_of_usart_str AC7C                         _DC_BUS_High_Counter 014C  
                     _VFD_RS485_Data_filter A4AC                           _Ten_Sec_Counter_2 00EC  
                  __end_of_Turbine_Pitching B106                          _Five_Sec_Delay_vab 0156  
                      ?_Grid_Phase_Sequence 0025                     __end_of_int_eeprom_read AE5E  
                            ??_Wind_Average 00B4                              _Phase_Sequence 7FE2  
                          __CFG_FOSC$INTIO2 000000            __size_of_Stopping_state_function 00A6  
                   __size_of_DC_Bus_Voltage 00E2                                   _TRISAbits 000F92  
                                 _TRISCbits 000F94                        __size_of_usart2_init 0030  
                                 _TRISEbits 000F96                                   _TRISFbits 000F97  
                                 _TRISGbits 000F98                           __size_of_I2C_Init 0010  
                         __size_of_I2C_Read 0030                 __end_of_Turbine_Under_speed A906  
                         __size_of_I2C_Stop 0008                                   i2___ftadd 7552  
                                 _TRPM_Time 04ED                                   _YGR_Avg_1 026C  
                                 _YGR_Arr_1 03D5                           ??_i2c_WaitForIdle 0060  
                       _VFD__Run_Time_Error 0198                          _Wind_Pulse_width_2 02FE  
                               _Ycurr_V_Old 0278                                 _Ycurr_V_New 00FD  
                                 _Case_Call 01C7                              __end_of_BCDtoI 943C  
                __size_of_Grid_Over_Current 0140                   ??_PM_Timer_Initialization 0060  
                             _Pitching_FlAG 0298           __size_of_Wind_Speed_Error_Trigger 012C  
                                ?_B_PF_Calc 0025                   ?_Wind_Speed_Error_Trigger 0025  
                               ___ftdiv@exp 00B2                                   _GiHours_1 0126  
                                 _GiHours_2 00D9                                   _GiHours_3 0128  
                                 _R_PF_Calc 6BAE                                   _R_PF_Flag 0178  
                               printf@width 01BF                                   _RV_PS_Max 03EC  
                                 _TXSTAbits 000FAC                         _Gc_Motor_Slip_Error 02CC  
                                 _GiMinutes 028E                                   _GiSeconds 0292  
                  _Timer1_OF_counter_Wind_2 03F8                            _Timer0_1Sec_Flag 03F0  
                                _usart_init AF8A                              _Gf_Red_Current 0654  
                           i2___ftpack@sign 0029                             _Error_Flag_Kill 950C  
                       __size_of__div_to_l_ 0188                         _Wind_Speed_Initiate B056  
                ??_RS485_Data_communication 0061                        __size_of_usart_str_1 000E  
                      __size_of_usart_str_2 000E                       _Generator_One_Counter 0161  
                                 _Bcurr_Old 0645                                   _Bcurr_New 019E  
                               ___ftmul@exp 007D                           __size_of_B_PF_Avg 07D6  
                               _Turbine_RPM 000A                              ?_Pitch_Release 0025  
                     _Gf_VFD_DC_Bus_Voltage 065D                __end_of_EEPROM_Error_Monitor 5FF6  
                                 _Flag_temp 05C6                          _Error_Scan_Ramp_up 9B10  
                     ?_Power_Meter_Error_IO 0025                     _Gc_Grid_Phase_Unbalance 02CA  
                            _GCDc_high_flag 02BE                              __end_of___ftge 969E  
                                 _R_Current 0591         __size_of_Ramp_Up_Slip_Error_Trigger 0136  
                             _B_V_Avg_Steps 04DE                              __end_of___wmul ACE8  
                                ?_UART_Data 0025                               ?_PM_Error_Led 0025  
                            _Wind_Cap_Old_2 0146                              _Wind_Cap_New_2 0142  
                               _BAUDCONbits 000F65                                   _Cons_Gene 88D8  
                                 _Y_PF_Calc 6980                       ??_Grid_Phase_Sequence 0060  
                 __size_of_int_eeprom_write 0032                                   _Y_PF_Flag 019D  
                        _Error_Scan_Running 9DDC                      __end_of_Phase_Sequence 8148  
                                 _YV_PS_Max 03FE                                _GCT_rpm_flag 02C4  
                            __end_of_fround 5AEC                          _TURBINE_RPM_THEORY 04B4  
                            _B_Power_Factor 051F                            _Wind_Speed_2_Cal 6264  
                                 _Freq_Calc 700A                                   _i2c_NoAck B086  
                                 _Freq_Flag 0158                          _Total_Power_Factor 022A  
                                floor@expon 00A9                         ?_Error_Scan_Ramp_up 0025  
                            __end_of_printf 0CE4                           __size_of_RTC_Init 0020  
                     __end_of_Two_Sec_Delay AEB2                       _Timer_1_OverFlow_Time 05A6  
                            _VFD_Error_Flag 0193                        ?_Wind_Speed_Initiate 0025  
                       start_initialization 9BC6                            _Wind_Speed_Avg_2 04C6  
                         __size_ofi2___ftge 0090                                  eval_poly@d 009C  
                                eval_poly@n 009E                                  eval_poly@x 0099  
                               __end_of_ISR 0444                                   _Frequency 00C7  
                       __end_of__tdiv_to_l_ 789C                       __end_of_Volt_Curr_Avg 3DBA  
                       ?_Error_Scan_Running 0025                                 __end_of_cos 9820  
                               __end_of_sin 5D84                           __size_of_R_PF_Avg 07D6  
               __size_of_Grid_Maximum_Power 005C                                   _Y_Current 05B8  
                                ?i2___ftadd 002D   __end_of_Error_Checking_Interrupt_Overflow B0D6  
__size_of_Error_Checking_Interrupt_Overflow 000A          ?_Error_Checking_Interrupt_Overflow 0025  
       ??_Error_Checking_Interrupt_Overflow 0025           _Error_Checking_Interrupt_Overflow B0CC  
                                  ??_BCDtoI 0076                    _Turbine_OverLoaded_Error A906  
                __end_of_VFD_PS_ON_Function A698             _Timer1_OF_counter_Generator_Old 02A0  
           _Timer1_OF_counter_Generator_New 0134                 __end_of_Error_Scan_start_up 91B0  
                                frexp@value 0060                               _T_RPM_counter 0182  
                         __size_of_Y_PF_Avg 07D6                                  ?_R_PF_Calc 0025  
                                 _Minutes_1 016F                             ___llmod@divisor 0071  
                      ??_Error_Scan_Ramp_up 0066                                 ??_I2C_Start 0060  
                           ___llmod@counter 0075                                 ??_I2C_Write 0060  
                            _Y_PF_Calc$8086 00B4                              _Five_Sec_Delay AE06  
                         __size_of_Read_Adc 0040                    _Turbine_Under_Speed_Flag 018B  
                                 _Temp_Read 7A24                                   _Serial_No 00DF  
                     __size_of_Ramp_Up_Slip 00AE                                   _Time_Diff 04F0  
                  __size_of_Last_Five_Error 0020                                   _Rcurr_Old 0669  
                                 _Rcurr_New 01A1                        ??_Error_Scan_Running 00A2  
                           _Turbine_RPM_Cal 46E2                                   _Temp_sign 05A0  
                                 _Slip_Flag 017D                             _GCvfd_curr_flag 02C8  
                   _Turbine2Wheel_Ratio_Avg 022D                             _Turbine_RPM_Old 0118  
                           _Turbine_RPM_New 0115                                    ??___ftge 009F  
                            _Wind_Frequency 04BD                                _GRPM_Cap_Old 0124  
                              _GRPM_Cap_New 0122                                    ??___wmul 0072  
        __size_of_Turbine_Start_up_1_Second 000A                        __end_of_VFD_IO_Error AFBC  
                            ??_PM_Error_Led 002E                          int_eeprom_read@adr 0060  
                   ??_Turbine_Restore_Check 00A2                                 __pdataBANK1 01C7  
                               __pdataBANK5 05FC                            ?_Timer1_Initiate 0025  
                    ?_VFD_RS485_Data_filter 0025                                   _Wind_Time 04C9  
                                  ??_fround 0086                     ??_VFD_Contactor_IO_init 0060  
                                ?_Cons_Gene 0025                __size_of_Pitch_Solenoid_init 0008  
                                ?_Y_PF_Calc 0025                                _GRPM_Counter 0286  
                                  ??_printf 00B6                             ?_Phase_Sequence 0025  
                              ??_Power_Calc 00C4                                   _Total_Min 0188  
                           _Ten_Sec_Counter 00EB                                  ?_Freq_Calc 0025  
                                ?_i2c_NoAck 0025                           __size_of___altoft 009E  
                          ??_Motor_Slip_Cal 00B4                                  fround@prec 008C  
                     ??_Wind_Speed_Initiate 0060                            ?_int_eeprom_read 0060  
                         __size_of___awtoft 0038                           __size_of___ftpack 010C  
                           _Temperature_Avg 066C                           __size_of___lbtoft 002E  
                         __size_of___lltoft 007C                               _R_V_Avg_Steps 04E7  
                               __pbssCOMRAM 0001                            _Wind_Pulse_width 02FC  
                                 _Ycurr_Old 0672                                   _Ycurr_New 01A7  
                    __size_of_VFD_Data_Kill 002E                         _Gc_VFD_DC_Bus_Error 02D2  
                         __size_of___lwtoft 002A                                    ?_RAMP_UP 0025  
                             __pcstackBANK0 0060                               __pcstackBANK1 01AA  
                             __pcstackBANK6 0675                __end_of_PM_IO_Initialization A8AA  
                    __size_of_Generator_RPM 0054             _VFD_communication_Error_Counter 0199  
                    _DC_BUS_Current_Counter 014B                              _WRPM_Counter_1 02AE  
                              ??_Start_Stop 0064                              _Wind_Speed_0_2 0239  
                            _Wind_Speed_1_2 023F                              _Wind_Speed_2_2 0245  
                            _Wind_Speed_3_2 024B                              _Wind_Speed_4_2 0251  
                            _Wind_Speed_5_2 0257                              _Wind_Speed_6_2 025D  
                            _Wind_Speed_7_2 0263                              _Wind_Speed_8_2 0269  
                            _Wind_Speed_9_2 04C3            __end_of_Turbine_Ramp_up_1_Second AFCE  
                              _isdigit$7616 0061                              _Wind_Speed_Cal 5FF6  
                            _Wind_Speed_Avg 000D                              _R_PF_Calc$8057 00B4  
                   __end_of_Error_Flag_Kill 95D6                   _Timer1_OF_counter_Turbine 03F4  
                         ?_VFD_Freq_Step_up 0025                                _Ramp_Up_Slip 9E8C  
                    __end_of_Five_Sec_Delay AE32                        __end_of_Power_Factor 9760  
                               ??_B_PF_Calc 00B4                                  sin@coeff_a FC2D  
                                sin@coeff_b FC3C                             _Gen_EP_Err_Flag 00E3  
                      __end_of_VFD_Error_IO B086                          ??_VFD_Freq_Step_up 00B4  
                                  ?_i2c_Ack 0025                            _Gc_Pitch_Coil_Fb 02CD  
                                  ?_Grid_OV 0025                                    ?_Grid_UV 0025  
                           _GCY_phasev_flag 02C6                                 ?_usart_init 0025  
                         _Start_Stop_Flag_1 02D9                        __end_of_Wind_Average 46E2  
                        __end_of_Power_Calc 6980                           _Wind_Average$8050 01BF  
                         _Wind_Average$8043 01AA                           _Wind_Average$8044 01AD  
                         _Wind_Average$8045 01B0                           _Wind_Average$8046 01B3  
                         _Wind_Average$8047 01B6                           _Wind_Average$8048 01B9  
                         _Wind_Average$8049 01BC                                  ?_Temp_Read 0025  
                           ??_Pitch_Release 0060               _Gc_Grid_Phase_Unbalance_Error 02CB  
                           _Start_Stop_Flag 001F                                ?_Timer7_Init 0025  
              __size_of_Communication_Error 006A                              _Y_Power_Factor 0272  
                    ??_Power_Meter_Error_IO 0060                                   __pintcode 0008  
                             _G_RPM_Counter 015A                               __pmediumconst FBB6  
               __size_of_Grid_Minimum_Power 005C                                    ?___awdiv 0066  
                                 __ptext100 AD4A                                   __ptext101 7BA0  
                                 __ptext110 B0FC                                   __ptext102 969E  
                                 __ptext111 AB92                                   __ptext103 673A  
                                 __ptext120 700A                                   __ptext112 B07A  
                                 __ptext104 71E0                                   __ptext121 88D8  
                                 __ptext113 B0B8                                   __ptext105 7FE2  
                                 __ptext130 A1D0                                   __ptext122 6DDC  
                                 __ptext114 B0C2                                   __ptext106 AB52  
                                 __ptext131 8EE2                                   __ptext123 296A  
                                 __ptext115 B0E6                                   __ptext107 B0A4  
                                 __ptext140 7552                                   __ptext132 ACB2  
                                 __ptext124 9760                                   __ptext116 B0EE  
                                 __ptext108 A848                                   __ptext141 AC0E  
                                 __ptext133 8148                                   __ptext125 5AEC  
                                 __ptext117 B048                                   __ptext109 B0AE  
                                  ?___ftadd 008D                                   __ptext142 9F3A  
                                 __ptext134 AAC2                                   __ptext126 8BFA  
                                 __ptext118 4E34                                   __ptext143 519A  
                                 __ptext135 64D2                                   __ptext127 A308  
                                 __ptext119 AEDC                                   __ptext144 A398  
                                 __ptext136 AD7A                                   __ptext128 83F2  
                                 __ptext145 B0CC                                   __ptext137 82A6  
                                 __ptext129 95D6                                   __ptext146 AFA4  
                                 __ptext138 89E4                                   __ptext147 A5AA  
                                  ?___awmod 0060                                    ?___ftdiv 00A5  
                                  ?___ftneg 0083                                    ?___lldiv 0060  
                                  ?___ftmul 0074                                    ?___llmod 006D  
                                  ?___ftsub 00AB                                   __npowers_ FBDF  
                                  ?___fttol 008A                              _DC_Bus_Current 020F  
                              BCDtoI@result 0079                                 ??_UART_Data 00BC  
         __end_of_Turbine_Start_up_1_Second B0A4                     __size_of_Grid_Frequency 0084  
                        __end_of_Start_Stop 999C                    __end_of_UART_Data_String 3848  
                      I2C_Read@v_i2cData_u8 0061                                 __tdiv_to_l_ 76FE  
                                  _CCP10CON 000F40                     _Stopping_state_function 9FE8  
                              ??__div_to_l_ 0066                       _Timer1_OF_counter_Old 02A2  
                     _Timer1_OF_counter_New 0136                ?_Last_3_EEPROM_ERROR_Trigger 0025  
                   ??_PM_ADC_Initialization 0060                       _Timer1_interrupt_flag 0187  
                            _DC_Bus_Voltage 91B0                                    ?_isdigit 0025  
                                  _I2C_Init AFF2                                    _I2C_Read AD1A  
                          ??_VFD_RS485_Data 00B4                         _Gi_TRPM_Pulse_width 05D2  
                                 _eval_poly 8EE2                                    _I2C_Stop B0D6  
                          _Grid_Und_voltage 00E6                                   _counter_1 00F3  
        __size_of_Timer0_OneSecond_Function 00D6                      __end_of_Wind_Speed_Cal 6264  
                         _Generator_RPM_FLT 0004                           _Generator_IO_init B0EE  
                         _Generator_RPM_INT 0288                           _Generator_RPM_Cal 4E34  
                         _Generator_RPM_Old 0109                           _Generator_RPM_New 0106  
              _VFD_communication_Error_Flag 00F1                             _RTC_GetDateTime 9A58  
                             _G_RPM_counter 00E2                               ??_IO_Initiate 0060  
                           _Grid_UV_Counter 0166                                 ??i2___ftadd 0033  
                            __size_of_floor 00FE                              __size_of_frexp 0090  
                        ?_Generator_IO_init 0025                              __size_of_scale 04F6  
                        ?_Generator_RPM_Cal 0025                     ?_Generator_RPM_Initiate 0025  
                      _EEPROM_Error_Monitor 5D84              __size_of_Rampup_state_function 0006  
                            __size_of_putch 000E               __end_of_Rampup_state_function B0FC  
                 _Grid_Phase_Sequence_Error 00E5                     __end_of_Turbine_RPM_Cal 4A96  
                  ??_startup_state_function 0060                             ?_Five_Sec_Delay 0025  
                 _Timer0_Initial_delay_flag 0185                              ___wmul@product 0072  
                               ??_R_PF_Calc 00B4                              _R_Power_Factor 0597  
                          _Grid_Ovr_voltage 0165                     __size_of_Pitch_Feedback 006A  
                       ??_Generator_IO_init 0060                     __size_of_Rotor_Slip_Cal 00B2  
                       ??_Generator_RPM_Cal 00B4                                    _PIE1bits 000F9D  
                                  _GRPM_Cap 0284                                    _PIE3bits 000FA3  
                                  _B_PF_Avg 296A               __size_of_Pitch_PS_ON_Function 0036  
                             _VFD_Data_Kill ADD8                               _Generator_RPM AA6E  
                                  _PIR1bits 000F9E                          __end_of__div_to_l_ 7A24  
                                  _PIR3bits 000FA4                           ?_Capacitor_Adding 0025  
           _Timer1_OF_counter_Wind_temp_Old 02A6             _Timer1_OF_counter_Wind_temp_New 013A  
                                  _KVA_Sign 0167                  __end_of_Turbine_Over_Speed AA6E  
                                  _VFD_RAMP 0197                                    _SSP1CON1 000FC6  
                        ??_Capacitor_Adding 0025                             _RS485_Data_Flag 0177  
                                  _SSP1STAT 000FC7                              _Freq_Calc$8056 00B4  
                     __end_of_One_Sec_Delay AEDC                                 ??_Cons_Gene 00A2  
                                  _RTC_Init AF6A                           ??_Last_Five_Error 0060  
                               ??_Y_PF_Calc 00B4                                    _GfB_volt 054F  
               __size_of_VFD_Run_Time_Error 0044                            _int_eeprom_write ACE8  
                                  _RPM_Time 012C                            _wind_Frequency_2 04D8  
                    __end_of_DC_Bus_Voltage 9292                                    _TRPM_Cal 00EA  
                         ___wmul@multiplier 006E                                    i2___ftge A398  
                                  _PWM_Temp 04A8                            __CFG_SOSCSEL$DIG 000000  
                               ??_Freq_Calc 00B4                                 ??_i2c_NoAck 0060  
                         ?_Turbine_Pitching 0025                             _i2c_WaitForIdle AFE0  
                 __end_of_Generator_IO_init B0F6                                  printf@flag 01B3  
                                  _GfR_volt 0561                   __end_of_Generator_RPM_Cal 519A  
                                printf@fval 01C1            __end_of_Wind_Speed_Error_Trigger 88D8  
                                printf@prec 01C4                                    _R_PF_Avg 2194  
                                ?_eval_poly 0099                                    _GfY_volt 056A  
                       __size_of_usart_init 001A                                   _usart_str AC46  
                        ??_Turbine_Pitching 0060               ??_Last_3_EEPROM_ERROR_Trigger 0064  
                           ?_Wind_Speed_Cal 0025                           _Wind_Cut_Out_Flag 00F2  
                          __size_of_RAMP_UP 00F4              __end_of_Generator_RPM_Initiate B056  
                                  _Lead_Lag 02D6                       ?_EEPROM_Error_Monitor 0025  
                             _VFD_Frequency 0194                                    _Y_PF_Avg 19BE  
                          ?_Error_Flag_Kill 0025                                    _Key_Flag 016D  
                      __end_of_PM_Error_Led 54EE                               _Y_C_Avg_Steps 04F6  
                                  _Read_Adc AB52                       _Wind_Speed_2_Initiate B002  
                          _Pitch_Ps_Counter 03EA                    __end_of_Wind_Speed_2_Cal 64D2  
                           _Grid_Ov_Counter 0164                         __end_of_IO_Initiate ABD2  
                              _Timer0_Falg1 0183                                _Timer0_Falg2 0184  
                                 frexp@eptr 0063                                  _EECON1bits 000F7F  
                              _GCphase_flag 02C7                              ?_VFD_Data_Kill 0025  
                             _GCDc_low_flag 02BF                            __size_of_i2c_Ack 000A  
                     __size_of_VFD_IO_Error 0018                            __size_of_Grid_OV 0168  
                          __size_of_Grid_UV 0168                              ?_Generator_RPM 0025  
                                  __Hrparam 0000                                 ??_Temp_Read 00B4  
                               _GCWind_flag 02C5                               _Y_PF_Avg$8100 0693  
                             _Y_PF_Avg$8101 0696                               _Y_PF_Avg$8110 06B1  
                             _Y_PF_Avg$8102 0699                               _Y_PF_Avg$8111 06B4  
                             _Y_PF_Avg$8103 069C                               _Y_PF_Avg$8112 06B7  
                             _Y_PF_Avg$8104 069F                               _Y_PF_Avg$8113 06BA  
                             _Y_PF_Avg$8105 06A2                               _Y_PF_Avg$8114 06BD  
                             _Y_PF_Avg$8106 06A5                               _Y_PF_Avg$8107 06A8  
                             _Y_PF_Avg$8108 06AB                               _Y_PF_Avg$8109 06AE  
                             _Y_PF_Avg$8090 0675                               _Y_PF_Avg$8091 0678  
                             _Y_PF_Avg$8092 067B                               _Y_PF_Avg$8093 067E  
                             _Y_PF_Avg$8094 0681                               _Y_PF_Avg$8087 06C0  
                             _Y_PF_Avg$8095 0684                               _Y_PF_Avg$8088 06C3  
                             _Y_PF_Avg$8096 0687                               _Y_PF_Avg$8089 06C6  
                             _Y_PF_Avg$8097 068A                               _Y_PF_Avg$8098 068D  
                             _Y_PF_Avg$8099 0690                                    _Temp_Arr 03B4  
                                  _Slave_Id 05D6                                    _Time_Old 0227  
                                  _Time_New 01A4                                    __Lrparam 0000  
                      _Gf_Red_Phase_Voltage 0657                        _PM_IO_Initialization A848  
                                  _Wind_Cap 02B0                    ??_Generator_One_Feedback 0064  
         __size_of_Turbine_Ramp_up_1_Second 0012                             _Gf_Blue_Current 0648  
             __size_of_Turbine_RPM_Initiate 000C                   ?_Turbine_Ramp_up_1_Second 0025  
                                  _Total_Pf 05A9                            __size_of___awdiv 00BE  
                          __size_of___ftadd 0268                            __size_of___awmod 00A2  
                 ??_Stopping_state_function 00A2                            __size_of___ftdiv 014C  
                          __size_of___ftneg 0030                            __size_of___lldiv 00BC  
                               _GRPM_Time_1 02E8                                    ___altoft A1D0  
                          __size_of___ftmul 015E                                    _Turb_RPM 04B7  
                          __size_of___llmod 009A                            __size_of___ftsub 004C  
                          __size_of___fttol 0144                                    _cos$8152 01AA  
                           _G_RPM_counter_1 05C8                                    ___awtoft AC0E  
                                  ___ftpack 89E4                                    ___lbtoft ADAA  
                               _fround$8148 0089                                 _fround$8149 0086  
                             _Wind_Speed_10 05AF                                    ___lltoft A52E  
                           ?_DC_Bus_Voltage 0025                              _Feedback_Error 0154  
                   __end_of_RTC_GetDateTime 9B10                               ??_usart2_init 0060  
                                  ___lwtoft AEDC                  ??_Turbine_OverLoaded_Error 00A2  
                      _Generator_Over_Speed 0163                                _Motor_slip_1 058B  
                     _Gf_Blue_Phase_Voltage 064B                                  ?_usart_str 0060  
                                  _lc_T_RPM 04D2                            __size_of_isdigit 002A  
                     _Timer0_RAMPUP_Counter 00EE                           _EEPROM_Error_Flag 0017  
                                  __ptext10 3848                                    __ptext11 B062  
                                  __ptext20 3140                                    __ptext12 46E2  
                                  __ptext21 B01E                                    __ptext13 B06E  
                                  __ptext30 76FE                                    __ptext22 AC46  
                                  __ptext14 B010                                    __ptext31 789C  
                                  __ptext23 0000                                    __ptext15 9292  
                                  __ptext40 B09A                                    __ptext32 A52E  
                                  __ptext24 3DBA                                    __ptext16 42B0  
                                  __ptext41 90C4                                    __ptext33 A26E  
                                  __ptext25 B02C                                    __ptext17 A4AC  
                                  __ptext50 950C                                    __ptext42 AFBC  
                                  __ptext34 999C                                    __ptext26 AE5E  
                                  __ptext18 A698                                    __ptext51 54EE  
                                  __ptext43 AE88                                    __ptext35 9A58  
                                  __ptext27 581C                                    __ptext19 0CE4  
                                  __ptext60 A906                                    __ptext52 8FD6  
                                  __ptext44 AEB2                                    __ptext36 AD1A  
                                  __ptext28 A08E                                    __ptext61 98DE  
                                  __ptext53 943C                                    __ptext45 AE06  
                                  __ptext37 B086                                    __ptext29 9820  
                                  __ptext70 AF4A                                    __ptext62 9D2A  
                                  __ptext54 87AC                                    __ptext46 9B10  
                                  __ptext38 B090                                    __ptext71 8536  
                                  __ptext63 8676                                    __ptext55 AB0E  
                                  __ptext47 AF2A                                    __ptext39 9368  
                                  __ptext80 5D84                                    __ptext72 7E7A  
                                  __ptext64 9E8C                                    __ptext56 A624  
                                  __ptext48 9DDC                                    __ptext81 ACE8  
                                  __ptext73 A962                                    __ptext65 AC7C  
                                  __ptext57 A8AA                                    __ptext49 9FE8  
                                  __ptext90 6BAE                                    __ptext82 AE32  
                                  __ptext74 A9BE                                    __ptext66 A70A  
                                  __ptext58 9C78                       __size_of_Power_Factor 00C2  
                                  __ptext91 2194                                    __ptext83 7A24  
                                  __ptext75 A428                                    __ptext67 8AF0  
                                  __ptext59 AA1A                                    __ptext92 AF6A  
                                  __ptext84 B0F6                                    __ptext76 AA6E  
                                  __ptext68 ADAA                                    __ptext93 AFCE  
                                  __ptext85 8DEE                                    __ptext77 A774  
                                  __ptext69 7D12                                    __ptext94 AFE0  
                                  __ptext86 8CF8                                    __ptext78 91B0  
                                  __ptext95 B0D6                                    __ptext87 ADD8  
                                  __ptext79 A7DE                                    __ptext96 B0DE  
                                  __ptext88 B102                                    __ptext97 AFF2  
                                  __ptext89 ABD2                                    __ptext98 A130  
                                  __ptext99 B03A                                _SSP1CON2bits 000FC5  
                                  _sin$8153 00BA                                    __powers_ FC06  
                         _EEPROM_Error_Stop 54EE                           _Two_Delay_counter 018C  
                     __size_of_VFD_Error_IO 000C                                _VFD_IO_Error AFA4  
                     __size_of_Wind_Average 0432                          ?_EEPROM_Error_Stop 0025  
                       _Pitch_Solenoid_init B0E6                            _Generator_RPM_10 0531  
                    __size_of_RPM_Data_Kill 0172                               ??_usart_str_1 0060  
                             ??_usart_str_2 0060                          _Five_Delay_counter 0155  
                          ?_Turbine_RPM_Cal 0025                               __size_of_main 01B4  
                    _Gf_Turbine2Wheel_Ratio 04A2             __size_of_startup_state_function 0024  
                             __size_of_sqrt 01BE                __size_of_Turbine_Under_speed 005C  
                               _B_Gap_Ratio 0103                 _lc_Motor_Slip_Error_Counter 02E2  
                       ??_EEPROM_Error_Stop 0064                       ?_PM_IO_Initialization 0025  
                   ??_VFD_RS485_Data_filter 00B6                 __end_of_Grid_Phase_Sequence AF6A  
                        _Slip_Error_Counter 017B                            ??_Phase_Sequence 0065  
                     _VFD_DC_Bus_High_Error 0190                          _VFD_PS_ON_Function A624  
                                  int$flags 0049                     __end_of_i2c_WaitForIdle AFF2  
                      __size_of_Timer7_Init 000C                              _Grid_Frequency A428  
                                 printf@len 01B1                     __size_of_Volt_Curr_Read 039E  
                                 printf@exp 01BD                                   printf@val 01B9  
                              _SSP1STATbits 000FC7                        ?_Pitch_Solenoid_init 0025  
            __size_of_Turbine_Restore_Check 00B2               __end_of_Turbine_Restore_Check 9D2A  
                            _Start_up_Error 01C8                                _Power_Factor 969E  
                              _Wind_Cap_Old 0144                                _Wind_Cap_New 0140  
            __size_of_VFD_Contactor_IO_init 000A                           _Gf_Grid_Frequency 064E  
                       ?_VFD_PS_ON_Function 0025               __end_of_VFD_Contactor_IO_init B0C2  
                              _VFD_Error_IO B07A                                _VFD_Error_No 0020  
                __size_of_Generator_IO_init 0008                                   putch@data 0060  
                __size_of_Generator_RPM_Cal 0366           __size_of_RS485_Data_communication 00A0  
                                _INTCONbits 000FF2                   ?_RS485_Data_communication 0025  
                               ??_eval_poly 00A0                  __end_of_Grid_Maximum_Power AA1A  
                              _Wind_Average 42B0                  ?_Error_Checking_One_Second 0025  
                 __end_of_EEPROM_Error_Stop 581C                         _Communication_Error A7DE  
                    ??_EEPROM_Error_Monitor 0064                                    isdigit@c 0062  
                               _B_Current_1 051C                    ?_PM_Timer_Initialization 0025  
                                  scale@scl 0089                          RTC_GetDateTime@rtc 0062  
                       __end_of_usart2_init AD7A                ??_Ramp_Up_Slip_Error_Trigger 00A2  
                               _IO_Initiate AB92                    _Wind_Speed_Error_Trigger 87AC  
                              _Wind_Speed_0 0236                                _Wind_Speed_1 023C  
                              _Wind_Speed_2 0242                                _Wind_Speed_3 0248  
                              _Wind_Speed_4 024E                                _Wind_Speed_5 0254  
                              _Wind_Speed_6 025A                                _Wind_Speed_7 0260  
                              _Wind_Speed_8 0266                                _Wind_Speed_9 04C0  
           __end_of_Stopping_state_function A08E                                    intlevel2 0000  
                          __tdiv_to_l_@exp1 006E                            __tdiv_to_l_@cntr 006D  
                    ?_Wind_Speed_2_Initiate 0025                            __tdiv_to_l_@quot 0069  
                           ??_VFD_Data_Kill 0060                              _Pitch_Feedback A70A  
                          ___lldiv@dividend 0060                        ??_VFD_PS_ON_Function 0060  
                           ??_Generator_RPM 00A2                              _Rotor_Slip_Cal 9D2A  
                                _EP_Errors1 0018                                  _EP_Errors2 0019  
                                _EP_Errors3 001A                                ??_usart_init 0060  
               __size_of_Error_Scan_Ramp_up 00B6                             _Generator_RPM_0 052B  
                           _Generator_RPM_1 052E                             _Generator_RPM_2 0534  
                           _Generator_RPM_3 0537                             _Generator_RPM_4 053A  
                           _Generator_RPM_5 053D                             _Generator_RPM_6 0540  
                           _Generator_RPM_7 0543                             _Generator_RPM_8 0546  
                           _Generator_RPM_9 0549                                  _RCSTA2bits 000F22  
                               _VFD_ON_Flag 0195                                  _OSCILLATOR B0FC  
                    _Pitch_FB_Error_counter 0176                      __size_of_Two_Sec_Delay 002A  
                      ?_Communication_Error 0025                __size_of_Error_Scan_start_up 00EC  
                               _PF_Lead_Lag 02D7                 __size_of_Error_Scan_Running 00B0  
                       __end_of_usart_str_1 B02C                         __end_of_usart_str_2 B048  
                    __end_of_Grid_Frequency A4AC                     _Turbine_Over_Speed_Flag 00EF  
                    __size_of_Volt_Curr_Avg 0572                                    printf@ap 01AF  
                                  printf@cp 01AD                        _Tur_OverLoaded_Error 0189  
           __size_of_Generator_One_Feedback 006A                                 _VFD_Counter 05FC  
                 __size_of_VFD_Freq_Step_up 00F6                 __end_of_Wind_Speed_Initiate B062  
                     ??_Pitch_Solenoid_init 0060                           _Phase_Sequence_Ok 001E  
                             _RPM_Data_Kill 7BA0                                ?__tdiv_to_l_ 0060  
                         _Gf_Yellow_Current 0660                           ?_UART_Data_String 0025  
                    _startup_state_function AF06                             _Gi_TRPM_Cap_Old 05D0  
                           _Gi_TRPM_Cap_New 05CE                                 _printf$8151 01AA  
                          ?_RTC_GetDateTime 0062                          _T_Overload_counter 0181  
                        ??_UART_Data_String 00BC                            ___lldiv@quotient 0068  
         _Timer1_OF_counter_Wind_2_temp_Old 02A4           _Timer1_OF_counter_Wind_2_temp_New 0138  
                               ??_usart_str 0062              __size_of_PM_ADC_Initialization 000A  
                  __size_of_Timer1_Initiate 000E               __end_of_PM_ADC_Initialization B0B8  
                     __size_of_PM_Error_Led 0354                          __end_of_usart_init AFA4  
         __end_of_Error_Checking_One_Second 950C                            ??_Five_Sec_Delay 0060  
                                _VFD_On_Off 0196                           _Communication_OTP 0015  
                    __end_of_Pitch_Feedback A774                    __size_of_int_eeprom_read 002C  
                    __end_of_Rotor_Slip_Cal 9DDC                           _Desired_Frequency 0016  
                             _wind_Time_1_2 04FC                    __end_of_int_eeprom_write AD1A  
                   _Frequency_Error_counter 0159                         _Pitch_FB_Error_Flag 00E8  
                             _GCM_slip_flag 02C1                                 _GfB_current 054C  
                         _lc_Previous_T_RPM 04CF                             _Last_Five_Error AF2A  
                    ??_PM_IO_Initialization 0060                       ??_Communication_Error 0060  
                              _Rotor_slip_1 059D                  __end_of_Grid_Minimum_Power A9BE  
